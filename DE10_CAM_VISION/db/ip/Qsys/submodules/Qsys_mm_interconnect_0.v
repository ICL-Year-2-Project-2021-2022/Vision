// Qsys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Qsys_mm_interconnect_0 (
		input  wire        altpll_0_c2_clk,                                            //                                          altpll_0_c2.clk
		input  wire        altpll_1_c0_clk,                                            //                                          altpll_1_c0.clk
		input  wire        clk_50_clk_clk,                                             //                                           clk_50_clk.clk
		input  wire        altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset, // altpll_0_inclk_interface_reset_reset_bridge_in_reset.reset
		input  wire        COLOR_FILTER_0_reset_reset_bridge_in_reset_reset,           //           COLOR_FILTER_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_reset_reset_bridge_in_reset_reset,               //               nios2_gen2_reset_reset_bridge_in_reset.reset
		input  wire        TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset,     //     TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset.reset
		input  wire [18:0] nios2_gen2_data_master_address,                             //                               nios2_gen2_data_master.address
		output wire        nios2_gen2_data_master_waitrequest,                         //                                                     .waitrequest
		input  wire [3:0]  nios2_gen2_data_master_byteenable,                          //                                                     .byteenable
		input  wire        nios2_gen2_data_master_read,                                //                                                     .read
		output wire [31:0] nios2_gen2_data_master_readdata,                            //                                                     .readdata
		output wire        nios2_gen2_data_master_readdatavalid,                       //                                                     .readdatavalid
		input  wire        nios2_gen2_data_master_write,                               //                                                     .write
		input  wire [31:0] nios2_gen2_data_master_writedata,                           //                                                     .writedata
		input  wire        nios2_gen2_data_master_debugaccess,                         //                                                     .debugaccess
		input  wire [18:0] nios2_gen2_instruction_master_address,                      //                        nios2_gen2_instruction_master.address
		output wire        nios2_gen2_instruction_master_waitrequest,                  //                                                     .waitrequest
		input  wire        nios2_gen2_instruction_master_read,                         //                                                     .read
		output wire [31:0] nios2_gen2_instruction_master_readdata,                     //                                                     .readdata
		output wire        nios2_gen2_instruction_master_readdatavalid,                //                                                     .readdatavalid
		output wire [1:0]  altpll_0_pll_slave_address,                                 //                                   altpll_0_pll_slave.address
		output wire        altpll_0_pll_slave_write,                                   //                                                     .write
		output wire        altpll_0_pll_slave_read,                                    //                                                     .read
		input  wire [31:0] altpll_0_pll_slave_readdata,                                //                                                     .readdata
		output wire [31:0] altpll_0_pll_slave_writedata,                               //                                                     .writedata
		output wire [1:0]  altpll_1_pll_slave_address,                                 //                                   altpll_1_pll_slave.address
		output wire        altpll_1_pll_slave_write,                                   //                                                     .write
		output wire        altpll_1_pll_slave_read,                                    //                                                     .read
		input  wire [31:0] altpll_1_pll_slave_readdata,                                //                                                     .readdata
		output wire [31:0] altpll_1_pll_slave_writedata,                               //                                                     .writedata
		output wire [3:0]  COLOR_FILTER_0_avalon_mm_slave_address,                     //                       COLOR_FILTER_0_avalon_mm_slave.address
		output wire        COLOR_FILTER_0_avalon_mm_slave_write,                       //                                                     .write
		output wire        COLOR_FILTER_0_avalon_mm_slave_read,                        //                                                     .read
		input  wire [31:0] COLOR_FILTER_0_avalon_mm_slave_readdata,                    //                                                     .readdata
		output wire [31:0] COLOR_FILTER_0_avalon_mm_slave_writedata,                   //                                                     .writedata
		output wire        COLOR_FILTER_0_avalon_mm_slave_chipselect,                  //                                                     .chipselect
		output wire [3:0]  COM_COUNTER_0_avalon_mm_slave_address,                      //                        COM_COUNTER_0_avalon_mm_slave.address
		output wire        COM_COUNTER_0_avalon_mm_slave_write,                        //                                                     .write
		output wire        COM_COUNTER_0_avalon_mm_slave_read,                         //                                                     .read
		input  wire [31:0] COM_COUNTER_0_avalon_mm_slave_readdata,                     //                                                     .readdata
		output wire [31:0] COM_COUNTER_0_avalon_mm_slave_writedata,                    //                                                     .writedata
		output wire        COM_COUNTER_0_avalon_mm_slave_chipselect,                   //                                                     .chipselect
		output wire [4:0]  EDGE_BINS_0_avalon_mm_slave_address,                        //                          EDGE_BINS_0_avalon_mm_slave.address
		output wire        EDGE_BINS_0_avalon_mm_slave_write,                          //                                                     .write
		output wire        EDGE_BINS_0_avalon_mm_slave_read,                           //                                                     .read
		input  wire [31:0] EDGE_BINS_0_avalon_mm_slave_readdata,                       //                                                     .readdata
		output wire [31:0] EDGE_BINS_0_avalon_mm_slave_writedata,                      //                                                     .writedata
		output wire        EDGE_BINS_0_avalon_mm_slave_chipselect,                     //                                                     .chipselect
		output wire [8:0]  fir_0_0_control_address,                                    //                                      fir_0_0_control.address
		output wire        fir_0_0_control_write,                                      //                                                     .write
		output wire        fir_0_0_control_read,                                       //                                                     .read
		input  wire [31:0] fir_0_0_control_readdata,                                   //                                                     .readdata
		output wire [31:0] fir_0_0_control_writedata,                                  //                                                     .writedata
		output wire [3:0]  fir_0_0_control_byteenable,                                 //                                                     .byteenable
		input  wire        fir_0_0_control_readdatavalid,                              //                                                     .readdatavalid
		input  wire        fir_0_0_control_waitrequest,                                //                                                     .waitrequest
		output wire [2:0]  i2c_opencores_camera_avalon_slave_0_address,                //                  i2c_opencores_camera_avalon_slave_0.address
		output wire        i2c_opencores_camera_avalon_slave_0_write,                  //                                                     .write
		input  wire [7:0]  i2c_opencores_camera_avalon_slave_0_readdata,               //                                                     .readdata
		output wire [7:0]  i2c_opencores_camera_avalon_slave_0_writedata,              //                                                     .writedata
		input  wire        i2c_opencores_camera_avalon_slave_0_waitrequest,            //                                                     .waitrequest
		output wire        i2c_opencores_camera_avalon_slave_0_chipselect,             //                                                     .chipselect
		output wire [2:0]  i2c_opencores_mipi_avalon_slave_0_address,                  //                    i2c_opencores_mipi_avalon_slave_0.address
		output wire        i2c_opencores_mipi_avalon_slave_0_write,                    //                                                     .write
		input  wire [7:0]  i2c_opencores_mipi_avalon_slave_0_readdata,                 //                                                     .readdata
		output wire [7:0]  i2c_opencores_mipi_avalon_slave_0_writedata,                //                                                     .writedata
		input  wire        i2c_opencores_mipi_avalon_slave_0_waitrequest,              //                                                     .waitrequest
		output wire        i2c_opencores_mipi_avalon_slave_0_chipselect,               //                                                     .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,                        //                          jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                          //                                                     .write
		output wire        jtag_uart_avalon_jtag_slave_read,                           //                                                     .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,                       //                                                     .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,                      //                                                     .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,                    //                                                     .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,                     //                                                     .chipselect
		output wire [1:0]  key_s1_address,                                             //                                               key_s1.address
		input  wire [31:0] key_s1_readdata,                                            //                                                     .readdata
		output wire [1:0]  led_s1_address,                                             //                                               led_s1.address
		output wire        led_s1_write,                                               //                                                     .write
		input  wire [31:0] led_s1_readdata,                                            //                                                     .readdata
		output wire [31:0] led_s1_writedata,                                           //                                                     .writedata
		output wire        led_s1_chipselect,                                          //                                                     .chipselect
		output wire [1:0]  mipi_pwdn_n_s1_address,                                     //                                       mipi_pwdn_n_s1.address
		output wire        mipi_pwdn_n_s1_write,                                       //                                                     .write
		input  wire [31:0] mipi_pwdn_n_s1_readdata,                                    //                                                     .readdata
		output wire [31:0] mipi_pwdn_n_s1_writedata,                                   //                                                     .writedata
		output wire        mipi_pwdn_n_s1_chipselect,                                  //                                                     .chipselect
		output wire [1:0]  mipi_reset_n_s1_address,                                    //                                      mipi_reset_n_s1.address
		output wire        mipi_reset_n_s1_write,                                      //                                                     .write
		input  wire [31:0] mipi_reset_n_s1_readdata,                                   //                                                     .readdata
		output wire [31:0] mipi_reset_n_s1_writedata,                                  //                                                     .writedata
		output wire        mipi_reset_n_s1_chipselect,                                 //                                                     .chipselect
		output wire [8:0]  nios2_gen2_debug_mem_slave_address,                         //                           nios2_gen2_debug_mem_slave.address
		output wire        nios2_gen2_debug_mem_slave_write,                           //                                                     .write
		output wire        nios2_gen2_debug_mem_slave_read,                            //                                                     .read
		input  wire [31:0] nios2_gen2_debug_mem_slave_readdata,                        //                                                     .readdata
		output wire [31:0] nios2_gen2_debug_mem_slave_writedata,                       //                                                     .writedata
		output wire [3:0]  nios2_gen2_debug_mem_slave_byteenable,                      //                                                     .byteenable
		input  wire        nios2_gen2_debug_mem_slave_waitrequest,                     //                                                     .waitrequest
		output wire        nios2_gen2_debug_mem_slave_debugaccess,                     //                                                     .debugaccess
		output wire [14:0] onchip_memory2_0_s1_address,                                //                                  onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                  //                                                     .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                               //                                                     .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                              //                                                     .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                             //                                                     .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                             //                                                     .chipselect
		output wire        onchip_memory2_0_s1_clken,                                  //                                                     .clken
		output wire [1:0]  pio_0_s1_address,                                           //                                             pio_0_s1.address
		output wire        pio_0_s1_write,                                             //                                                     .write
		input  wire [31:0] pio_0_s1_readdata,                                          //                                                     .readdata
		output wire [31:0] pio_0_s1_writedata,                                         //                                                     .writedata
		output wire        pio_0_s1_chipselect,                                        //                                                     .chipselect
		output wire [1:0]  pio_1_s1_address,                                           //                                             pio_1_s1.address
		output wire        pio_1_s1_write,                                             //                                                     .write
		input  wire [31:0] pio_1_s1_readdata,                                          //                                                     .readdata
		output wire [31:0] pio_1_s1_writedata,                                         //                                                     .writedata
		output wire        pio_1_s1_chipselect,                                        //                                                     .chipselect
		output wire [13:0] PIXEL_BUFFER_0_avalon_mm_slave_address,                     //                       PIXEL_BUFFER_0_avalon_mm_slave.address
		output wire        PIXEL_BUFFER_0_avalon_mm_slave_write,                       //                                                     .write
		output wire        PIXEL_BUFFER_0_avalon_mm_slave_read,                        //                                                     .read
		input  wire [31:0] PIXEL_BUFFER_0_avalon_mm_slave_readdata,                    //                                                     .readdata
		output wire [31:0] PIXEL_BUFFER_0_avalon_mm_slave_writedata,                   //                                                     .writedata
		output wire        PIXEL_BUFFER_0_avalon_mm_slave_chipselect,                  //                                                     .chipselect
		output wire [3:0]  PIXEL_GRABBER_HSV_avalon_mm_slave_address,                  //                    PIXEL_GRABBER_HSV_avalon_mm_slave.address
		output wire        PIXEL_GRABBER_HSV_avalon_mm_slave_write,                    //                                                     .write
		output wire        PIXEL_GRABBER_HSV_avalon_mm_slave_read,                     //                                                     .read
		input  wire [31:0] PIXEL_GRABBER_HSV_avalon_mm_slave_readdata,                 //                                                     .readdata
		output wire [31:0] PIXEL_GRABBER_HSV_avalon_mm_slave_writedata,                //                                                     .writedata
		output wire        PIXEL_GRABBER_HSV_avalon_mm_slave_chipselect,               //                                                     .chipselect
		output wire [3:0]  PIXEL_GRABBER_RGB_avalon_mm_slave_address,                  //                    PIXEL_GRABBER_RGB_avalon_mm_slave.address
		output wire        PIXEL_GRABBER_RGB_avalon_mm_slave_write,                    //                                                     .write
		output wire        PIXEL_GRABBER_RGB_avalon_mm_slave_read,                     //                                                     .read
		input  wire [31:0] PIXEL_GRABBER_RGB_avalon_mm_slave_readdata,                 //                                                     .readdata
		output wire [31:0] PIXEL_GRABBER_RGB_avalon_mm_slave_writedata,                //                                                     .writedata
		output wire        PIXEL_GRABBER_RGB_avalon_mm_slave_chipselect,               //                                                     .chipselect
		output wire [3:0]  RGB_TO_HSV_avalon_mm_slave_address,                         //                           RGB_TO_HSV_avalon_mm_slave.address
		output wire        RGB_TO_HSV_avalon_mm_slave_write,                           //                                                     .write
		output wire        RGB_TO_HSV_avalon_mm_slave_read,                            //                                                     .read
		input  wire [31:0] RGB_TO_HSV_avalon_mm_slave_readdata,                        //                                                     .readdata
		output wire [31:0] RGB_TO_HSV_avalon_mm_slave_writedata,                       //                                                     .writedata
		output wire        RGB_TO_HSV_avalon_mm_slave_chipselect,                      //                                                     .chipselect
		output wire [1:0]  sw_s1_address,                                              //                                                sw_s1.address
		input  wire [31:0] sw_s1_readdata,                                             //                                                     .readdata
		output wire [0:0]  sysid_qsys_control_slave_address,                           //                             sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,                          //                                                     .readdata
		output wire [2:0]  TERASIC_AUTO_FOCUS_0_mm_ctrl_address,                       //                         TERASIC_AUTO_FOCUS_0_mm_ctrl.address
		output wire        TERASIC_AUTO_FOCUS_0_mm_ctrl_write,                         //                                                     .write
		output wire        TERASIC_AUTO_FOCUS_0_mm_ctrl_read,                          //                                                     .read
		input  wire [31:0] TERASIC_AUTO_FOCUS_0_mm_ctrl_readdata,                      //                                                     .readdata
		output wire [31:0] TERASIC_AUTO_FOCUS_0_mm_ctrl_writedata,                     //                                                     .writedata
		output wire        TERASIC_AUTO_FOCUS_0_mm_ctrl_chipselect,                    //                                                     .chipselect
		output wire [2:0]  timer_s1_address,                                           //                                             timer_s1.address
		output wire        timer_s1_write,                                             //                                                     .write
		input  wire [15:0] timer_s1_readdata,                                          //                                                     .readdata
		output wire [15:0] timer_s1_writedata,                                         //                                                     .writedata
		output wire        timer_s1_chipselect,                                        //                                                     .chipselect
		output wire [2:0]  timer_0_s1_address,                                         //                                           timer_0_s1.address
		output wire        timer_0_s1_write,                                           //                                                     .write
		input  wire [15:0] timer_0_s1_readdata,                                        //                                                     .readdata
		output wire [15:0] timer_0_s1_writedata,                                       //                                                     .writedata
		output wire        timer_0_s1_chipselect,                                      //                                                     .chipselect
		output wire [2:0]  uart_0_s1_address,                                          //                                            uart_0_s1.address
		output wire        uart_0_s1_write,                                            //                                                     .write
		output wire        uart_0_s1_read,                                             //                                                     .read
		input  wire [15:0] uart_0_s1_readdata,                                         //                                                     .readdata
		output wire [15:0] uart_0_s1_writedata,                                        //                                                     .writedata
		output wire        uart_0_s1_begintransfer,                                    //                                                     .begintransfer
		output wire        uart_0_s1_chipselect                                        //                                                     .chipselect
	);

	wire         nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_data_master_agent:av_waitrequest -> nios2_gen2_data_master_translator:uav_waitrequest
	wire  [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_data_master_agent:av_readdata -> nios2_gen2_data_master_translator:uav_readdata
	wire         nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_data_master_translator:uav_debugaccess -> nios2_gen2_data_master_agent:av_debugaccess
	wire  [18:0] nios2_gen2_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_data_master_translator:uav_address -> nios2_gen2_data_master_agent:av_address
	wire         nios2_gen2_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_data_master_translator:uav_read -> nios2_gen2_data_master_agent:av_read
	wire   [3:0] nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_data_master_translator:uav_byteenable -> nios2_gen2_data_master_agent:av_byteenable
	wire         nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_data_master_agent:av_readdatavalid -> nios2_gen2_data_master_translator:uav_readdatavalid
	wire         nios2_gen2_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_data_master_translator:uav_lock -> nios2_gen2_data_master_agent:av_lock
	wire         nios2_gen2_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_data_master_translator:uav_write -> nios2_gen2_data_master_agent:av_write
	wire  [31:0] nios2_gen2_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_data_master_translator:uav_writedata -> nios2_gen2_data_master_agent:av_writedata
	wire   [2:0] nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_data_master_translator:uav_burstcount -> nios2_gen2_data_master_agent:av_burstcount
	wire         nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_instruction_master_agent:av_waitrequest -> nios2_gen2_instruction_master_translator:uav_waitrequest
	wire  [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_instruction_master_agent:av_readdata -> nios2_gen2_instruction_master_translator:uav_readdata
	wire         nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_instruction_master_translator:uav_debugaccess -> nios2_gen2_instruction_master_agent:av_debugaccess
	wire  [18:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_instruction_master_translator:uav_address -> nios2_gen2_instruction_master_agent:av_address
	wire         nios2_gen2_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_instruction_master_translator:uav_read -> nios2_gen2_instruction_master_agent:av_read
	wire   [3:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_instruction_master_translator:uav_byteenable -> nios2_gen2_instruction_master_agent:av_byteenable
	wire         nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_instruction_master_agent:av_readdatavalid -> nios2_gen2_instruction_master_translator:uav_readdatavalid
	wire         nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_instruction_master_translator:uav_lock -> nios2_gen2_instruction_master_agent:av_lock
	wire         nios2_gen2_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_instruction_master_translator:uav_write -> nios2_gen2_instruction_master_agent:av_write
	wire  [31:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_instruction_master_translator:uav_writedata -> nios2_gen2_instruction_master_agent:av_writedata
	wire   [2:0] nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_instruction_master_translator:uav_burstcount -> nios2_gen2_instruction_master_agent:av_burstcount
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire  [18:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_uart_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire         jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_uart_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_uart_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [99:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [99:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [98:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [26:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] color_filter_0_avalon_mm_slave_agent_m0_readdata;                                 // COLOR_FILTER_0_avalon_mm_slave_translator:uav_readdata -> COLOR_FILTER_0_avalon_mm_slave_agent:m0_readdata
	wire         color_filter_0_avalon_mm_slave_agent_m0_waitrequest;                              // COLOR_FILTER_0_avalon_mm_slave_translator:uav_waitrequest -> COLOR_FILTER_0_avalon_mm_slave_agent:m0_waitrequest
	wire         color_filter_0_avalon_mm_slave_agent_m0_debugaccess;                              // COLOR_FILTER_0_avalon_mm_slave_agent:m0_debugaccess -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] color_filter_0_avalon_mm_slave_agent_m0_address;                                  // COLOR_FILTER_0_avalon_mm_slave_agent:m0_address -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_address
	wire   [3:0] color_filter_0_avalon_mm_slave_agent_m0_byteenable;                               // COLOR_FILTER_0_avalon_mm_slave_agent:m0_byteenable -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_byteenable
	wire         color_filter_0_avalon_mm_slave_agent_m0_read;                                     // COLOR_FILTER_0_avalon_mm_slave_agent:m0_read -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_read
	wire         color_filter_0_avalon_mm_slave_agent_m0_readdatavalid;                            // COLOR_FILTER_0_avalon_mm_slave_translator:uav_readdatavalid -> COLOR_FILTER_0_avalon_mm_slave_agent:m0_readdatavalid
	wire         color_filter_0_avalon_mm_slave_agent_m0_lock;                                     // COLOR_FILTER_0_avalon_mm_slave_agent:m0_lock -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_lock
	wire  [31:0] color_filter_0_avalon_mm_slave_agent_m0_writedata;                                // COLOR_FILTER_0_avalon_mm_slave_agent:m0_writedata -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_writedata
	wire         color_filter_0_avalon_mm_slave_agent_m0_write;                                    // COLOR_FILTER_0_avalon_mm_slave_agent:m0_write -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_write
	wire   [2:0] color_filter_0_avalon_mm_slave_agent_m0_burstcount;                               // COLOR_FILTER_0_avalon_mm_slave_agent:m0_burstcount -> COLOR_FILTER_0_avalon_mm_slave_translator:uav_burstcount
	wire         color_filter_0_avalon_mm_slave_agent_rf_source_valid;                             // COLOR_FILTER_0_avalon_mm_slave_agent:rf_source_valid -> COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] color_filter_0_avalon_mm_slave_agent_rf_source_data;                              // COLOR_FILTER_0_avalon_mm_slave_agent:rf_source_data -> COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         color_filter_0_avalon_mm_slave_agent_rf_source_ready;                             // COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:in_ready -> COLOR_FILTER_0_avalon_mm_slave_agent:rf_source_ready
	wire         color_filter_0_avalon_mm_slave_agent_rf_source_startofpacket;                     // COLOR_FILTER_0_avalon_mm_slave_agent:rf_source_startofpacket -> COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         color_filter_0_avalon_mm_slave_agent_rf_source_endofpacket;                       // COLOR_FILTER_0_avalon_mm_slave_agent:rf_source_endofpacket -> COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_valid;                          // COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:out_valid -> COLOR_FILTER_0_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_data;                           // COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:out_data -> COLOR_FILTER_0_avalon_mm_slave_agent:rf_sink_data
	wire         color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_ready;                          // COLOR_FILTER_0_avalon_mm_slave_agent:rf_sink_ready -> COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                  // COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> COLOR_FILTER_0_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                    // COLOR_FILTER_0_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> COLOR_FILTER_0_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_valid;                        // COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_src_valid -> COLOR_FILTER_0_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_data;                         // COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_src_data -> COLOR_FILTER_0_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_ready;                        // COLOR_FILTER_0_avalon_mm_slave_agent_rdata_fifo:in_ready -> COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> COLOR_FILTER_0_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> COLOR_FILTER_0_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                            // COLOR_FILTER_0_avalon_mm_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [26:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> COLOR_FILTER_0_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> COLOR_FILTER_0_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> COLOR_FILTER_0_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] com_counter_0_avalon_mm_slave_agent_m0_readdata;                                  // COM_COUNTER_0_avalon_mm_slave_translator:uav_readdata -> COM_COUNTER_0_avalon_mm_slave_agent:m0_readdata
	wire         com_counter_0_avalon_mm_slave_agent_m0_waitrequest;                               // COM_COUNTER_0_avalon_mm_slave_translator:uav_waitrequest -> COM_COUNTER_0_avalon_mm_slave_agent:m0_waitrequest
	wire         com_counter_0_avalon_mm_slave_agent_m0_debugaccess;                               // COM_COUNTER_0_avalon_mm_slave_agent:m0_debugaccess -> COM_COUNTER_0_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] com_counter_0_avalon_mm_slave_agent_m0_address;                                   // COM_COUNTER_0_avalon_mm_slave_agent:m0_address -> COM_COUNTER_0_avalon_mm_slave_translator:uav_address
	wire   [3:0] com_counter_0_avalon_mm_slave_agent_m0_byteenable;                                // COM_COUNTER_0_avalon_mm_slave_agent:m0_byteenable -> COM_COUNTER_0_avalon_mm_slave_translator:uav_byteenable
	wire         com_counter_0_avalon_mm_slave_agent_m0_read;                                      // COM_COUNTER_0_avalon_mm_slave_agent:m0_read -> COM_COUNTER_0_avalon_mm_slave_translator:uav_read
	wire         com_counter_0_avalon_mm_slave_agent_m0_readdatavalid;                             // COM_COUNTER_0_avalon_mm_slave_translator:uav_readdatavalid -> COM_COUNTER_0_avalon_mm_slave_agent:m0_readdatavalid
	wire         com_counter_0_avalon_mm_slave_agent_m0_lock;                                      // COM_COUNTER_0_avalon_mm_slave_agent:m0_lock -> COM_COUNTER_0_avalon_mm_slave_translator:uav_lock
	wire  [31:0] com_counter_0_avalon_mm_slave_agent_m0_writedata;                                 // COM_COUNTER_0_avalon_mm_slave_agent:m0_writedata -> COM_COUNTER_0_avalon_mm_slave_translator:uav_writedata
	wire         com_counter_0_avalon_mm_slave_agent_m0_write;                                     // COM_COUNTER_0_avalon_mm_slave_agent:m0_write -> COM_COUNTER_0_avalon_mm_slave_translator:uav_write
	wire   [2:0] com_counter_0_avalon_mm_slave_agent_m0_burstcount;                                // COM_COUNTER_0_avalon_mm_slave_agent:m0_burstcount -> COM_COUNTER_0_avalon_mm_slave_translator:uav_burstcount
	wire         com_counter_0_avalon_mm_slave_agent_rf_source_valid;                              // COM_COUNTER_0_avalon_mm_slave_agent:rf_source_valid -> COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] com_counter_0_avalon_mm_slave_agent_rf_source_data;                               // COM_COUNTER_0_avalon_mm_slave_agent:rf_source_data -> COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         com_counter_0_avalon_mm_slave_agent_rf_source_ready;                              // COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:in_ready -> COM_COUNTER_0_avalon_mm_slave_agent:rf_source_ready
	wire         com_counter_0_avalon_mm_slave_agent_rf_source_startofpacket;                      // COM_COUNTER_0_avalon_mm_slave_agent:rf_source_startofpacket -> COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         com_counter_0_avalon_mm_slave_agent_rf_source_endofpacket;                        // COM_COUNTER_0_avalon_mm_slave_agent:rf_source_endofpacket -> COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_valid;                           // COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:out_valid -> COM_COUNTER_0_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_data;                            // COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:out_data -> COM_COUNTER_0_avalon_mm_slave_agent:rf_sink_data
	wire         com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_ready;                           // COM_COUNTER_0_avalon_mm_slave_agent:rf_sink_ready -> COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                   // COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> COM_COUNTER_0_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                     // COM_COUNTER_0_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> COM_COUNTER_0_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_valid;                         // COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_src_valid -> COM_COUNTER_0_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_data;                          // COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_src_data -> COM_COUNTER_0_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_ready;                         // COM_COUNTER_0_avalon_mm_slave_agent_rdata_fifo:in_ready -> COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> COM_COUNTER_0_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> COM_COUNTER_0_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                            // COM_COUNTER_0_avalon_mm_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [26:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> COM_COUNTER_0_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> COM_COUNTER_0_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> COM_COUNTER_0_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] rgb_to_hsv_avalon_mm_slave_agent_m0_readdata;                                     // RGB_TO_HSV_avalon_mm_slave_translator:uav_readdata -> RGB_TO_HSV_avalon_mm_slave_agent:m0_readdata
	wire         rgb_to_hsv_avalon_mm_slave_agent_m0_waitrequest;                                  // RGB_TO_HSV_avalon_mm_slave_translator:uav_waitrequest -> RGB_TO_HSV_avalon_mm_slave_agent:m0_waitrequest
	wire         rgb_to_hsv_avalon_mm_slave_agent_m0_debugaccess;                                  // RGB_TO_HSV_avalon_mm_slave_agent:m0_debugaccess -> RGB_TO_HSV_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] rgb_to_hsv_avalon_mm_slave_agent_m0_address;                                      // RGB_TO_HSV_avalon_mm_slave_agent:m0_address -> RGB_TO_HSV_avalon_mm_slave_translator:uav_address
	wire   [3:0] rgb_to_hsv_avalon_mm_slave_agent_m0_byteenable;                                   // RGB_TO_HSV_avalon_mm_slave_agent:m0_byteenable -> RGB_TO_HSV_avalon_mm_slave_translator:uav_byteenable
	wire         rgb_to_hsv_avalon_mm_slave_agent_m0_read;                                         // RGB_TO_HSV_avalon_mm_slave_agent:m0_read -> RGB_TO_HSV_avalon_mm_slave_translator:uav_read
	wire         rgb_to_hsv_avalon_mm_slave_agent_m0_readdatavalid;                                // RGB_TO_HSV_avalon_mm_slave_translator:uav_readdatavalid -> RGB_TO_HSV_avalon_mm_slave_agent:m0_readdatavalid
	wire         rgb_to_hsv_avalon_mm_slave_agent_m0_lock;                                         // RGB_TO_HSV_avalon_mm_slave_agent:m0_lock -> RGB_TO_HSV_avalon_mm_slave_translator:uav_lock
	wire  [31:0] rgb_to_hsv_avalon_mm_slave_agent_m0_writedata;                                    // RGB_TO_HSV_avalon_mm_slave_agent:m0_writedata -> RGB_TO_HSV_avalon_mm_slave_translator:uav_writedata
	wire         rgb_to_hsv_avalon_mm_slave_agent_m0_write;                                        // RGB_TO_HSV_avalon_mm_slave_agent:m0_write -> RGB_TO_HSV_avalon_mm_slave_translator:uav_write
	wire   [2:0] rgb_to_hsv_avalon_mm_slave_agent_m0_burstcount;                                   // RGB_TO_HSV_avalon_mm_slave_agent:m0_burstcount -> RGB_TO_HSV_avalon_mm_slave_translator:uav_burstcount
	wire         rgb_to_hsv_avalon_mm_slave_agent_rf_source_valid;                                 // RGB_TO_HSV_avalon_mm_slave_agent:rf_source_valid -> RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] rgb_to_hsv_avalon_mm_slave_agent_rf_source_data;                                  // RGB_TO_HSV_avalon_mm_slave_agent:rf_source_data -> RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         rgb_to_hsv_avalon_mm_slave_agent_rf_source_ready;                                 // RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:in_ready -> RGB_TO_HSV_avalon_mm_slave_agent:rf_source_ready
	wire         rgb_to_hsv_avalon_mm_slave_agent_rf_source_startofpacket;                         // RGB_TO_HSV_avalon_mm_slave_agent:rf_source_startofpacket -> RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         rgb_to_hsv_avalon_mm_slave_agent_rf_source_endofpacket;                           // RGB_TO_HSV_avalon_mm_slave_agent:rf_source_endofpacket -> RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_valid;                              // RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:out_valid -> RGB_TO_HSV_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_data;                               // RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:out_data -> RGB_TO_HSV_avalon_mm_slave_agent:rf_sink_data
	wire         rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_ready;                              // RGB_TO_HSV_avalon_mm_slave_agent:rf_sink_ready -> RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                      // RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> RGB_TO_HSV_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                        // RGB_TO_HSV_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> RGB_TO_HSV_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_valid;                            // RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_src_valid -> RGB_TO_HSV_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_data;                             // RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_src_data -> RGB_TO_HSV_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_ready;                            // RGB_TO_HSV_avalon_mm_slave_agent_rdata_fifo:in_ready -> RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> RGB_TO_HSV_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> RGB_TO_HSV_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                            // RGB_TO_HSV_avalon_mm_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [26:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> RGB_TO_HSV_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> RGB_TO_HSV_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> RGB_TO_HSV_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] pixel_grabber_rgb_avalon_mm_slave_agent_m0_readdata;                              // PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_readdata -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_readdata
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_m0_waitrequest;                           // PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_waitrequest -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_waitrequest
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_m0_debugaccess;                           // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_debugaccess -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] pixel_grabber_rgb_avalon_mm_slave_agent_m0_address;                               // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_address -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_address
	wire   [3:0] pixel_grabber_rgb_avalon_mm_slave_agent_m0_byteenable;                            // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_byteenable -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_byteenable
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_m0_read;                                  // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_read -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_read
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_m0_readdatavalid;                         // PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_readdatavalid -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_readdatavalid
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_m0_lock;                                  // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_lock -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_lock
	wire  [31:0] pixel_grabber_rgb_avalon_mm_slave_agent_m0_writedata;                             // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_writedata -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_writedata
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_m0_write;                                 // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_write -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_write
	wire   [2:0] pixel_grabber_rgb_avalon_mm_slave_agent_m0_burstcount;                            // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:m0_burstcount -> PIXEL_GRABBER_RGB_avalon_mm_slave_translator:uav_burstcount
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_valid;                          // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_source_valid -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_data;                           // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_source_data -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_ready;                          // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:in_ready -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_source_ready
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_startofpacket;                  // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_source_startofpacket -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_endofpacket;                    // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_source_endofpacket -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_valid;                       // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:out_valid -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_data;                        // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:out_data -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_sink_data
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_ready;                       // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_sink_ready -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;               // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                 // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_valid;                     // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_src_valid -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_data;                      // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_src_data -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_ready;                     // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rdata_fifo:in_ready -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                            // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [26:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] pixel_grabber_hsv_avalon_mm_slave_agent_m0_readdata;                              // PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_readdata -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_readdata
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_m0_waitrequest;                           // PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_waitrequest -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_waitrequest
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_m0_debugaccess;                           // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_debugaccess -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] pixel_grabber_hsv_avalon_mm_slave_agent_m0_address;                               // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_address -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_address
	wire   [3:0] pixel_grabber_hsv_avalon_mm_slave_agent_m0_byteenable;                            // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_byteenable -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_byteenable
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_m0_read;                                  // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_read -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_read
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_m0_readdatavalid;                         // PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_readdatavalid -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_readdatavalid
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_m0_lock;                                  // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_lock -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_lock
	wire  [31:0] pixel_grabber_hsv_avalon_mm_slave_agent_m0_writedata;                             // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_writedata -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_writedata
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_m0_write;                                 // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_write -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_write
	wire   [2:0] pixel_grabber_hsv_avalon_mm_slave_agent_m0_burstcount;                            // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:m0_burstcount -> PIXEL_GRABBER_HSV_avalon_mm_slave_translator:uav_burstcount
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_valid;                          // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_source_valid -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_data;                           // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_source_data -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_ready;                          // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:in_ready -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_source_ready
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_startofpacket;                  // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_source_startofpacket -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_endofpacket;                    // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_source_endofpacket -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_valid;                       // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:out_valid -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_data;                        // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:out_data -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_sink_data
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_ready;                       // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_sink_ready -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;               // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                 // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_valid;                     // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_src_valid -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_data;                      // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_src_data -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_ready;                     // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rdata_fifo:in_ready -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                            // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [26:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] edge_bins_0_avalon_mm_slave_agent_m0_readdata;                                    // EDGE_BINS_0_avalon_mm_slave_translator:uav_readdata -> EDGE_BINS_0_avalon_mm_slave_agent:m0_readdata
	wire         edge_bins_0_avalon_mm_slave_agent_m0_waitrequest;                                 // EDGE_BINS_0_avalon_mm_slave_translator:uav_waitrequest -> EDGE_BINS_0_avalon_mm_slave_agent:m0_waitrequest
	wire         edge_bins_0_avalon_mm_slave_agent_m0_debugaccess;                                 // EDGE_BINS_0_avalon_mm_slave_agent:m0_debugaccess -> EDGE_BINS_0_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] edge_bins_0_avalon_mm_slave_agent_m0_address;                                     // EDGE_BINS_0_avalon_mm_slave_agent:m0_address -> EDGE_BINS_0_avalon_mm_slave_translator:uav_address
	wire   [3:0] edge_bins_0_avalon_mm_slave_agent_m0_byteenable;                                  // EDGE_BINS_0_avalon_mm_slave_agent:m0_byteenable -> EDGE_BINS_0_avalon_mm_slave_translator:uav_byteenable
	wire         edge_bins_0_avalon_mm_slave_agent_m0_read;                                        // EDGE_BINS_0_avalon_mm_slave_agent:m0_read -> EDGE_BINS_0_avalon_mm_slave_translator:uav_read
	wire         edge_bins_0_avalon_mm_slave_agent_m0_readdatavalid;                               // EDGE_BINS_0_avalon_mm_slave_translator:uav_readdatavalid -> EDGE_BINS_0_avalon_mm_slave_agent:m0_readdatavalid
	wire         edge_bins_0_avalon_mm_slave_agent_m0_lock;                                        // EDGE_BINS_0_avalon_mm_slave_agent:m0_lock -> EDGE_BINS_0_avalon_mm_slave_translator:uav_lock
	wire  [31:0] edge_bins_0_avalon_mm_slave_agent_m0_writedata;                                   // EDGE_BINS_0_avalon_mm_slave_agent:m0_writedata -> EDGE_BINS_0_avalon_mm_slave_translator:uav_writedata
	wire         edge_bins_0_avalon_mm_slave_agent_m0_write;                                       // EDGE_BINS_0_avalon_mm_slave_agent:m0_write -> EDGE_BINS_0_avalon_mm_slave_translator:uav_write
	wire   [2:0] edge_bins_0_avalon_mm_slave_agent_m0_burstcount;                                  // EDGE_BINS_0_avalon_mm_slave_agent:m0_burstcount -> EDGE_BINS_0_avalon_mm_slave_translator:uav_burstcount
	wire         edge_bins_0_avalon_mm_slave_agent_rf_source_valid;                                // EDGE_BINS_0_avalon_mm_slave_agent:rf_source_valid -> EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] edge_bins_0_avalon_mm_slave_agent_rf_source_data;                                 // EDGE_BINS_0_avalon_mm_slave_agent:rf_source_data -> EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         edge_bins_0_avalon_mm_slave_agent_rf_source_ready;                                // EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:in_ready -> EDGE_BINS_0_avalon_mm_slave_agent:rf_source_ready
	wire         edge_bins_0_avalon_mm_slave_agent_rf_source_startofpacket;                        // EDGE_BINS_0_avalon_mm_slave_agent:rf_source_startofpacket -> EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         edge_bins_0_avalon_mm_slave_agent_rf_source_endofpacket;                          // EDGE_BINS_0_avalon_mm_slave_agent:rf_source_endofpacket -> EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_valid;                             // EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:out_valid -> EDGE_BINS_0_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_data;                              // EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:out_data -> EDGE_BINS_0_avalon_mm_slave_agent:rf_sink_data
	wire         edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_ready;                             // EDGE_BINS_0_avalon_mm_slave_agent:rf_sink_ready -> EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                     // EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> EDGE_BINS_0_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                       // EDGE_BINS_0_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> EDGE_BINS_0_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_valid;                           // EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_src_valid -> EDGE_BINS_0_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_data;                            // EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_src_data -> EDGE_BINS_0_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_ready;                           // EDGE_BINS_0_avalon_mm_slave_agent_rdata_fifo:in_ready -> EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> EDGE_BINS_0_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> EDGE_BINS_0_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                            // EDGE_BINS_0_avalon_mm_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [26:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> EDGE_BINS_0_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> EDGE_BINS_0_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> EDGE_BINS_0_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] pixel_buffer_0_avalon_mm_slave_agent_m0_readdata;                                 // PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_readdata -> PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_readdata
	wire         pixel_buffer_0_avalon_mm_slave_agent_m0_waitrequest;                              // PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_waitrequest -> PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_waitrequest
	wire         pixel_buffer_0_avalon_mm_slave_agent_m0_debugaccess;                              // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_debugaccess -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_debugaccess
	wire  [18:0] pixel_buffer_0_avalon_mm_slave_agent_m0_address;                                  // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_address -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_address
	wire   [3:0] pixel_buffer_0_avalon_mm_slave_agent_m0_byteenable;                               // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_byteenable -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_byteenable
	wire         pixel_buffer_0_avalon_mm_slave_agent_m0_read;                                     // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_read -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_read
	wire         pixel_buffer_0_avalon_mm_slave_agent_m0_readdatavalid;                            // PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_readdatavalid -> PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_readdatavalid
	wire         pixel_buffer_0_avalon_mm_slave_agent_m0_lock;                                     // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_lock -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_lock
	wire  [31:0] pixel_buffer_0_avalon_mm_slave_agent_m0_writedata;                                // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_writedata -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_writedata
	wire         pixel_buffer_0_avalon_mm_slave_agent_m0_write;                                    // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_write -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_write
	wire   [2:0] pixel_buffer_0_avalon_mm_slave_agent_m0_burstcount;                               // PIXEL_BUFFER_0_avalon_mm_slave_agent:m0_burstcount -> PIXEL_BUFFER_0_avalon_mm_slave_translator:uav_burstcount
	wire         pixel_buffer_0_avalon_mm_slave_agent_rf_source_valid;                             // PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_source_valid -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:in_valid
	wire  [99:0] pixel_buffer_0_avalon_mm_slave_agent_rf_source_data;                              // PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_source_data -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:in_data
	wire         pixel_buffer_0_avalon_mm_slave_agent_rf_source_ready;                             // PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:in_ready -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_source_ready
	wire         pixel_buffer_0_avalon_mm_slave_agent_rf_source_startofpacket;                     // PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_source_startofpacket -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:in_startofpacket
	wire         pixel_buffer_0_avalon_mm_slave_agent_rf_source_endofpacket;                       // PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_source_endofpacket -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:in_endofpacket
	wire         pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_valid;                          // PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:out_valid -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_sink_valid
	wire  [99:0] pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_data;                           // PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:out_data -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_sink_data
	wire         pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_ready;                          // PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_sink_ready -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:out_ready
	wire         pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket;                  // PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:out_startofpacket -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_sink_startofpacket
	wire         pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket;                    // PIXEL_BUFFER_0_avalon_mm_slave_agent_rsp_fifo:out_endofpacket -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rf_sink_endofpacket
	wire         pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_valid;                        // PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_src_valid -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rdata_fifo:in_valid
	wire  [33:0] pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_data;                         // PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_src_data -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rdata_fifo:in_data
	wire         pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_ready;                        // PIXEL_BUFFER_0_avalon_mm_slave_agent_rdata_fifo:in_ready -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> PIXEL_BUFFER_0_avalon_mm_slave_agent:cp_valid
	wire  [98:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> PIXEL_BUFFER_0_avalon_mm_slave_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                            // PIXEL_BUFFER_0_avalon_mm_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [26:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> PIXEL_BUFFER_0_avalon_mm_slave_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> PIXEL_BUFFER_0_avalon_mm_slave_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> PIXEL_BUFFER_0_avalon_mm_slave_agent:cp_endofpacket
	wire  [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata;                              // i2c_opencores_mipi_avalon_slave_0_translator:uav_readdata -> i2c_opencores_mipi_avalon_slave_0_agent:m0_readdata
	wire         i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest;                           // i2c_opencores_mipi_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_mipi_avalon_slave_0_agent:m0_waitrequest
	wire         i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess;                           // i2c_opencores_mipi_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_mipi_avalon_slave_0_translator:uav_debugaccess
	wire  [18:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_address;                               // i2c_opencores_mipi_avalon_slave_0_agent:m0_address -> i2c_opencores_mipi_avalon_slave_0_translator:uav_address
	wire   [3:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable;                            // i2c_opencores_mipi_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_mipi_avalon_slave_0_translator:uav_byteenable
	wire         i2c_opencores_mipi_avalon_slave_0_agent_m0_read;                                  // i2c_opencores_mipi_avalon_slave_0_agent:m0_read -> i2c_opencores_mipi_avalon_slave_0_translator:uav_read
	wire         i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid;                         // i2c_opencores_mipi_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_mipi_avalon_slave_0_agent:m0_readdatavalid
	wire         i2c_opencores_mipi_avalon_slave_0_agent_m0_lock;                                  // i2c_opencores_mipi_avalon_slave_0_agent:m0_lock -> i2c_opencores_mipi_avalon_slave_0_translator:uav_lock
	wire  [31:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata;                             // i2c_opencores_mipi_avalon_slave_0_agent:m0_writedata -> i2c_opencores_mipi_avalon_slave_0_translator:uav_writedata
	wire         i2c_opencores_mipi_avalon_slave_0_agent_m0_write;                                 // i2c_opencores_mipi_avalon_slave_0_agent:m0_write -> i2c_opencores_mipi_avalon_slave_0_translator:uav_write
	wire   [2:0] i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount;                            // i2c_opencores_mipi_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_mipi_avalon_slave_0_translator:uav_burstcount
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid;                          // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [99:0] i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data;                           // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_data -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_data
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready;                          // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rf_source_ready
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket;                  // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket;                    // i2c_opencores_mipi_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid;                       // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_valid
	wire  [99:0] i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data;                        // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_data
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready;                       // i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket;               // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_startofpacket
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                 // i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> i2c_opencores_mipi_avalon_slave_0_agent:cp_valid
	wire  [98:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> i2c_opencores_mipi_avalon_slave_0_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                            // i2c_opencores_mipi_avalon_slave_0_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [26:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> i2c_opencores_mipi_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> i2c_opencores_mipi_avalon_slave_0_agent:cp_endofpacket
	wire  [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_readdata;                            // i2c_opencores_camera_avalon_slave_0_translator:uav_readdata -> i2c_opencores_camera_avalon_slave_0_agent:m0_readdata
	wire         i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest;                         // i2c_opencores_camera_avalon_slave_0_translator:uav_waitrequest -> i2c_opencores_camera_avalon_slave_0_agent:m0_waitrequest
	wire         i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess;                         // i2c_opencores_camera_avalon_slave_0_agent:m0_debugaccess -> i2c_opencores_camera_avalon_slave_0_translator:uav_debugaccess
	wire  [18:0] i2c_opencores_camera_avalon_slave_0_agent_m0_address;                             // i2c_opencores_camera_avalon_slave_0_agent:m0_address -> i2c_opencores_camera_avalon_slave_0_translator:uav_address
	wire   [3:0] i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable;                          // i2c_opencores_camera_avalon_slave_0_agent:m0_byteenable -> i2c_opencores_camera_avalon_slave_0_translator:uav_byteenable
	wire         i2c_opencores_camera_avalon_slave_0_agent_m0_read;                                // i2c_opencores_camera_avalon_slave_0_agent:m0_read -> i2c_opencores_camera_avalon_slave_0_translator:uav_read
	wire         i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid;                       // i2c_opencores_camera_avalon_slave_0_translator:uav_readdatavalid -> i2c_opencores_camera_avalon_slave_0_agent:m0_readdatavalid
	wire         i2c_opencores_camera_avalon_slave_0_agent_m0_lock;                                // i2c_opencores_camera_avalon_slave_0_agent:m0_lock -> i2c_opencores_camera_avalon_slave_0_translator:uav_lock
	wire  [31:0] i2c_opencores_camera_avalon_slave_0_agent_m0_writedata;                           // i2c_opencores_camera_avalon_slave_0_agent:m0_writedata -> i2c_opencores_camera_avalon_slave_0_translator:uav_writedata
	wire         i2c_opencores_camera_avalon_slave_0_agent_m0_write;                               // i2c_opencores_camera_avalon_slave_0_agent:m0_write -> i2c_opencores_camera_avalon_slave_0_translator:uav_write
	wire   [2:0] i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount;                          // i2c_opencores_camera_avalon_slave_0_agent:m0_burstcount -> i2c_opencores_camera_avalon_slave_0_translator:uav_burstcount
	wire         i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid;                        // i2c_opencores_camera_avalon_slave_0_agent:rf_source_valid -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [99:0] i2c_opencores_camera_avalon_slave_0_agent_rf_source_data;                         // i2c_opencores_camera_avalon_slave_0_agent:rf_source_data -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_data
	wire         i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready;                        // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_ready -> i2c_opencores_camera_avalon_slave_0_agent:rf_source_ready
	wire         i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket;                // i2c_opencores_camera_avalon_slave_0_agent:rf_source_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire         i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket;                  // i2c_opencores_camera_avalon_slave_0_agent:rf_source_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid;                     // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_valid -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_valid
	wire  [99:0] i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data;                      // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_data -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_data
	wire         i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready;                     // i2c_opencores_camera_avalon_slave_0_agent:rf_sink_ready -> i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket;             // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_startofpacket
	wire         i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket;               // i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> i2c_opencores_camera_avalon_slave_0_agent:cp_valid
	wire  [98:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> i2c_opencores_camera_avalon_slave_0_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                            // i2c_opencores_camera_avalon_slave_0_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [26:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> i2c_opencores_camera_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> i2c_opencores_camera_avalon_slave_0_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> i2c_opencores_camera_avalon_slave_0_agent:cp_endofpacket
	wire  [31:0] fir_0_0_control_agent_m0_readdata;                                                // fir_0_0_control_translator:uav_readdata -> fir_0_0_control_agent:m0_readdata
	wire         fir_0_0_control_agent_m0_waitrequest;                                             // fir_0_0_control_translator:uav_waitrequest -> fir_0_0_control_agent:m0_waitrequest
	wire         fir_0_0_control_agent_m0_debugaccess;                                             // fir_0_0_control_agent:m0_debugaccess -> fir_0_0_control_translator:uav_debugaccess
	wire  [18:0] fir_0_0_control_agent_m0_address;                                                 // fir_0_0_control_agent:m0_address -> fir_0_0_control_translator:uav_address
	wire   [3:0] fir_0_0_control_agent_m0_byteenable;                                              // fir_0_0_control_agent:m0_byteenable -> fir_0_0_control_translator:uav_byteenable
	wire         fir_0_0_control_agent_m0_read;                                                    // fir_0_0_control_agent:m0_read -> fir_0_0_control_translator:uav_read
	wire         fir_0_0_control_agent_m0_readdatavalid;                                           // fir_0_0_control_translator:uav_readdatavalid -> fir_0_0_control_agent:m0_readdatavalid
	wire         fir_0_0_control_agent_m0_lock;                                                    // fir_0_0_control_agent:m0_lock -> fir_0_0_control_translator:uav_lock
	wire  [31:0] fir_0_0_control_agent_m0_writedata;                                               // fir_0_0_control_agent:m0_writedata -> fir_0_0_control_translator:uav_writedata
	wire         fir_0_0_control_agent_m0_write;                                                   // fir_0_0_control_agent:m0_write -> fir_0_0_control_translator:uav_write
	wire   [2:0] fir_0_0_control_agent_m0_burstcount;                                              // fir_0_0_control_agent:m0_burstcount -> fir_0_0_control_translator:uav_burstcount
	wire         fir_0_0_control_agent_rf_source_valid;                                            // fir_0_0_control_agent:rf_source_valid -> fir_0_0_control_agent_rsp_fifo:in_valid
	wire  [99:0] fir_0_0_control_agent_rf_source_data;                                             // fir_0_0_control_agent:rf_source_data -> fir_0_0_control_agent_rsp_fifo:in_data
	wire         fir_0_0_control_agent_rf_source_ready;                                            // fir_0_0_control_agent_rsp_fifo:in_ready -> fir_0_0_control_agent:rf_source_ready
	wire         fir_0_0_control_agent_rf_source_startofpacket;                                    // fir_0_0_control_agent:rf_source_startofpacket -> fir_0_0_control_agent_rsp_fifo:in_startofpacket
	wire         fir_0_0_control_agent_rf_source_endofpacket;                                      // fir_0_0_control_agent:rf_source_endofpacket -> fir_0_0_control_agent_rsp_fifo:in_endofpacket
	wire         fir_0_0_control_agent_rsp_fifo_out_valid;                                         // fir_0_0_control_agent_rsp_fifo:out_valid -> fir_0_0_control_agent:rf_sink_valid
	wire  [99:0] fir_0_0_control_agent_rsp_fifo_out_data;                                          // fir_0_0_control_agent_rsp_fifo:out_data -> fir_0_0_control_agent:rf_sink_data
	wire         fir_0_0_control_agent_rsp_fifo_out_ready;                                         // fir_0_0_control_agent:rf_sink_ready -> fir_0_0_control_agent_rsp_fifo:out_ready
	wire         fir_0_0_control_agent_rsp_fifo_out_startofpacket;                                 // fir_0_0_control_agent_rsp_fifo:out_startofpacket -> fir_0_0_control_agent:rf_sink_startofpacket
	wire         fir_0_0_control_agent_rsp_fifo_out_endofpacket;                                   // fir_0_0_control_agent_rsp_fifo:out_endofpacket -> fir_0_0_control_agent:rf_sink_endofpacket
	wire         fir_0_0_control_agent_rdata_fifo_src_valid;                                       // fir_0_0_control_agent:rdata_fifo_src_valid -> fir_0_0_control_agent_rdata_fifo:in_valid
	wire  [33:0] fir_0_0_control_agent_rdata_fifo_src_data;                                        // fir_0_0_control_agent:rdata_fifo_src_data -> fir_0_0_control_agent_rdata_fifo:in_data
	wire         fir_0_0_control_agent_rdata_fifo_src_ready;                                       // fir_0_0_control_agent_rdata_fifo:in_ready -> fir_0_0_control_agent:rdata_fifo_src_ready
	wire         cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> fir_0_0_control_agent:cp_valid
	wire  [98:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> fir_0_0_control_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                            // fir_0_0_control_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [26:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> fir_0_0_control_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> fir_0_0_control_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> fir_0_0_control_agent:cp_endofpacket
	wire  [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                       // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire         sysid_qsys_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire         sysid_qsys_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire  [18:0] sysid_qsys_control_slave_agent_m0_address;                                        // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire   [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                     // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire         sysid_qsys_control_slave_agent_m0_read;                                           // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire         sysid_qsys_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_control_slave_agent_m0_lock;                                           // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire  [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                      // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire         sysid_qsys_control_slave_agent_m0_write;                                          // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire   [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                     // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire         sysid_qsys_control_slave_agent_rf_source_valid;                                   // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [99:0] sysid_qsys_control_slave_agent_rf_source_data;                                    // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_control_slave_agent_rf_source_ready;                                   // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire         sysid_qsys_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_qsys_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [99:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire         sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [98:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                            // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [26:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire  [31:0] nios2_gen2_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_debug_mem_slave_translator:uav_readdata -> nios2_gen2_debug_mem_slave_agent:m0_readdata
	wire         nios2_gen2_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_debug_mem_slave_agent:m0_waitrequest
	wire         nios2_gen2_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_debug_mem_slave_translator:uav_debugaccess
	wire  [18:0] nios2_gen2_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_debug_mem_slave_agent:m0_address -> nios2_gen2_debug_mem_slave_translator:uav_address
	wire   [3:0] nios2_gen2_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_debug_mem_slave_translator:uav_byteenable
	wire         nios2_gen2_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_debug_mem_slave_agent:m0_read -> nios2_gen2_debug_mem_slave_translator:uav_read
	wire         nios2_gen2_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_debug_mem_slave_agent:m0_readdatavalid
	wire         nios2_gen2_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_debug_mem_slave_agent:m0_lock -> nios2_gen2_debug_mem_slave_translator:uav_lock
	wire  [31:0] nios2_gen2_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_debug_mem_slave_agent:m0_writedata -> nios2_gen2_debug_mem_slave_translator:uav_writedata
	wire         nios2_gen2_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_debug_mem_slave_agent:m0_write -> nios2_gen2_debug_mem_slave_translator:uav_write
	wire   [2:0] nios2_gen2_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_debug_mem_slave_translator:uav_burstcount
	wire         nios2_gen2_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [99:0] nios2_gen2_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_debug_mem_slave_agent:rf_source_data -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_data
	wire         nios2_gen2_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_debug_mem_slave_agent:rf_source_ready
	wire         nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_debug_mem_slave_agent:rf_sink_valid
	wire  [99:0] nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_debug_mem_slave_agent:rf_sink_data
	wire         nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_startofpacket
	wire         nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_012_src_valid;                                                            // cmd_mux_012:src_valid -> nios2_gen2_debug_mem_slave_agent:cp_valid
	wire  [98:0] cmd_mux_012_src_data;                                                             // cmd_mux_012:src_data -> nios2_gen2_debug_mem_slave_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                            // nios2_gen2_debug_mem_slave_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [26:0] cmd_mux_012_src_channel;                                                          // cmd_mux_012:src_channel -> nios2_gen2_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                                    // cmd_mux_012:src_startofpacket -> nios2_gen2_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                      // cmd_mux_012:src_endofpacket -> nios2_gen2_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] terasic_auto_focus_0_mm_ctrl_agent_m0_readdata;                                   // TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_readdata -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_readdata
	wire         terasic_auto_focus_0_mm_ctrl_agent_m0_waitrequest;                                // TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_waitrequest -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_waitrequest
	wire         terasic_auto_focus_0_mm_ctrl_agent_m0_debugaccess;                                // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_debugaccess -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_debugaccess
	wire  [18:0] terasic_auto_focus_0_mm_ctrl_agent_m0_address;                                    // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_address -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_address
	wire   [3:0] terasic_auto_focus_0_mm_ctrl_agent_m0_byteenable;                                 // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_byteenable -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_byteenable
	wire         terasic_auto_focus_0_mm_ctrl_agent_m0_read;                                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_read -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_read
	wire         terasic_auto_focus_0_mm_ctrl_agent_m0_readdatavalid;                              // TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_readdatavalid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_readdatavalid
	wire         terasic_auto_focus_0_mm_ctrl_agent_m0_lock;                                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_lock -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_lock
	wire  [31:0] terasic_auto_focus_0_mm_ctrl_agent_m0_writedata;                                  // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_writedata -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_writedata
	wire         terasic_auto_focus_0_mm_ctrl_agent_m0_write;                                      // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_write -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_write
	wire   [2:0] terasic_auto_focus_0_mm_ctrl_agent_m0_burstcount;                                 // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:m0_burstcount -> TERASIC_AUTO_FOCUS_0_mm_ctrl_translator:uav_burstcount
	wire         terasic_auto_focus_0_mm_ctrl_agent_rf_source_valid;                               // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_valid
	wire  [99:0] terasic_auto_focus_0_mm_ctrl_agent_rf_source_data;                                // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_data
	wire         terasic_auto_focus_0_mm_ctrl_agent_rf_source_ready;                               // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_ready
	wire         terasic_auto_focus_0_mm_ctrl_agent_rf_source_startofpacket;                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_startofpacket
	wire         terasic_auto_focus_0_mm_ctrl_agent_rf_source_endofpacket;                         // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_source_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:in_endofpacket
	wire         terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_valid;                            // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_valid
	wire  [99:0] terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_data;                             // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_data
	wire         terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_ready;                            // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_ready
	wire         terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_startofpacket;                    // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_startofpacket
	wire         terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_endofpacket;                      // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rsp_fifo:out_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rf_sink_endofpacket
	wire         terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_valid;                          // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_src_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:in_valid
	wire  [33:0] terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_data;                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_src_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:in_data
	wire         terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_ready;                          // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:in_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_src_ready
	wire         cmd_mux_013_src_valid;                                                            // cmd_mux_013:src_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_valid
	wire  [98:0] cmd_mux_013_src_data;                                                             // cmd_mux_013:src_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                            // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [26:0] cmd_mux_013_src_channel;                                                          // cmd_mux_013:src_channel -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                                    // cmd_mux_013:src_startofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                                      // cmd_mux_013:src_endofpacket -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:cp_endofpacket
	wire  [31:0] altpll_0_pll_slave_agent_m0_readdata;                                             // altpll_0_pll_slave_translator:uav_readdata -> altpll_0_pll_slave_agent:m0_readdata
	wire         altpll_0_pll_slave_agent_m0_waitrequest;                                          // altpll_0_pll_slave_translator:uav_waitrequest -> altpll_0_pll_slave_agent:m0_waitrequest
	wire         altpll_0_pll_slave_agent_m0_debugaccess;                                          // altpll_0_pll_slave_agent:m0_debugaccess -> altpll_0_pll_slave_translator:uav_debugaccess
	wire  [18:0] altpll_0_pll_slave_agent_m0_address;                                              // altpll_0_pll_slave_agent:m0_address -> altpll_0_pll_slave_translator:uav_address
	wire   [3:0] altpll_0_pll_slave_agent_m0_byteenable;                                           // altpll_0_pll_slave_agent:m0_byteenable -> altpll_0_pll_slave_translator:uav_byteenable
	wire         altpll_0_pll_slave_agent_m0_read;                                                 // altpll_0_pll_slave_agent:m0_read -> altpll_0_pll_slave_translator:uav_read
	wire         altpll_0_pll_slave_agent_m0_readdatavalid;                                        // altpll_0_pll_slave_translator:uav_readdatavalid -> altpll_0_pll_slave_agent:m0_readdatavalid
	wire         altpll_0_pll_slave_agent_m0_lock;                                                 // altpll_0_pll_slave_agent:m0_lock -> altpll_0_pll_slave_translator:uav_lock
	wire  [31:0] altpll_0_pll_slave_agent_m0_writedata;                                            // altpll_0_pll_slave_agent:m0_writedata -> altpll_0_pll_slave_translator:uav_writedata
	wire         altpll_0_pll_slave_agent_m0_write;                                                // altpll_0_pll_slave_agent:m0_write -> altpll_0_pll_slave_translator:uav_write
	wire   [2:0] altpll_0_pll_slave_agent_m0_burstcount;                                           // altpll_0_pll_slave_agent:m0_burstcount -> altpll_0_pll_slave_translator:uav_burstcount
	wire         altpll_0_pll_slave_agent_rf_source_valid;                                         // altpll_0_pll_slave_agent:rf_source_valid -> altpll_0_pll_slave_agent_rsp_fifo:in_valid
	wire  [99:0] altpll_0_pll_slave_agent_rf_source_data;                                          // altpll_0_pll_slave_agent:rf_source_data -> altpll_0_pll_slave_agent_rsp_fifo:in_data
	wire         altpll_0_pll_slave_agent_rf_source_ready;                                         // altpll_0_pll_slave_agent_rsp_fifo:in_ready -> altpll_0_pll_slave_agent:rf_source_ready
	wire         altpll_0_pll_slave_agent_rf_source_startofpacket;                                 // altpll_0_pll_slave_agent:rf_source_startofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_startofpacket
	wire         altpll_0_pll_slave_agent_rf_source_endofpacket;                                   // altpll_0_pll_slave_agent:rf_source_endofpacket -> altpll_0_pll_slave_agent_rsp_fifo:in_endofpacket
	wire         altpll_0_pll_slave_agent_rsp_fifo_out_valid;                                      // altpll_0_pll_slave_agent_rsp_fifo:out_valid -> altpll_0_pll_slave_agent:rf_sink_valid
	wire  [99:0] altpll_0_pll_slave_agent_rsp_fifo_out_data;                                       // altpll_0_pll_slave_agent_rsp_fifo:out_data -> altpll_0_pll_slave_agent:rf_sink_data
	wire         altpll_0_pll_slave_agent_rsp_fifo_out_ready;                                      // altpll_0_pll_slave_agent:rf_sink_ready -> altpll_0_pll_slave_agent_rsp_fifo:out_ready
	wire         altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket;                              // altpll_0_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_0_pll_slave_agent:rf_sink_startofpacket
	wire         altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket;                                // altpll_0_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_0_pll_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_014_src_valid;                                                            // cmd_mux_014:src_valid -> altpll_0_pll_slave_agent:cp_valid
	wire  [98:0] cmd_mux_014_src_data;                                                             // cmd_mux_014:src_data -> altpll_0_pll_slave_agent:cp_data
	wire         cmd_mux_014_src_ready;                                                            // altpll_0_pll_slave_agent:cp_ready -> cmd_mux_014:src_ready
	wire  [26:0] cmd_mux_014_src_channel;                                                          // cmd_mux_014:src_channel -> altpll_0_pll_slave_agent:cp_channel
	wire         cmd_mux_014_src_startofpacket;                                                    // cmd_mux_014:src_startofpacket -> altpll_0_pll_slave_agent:cp_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                                      // cmd_mux_014:src_endofpacket -> altpll_0_pll_slave_agent:cp_endofpacket
	wire  [31:0] altpll_1_pll_slave_agent_m0_readdata;                                             // altpll_1_pll_slave_translator:uav_readdata -> altpll_1_pll_slave_agent:m0_readdata
	wire         altpll_1_pll_slave_agent_m0_waitrequest;                                          // altpll_1_pll_slave_translator:uav_waitrequest -> altpll_1_pll_slave_agent:m0_waitrequest
	wire         altpll_1_pll_slave_agent_m0_debugaccess;                                          // altpll_1_pll_slave_agent:m0_debugaccess -> altpll_1_pll_slave_translator:uav_debugaccess
	wire  [18:0] altpll_1_pll_slave_agent_m0_address;                                              // altpll_1_pll_slave_agent:m0_address -> altpll_1_pll_slave_translator:uav_address
	wire   [3:0] altpll_1_pll_slave_agent_m0_byteenable;                                           // altpll_1_pll_slave_agent:m0_byteenable -> altpll_1_pll_slave_translator:uav_byteenable
	wire         altpll_1_pll_slave_agent_m0_read;                                                 // altpll_1_pll_slave_agent:m0_read -> altpll_1_pll_slave_translator:uav_read
	wire         altpll_1_pll_slave_agent_m0_readdatavalid;                                        // altpll_1_pll_slave_translator:uav_readdatavalid -> altpll_1_pll_slave_agent:m0_readdatavalid
	wire         altpll_1_pll_slave_agent_m0_lock;                                                 // altpll_1_pll_slave_agent:m0_lock -> altpll_1_pll_slave_translator:uav_lock
	wire  [31:0] altpll_1_pll_slave_agent_m0_writedata;                                            // altpll_1_pll_slave_agent:m0_writedata -> altpll_1_pll_slave_translator:uav_writedata
	wire         altpll_1_pll_slave_agent_m0_write;                                                // altpll_1_pll_slave_agent:m0_write -> altpll_1_pll_slave_translator:uav_write
	wire   [2:0] altpll_1_pll_slave_agent_m0_burstcount;                                           // altpll_1_pll_slave_agent:m0_burstcount -> altpll_1_pll_slave_translator:uav_burstcount
	wire         altpll_1_pll_slave_agent_rf_source_valid;                                         // altpll_1_pll_slave_agent:rf_source_valid -> altpll_1_pll_slave_agent_rsp_fifo:in_valid
	wire  [99:0] altpll_1_pll_slave_agent_rf_source_data;                                          // altpll_1_pll_slave_agent:rf_source_data -> altpll_1_pll_slave_agent_rsp_fifo:in_data
	wire         altpll_1_pll_slave_agent_rf_source_ready;                                         // altpll_1_pll_slave_agent_rsp_fifo:in_ready -> altpll_1_pll_slave_agent:rf_source_ready
	wire         altpll_1_pll_slave_agent_rf_source_startofpacket;                                 // altpll_1_pll_slave_agent:rf_source_startofpacket -> altpll_1_pll_slave_agent_rsp_fifo:in_startofpacket
	wire         altpll_1_pll_slave_agent_rf_source_endofpacket;                                   // altpll_1_pll_slave_agent:rf_source_endofpacket -> altpll_1_pll_slave_agent_rsp_fifo:in_endofpacket
	wire         altpll_1_pll_slave_agent_rsp_fifo_out_valid;                                      // altpll_1_pll_slave_agent_rsp_fifo:out_valid -> altpll_1_pll_slave_agent:rf_sink_valid
	wire  [99:0] altpll_1_pll_slave_agent_rsp_fifo_out_data;                                       // altpll_1_pll_slave_agent_rsp_fifo:out_data -> altpll_1_pll_slave_agent:rf_sink_data
	wire         altpll_1_pll_slave_agent_rsp_fifo_out_ready;                                      // altpll_1_pll_slave_agent:rf_sink_ready -> altpll_1_pll_slave_agent_rsp_fifo:out_ready
	wire         altpll_1_pll_slave_agent_rsp_fifo_out_startofpacket;                              // altpll_1_pll_slave_agent_rsp_fifo:out_startofpacket -> altpll_1_pll_slave_agent:rf_sink_startofpacket
	wire         altpll_1_pll_slave_agent_rsp_fifo_out_endofpacket;                                // altpll_1_pll_slave_agent_rsp_fifo:out_endofpacket -> altpll_1_pll_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_015_src_valid;                                                            // cmd_mux_015:src_valid -> altpll_1_pll_slave_agent:cp_valid
	wire  [98:0] cmd_mux_015_src_data;                                                             // cmd_mux_015:src_data -> altpll_1_pll_slave_agent:cp_data
	wire         cmd_mux_015_src_ready;                                                            // altpll_1_pll_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire  [26:0] cmd_mux_015_src_channel;                                                          // cmd_mux_015:src_channel -> altpll_1_pll_slave_agent:cp_channel
	wire         cmd_mux_015_src_startofpacket;                                                    // cmd_mux_015:src_startofpacket -> altpll_1_pll_slave_agent:cp_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                                      // cmd_mux_015:src_endofpacket -> altpll_1_pll_slave_agent:cp_endofpacket
	wire  [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                            // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire         onchip_memory2_0_s1_agent_m0_waitrequest;                                         // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire         onchip_memory2_0_s1_agent_m0_debugaccess;                                         // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire  [18:0] onchip_memory2_0_s1_agent_m0_address;                                             // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire   [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                          // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire         onchip_memory2_0_s1_agent_m0_read;                                                // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire         onchip_memory2_0_s1_agent_m0_readdatavalid;                                       // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire         onchip_memory2_0_s1_agent_m0_lock;                                                // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire  [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                           // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire         onchip_memory2_0_s1_agent_m0_write;                                               // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire   [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                          // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire         onchip_memory2_0_s1_agent_rf_source_valid;                                        // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [99:0] onchip_memory2_0_s1_agent_rf_source_data;                                         // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire         onchip_memory2_0_s1_agent_rf_source_ready;                                        // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire         onchip_memory2_0_s1_agent_rf_source_startofpacket;                                // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory2_0_s1_agent_rf_source_endofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                     // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [99:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                      // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                     // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                             // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_016_src_valid;                                                            // cmd_mux_016:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [98:0] cmd_mux_016_src_data;                                                             // cmd_mux_016:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire         cmd_mux_016_src_ready;                                                            // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire  [26:0] cmd_mux_016_src_channel;                                                          // cmd_mux_016:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire         cmd_mux_016_src_startofpacket;                                                    // cmd_mux_016:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                                      // cmd_mux_016:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire  [31:0] timer_s1_agent_m0_readdata;                                                       // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire         timer_s1_agent_m0_waitrequest;                                                    // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire         timer_s1_agent_m0_debugaccess;                                                    // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire  [18:0] timer_s1_agent_m0_address;                                                        // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire   [3:0] timer_s1_agent_m0_byteenable;                                                     // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire         timer_s1_agent_m0_read;                                                           // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire         timer_s1_agent_m0_readdatavalid;                                                  // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire         timer_s1_agent_m0_lock;                                                           // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire  [31:0] timer_s1_agent_m0_writedata;                                                      // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire         timer_s1_agent_m0_write;                                                          // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire   [2:0] timer_s1_agent_m0_burstcount;                                                     // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire         timer_s1_agent_rf_source_valid;                                                   // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [99:0] timer_s1_agent_rf_source_data;                                                    // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire         timer_s1_agent_rf_source_ready;                                                   // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire         timer_s1_agent_rf_source_startofpacket;                                           // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_s1_agent_rf_source_endofpacket;                                             // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_s1_agent_rsp_fifo_out_valid;                                                // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [99:0] timer_s1_agent_rsp_fifo_out_data;                                                 // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire         timer_s1_agent_rsp_fifo_out_ready;                                                // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire         timer_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire         timer_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_017_src_valid;                                                            // cmd_mux_017:src_valid -> timer_s1_agent:cp_valid
	wire  [98:0] cmd_mux_017_src_data;                                                             // cmd_mux_017:src_data -> timer_s1_agent:cp_data
	wire         cmd_mux_017_src_ready;                                                            // timer_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire  [26:0] cmd_mux_017_src_channel;                                                          // cmd_mux_017:src_channel -> timer_s1_agent:cp_channel
	wire         cmd_mux_017_src_startofpacket;                                                    // cmd_mux_017:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire         cmd_mux_017_src_endofpacket;                                                      // cmd_mux_017:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire  [31:0] led_s1_agent_m0_readdata;                                                         // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire         led_s1_agent_m0_waitrequest;                                                      // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire         led_s1_agent_m0_debugaccess;                                                      // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire  [18:0] led_s1_agent_m0_address;                                                          // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire   [3:0] led_s1_agent_m0_byteenable;                                                       // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire         led_s1_agent_m0_read;                                                             // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire         led_s1_agent_m0_readdatavalid;                                                    // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire         led_s1_agent_m0_lock;                                                             // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire  [31:0] led_s1_agent_m0_writedata;                                                        // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire         led_s1_agent_m0_write;                                                            // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire   [2:0] led_s1_agent_m0_burstcount;                                                       // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire         led_s1_agent_rf_source_valid;                                                     // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [99:0] led_s1_agent_rf_source_data;                                                      // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire         led_s1_agent_rf_source_ready;                                                     // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire         led_s1_agent_rf_source_startofpacket;                                             // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire         led_s1_agent_rf_source_endofpacket;                                               // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire         led_s1_agent_rsp_fifo_out_valid;                                                  // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [99:0] led_s1_agent_rsp_fifo_out_data;                                                   // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire         led_s1_agent_rsp_fifo_out_ready;                                                  // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire         led_s1_agent_rsp_fifo_out_startofpacket;                                          // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire         led_s1_agent_rsp_fifo_out_endofpacket;                                            // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_018_src_valid;                                                            // cmd_mux_018:src_valid -> led_s1_agent:cp_valid
	wire  [98:0] cmd_mux_018_src_data;                                                             // cmd_mux_018:src_data -> led_s1_agent:cp_data
	wire         cmd_mux_018_src_ready;                                                            // led_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire  [26:0] cmd_mux_018_src_channel;                                                          // cmd_mux_018:src_channel -> led_s1_agent:cp_channel
	wire         cmd_mux_018_src_startofpacket;                                                    // cmd_mux_018:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire         cmd_mux_018_src_endofpacket;                                                      // cmd_mux_018:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire  [31:0] sw_s1_agent_m0_readdata;                                                          // sw_s1_translator:uav_readdata -> sw_s1_agent:m0_readdata
	wire         sw_s1_agent_m0_waitrequest;                                                       // sw_s1_translator:uav_waitrequest -> sw_s1_agent:m0_waitrequest
	wire         sw_s1_agent_m0_debugaccess;                                                       // sw_s1_agent:m0_debugaccess -> sw_s1_translator:uav_debugaccess
	wire  [18:0] sw_s1_agent_m0_address;                                                           // sw_s1_agent:m0_address -> sw_s1_translator:uav_address
	wire   [3:0] sw_s1_agent_m0_byteenable;                                                        // sw_s1_agent:m0_byteenable -> sw_s1_translator:uav_byteenable
	wire         sw_s1_agent_m0_read;                                                              // sw_s1_agent:m0_read -> sw_s1_translator:uav_read
	wire         sw_s1_agent_m0_readdatavalid;                                                     // sw_s1_translator:uav_readdatavalid -> sw_s1_agent:m0_readdatavalid
	wire         sw_s1_agent_m0_lock;                                                              // sw_s1_agent:m0_lock -> sw_s1_translator:uav_lock
	wire  [31:0] sw_s1_agent_m0_writedata;                                                         // sw_s1_agent:m0_writedata -> sw_s1_translator:uav_writedata
	wire         sw_s1_agent_m0_write;                                                             // sw_s1_agent:m0_write -> sw_s1_translator:uav_write
	wire   [2:0] sw_s1_agent_m0_burstcount;                                                        // sw_s1_agent:m0_burstcount -> sw_s1_translator:uav_burstcount
	wire         sw_s1_agent_rf_source_valid;                                                      // sw_s1_agent:rf_source_valid -> sw_s1_agent_rsp_fifo:in_valid
	wire  [99:0] sw_s1_agent_rf_source_data;                                                       // sw_s1_agent:rf_source_data -> sw_s1_agent_rsp_fifo:in_data
	wire         sw_s1_agent_rf_source_ready;                                                      // sw_s1_agent_rsp_fifo:in_ready -> sw_s1_agent:rf_source_ready
	wire         sw_s1_agent_rf_source_startofpacket;                                              // sw_s1_agent:rf_source_startofpacket -> sw_s1_agent_rsp_fifo:in_startofpacket
	wire         sw_s1_agent_rf_source_endofpacket;                                                // sw_s1_agent:rf_source_endofpacket -> sw_s1_agent_rsp_fifo:in_endofpacket
	wire         sw_s1_agent_rsp_fifo_out_valid;                                                   // sw_s1_agent_rsp_fifo:out_valid -> sw_s1_agent:rf_sink_valid
	wire  [99:0] sw_s1_agent_rsp_fifo_out_data;                                                    // sw_s1_agent_rsp_fifo:out_data -> sw_s1_agent:rf_sink_data
	wire         sw_s1_agent_rsp_fifo_out_ready;                                                   // sw_s1_agent:rf_sink_ready -> sw_s1_agent_rsp_fifo:out_ready
	wire         sw_s1_agent_rsp_fifo_out_startofpacket;                                           // sw_s1_agent_rsp_fifo:out_startofpacket -> sw_s1_agent:rf_sink_startofpacket
	wire         sw_s1_agent_rsp_fifo_out_endofpacket;                                             // sw_s1_agent_rsp_fifo:out_endofpacket -> sw_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_019_src_valid;                                                            // cmd_mux_019:src_valid -> sw_s1_agent:cp_valid
	wire  [98:0] cmd_mux_019_src_data;                                                             // cmd_mux_019:src_data -> sw_s1_agent:cp_data
	wire         cmd_mux_019_src_ready;                                                            // sw_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire  [26:0] cmd_mux_019_src_channel;                                                          // cmd_mux_019:src_channel -> sw_s1_agent:cp_channel
	wire         cmd_mux_019_src_startofpacket;                                                    // cmd_mux_019:src_startofpacket -> sw_s1_agent:cp_startofpacket
	wire         cmd_mux_019_src_endofpacket;                                                      // cmd_mux_019:src_endofpacket -> sw_s1_agent:cp_endofpacket
	wire  [31:0] key_s1_agent_m0_readdata;                                                         // key_s1_translator:uav_readdata -> key_s1_agent:m0_readdata
	wire         key_s1_agent_m0_waitrequest;                                                      // key_s1_translator:uav_waitrequest -> key_s1_agent:m0_waitrequest
	wire         key_s1_agent_m0_debugaccess;                                                      // key_s1_agent:m0_debugaccess -> key_s1_translator:uav_debugaccess
	wire  [18:0] key_s1_agent_m0_address;                                                          // key_s1_agent:m0_address -> key_s1_translator:uav_address
	wire   [3:0] key_s1_agent_m0_byteenable;                                                       // key_s1_agent:m0_byteenable -> key_s1_translator:uav_byteenable
	wire         key_s1_agent_m0_read;                                                             // key_s1_agent:m0_read -> key_s1_translator:uav_read
	wire         key_s1_agent_m0_readdatavalid;                                                    // key_s1_translator:uav_readdatavalid -> key_s1_agent:m0_readdatavalid
	wire         key_s1_agent_m0_lock;                                                             // key_s1_agent:m0_lock -> key_s1_translator:uav_lock
	wire  [31:0] key_s1_agent_m0_writedata;                                                        // key_s1_agent:m0_writedata -> key_s1_translator:uav_writedata
	wire         key_s1_agent_m0_write;                                                            // key_s1_agent:m0_write -> key_s1_translator:uav_write
	wire   [2:0] key_s1_agent_m0_burstcount;                                                       // key_s1_agent:m0_burstcount -> key_s1_translator:uav_burstcount
	wire         key_s1_agent_rf_source_valid;                                                     // key_s1_agent:rf_source_valid -> key_s1_agent_rsp_fifo:in_valid
	wire  [99:0] key_s1_agent_rf_source_data;                                                      // key_s1_agent:rf_source_data -> key_s1_agent_rsp_fifo:in_data
	wire         key_s1_agent_rf_source_ready;                                                     // key_s1_agent_rsp_fifo:in_ready -> key_s1_agent:rf_source_ready
	wire         key_s1_agent_rf_source_startofpacket;                                             // key_s1_agent:rf_source_startofpacket -> key_s1_agent_rsp_fifo:in_startofpacket
	wire         key_s1_agent_rf_source_endofpacket;                                               // key_s1_agent:rf_source_endofpacket -> key_s1_agent_rsp_fifo:in_endofpacket
	wire         key_s1_agent_rsp_fifo_out_valid;                                                  // key_s1_agent_rsp_fifo:out_valid -> key_s1_agent:rf_sink_valid
	wire  [99:0] key_s1_agent_rsp_fifo_out_data;                                                   // key_s1_agent_rsp_fifo:out_data -> key_s1_agent:rf_sink_data
	wire         key_s1_agent_rsp_fifo_out_ready;                                                  // key_s1_agent:rf_sink_ready -> key_s1_agent_rsp_fifo:out_ready
	wire         key_s1_agent_rsp_fifo_out_startofpacket;                                          // key_s1_agent_rsp_fifo:out_startofpacket -> key_s1_agent:rf_sink_startofpacket
	wire         key_s1_agent_rsp_fifo_out_endofpacket;                                            // key_s1_agent_rsp_fifo:out_endofpacket -> key_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_020_src_valid;                                                            // cmd_mux_020:src_valid -> key_s1_agent:cp_valid
	wire  [98:0] cmd_mux_020_src_data;                                                             // cmd_mux_020:src_data -> key_s1_agent:cp_data
	wire         cmd_mux_020_src_ready;                                                            // key_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire  [26:0] cmd_mux_020_src_channel;                                                          // cmd_mux_020:src_channel -> key_s1_agent:cp_channel
	wire         cmd_mux_020_src_startofpacket;                                                    // cmd_mux_020:src_startofpacket -> key_s1_agent:cp_startofpacket
	wire         cmd_mux_020_src_endofpacket;                                                      // cmd_mux_020:src_endofpacket -> key_s1_agent:cp_endofpacket
	wire  [31:0] mipi_reset_n_s1_agent_m0_readdata;                                                // mipi_reset_n_s1_translator:uav_readdata -> mipi_reset_n_s1_agent:m0_readdata
	wire         mipi_reset_n_s1_agent_m0_waitrequest;                                             // mipi_reset_n_s1_translator:uav_waitrequest -> mipi_reset_n_s1_agent:m0_waitrequest
	wire         mipi_reset_n_s1_agent_m0_debugaccess;                                             // mipi_reset_n_s1_agent:m0_debugaccess -> mipi_reset_n_s1_translator:uav_debugaccess
	wire  [18:0] mipi_reset_n_s1_agent_m0_address;                                                 // mipi_reset_n_s1_agent:m0_address -> mipi_reset_n_s1_translator:uav_address
	wire   [3:0] mipi_reset_n_s1_agent_m0_byteenable;                                              // mipi_reset_n_s1_agent:m0_byteenable -> mipi_reset_n_s1_translator:uav_byteenable
	wire         mipi_reset_n_s1_agent_m0_read;                                                    // mipi_reset_n_s1_agent:m0_read -> mipi_reset_n_s1_translator:uav_read
	wire         mipi_reset_n_s1_agent_m0_readdatavalid;                                           // mipi_reset_n_s1_translator:uav_readdatavalid -> mipi_reset_n_s1_agent:m0_readdatavalid
	wire         mipi_reset_n_s1_agent_m0_lock;                                                    // mipi_reset_n_s1_agent:m0_lock -> mipi_reset_n_s1_translator:uav_lock
	wire  [31:0] mipi_reset_n_s1_agent_m0_writedata;                                               // mipi_reset_n_s1_agent:m0_writedata -> mipi_reset_n_s1_translator:uav_writedata
	wire         mipi_reset_n_s1_agent_m0_write;                                                   // mipi_reset_n_s1_agent:m0_write -> mipi_reset_n_s1_translator:uav_write
	wire   [2:0] mipi_reset_n_s1_agent_m0_burstcount;                                              // mipi_reset_n_s1_agent:m0_burstcount -> mipi_reset_n_s1_translator:uav_burstcount
	wire         mipi_reset_n_s1_agent_rf_source_valid;                                            // mipi_reset_n_s1_agent:rf_source_valid -> mipi_reset_n_s1_agent_rsp_fifo:in_valid
	wire  [99:0] mipi_reset_n_s1_agent_rf_source_data;                                             // mipi_reset_n_s1_agent:rf_source_data -> mipi_reset_n_s1_agent_rsp_fifo:in_data
	wire         mipi_reset_n_s1_agent_rf_source_ready;                                            // mipi_reset_n_s1_agent_rsp_fifo:in_ready -> mipi_reset_n_s1_agent:rf_source_ready
	wire         mipi_reset_n_s1_agent_rf_source_startofpacket;                                    // mipi_reset_n_s1_agent:rf_source_startofpacket -> mipi_reset_n_s1_agent_rsp_fifo:in_startofpacket
	wire         mipi_reset_n_s1_agent_rf_source_endofpacket;                                      // mipi_reset_n_s1_agent:rf_source_endofpacket -> mipi_reset_n_s1_agent_rsp_fifo:in_endofpacket
	wire         mipi_reset_n_s1_agent_rsp_fifo_out_valid;                                         // mipi_reset_n_s1_agent_rsp_fifo:out_valid -> mipi_reset_n_s1_agent:rf_sink_valid
	wire  [99:0] mipi_reset_n_s1_agent_rsp_fifo_out_data;                                          // mipi_reset_n_s1_agent_rsp_fifo:out_data -> mipi_reset_n_s1_agent:rf_sink_data
	wire         mipi_reset_n_s1_agent_rsp_fifo_out_ready;                                         // mipi_reset_n_s1_agent:rf_sink_ready -> mipi_reset_n_s1_agent_rsp_fifo:out_ready
	wire         mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket;                                 // mipi_reset_n_s1_agent_rsp_fifo:out_startofpacket -> mipi_reset_n_s1_agent:rf_sink_startofpacket
	wire         mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket;                                   // mipi_reset_n_s1_agent_rsp_fifo:out_endofpacket -> mipi_reset_n_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_021_src_valid;                                                            // cmd_mux_021:src_valid -> mipi_reset_n_s1_agent:cp_valid
	wire  [98:0] cmd_mux_021_src_data;                                                             // cmd_mux_021:src_data -> mipi_reset_n_s1_agent:cp_data
	wire         cmd_mux_021_src_ready;                                                            // mipi_reset_n_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire  [26:0] cmd_mux_021_src_channel;                                                          // cmd_mux_021:src_channel -> mipi_reset_n_s1_agent:cp_channel
	wire         cmd_mux_021_src_startofpacket;                                                    // cmd_mux_021:src_startofpacket -> mipi_reset_n_s1_agent:cp_startofpacket
	wire         cmd_mux_021_src_endofpacket;                                                      // cmd_mux_021:src_endofpacket -> mipi_reset_n_s1_agent:cp_endofpacket
	wire  [31:0] mipi_pwdn_n_s1_agent_m0_readdata;                                                 // mipi_pwdn_n_s1_translator:uav_readdata -> mipi_pwdn_n_s1_agent:m0_readdata
	wire         mipi_pwdn_n_s1_agent_m0_waitrequest;                                              // mipi_pwdn_n_s1_translator:uav_waitrequest -> mipi_pwdn_n_s1_agent:m0_waitrequest
	wire         mipi_pwdn_n_s1_agent_m0_debugaccess;                                              // mipi_pwdn_n_s1_agent:m0_debugaccess -> mipi_pwdn_n_s1_translator:uav_debugaccess
	wire  [18:0] mipi_pwdn_n_s1_agent_m0_address;                                                  // mipi_pwdn_n_s1_agent:m0_address -> mipi_pwdn_n_s1_translator:uav_address
	wire   [3:0] mipi_pwdn_n_s1_agent_m0_byteenable;                                               // mipi_pwdn_n_s1_agent:m0_byteenable -> mipi_pwdn_n_s1_translator:uav_byteenable
	wire         mipi_pwdn_n_s1_agent_m0_read;                                                     // mipi_pwdn_n_s1_agent:m0_read -> mipi_pwdn_n_s1_translator:uav_read
	wire         mipi_pwdn_n_s1_agent_m0_readdatavalid;                                            // mipi_pwdn_n_s1_translator:uav_readdatavalid -> mipi_pwdn_n_s1_agent:m0_readdatavalid
	wire         mipi_pwdn_n_s1_agent_m0_lock;                                                     // mipi_pwdn_n_s1_agent:m0_lock -> mipi_pwdn_n_s1_translator:uav_lock
	wire  [31:0] mipi_pwdn_n_s1_agent_m0_writedata;                                                // mipi_pwdn_n_s1_agent:m0_writedata -> mipi_pwdn_n_s1_translator:uav_writedata
	wire         mipi_pwdn_n_s1_agent_m0_write;                                                    // mipi_pwdn_n_s1_agent:m0_write -> mipi_pwdn_n_s1_translator:uav_write
	wire   [2:0] mipi_pwdn_n_s1_agent_m0_burstcount;                                               // mipi_pwdn_n_s1_agent:m0_burstcount -> mipi_pwdn_n_s1_translator:uav_burstcount
	wire         mipi_pwdn_n_s1_agent_rf_source_valid;                                             // mipi_pwdn_n_s1_agent:rf_source_valid -> mipi_pwdn_n_s1_agent_rsp_fifo:in_valid
	wire  [99:0] mipi_pwdn_n_s1_agent_rf_source_data;                                              // mipi_pwdn_n_s1_agent:rf_source_data -> mipi_pwdn_n_s1_agent_rsp_fifo:in_data
	wire         mipi_pwdn_n_s1_agent_rf_source_ready;                                             // mipi_pwdn_n_s1_agent_rsp_fifo:in_ready -> mipi_pwdn_n_s1_agent:rf_source_ready
	wire         mipi_pwdn_n_s1_agent_rf_source_startofpacket;                                     // mipi_pwdn_n_s1_agent:rf_source_startofpacket -> mipi_pwdn_n_s1_agent_rsp_fifo:in_startofpacket
	wire         mipi_pwdn_n_s1_agent_rf_source_endofpacket;                                       // mipi_pwdn_n_s1_agent:rf_source_endofpacket -> mipi_pwdn_n_s1_agent_rsp_fifo:in_endofpacket
	wire         mipi_pwdn_n_s1_agent_rsp_fifo_out_valid;                                          // mipi_pwdn_n_s1_agent_rsp_fifo:out_valid -> mipi_pwdn_n_s1_agent:rf_sink_valid
	wire  [99:0] mipi_pwdn_n_s1_agent_rsp_fifo_out_data;                                           // mipi_pwdn_n_s1_agent_rsp_fifo:out_data -> mipi_pwdn_n_s1_agent:rf_sink_data
	wire         mipi_pwdn_n_s1_agent_rsp_fifo_out_ready;                                          // mipi_pwdn_n_s1_agent:rf_sink_ready -> mipi_pwdn_n_s1_agent_rsp_fifo:out_ready
	wire         mipi_pwdn_n_s1_agent_rsp_fifo_out_startofpacket;                                  // mipi_pwdn_n_s1_agent_rsp_fifo:out_startofpacket -> mipi_pwdn_n_s1_agent:rf_sink_startofpacket
	wire         mipi_pwdn_n_s1_agent_rsp_fifo_out_endofpacket;                                    // mipi_pwdn_n_s1_agent_rsp_fifo:out_endofpacket -> mipi_pwdn_n_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_022_src_valid;                                                            // cmd_mux_022:src_valid -> mipi_pwdn_n_s1_agent:cp_valid
	wire  [98:0] cmd_mux_022_src_data;                                                             // cmd_mux_022:src_data -> mipi_pwdn_n_s1_agent:cp_data
	wire         cmd_mux_022_src_ready;                                                            // mipi_pwdn_n_s1_agent:cp_ready -> cmd_mux_022:src_ready
	wire  [26:0] cmd_mux_022_src_channel;                                                          // cmd_mux_022:src_channel -> mipi_pwdn_n_s1_agent:cp_channel
	wire         cmd_mux_022_src_startofpacket;                                                    // cmd_mux_022:src_startofpacket -> mipi_pwdn_n_s1_agent:cp_startofpacket
	wire         cmd_mux_022_src_endofpacket;                                                      // cmd_mux_022:src_endofpacket -> mipi_pwdn_n_s1_agent:cp_endofpacket
	wire  [31:0] uart_0_s1_agent_m0_readdata;                                                      // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire         uart_0_s1_agent_m0_waitrequest;                                                   // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire         uart_0_s1_agent_m0_debugaccess;                                                   // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire  [18:0] uart_0_s1_agent_m0_address;                                                       // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire   [3:0] uart_0_s1_agent_m0_byteenable;                                                    // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire         uart_0_s1_agent_m0_read;                                                          // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire         uart_0_s1_agent_m0_readdatavalid;                                                 // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire         uart_0_s1_agent_m0_lock;                                                          // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire  [31:0] uart_0_s1_agent_m0_writedata;                                                     // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire         uart_0_s1_agent_m0_write;                                                         // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire   [2:0] uart_0_s1_agent_m0_burstcount;                                                    // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire         uart_0_s1_agent_rf_source_valid;                                                  // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [99:0] uart_0_s1_agent_rf_source_data;                                                   // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire         uart_0_s1_agent_rf_source_ready;                                                  // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire         uart_0_s1_agent_rf_source_startofpacket;                                          // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire         uart_0_s1_agent_rf_source_endofpacket;                                            // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire         uart_0_s1_agent_rsp_fifo_out_valid;                                               // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [99:0] uart_0_s1_agent_rsp_fifo_out_data;                                                // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire         uart_0_s1_agent_rsp_fifo_out_ready;                                               // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire         uart_0_s1_agent_rsp_fifo_out_startofpacket;                                       // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire         uart_0_s1_agent_rsp_fifo_out_endofpacket;                                         // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_023_src_valid;                                                            // cmd_mux_023:src_valid -> uart_0_s1_agent:cp_valid
	wire  [98:0] cmd_mux_023_src_data;                                                             // cmd_mux_023:src_data -> uart_0_s1_agent:cp_data
	wire         cmd_mux_023_src_ready;                                                            // uart_0_s1_agent:cp_ready -> cmd_mux_023:src_ready
	wire  [26:0] cmd_mux_023_src_channel;                                                          // cmd_mux_023:src_channel -> uart_0_s1_agent:cp_channel
	wire         cmd_mux_023_src_startofpacket;                                                    // cmd_mux_023:src_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire         cmd_mux_023_src_endofpacket;                                                      // cmd_mux_023:src_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire  [31:0] timer_0_s1_agent_m0_readdata;                                                     // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire         timer_0_s1_agent_m0_waitrequest;                                                  // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire         timer_0_s1_agent_m0_debugaccess;                                                  // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire  [18:0] timer_0_s1_agent_m0_address;                                                      // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire   [3:0] timer_0_s1_agent_m0_byteenable;                                                   // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire         timer_0_s1_agent_m0_read;                                                         // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire         timer_0_s1_agent_m0_readdatavalid;                                                // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire         timer_0_s1_agent_m0_lock;                                                         // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire  [31:0] timer_0_s1_agent_m0_writedata;                                                    // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire         timer_0_s1_agent_m0_write;                                                        // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire   [2:0] timer_0_s1_agent_m0_burstcount;                                                   // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire         timer_0_s1_agent_rf_source_valid;                                                 // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [99:0] timer_0_s1_agent_rf_source_data;                                                  // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire         timer_0_s1_agent_rf_source_ready;                                                 // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire         timer_0_s1_agent_rf_source_startofpacket;                                         // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_0_s1_agent_rf_source_endofpacket;                                           // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_valid;                                              // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [99:0] timer_0_s1_agent_rsp_fifo_out_data;                                               // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire         timer_0_s1_agent_rsp_fifo_out_ready;                                              // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire         timer_0_s1_agent_rsp_fifo_out_startofpacket;                                      // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_endofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_024_src_valid;                                                            // cmd_mux_024:src_valid -> timer_0_s1_agent:cp_valid
	wire  [98:0] cmd_mux_024_src_data;                                                             // cmd_mux_024:src_data -> timer_0_s1_agent:cp_data
	wire         cmd_mux_024_src_ready;                                                            // timer_0_s1_agent:cp_ready -> cmd_mux_024:src_ready
	wire  [26:0] cmd_mux_024_src_channel;                                                          // cmd_mux_024:src_channel -> timer_0_s1_agent:cp_channel
	wire         cmd_mux_024_src_startofpacket;                                                    // cmd_mux_024:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire         cmd_mux_024_src_endofpacket;                                                      // cmd_mux_024:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire  [31:0] pio_0_s1_agent_m0_readdata;                                                       // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire         pio_0_s1_agent_m0_waitrequest;                                                    // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire         pio_0_s1_agent_m0_debugaccess;                                                    // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire  [18:0] pio_0_s1_agent_m0_address;                                                        // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire   [3:0] pio_0_s1_agent_m0_byteenable;                                                     // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire         pio_0_s1_agent_m0_read;                                                           // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire         pio_0_s1_agent_m0_readdatavalid;                                                  // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire         pio_0_s1_agent_m0_lock;                                                           // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire  [31:0] pio_0_s1_agent_m0_writedata;                                                      // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire         pio_0_s1_agent_m0_write;                                                          // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire   [2:0] pio_0_s1_agent_m0_burstcount;                                                     // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire         pio_0_s1_agent_rf_source_valid;                                                   // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [99:0] pio_0_s1_agent_rf_source_data;                                                    // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire         pio_0_s1_agent_rf_source_ready;                                                   // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire         pio_0_s1_agent_rf_source_startofpacket;                                           // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_0_s1_agent_rf_source_endofpacket;                                             // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_0_s1_agent_rsp_fifo_out_valid;                                                // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [99:0] pio_0_s1_agent_rsp_fifo_out_data;                                                 // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire         pio_0_s1_agent_rsp_fifo_out_ready;                                                // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire         pio_0_s1_agent_rsp_fifo_out_startofpacket;                                        // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire         pio_0_s1_agent_rsp_fifo_out_endofpacket;                                          // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_025_src_valid;                                                            // cmd_mux_025:src_valid -> pio_0_s1_agent:cp_valid
	wire  [98:0] cmd_mux_025_src_data;                                                             // cmd_mux_025:src_data -> pio_0_s1_agent:cp_data
	wire         cmd_mux_025_src_ready;                                                            // pio_0_s1_agent:cp_ready -> cmd_mux_025:src_ready
	wire  [26:0] cmd_mux_025_src_channel;                                                          // cmd_mux_025:src_channel -> pio_0_s1_agent:cp_channel
	wire         cmd_mux_025_src_startofpacket;                                                    // cmd_mux_025:src_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire         cmd_mux_025_src_endofpacket;                                                      // cmd_mux_025:src_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire  [31:0] pio_1_s1_agent_m0_readdata;                                                       // pio_1_s1_translator:uav_readdata -> pio_1_s1_agent:m0_readdata
	wire         pio_1_s1_agent_m0_waitrequest;                                                    // pio_1_s1_translator:uav_waitrequest -> pio_1_s1_agent:m0_waitrequest
	wire         pio_1_s1_agent_m0_debugaccess;                                                    // pio_1_s1_agent:m0_debugaccess -> pio_1_s1_translator:uav_debugaccess
	wire  [18:0] pio_1_s1_agent_m0_address;                                                        // pio_1_s1_agent:m0_address -> pio_1_s1_translator:uav_address
	wire   [3:0] pio_1_s1_agent_m0_byteenable;                                                     // pio_1_s1_agent:m0_byteenable -> pio_1_s1_translator:uav_byteenable
	wire         pio_1_s1_agent_m0_read;                                                           // pio_1_s1_agent:m0_read -> pio_1_s1_translator:uav_read
	wire         pio_1_s1_agent_m0_readdatavalid;                                                  // pio_1_s1_translator:uav_readdatavalid -> pio_1_s1_agent:m0_readdatavalid
	wire         pio_1_s1_agent_m0_lock;                                                           // pio_1_s1_agent:m0_lock -> pio_1_s1_translator:uav_lock
	wire  [31:0] pio_1_s1_agent_m0_writedata;                                                      // pio_1_s1_agent:m0_writedata -> pio_1_s1_translator:uav_writedata
	wire         pio_1_s1_agent_m0_write;                                                          // pio_1_s1_agent:m0_write -> pio_1_s1_translator:uav_write
	wire   [2:0] pio_1_s1_agent_m0_burstcount;                                                     // pio_1_s1_agent:m0_burstcount -> pio_1_s1_translator:uav_burstcount
	wire         pio_1_s1_agent_rf_source_valid;                                                   // pio_1_s1_agent:rf_source_valid -> pio_1_s1_agent_rsp_fifo:in_valid
	wire  [99:0] pio_1_s1_agent_rf_source_data;                                                    // pio_1_s1_agent:rf_source_data -> pio_1_s1_agent_rsp_fifo:in_data
	wire         pio_1_s1_agent_rf_source_ready;                                                   // pio_1_s1_agent_rsp_fifo:in_ready -> pio_1_s1_agent:rf_source_ready
	wire         pio_1_s1_agent_rf_source_startofpacket;                                           // pio_1_s1_agent:rf_source_startofpacket -> pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire         pio_1_s1_agent_rf_source_endofpacket;                                             // pio_1_s1_agent:rf_source_endofpacket -> pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire         pio_1_s1_agent_rsp_fifo_out_valid;                                                // pio_1_s1_agent_rsp_fifo:out_valid -> pio_1_s1_agent:rf_sink_valid
	wire  [99:0] pio_1_s1_agent_rsp_fifo_out_data;                                                 // pio_1_s1_agent_rsp_fifo:out_data -> pio_1_s1_agent:rf_sink_data
	wire         pio_1_s1_agent_rsp_fifo_out_ready;                                                // pio_1_s1_agent:rf_sink_ready -> pio_1_s1_agent_rsp_fifo:out_ready
	wire         pio_1_s1_agent_rsp_fifo_out_startofpacket;                                        // pio_1_s1_agent_rsp_fifo:out_startofpacket -> pio_1_s1_agent:rf_sink_startofpacket
	wire         pio_1_s1_agent_rsp_fifo_out_endofpacket;                                          // pio_1_s1_agent_rsp_fifo:out_endofpacket -> pio_1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_026_src_valid;                                                            // cmd_mux_026:src_valid -> pio_1_s1_agent:cp_valid
	wire  [98:0] cmd_mux_026_src_data;                                                             // cmd_mux_026:src_data -> pio_1_s1_agent:cp_data
	wire         cmd_mux_026_src_ready;                                                            // pio_1_s1_agent:cp_ready -> cmd_mux_026:src_ready
	wire  [26:0] cmd_mux_026_src_channel;                                                          // cmd_mux_026:src_channel -> pio_1_s1_agent:cp_channel
	wire         cmd_mux_026_src_startofpacket;                                                    // cmd_mux_026:src_startofpacket -> pio_1_s1_agent:cp_startofpacket
	wire         cmd_mux_026_src_endofpacket;                                                      // cmd_mux_026:src_endofpacket -> pio_1_s1_agent:cp_endofpacket
	wire         nios2_gen2_data_master_agent_cp_valid;                                            // nios2_gen2_data_master_agent:cp_valid -> router:sink_valid
	wire  [98:0] nios2_gen2_data_master_agent_cp_data;                                             // nios2_gen2_data_master_agent:cp_data -> router:sink_data
	wire         nios2_gen2_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_data_master_agent:cp_ready
	wire         nios2_gen2_data_master_agent_cp_startofpacket;                                    // nios2_gen2_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         nios2_gen2_data_master_agent_cp_endofpacket;                                      // nios2_gen2_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         nios2_gen2_instruction_master_agent_cp_valid;                                     // nios2_gen2_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [98:0] nios2_gen2_instruction_master_agent_cp_data;                                      // nios2_gen2_instruction_master_agent:cp_data -> router_001:sink_data
	wire         nios2_gen2_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_instruction_master_agent:cp_ready
	wire         nios2_gen2_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         nios2_gen2_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [98:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire         jtag_uart_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire         jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                             // router_002:src_valid -> rsp_demux:sink_valid
	wire  [98:0] router_002_src_data;                                                              // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                             // rsp_demux:sink_ready -> router_002:src_ready
	wire  [26:0] router_002_src_channel;                                                           // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         color_filter_0_avalon_mm_slave_agent_rp_valid;                                    // COLOR_FILTER_0_avalon_mm_slave_agent:rp_valid -> router_003:sink_valid
	wire  [98:0] color_filter_0_avalon_mm_slave_agent_rp_data;                                     // COLOR_FILTER_0_avalon_mm_slave_agent:rp_data -> router_003:sink_data
	wire         color_filter_0_avalon_mm_slave_agent_rp_ready;                                    // router_003:sink_ready -> COLOR_FILTER_0_avalon_mm_slave_agent:rp_ready
	wire         color_filter_0_avalon_mm_slave_agent_rp_startofpacket;                            // COLOR_FILTER_0_avalon_mm_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         color_filter_0_avalon_mm_slave_agent_rp_endofpacket;                              // COLOR_FILTER_0_avalon_mm_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [98:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                             // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [26:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         com_counter_0_avalon_mm_slave_agent_rp_valid;                                     // COM_COUNTER_0_avalon_mm_slave_agent:rp_valid -> router_004:sink_valid
	wire  [98:0] com_counter_0_avalon_mm_slave_agent_rp_data;                                      // COM_COUNTER_0_avalon_mm_slave_agent:rp_data -> router_004:sink_data
	wire         com_counter_0_avalon_mm_slave_agent_rp_ready;                                     // router_004:sink_ready -> COM_COUNTER_0_avalon_mm_slave_agent:rp_ready
	wire         com_counter_0_avalon_mm_slave_agent_rp_startofpacket;                             // COM_COUNTER_0_avalon_mm_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         com_counter_0_avalon_mm_slave_agent_rp_endofpacket;                               // COM_COUNTER_0_avalon_mm_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [98:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                             // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [26:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         rgb_to_hsv_avalon_mm_slave_agent_rp_valid;                                        // RGB_TO_HSV_avalon_mm_slave_agent:rp_valid -> router_005:sink_valid
	wire  [98:0] rgb_to_hsv_avalon_mm_slave_agent_rp_data;                                         // RGB_TO_HSV_avalon_mm_slave_agent:rp_data -> router_005:sink_data
	wire         rgb_to_hsv_avalon_mm_slave_agent_rp_ready;                                        // router_005:sink_ready -> RGB_TO_HSV_avalon_mm_slave_agent:rp_ready
	wire         rgb_to_hsv_avalon_mm_slave_agent_rp_startofpacket;                                // RGB_TO_HSV_avalon_mm_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         rgb_to_hsv_avalon_mm_slave_agent_rp_endofpacket;                                  // RGB_TO_HSV_avalon_mm_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [98:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                             // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [26:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rp_valid;                                 // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rp_valid -> router_006:sink_valid
	wire  [98:0] pixel_grabber_rgb_avalon_mm_slave_agent_rp_data;                                  // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rp_data -> router_006:sink_data
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rp_ready;                                 // router_006:sink_ready -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rp_ready
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rp_startofpacket;                         // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rp_endofpacket;                           // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [98:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                             // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [26:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rp_valid;                                 // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rp_valid -> router_007:sink_valid
	wire  [98:0] pixel_grabber_hsv_avalon_mm_slave_agent_rp_data;                                  // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rp_data -> router_007:sink_data
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rp_ready;                                 // router_007:sink_ready -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rp_ready
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rp_startofpacket;                         // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rp_endofpacket;                           // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [98:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                             // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [26:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         edge_bins_0_avalon_mm_slave_agent_rp_valid;                                       // EDGE_BINS_0_avalon_mm_slave_agent:rp_valid -> router_008:sink_valid
	wire  [98:0] edge_bins_0_avalon_mm_slave_agent_rp_data;                                        // EDGE_BINS_0_avalon_mm_slave_agent:rp_data -> router_008:sink_data
	wire         edge_bins_0_avalon_mm_slave_agent_rp_ready;                                       // router_008:sink_ready -> EDGE_BINS_0_avalon_mm_slave_agent:rp_ready
	wire         edge_bins_0_avalon_mm_slave_agent_rp_startofpacket;                               // EDGE_BINS_0_avalon_mm_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         edge_bins_0_avalon_mm_slave_agent_rp_endofpacket;                                 // EDGE_BINS_0_avalon_mm_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [98:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                             // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [26:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         pixel_buffer_0_avalon_mm_slave_agent_rp_valid;                                    // PIXEL_BUFFER_0_avalon_mm_slave_agent:rp_valid -> router_009:sink_valid
	wire  [98:0] pixel_buffer_0_avalon_mm_slave_agent_rp_data;                                     // PIXEL_BUFFER_0_avalon_mm_slave_agent:rp_data -> router_009:sink_data
	wire         pixel_buffer_0_avalon_mm_slave_agent_rp_ready;                                    // router_009:sink_ready -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rp_ready
	wire         pixel_buffer_0_avalon_mm_slave_agent_rp_startofpacket;                            // PIXEL_BUFFER_0_avalon_mm_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         pixel_buffer_0_avalon_mm_slave_agent_rp_endofpacket;                              // PIXEL_BUFFER_0_avalon_mm_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [98:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                             // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [26:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rp_valid;                                 // i2c_opencores_mipi_avalon_slave_0_agent:rp_valid -> router_010:sink_valid
	wire  [98:0] i2c_opencores_mipi_avalon_slave_0_agent_rp_data;                                  // i2c_opencores_mipi_avalon_slave_0_agent:rp_data -> router_010:sink_data
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rp_ready;                                 // router_010:sink_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rp_ready
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket;                         // i2c_opencores_mipi_avalon_slave_0_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket;                           // i2c_opencores_mipi_avalon_slave_0_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [98:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                             // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [26:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         i2c_opencores_camera_avalon_slave_0_agent_rp_valid;                               // i2c_opencores_camera_avalon_slave_0_agent:rp_valid -> router_011:sink_valid
	wire  [98:0] i2c_opencores_camera_avalon_slave_0_agent_rp_data;                                // i2c_opencores_camera_avalon_slave_0_agent:rp_data -> router_011:sink_data
	wire         i2c_opencores_camera_avalon_slave_0_agent_rp_ready;                               // router_011:sink_ready -> i2c_opencores_camera_avalon_slave_0_agent:rp_ready
	wire         i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket;                       // i2c_opencores_camera_avalon_slave_0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket;                         // i2c_opencores_camera_avalon_slave_0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [98:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                             // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [26:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         fir_0_0_control_agent_rp_valid;                                                   // fir_0_0_control_agent:rp_valid -> router_012:sink_valid
	wire  [98:0] fir_0_0_control_agent_rp_data;                                                    // fir_0_0_control_agent:rp_data -> router_012:sink_data
	wire         fir_0_0_control_agent_rp_ready;                                                   // router_012:sink_ready -> fir_0_0_control_agent:rp_ready
	wire         fir_0_0_control_agent_rp_startofpacket;                                           // fir_0_0_control_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         fir_0_0_control_agent_rp_endofpacket;                                             // fir_0_0_control_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [98:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                             // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [26:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         sysid_qsys_control_slave_agent_rp_valid;                                          // sysid_qsys_control_slave_agent:rp_valid -> router_013:sink_valid
	wire  [98:0] sysid_qsys_control_slave_agent_rp_data;                                           // sysid_qsys_control_slave_agent:rp_data -> router_013:sink_data
	wire         sysid_qsys_control_slave_agent_rp_ready;                                          // router_013:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire         sysid_qsys_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_control_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         sysid_qsys_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_control_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                             // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [98:0] router_013_src_data;                                                              // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                             // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [26:0] router_013_src_channel;                                                           // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         nios2_gen2_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_debug_mem_slave_agent:rp_valid -> router_014:sink_valid
	wire  [98:0] nios2_gen2_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_debug_mem_slave_agent:rp_data -> router_014:sink_data
	wire         nios2_gen2_debug_mem_slave_agent_rp_ready;                                        // router_014:sink_ready -> nios2_gen2_debug_mem_slave_agent:rp_ready
	wire         nios2_gen2_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_debug_mem_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         nios2_gen2_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_debug_mem_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [98:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_012:sink_data
	wire         router_014_src_ready;                                                             // rsp_demux_012:sink_ready -> router_014:src_ready
	wire  [26:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         terasic_auto_focus_0_mm_ctrl_agent_rp_valid;                                      // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_valid -> router_015:sink_valid
	wire  [98:0] terasic_auto_focus_0_mm_ctrl_agent_rp_data;                                       // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_data -> router_015:sink_data
	wire         terasic_auto_focus_0_mm_ctrl_agent_rp_ready;                                      // router_015:sink_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_ready
	wire         terasic_auto_focus_0_mm_ctrl_agent_rp_startofpacket;                              // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         terasic_auto_focus_0_mm_ctrl_agent_rp_endofpacket;                                // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                             // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [98:0] router_015_src_data;                                                              // router_015:src_data -> rsp_demux_013:sink_data
	wire         router_015_src_ready;                                                             // rsp_demux_013:sink_ready -> router_015:src_ready
	wire  [26:0] router_015_src_channel;                                                           // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_startofpacket;                                                     // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_015_src_endofpacket;                                                       // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         altpll_0_pll_slave_agent_rp_valid;                                                // altpll_0_pll_slave_agent:rp_valid -> router_016:sink_valid
	wire  [98:0] altpll_0_pll_slave_agent_rp_data;                                                 // altpll_0_pll_slave_agent:rp_data -> router_016:sink_data
	wire         altpll_0_pll_slave_agent_rp_ready;                                                // router_016:sink_ready -> altpll_0_pll_slave_agent:rp_ready
	wire         altpll_0_pll_slave_agent_rp_startofpacket;                                        // altpll_0_pll_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         altpll_0_pll_slave_agent_rp_endofpacket;                                          // altpll_0_pll_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         router_016_src_valid;                                                             // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [98:0] router_016_src_data;                                                              // router_016:src_data -> rsp_demux_014:sink_data
	wire         router_016_src_ready;                                                             // rsp_demux_014:sink_ready -> router_016:src_ready
	wire  [26:0] router_016_src_channel;                                                           // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_startofpacket;                                                     // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         router_016_src_endofpacket;                                                       // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         altpll_1_pll_slave_agent_rp_valid;                                                // altpll_1_pll_slave_agent:rp_valid -> router_017:sink_valid
	wire  [98:0] altpll_1_pll_slave_agent_rp_data;                                                 // altpll_1_pll_slave_agent:rp_data -> router_017:sink_data
	wire         altpll_1_pll_slave_agent_rp_ready;                                                // router_017:sink_ready -> altpll_1_pll_slave_agent:rp_ready
	wire         altpll_1_pll_slave_agent_rp_startofpacket;                                        // altpll_1_pll_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         altpll_1_pll_slave_agent_rp_endofpacket;                                          // altpll_1_pll_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         router_017_src_valid;                                                             // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [98:0] router_017_src_data;                                                              // router_017:src_data -> rsp_demux_015:sink_data
	wire         router_017_src_ready;                                                             // rsp_demux_015:sink_ready -> router_017:src_ready
	wire  [26:0] router_017_src_channel;                                                           // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_startofpacket;                                                     // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         router_017_src_endofpacket;                                                       // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         onchip_memory2_0_s1_agent_rp_valid;                                               // onchip_memory2_0_s1_agent:rp_valid -> router_018:sink_valid
	wire  [98:0] onchip_memory2_0_s1_agent_rp_data;                                                // onchip_memory2_0_s1_agent:rp_data -> router_018:sink_data
	wire         onchip_memory2_0_s1_agent_rp_ready;                                               // router_018:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire         onchip_memory2_0_s1_agent_rp_startofpacket;                                       // onchip_memory2_0_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         onchip_memory2_0_s1_agent_rp_endofpacket;                                         // onchip_memory2_0_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         router_018_src_valid;                                                             // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [98:0] router_018_src_data;                                                              // router_018:src_data -> rsp_demux_016:sink_data
	wire         router_018_src_ready;                                                             // rsp_demux_016:sink_ready -> router_018:src_ready
	wire  [26:0] router_018_src_channel;                                                           // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_startofpacket;                                                     // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         router_018_src_endofpacket;                                                       // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         timer_s1_agent_rp_valid;                                                          // timer_s1_agent:rp_valid -> router_019:sink_valid
	wire  [98:0] timer_s1_agent_rp_data;                                                           // timer_s1_agent:rp_data -> router_019:sink_data
	wire         timer_s1_agent_rp_ready;                                                          // router_019:sink_ready -> timer_s1_agent:rp_ready
	wire         timer_s1_agent_rp_startofpacket;                                                  // timer_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire         timer_s1_agent_rp_endofpacket;                                                    // timer_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         router_019_src_valid;                                                             // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [98:0] router_019_src_data;                                                              // router_019:src_data -> rsp_demux_017:sink_data
	wire         router_019_src_ready;                                                             // rsp_demux_017:sink_ready -> router_019:src_ready
	wire  [26:0] router_019_src_channel;                                                           // router_019:src_channel -> rsp_demux_017:sink_channel
	wire         router_019_src_startofpacket;                                                     // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire         router_019_src_endofpacket;                                                       // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         led_s1_agent_rp_valid;                                                            // led_s1_agent:rp_valid -> router_020:sink_valid
	wire  [98:0] led_s1_agent_rp_data;                                                             // led_s1_agent:rp_data -> router_020:sink_data
	wire         led_s1_agent_rp_ready;                                                            // router_020:sink_ready -> led_s1_agent:rp_ready
	wire         led_s1_agent_rp_startofpacket;                                                    // led_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire         led_s1_agent_rp_endofpacket;                                                      // led_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire         router_020_src_valid;                                                             // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [98:0] router_020_src_data;                                                              // router_020:src_data -> rsp_demux_018:sink_data
	wire         router_020_src_ready;                                                             // rsp_demux_018:sink_ready -> router_020:src_ready
	wire  [26:0] router_020_src_channel;                                                           // router_020:src_channel -> rsp_demux_018:sink_channel
	wire         router_020_src_startofpacket;                                                     // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire         router_020_src_endofpacket;                                                       // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         sw_s1_agent_rp_valid;                                                             // sw_s1_agent:rp_valid -> router_021:sink_valid
	wire  [98:0] sw_s1_agent_rp_data;                                                              // sw_s1_agent:rp_data -> router_021:sink_data
	wire         sw_s1_agent_rp_ready;                                                             // router_021:sink_ready -> sw_s1_agent:rp_ready
	wire         sw_s1_agent_rp_startofpacket;                                                     // sw_s1_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire         sw_s1_agent_rp_endofpacket;                                                       // sw_s1_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire         router_021_src_valid;                                                             // router_021:src_valid -> rsp_demux_019:sink_valid
	wire  [98:0] router_021_src_data;                                                              // router_021:src_data -> rsp_demux_019:sink_data
	wire         router_021_src_ready;                                                             // rsp_demux_019:sink_ready -> router_021:src_ready
	wire  [26:0] router_021_src_channel;                                                           // router_021:src_channel -> rsp_demux_019:sink_channel
	wire         router_021_src_startofpacket;                                                     // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire         router_021_src_endofpacket;                                                       // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire         key_s1_agent_rp_valid;                                                            // key_s1_agent:rp_valid -> router_022:sink_valid
	wire  [98:0] key_s1_agent_rp_data;                                                             // key_s1_agent:rp_data -> router_022:sink_data
	wire         key_s1_agent_rp_ready;                                                            // router_022:sink_ready -> key_s1_agent:rp_ready
	wire         key_s1_agent_rp_startofpacket;                                                    // key_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire         key_s1_agent_rp_endofpacket;                                                      // key_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire         router_022_src_valid;                                                             // router_022:src_valid -> rsp_demux_020:sink_valid
	wire  [98:0] router_022_src_data;                                                              // router_022:src_data -> rsp_demux_020:sink_data
	wire         router_022_src_ready;                                                             // rsp_demux_020:sink_ready -> router_022:src_ready
	wire  [26:0] router_022_src_channel;                                                           // router_022:src_channel -> rsp_demux_020:sink_channel
	wire         router_022_src_startofpacket;                                                     // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire         router_022_src_endofpacket;                                                       // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire         mipi_reset_n_s1_agent_rp_valid;                                                   // mipi_reset_n_s1_agent:rp_valid -> router_023:sink_valid
	wire  [98:0] mipi_reset_n_s1_agent_rp_data;                                                    // mipi_reset_n_s1_agent:rp_data -> router_023:sink_data
	wire         mipi_reset_n_s1_agent_rp_ready;                                                   // router_023:sink_ready -> mipi_reset_n_s1_agent:rp_ready
	wire         mipi_reset_n_s1_agent_rp_startofpacket;                                           // mipi_reset_n_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire         mipi_reset_n_s1_agent_rp_endofpacket;                                             // mipi_reset_n_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire         router_023_src_valid;                                                             // router_023:src_valid -> rsp_demux_021:sink_valid
	wire  [98:0] router_023_src_data;                                                              // router_023:src_data -> rsp_demux_021:sink_data
	wire         router_023_src_ready;                                                             // rsp_demux_021:sink_ready -> router_023:src_ready
	wire  [26:0] router_023_src_channel;                                                           // router_023:src_channel -> rsp_demux_021:sink_channel
	wire         router_023_src_startofpacket;                                                     // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire         router_023_src_endofpacket;                                                       // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire         mipi_pwdn_n_s1_agent_rp_valid;                                                    // mipi_pwdn_n_s1_agent:rp_valid -> router_024:sink_valid
	wire  [98:0] mipi_pwdn_n_s1_agent_rp_data;                                                     // mipi_pwdn_n_s1_agent:rp_data -> router_024:sink_data
	wire         mipi_pwdn_n_s1_agent_rp_ready;                                                    // router_024:sink_ready -> mipi_pwdn_n_s1_agent:rp_ready
	wire         mipi_pwdn_n_s1_agent_rp_startofpacket;                                            // mipi_pwdn_n_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire         mipi_pwdn_n_s1_agent_rp_endofpacket;                                              // mipi_pwdn_n_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire         router_024_src_valid;                                                             // router_024:src_valid -> rsp_demux_022:sink_valid
	wire  [98:0] router_024_src_data;                                                              // router_024:src_data -> rsp_demux_022:sink_data
	wire         router_024_src_ready;                                                             // rsp_demux_022:sink_ready -> router_024:src_ready
	wire  [26:0] router_024_src_channel;                                                           // router_024:src_channel -> rsp_demux_022:sink_channel
	wire         router_024_src_startofpacket;                                                     // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire         router_024_src_endofpacket;                                                       // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire         uart_0_s1_agent_rp_valid;                                                         // uart_0_s1_agent:rp_valid -> router_025:sink_valid
	wire  [98:0] uart_0_s1_agent_rp_data;                                                          // uart_0_s1_agent:rp_data -> router_025:sink_data
	wire         uart_0_s1_agent_rp_ready;                                                         // router_025:sink_ready -> uart_0_s1_agent:rp_ready
	wire         uart_0_s1_agent_rp_startofpacket;                                                 // uart_0_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire         uart_0_s1_agent_rp_endofpacket;                                                   // uart_0_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire         router_025_src_valid;                                                             // router_025:src_valid -> rsp_demux_023:sink_valid
	wire  [98:0] router_025_src_data;                                                              // router_025:src_data -> rsp_demux_023:sink_data
	wire         router_025_src_ready;                                                             // rsp_demux_023:sink_ready -> router_025:src_ready
	wire  [26:0] router_025_src_channel;                                                           // router_025:src_channel -> rsp_demux_023:sink_channel
	wire         router_025_src_startofpacket;                                                     // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire         router_025_src_endofpacket;                                                       // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire         timer_0_s1_agent_rp_valid;                                                        // timer_0_s1_agent:rp_valid -> router_026:sink_valid
	wire  [98:0] timer_0_s1_agent_rp_data;                                                         // timer_0_s1_agent:rp_data -> router_026:sink_data
	wire         timer_0_s1_agent_rp_ready;                                                        // router_026:sink_ready -> timer_0_s1_agent:rp_ready
	wire         timer_0_s1_agent_rp_startofpacket;                                                // timer_0_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire         timer_0_s1_agent_rp_endofpacket;                                                  // timer_0_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire         router_026_src_valid;                                                             // router_026:src_valid -> rsp_demux_024:sink_valid
	wire  [98:0] router_026_src_data;                                                              // router_026:src_data -> rsp_demux_024:sink_data
	wire         router_026_src_ready;                                                             // rsp_demux_024:sink_ready -> router_026:src_ready
	wire  [26:0] router_026_src_channel;                                                           // router_026:src_channel -> rsp_demux_024:sink_channel
	wire         router_026_src_startofpacket;                                                     // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire         router_026_src_endofpacket;                                                       // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire         pio_0_s1_agent_rp_valid;                                                          // pio_0_s1_agent:rp_valid -> router_027:sink_valid
	wire  [98:0] pio_0_s1_agent_rp_data;                                                           // pio_0_s1_agent:rp_data -> router_027:sink_data
	wire         pio_0_s1_agent_rp_ready;                                                          // router_027:sink_ready -> pio_0_s1_agent:rp_ready
	wire         pio_0_s1_agent_rp_startofpacket;                                                  // pio_0_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire         pio_0_s1_agent_rp_endofpacket;                                                    // pio_0_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire         router_027_src_valid;                                                             // router_027:src_valid -> rsp_demux_025:sink_valid
	wire  [98:0] router_027_src_data;                                                              // router_027:src_data -> rsp_demux_025:sink_data
	wire         router_027_src_ready;                                                             // rsp_demux_025:sink_ready -> router_027:src_ready
	wire  [26:0] router_027_src_channel;                                                           // router_027:src_channel -> rsp_demux_025:sink_channel
	wire         router_027_src_startofpacket;                                                     // router_027:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire         router_027_src_endofpacket;                                                       // router_027:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire         pio_1_s1_agent_rp_valid;                                                          // pio_1_s1_agent:rp_valid -> router_028:sink_valid
	wire  [98:0] pio_1_s1_agent_rp_data;                                                           // pio_1_s1_agent:rp_data -> router_028:sink_data
	wire         pio_1_s1_agent_rp_ready;                                                          // router_028:sink_ready -> pio_1_s1_agent:rp_ready
	wire         pio_1_s1_agent_rp_startofpacket;                                                  // pio_1_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire         pio_1_s1_agent_rp_endofpacket;                                                    // pio_1_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire         router_028_src_valid;                                                             // router_028:src_valid -> rsp_demux_026:sink_valid
	wire  [98:0] router_028_src_data;                                                              // router_028:src_data -> rsp_demux_026:sink_data
	wire         router_028_src_ready;                                                             // rsp_demux_026:sink_ready -> router_028:src_ready
	wire  [26:0] router_028_src_channel;                                                           // router_028:src_channel -> rsp_demux_026:sink_channel
	wire         router_028_src_startofpacket;                                                     // router_028:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire         router_028_src_endofpacket;                                                       // router_028:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire         router_src_valid;                                                                 // router:src_valid -> nios2_gen2_data_master_limiter:cmd_sink_valid
	wire  [98:0] router_src_data;                                                                  // router:src_data -> nios2_gen2_data_master_limiter:cmd_sink_data
	wire         router_src_ready;                                                                 // nios2_gen2_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire  [26:0] router_src_channel;                                                               // router:src_channel -> nios2_gen2_data_master_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                         // router:src_startofpacket -> nios2_gen2_data_master_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                           // router:src_endofpacket -> nios2_gen2_data_master_limiter:cmd_sink_endofpacket
	wire  [98:0] nios2_gen2_data_master_limiter_cmd_src_data;                                      // nios2_gen2_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         nios2_gen2_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> nios2_gen2_data_master_limiter:cmd_src_ready
	wire  [26:0] nios2_gen2_data_master_limiter_cmd_src_channel;                                   // nios2_gen2_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         nios2_gen2_data_master_limiter_cmd_src_startofpacket;                             // nios2_gen2_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         nios2_gen2_data_master_limiter_cmd_src_endofpacket;                               // nios2_gen2_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> nios2_gen2_data_master_limiter:rsp_sink_valid
	wire  [98:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> nios2_gen2_data_master_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                                // nios2_gen2_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [26:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> nios2_gen2_data_master_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> nios2_gen2_data_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> nios2_gen2_data_master_limiter:rsp_sink_endofpacket
	wire         nios2_gen2_data_master_limiter_rsp_src_valid;                                     // nios2_gen2_data_master_limiter:rsp_src_valid -> nios2_gen2_data_master_agent:rp_valid
	wire  [98:0] nios2_gen2_data_master_limiter_rsp_src_data;                                      // nios2_gen2_data_master_limiter:rsp_src_data -> nios2_gen2_data_master_agent:rp_data
	wire         nios2_gen2_data_master_limiter_rsp_src_ready;                                     // nios2_gen2_data_master_agent:rp_ready -> nios2_gen2_data_master_limiter:rsp_src_ready
	wire  [26:0] nios2_gen2_data_master_limiter_rsp_src_channel;                                   // nios2_gen2_data_master_limiter:rsp_src_channel -> nios2_gen2_data_master_agent:rp_channel
	wire         nios2_gen2_data_master_limiter_rsp_src_startofpacket;                             // nios2_gen2_data_master_limiter:rsp_src_startofpacket -> nios2_gen2_data_master_agent:rp_startofpacket
	wire         nios2_gen2_data_master_limiter_rsp_src_endofpacket;                               // nios2_gen2_data_master_limiter:rsp_src_endofpacket -> nios2_gen2_data_master_agent:rp_endofpacket
	wire         router_001_src_valid;                                                             // router_001:src_valid -> nios2_gen2_instruction_master_limiter:cmd_sink_valid
	wire  [98:0] router_001_src_data;                                                              // router_001:src_data -> nios2_gen2_instruction_master_limiter:cmd_sink_data
	wire         router_001_src_ready;                                                             // nios2_gen2_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire  [26:0] router_001_src_channel;                                                           // router_001:src_channel -> nios2_gen2_instruction_master_limiter:cmd_sink_channel
	wire         router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_startofpacket
	wire         router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> nios2_gen2_instruction_master_limiter:cmd_sink_endofpacket
	wire  [98:0] nios2_gen2_instruction_master_limiter_cmd_src_data;                               // nios2_gen2_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire         nios2_gen2_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> nios2_gen2_instruction_master_limiter:cmd_src_ready
	wire  [26:0] nios2_gen2_instruction_master_limiter_cmd_src_channel;                            // nios2_gen2_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         nios2_gen2_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_gen2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         nios2_gen2_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_gen2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> nios2_gen2_instruction_master_limiter:rsp_sink_valid
	wire  [98:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> nios2_gen2_instruction_master_limiter:rsp_sink_data
	wire         rsp_mux_001_src_ready;                                                            // nios2_gen2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire  [26:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> nios2_gen2_instruction_master_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> nios2_gen2_instruction_master_limiter:rsp_sink_endofpacket
	wire         nios2_gen2_instruction_master_limiter_rsp_src_valid;                              // nios2_gen2_instruction_master_limiter:rsp_src_valid -> nios2_gen2_instruction_master_agent:rp_valid
	wire  [98:0] nios2_gen2_instruction_master_limiter_rsp_src_data;                               // nios2_gen2_instruction_master_limiter:rsp_src_data -> nios2_gen2_instruction_master_agent:rp_data
	wire         nios2_gen2_instruction_master_limiter_rsp_src_ready;                              // nios2_gen2_instruction_master_agent:rp_ready -> nios2_gen2_instruction_master_limiter:rsp_src_ready
	wire  [26:0] nios2_gen2_instruction_master_limiter_rsp_src_channel;                            // nios2_gen2_instruction_master_limiter:rsp_src_channel -> nios2_gen2_instruction_master_agent:rp_channel
	wire         nios2_gen2_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_gen2_instruction_master_limiter:rsp_src_startofpacket -> nios2_gen2_instruction_master_agent:rp_startofpacket
	wire         nios2_gen2_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_gen2_instruction_master_limiter:rsp_src_endofpacket -> nios2_gen2_instruction_master_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [98:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [26:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [98:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [26:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                             // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [98:0] cmd_demux_src9_data;                                                              // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                             // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [26:0] cmd_demux_src9_channel;                                                           // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                     // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                       // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                            // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [98:0] cmd_demux_src11_data;                                                             // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                            // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [26:0] cmd_demux_src11_channel;                                                          // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                    // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                      // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                            // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [98:0] cmd_demux_src12_data;                                                             // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                            // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [26:0] cmd_demux_src12_channel;                                                          // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                                    // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                      // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                                            // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [98:0] cmd_demux_src14_data;                                                             // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire         cmd_demux_src14_ready;                                                            // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire  [26:0] cmd_demux_src14_channel;                                                          // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_src14_startofpacket;                                                    // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         cmd_demux_src14_endofpacket;                                                      // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                                            // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [98:0] cmd_demux_src15_data;                                                             // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire         cmd_demux_src15_ready;                                                            // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire  [26:0] cmd_demux_src15_channel;                                                          // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_src15_startofpacket;                                                    // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         cmd_demux_src15_endofpacket;                                                      // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                                            // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [98:0] cmd_demux_src16_data;                                                             // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire         cmd_demux_src16_ready;                                                            // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire  [26:0] cmd_demux_src16_channel;                                                          // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_src16_startofpacket;                                                    // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         cmd_demux_src16_endofpacket;                                                      // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_src17_valid;                                                            // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [98:0] cmd_demux_src17_data;                                                             // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire         cmd_demux_src17_ready;                                                            // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire  [26:0] cmd_demux_src17_channel;                                                          // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_src17_startofpacket;                                                    // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire         cmd_demux_src17_endofpacket;                                                      // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_src18_valid;                                                            // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [98:0] cmd_demux_src18_data;                                                             // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire         cmd_demux_src18_ready;                                                            // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire  [26:0] cmd_demux_src18_channel;                                                          // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire         cmd_demux_src18_startofpacket;                                                    // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire         cmd_demux_src18_endofpacket;                                                      // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         cmd_demux_src19_valid;                                                            // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [98:0] cmd_demux_src19_data;                                                             // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire         cmd_demux_src19_ready;                                                            // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire  [26:0] cmd_demux_src19_channel;                                                          // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire         cmd_demux_src19_startofpacket;                                                    // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire         cmd_demux_src19_endofpacket;                                                      // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire         cmd_demux_src20_valid;                                                            // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [98:0] cmd_demux_src20_data;                                                             // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire         cmd_demux_src20_ready;                                                            // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire  [26:0] cmd_demux_src20_channel;                                                          // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire         cmd_demux_src20_startofpacket;                                                    // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire         cmd_demux_src20_endofpacket;                                                      // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire         cmd_demux_src21_valid;                                                            // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [98:0] cmd_demux_src21_data;                                                             // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire         cmd_demux_src21_ready;                                                            // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire  [26:0] cmd_demux_src21_channel;                                                          // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire         cmd_demux_src21_startofpacket;                                                    // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire         cmd_demux_src21_endofpacket;                                                      // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire         cmd_demux_src22_valid;                                                            // cmd_demux:src22_valid -> cmd_mux_022:sink0_valid
	wire  [98:0] cmd_demux_src22_data;                                                             // cmd_demux:src22_data -> cmd_mux_022:sink0_data
	wire         cmd_demux_src22_ready;                                                            // cmd_mux_022:sink0_ready -> cmd_demux:src22_ready
	wire  [26:0] cmd_demux_src22_channel;                                                          // cmd_demux:src22_channel -> cmd_mux_022:sink0_channel
	wire         cmd_demux_src22_startofpacket;                                                    // cmd_demux:src22_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire         cmd_demux_src22_endofpacket;                                                      // cmd_demux:src22_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire         cmd_demux_src23_valid;                                                            // cmd_demux:src23_valid -> cmd_mux_023:sink0_valid
	wire  [98:0] cmd_demux_src23_data;                                                             // cmd_demux:src23_data -> cmd_mux_023:sink0_data
	wire         cmd_demux_src23_ready;                                                            // cmd_mux_023:sink0_ready -> cmd_demux:src23_ready
	wire  [26:0] cmd_demux_src23_channel;                                                          // cmd_demux:src23_channel -> cmd_mux_023:sink0_channel
	wire         cmd_demux_src23_startofpacket;                                                    // cmd_demux:src23_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire         cmd_demux_src23_endofpacket;                                                      // cmd_demux:src23_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire         cmd_demux_src24_valid;                                                            // cmd_demux:src24_valid -> cmd_mux_024:sink0_valid
	wire  [98:0] cmd_demux_src24_data;                                                             // cmd_demux:src24_data -> cmd_mux_024:sink0_data
	wire         cmd_demux_src24_ready;                                                            // cmd_mux_024:sink0_ready -> cmd_demux:src24_ready
	wire  [26:0] cmd_demux_src24_channel;                                                          // cmd_demux:src24_channel -> cmd_mux_024:sink0_channel
	wire         cmd_demux_src24_startofpacket;                                                    // cmd_demux:src24_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire         cmd_demux_src24_endofpacket;                                                      // cmd_demux:src24_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire         cmd_demux_src25_valid;                                                            // cmd_demux:src25_valid -> cmd_mux_025:sink0_valid
	wire  [98:0] cmd_demux_src25_data;                                                             // cmd_demux:src25_data -> cmd_mux_025:sink0_data
	wire         cmd_demux_src25_ready;                                                            // cmd_mux_025:sink0_ready -> cmd_demux:src25_ready
	wire  [26:0] cmd_demux_src25_channel;                                                          // cmd_demux:src25_channel -> cmd_mux_025:sink0_channel
	wire         cmd_demux_src25_startofpacket;                                                    // cmd_demux:src25_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire         cmd_demux_src25_endofpacket;                                                      // cmd_demux:src25_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire         cmd_demux_src26_valid;                                                            // cmd_demux:src26_valid -> cmd_mux_026:sink0_valid
	wire  [98:0] cmd_demux_src26_data;                                                             // cmd_demux:src26_data -> cmd_mux_026:sink0_data
	wire         cmd_demux_src26_ready;                                                            // cmd_mux_026:sink0_ready -> cmd_demux:src26_ready
	wire  [26:0] cmd_demux_src26_channel;                                                          // cmd_demux:src26_channel -> cmd_mux_026:sink0_channel
	wire         cmd_demux_src26_startofpacket;                                                    // cmd_demux:src26_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire         cmd_demux_src26_endofpacket;                                                      // cmd_demux:src26_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux_012:sink1_valid
	wire  [98:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux_012:sink1_data
	wire         cmd_demux_001_src0_ready;                                                         // cmd_mux_012:sink1_ready -> cmd_demux_001:src0_ready
	wire  [26:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux_012:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_016:sink1_valid
	wire  [98:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_016:sink1_data
	wire         cmd_demux_001_src1_ready;                                                         // cmd_mux_016:sink1_ready -> cmd_demux_001:src1_ready
	wire  [26:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_016:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire         cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> cmd_mux_025:sink1_valid
	wire  [98:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> cmd_mux_025:sink1_data
	wire         cmd_demux_001_src2_ready;                                                         // cmd_mux_025:sink1_ready -> cmd_demux_001:src2_ready
	wire  [26:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> cmd_mux_025:sink1_channel
	wire         cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire         cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [98:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [26:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [98:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [26:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [98:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                         // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [26:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [98:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                         // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [26:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                         // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [98:0] rsp_demux_012_src0_data;                                                          // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                         // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [26:0] rsp_demux_012_src0_channel;                                                       // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                                 // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                                   // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_012_src1_valid;                                                         // rsp_demux_012:src1_valid -> rsp_mux_001:sink0_valid
	wire  [98:0] rsp_demux_012_src1_data;                                                          // rsp_demux_012:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_012_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux_012:src1_ready
	wire  [26:0] rsp_demux_012_src1_channel;                                                       // rsp_demux_012:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_012_src1_startofpacket;                                                 // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_012_src1_endofpacket;                                                   // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_014_src0_valid;                                                         // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [98:0] rsp_demux_014_src0_data;                                                          // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire         rsp_demux_014_src0_ready;                                                         // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire  [26:0] rsp_demux_014_src0_channel;                                                       // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire         rsp_demux_014_src0_startofpacket;                                                 // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                                   // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                         // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [98:0] rsp_demux_015_src0_data;                                                          // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire         rsp_demux_015_src0_ready;                                                         // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire  [26:0] rsp_demux_015_src0_channel;                                                       // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire         rsp_demux_015_src0_startofpacket;                                                 // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                                   // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                         // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [98:0] rsp_demux_016_src0_data;                                                          // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire         rsp_demux_016_src0_ready;                                                         // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire  [26:0] rsp_demux_016_src0_channel;                                                       // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire         rsp_demux_016_src0_startofpacket;                                                 // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                                   // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire         rsp_demux_016_src1_valid;                                                         // rsp_demux_016:src1_valid -> rsp_mux_001:sink1_valid
	wire  [98:0] rsp_demux_016_src1_data;                                                          // rsp_demux_016:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_016_src1_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_016:src1_ready
	wire  [26:0] rsp_demux_016_src1_channel;                                                       // rsp_demux_016:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_016_src1_startofpacket;                                                 // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_016_src1_endofpacket;                                                   // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_017_src0_valid;                                                         // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [98:0] rsp_demux_017_src0_data;                                                          // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire         rsp_demux_017_src0_ready;                                                         // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire  [26:0] rsp_demux_017_src0_channel;                                                       // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire         rsp_demux_017_src0_startofpacket;                                                 // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire         rsp_demux_017_src0_endofpacket;                                                   // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire         rsp_demux_018_src0_valid;                                                         // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [98:0] rsp_demux_018_src0_data;                                                          // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire         rsp_demux_018_src0_ready;                                                         // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire  [26:0] rsp_demux_018_src0_channel;                                                       // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire         rsp_demux_018_src0_startofpacket;                                                 // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire         rsp_demux_018_src0_endofpacket;                                                   // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire         rsp_demux_019_src0_valid;                                                         // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [98:0] rsp_demux_019_src0_data;                                                          // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire         rsp_demux_019_src0_ready;                                                         // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire  [26:0] rsp_demux_019_src0_channel;                                                       // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire         rsp_demux_019_src0_startofpacket;                                                 // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire         rsp_demux_019_src0_endofpacket;                                                   // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire         rsp_demux_020_src0_valid;                                                         // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [98:0] rsp_demux_020_src0_data;                                                          // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire         rsp_demux_020_src0_ready;                                                         // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire  [26:0] rsp_demux_020_src0_channel;                                                       // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire         rsp_demux_020_src0_startofpacket;                                                 // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire         rsp_demux_020_src0_endofpacket;                                                   // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire         rsp_demux_021_src0_valid;                                                         // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [98:0] rsp_demux_021_src0_data;                                                          // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire         rsp_demux_021_src0_ready;                                                         // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire  [26:0] rsp_demux_021_src0_channel;                                                       // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire         rsp_demux_021_src0_startofpacket;                                                 // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire         rsp_demux_021_src0_endofpacket;                                                   // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire         rsp_demux_022_src0_valid;                                                         // rsp_demux_022:src0_valid -> rsp_mux:sink22_valid
	wire  [98:0] rsp_demux_022_src0_data;                                                          // rsp_demux_022:src0_data -> rsp_mux:sink22_data
	wire         rsp_demux_022_src0_ready;                                                         // rsp_mux:sink22_ready -> rsp_demux_022:src0_ready
	wire  [26:0] rsp_demux_022_src0_channel;                                                       // rsp_demux_022:src0_channel -> rsp_mux:sink22_channel
	wire         rsp_demux_022_src0_startofpacket;                                                 // rsp_demux_022:src0_startofpacket -> rsp_mux:sink22_startofpacket
	wire         rsp_demux_022_src0_endofpacket;                                                   // rsp_demux_022:src0_endofpacket -> rsp_mux:sink22_endofpacket
	wire         rsp_demux_023_src0_valid;                                                         // rsp_demux_023:src0_valid -> rsp_mux:sink23_valid
	wire  [98:0] rsp_demux_023_src0_data;                                                          // rsp_demux_023:src0_data -> rsp_mux:sink23_data
	wire         rsp_demux_023_src0_ready;                                                         // rsp_mux:sink23_ready -> rsp_demux_023:src0_ready
	wire  [26:0] rsp_demux_023_src0_channel;                                                       // rsp_demux_023:src0_channel -> rsp_mux:sink23_channel
	wire         rsp_demux_023_src0_startofpacket;                                                 // rsp_demux_023:src0_startofpacket -> rsp_mux:sink23_startofpacket
	wire         rsp_demux_023_src0_endofpacket;                                                   // rsp_demux_023:src0_endofpacket -> rsp_mux:sink23_endofpacket
	wire         rsp_demux_024_src0_valid;                                                         // rsp_demux_024:src0_valid -> rsp_mux:sink24_valid
	wire  [98:0] rsp_demux_024_src0_data;                                                          // rsp_demux_024:src0_data -> rsp_mux:sink24_data
	wire         rsp_demux_024_src0_ready;                                                         // rsp_mux:sink24_ready -> rsp_demux_024:src0_ready
	wire  [26:0] rsp_demux_024_src0_channel;                                                       // rsp_demux_024:src0_channel -> rsp_mux:sink24_channel
	wire         rsp_demux_024_src0_startofpacket;                                                 // rsp_demux_024:src0_startofpacket -> rsp_mux:sink24_startofpacket
	wire         rsp_demux_024_src0_endofpacket;                                                   // rsp_demux_024:src0_endofpacket -> rsp_mux:sink24_endofpacket
	wire         rsp_demux_025_src0_valid;                                                         // rsp_demux_025:src0_valid -> rsp_mux:sink25_valid
	wire  [98:0] rsp_demux_025_src0_data;                                                          // rsp_demux_025:src0_data -> rsp_mux:sink25_data
	wire         rsp_demux_025_src0_ready;                                                         // rsp_mux:sink25_ready -> rsp_demux_025:src0_ready
	wire  [26:0] rsp_demux_025_src0_channel;                                                       // rsp_demux_025:src0_channel -> rsp_mux:sink25_channel
	wire         rsp_demux_025_src0_startofpacket;                                                 // rsp_demux_025:src0_startofpacket -> rsp_mux:sink25_startofpacket
	wire         rsp_demux_025_src0_endofpacket;                                                   // rsp_demux_025:src0_endofpacket -> rsp_mux:sink25_endofpacket
	wire         rsp_demux_025_src1_valid;                                                         // rsp_demux_025:src1_valid -> rsp_mux_001:sink2_valid
	wire  [98:0] rsp_demux_025_src1_data;                                                          // rsp_demux_025:src1_data -> rsp_mux_001:sink2_data
	wire         rsp_demux_025_src1_ready;                                                         // rsp_mux_001:sink2_ready -> rsp_demux_025:src1_ready
	wire  [26:0] rsp_demux_025_src1_channel;                                                       // rsp_demux_025:src1_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_025_src1_startofpacket;                                                 // rsp_demux_025:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire         rsp_demux_025_src1_endofpacket;                                                   // rsp_demux_025:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_026_src0_valid;                                                         // rsp_demux_026:src0_valid -> rsp_mux:sink26_valid
	wire  [98:0] rsp_demux_026_src0_data;                                                          // rsp_demux_026:src0_data -> rsp_mux:sink26_data
	wire         rsp_demux_026_src0_ready;                                                         // rsp_mux:sink26_ready -> rsp_demux_026:src0_ready
	wire  [26:0] rsp_demux_026_src0_channel;                                                       // rsp_demux_026:src0_channel -> rsp_mux:sink26_channel
	wire         rsp_demux_026_src0_startofpacket;                                                 // rsp_demux_026:src0_startofpacket -> rsp_mux:sink26_startofpacket
	wire         rsp_demux_026_src0_endofpacket;                                                   // rsp_demux_026:src0_endofpacket -> rsp_mux:sink26_endofpacket
	wire         cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> crosser:in_valid
	wire  [98:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> crosser:in_data
	wire         cmd_demux_src1_ready;                                                             // crosser:in_ready -> cmd_demux:src1_ready
	wire  [26:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> crosser:in_channel
	wire         cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                                // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [98:0] crosser_out_data;                                                                 // crosser:out_data -> cmd_mux_001:sink0_data
	wire         crosser_out_ready;                                                                // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire  [26:0] crosser_out_channel;                                                              // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire         crosser_out_startofpacket;                                                        // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                          // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> crosser_001:in_valid
	wire  [98:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> crosser_001:in_data
	wire         cmd_demux_src2_ready;                                                             // crosser_001:in_ready -> cmd_demux:src2_ready
	wire  [26:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> crosser_001:in_channel
	wire         cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> crosser_001:in_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                            // crosser_001:out_valid -> cmd_mux_002:sink0_valid
	wire  [98:0] crosser_001_out_data;                                                             // crosser_001:out_data -> cmd_mux_002:sink0_data
	wire         crosser_001_out_ready;                                                            // cmd_mux_002:sink0_ready -> crosser_001:out_ready
	wire  [26:0] crosser_001_out_channel;                                                          // crosser_001:out_channel -> cmd_mux_002:sink0_channel
	wire         crosser_001_out_startofpacket;                                                    // crosser_001:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                                      // crosser_001:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> crosser_002:in_valid
	wire  [98:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> crosser_002:in_data
	wire         cmd_demux_src3_ready;                                                             // crosser_002:in_ready -> cmd_demux:src3_ready
	wire  [26:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> crosser_002:in_channel
	wire         cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> crosser_002:in_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> crosser_002:in_endofpacket
	wire         crosser_002_out_valid;                                                            // crosser_002:out_valid -> cmd_mux_003:sink0_valid
	wire  [98:0] crosser_002_out_data;                                                             // crosser_002:out_data -> cmd_mux_003:sink0_data
	wire         crosser_002_out_ready;                                                            // cmd_mux_003:sink0_ready -> crosser_002:out_ready
	wire  [26:0] crosser_002_out_channel;                                                          // crosser_002:out_channel -> cmd_mux_003:sink0_channel
	wire         crosser_002_out_startofpacket;                                                    // crosser_002:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         crosser_002_out_endofpacket;                                                      // crosser_002:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> crosser_003:in_valid
	wire  [98:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> crosser_003:in_data
	wire         cmd_demux_src4_ready;                                                             // crosser_003:in_ready -> cmd_demux:src4_ready
	wire  [26:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> crosser_003:in_channel
	wire         cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> crosser_003:in_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> crosser_003:in_endofpacket
	wire         crosser_003_out_valid;                                                            // crosser_003:out_valid -> cmd_mux_004:sink0_valid
	wire  [98:0] crosser_003_out_data;                                                             // crosser_003:out_data -> cmd_mux_004:sink0_data
	wire         crosser_003_out_ready;                                                            // cmd_mux_004:sink0_ready -> crosser_003:out_ready
	wire  [26:0] crosser_003_out_channel;                                                          // crosser_003:out_channel -> cmd_mux_004:sink0_channel
	wire         crosser_003_out_startofpacket;                                                    // crosser_003:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         crosser_003_out_endofpacket;                                                      // crosser_003:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> crosser_004:in_valid
	wire  [98:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> crosser_004:in_data
	wire         cmd_demux_src5_ready;                                                             // crosser_004:in_ready -> cmd_demux:src5_ready
	wire  [26:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> crosser_004:in_channel
	wire         cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> crosser_004:in_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> crosser_004:in_endofpacket
	wire         crosser_004_out_valid;                                                            // crosser_004:out_valid -> cmd_mux_005:sink0_valid
	wire  [98:0] crosser_004_out_data;                                                             // crosser_004:out_data -> cmd_mux_005:sink0_data
	wire         crosser_004_out_ready;                                                            // cmd_mux_005:sink0_ready -> crosser_004:out_ready
	wire  [26:0] crosser_004_out_channel;                                                          // crosser_004:out_channel -> cmd_mux_005:sink0_channel
	wire         crosser_004_out_startofpacket;                                                    // crosser_004:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         crosser_004_out_endofpacket;                                                      // crosser_004:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> crosser_005:in_valid
	wire  [98:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> crosser_005:in_data
	wire         cmd_demux_src6_ready;                                                             // crosser_005:in_ready -> cmd_demux:src6_ready
	wire  [26:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> crosser_005:in_channel
	wire         cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> crosser_005:in_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> crosser_005:in_endofpacket
	wire         crosser_005_out_valid;                                                            // crosser_005:out_valid -> cmd_mux_006:sink0_valid
	wire  [98:0] crosser_005_out_data;                                                             // crosser_005:out_data -> cmd_mux_006:sink0_data
	wire         crosser_005_out_ready;                                                            // cmd_mux_006:sink0_ready -> crosser_005:out_ready
	wire  [26:0] crosser_005_out_channel;                                                          // crosser_005:out_channel -> cmd_mux_006:sink0_channel
	wire         crosser_005_out_startofpacket;                                                    // crosser_005:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         crosser_005_out_endofpacket;                                                      // crosser_005:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> crosser_006:in_valid
	wire  [98:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> crosser_006:in_data
	wire         cmd_demux_src7_ready;                                                             // crosser_006:in_ready -> cmd_demux:src7_ready
	wire  [26:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> crosser_006:in_channel
	wire         cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> crosser_006:in_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> crosser_006:in_endofpacket
	wire         crosser_006_out_valid;                                                            // crosser_006:out_valid -> cmd_mux_007:sink0_valid
	wire  [98:0] crosser_006_out_data;                                                             // crosser_006:out_data -> cmd_mux_007:sink0_data
	wire         crosser_006_out_ready;                                                            // cmd_mux_007:sink0_ready -> crosser_006:out_ready
	wire  [26:0] crosser_006_out_channel;                                                          // crosser_006:out_channel -> cmd_mux_007:sink0_channel
	wire         crosser_006_out_startofpacket;                                                    // crosser_006:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         crosser_006_out_endofpacket;                                                      // crosser_006:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                            // cmd_demux:src10_valid -> crosser_007:in_valid
	wire  [98:0] cmd_demux_src10_data;                                                             // cmd_demux:src10_data -> crosser_007:in_data
	wire         cmd_demux_src10_ready;                                                            // crosser_007:in_ready -> cmd_demux:src10_ready
	wire  [26:0] cmd_demux_src10_channel;                                                          // cmd_demux:src10_channel -> crosser_007:in_channel
	wire         cmd_demux_src10_startofpacket;                                                    // cmd_demux:src10_startofpacket -> crosser_007:in_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                      // cmd_demux:src10_endofpacket -> crosser_007:in_endofpacket
	wire         crosser_007_out_valid;                                                            // crosser_007:out_valid -> cmd_mux_010:sink0_valid
	wire  [98:0] crosser_007_out_data;                                                             // crosser_007:out_data -> cmd_mux_010:sink0_data
	wire         crosser_007_out_ready;                                                            // cmd_mux_010:sink0_ready -> crosser_007:out_ready
	wire  [26:0] crosser_007_out_channel;                                                          // crosser_007:out_channel -> cmd_mux_010:sink0_channel
	wire         crosser_007_out_startofpacket;                                                    // crosser_007:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         crosser_007_out_endofpacket;                                                      // crosser_007:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                            // cmd_demux:src13_valid -> crosser_008:in_valid
	wire  [98:0] cmd_demux_src13_data;                                                             // cmd_demux:src13_data -> crosser_008:in_data
	wire         cmd_demux_src13_ready;                                                            // crosser_008:in_ready -> cmd_demux:src13_ready
	wire  [26:0] cmd_demux_src13_channel;                                                          // cmd_demux:src13_channel -> crosser_008:in_channel
	wire         cmd_demux_src13_startofpacket;                                                    // cmd_demux:src13_startofpacket -> crosser_008:in_startofpacket
	wire         cmd_demux_src13_endofpacket;                                                      // cmd_demux:src13_endofpacket -> crosser_008:in_endofpacket
	wire         crosser_008_out_valid;                                                            // crosser_008:out_valid -> cmd_mux_013:sink0_valid
	wire  [98:0] crosser_008_out_data;                                                             // crosser_008:out_data -> cmd_mux_013:sink0_data
	wire         crosser_008_out_ready;                                                            // cmd_mux_013:sink0_ready -> crosser_008:out_ready
	wire  [26:0] crosser_008_out_channel;                                                          // crosser_008:out_channel -> cmd_mux_013:sink0_channel
	wire         crosser_008_out_startofpacket;                                                    // crosser_008:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         crosser_008_out_endofpacket;                                                      // crosser_008:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> crosser_009:in_valid
	wire  [98:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> crosser_009:in_data
	wire         rsp_demux_001_src0_ready;                                                         // crosser_009:in_ready -> rsp_demux_001:src0_ready
	wire  [26:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> crosser_009:in_channel
	wire         rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> crosser_009:in_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> crosser_009:in_endofpacket
	wire         crosser_009_out_valid;                                                            // crosser_009:out_valid -> rsp_mux:sink1_valid
	wire  [98:0] crosser_009_out_data;                                                             // crosser_009:out_data -> rsp_mux:sink1_data
	wire         crosser_009_out_ready;                                                            // rsp_mux:sink1_ready -> crosser_009:out_ready
	wire  [26:0] crosser_009_out_channel;                                                          // crosser_009:out_channel -> rsp_mux:sink1_channel
	wire         crosser_009_out_startofpacket;                                                    // crosser_009:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire         crosser_009_out_endofpacket;                                                      // crosser_009:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> crosser_010:in_valid
	wire  [98:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> crosser_010:in_data
	wire         rsp_demux_002_src0_ready;                                                         // crosser_010:in_ready -> rsp_demux_002:src0_ready
	wire  [26:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> crosser_010:in_channel
	wire         rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> crosser_010:in_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> crosser_010:in_endofpacket
	wire         crosser_010_out_valid;                                                            // crosser_010:out_valid -> rsp_mux:sink2_valid
	wire  [98:0] crosser_010_out_data;                                                             // crosser_010:out_data -> rsp_mux:sink2_data
	wire         crosser_010_out_ready;                                                            // rsp_mux:sink2_ready -> crosser_010:out_ready
	wire  [26:0] crosser_010_out_channel;                                                          // crosser_010:out_channel -> rsp_mux:sink2_channel
	wire         crosser_010_out_startofpacket;                                                    // crosser_010:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire         crosser_010_out_endofpacket;                                                      // crosser_010:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> crosser_011:in_valid
	wire  [98:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> crosser_011:in_data
	wire         rsp_demux_003_src0_ready;                                                         // crosser_011:in_ready -> rsp_demux_003:src0_ready
	wire  [26:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> crosser_011:in_channel
	wire         rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> crosser_011:in_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> crosser_011:in_endofpacket
	wire         crosser_011_out_valid;                                                            // crosser_011:out_valid -> rsp_mux:sink3_valid
	wire  [98:0] crosser_011_out_data;                                                             // crosser_011:out_data -> rsp_mux:sink3_data
	wire         crosser_011_out_ready;                                                            // rsp_mux:sink3_ready -> crosser_011:out_ready
	wire  [26:0] crosser_011_out_channel;                                                          // crosser_011:out_channel -> rsp_mux:sink3_channel
	wire         crosser_011_out_startofpacket;                                                    // crosser_011:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire         crosser_011_out_endofpacket;                                                      // crosser_011:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> crosser_012:in_valid
	wire  [98:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> crosser_012:in_data
	wire         rsp_demux_004_src0_ready;                                                         // crosser_012:in_ready -> rsp_demux_004:src0_ready
	wire  [26:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> crosser_012:in_channel
	wire         rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> crosser_012:in_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> crosser_012:in_endofpacket
	wire         crosser_012_out_valid;                                                            // crosser_012:out_valid -> rsp_mux:sink4_valid
	wire  [98:0] crosser_012_out_data;                                                             // crosser_012:out_data -> rsp_mux:sink4_data
	wire         crosser_012_out_ready;                                                            // rsp_mux:sink4_ready -> crosser_012:out_ready
	wire  [26:0] crosser_012_out_channel;                                                          // crosser_012:out_channel -> rsp_mux:sink4_channel
	wire         crosser_012_out_startofpacket;                                                    // crosser_012:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire         crosser_012_out_endofpacket;                                                      // crosser_012:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> crosser_013:in_valid
	wire  [98:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> crosser_013:in_data
	wire         rsp_demux_005_src0_ready;                                                         // crosser_013:in_ready -> rsp_demux_005:src0_ready
	wire  [26:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> crosser_013:in_channel
	wire         rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> crosser_013:in_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> crosser_013:in_endofpacket
	wire         crosser_013_out_valid;                                                            // crosser_013:out_valid -> rsp_mux:sink5_valid
	wire  [98:0] crosser_013_out_data;                                                             // crosser_013:out_data -> rsp_mux:sink5_data
	wire         crosser_013_out_ready;                                                            // rsp_mux:sink5_ready -> crosser_013:out_ready
	wire  [26:0] crosser_013_out_channel;                                                          // crosser_013:out_channel -> rsp_mux:sink5_channel
	wire         crosser_013_out_startofpacket;                                                    // crosser_013:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire         crosser_013_out_endofpacket;                                                      // crosser_013:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> crosser_014:in_valid
	wire  [98:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> crosser_014:in_data
	wire         rsp_demux_006_src0_ready;                                                         // crosser_014:in_ready -> rsp_demux_006:src0_ready
	wire  [26:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> crosser_014:in_channel
	wire         rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> crosser_014:in_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> crosser_014:in_endofpacket
	wire         crosser_014_out_valid;                                                            // crosser_014:out_valid -> rsp_mux:sink6_valid
	wire  [98:0] crosser_014_out_data;                                                             // crosser_014:out_data -> rsp_mux:sink6_data
	wire         crosser_014_out_ready;                                                            // rsp_mux:sink6_ready -> crosser_014:out_ready
	wire  [26:0] crosser_014_out_channel;                                                          // crosser_014:out_channel -> rsp_mux:sink6_channel
	wire         crosser_014_out_startofpacket;                                                    // crosser_014:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire         crosser_014_out_endofpacket;                                                      // crosser_014:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> crosser_015:in_valid
	wire  [98:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> crosser_015:in_data
	wire         rsp_demux_007_src0_ready;                                                         // crosser_015:in_ready -> rsp_demux_007:src0_ready
	wire  [26:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> crosser_015:in_channel
	wire         rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> crosser_015:in_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> crosser_015:in_endofpacket
	wire         crosser_015_out_valid;                                                            // crosser_015:out_valid -> rsp_mux:sink7_valid
	wire  [98:0] crosser_015_out_data;                                                             // crosser_015:out_data -> rsp_mux:sink7_data
	wire         crosser_015_out_ready;                                                            // rsp_mux:sink7_ready -> crosser_015:out_ready
	wire  [26:0] crosser_015_out_channel;                                                          // crosser_015:out_channel -> rsp_mux:sink7_channel
	wire         crosser_015_out_startofpacket;                                                    // crosser_015:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire         crosser_015_out_endofpacket;                                                      // crosser_015:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> crosser_016:in_valid
	wire  [98:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> crosser_016:in_data
	wire         rsp_demux_010_src0_ready;                                                         // crosser_016:in_ready -> rsp_demux_010:src0_ready
	wire  [26:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> crosser_016:in_channel
	wire         rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> crosser_016:in_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> crosser_016:in_endofpacket
	wire         crosser_016_out_valid;                                                            // crosser_016:out_valid -> rsp_mux:sink10_valid
	wire  [98:0] crosser_016_out_data;                                                             // crosser_016:out_data -> rsp_mux:sink10_data
	wire         crosser_016_out_ready;                                                            // rsp_mux:sink10_ready -> crosser_016:out_ready
	wire  [26:0] crosser_016_out_channel;                                                          // crosser_016:out_channel -> rsp_mux:sink10_channel
	wire         crosser_016_out_startofpacket;                                                    // crosser_016:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire         crosser_016_out_endofpacket;                                                      // crosser_016:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_013_src0_valid;                                                         // rsp_demux_013:src0_valid -> crosser_017:in_valid
	wire  [98:0] rsp_demux_013_src0_data;                                                          // rsp_demux_013:src0_data -> crosser_017:in_data
	wire         rsp_demux_013_src0_ready;                                                         // crosser_017:in_ready -> rsp_demux_013:src0_ready
	wire  [26:0] rsp_demux_013_src0_channel;                                                       // rsp_demux_013:src0_channel -> crosser_017:in_channel
	wire         rsp_demux_013_src0_startofpacket;                                                 // rsp_demux_013:src0_startofpacket -> crosser_017:in_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                                   // rsp_demux_013:src0_endofpacket -> crosser_017:in_endofpacket
	wire         crosser_017_out_valid;                                                            // crosser_017:out_valid -> rsp_mux:sink13_valid
	wire  [98:0] crosser_017_out_data;                                                             // crosser_017:out_data -> rsp_mux:sink13_data
	wire         crosser_017_out_ready;                                                            // rsp_mux:sink13_ready -> crosser_017:out_ready
	wire  [26:0] crosser_017_out_channel;                                                          // crosser_017:out_channel -> rsp_mux:sink13_channel
	wire         crosser_017_out_startofpacket;                                                    // crosser_017:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire         crosser_017_out_endofpacket;                                                      // crosser_017:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire  [26:0] nios2_gen2_data_master_limiter_cmd_valid_data;                                    // nios2_gen2_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire  [26:0] nios2_gen2_instruction_master_limiter_cmd_valid_data;                             // nios2_gen2_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_valid;                        // COLOR_FILTER_0_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_data;                         // COLOR_FILTER_0_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire         color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_001:in_0_ready -> COLOR_FILTER_0_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                // COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> COLOR_FILTER_0_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_valid;                         // COM_COUNTER_0_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_data;                          // COM_COUNTER_0_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire         com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_002:in_0_ready -> COM_COUNTER_0_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                // COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> COM_COUNTER_0_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_valid;                            // RGB_TO_HSV_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_data;                             // RGB_TO_HSV_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire         rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_003:in_0_ready -> RGB_TO_HSV_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                // RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> RGB_TO_HSV_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_valid;                     // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_data;                      // PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire         pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_004:in_0_ready -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                // PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> PIXEL_GRABBER_RGB_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_valid;                     // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_data;                      // PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire         pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_ready;                     // avalon_st_adapter_005:in_0_ready -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                // PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> PIXEL_GRABBER_HSV_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_valid;                           // EDGE_BINS_0_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_data;                            // EDGE_BINS_0_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire         edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_006:in_0_ready -> EDGE_BINS_0_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                // EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> EDGE_BINS_0_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_valid;                        // PIXEL_BUFFER_0_avalon_mm_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_data;                         // PIXEL_BUFFER_0_avalon_mm_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire         pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_ready;                        // avalon_st_adapter_007:in_0_ready -> PIXEL_BUFFER_0_avalon_mm_slave_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                // PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> PIXEL_BUFFER_0_avalon_mm_slave_agent:rdata_fifo_sink_error
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid;                     // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data;                      // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready;                     // avalon_st_adapter_008:in_0_ready -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                // i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> i2c_opencores_mipi_avalon_slave_0_agent:rdata_fifo_sink_error
	wire         i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid;                   // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data;                    // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready;                   // avalon_st_adapter_009:in_0_ready -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                // i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> i2c_opencores_camera_avalon_slave_0_agent:rdata_fifo_sink_error
	wire         fir_0_0_control_agent_rdata_fifo_out_valid;                                       // fir_0_0_control_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] fir_0_0_control_agent_rdata_fifo_out_data;                                        // fir_0_0_control_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire         fir_0_0_control_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_010:in_0_ready -> fir_0_0_control_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> fir_0_0_control_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> fir_0_0_control_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                                // fir_0_0_control_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> fir_0_0_control_agent:rdata_fifo_sink_error
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_011:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                                // avalon_st_adapter_011:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                                 // avalon_st_adapter_011:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                                // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                                // avalon_st_adapter_011:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire         nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_012:in_0_ready -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                                // avalon_st_adapter_012:out_0_valid -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                                 // avalon_st_adapter_012:out_0_data -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                                // nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                                // avalon_st_adapter_012:out_0_error -> nios2_gen2_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_valid;                          // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire  [33:0] terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_data;                           // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire         terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_013:in_0_ready -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_013_out_0_valid;                                                // avalon_st_adapter_013:out_0_valid -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_013_out_0_data;                                                 // avalon_st_adapter_013:out_0_data -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                                // TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                                // avalon_st_adapter_013:out_0_error -> TERASIC_AUTO_FOCUS_0_mm_ctrl_agent:rdata_fifo_sink_error
	wire         altpll_0_pll_slave_agent_rdata_fifo_src_valid;                                    // altpll_0_pll_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire  [33:0] altpll_0_pll_slave_agent_rdata_fifo_src_data;                                     // altpll_0_pll_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire         altpll_0_pll_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_014:in_0_ready -> altpll_0_pll_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_014_out_0_valid;                                                // avalon_st_adapter_014:out_0_valid -> altpll_0_pll_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_014_out_0_data;                                                 // avalon_st_adapter_014:out_0_data -> altpll_0_pll_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                                // altpll_0_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                                // avalon_st_adapter_014:out_0_error -> altpll_0_pll_slave_agent:rdata_fifo_sink_error
	wire         altpll_1_pll_slave_agent_rdata_fifo_src_valid;                                    // altpll_1_pll_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire  [33:0] altpll_1_pll_slave_agent_rdata_fifo_src_data;                                     // altpll_1_pll_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire         altpll_1_pll_slave_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_015:in_0_ready -> altpll_1_pll_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_015_out_0_valid;                                                // avalon_st_adapter_015:out_0_valid -> altpll_1_pll_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_015_out_0_data;                                                 // avalon_st_adapter_015:out_0_data -> altpll_1_pll_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                                // altpll_1_pll_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                                // avalon_st_adapter_015:out_0_error -> altpll_1_pll_slave_agent:rdata_fifo_sink_error
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                   // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire  [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                    // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire         onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter_016:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_016_out_0_valid;                                                // avalon_st_adapter_016:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_016_out_0_data;                                                 // avalon_st_adapter_016:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                                // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                                // avalon_st_adapter_016:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire         timer_s1_agent_rdata_fifo_src_valid;                                              // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_src_data;                                               // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire         timer_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_017:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_017_out_0_valid;                                                // avalon_st_adapter_017:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_017_out_0_data;                                                 // avalon_st_adapter_017:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_017_out_0_ready;                                                // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire   [0:0] avalon_st_adapter_017_out_0_error;                                                // avalon_st_adapter_017:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire         led_s1_agent_rdata_fifo_src_valid;                                                // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire  [33:0] led_s1_agent_rdata_fifo_src_data;                                                 // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire         led_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_018:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_018_out_0_valid;                                                // avalon_st_adapter_018:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_018_out_0_data;                                                 // avalon_st_adapter_018:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_018_out_0_ready;                                                // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire   [0:0] avalon_st_adapter_018_out_0_error;                                                // avalon_st_adapter_018:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire         sw_s1_agent_rdata_fifo_src_valid;                                                 // sw_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire  [33:0] sw_s1_agent_rdata_fifo_src_data;                                                  // sw_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire         sw_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_019:in_0_ready -> sw_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_019_out_0_valid;                                                // avalon_st_adapter_019:out_0_valid -> sw_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_019_out_0_data;                                                 // avalon_st_adapter_019:out_0_data -> sw_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_019_out_0_ready;                                                // sw_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire   [0:0] avalon_st_adapter_019_out_0_error;                                                // avalon_st_adapter_019:out_0_error -> sw_s1_agent:rdata_fifo_sink_error
	wire         key_s1_agent_rdata_fifo_src_valid;                                                // key_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire  [33:0] key_s1_agent_rdata_fifo_src_data;                                                 // key_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire         key_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_020:in_0_ready -> key_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_020_out_0_valid;                                                // avalon_st_adapter_020:out_0_valid -> key_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_020_out_0_data;                                                 // avalon_st_adapter_020:out_0_data -> key_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_020_out_0_ready;                                                // key_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire   [0:0] avalon_st_adapter_020_out_0_error;                                                // avalon_st_adapter_020:out_0_error -> key_s1_agent:rdata_fifo_sink_error
	wire         mipi_reset_n_s1_agent_rdata_fifo_src_valid;                                       // mipi_reset_n_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire  [33:0] mipi_reset_n_s1_agent_rdata_fifo_src_data;                                        // mipi_reset_n_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire         mipi_reset_n_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_021:in_0_ready -> mipi_reset_n_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_021_out_0_valid;                                                // avalon_st_adapter_021:out_0_valid -> mipi_reset_n_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_021_out_0_data;                                                 // avalon_st_adapter_021:out_0_data -> mipi_reset_n_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_021_out_0_ready;                                                // mipi_reset_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire   [0:0] avalon_st_adapter_021_out_0_error;                                                // avalon_st_adapter_021:out_0_error -> mipi_reset_n_s1_agent:rdata_fifo_sink_error
	wire         mipi_pwdn_n_s1_agent_rdata_fifo_src_valid;                                        // mipi_pwdn_n_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_022:in_0_valid
	wire  [33:0] mipi_pwdn_n_s1_agent_rdata_fifo_src_data;                                         // mipi_pwdn_n_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_022:in_0_data
	wire         mipi_pwdn_n_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_022:in_0_ready -> mipi_pwdn_n_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_022_out_0_valid;                                                // avalon_st_adapter_022:out_0_valid -> mipi_pwdn_n_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_022_out_0_data;                                                 // avalon_st_adapter_022:out_0_data -> mipi_pwdn_n_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_022_out_0_ready;                                                // mipi_pwdn_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire   [0:0] avalon_st_adapter_022_out_0_error;                                                // avalon_st_adapter_022:out_0_error -> mipi_pwdn_n_s1_agent:rdata_fifo_sink_error
	wire         uart_0_s1_agent_rdata_fifo_src_valid;                                             // uart_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_023:in_0_valid
	wire  [33:0] uart_0_s1_agent_rdata_fifo_src_data;                                              // uart_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_023:in_0_data
	wire         uart_0_s1_agent_rdata_fifo_src_ready;                                             // avalon_st_adapter_023:in_0_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_023_out_0_valid;                                                // avalon_st_adapter_023:out_0_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_023_out_0_data;                                                 // avalon_st_adapter_023:out_0_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_023_out_0_ready;                                                // uart_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire   [0:0] avalon_st_adapter_023_out_0_error;                                                // avalon_st_adapter_023:out_0_error -> uart_0_s1_agent:rdata_fifo_sink_error
	wire         timer_0_s1_agent_rdata_fifo_src_valid;                                            // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_024:in_0_valid
	wire  [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                             // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_024:in_0_data
	wire         timer_0_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_024:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_024_out_0_valid;                                                // avalon_st_adapter_024:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_024_out_0_data;                                                 // avalon_st_adapter_024:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_024_out_0_ready;                                                // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire   [0:0] avalon_st_adapter_024_out_0_error;                                                // avalon_st_adapter_024:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire         pio_0_s1_agent_rdata_fifo_src_valid;                                              // pio_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_025:in_0_valid
	wire  [33:0] pio_0_s1_agent_rdata_fifo_src_data;                                               // pio_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_025:in_0_data
	wire         pio_0_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_025:in_0_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_025_out_0_valid;                                                // avalon_st_adapter_025:out_0_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_025_out_0_data;                                                 // avalon_st_adapter_025:out_0_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_025_out_0_ready;                                                // pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire   [0:0] avalon_st_adapter_025_out_0_error;                                                // avalon_st_adapter_025:out_0_error -> pio_0_s1_agent:rdata_fifo_sink_error
	wire         pio_1_s1_agent_rdata_fifo_src_valid;                                              // pio_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_026:in_0_valid
	wire  [33:0] pio_1_s1_agent_rdata_fifo_src_data;                                               // pio_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_026:in_0_data
	wire         pio_1_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_026:in_0_ready -> pio_1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_026_out_0_valid;                                                // avalon_st_adapter_026:out_0_valid -> pio_1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_026_out_0_data;                                                 // avalon_st_adapter_026:out_0_data -> pio_1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_026_out_0_ready;                                                // pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire   [0:0] avalon_st_adapter_026_out_0_error;                                                // avalon_st_adapter_026:out_0_error -> pio_1_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_data_master_translator (
		.clk                    (clk_50_clk_clk),                                                            //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_gen2_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_instruction_master_translator (
		.clk                    (clk_50_clk_clk),                                                                   //                       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_gen2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (clk_50_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) color_filter_0_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                       //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (color_filter_0_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (color_filter_0_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (color_filter_0_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (color_filter_0_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (color_filter_0_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (color_filter_0_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (color_filter_0_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (color_filter_0_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (color_filter_0_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (color_filter_0_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (color_filter_0_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COLOR_FILTER_0_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (COLOR_FILTER_0_avalon_mm_slave_write),                  //                         .write
		.av_read                (COLOR_FILTER_0_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (COLOR_FILTER_0_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (COLOR_FILTER_0_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (COLOR_FILTER_0_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) com_counter_0_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                      //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (com_counter_0_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (com_counter_0_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (com_counter_0_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (com_counter_0_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (com_counter_0_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (com_counter_0_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (com_counter_0_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (com_counter_0_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (com_counter_0_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (com_counter_0_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (com_counter_0_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (COM_COUNTER_0_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (COM_COUNTER_0_avalon_mm_slave_write),                  //                         .write
		.av_read                (COM_COUNTER_0_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (COM_COUNTER_0_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (COM_COUNTER_0_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (COM_COUNTER_0_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rgb_to_hsv_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                   //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (rgb_to_hsv_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rgb_to_hsv_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rgb_to_hsv_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (rgb_to_hsv_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (rgb_to_hsv_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rgb_to_hsv_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rgb_to_hsv_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rgb_to_hsv_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rgb_to_hsv_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rgb_to_hsv_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rgb_to_hsv_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (RGB_TO_HSV_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (RGB_TO_HSV_avalon_mm_slave_write),                  //                         .write
		.av_read                (RGB_TO_HSV_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (RGB_TO_HSV_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (RGB_TO_HSV_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (RGB_TO_HSV_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_grabber_rgb_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                          //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (pixel_grabber_rgb_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_grabber_rgb_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_grabber_rgb_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_grabber_rgb_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_grabber_rgb_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_grabber_rgb_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_grabber_rgb_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_grabber_rgb_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_grabber_rgb_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_grabber_rgb_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_grabber_rgb_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (PIXEL_GRABBER_RGB_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (PIXEL_GRABBER_RGB_avalon_mm_slave_write),                  //                         .write
		.av_read                (PIXEL_GRABBER_RGB_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (PIXEL_GRABBER_RGB_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (PIXEL_GRABBER_RGB_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (PIXEL_GRABBER_RGB_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_grabber_hsv_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                          //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (pixel_grabber_hsv_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_grabber_hsv_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_grabber_hsv_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_grabber_hsv_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_grabber_hsv_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_grabber_hsv_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_grabber_hsv_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_grabber_hsv_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_grabber_hsv_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_grabber_hsv_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_grabber_hsv_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (PIXEL_GRABBER_HSV_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (PIXEL_GRABBER_HSV_avalon_mm_slave_write),                  //                         .write
		.av_read                (PIXEL_GRABBER_HSV_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (PIXEL_GRABBER_HSV_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (PIXEL_GRABBER_HSV_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (PIXEL_GRABBER_HSV_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) edge_bins_0_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                    //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (edge_bins_0_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (edge_bins_0_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (edge_bins_0_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (edge_bins_0_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (edge_bins_0_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (edge_bins_0_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (edge_bins_0_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (edge_bins_0_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (edge_bins_0_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (edge_bins_0_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (edge_bins_0_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (EDGE_BINS_0_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (EDGE_BINS_0_avalon_mm_slave_write),                  //                         .write
		.av_read                (EDGE_BINS_0_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (EDGE_BINS_0_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (EDGE_BINS_0_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (EDGE_BINS_0_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_buffer_0_avalon_mm_slave_translator (
		.clk                    (altpll_1_c0_clk),                                       //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (pixel_buffer_0_avalon_mm_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_buffer_0_avalon_mm_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_buffer_0_avalon_mm_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_buffer_0_avalon_mm_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_buffer_0_avalon_mm_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_buffer_0_avalon_mm_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_buffer_0_avalon_mm_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_buffer_0_avalon_mm_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_buffer_0_avalon_mm_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_buffer_0_avalon_mm_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_buffer_0_avalon_mm_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (PIXEL_BUFFER_0_avalon_mm_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (PIXEL_BUFFER_0_avalon_mm_slave_write),                  //                         .write
		.av_read                (PIXEL_BUFFER_0_avalon_mm_slave_read),                   //                         .read
		.av_readdata            (PIXEL_BUFFER_0_avalon_mm_slave_readdata),               //                         .readdata
		.av_writedata           (PIXEL_BUFFER_0_avalon_mm_slave_writedata),              //                         .writedata
		.av_chipselect          (PIXEL_BUFFER_0_avalon_mm_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_mipi_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                           //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (i2c_opencores_mipi_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (i2c_opencores_mipi_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (i2c_opencores_mipi_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (i2c_opencores_mipi_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (i2c_opencores_mipi_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_mipi_avalon_slave_0_write),                  //                         .write
		.av_readdata            (i2c_opencores_mipi_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (i2c_opencores_mipi_avalon_slave_0_writedata),              //                         .writedata
		.av_waitrequest         (i2c_opencores_mipi_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_chipselect          (i2c_opencores_mipi_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                         //              (terminated)
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_byteenable          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_opencores_camera_avalon_slave_0_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (i2c_opencores_camera_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (i2c_opencores_camera_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (i2c_opencores_camera_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (i2c_opencores_camera_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (i2c_opencores_camera_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (i2c_opencores_camera_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (i2c_opencores_camera_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (i2c_opencores_camera_avalon_slave_0_write),                  //                         .write
		.av_readdata            (i2c_opencores_camera_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (i2c_opencores_camera_avalon_slave_0_writedata),              //                         .writedata
		.av_waitrequest         (i2c_opencores_camera_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_chipselect          (i2c_opencores_camera_avalon_slave_0_chipselect),             //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fir_0_0_control_translator (
		.clk                    (altpll_1_c0_clk),                                  //                      clk.clk
		.reset                  (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fir_0_0_control_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (fir_0_0_control_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (fir_0_0_control_agent_m0_read),                    //                         .read
		.uav_write              (fir_0_0_control_agent_m0_write),                   //                         .write
		.uav_waitrequest        (fir_0_0_control_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (fir_0_0_control_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (fir_0_0_control_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (fir_0_0_control_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (fir_0_0_control_agent_m0_writedata),               //                         .writedata
		.uav_lock               (fir_0_0_control_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (fir_0_0_control_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (fir_0_0_control_address),                          //      avalon_anti_slave_0.address
		.av_write               (fir_0_0_control_write),                            //                         .write
		.av_read                (fir_0_0_control_read),                             //                         .read
		.av_readdata            (fir_0_0_control_readdata),                         //                         .readdata
		.av_writedata           (fir_0_0_control_writedata),                        //                         .writedata
		.av_byteenable          (fir_0_0_control_byteenable),                       //                         .byteenable
		.av_readdatavalid       (fir_0_0_control_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest         (fir_0_0_control_waitrequest),                      //                         .waitrequest
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (clk_50_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_debug_mem_slave_translator (
		.clk                    (clk_50_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) terasic_auto_focus_0_mm_ctrl_translator (
		.clk                    (altpll_0_c2_clk),                                        //                      clk.clk
		.reset                  (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (terasic_auto_focus_0_mm_ctrl_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (terasic_auto_focus_0_mm_ctrl_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (terasic_auto_focus_0_mm_ctrl_agent_m0_read),             //                         .read
		.uav_write              (terasic_auto_focus_0_mm_ctrl_agent_m0_write),            //                         .write
		.uav_waitrequest        (terasic_auto_focus_0_mm_ctrl_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (terasic_auto_focus_0_mm_ctrl_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (terasic_auto_focus_0_mm_ctrl_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (terasic_auto_focus_0_mm_ctrl_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (terasic_auto_focus_0_mm_ctrl_agent_m0_writedata),        //                         .writedata
		.uav_lock               (terasic_auto_focus_0_mm_ctrl_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (terasic_auto_focus_0_mm_ctrl_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (TERASIC_AUTO_FOCUS_0_mm_ctrl_address),                   //      avalon_anti_slave_0.address
		.av_write               (TERASIC_AUTO_FOCUS_0_mm_ctrl_write),                     //                         .write
		.av_read                (TERASIC_AUTO_FOCUS_0_mm_ctrl_read),                      //                         .read
		.av_readdata            (TERASIC_AUTO_FOCUS_0_mm_ctrl_readdata),                  //                         .readdata
		.av_writedata           (TERASIC_AUTO_FOCUS_0_mm_ctrl_writedata),                 //                         .writedata
		.av_chipselect          (TERASIC_AUTO_FOCUS_0_mm_ctrl_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_0_pll_slave_translator (
		.clk                    (clk_50_clk_clk),                                             //                      clk.clk
		.reset                  (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_0_pll_slave_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_0_pll_slave_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (altpll_0_pll_slave_agent_m0_read),                           //                         .read
		.uav_write              (altpll_0_pll_slave_agent_m0_write),                          //                         .write
		.uav_waitrequest        (altpll_0_pll_slave_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (altpll_0_pll_slave_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (altpll_0_pll_slave_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (altpll_0_pll_slave_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (altpll_0_pll_slave_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (altpll_0_pll_slave_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (altpll_0_pll_slave_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (altpll_0_pll_slave_address),                                 //      avalon_anti_slave_0.address
		.av_write               (altpll_0_pll_slave_write),                                   //                         .write
		.av_read                (altpll_0_pll_slave_read),                                    //                         .read
		.av_readdata            (altpll_0_pll_slave_readdata),                                //                         .readdata
		.av_writedata           (altpll_0_pll_slave_writedata),                               //                         .writedata
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altpll_1_pll_slave_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (altpll_1_pll_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (altpll_1_pll_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (altpll_1_pll_slave_agent_m0_read),             //                         .read
		.uav_write              (altpll_1_pll_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (altpll_1_pll_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (altpll_1_pll_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (altpll_1_pll_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (altpll_1_pll_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (altpll_1_pll_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (altpll_1_pll_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (altpll_1_pll_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (altpll_1_pll_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (altpll_1_pll_slave_write),                     //                         .write
		.av_read                (altpll_1_pll_slave_read),                      //                         .read
		.av_readdata            (altpll_1_pll_slave_readdata),                  //                         .readdata
		.av_writedata           (altpll_1_pll_slave_writedata),                 //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),            //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                    //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                 //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),               //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),               //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                    //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                       //                         .read
		.uav_write              (timer_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (timer_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                               //                         .write
		.av_readdata            (timer_s1_readdata),                            //                         .readdata
		.av_writedata           (timer_s1_writedata),                           //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                         //                         .read
		.uav_write              (led_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (led_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                 //                         .write
		.av_readdata            (led_s1_readdata),                              //                         .readdata
		.av_writedata           (led_s1_writedata),                             //                         .writedata
		.av_chipselect          (led_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sw_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sw_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (sw_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (sw_s1_agent_m0_read),                          //                         .read
		.uav_write              (sw_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (sw_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (sw_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (sw_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (sw_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (sw_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (sw_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (sw_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (sw_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (sw_s1_readdata),                               //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (key_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (key_s1_agent_m0_read),                         //                         .read
		.uav_write              (key_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (key_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (key_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (key_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (key_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (key_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (key_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (key_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (key_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (key_s1_readdata),                              //                         .readdata
		.av_write               (),                                             //              (terminated)
		.av_read                (),                                             //              (terminated)
		.av_writedata           (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mipi_reset_n_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mipi_reset_n_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (mipi_reset_n_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (mipi_reset_n_s1_agent_m0_read),                //                         .read
		.uav_write              (mipi_reset_n_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (mipi_reset_n_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (mipi_reset_n_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (mipi_reset_n_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (mipi_reset_n_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (mipi_reset_n_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (mipi_reset_n_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (mipi_reset_n_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (mipi_reset_n_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (mipi_reset_n_s1_write),                        //                         .write
		.av_readdata            (mipi_reset_n_s1_readdata),                     //                         .readdata
		.av_writedata           (mipi_reset_n_s1_writedata),                    //                         .writedata
		.av_chipselect          (mipi_reset_n_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mipi_pwdn_n_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mipi_pwdn_n_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (mipi_pwdn_n_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (mipi_pwdn_n_s1_agent_m0_read),                 //                         .read
		.uav_write              (mipi_pwdn_n_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (mipi_pwdn_n_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (mipi_pwdn_n_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (mipi_pwdn_n_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (mipi_pwdn_n_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (mipi_pwdn_n_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (mipi_pwdn_n_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (mipi_pwdn_n_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (mipi_pwdn_n_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (mipi_pwdn_n_s1_write),                         //                         .write
		.av_readdata            (mipi_pwdn_n_s1_readdata),                      //                         .readdata
		.av_writedata           (mipi_pwdn_n_s1_writedata),                     //                         .writedata
		.av_chipselect          (mipi_pwdn_n_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                      //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (uart_0_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                              //                         .write
		.av_read                (uart_0_s1_read),                               //                         .read
		.av_readdata            (uart_0_s1_readdata),                           //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                          //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                      //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                         //                         .chipselect
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                     //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (timer_0_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                             //                         .write
		.av_readdata            (timer_0_s1_readdata),                          //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                         //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_0_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                       //                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (pio_0_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                               //                         .write
		.av_readdata            (pio_0_s1_readdata),                            //                         .readdata
		.av_writedata           (pio_0_s1_writedata),                           //                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_1_s1_translator (
		.clk                    (clk_50_clk_clk),                               //                      clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_1_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (pio_1_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (pio_1_s1_agent_m0_read),                       //                         .read
		.uav_write              (pio_1_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (pio_1_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (pio_1_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (pio_1_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (pio_1_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (pio_1_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (pio_1_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (pio_1_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (pio_1_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (pio_1_s1_write),                               //                         .write
		.av_readdata            (pio_1_s1_readdata),                            //                         .readdata
		.av_writedata           (pio_1_s1_writedata),                           //                         .writedata
		.av_chipselect          (pio_1_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_data_master_agent (
		.clk                   (clk_50_clk_clk),                                                            //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (27),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_instruction_master_agent (
		.clk                   (clk_50_clk_clk),                                                                   //       clk.clk
		.reset                 (nios2_gen2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_gen2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_gen2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_gen2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_gen2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (clk_50_clk_clk),                                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) color_filter_0_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                                 //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (color_filter_0_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (color_filter_0_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (color_filter_0_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (color_filter_0_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (color_filter_0_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (color_filter_0_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (color_filter_0_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (color_filter_0_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (color_filter_0_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (color_filter_0_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (color_filter_0_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (color_filter_0_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (color_filter_0_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (color_filter_0_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (color_filter_0_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (color_filter_0_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                         //                .channel
		.rf_sink_ready           (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (color_filter_0_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (color_filter_0_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (color_filter_0_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (color_filter_0_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (color_filter_0_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) color_filter_0_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                 //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (color_filter_0_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (color_filter_0_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (color_filter_0_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (color_filter_0_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (color_filter_0_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (color_filter_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) color_filter_0_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                           //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (color_filter_0_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) com_counter_0_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                                //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (com_counter_0_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (com_counter_0_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (com_counter_0_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (com_counter_0_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (com_counter_0_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (com_counter_0_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (com_counter_0_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (com_counter_0_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (com_counter_0_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (com_counter_0_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (com_counter_0_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (com_counter_0_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (com_counter_0_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (com_counter_0_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (com_counter_0_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (com_counter_0_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (com_counter_0_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (com_counter_0_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (com_counter_0_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (com_counter_0_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (com_counter_0_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) com_counter_0_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (com_counter_0_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (com_counter_0_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (com_counter_0_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (com_counter_0_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (com_counter_0_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (com_counter_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) com_counter_0_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                          //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (com_counter_0_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rgb_to_hsv_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                             //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (rgb_to_hsv_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rgb_to_hsv_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rgb_to_hsv_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rgb_to_hsv_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rgb_to_hsv_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (rgb_to_hsv_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rgb_to_hsv_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rgb_to_hsv_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (rgb_to_hsv_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rgb_to_hsv_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (rgb_to_hsv_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (rgb_to_hsv_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rgb_to_hsv_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (rgb_to_hsv_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (rgb_to_hsv_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (rgb_to_hsv_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                     //                .channel
		.rf_sink_ready           (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rgb_to_hsv_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rgb_to_hsv_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rgb_to_hsv_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rgb_to_hsv_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rgb_to_hsv_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                             //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (rgb_to_hsv_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (rgb_to_hsv_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (rgb_to_hsv_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rgb_to_hsv_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rgb_to_hsv_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rgb_to_hsv_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                       //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_grabber_rgb_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                                    //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (pixel_grabber_rgb_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_grabber_rgb_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_grabber_rgb_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_grabber_rgb_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_grabber_rgb_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_grabber_rgb_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_grabber_rgb_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_grabber_rgb_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_grabber_rgb_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_grabber_rgb_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_grabber_rgb_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_grabber_rgb_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_grabber_rgb_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_grabber_rgb_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_grabber_rgb_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_grabber_rgb_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                            //                .channel
		.rf_sink_ready           (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                    //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_grabber_rgb_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_grabber_rgb_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                              //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_grabber_hsv_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                                    //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (pixel_grabber_hsv_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_grabber_hsv_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_grabber_hsv_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_grabber_hsv_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_grabber_hsv_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_grabber_hsv_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_grabber_hsv_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_grabber_hsv_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_grabber_hsv_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_grabber_hsv_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_grabber_hsv_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_grabber_hsv_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_grabber_hsv_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_grabber_hsv_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_grabber_hsv_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_grabber_hsv_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                            //                .channel
		.rf_sink_ready           (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                    //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_grabber_hsv_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_grabber_hsv_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                              //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) edge_bins_0_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                              //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (edge_bins_0_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (edge_bins_0_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (edge_bins_0_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (edge_bins_0_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (edge_bins_0_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (edge_bins_0_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (edge_bins_0_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (edge_bins_0_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (edge_bins_0_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (edge_bins_0_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (edge_bins_0_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (edge_bins_0_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (edge_bins_0_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (edge_bins_0_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (edge_bins_0_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (edge_bins_0_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                      //                .channel
		.rf_sink_ready           (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (edge_bins_0_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (edge_bins_0_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (edge_bins_0_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (edge_bins_0_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (edge_bins_0_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) edge_bins_0_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                              //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (edge_bins_0_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (edge_bins_0_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (edge_bins_0_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (edge_bins_0_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (edge_bins_0_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (edge_bins_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) edge_bins_0_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                        //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_buffer_0_avalon_mm_slave_agent (
		.clk                     (altpll_1_c0_clk),                                                 //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (pixel_buffer_0_avalon_mm_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_buffer_0_avalon_mm_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_buffer_0_avalon_mm_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_buffer_0_avalon_mm_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_buffer_0_avalon_mm_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_buffer_0_avalon_mm_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_buffer_0_avalon_mm_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_buffer_0_avalon_mm_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_buffer_0_avalon_mm_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_buffer_0_avalon_mm_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_buffer_0_avalon_mm_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_buffer_0_avalon_mm_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_buffer_0_avalon_mm_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_buffer_0_avalon_mm_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_buffer_0_avalon_mm_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_buffer_0_avalon_mm_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                         //                .channel
		.rf_sink_ready           (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_buffer_0_avalon_mm_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_buffer_0_avalon_mm_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_buffer_0_avalon_mm_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_buffer_0_avalon_mm_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_buffer_0_avalon_mm_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                                 //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (pixel_buffer_0_avalon_mm_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_buffer_0_avalon_mm_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_buffer_0_avalon_mm_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_buffer_0_avalon_mm_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_buffer_0_avalon_mm_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_buffer_0_avalon_mm_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                           //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_mipi_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                     //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                       //       clk_reset.reset
		.m0_address              (i2c_opencores_mipi_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_opencores_mipi_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_opencores_mipi_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_opencores_mipi_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_opencores_mipi_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_opencores_mipi_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_opencores_mipi_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_opencores_mipi_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_opencores_mipi_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_opencores_mipi_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_opencores_mipi_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_opencores_mipi_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_opencores_mipi_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                            //                .channel
		.rf_sink_ready           (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                     //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_mipi_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_opencores_camera_avalon_slave_0_agent (
		.clk                     (clk_50_clk_clk),                                                       //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (i2c_opencores_camera_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_opencores_camera_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_opencores_camera_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_opencores_camera_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_opencores_camera_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_opencores_camera_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_opencores_camera_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_opencores_camera_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_opencores_camera_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_opencores_camera_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_opencores_camera_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_opencores_camera_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_opencores_camera_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_opencores_camera_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                              //                .channel
		.rf_sink_ready           (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                                       //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (i2c_opencores_camera_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_opencores_camera_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_opencores_camera_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_opencores_camera_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fir_0_0_control_agent (
		.clk                     (altpll_1_c0_clk),                                  //             clk.clk
		.reset                   (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (fir_0_0_control_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fir_0_0_control_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fir_0_0_control_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fir_0_0_control_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fir_0_0_control_agent_m0_lock),                    //                .lock
		.m0_readdata             (fir_0_0_control_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fir_0_0_control_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fir_0_0_control_agent_m0_read),                    //                .read
		.m0_waitrequest          (fir_0_0_control_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fir_0_0_control_agent_m0_writedata),               //                .writedata
		.m0_write                (fir_0_0_control_agent_m0_write),                   //                .write
		.rp_endofpacket          (fir_0_0_control_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fir_0_0_control_agent_rp_ready),                   //                .ready
		.rp_valid                (fir_0_0_control_agent_rp_valid),                   //                .valid
		.rp_data                 (fir_0_0_control_agent_rp_data),                    //                .data
		.rp_startofpacket        (fir_0_0_control_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_010_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                          //                .channel
		.rf_sink_ready           (fir_0_0_control_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fir_0_0_control_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fir_0_0_control_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fir_0_0_control_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fir_0_0_control_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fir_0_0_control_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fir_0_0_control_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fir_0_0_control_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fir_0_0_control_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fir_0_0_control_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                //                .error
		.rdata_fifo_src_ready    (fir_0_0_control_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fir_0_0_control_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fir_0_0_control_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fir_0_0_control_agent_rsp_fifo (
		.clk               (altpll_1_c0_clk),                                  //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fir_0_0_control_agent_rf_source_data),             //        in.data
		.in_valid          (fir_0_0_control_agent_rf_source_valid),            //          .valid
		.in_ready          (fir_0_0_control_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fir_0_0_control_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fir_0_0_control_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fir_0_0_control_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fir_0_0_control_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fir_0_0_control_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fir_0_0_control_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fir_0_0_control_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fir_0_0_control_agent_rdata_fifo (
		.clk               (altpll_1_c0_clk),                                  //       clk.clk
		.reset             (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (fir_0_0_control_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (fir_0_0_control_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (fir_0_0_control_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (fir_0_0_control_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (fir_0_0_control_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (fir_0_0_control_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (clk_50_clk_clk),                                            //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                            //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_debug_mem_slave_agent (
		.clk                     (clk_50_clk_clk),                                              //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                              //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) terasic_auto_focus_0_mm_ctrl_agent (
		.clk                     (altpll_0_c2_clk),                                               //             clk.clk
		.reset                   (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (terasic_auto_focus_0_mm_ctrl_agent_m0_address),                 //              m0.address
		.m0_burstcount           (terasic_auto_focus_0_mm_ctrl_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (terasic_auto_focus_0_mm_ctrl_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (terasic_auto_focus_0_mm_ctrl_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (terasic_auto_focus_0_mm_ctrl_agent_m0_lock),                    //                .lock
		.m0_readdata             (terasic_auto_focus_0_mm_ctrl_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (terasic_auto_focus_0_mm_ctrl_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (terasic_auto_focus_0_mm_ctrl_agent_m0_read),                    //                .read
		.m0_waitrequest          (terasic_auto_focus_0_mm_ctrl_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (terasic_auto_focus_0_mm_ctrl_agent_m0_writedata),               //                .writedata
		.m0_write                (terasic_auto_focus_0_mm_ctrl_agent_m0_write),                   //                .write
		.rp_endofpacket          (terasic_auto_focus_0_mm_ctrl_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (terasic_auto_focus_0_mm_ctrl_agent_rp_ready),                   //                .ready
		.rp_valid                (terasic_auto_focus_0_mm_ctrl_agent_rp_valid),                   //                .valid
		.rp_data                 (terasic_auto_focus_0_mm_ctrl_agent_rp_data),                    //                .data
		.rp_startofpacket        (terasic_auto_focus_0_mm_ctrl_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                       //                .channel
		.rf_sink_ready           (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (terasic_auto_focus_0_mm_ctrl_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (terasic_auto_focus_0_mm_ctrl_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (terasic_auto_focus_0_mm_ctrl_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (terasic_auto_focus_0_mm_ctrl_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo (
		.clk               (altpll_0_c2_clk),                                               //       clk.clk
		.reset             (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (terasic_auto_focus_0_mm_ctrl_agent_rf_source_data),             //        in.data
		.in_valid          (terasic_auto_focus_0_mm_ctrl_agent_rf_source_valid),            //          .valid
		.in_ready          (terasic_auto_focus_0_mm_ctrl_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (terasic_auto_focus_0_mm_ctrl_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (terasic_auto_focus_0_mm_ctrl_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo (
		.clk               (altpll_0_c2_clk),                                         //       clk.clk
		.reset             (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                    // (terminated)
		.out_startofpacket (),                                                        // (terminated)
		.out_endofpacket   (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_0_pll_slave_agent (
		.clk                     (clk_50_clk_clk),                                             //             clk.clk
		.reset                   (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altpll_0_pll_slave_agent_m0_address),                        //              m0.address
		.m0_burstcount           (altpll_0_pll_slave_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (altpll_0_pll_slave_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (altpll_0_pll_slave_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (altpll_0_pll_slave_agent_m0_lock),                           //                .lock
		.m0_readdata             (altpll_0_pll_slave_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (altpll_0_pll_slave_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (altpll_0_pll_slave_agent_m0_read),                           //                .read
		.m0_waitrequest          (altpll_0_pll_slave_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (altpll_0_pll_slave_agent_m0_writedata),                      //                .writedata
		.m0_write                (altpll_0_pll_slave_agent_m0_write),                          //                .write
		.rp_endofpacket          (altpll_0_pll_slave_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (altpll_0_pll_slave_agent_rp_ready),                          //                .ready
		.rp_valid                (altpll_0_pll_slave_agent_rp_valid),                          //                .valid
		.rp_data                 (altpll_0_pll_slave_agent_rp_data),                           //                .data
		.rp_startofpacket        (altpll_0_pll_slave_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                    //                .channel
		.rf_sink_ready           (altpll_0_pll_slave_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (altpll_0_pll_slave_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (altpll_0_pll_slave_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (altpll_0_pll_slave_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (altpll_0_pll_slave_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (altpll_0_pll_slave_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (altpll_0_pll_slave_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (altpll_0_pll_slave_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (altpll_0_pll_slave_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_0_pll_slave_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (altpll_0_pll_slave_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_0_pll_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                             //       clk.clk
		.reset             (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altpll_0_pll_slave_agent_rf_source_data),                    //        in.data
		.in_valid          (altpll_0_pll_slave_agent_rf_source_valid),                   //          .valid
		.in_ready          (altpll_0_pll_slave_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (altpll_0_pll_slave_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (altpll_0_pll_slave_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (altpll_0_pll_slave_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (altpll_0_pll_slave_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (altpll_0_pll_slave_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (altpll_0_pll_slave_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (altpll_0_pll_slave_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) altpll_1_pll_slave_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (altpll_1_pll_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (altpll_1_pll_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (altpll_1_pll_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (altpll_1_pll_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (altpll_1_pll_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (altpll_1_pll_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (altpll_1_pll_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (altpll_1_pll_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (altpll_1_pll_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (altpll_1_pll_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (altpll_1_pll_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (altpll_1_pll_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (altpll_1_pll_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (altpll_1_pll_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (altpll_1_pll_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (altpll_1_pll_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                             //                .channel
		.rf_sink_ready           (altpll_1_pll_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (altpll_1_pll_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (altpll_1_pll_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (altpll_1_pll_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (altpll_1_pll_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (altpll_1_pll_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (altpll_1_pll_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (altpll_1_pll_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (altpll_1_pll_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (altpll_1_pll_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (altpll_1_pll_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altpll_1_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (altpll_1_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altpll_1_pll_slave_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (altpll_1_pll_slave_agent_rf_source_data),             //        in.data
		.in_valid          (altpll_1_pll_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (altpll_1_pll_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (altpll_1_pll_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (altpll_1_pll_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (altpll_1_pll_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (altpll_1_pll_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (altpll_1_pll_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (altpll_1_pll_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (altpll_1_pll_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_50_clk_clk),                                       //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                       //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_017_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                      //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),            //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (led_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (led_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_018_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                      //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),            //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sw_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sw_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (sw_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (sw_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (sw_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (sw_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (sw_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (sw_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (sw_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (sw_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (sw_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (sw_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (sw_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (sw_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (sw_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (sw_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (sw_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_019_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                      //                .channel
		.rf_sink_ready           (sw_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (sw_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (sw_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (sw_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (sw_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (sw_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (sw_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (sw_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (sw_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (sw_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sw_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sw_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (sw_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sw_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sw_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (sw_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (sw_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (sw_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (sw_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (sw_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (sw_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (sw_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (sw_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (sw_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (key_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (key_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (key_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (key_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (key_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (key_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (key_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (key_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (key_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (key_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (key_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (key_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (key_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (key_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (key_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (key_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_020_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                      //                .channel
		.rf_sink_ready           (key_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (key_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (key_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (key_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (key_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (key_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (key_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (key_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (key_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (key_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),            //                .error
		.rdata_fifo_src_ready    (key_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (key_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (key_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (key_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (key_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (key_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (key_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (key_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (key_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (key_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (key_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (key_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mipi_reset_n_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (mipi_reset_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mipi_reset_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mipi_reset_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mipi_reset_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mipi_reset_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mipi_reset_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mipi_reset_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mipi_reset_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mipi_reset_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mipi_reset_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mipi_reset_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mipi_reset_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mipi_reset_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mipi_reset_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mipi_reset_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mipi_reset_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_021_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                          //                .channel
		.rf_sink_ready           (mipi_reset_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mipi_reset_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mipi_reset_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mipi_reset_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mipi_reset_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mipi_reset_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mipi_reset_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mipi_reset_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                //                .error
		.rdata_fifo_src_ready    (mipi_reset_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mipi_reset_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mipi_reset_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_reset_n_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                   //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (mipi_reset_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mipi_reset_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mipi_reset_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mipi_reset_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mipi_reset_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mipi_reset_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mipi_reset_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mipi_reset_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mipi_reset_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mipi_reset_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mipi_pwdn_n_s1_agent (
		.clk                     (clk_50_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (mipi_pwdn_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mipi_pwdn_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mipi_pwdn_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mipi_pwdn_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mipi_pwdn_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (mipi_pwdn_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mipi_pwdn_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mipi_pwdn_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (mipi_pwdn_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mipi_pwdn_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (mipi_pwdn_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (mipi_pwdn_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mipi_pwdn_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (mipi_pwdn_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (mipi_pwdn_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (mipi_pwdn_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_022_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                         //                .channel
		.rf_sink_ready           (mipi_pwdn_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mipi_pwdn_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mipi_pwdn_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mipi_pwdn_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mipi_pwdn_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mipi_pwdn_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mipi_pwdn_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mipi_pwdn_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mipi_pwdn_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mipi_pwdn_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),               //                .error
		.rdata_fifo_src_ready    (mipi_pwdn_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mipi_pwdn_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mipi_pwdn_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mipi_pwdn_n_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (mipi_pwdn_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (mipi_pwdn_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (mipi_pwdn_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mipi_pwdn_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mipi_pwdn_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mipi_pwdn_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mipi_pwdn_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mipi_pwdn_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mipi_pwdn_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mipi_pwdn_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_0_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_023_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                      //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),            //                .error
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),               //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_024_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                      //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),            //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),              //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_0_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_025_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_025_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_025_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_025_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_025_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_025_src_channel),                      //                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),            //                .error
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),                //        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (27),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_1_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (nios2_gen2_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pio_1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pio_1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pio_1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pio_1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pio_1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pio_1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pio_1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pio_1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pio_1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pio_1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pio_1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pio_1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pio_1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pio_1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pio_1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_026_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_026_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_026_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_026_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_026_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_026_src_channel),                      //                .channel
		.rf_sink_ready           (pio_1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pio_1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pio_1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pio_1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pio_1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pio_1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pio_1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pio_1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pio_1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pio_1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),            //                .error
		.rdata_fifo_src_ready    (pio_1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pio_1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_1_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_1_s1_agent_rf_source_data),                //        in.data
		.in_valid          (pio_1_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (pio_1_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (pio_1_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (pio_1_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (pio_1_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (pio_1_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (pio_1_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (pio_1_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (pio_1_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	Qsys_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (color_filter_0_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (color_filter_0_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (color_filter_0_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (color_filter_0_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (color_filter_0_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                       //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (com_counter_0_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (com_counter_0_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (com_counter_0_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (com_counter_0_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (com_counter_0_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                      //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_004_src_ready),                                 //       src.ready
		.src_valid          (router_004_src_valid),                                 //          .valid
		.src_data           (router_004_src_data),                                  //          .data
		.src_channel        (router_004_src_channel),                               //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                            //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (rgb_to_hsv_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (rgb_to_hsv_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (rgb_to_hsv_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (rgb_to_hsv_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rgb_to_hsv_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                   //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (pixel_grabber_rgb_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_grabber_rgb_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_grabber_rgb_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_grabber_rgb_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_grabber_rgb_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                          //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_006_src_ready),                                     //       src.ready
		.src_valid          (router_006_src_valid),                                     //          .valid
		.src_data           (router_006_src_data),                                      //          .data
		.src_channel        (router_006_src_channel),                                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (pixel_grabber_hsv_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_grabber_hsv_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_grabber_hsv_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_grabber_hsv_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_grabber_hsv_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                          //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_007_src_ready),                                     //       src.ready
		.src_valid          (router_007_src_valid),                                     //          .valid
		.src_data           (router_007_src_data),                                      //          .data
		.src_channel        (router_007_src_channel),                                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (edge_bins_0_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (edge_bins_0_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (edge_bins_0_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (edge_bins_0_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (edge_bins_0_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                    //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_008_src_ready),                               //       src.ready
		.src_valid          (router_008_src_valid),                               //          .valid
		.src_data           (router_008_src_data),                                //          .data
		.src_channel        (router_008_src_channel),                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                          //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (pixel_buffer_0_avalon_mm_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_0_avalon_mm_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_buffer_0_avalon_mm_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_buffer_0_avalon_mm_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_0_avalon_mm_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (altpll_1_c0_clk),                                       //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_009_src_ready),                                  //       src.ready
		.src_valid          (router_009_src_valid),                                  //          .valid
		.src_data           (router_009_src_data),                                   //          .data
		.src_channel        (router_009_src_channel),                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                             //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (i2c_opencores_mipi_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (i2c_opencores_mipi_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (i2c_opencores_mipi_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (i2c_opencores_mipi_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2c_opencores_mipi_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                           //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_010_src_ready),                                     //       src.ready
		.src_valid          (router_010_src_valid),                                     //          .valid
		.src_data           (router_010_src_data),                                      //          .data
		.src_channel        (router_010_src_channel),                                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (i2c_opencores_camera_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (i2c_opencores_camera_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (i2c_opencores_camera_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (i2c_opencores_camera_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (i2c_opencores_camera_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_011_src_ready),                                       //       src.ready
		.src_valid          (router_011_src_valid),                                       //          .valid
		.src_data           (router_011_src_data),                                        //          .data
		.src_channel        (router_011_src_channel),                                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                  //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (fir_0_0_control_agent_rp_ready),                   //      sink.ready
		.sink_valid         (fir_0_0_control_agent_rp_valid),                   //          .valid
		.sink_data          (fir_0_0_control_agent_rp_data),                    //          .data
		.sink_startofpacket (fir_0_0_control_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (fir_0_0_control_agent_rp_endofpacket),             //          .endofpacket
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                             //       src.ready
		.src_valid          (router_012_src_valid),                             //          .valid
		.src_data           (router_012_src_data),                              //          .data
		.src_channel        (router_012_src_channel),                           //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                        //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_013_src_ready),                            //       src.ready
		.src_valid          (router_013_src_valid),                            //          .valid
		.src_data           (router_013_src_data),                             //          .data
		.src_channel        (router_013_src_channel),                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (nios2_gen2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_50_clk_clk),                                    //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (terasic_auto_focus_0_mm_ctrl_agent_rp_ready),            //      sink.ready
		.sink_valid         (terasic_auto_focus_0_mm_ctrl_agent_rp_valid),            //          .valid
		.sink_data          (terasic_auto_focus_0_mm_ctrl_agent_rp_data),             //          .data
		.sink_startofpacket (terasic_auto_focus_0_mm_ctrl_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (terasic_auto_focus_0_mm_ctrl_agent_rp_endofpacket),      //          .endofpacket
		.clk                (altpll_0_c2_clk),                                        //       clk.clk
		.reset              (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                   //       src.ready
		.src_valid          (router_015_src_valid),                                   //          .valid
		.src_data           (router_015_src_data),                                    //          .data
		.src_channel        (router_015_src_channel),                                 //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                              //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (altpll_0_pll_slave_agent_rp_ready),                          //      sink.ready
		.sink_valid         (altpll_0_pll_slave_agent_rp_valid),                          //          .valid
		.sink_data          (altpll_0_pll_slave_agent_rp_data),                           //          .data
		.sink_startofpacket (altpll_0_pll_slave_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (altpll_0_pll_slave_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                       //       src.ready
		.src_valid          (router_016_src_valid),                                       //          .valid
		.src_data           (router_016_src_data),                                        //          .data
		.src_channel        (router_016_src_channel),                                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                  //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (altpll_1_pll_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (altpll_1_pll_slave_agent_rp_valid),            //          .valid
		.sink_data          (altpll_1_pll_slave_agent_rp_data),             //          .data
		.sink_startofpacket (altpll_1_pll_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (altpll_1_pll_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                         //       src.ready
		.src_valid          (router_017_src_valid),                         //          .valid
		.src_data           (router_017_src_data),                          //          .data
		.src_channel        (router_017_src_channel),                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_014 router_018 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),           //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),            //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                         //       src.ready
		.src_valid          (router_018_src_valid),                         //          .valid
		.src_data           (router_018_src_data),                          //          .data
		.src_channel        (router_018_src_channel),                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (timer_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                      //          .valid
		.sink_data          (timer_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                         //       src.ready
		.src_valid          (router_019_src_valid),                         //          .valid
		.src_data           (router_019_src_data),                          //          .data
		.src_channel        (router_019_src_channel),                       //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (led_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                        //          .valid
		.sink_data          (led_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                         //       src.ready
		.src_valid          (router_020_src_valid),                         //          .valid
		.src_data           (router_020_src_data),                          //          .data
		.src_channel        (router_020_src_channel),                       //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_021 (
		.sink_ready         (sw_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (sw_s1_agent_rp_valid),                         //          .valid
		.sink_data          (sw_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (sw_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (sw_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_021_src_ready),                         //       src.ready
		.src_valid          (router_021_src_valid),                         //          .valid
		.src_data           (router_021_src_data),                          //          .data
		.src_channel        (router_021_src_channel),                       //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_022 (
		.sink_ready         (key_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (key_s1_agent_rp_valid),                        //          .valid
		.sink_data          (key_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (key_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (key_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                         //       src.ready
		.src_valid          (router_022_src_valid),                         //          .valid
		.src_data           (router_022_src_data),                          //          .data
		.src_channel        (router_022_src_channel),                       //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_023 (
		.sink_ready         (mipi_reset_n_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (mipi_reset_n_s1_agent_rp_valid),               //          .valid
		.sink_data          (mipi_reset_n_s1_agent_rp_data),                //          .data
		.sink_startofpacket (mipi_reset_n_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (mipi_reset_n_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                         //       src.ready
		.src_valid          (router_023_src_valid),                         //          .valid
		.src_data           (router_023_src_data),                          //          .data
		.src_channel        (router_023_src_channel),                       //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_024 (
		.sink_ready         (mipi_pwdn_n_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (mipi_pwdn_n_s1_agent_rp_valid),                //          .valid
		.sink_data          (mipi_pwdn_n_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (mipi_pwdn_n_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (mipi_pwdn_n_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                         //       src.ready
		.src_valid          (router_024_src_valid),                         //          .valid
		.src_data           (router_024_src_data),                          //          .data
		.src_channel        (router_024_src_channel),                       //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_025 (
		.sink_ready         (uart_0_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (uart_0_s1_agent_rp_valid),                     //          .valid
		.sink_data          (uart_0_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (uart_0_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (uart_0_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                         //       src.ready
		.src_valid          (router_025_src_valid),                         //          .valid
		.src_data           (router_025_src_data),                          //          .data
		.src_channel        (router_025_src_channel),                       //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_026 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                    //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                         //       src.ready
		.src_valid          (router_026_src_valid),                         //          .valid
		.src_data           (router_026_src_data),                          //          .data
		.src_channel        (router_026_src_channel),                       //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_014 router_027 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                      //          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                         //       src.ready
		.src_valid          (router_027_src_valid),                         //          .valid
		.src_data           (router_027_src_data),                          //          .data
		.src_channel        (router_027_src_channel),                       //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_router_002 router_028 (
		.sink_ready         (pio_1_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (pio_1_s1_agent_rp_valid),                      //          .valid
		.sink_data          (pio_1_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (pio_1_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (pio_1_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                         //       src.ready
		.src_valid          (router_028_src_valid),                         //          .valid
		.src_data           (router_028_src_data),                          //          .data
		.src_channel        (router_028_src_channel),                       //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (27),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_data_master_limiter (
		.clk                    (clk_50_clk_clk),                                       //       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                     //          .valid
		.cmd_sink_data          (router_src_data),                                      //          .data
		.cmd_sink_channel       (router_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (nios2_gen2_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (nios2_gen2_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (27),
		.VALID_WIDTH               (27),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_gen2_instruction_master_limiter (
		.clk                    (clk_50_clk_clk),                                              //       clk.clk
		.reset                  (nios2_gen2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                        //          .valid
		.cmd_sink_data          (router_001_src_data),                                         //          .data
		.cmd_sink_channel       (router_001_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_gen2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (nios2_gen2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_gen2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_gen2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_gen2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_gen2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_gen2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_gen2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	Qsys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_50_clk_clk),                                       //        clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (nios2_gen2_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios2_gen2_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios2_gen2_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios2_gen2_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios2_gen2_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios2_gen2_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                          //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                //           .valid
		.src15_data          (cmd_demux_src15_data),                                 //           .data
		.src15_channel       (cmd_demux_src15_channel),                              //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                          //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                //           .valid
		.src16_data          (cmd_demux_src16_data),                                 //           .data
		.src16_channel       (cmd_demux_src16_channel),                              //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                          //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                //           .valid
		.src17_data          (cmd_demux_src17_data),                                 //           .data
		.src17_channel       (cmd_demux_src17_channel),                              //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                          //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                //           .valid
		.src18_data          (cmd_demux_src18_data),                                 //           .data
		.src18_channel       (cmd_demux_src18_channel),                              //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                        //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                          //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                //           .valid
		.src19_data          (cmd_demux_src19_data),                                 //           .data
		.src19_channel       (cmd_demux_src19_channel),                              //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                        //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                          //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                //           .valid
		.src20_data          (cmd_demux_src20_data),                                 //           .data
		.src20_channel       (cmd_demux_src20_channel),                              //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                        //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                          //           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                //      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                //           .valid
		.src21_data          (cmd_demux_src21_data),                                 //           .data
		.src21_channel       (cmd_demux_src21_channel),                              //           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                        //           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket),                          //           .endofpacket
		.src22_ready         (cmd_demux_src22_ready),                                //      src22.ready
		.src22_valid         (cmd_demux_src22_valid),                                //           .valid
		.src22_data          (cmd_demux_src22_data),                                 //           .data
		.src22_channel       (cmd_demux_src22_channel),                              //           .channel
		.src22_startofpacket (cmd_demux_src22_startofpacket),                        //           .startofpacket
		.src22_endofpacket   (cmd_demux_src22_endofpacket),                          //           .endofpacket
		.src23_ready         (cmd_demux_src23_ready),                                //      src23.ready
		.src23_valid         (cmd_demux_src23_valid),                                //           .valid
		.src23_data          (cmd_demux_src23_data),                                 //           .data
		.src23_channel       (cmd_demux_src23_channel),                              //           .channel
		.src23_startofpacket (cmd_demux_src23_startofpacket),                        //           .startofpacket
		.src23_endofpacket   (cmd_demux_src23_endofpacket),                          //           .endofpacket
		.src24_ready         (cmd_demux_src24_ready),                                //      src24.ready
		.src24_valid         (cmd_demux_src24_valid),                                //           .valid
		.src24_data          (cmd_demux_src24_data),                                 //           .data
		.src24_channel       (cmd_demux_src24_channel),                              //           .channel
		.src24_startofpacket (cmd_demux_src24_startofpacket),                        //           .startofpacket
		.src24_endofpacket   (cmd_demux_src24_endofpacket),                          //           .endofpacket
		.src25_ready         (cmd_demux_src25_ready),                                //      src25.ready
		.src25_valid         (cmd_demux_src25_valid),                                //           .valid
		.src25_data          (cmd_demux_src25_data),                                 //           .data
		.src25_channel       (cmd_demux_src25_channel),                              //           .channel
		.src25_startofpacket (cmd_demux_src25_startofpacket),                        //           .startofpacket
		.src25_endofpacket   (cmd_demux_src25_endofpacket),                          //           .endofpacket
		.src26_ready         (cmd_demux_src26_ready),                                //      src26.ready
		.src26_valid         (cmd_demux_src26_valid),                                //           .valid
		.src26_data          (cmd_demux_src26_data),                                 //           .data
		.src26_channel       (cmd_demux_src26_channel),                              //           .channel
		.src26_startofpacket (cmd_demux_src26_startofpacket),                        //           .startofpacket
		.src26_endofpacket   (cmd_demux_src26_endofpacket)                           //           .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_50_clk_clk),                                              //        clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_gen2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_gen2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_gen2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_gen2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_gen2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_gen2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                              //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                    //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                    //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                     //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                  //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                            //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                               //           .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                //          .valid
		.sink0_channel       (crosser_out_channel),                              //          .channel
		.sink0_data          (crosser_out_data),                                 //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                           //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                            //          .valid
		.sink0_channel       (crosser_001_out_channel),                          //          .channel
		.sink0_data          (crosser_001_out_data),                             //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                            //          .valid
		.sink0_channel       (crosser_002_out_channel),                          //          .channel
		.sink0_data          (crosser_002_out_data),                             //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                            //          .valid
		.sink0_channel       (crosser_003_out_channel),                          //          .channel
		.sink0_data          (crosser_003_out_data),                             //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                            //          .valid
		.sink0_channel       (crosser_004_out_channel),                          //          .channel
		.sink0_data          (crosser_004_out_data),                             //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                            //          .valid
		.sink0_channel       (crosser_005_out_channel),                          //          .channel
		.sink0_data          (crosser_005_out_data),                             //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                            //          .valid
		.sink0_channel       (crosser_006_out_channel),                          //          .channel
		.sink0_data          (crosser_006_out_data),                             //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                       //          .channel
		.sink0_data          (cmd_demux_src8_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                       //          .channel
		.sink0_data          (cmd_demux_src9_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (altpll_1_c0_clk),                                  //       clk.clk
		.reset               (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                            //          .valid
		.src_data            (cmd_mux_010_src_data),                             //          .data
		.src_channel         (cmd_mux_010_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                            //          .valid
		.sink0_channel       (crosser_007_out_channel),                          //          .channel
		.sink0_data          (crosser_007_out_data),                             //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                       //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                      //          .channel
		.sink0_data          (cmd_demux_src11_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux_012 cmd_mux_012 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                      //          .channel
		.sink0_data          (cmd_demux_src12_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (altpll_0_c2_clk),                                        //       clk.clk
		.reset               (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                  //          .valid
		.src_data            (cmd_mux_013_src_data),                                   //          .data
		.src_channel         (cmd_mux_013_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                                  //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                                  //          .valid
		.sink0_channel       (crosser_008_out_channel),                                //          .channel
		.sink0_data          (crosser_008_out_data),                                   //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)                             //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_50_clk_clk),                                             //       clk.clk
		.reset               (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                      //          .valid
		.src_data            (cmd_mux_014_src_data),                                       //          .data
		.src_channel         (cmd_mux_014_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src14_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                                 //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                        //          .valid
		.src_data            (cmd_mux_015_src_data),                         //          .data
		.src_channel         (cmd_mux_015_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                      //          .channel
		.sink0_data          (cmd_demux_src15_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux_012 cmd_mux_016 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                        //          .valid
		.src_data            (cmd_mux_016_src_data),                         //          .data
		.src_channel         (cmd_mux_016_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                      //          .channel
		.sink0_data          (cmd_demux_src16_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                        //          .valid
		.src_data            (cmd_mux_017_src_data),                         //          .data
		.src_channel         (cmd_mux_017_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                      //          .channel
		.sink0_data          (cmd_demux_src17_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                        //          .valid
		.src_data            (cmd_mux_018_src_data),                         //          .data
		.src_channel         (cmd_mux_018_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                      //          .channel
		.sink0_data          (cmd_demux_src18_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                        //          .valid
		.src_data            (cmd_mux_019_src_data),                         //          .data
		.src_channel         (cmd_mux_019_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                      //          .channel
		.sink0_data          (cmd_demux_src19_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_020 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                        //          .valid
		.src_data            (cmd_mux_020_src_data),                         //          .data
		.src_channel         (cmd_mux_020_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                      //          .channel
		.sink0_data          (cmd_demux_src20_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_021 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                        //          .valid
		.src_data            (cmd_mux_021_src_data),                         //          .data
		.src_channel         (cmd_mux_021_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                      //          .channel
		.sink0_data          (cmd_demux_src21_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_022 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                        //          .valid
		.src_data            (cmd_mux_022_src_data),                         //          .data
		.src_channel         (cmd_mux_022_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src22_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src22_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src22_channel),                      //          .channel
		.sink0_data          (cmd_demux_src22_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src22_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src22_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_023 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                        //          .valid
		.src_data            (cmd_mux_023_src_data),                         //          .data
		.src_channel         (cmd_mux_023_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src23_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src23_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src23_channel),                      //          .channel
		.sink0_data          (cmd_demux_src23_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src23_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src23_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_024 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                        //          .valid
		.src_data            (cmd_mux_024_src_data),                         //          .data
		.src_channel         (cmd_mux_024_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src24_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src24_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src24_channel),                      //          .channel
		.sink0_data          (cmd_demux_src24_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src24_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src24_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux_012 cmd_mux_025 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                        //          .valid
		.src_data            (cmd_mux_025_src_data),                         //          .data
		.src_channel         (cmd_mux_025_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src25_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src25_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src25_channel),                      //          .channel
		.sink0_data          (cmd_demux_src25_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src25_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src25_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_cmd_mux cmd_mux_026 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                        //          .valid
		.src_data            (cmd_mux_026_src_data),                         //          .data
		.src_channel         (cmd_mux_026_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src26_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src26_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src26_channel),                      //          .channel
		.sink0_data          (cmd_demux_src26_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src26_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src26_endofpacket)                   //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_006 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                             //      sink.ready
		.sink_channel       (router_009_src_channel),                           //          .channel
		.sink_data          (router_009_src_data),                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                         //      sink.ready
		.sink_channel       (router_010_src_channel),                       //          .channel
		.sink_data          (router_010_src_data),                          //          .data
		.sink_startofpacket (router_010_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_010_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                         //      sink.ready
		.sink_channel       (router_011_src_channel),                       //          .channel
		.sink_data          (router_011_src_data),                          //          .data
		.sink_startofpacket (router_011_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_011_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_001 rsp_demux_010 (
		.clk                (altpll_1_c0_clk),                                  //       clk.clk
		.reset              (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                             //      sink.ready
		.sink_channel       (router_012_src_channel),                           //          .channel
		.sink_data          (router_012_src_data),                              //          .data
		.sink_startofpacket (router_012_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_012_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_010_src0_data),                          //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                    //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                         //      sink.ready
		.sink_channel       (router_013_src_channel),                       //          .channel
		.sink_data          (router_013_src_data),                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_012 rsp_demux_012 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                         //      sink.ready
		.sink_channel       (router_014_src_channel),                       //          .channel
		.sink_data          (router_014_src_data),                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_012_src1_data),                      //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_013 rsp_demux_013 (
		.clk                (altpll_0_c2_clk),                                        //       clk.clk
		.reset              (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                   //      sink.ready
		.sink_channel       (router_015_src_channel),                                 //          .channel
		.sink_data          (router_015_src_data),                                    //          .data
		.sink_startofpacket (router_015_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_015_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                          //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_50_clk_clk),                                             //       clk.clk
		.reset              (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                       //      sink.ready
		.sink_channel       (router_016_src_channel),                                     //          .channel
		.sink_data          (router_016_src_data),                                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                              //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                         //      sink.ready
		.sink_channel       (router_017_src_channel),                       //          .channel
		.sink_data          (router_017_src_data),                          //          .data
		.sink_startofpacket (router_017_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_017_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_015_src0_data),                      //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_012 rsp_demux_016 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                         //      sink.ready
		.sink_channel       (router_018_src_channel),                       //          .channel
		.sink_data          (router_018_src_data),                          //          .data
		.sink_startofpacket (router_018_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_018_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_016_src0_data),                      //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_016_src1_data),                      //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                         //      sink.ready
		.sink_channel       (router_019_src_channel),                       //          .channel
		.sink_data          (router_019_src_data),                          //          .data
		.sink_startofpacket (router_019_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_019_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_017_src0_data),                      //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                         //      sink.ready
		.sink_channel       (router_020_src_channel),                       //          .channel
		.sink_data          (router_020_src_data),                          //          .data
		.sink_startofpacket (router_020_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_020_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_018_src0_data),                      //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                         //      sink.ready
		.sink_channel       (router_021_src_channel),                       //          .channel
		.sink_data          (router_021_src_data),                          //          .data
		.sink_startofpacket (router_021_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_021_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_019_src0_data),                      //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_020 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                         //      sink.ready
		.sink_channel       (router_022_src_channel),                       //          .channel
		.sink_data          (router_022_src_data),                          //          .data
		.sink_startofpacket (router_022_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_022_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_020_src0_data),                      //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_021 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                         //      sink.ready
		.sink_channel       (router_023_src_channel),                       //          .channel
		.sink_data          (router_023_src_data),                          //          .data
		.sink_startofpacket (router_023_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_023_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_021_src0_data),                      //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_022 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                         //      sink.ready
		.sink_channel       (router_024_src_channel),                       //          .channel
		.sink_data          (router_024_src_data),                          //          .data
		.sink_startofpacket (router_024_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_024_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_022_src0_data),                      //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_023 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                         //      sink.ready
		.sink_channel       (router_025_src_channel),                       //          .channel
		.sink_data          (router_025_src_data),                          //          .data
		.sink_startofpacket (router_025_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_025_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_023_src0_data),                      //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_024 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                         //      sink.ready
		.sink_channel       (router_026_src_channel),                       //          .channel
		.sink_data          (router_026_src_data),                          //          .data
		.sink_startofpacket (router_026_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_026_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_024_src0_data),                      //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux_012 rsp_demux_025 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                         //      sink.ready
		.sink_channel       (router_027_src_channel),                       //          .channel
		.sink_data          (router_027_src_data),                          //          .data
		.sink_startofpacket (router_027_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_027_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_025_src0_data),                      //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_025_src1_data),                      //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_demux rsp_demux_026 (
		.clk                (clk_50_clk_clk),                               //       clk.clk
		.reset              (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                         //      sink.ready
		.sink_channel       (router_028_src_channel),                       //          .channel
		.sink_data          (router_028_src_data),                          //          .data
		.sink_startofpacket (router_028_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_028_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_026_src0_data),                      //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_50_clk_clk),                               //       clk.clk
		.reset                (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                            //       src.ready
		.src_valid            (rsp_mux_src_valid),                            //          .valid
		.src_data             (rsp_mux_src_data),                             //          .data
		.src_channel          (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                       //          .channel
		.sink0_data           (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready          (crosser_009_out_ready),                        //     sink1.ready
		.sink1_valid          (crosser_009_out_valid),                        //          .valid
		.sink1_channel        (crosser_009_out_channel),                      //          .channel
		.sink1_data           (crosser_009_out_data),                         //          .data
		.sink1_startofpacket  (crosser_009_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket    (crosser_009_out_endofpacket),                  //          .endofpacket
		.sink2_ready          (crosser_010_out_ready),                        //     sink2.ready
		.sink2_valid          (crosser_010_out_valid),                        //          .valid
		.sink2_channel        (crosser_010_out_channel),                      //          .channel
		.sink2_data           (crosser_010_out_data),                         //          .data
		.sink2_startofpacket  (crosser_010_out_startofpacket),                //          .startofpacket
		.sink2_endofpacket    (crosser_010_out_endofpacket),                  //          .endofpacket
		.sink3_ready          (crosser_011_out_ready),                        //     sink3.ready
		.sink3_valid          (crosser_011_out_valid),                        //          .valid
		.sink3_channel        (crosser_011_out_channel),                      //          .channel
		.sink3_data           (crosser_011_out_data),                         //          .data
		.sink3_startofpacket  (crosser_011_out_startofpacket),                //          .startofpacket
		.sink3_endofpacket    (crosser_011_out_endofpacket),                  //          .endofpacket
		.sink4_ready          (crosser_012_out_ready),                        //     sink4.ready
		.sink4_valid          (crosser_012_out_valid),                        //          .valid
		.sink4_channel        (crosser_012_out_channel),                      //          .channel
		.sink4_data           (crosser_012_out_data),                         //          .data
		.sink4_startofpacket  (crosser_012_out_startofpacket),                //          .startofpacket
		.sink4_endofpacket    (crosser_012_out_endofpacket),                  //          .endofpacket
		.sink5_ready          (crosser_013_out_ready),                        //     sink5.ready
		.sink5_valid          (crosser_013_out_valid),                        //          .valid
		.sink5_channel        (crosser_013_out_channel),                      //          .channel
		.sink5_data           (crosser_013_out_data),                         //          .data
		.sink5_startofpacket  (crosser_013_out_startofpacket),                //          .startofpacket
		.sink5_endofpacket    (crosser_013_out_endofpacket),                  //          .endofpacket
		.sink6_ready          (crosser_014_out_ready),                        //     sink6.ready
		.sink6_valid          (crosser_014_out_valid),                        //          .valid
		.sink6_channel        (crosser_014_out_channel),                      //          .channel
		.sink6_data           (crosser_014_out_data),                         //          .data
		.sink6_startofpacket  (crosser_014_out_startofpacket),                //          .startofpacket
		.sink6_endofpacket    (crosser_014_out_endofpacket),                  //          .endofpacket
		.sink7_ready          (crosser_015_out_ready),                        //     sink7.ready
		.sink7_valid          (crosser_015_out_valid),                        //          .valid
		.sink7_channel        (crosser_015_out_channel),                      //          .channel
		.sink7_data           (crosser_015_out_data),                         //          .data
		.sink7_startofpacket  (crosser_015_out_startofpacket),                //          .startofpacket
		.sink7_endofpacket    (crosser_015_out_endofpacket),                  //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                     //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                     //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                   //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                      //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                     //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                     //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                   //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                      //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.sink10_ready         (crosser_016_out_ready),                        //    sink10.ready
		.sink10_valid         (crosser_016_out_valid),                        //          .valid
		.sink10_channel       (crosser_016_out_channel),                      //          .channel
		.sink10_data          (crosser_016_out_data),                         //          .data
		.sink10_startofpacket (crosser_016_out_startofpacket),                //          .startofpacket
		.sink10_endofpacket   (crosser_016_out_endofpacket),                  //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                     //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                      //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),               //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                     //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                      //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.sink13_ready         (crosser_017_out_ready),                        //    sink13.ready
		.sink13_valid         (crosser_017_out_valid),                        //          .valid
		.sink13_channel       (crosser_017_out_channel),                      //          .channel
		.sink13_data          (crosser_017_out_data),                         //          .data
		.sink13_startofpacket (crosser_017_out_startofpacket),                //          .startofpacket
		.sink13_endofpacket   (crosser_017_out_endofpacket),                  //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                     //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                     //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                   //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                      //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),             //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),               //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                     //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                     //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                   //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                      //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),             //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),               //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                     //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                     //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                   //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                      //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),             //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),               //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                     //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                     //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                   //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                      //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),             //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),               //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                     //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                      //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),               //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                     //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                     //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                   //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                      //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),             //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),               //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                     //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                     //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                   //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                      //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),             //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),               //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                     //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                     //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                   //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                      //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),             //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket),               //          .endofpacket
		.sink22_ready         (rsp_demux_022_src0_ready),                     //    sink22.ready
		.sink22_valid         (rsp_demux_022_src0_valid),                     //          .valid
		.sink22_channel       (rsp_demux_022_src0_channel),                   //          .channel
		.sink22_data          (rsp_demux_022_src0_data),                      //          .data
		.sink22_startofpacket (rsp_demux_022_src0_startofpacket),             //          .startofpacket
		.sink22_endofpacket   (rsp_demux_022_src0_endofpacket),               //          .endofpacket
		.sink23_ready         (rsp_demux_023_src0_ready),                     //    sink23.ready
		.sink23_valid         (rsp_demux_023_src0_valid),                     //          .valid
		.sink23_channel       (rsp_demux_023_src0_channel),                   //          .channel
		.sink23_data          (rsp_demux_023_src0_data),                      //          .data
		.sink23_startofpacket (rsp_demux_023_src0_startofpacket),             //          .startofpacket
		.sink23_endofpacket   (rsp_demux_023_src0_endofpacket),               //          .endofpacket
		.sink24_ready         (rsp_demux_024_src0_ready),                     //    sink24.ready
		.sink24_valid         (rsp_demux_024_src0_valid),                     //          .valid
		.sink24_channel       (rsp_demux_024_src0_channel),                   //          .channel
		.sink24_data          (rsp_demux_024_src0_data),                      //          .data
		.sink24_startofpacket (rsp_demux_024_src0_startofpacket),             //          .startofpacket
		.sink24_endofpacket   (rsp_demux_024_src0_endofpacket),               //          .endofpacket
		.sink25_ready         (rsp_demux_025_src0_ready),                     //    sink25.ready
		.sink25_valid         (rsp_demux_025_src0_valid),                     //          .valid
		.sink25_channel       (rsp_demux_025_src0_channel),                   //          .channel
		.sink25_data          (rsp_demux_025_src0_data),                      //          .data
		.sink25_startofpacket (rsp_demux_025_src0_startofpacket),             //          .startofpacket
		.sink25_endofpacket   (rsp_demux_025_src0_endofpacket),               //          .endofpacket
		.sink26_ready         (rsp_demux_026_src0_ready),                     //    sink26.ready
		.sink26_valid         (rsp_demux_026_src0_valid),                     //          .valid
		.sink26_channel       (rsp_demux_026_src0_channel),                   //          .channel
		.sink26_data          (rsp_demux_026_src0_data),                      //          .data
		.sink26_startofpacket (rsp_demux_026_src0_startofpacket),             //          .startofpacket
		.sink26_endofpacket   (rsp_demux_026_src0_endofpacket)                //          .endofpacket
	);

	Qsys_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_50_clk_clk),                               //       clk.clk
		.reset               (nios2_gen2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_012_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_012_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_012_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_012_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_012_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_016_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_016_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_016_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_016_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_016_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_016_src1_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_025_src1_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_025_src1_valid),                     //          .valid
		.sink2_channel       (rsp_demux_025_src1_channel),                   //          .channel
		.sink2_data          (rsp_demux_025_src1_data),                      //          .data
		.sink2_startofpacket (rsp_demux_025_src1_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_025_src1_endofpacket)                //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                             //            in.ready
		.in_valid          (cmd_demux_src1_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                           //              .channel
		.in_data           (cmd_demux_src1_data),                              //              .data
		.out_ready         (crosser_out_ready),                                //           out.ready
		.out_valid         (crosser_out_valid),                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_out_channel),                              //              .channel
		.out_data          (crosser_out_data),                                 //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                             //            in.ready
		.in_valid          (cmd_demux_src2_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                           //              .channel
		.in_data           (cmd_demux_src2_data),                              //              .data
		.out_ready         (crosser_001_out_ready),                            //           out.ready
		.out_valid         (crosser_001_out_valid),                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                          //              .channel
		.out_data          (crosser_001_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                             //            in.ready
		.in_valid          (cmd_demux_src3_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                           //              .channel
		.in_data           (cmd_demux_src3_data),                              //              .data
		.out_ready         (crosser_002_out_ready),                            //           out.ready
		.out_valid         (crosser_002_out_valid),                            //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_002_out_channel),                          //              .channel
		.out_data          (crosser_002_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                             //            in.ready
		.in_valid          (cmd_demux_src4_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                           //              .channel
		.in_data           (cmd_demux_src4_data),                              //              .data
		.out_ready         (crosser_003_out_ready),                            //           out.ready
		.out_valid         (crosser_003_out_valid),                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                          //              .channel
		.out_data          (crosser_003_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                             //            in.ready
		.in_valid          (cmd_demux_src5_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                           //              .channel
		.in_data           (cmd_demux_src5_data),                              //              .data
		.out_ready         (crosser_004_out_ready),                            //           out.ready
		.out_valid         (crosser_004_out_valid),                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                          //              .channel
		.out_data          (crosser_004_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                             //            in.ready
		.in_valid          (cmd_demux_src6_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                           //              .channel
		.in_data           (cmd_demux_src6_data),                              //              .data
		.out_ready         (crosser_005_out_ready),                            //           out.ready
		.out_valid         (crosser_005_out_valid),                            //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_005_out_channel),                          //              .channel
		.out_data          (crosser_005_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                             //            in.ready
		.in_valid          (cmd_demux_src7_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                           //              .channel
		.in_data           (cmd_demux_src7_data),                              //              .data
		.out_ready         (crosser_006_out_ready),                            //           out.ready
		.out_valid         (crosser_006_out_valid),                            //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_006_out_channel),                          //              .channel
		.out_data          (crosser_006_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_50_clk_clk),                                   //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),     //  in_clk_reset.reset
		.out_clk           (altpll_1_c0_clk),                                  //       out_clk.clk
		.out_reset         (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                            //            in.ready
		.in_valid          (cmd_demux_src10_valid),                            //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                    //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                      //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                          //              .channel
		.in_data           (cmd_demux_src10_data),                             //              .data
		.out_ready         (crosser_007_out_ready),                            //           out.ready
		.out_valid         (crosser_007_out_valid),                            //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_007_out_channel),                          //              .channel
		.out_data          (crosser_007_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_50_clk_clk),                                         //        in_clk.clk
		.in_reset          (nios2_gen2_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (altpll_0_c2_clk),                                        //       out_clk.clk
		.out_reset         (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                  //            in.ready
		.in_valid          (cmd_demux_src13_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                                //              .channel
		.in_data           (cmd_demux_src13_data),                                   //              .data
		.out_ready         (crosser_008_out_ready),                                  //           out.ready
		.out_valid         (crosser_008_out_valid),                                  //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                //              .channel
		.out_data          (crosser_008_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                       //              .channel
		.in_data           (rsp_demux_001_src0_data),                          //              .data
		.out_ready         (crosser_009_out_ready),                            //           out.ready
		.out_valid         (crosser_009_out_valid),                            //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_009_out_channel),                          //              .channel
		.out_data          (crosser_009_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                       //              .channel
		.in_data           (rsp_demux_002_src0_data),                          //              .data
		.out_ready         (crosser_010_out_ready),                            //           out.ready
		.out_valid         (crosser_010_out_valid),                            //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_010_out_channel),                          //              .channel
		.out_data          (crosser_010_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                       //              .channel
		.in_data           (rsp_demux_003_src0_data),                          //              .data
		.out_ready         (crosser_011_out_ready),                            //           out.ready
		.out_valid         (crosser_011_out_valid),                            //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_011_out_channel),                          //              .channel
		.out_data          (crosser_011_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                       //              .channel
		.in_data           (rsp_demux_004_src0_data),                          //              .data
		.out_ready         (crosser_012_out_ready),                            //           out.ready
		.out_valid         (crosser_012_out_valid),                            //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_012_out_channel),                          //              .channel
		.out_data          (crosser_012_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                       //              .channel
		.in_data           (rsp_demux_005_src0_data),                          //              .data
		.out_ready         (crosser_013_out_ready),                            //           out.ready
		.out_valid         (crosser_013_out_valid),                            //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_013_out_channel),                          //              .channel
		.out_data          (crosser_013_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                       //              .channel
		.in_data           (rsp_demux_006_src0_data),                          //              .data
		.out_ready         (crosser_014_out_ready),                            //           out.ready
		.out_valid         (crosser_014_out_valid),                            //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_014_out_channel),                          //              .channel
		.out_data          (crosser_014_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                       //              .channel
		.in_data           (rsp_demux_007_src0_data),                          //              .data
		.out_ready         (crosser_015_out_ready),                            //           out.ready
		.out_valid         (crosser_015_out_valid),                            //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_015_out_channel),                          //              .channel
		.out_data          (crosser_015_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (altpll_1_c0_clk),                                  //        in_clk.clk
		.in_reset          (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                   //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),     // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                       //              .channel
		.in_data           (rsp_demux_010_src0_data),                          //              .data
		.out_ready         (crosser_016_out_ready),                            //           out.ready
		.out_valid         (crosser_016_out_valid),                            //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_016_out_channel),                          //              .channel
		.out_data          (crosser_016_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (99),
		.BITS_PER_SYMBOL     (99),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (27),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (altpll_0_c2_clk),                                        //        in_clk.clk
		.in_reset          (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                                         //       out_clk.clk
		.out_reset         (nios2_gen2_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                               //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                               //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),                       //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                         //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                             //              .channel
		.in_data           (rsp_demux_013_src0_data),                                //              .data
		.out_ready         (crosser_017_out_ready),                                  //           out.ready
		.out_valid         (crosser_017_out_valid),                                  //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                          //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                            //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                //              .channel
		.out_data          (crosser_017_out_data),                                   //              .data
		.in_empty          (1'b0),                                                   //   (terminated)
		.in_error          (1'b0),                                                   //   (terminated)
		.out_empty         (),                                                       //   (terminated)
		.out_error         ()                                                        //   (terminated)
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_50_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (color_filter_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                          //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (com_counter_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                         //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (rgb_to_hsv_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                      //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_grabber_rgb_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_grabber_hsv_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (edge_bins_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                       //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_buffer_0_avalon_mm_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                          //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_50_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_opencores_mipi_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_50_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (i2c_opencores_camera_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                               //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (altpll_1_c0_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (COLOR_FILTER_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fir_0_0_control_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (fir_0_0_control_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (fir_0_0_control_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                 //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_50_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                    //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_50_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                      //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (altpll_0_c2_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (TERASIC_AUTO_FOCUS_0_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (terasic_auto_focus_0_mm_ctrl_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                        //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_50_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (altpll_0_inclk_interface_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (altpll_0_pll_slave_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (altpll_0_pll_slave_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (altpll_0_pll_slave_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                           //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (altpll_1_pll_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (altpll_1_pll_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (altpll_1_pll_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)              //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_50_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)               //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sw_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (sw_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (sw_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (key_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (key_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mipi_reset_n_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (mipi_reset_n_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (mipi_reset_n_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mipi_pwdn_n_s1_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (mipi_pwdn_n_s1_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (mipi_pwdn_n_s1_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_0_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (uart_0_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (uart_0_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_0_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (pio_0_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (pio_0_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)             //         .error
	);

	Qsys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (clk_50_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_1_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (pio_1_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (pio_1_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)             //         .error
	);

endmodule
