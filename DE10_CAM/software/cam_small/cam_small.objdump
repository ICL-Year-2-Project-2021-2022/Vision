
cam_small.elf:     file format elf32-littlenios2
cam_small.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00000298 memsz 0x00000298 flags r-x
    LOAD off    0x000012b8 vaddr 0x000202b8 paddr 0x000202c0 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000012c8 vaddr 0x000202c8 paddr 0x000202c8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  000012c0  2**0
                  CONTENTS
  2 .text         00000280  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000202a0  000202a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  000202b8  000202c0  000012b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000202c8  000202c8  000012c8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000202d4  000202d4  000012c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  000012e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c43  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000717  00000000  00000000  000020b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007f9  00000000  00000000  000027ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001b0  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000062d  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000172  00000000  00000000  000037a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00003948  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000484e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00004851  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000485b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000485d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00004861  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00004865  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00004869  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00004872  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000487b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  00004884  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000026  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY
 29 .jdi          00004eb7  00000000  00000000  000048ae  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a0537  00000000  00000000  00009765  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
000202a0 l    d  .rodata	00000000 .rodata
000202b8 l    d  .rwdata	00000000 .rwdata
000202c8 l    d  .bss	00000000 .bss
000202d4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cam_small_bsp//obj/HAL/src/crt0.o
00020068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00020164 g     F .text	0000002c alt_main
000202c0 g       *ABS*	00000000 __flash_rwdata_start
00020190 g     F .text	00000038 alt_putstr
000202bc g     O .rwdata	00000004 jtag_uart
00020244 g     F .text	00000008 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000202cc g     O .bss	00000004 alt_argv
000282b8 g       *ABS*	00000000 _gp
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002024c g     F .text	00000038 alt_icache_flush
000202d4 g       *ABS*	00000000 __bss_end
00020220 g     F .text	00000018 alt_dcache_flush_all
000202c0 g       *ABS*	00000000 __ram_rwdata_end
000202b8 g       *ABS*	00000000 __ram_rodata_end
000202d4 g       *ABS*	00000000 end
00040000 g       *ABS*	00000000 __alt_stack_pointer
000201ec g     F .text	00000034 altera_avalon_jtag_uart_write
00020020 g     F .text	0000004c _start
000201e8 g     F .text	00000004 alt_sys_init
000202b8 g       *ABS*	00000000 __ram_rwdata_start
000202a0 g       *ABS*	00000000 __ram_rodata_start
000202d4 g       *ABS*	00000000 __alt_stack_base
000202c8 g       *ABS*	00000000 __bss_start
0002006c g     F .text	00000018 main
000202c8 g     O .bss	00000004 alt_envp
000202b8 g     O .rwdata	00000004 uart_0
000202a0 g       *ABS*	00000000 __flash_rodata_start
000201c8 g     F .text	00000020 alt_irq_init
000202d0 g     O .bss	00000004 alt_argc
00020020 g       *ABS*	00000000 __ram_exceptions_start
000202c0 g       *ABS*	00000000 _edata
000202d4 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00040000 g       *ABS*	00000000 __alt_data_end
0002001c g       .entry	00000000 _exit
00020284 g     F .text	0000001c strlen
00020238 g     F .text	0000000c alt_icache_flush_all
00020084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08400814 	ori	at,at,32
    jmp r1
   20018:	0800683a 	jmp	at

0002001c <_exit>:
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .text:

00020020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2002c:	00bffd16 	blt	zero,r2,20024 <__alt_data_end+0xfffe0024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20030:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   20038:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2003c:	d6a0ae14 	ori	gp,gp,33464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20040:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20044:	1080b214 	ori	r2,r2,712

    movhi r3, %hi(__bss_end)
   20048:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2004c:	18c0b514 	ori	r3,r3,724

    beq r2, r3, 1f
   20050:	10c00326 	beq	r2,r3,20060 <_start+0x40>

0:
    stw zero, (r2)
   20054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2005c:	10fffd36 	bltu	r2,r3,20054 <__alt_data_end+0xfffe0054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20060:	00200840 	call	20084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20064:	00201640 	call	20164 <alt_main>

00020068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20068:	003fff06 	br	20068 <__alt_data_end+0xfffe0068>

0002006c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
   2006c:	010000b4 	movhi	r4,2
 */

#include "sys/alt_stdio.h"

int main()
{ 
   20070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   20074:	2100a804 	addi	r4,r4,672
 */

#include "sys/alt_stdio.h"

int main()
{ 
   20078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   2007c:	00201900 	call	20190 <alt_putstr>
   20080:	003fff06 	br	20080 <__alt_data_end+0xfffe0080>

00020084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20084:	deffff04 	addi	sp,sp,-4
   20088:	010000b4 	movhi	r4,2
   2008c:	014000b4 	movhi	r5,2
   20090:	dfc00015 	stw	ra,0(sp)
   20094:	2100ae04 	addi	r4,r4,696
   20098:	2940b004 	addi	r5,r5,704

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   2009c:	2140061e 	bne	r4,r5,200b8 <alt_load+0x34>
   200a0:	010000b4 	movhi	r4,2
   200a4:	014000b4 	movhi	r5,2
   200a8:	21000804 	addi	r4,r4,32
   200ac:	29400804 	addi	r5,r5,32
   200b0:	2140121e 	bne	r4,r5,200fc <alt_load+0x78>
   200b4:	00000b06 	br	200e4 <alt_load+0x60>
   200b8:	00c000b4 	movhi	r3,2
   200bc:	18c0b004 	addi	r3,r3,704
   200c0:	1907c83a 	sub	r3,r3,r4
   200c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   200c8:	10fff526 	beq	r2,r3,200a0 <__alt_data_end+0xfffe00a0>
    {
      *to++ = *from++;
   200cc:	114f883a 	add	r7,r2,r5
   200d0:	39c00017 	ldw	r7,0(r7)
   200d4:	110d883a 	add	r6,r2,r4
   200d8:	10800104 	addi	r2,r2,4
   200dc:	31c00015 	stw	r7,0(r6)
   200e0:	003ff906 	br	200c8 <__alt_data_end+0xfffe00c8>
   200e4:	010000b4 	movhi	r4,2
   200e8:	014000b4 	movhi	r5,2
   200ec:	2100a804 	addi	r4,r4,672
   200f0:	2940a804 	addi	r5,r5,672

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   200f4:	2140101e 	bne	r4,r5,20138 <alt_load+0xb4>
   200f8:	00000b06 	br	20128 <alt_load+0xa4>
   200fc:	00c000b4 	movhi	r3,2
   20100:	18c00804 	addi	r3,r3,32
   20104:	1907c83a 	sub	r3,r3,r4
   20108:	0005883a 	mov	r2,zero
  {
    while( to != end )
   2010c:	10fff526 	beq	r2,r3,200e4 <__alt_data_end+0xfffe00e4>
    {
      *to++ = *from++;
   20110:	114f883a 	add	r7,r2,r5
   20114:	39c00017 	ldw	r7,0(r7)
   20118:	110d883a 	add	r6,r2,r4
   2011c:	10800104 	addi	r2,r2,4
   20120:	31c00015 	stw	r7,0(r6)
   20124:	003ff906 	br	2010c <__alt_data_end+0xfffe010c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20128:	00202200 	call	20220 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   2012c:	dfc00017 	ldw	ra,0(sp)
   20130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   20134:	00202381 	jmpi	20238 <alt_icache_flush_all>
   20138:	00c000b4 	movhi	r3,2
   2013c:	18c0ae04 	addi	r3,r3,696
   20140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   20144:	0005883a 	mov	r2,zero
  {
    while( to != end )
   20148:	18bff726 	beq	r3,r2,20128 <__alt_data_end+0xfffe0128>
    {
      *to++ = *from++;
   2014c:	114f883a 	add	r7,r2,r5
   20150:	39c00017 	ldw	r7,0(r7)
   20154:	110d883a 	add	r6,r2,r4
   20158:	10800104 	addi	r2,r2,4
   2015c:	31c00015 	stw	r7,0(r6)
   20160:	003ff906 	br	20148 <__alt_data_end+0xfffe0148>

00020164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2016c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20170:	00201c80 	call	201c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20174:	00201e80 	call	201e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   20178:	d1a00417 	ldw	r6,-32752(gp)
   2017c:	d1600517 	ldw	r5,-32748(gp)
   20180:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   20184:	dfc00017 	ldw	ra,0(sp)
   20188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   2018c:	002006c1 	jmpi	2006c <main>

00020190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   20190:	defffe04 	addi	sp,sp,-8
   20194:	dc000015 	stw	r16,0(sp)
   20198:	dfc00115 	stw	ra,4(sp)
   2019c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   201a0:	00202840 	call	20284 <strlen>
   201a4:	010000b4 	movhi	r4,2
   201a8:	000f883a 	mov	r7,zero
   201ac:	100d883a 	mov	r6,r2
   201b0:	800b883a 	mov	r5,r16
   201b4:	2100af04 	addi	r4,r4,700
#else
    return fputs(str, stdout);
#endif
#endif
}
   201b8:	dfc00117 	ldw	ra,4(sp)
   201bc:	dc000017 	ldw	r16,0(sp)
   201c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   201c4:	00201ec1 	jmpi	201ec <altera_avalon_jtag_uart_write>

000201c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   201c8:	deffff04 	addi	sp,sp,-4
   201cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   201d0:	00202440 	call	20244 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   201d4:	00800044 	movi	r2,1
   201d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   201dc:	dfc00017 	ldw	ra,0(sp)
   201e0:	dec00104 	addi	sp,sp,4
   201e4:	f800283a 	ret

000201e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   201e8:	f800283a 	ret

000201ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   201ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   201f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   201f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   201f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   201fc:	2980072e 	bgeu	r5,r6,2021c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   20200:	38c00037 	ldwio	r3,0(r7)
   20204:	18ffffec 	andhi	r3,r3,65535
   20208:	183ffc26 	beq	r3,zero,201fc <__alt_data_end+0xfffe01fc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   2020c:	28c00007 	ldb	r3,0(r5)
   20210:	20c00035 	stwio	r3,0(r4)
   20214:	29400044 	addi	r5,r5,1
   20218:	003ff806 	br	201fc <__alt_data_end+0xfffe01fc>

  return count;
}
   2021c:	f800283a 	ret

00020220 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   20220:	0005883a 	mov	r2,zero
   20224:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   20228:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2022c:	10800804 	addi	r2,r2,32
   20230:	10fffd1e 	bne	r2,r3,20228 <__alt_data_end+0xfffe0228>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20234:	f800283a 	ret

00020238 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   20238:	01440004 	movi	r5,4096
   2023c:	0009883a 	mov	r4,zero
   20240:	002024c1 	jmpi	2024c <alt_icache_flush>

00020244 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   20244:	000170fa 	wrctl	ienable,zero
   20248:	f800283a 	ret

0002024c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   2024c:	00840004 	movi	r2,4096
   20250:	1140012e 	bgeu	r2,r5,20258 <alt_icache_flush+0xc>
   20254:	100b883a 	mov	r5,r2
   20258:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2025c:	2005883a 	mov	r2,r4
   20260:	1140032e 	bgeu	r2,r5,20270 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   20264:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   20268:	10800804 	addi	r2,r2,32
   2026c:	003ffc06 	br	20260 <__alt_data_end+0xfffe0260>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   20270:	210007cc 	andi	r4,r4,31
   20274:	20000126 	beq	r4,zero,2027c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   20278:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2027c:	0000203a 	flushp
   20280:	f800283a 	ret

00020284 <strlen>:
   20284:	2005883a 	mov	r2,r4
   20288:	10c00007 	ldb	r3,0(r2)
   2028c:	18000226 	beq	r3,zero,20298 <strlen+0x14>
   20290:	10800044 	addi	r2,r2,1
   20294:	003ffc06 	br	20288 <__alt_data_end+0xfffe0288>
   20298:	1105c83a 	sub	r2,r2,r4
   2029c:	f800283a 	ret
