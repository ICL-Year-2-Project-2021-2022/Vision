
UART_Nios.elf:     file format elf32-littlenios2
UART_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0001284c memsz 0x0001284c flags r-x
    LOAD off    0x00014000 vaddr 0x04000000 paddr 0x0003286c align 2**12
         filesz 0x00001f8c memsz 0x000020ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012628  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000039c  04000000  0003286c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  0400039c  00032c08  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  04001f8c  000347f8  00015f8c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000347f8  000347f8  00015f8c  2**0
                  CONTENTS
  7 .sdram        00000000  040020ec  040020ec  00015f8c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015f8c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001130  00000000  00000000  00015fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002c23a  00000000  00000000  000170e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b11d  00000000  00000000  0004331a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d6c5  00000000  00000000  0004e437  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002bec  00000000  00000000  0005bafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000477c  00000000  00000000  0005e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000186b2  00000000  00000000  00062e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007b518  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a48  00000000  00000000  0007b578  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00080e3a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  00080e3d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00080e47  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00080e48  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00080e49  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00080e4d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00080e51  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00080e55  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00080e5e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00080e67  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  00080e70  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  00080e74  2**0
                  CONTENTS, READONLY
 30 .jdi          00004eb7  00000000  00000000  00080e9b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00079f7f  00000000  00000000  00085d52  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
04000000 l    d  .rodata	00000000 .rodata
0400039c l    d  .rwdata	00000000 .rwdata
04001f8c l    d  .bss	00000000 .bss
000347f8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
040020ec l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_Nios_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0400039c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
000216a8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040000b6 l     O .rodata	00000010 zeroes.4404
00023d5c l     F .text	000000bc __sbprintf
040000c6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00024020 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00025b50 l     F .text	00000008 __fp_unlock
00025b64 l     F .text	0000019c __sinit.part.1
00025d00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
04000be8 l     O .rwdata	00000020 lc_ctype_charset
04000bc8 l     O .rwdata	00000020 lc_message_charset
04000c08 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
040000f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002863c l     F .text	000000fc __sprint_r.part.0
04000228 l     O .rodata	00000010 blanks.4348
04000218 l     O .rodata	00000010 zeroes.4349
00029bc8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d76c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d798 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d884 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d964 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002da50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0002dc24 l     F .text	0000003c alt_get_errno
0002dc60 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0002de78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04001f74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0002e0f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e228 l     F .text	00000034 alt_dev_reg
04000de8 l     O .rwdata	00000038 i2c_0
04000e20 l     O .rwdata	00001060 jtag_uart
04001e80 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0002e324 l     F .text	00000110 optional_irq_callback
0002e484 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00030148 l     F .text	0000020c altera_avalon_jtag_uart_irq
00030354 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0003098c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00030c3c l     F .text	0000009c altera_avalon_uart_irq
00030cd8 l     F .text	000000e4 altera_avalon_uart_rxirq
00030dbc l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00030f58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00031170 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00031624 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00031cd4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04001fc0 g     O .bss	00000004 alt_instruction_exception_handler
00027db0 g     F .text	00000074 _mprec_log10
00027e9c g     F .text	0000008c __any_on
00026a14 g     F .text	00000054 _isatty_r
04000100 g     O .rodata	00000028 __mprec_tinytens
0002db60 g     F .text	0000007c alt_main
000215d4 g     F .text	000000c0 _puts_r
04001fec g     O .bss	00000100 alt_irq
00026b44 g     F .text	00000060 _lseek_r
00032c08 g       *ABS*	00000000 __flash_rwdata_start
00025ef0 g     F .text	000000ac __sflags
0002c18c g     F .text	00000088 .hidden __eqdf2
040020ec g       *ABS*	00000000 __alt_heap_start
00021598 g     F .text	0000003c printf
0002a1ac g     F .text	0000009c _wcrtomb_r
00021a4c g     F .text	0000005c __sseek
00025ea0 g     F .text	00000010 __sinit
0002a054 g     F .text	00000140 __swbuf_r
00026a68 g     F .text	0000007c _setlocale_r
00025d08 g     F .text	00000068 __sfmoreglue
0002eb7c g     F .text	000000a8 alt_avalon_i2c_rx_read
0002dc00 g     F .text	00000024 __malloc_unlock
0002fd7c g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0002e900 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00026dd0 g     F .text	0000015c memmove
00025e88 g     F .text	00000018 _cleanup
0002f5d8 g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
00026f2c g     F .text	000000a8 _Balloc
0002c214 g     F .text	000000dc .hidden __gtdf2
00032220 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000208c4 g     F .text	0000005c _fstat_r
04001f8c g     O .bss	00000004 errno
0002190c g     F .text	00000014 __srget
000219c8 g     F .text	00000008 __seofread
04001fac g     O .bss	00000004 alt_argv
04009f44 g       *ABS*	00000000 _gp
0002e0c4 g     F .text	00000030 usleep
0002fdc0 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0002ea90 g     F .text	00000044 alt_avalon_i2c_is_busy
04000c68 g     O .rwdata	00000180 alt_fd_list
00020920 g     F .text	00000070 _getc_r
00020990 g     F .text	00000088 getc
0002e834 g     F .text	000000cc alt_avalon_i2c_master_config_set
000317c4 g     F .text	00000090 alt_find_dev
00026c88 g     F .text	00000148 memcpy
00025b58 g     F .text	0000000c _cleanup_r
0002d478 g     F .text	000000dc .hidden __floatsidf
00031d98 g     F .text	0000007c alt_io_redirect
0002c2f0 g     F .text	000000f4 .hidden __ltdf2
0003286c g       *ABS*	00000000 __DTOR_END__
0002f41c g     F .text	000001bc alt_avalon_i2c_master_transmit
00021694 g     F .text	00000014 puts
000322d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000284ec g     F .text	00000074 __fpclassifyd
00027d0c g     F .text	000000a4 __ratio
00029bac g     F .text	0000001c __vfiprintf_internal
0003054c g     F .text	0000021c altera_avalon_jtag_uart_read
00021568 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002af3c g     F .text	00000064 .hidden __udivsi3
0002d8c0 g     F .text	000000a4 isatty
04000150 g     O .rodata	000000c8 __mprec_tens
00026ae4 g     F .text	0000000c __locale_charset
00032244 g     F .text	00000090 alt_icache_flush
0002e6a0 g     F .text	00000098 alt_avalon_i2c_enable
04001f98 g     O .bss	00000004 __malloc_top_pad
0002fcb0 g     F .text	00000068 alt_avalon_i2c_int_disable
04001f54 g     O .rwdata	00000004 __mb_cur_max
00026b14 g     F .text	0000000c _localeconv_r
00027338 g     F .text	0000003c __i2b
000263d0 g     F .text	000004bc __sfvwrite_r
00021920 g     F .text	00000054 _sbrk_r
00027f28 g     F .text	00000060 _read_r
04001f6c g     O .rwdata	00000004 alt_max_fd
00029d48 g     F .text	000000f0 _fclose_r
00025b20 g     F .text	00000030 fflush
04001f94 g     O .bss	00000004 __malloc_max_sbrked_mem
0002f7e0 g     F .text	0000020c alt_avalon_i2c_master_receive
0002aff8 g     F .text	000008ac .hidden __adddf3
00027ab4 g     F .text	0000010c __b2d
0002a90c g     F .text	00000538 .hidden __umoddi3
0002da8c g     F .text	000000d4 lseek
0002fd18 g     F .text	00000064 alt_avalon_i2c_int_enable
04001f44 g     O .rwdata	00000004 _global_impure_ptr
00027f88 g     F .text	00000564 _realloc_r
040020ec g       *ABS*	00000000 __bss_end
00031be4 g     F .text	000000f0 alt_iic_isr_register
00032118 g     F .text	00000108 alt_tick
0002a394 g     F .text	00000578 .hidden __udivdi3
0002fbd8 g     F .text	00000058 alt_avalon_i2c_int_status_get
00029fb0 g     F .text	00000024 _fputwc_r
04000128 g     O .rodata	00000028 __mprec_bigtens
0002711c g     F .text	00000104 __s2b
0002d554 g     F .text	000000a8 .hidden __floatunsidf
000277f4 g     F .text	00000060 __mcmp
00030b90 g     F .text	000000ac altera_avalon_uart_init
00025ec0 g     F .text	00000018 __fp_lock_all
00031b98 g     F .text	0000004c alt_ic_irq_enabled
0003207c g     F .text	0000009c alt_alarm_stop
0002e520 g     F .text	00000054 alt_avalon_i2c_register_callback
04001fb4 g     O .bss	00000004 alt_irq_active
0002e574 g     F .text	000000ec alt_avalon_i2c_init
00020464 g     F .text	00000444 _fseeko_r
000200fc g     F .exceptions	000000d4 alt_irq_handler
04000c40 g     O .rwdata	00000028 alt_dev_null
000315dc g     F .text	00000048 alt_dcache_flush_all
00027220 g     F .text	00000068 __hi0bits
0002d3f8 g     F .text	00000080 .hidden __fixdfsi
04001f8c g       *ABS*	00000000 __ram_rwdata_end
04001f64 g     O .rwdata	00000008 alt_dev_list
0002e130 g     F .text	000000f8 write
00032438 g     F .text	000000a0 _putc_r
0002eeb0 g     F .text	0000004c alt_avalon_i2c_check_arblost
0002fc74 g     F .text	0000003c alt_avalon_i2c_int_clear
0400039c g       *ABS*	00000000 __ram_rodata_end
0002d7d4 g     F .text	000000b0 fstat
0002c2f0 g     F .text	000000f4 .hidden __ledf2
04001f78 g     O .rwdata	00000008 alt_avalon_i2c_list
0002756c g     F .text	00000140 __pow5mult
00028750 g     F .text	0000145c ___vfiprintf_internal_r
04001fa4 g     O .bss	00000004 __nlocale_changed
0002afa0 g     F .text	00000058 .hidden __umodsi3
040020ec g       *ABS*	00000000 end
000208a8 g     F .text	0000001c fseeko
000311ac g     F .text	000001ac altera_avalon_uart_write
00020448 g     F .text	0000001c fseek
00030088 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002e660 g     F .text	00000040 alt_avalon_i2c_open
0003286c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0002f030 g     F .text	000000e8 alt_avalon_i2c_master_tx
00030a04 g     F .text	0000007c alt_avalon_timer_sc_init
00030ae0 g     F .text	00000060 altera_avalon_uart_write_fd
0002d5fc g     F .text	00000064 .hidden __clzsi2
00030b40 g     F .text	00000050 altera_avalon_uart_close_fd
00030768 g     F .text	00000224 altera_avalon_jtag_uart_write
00025eb0 g     F .text	00000004 __sfp_lock_acquire
00026ba4 g     F .text	000000e4 memchr
00021b48 g     F .text	000021f8 ___vfprintf_internal_r
000260c0 g     F .text	00000310 _free_r
00031e14 g     F .text	0000022c alt_printf
00026af0 g     F .text	00000010 __locale_mb_cur_max
000326b8 g     F .text	00000180 __call_exitprocs
00021898 g     F .text	00000074 __srget_r
04001fa0 g     O .bss	00000004 __mlocale_changed
0002e434 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
04001f4c g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
04001fb8 g     O .bss	00000004 _alt_tick_rate
0002f9ec g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
0002fe0c g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
000276ac g     F .text	00000148 __lshift
04001fbc g     O .bss	00000004 _alt_nticks
0002deb4 g     F .text	000000fc read
0002e294 g     F .text	00000090 alt_sys_init
00021508 g     F .text	00000060 _open_r
000325a0 g     F .text	00000118 __register_exitproc
0002f254 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
00027374 g     F .text	000001f8 __multiply
000303f4 g     F .text	00000068 altera_avalon_jtag_uart_close
0400039c g       *ABS*	00000000 __ram_rwdata_start
04000000 g       *ABS*	00000000 __ram_rodata_start
04001fc4 g     O .bss	00000028 __malloc_current_mallinfo
00027bc0 g     F .text	0000014c __d2b
0002ff24 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0003195c g     F .text	000000a4 alt_get_fd
00031484 g     F .text	00000158 alt_busy_sleep
00023fcc g     F .text	00000054 _close_r
000323bc g     F .text	0000007c memcmp
0002ead4 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
0002ffe4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040020ec g       *ABS*	00000000 __alt_stack_base
00030034 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023e78 g     F .text	00000154 __swsetup_r
0002b8a4 g     F .text	000008e8 .hidden __divdf3
00025d70 g     F .text	00000118 __sfp
00027e24 g     F .text	00000078 __copybits
040007c0 g     O .rwdata	00000408 __malloc_av_
00025ebc g     F .text	00000004 __sinit_lock_release
0002c3e4 g     F .text	00000718 .hidden __muldf3
00021974 g     F .text	00000054 __sread
00031854 g     F .text	00000108 alt_find_file
00031660 g     F .text	000000a4 alt_dev_llist_insert
0002dbdc g     F .text	00000024 __malloc_lock
0002e014 g     F .text	000000b0 sbrk
0002eefc g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
0002ee64 g     F .text	0000004c alt_avalon_i2c_check_nack
00025ac4 g     F .text	0000005c _fflush_r
00029c84 g     F .text	000000c4 _calloc_r
0002042c g     F .text	00000018 fopen
04001f8c g       *ABS*	00000000 __bss_start
000213e0 g     F .text	00000128 memset
00020290 g     F .text	000000a8 main
0002ee30 g     F .text	00000034 alt_avalon_i2c_master_target_set
04001fb0 g     O .bss	00000004 alt_envp
04001f90 g     O .bss	00000004 __malloc_max_total_mem
0002ff84 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a194 g     F .text	00000018 __swbuf
0002fc30 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00021aa8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00029e38 g     F .text	00000014 fclose
00024220 g     F .text	00001688 _dtoa_r
00020bd4 g     F .text	0000080c _malloc_r
0002a308 g     F .text	00000030 __ascii_wctomb
04001f70 g     O .rwdata	00000004 alt_errno
0002688c g     F .text	000000c4 _fwalk
000324d8 g     F .text	000000c8 putc
0002ae44 g     F .text	00000084 .hidden __divsi3
00025f9c g     F .text	00000124 _malloc_trim_r
0003286c g       *ABS*	00000000 __CTOR_END__
00028560 g     F .text	000000dc strcmp
0003286c g       *ABS*	00000000 __flash_rodata_start
0003286c g       *ABS*	00000000 __DTOR_LIST__
0002c18c g     F .text	00000088 .hidden __nedf2
0002e25c g     F .text	00000038 alt_irq_init
0002dfb0 g     F .text	00000064 alt_release_fd
04000238 g     O .rodata	00000100 .hidden __clz_tab
04001f9c g     O .bss	00000004 _PathLocale
00032370 g     F .text	00000014 atexit
00023e18 g     F .text	00000060 _write_r
00026b20 g     F .text	00000018 setlocale
04001f48 g     O .rwdata	00000004 _impure_ptr
04001fa8 g     O .bss	00000004 alt_argc
000258a8 g     F .text	0000021c __sflush_r
00031764 g     F .text	00000060 _do_dtors
00026b0c g     F .text	00000008 __locale_cjk_lang
0002edf8 g     F .text	00000038 alt_avalon_i2c_master_target_get
00020444 g     F .text	00000004 _fseek_r
0002ed08 g     F .text	000000f0 alt_avalon_i2c_send_address
000216c4 g     F .text	000001d4 __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
00027a50 g     F .text	00000064 __ulp
00025ed8 g     F .text	00000018 __fp_unlock_all
04001f5c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00026b38 g     F .text	0000000c localeconv
0002febc g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00031a34 g     F .text	00000050 alt_ic_isr_register
0002e738 g     F .text	0000004c alt_avalon_i2c_disable
04001f8c g       *ABS*	00000000 _edata
00030a80 g     F .text	00000060 altera_avalon_uart_read_fd
040020ec g       *ABS*	00000000 _end
00029e4c g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0003045c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002e784 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00031b0c g     F .text	0000008c alt_ic_irq_disable
000219d0 g     F .text	0000007c __swrite
04001f50 g     O .rwdata	00000004 __malloc_trim_threshold
00026b00 g     F .text	0000000c __locale_msgcharset
00032384 g     F .text	00000038 exit
00026950 g     F .text	000000c4 _fwalk_reent
00027854 g     F .text	000001fc __mdiff
0002aec8 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00025eb4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0002e994 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
0002ec24 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00030f04 g     F .text	00000054 altera_avalon_uart_close
00020338 g     F .text	000000f4 _fopen_r
00032838 g     F .text	00000034 _exit
00031358 g     F .text	0000012c alt_alarm_start
00020a18 g     F .text	000001bc __smakebuf_r
00021ab0 g     F .text	00000098 strlen
0002dd24 g     F .text	00000154 open
0002c214 g     F .text	000000dc .hidden __gedf2
00032040 g     F .text	0000003c alt_putchar
04001f58 g     O .rwdata	00000004 __wctomb
00028738 g     F .text	00000018 __sprint_r
00031a00 g     F .text	00000034 alt_icache_flush_all
04001f80 g     O .rwdata	00000004 alt_priority_mask
00031a84 g     F .text	00000088 alt_ic_irq_enable
00023d40 g     F .text	0000001c __vfprintf_internal
00030f94 g     F .text	000001dc altera_avalon_uart_read
0002a338 g     F .text	0000005c _wctomb_r
0002cafc g     F .text	000008fc .hidden __subdf3
00027288 g     F .text	000000b0 __lo0bits
04001f84 g     O .rwdata	00000008 alt_alarm_list
00031704 g     F .text	00000060 _do_ctors
0002a248 g     F .text	000000c0 wcrtomb
0002d69c g     F .text	000000d0 close
0002fe70 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0002d9cc g     F .text	00000084 alt_load
0002f118 g     F .text	0000013c alt_avalon_i2c_master_rx
00029fd4 g     F .text	00000080 fputwc
00025eb8 g     F .text	00000004 __sinit_lock_acquire
00026ffc g     F .text	00000120 __multadd
00026fd4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf8020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00810034 	movhi	r2,1024
   20140:	1087fb04 	addi	r2,r2,8172
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00810034 	movhi	r2,1024
   20158:	1087fb04 	addi	r2,r2,8172
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xf802012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xf8020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a01f17 	ldw	r2,-32644(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a01f17 	ldw	r2,-32644(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xf8020248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
   20260:	d6a7d114 	ori	gp,gp,40772
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
   20268:	1087e314 	ori	r2,r2,8076

    movhi r3, %hi(__bss_end)
   2026c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
   20270:	18c83b14 	ori	r3,r3,8428

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xf8020278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002d9cc0 	call	2d9cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002db600 	call	2db60 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xf802028c>

00020290 <main>:
/* A simple program that recognizes the characters 't' and 'v' */
#include <stdio.h>
#include <string.h>
int main ()
{
   20290:	defffa04 	addi	sp,sp,-24
   20294:	dfc00515 	stw	ra,20(sp)
   20298:	df000415 	stw	fp,16(sp)
   2029c:	df000404 	addi	fp,sp,16
	char* msg = "Hello message from the FPGA!";
   202a0:	00810034 	movhi	r2,1024
   202a4:	10800004 	addi	r2,r2,0
   202a8:	e0bffc15 	stw	r2,-16(fp)
	FILE* fp;
	char prompt = 0;
   202ac:	e03ffd05 	stb	zero,-12(fp)
	int messageCounter = 0;
   202b0:	e03ffe15 	stw	zero,-8(fp)
	fp = fopen ("/dev/uart_0", "r+");
   202b4:	01410034 	movhi	r5,1024
   202b8:	29400804 	addi	r5,r5,32
   202bc:	01010034 	movhi	r4,1024
   202c0:	21000904 	addi	r4,r4,36
   202c4:	002042c0 	call	2042c <fopen>
   202c8:	e0bfff15 	stw	r2,-4(fp)
	if (fp) {
   202cc:	e0bfff17 	ldw	r2,-4(fp)
   202d0:	10001026 	beq	r2,zero,20314 <main+0x84>
		printf("UART detected.\n");
   202d4:	01010034 	movhi	r4,1024
   202d8:	21000c04 	addi	r4,r4,48
   202dc:	00216940 	call	21694 <puts>
		while (1) {
			prompt = getc(fp);
   202e0:	e13fff17 	ldw	r4,-4(fp)
   202e4:	00209900 	call	20990 <getc>
   202e8:	e0bffd05 	stb	r2,-12(fp)
			if (prompt == 'R') {
   202ec:	e0bffd07 	ldb	r2,-12(fp)
   202f0:	10801498 	cmpnei	r2,r2,82
   202f4:	1000031e 	bne	r2,zero,20304 <main+0x74>
				printf("Read request received!");
   202f8:	01010034 	movhi	r4,1024
   202fc:	21001004 	addi	r4,r4,64
   20300:	00215980 	call	21598 <printf>
				prompt = getc(fp);
				index++;
			}
			printf("Received: %s\n", response_buffer);
			messageCounter++;*/
			usleep(100000);
   20304:	010000b4 	movhi	r4,2
   20308:	2121a804 	addi	r4,r4,-31072
   2030c:	002e0c40 	call	2e0c4 <usleep>
		}
   20310:	003ff306 	br	202e0 <__alt_data_end+0xf80202e0>
		fclose (fp);
	} else {
		printf("UART not detected.");
   20314:	01010034 	movhi	r4,1024
   20318:	21001604 	addi	r4,r4,88
   2031c:	00215980 	call	21598 <printf>
	}
 	return 0;
   20320:	0005883a 	mov	r2,zero
}
   20324:	e037883a 	mov	sp,fp
   20328:	dfc00117 	ldw	ra,4(sp)
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00204 	addi	sp,sp,8
   20334:	f800283a 	ret

00020338 <_fopen_r>:
   20338:	defffa04 	addi	sp,sp,-24
   2033c:	3005883a 	mov	r2,r6
   20340:	dcc00415 	stw	r19,16(sp)
   20344:	d80d883a 	mov	r6,sp
   20348:	2827883a 	mov	r19,r5
   2034c:	100b883a 	mov	r5,r2
   20350:	dc800315 	stw	r18,12(sp)
   20354:	dfc00515 	stw	ra,20(sp)
   20358:	dc400215 	stw	r17,8(sp)
   2035c:	dc000115 	stw	r16,4(sp)
   20360:	2025883a 	mov	r18,r4
   20364:	0025ef00 	call	25ef0 <__sflags>
   20368:	10002726 	beq	r2,zero,20408 <_fopen_r+0xd0>
   2036c:	9009883a 	mov	r4,r18
   20370:	1023883a 	mov	r17,r2
   20374:	0025d700 	call	25d70 <__sfp>
   20378:	1021883a 	mov	r16,r2
   2037c:	10002226 	beq	r2,zero,20408 <_fopen_r+0xd0>
   20380:	d9800017 	ldw	r6,0(sp)
   20384:	01c06d84 	movi	r7,438
   20388:	980b883a 	mov	r5,r19
   2038c:	9009883a 	mov	r4,r18
   20390:	00215080 	call	21508 <_open_r>
   20394:	10001916 	blt	r2,zero,203fc <_fopen_r+0xc4>
   20398:	8080038d 	sth	r2,14(r16)
   2039c:	008000b4 	movhi	r2,2
   203a0:	10865d04 	addi	r2,r2,6516
   203a4:	80800815 	stw	r2,32(r16)
   203a8:	008000b4 	movhi	r2,2
   203ac:	10867404 	addi	r2,r2,6608
   203b0:	80800915 	stw	r2,36(r16)
   203b4:	008000b4 	movhi	r2,2
   203b8:	10869304 	addi	r2,r2,6732
   203bc:	80800a15 	stw	r2,40(r16)
   203c0:	008000b4 	movhi	r2,2
   203c4:	1086aa04 	addi	r2,r2,6824
   203c8:	8440030d 	sth	r17,12(r16)
   203cc:	84000715 	stw	r16,28(r16)
   203d0:	80800b15 	stw	r2,44(r16)
   203d4:	8c40400c 	andi	r17,r17,256
   203d8:	88000d1e 	bne	r17,zero,20410 <_fopen_r+0xd8>
   203dc:	8005883a 	mov	r2,r16
   203e0:	dfc00517 	ldw	ra,20(sp)
   203e4:	dcc00417 	ldw	r19,16(sp)
   203e8:	dc800317 	ldw	r18,12(sp)
   203ec:	dc400217 	ldw	r17,8(sp)
   203f0:	dc000117 	ldw	r16,4(sp)
   203f4:	dec00604 	addi	sp,sp,24
   203f8:	f800283a 	ret
   203fc:	0025eb00 	call	25eb0 <__sfp_lock_acquire>
   20400:	8000030d 	sth	zero,12(r16)
   20404:	0025eb40 	call	25eb4 <__sfp_lock_release>
   20408:	0005883a 	mov	r2,zero
   2040c:	003ff406 	br	203e0 <__alt_data_end+0xf80203e0>
   20410:	01c00084 	movi	r7,2
   20414:	000d883a 	mov	r6,zero
   20418:	800b883a 	mov	r5,r16
   2041c:	9009883a 	mov	r4,r18
   20420:	00204440 	call	20444 <_fseek_r>
   20424:	8005883a 	mov	r2,r16
   20428:	003fed06 	br	203e0 <__alt_data_end+0xf80203e0>

0002042c <fopen>:
   2042c:	00810034 	movhi	r2,1024
   20430:	1087d204 	addi	r2,r2,8008
   20434:	280d883a 	mov	r6,r5
   20438:	200b883a 	mov	r5,r4
   2043c:	11000017 	ldw	r4,0(r2)
   20440:	00203381 	jmpi	20338 <_fopen_r>

00020444 <_fseek_r>:
   20444:	00204641 	jmpi	20464 <_fseeko_r>

00020448 <fseek>:
   20448:	00810034 	movhi	r2,1024
   2044c:	1087d204 	addi	r2,r2,8008
   20450:	300f883a 	mov	r7,r6
   20454:	280d883a 	mov	r6,r5
   20458:	200b883a 	mov	r5,r4
   2045c:	11000017 	ldw	r4,0(r2)
   20460:	00204641 	jmpi	20464 <_fseeko_r>

00020464 <_fseeko_r>:
   20464:	deffe804 	addi	sp,sp,-96
   20468:	dd401415 	stw	r21,80(sp)
   2046c:	dc801115 	stw	r18,68(sp)
   20470:	dc401015 	stw	r17,64(sp)
   20474:	dc000f15 	stw	r16,60(sp)
   20478:	dfc01715 	stw	ra,92(sp)
   2047c:	ddc01615 	stw	r23,88(sp)
   20480:	dd801515 	stw	r22,84(sp)
   20484:	dd001315 	stw	r20,76(sp)
   20488:	dcc01215 	stw	r19,72(sp)
   2048c:	2023883a 	mov	r17,r4
   20490:	2821883a 	mov	r16,r5
   20494:	302b883a 	mov	r21,r6
   20498:	3825883a 	mov	r18,r7
   2049c:	20000226 	beq	r4,zero,204a8 <_fseeko_r+0x44>
   204a0:	20800e17 	ldw	r2,56(r4)
   204a4:	10005a26 	beq	r2,zero,20610 <_fseeko_r+0x1ac>
   204a8:	8080030b 	ldhu	r2,12(r16)
   204ac:	00c04204 	movi	r3,264
   204b0:	1080420c 	andi	r2,r2,264
   204b4:	10c05b26 	beq	r2,r3,20624 <_fseeko_r+0x1c0>
   204b8:	85000a17 	ldw	r20,40(r16)
   204bc:	a000f626 	beq	r20,zero,20898 <_fseeko_r+0x434>
   204c0:	00800044 	movi	r2,1
   204c4:	90803e26 	beq	r18,r2,205c0 <_fseeko_r+0x15c>
   204c8:	00800084 	movi	r2,2
   204cc:	90801026 	beq	r18,r2,20510 <_fseeko_r+0xac>
   204d0:	90000f26 	beq	r18,zero,20510 <_fseeko_r+0xac>
   204d4:	00800584 	movi	r2,22
   204d8:	88800015 	stw	r2,0(r17)
   204dc:	04ffffc4 	movi	r19,-1
   204e0:	9805883a 	mov	r2,r19
   204e4:	dfc01717 	ldw	ra,92(sp)
   204e8:	ddc01617 	ldw	r23,88(sp)
   204ec:	dd801517 	ldw	r22,84(sp)
   204f0:	dd401417 	ldw	r21,80(sp)
   204f4:	dd001317 	ldw	r20,76(sp)
   204f8:	dcc01217 	ldw	r19,72(sp)
   204fc:	dc801117 	ldw	r18,68(sp)
   20500:	dc401017 	ldw	r17,64(sp)
   20504:	dc000f17 	ldw	r16,60(sp)
   20508:	dec01804 	addi	sp,sp,96
   2050c:	f800283a 	ret
   20510:	80800417 	ldw	r2,16(r16)
   20514:	002f883a 	mov	r23,zero
   20518:	0027883a 	mov	r19,zero
   2051c:	1000cb26 	beq	r2,zero,2084c <_fseeko_r+0x3e8>
   20520:	8080030b 	ldhu	r2,12(r16)
   20524:	10c2068c 	andi	r3,r2,2074
   20528:	1800071e 	bne	r3,zero,20548 <_fseeko_r+0xe4>
   2052c:	10c1000c 	andi	r3,r2,1024
   20530:	1800451e 	bne	r3,zero,20648 <_fseeko_r+0x1e4>
   20534:	00c000b4 	movhi	r3,2
   20538:	18c69304 	addi	r3,r3,6732
   2053c:	a0c0b726 	beq	r20,r3,2081c <_fseeko_r+0x3b8>
   20540:	10820014 	ori	r2,r2,2048
   20544:	8080030d 	sth	r2,12(r16)
   20548:	800b883a 	mov	r5,r16
   2054c:	8809883a 	mov	r4,r17
   20550:	0025ac40 	call	25ac4 <_fflush_r>
   20554:	1027883a 	mov	r19,r2
   20558:	103fe01e 	bne	r2,zero,204dc <__alt_data_end+0xf80204dc>
   2055c:	81400717 	ldw	r5,28(r16)
   20560:	900f883a 	mov	r7,r18
   20564:	a80d883a 	mov	r6,r21
   20568:	8809883a 	mov	r4,r17
   2056c:	a03ee83a 	callr	r20
   20570:	00ffffc4 	movi	r3,-1
   20574:	10ffd926 	beq	r2,r3,204dc <__alt_data_end+0xf80204dc>
   20578:	81400c17 	ldw	r5,48(r16)
   2057c:	28000526 	beq	r5,zero,20594 <_fseeko_r+0x130>
   20580:	80801004 	addi	r2,r16,64
   20584:	28800226 	beq	r5,r2,20590 <_fseeko_r+0x12c>
   20588:	8809883a 	mov	r4,r17
   2058c:	00260c00 	call	260c0 <_free_r>
   20590:	80000c15 	stw	zero,48(r16)
   20594:	8080030b 	ldhu	r2,12(r16)
   20598:	80c00417 	ldw	r3,16(r16)
   2059c:	80000115 	stw	zero,4(r16)
   205a0:	10bdf7cc 	andi	r2,r2,63455
   205a4:	80c00015 	stw	r3,0(r16)
   205a8:	8080030d 	sth	r2,12(r16)
   205ac:	01800204 	movi	r6,8
   205b0:	000b883a 	mov	r5,zero
   205b4:	81001704 	addi	r4,r16,92
   205b8:	00213e00 	call	213e0 <memset>
   205bc:	003fc806 	br	204e0 <__alt_data_end+0xf80204e0>
   205c0:	800b883a 	mov	r5,r16
   205c4:	8809883a 	mov	r4,r17
   205c8:	0025ac40 	call	25ac4 <_fflush_r>
   205cc:	8080030b 	ldhu	r2,12(r16)
   205d0:	10c4000c 	andi	r3,r2,4096
   205d4:	18008726 	beq	r3,zero,207f4 <_fseeko_r+0x390>
   205d8:	84c01417 	ldw	r19,80(r16)
   205dc:	10c0010c 	andi	r3,r2,4
   205e0:	1800431e 	bne	r3,zero,206f0 <_fseeko_r+0x28c>
   205e4:	1080020c 	andi	r2,r2,8
   205e8:	10008026 	beq	r2,zero,207ec <_fseeko_r+0x388>
   205ec:	80c00017 	ldw	r3,0(r16)
   205f0:	80800417 	ldw	r2,16(r16)
   205f4:	18000226 	beq	r3,zero,20600 <_fseeko_r+0x19c>
   205f8:	1887c83a 	sub	r3,r3,r2
   205fc:	98e7883a 	add	r19,r19,r3
   20600:	aceb883a 	add	r21,r21,r19
   20604:	05c00044 	movi	r23,1
   20608:	0025883a 	mov	r18,zero
   2060c:	003fc306 	br	2051c <__alt_data_end+0xf802051c>
   20610:	0025ea00 	call	25ea0 <__sinit>
   20614:	8080030b 	ldhu	r2,12(r16)
   20618:	00c04204 	movi	r3,264
   2061c:	1080420c 	andi	r2,r2,264
   20620:	10ffa51e 	bne	r2,r3,204b8 <__alt_data_end+0xf80204b8>
   20624:	800b883a 	mov	r5,r16
   20628:	8809883a 	mov	r4,r17
   2062c:	0025ac40 	call	25ac4 <_fflush_r>
   20630:	003fa106 	br	204b8 <__alt_data_end+0xf80204b8>
   20634:	8080030b 	ldhu	r2,12(r16)
   20638:	00c10004 	movi	r3,1024
   2063c:	80c01315 	stw	r3,76(r16)
   20640:	10c4b03a 	or	r2,r2,r3
   20644:	8080030d 	sth	r2,12(r16)
   20648:	9000311e 	bne	r18,zero,20710 <_fseeko_r+0x2ac>
   2064c:	a82d883a 	mov	r22,r21
   20650:	b800371e 	bne	r23,zero,20730 <_fseeko_r+0x2cc>
   20654:	8080030b 	ldhu	r2,12(r16)
   20658:	1084000c 	andi	r2,r2,4096
   2065c:	10007f26 	beq	r2,zero,2085c <_fseeko_r+0x3f8>
   20660:	80801417 	ldw	r2,80(r16)
   20664:	81800117 	ldw	r6,4(r16)
   20668:	81400c17 	ldw	r5,48(r16)
   2066c:	11a7c83a 	sub	r19,r2,r6
   20670:	28008226 	beq	r5,zero,2087c <_fseeko_r+0x418>
   20674:	81c00f17 	ldw	r7,60(r16)
   20678:	99e7c83a 	sub	r19,r19,r7
   2067c:	81000e17 	ldw	r4,56(r16)
   20680:	80800417 	ldw	r2,16(r16)
   20684:	99a7883a 	add	r19,r19,r6
   20688:	2087c83a 	sub	r3,r4,r2
   2068c:	98e7c83a 	sub	r19,r19,r3
   20690:	38c7883a 	add	r3,r7,r3
   20694:	b4c02b16 	blt	r22,r19,20744 <_fseeko_r+0x2e0>
   20698:	98c9883a 	add	r4,r19,r3
   2069c:	b100292e 	bgeu	r22,r4,20744 <_fseeko_r+0x2e0>
   206a0:	b4e7c83a 	sub	r19,r22,r19
   206a4:	14c5883a 	add	r2,r2,r19
   206a8:	1ce7c83a 	sub	r19,r3,r19
   206ac:	80800015 	stw	r2,0(r16)
   206b0:	84c00115 	stw	r19,4(r16)
   206b4:	28000526 	beq	r5,zero,206cc <_fseeko_r+0x268>
   206b8:	80801004 	addi	r2,r16,64
   206bc:	28800226 	beq	r5,r2,206c8 <_fseeko_r+0x264>
   206c0:	8809883a 	mov	r4,r17
   206c4:	00260c00 	call	260c0 <_free_r>
   206c8:	80000c15 	stw	zero,48(r16)
   206cc:	8080030b 	ldhu	r2,12(r16)
   206d0:	01800204 	movi	r6,8
   206d4:	000b883a 	mov	r5,zero
   206d8:	10bff7cc 	andi	r2,r2,65503
   206dc:	8080030d 	sth	r2,12(r16)
   206e0:	81001704 	addi	r4,r16,92
   206e4:	00213e00 	call	213e0 <memset>
   206e8:	0027883a 	mov	r19,zero
   206ec:	003f7c06 	br	204e0 <__alt_data_end+0xf80204e0>
   206f0:	80c00117 	ldw	r3,4(r16)
   206f4:	80800c17 	ldw	r2,48(r16)
   206f8:	98e7c83a 	sub	r19,r19,r3
   206fc:	10003b26 	beq	r2,zero,207ec <_fseeko_r+0x388>
   20700:	80c00f17 	ldw	r3,60(r16)
   20704:	80800417 	ldw	r2,16(r16)
   20708:	98e7c83a 	sub	r19,r19,r3
   2070c:	003fbc06 	br	20600 <__alt_data_end+0xf8020600>
   20710:	8140038f 	ldh	r5,14(r16)
   20714:	d80d883a 	mov	r6,sp
   20718:	8809883a 	mov	r4,r17
   2071c:	00208c40 	call	208c4 <_fstat_r>
   20720:	103f891e 	bne	r2,zero,20548 <__alt_data_end+0xf8020548>
   20724:	dd800417 	ldw	r22,16(sp)
   20728:	adad883a 	add	r22,r21,r22
   2072c:	b83fc926 	beq	r23,zero,20654 <__alt_data_end+0xf8020654>
   20730:	81400c17 	ldw	r5,48(r16)
   20734:	81800117 	ldw	r6,4(r16)
   20738:	28005026 	beq	r5,zero,2087c <_fseeko_r+0x418>
   2073c:	81c00f17 	ldw	r7,60(r16)
   20740:	003fce06 	br	2067c <__alt_data_end+0xf802067c>
   20744:	84c01317 	ldw	r19,76(r16)
   20748:	81400717 	ldw	r5,28(r16)
   2074c:	000f883a 	mov	r7,zero
   20750:	04e7c83a 	sub	r19,zero,r19
   20754:	9da6703a 	and	r19,r19,r22
   20758:	980d883a 	mov	r6,r19
   2075c:	8809883a 	mov	r4,r17
   20760:	a03ee83a 	callr	r20
   20764:	00ffffc4 	movi	r3,-1
   20768:	10ff7726 	beq	r2,r3,20548 <__alt_data_end+0xf8020548>
   2076c:	80800417 	ldw	r2,16(r16)
   20770:	81400c17 	ldw	r5,48(r16)
   20774:	80000115 	stw	zero,4(r16)
   20778:	80800015 	stw	r2,0(r16)
   2077c:	28000526 	beq	r5,zero,20794 <_fseeko_r+0x330>
   20780:	80801004 	addi	r2,r16,64
   20784:	28800226 	beq	r5,r2,20790 <_fseeko_r+0x32c>
   20788:	8809883a 	mov	r4,r17
   2078c:	00260c00 	call	260c0 <_free_r>
   20790:	80000c15 	stw	zero,48(r16)
   20794:	8080030b 	ldhu	r2,12(r16)
   20798:	b4e7c83a 	sub	r19,r22,r19
   2079c:	10bff7cc 	andi	r2,r2,65503
   207a0:	8080030d 	sth	r2,12(r16)
   207a4:	98000b26 	beq	r19,zero,207d4 <_fseeko_r+0x370>
   207a8:	800b883a 	mov	r5,r16
   207ac:	8809883a 	mov	r4,r17
   207b0:	00216c40 	call	216c4 <__srefill_r>
   207b4:	103f641e 	bne	r2,zero,20548 <__alt_data_end+0xf8020548>
   207b8:	80800117 	ldw	r2,4(r16)
   207bc:	14ff6236 	bltu	r2,r19,20548 <__alt_data_end+0xf8020548>
   207c0:	80c00017 	ldw	r3,0(r16)
   207c4:	14c5c83a 	sub	r2,r2,r19
   207c8:	80800115 	stw	r2,4(r16)
   207cc:	1ce7883a 	add	r19,r3,r19
   207d0:	84c00015 	stw	r19,0(r16)
   207d4:	01800204 	movi	r6,8
   207d8:	000b883a 	mov	r5,zero
   207dc:	81001704 	addi	r4,r16,92
   207e0:	00213e00 	call	213e0 <memset>
   207e4:	0027883a 	mov	r19,zero
   207e8:	003f3d06 	br	204e0 <__alt_data_end+0xf80204e0>
   207ec:	80800417 	ldw	r2,16(r16)
   207f0:	003f8306 	br	20600 <__alt_data_end+0xf8020600>
   207f4:	81400717 	ldw	r5,28(r16)
   207f8:	900f883a 	mov	r7,r18
   207fc:	000d883a 	mov	r6,zero
   20800:	8809883a 	mov	r4,r17
   20804:	a03ee83a 	callr	r20
   20808:	1027883a 	mov	r19,r2
   2080c:	00bfffc4 	movi	r2,-1
   20810:	98bf3226 	beq	r19,r2,204dc <__alt_data_end+0xf80204dc>
   20814:	8080030b 	ldhu	r2,12(r16)
   20818:	003f7006 	br	205dc <__alt_data_end+0xf80205dc>
   2081c:	8140038f 	ldh	r5,14(r16)
   20820:	283f4716 	blt	r5,zero,20540 <__alt_data_end+0xf8020540>
   20824:	d80d883a 	mov	r6,sp
   20828:	8809883a 	mov	r4,r17
   2082c:	00208c40 	call	208c4 <_fstat_r>
   20830:	1000041e 	bne	r2,zero,20844 <_fseeko_r+0x3e0>
   20834:	d8800117 	ldw	r2,4(sp)
   20838:	00e00014 	movui	r3,32768
   2083c:	10bc000c 	andi	r2,r2,61440
   20840:	10ff7c26 	beq	r2,r3,20634 <__alt_data_end+0xf8020634>
   20844:	8080030b 	ldhu	r2,12(r16)
   20848:	003f3d06 	br	20540 <__alt_data_end+0xf8020540>
   2084c:	800b883a 	mov	r5,r16
   20850:	8809883a 	mov	r4,r17
   20854:	0020a180 	call	20a18 <__smakebuf_r>
   20858:	003f3106 	br	20520 <__alt_data_end+0xf8020520>
   2085c:	81400717 	ldw	r5,28(r16)
   20860:	01c00044 	movi	r7,1
   20864:	000d883a 	mov	r6,zero
   20868:	8809883a 	mov	r4,r17
   2086c:	a03ee83a 	callr	r20
   20870:	00ffffc4 	movi	r3,-1
   20874:	10ff7b1e 	bne	r2,r3,20664 <__alt_data_end+0xf8020664>
   20878:	003f3306 	br	20548 <__alt_data_end+0xf8020548>
   2087c:	80c00017 	ldw	r3,0(r16)
   20880:	80800417 	ldw	r2,16(r16)
   20884:	000b883a 	mov	r5,zero
   20888:	1887c83a 	sub	r3,r3,r2
   2088c:	98e7c83a 	sub	r19,r19,r3
   20890:	30c7883a 	add	r3,r6,r3
   20894:	003f7f06 	br	20694 <__alt_data_end+0xf8020694>
   20898:	00800744 	movi	r2,29
   2089c:	88800015 	stw	r2,0(r17)
   208a0:	04ffffc4 	movi	r19,-1
   208a4:	003f0e06 	br	204e0 <__alt_data_end+0xf80204e0>

000208a8 <fseeko>:
   208a8:	00810034 	movhi	r2,1024
   208ac:	1087d204 	addi	r2,r2,8008
   208b0:	300f883a 	mov	r7,r6
   208b4:	280d883a 	mov	r6,r5
   208b8:	200b883a 	mov	r5,r4
   208bc:	11000017 	ldw	r4,0(r2)
   208c0:	00204641 	jmpi	20464 <_fseeko_r>

000208c4 <_fstat_r>:
   208c4:	defffd04 	addi	sp,sp,-12
   208c8:	2805883a 	mov	r2,r5
   208cc:	dc000015 	stw	r16,0(sp)
   208d0:	04010034 	movhi	r16,1024
   208d4:	dc400115 	stw	r17,4(sp)
   208d8:	8407e304 	addi	r16,r16,8076
   208dc:	2023883a 	mov	r17,r4
   208e0:	300b883a 	mov	r5,r6
   208e4:	1009883a 	mov	r4,r2
   208e8:	dfc00215 	stw	ra,8(sp)
   208ec:	80000015 	stw	zero,0(r16)
   208f0:	002d7d40 	call	2d7d4 <fstat>
   208f4:	00ffffc4 	movi	r3,-1
   208f8:	10c00526 	beq	r2,r3,20910 <_fstat_r+0x4c>
   208fc:	dfc00217 	ldw	ra,8(sp)
   20900:	dc400117 	ldw	r17,4(sp)
   20904:	dc000017 	ldw	r16,0(sp)
   20908:	dec00304 	addi	sp,sp,12
   2090c:	f800283a 	ret
   20910:	80c00017 	ldw	r3,0(r16)
   20914:	183ff926 	beq	r3,zero,208fc <__alt_data_end+0xf80208fc>
   20918:	88c00015 	stw	r3,0(r17)
   2091c:	003ff706 	br	208fc <__alt_data_end+0xf80208fc>

00020920 <_getc_r>:
   20920:	defffd04 	addi	sp,sp,-12
   20924:	dc000115 	stw	r16,4(sp)
   20928:	dfc00215 	stw	ra,8(sp)
   2092c:	2021883a 	mov	r16,r4
   20930:	20000226 	beq	r4,zero,2093c <_getc_r+0x1c>
   20934:	20800e17 	ldw	r2,56(r4)
   20938:	10000c26 	beq	r2,zero,2096c <_getc_r+0x4c>
   2093c:	28800117 	ldw	r2,4(r5)
   20940:	10bfffc4 	addi	r2,r2,-1
   20944:	28800115 	stw	r2,4(r5)
   20948:	10000c16 	blt	r2,zero,2097c <_getc_r+0x5c>
   2094c:	28800017 	ldw	r2,0(r5)
   20950:	10c00044 	addi	r3,r2,1
   20954:	28c00015 	stw	r3,0(r5)
   20958:	10800003 	ldbu	r2,0(r2)
   2095c:	dfc00217 	ldw	ra,8(sp)
   20960:	dc000117 	ldw	r16,4(sp)
   20964:	dec00304 	addi	sp,sp,12
   20968:	f800283a 	ret
   2096c:	d9400015 	stw	r5,0(sp)
   20970:	0025ea00 	call	25ea0 <__sinit>
   20974:	d9400017 	ldw	r5,0(sp)
   20978:	003ff006 	br	2093c <__alt_data_end+0xf802093c>
   2097c:	8009883a 	mov	r4,r16
   20980:	dfc00217 	ldw	ra,8(sp)
   20984:	dc000117 	ldw	r16,4(sp)
   20988:	dec00304 	addi	sp,sp,12
   2098c:	00218981 	jmpi	21898 <__srget_r>

00020990 <getc>:
   20990:	00810034 	movhi	r2,1024
   20994:	defffd04 	addi	sp,sp,-12
   20998:	1087d204 	addi	r2,r2,8008
   2099c:	dc400115 	stw	r17,4(sp)
   209a0:	14400017 	ldw	r17,0(r2)
   209a4:	dc000015 	stw	r16,0(sp)
   209a8:	dfc00215 	stw	ra,8(sp)
   209ac:	2021883a 	mov	r16,r4
   209b0:	88000226 	beq	r17,zero,209bc <getc+0x2c>
   209b4:	88800e17 	ldw	r2,56(r17)
   209b8:	10000d26 	beq	r2,zero,209f0 <getc+0x60>
   209bc:	80800117 	ldw	r2,4(r16)
   209c0:	10bfffc4 	addi	r2,r2,-1
   209c4:	80800115 	stw	r2,4(r16)
   209c8:	10000c16 	blt	r2,zero,209fc <getc+0x6c>
   209cc:	80800017 	ldw	r2,0(r16)
   209d0:	10c00044 	addi	r3,r2,1
   209d4:	80c00015 	stw	r3,0(r16)
   209d8:	10800003 	ldbu	r2,0(r2)
   209dc:	dfc00217 	ldw	ra,8(sp)
   209e0:	dc400117 	ldw	r17,4(sp)
   209e4:	dc000017 	ldw	r16,0(sp)
   209e8:	dec00304 	addi	sp,sp,12
   209ec:	f800283a 	ret
   209f0:	8809883a 	mov	r4,r17
   209f4:	0025ea00 	call	25ea0 <__sinit>
   209f8:	003ff006 	br	209bc <__alt_data_end+0xf80209bc>
   209fc:	800b883a 	mov	r5,r16
   20a00:	8809883a 	mov	r4,r17
   20a04:	dfc00217 	ldw	ra,8(sp)
   20a08:	dc400117 	ldw	r17,4(sp)
   20a0c:	dc000017 	ldw	r16,0(sp)
   20a10:	dec00304 	addi	sp,sp,12
   20a14:	00218981 	jmpi	21898 <__srget_r>

00020a18 <__smakebuf_r>:
   20a18:	2880030b 	ldhu	r2,12(r5)
   20a1c:	10c0008c 	andi	r3,r2,2
   20a20:	1800411e 	bne	r3,zero,20b28 <__smakebuf_r+0x110>
   20a24:	deffec04 	addi	sp,sp,-80
   20a28:	dc000f15 	stw	r16,60(sp)
   20a2c:	2821883a 	mov	r16,r5
   20a30:	2940038f 	ldh	r5,14(r5)
   20a34:	dc401015 	stw	r17,64(sp)
   20a38:	dfc01315 	stw	ra,76(sp)
   20a3c:	dcc01215 	stw	r19,72(sp)
   20a40:	dc801115 	stw	r18,68(sp)
   20a44:	2023883a 	mov	r17,r4
   20a48:	28001c16 	blt	r5,zero,20abc <__smakebuf_r+0xa4>
   20a4c:	d80d883a 	mov	r6,sp
   20a50:	00208c40 	call	208c4 <_fstat_r>
   20a54:	10001816 	blt	r2,zero,20ab8 <__smakebuf_r+0xa0>
   20a58:	d8800117 	ldw	r2,4(sp)
   20a5c:	00e00014 	movui	r3,32768
   20a60:	10bc000c 	andi	r2,r2,61440
   20a64:	14c80020 	cmpeqi	r19,r2,8192
   20a68:	10c03726 	beq	r2,r3,20b48 <__smakebuf_r+0x130>
   20a6c:	80c0030b 	ldhu	r3,12(r16)
   20a70:	18c20014 	ori	r3,r3,2048
   20a74:	80c0030d 	sth	r3,12(r16)
   20a78:	00c80004 	movi	r3,8192
   20a7c:	10c0521e 	bne	r2,r3,20bc8 <__smakebuf_r+0x1b0>
   20a80:	8140038f 	ldh	r5,14(r16)
   20a84:	8809883a 	mov	r4,r17
   20a88:	0026a140 	call	26a14 <_isatty_r>
   20a8c:	10004c26 	beq	r2,zero,20bc0 <__smakebuf_r+0x1a8>
   20a90:	8080030b 	ldhu	r2,12(r16)
   20a94:	80c010c4 	addi	r3,r16,67
   20a98:	80c00015 	stw	r3,0(r16)
   20a9c:	10800054 	ori	r2,r2,1
   20aa0:	8080030d 	sth	r2,12(r16)
   20aa4:	00800044 	movi	r2,1
   20aa8:	80c00415 	stw	r3,16(r16)
   20aac:	80800515 	stw	r2,20(r16)
   20ab0:	04810004 	movi	r18,1024
   20ab4:	00000706 	br	20ad4 <__smakebuf_r+0xbc>
   20ab8:	8080030b 	ldhu	r2,12(r16)
   20abc:	10c0200c 	andi	r3,r2,128
   20ac0:	18001f1e 	bne	r3,zero,20b40 <__smakebuf_r+0x128>
   20ac4:	04810004 	movi	r18,1024
   20ac8:	10820014 	ori	r2,r2,2048
   20acc:	8080030d 	sth	r2,12(r16)
   20ad0:	0027883a 	mov	r19,zero
   20ad4:	900b883a 	mov	r5,r18
   20ad8:	8809883a 	mov	r4,r17
   20adc:	0020bd40 	call	20bd4 <_malloc_r>
   20ae0:	10002c26 	beq	r2,zero,20b94 <__smakebuf_r+0x17c>
   20ae4:	80c0030b 	ldhu	r3,12(r16)
   20ae8:	010000b4 	movhi	r4,2
   20aec:	2116d604 	addi	r4,r4,23384
   20af0:	89000f15 	stw	r4,60(r17)
   20af4:	18c02014 	ori	r3,r3,128
   20af8:	80c0030d 	sth	r3,12(r16)
   20afc:	80800015 	stw	r2,0(r16)
   20b00:	80800415 	stw	r2,16(r16)
   20b04:	84800515 	stw	r18,20(r16)
   20b08:	98001a1e 	bne	r19,zero,20b74 <__smakebuf_r+0x15c>
   20b0c:	dfc01317 	ldw	ra,76(sp)
   20b10:	dcc01217 	ldw	r19,72(sp)
   20b14:	dc801117 	ldw	r18,68(sp)
   20b18:	dc401017 	ldw	r17,64(sp)
   20b1c:	dc000f17 	ldw	r16,60(sp)
   20b20:	dec01404 	addi	sp,sp,80
   20b24:	f800283a 	ret
   20b28:	288010c4 	addi	r2,r5,67
   20b2c:	28800015 	stw	r2,0(r5)
   20b30:	28800415 	stw	r2,16(r5)
   20b34:	00800044 	movi	r2,1
   20b38:	28800515 	stw	r2,20(r5)
   20b3c:	f800283a 	ret
   20b40:	04801004 	movi	r18,64
   20b44:	003fe006 	br	20ac8 <__alt_data_end+0xf8020ac8>
   20b48:	81000a17 	ldw	r4,40(r16)
   20b4c:	00c000b4 	movhi	r3,2
   20b50:	18c69304 	addi	r3,r3,6732
   20b54:	20ffc51e 	bne	r4,r3,20a6c <__alt_data_end+0xf8020a6c>
   20b58:	8080030b 	ldhu	r2,12(r16)
   20b5c:	04810004 	movi	r18,1024
   20b60:	84801315 	stw	r18,76(r16)
   20b64:	1484b03a 	or	r2,r2,r18
   20b68:	8080030d 	sth	r2,12(r16)
   20b6c:	0027883a 	mov	r19,zero
   20b70:	003fd806 	br	20ad4 <__alt_data_end+0xf8020ad4>
   20b74:	8140038f 	ldh	r5,14(r16)
   20b78:	8809883a 	mov	r4,r17
   20b7c:	0026a140 	call	26a14 <_isatty_r>
   20b80:	103fe226 	beq	r2,zero,20b0c <__alt_data_end+0xf8020b0c>
   20b84:	8080030b 	ldhu	r2,12(r16)
   20b88:	10800054 	ori	r2,r2,1
   20b8c:	8080030d 	sth	r2,12(r16)
   20b90:	003fde06 	br	20b0c <__alt_data_end+0xf8020b0c>
   20b94:	8080030b 	ldhu	r2,12(r16)
   20b98:	10c0800c 	andi	r3,r2,512
   20b9c:	183fdb1e 	bne	r3,zero,20b0c <__alt_data_end+0xf8020b0c>
   20ba0:	10800094 	ori	r2,r2,2
   20ba4:	80c010c4 	addi	r3,r16,67
   20ba8:	8080030d 	sth	r2,12(r16)
   20bac:	00800044 	movi	r2,1
   20bb0:	80c00015 	stw	r3,0(r16)
   20bb4:	80c00415 	stw	r3,16(r16)
   20bb8:	80800515 	stw	r2,20(r16)
   20bbc:	003fd306 	br	20b0c <__alt_data_end+0xf8020b0c>
   20bc0:	04810004 	movi	r18,1024
   20bc4:	003fc306 	br	20ad4 <__alt_data_end+0xf8020ad4>
   20bc8:	0027883a 	mov	r19,zero
   20bcc:	04810004 	movi	r18,1024
   20bd0:	003fc006 	br	20ad4 <__alt_data_end+0xf8020ad4>

00020bd4 <_malloc_r>:
   20bd4:	defff504 	addi	sp,sp,-44
   20bd8:	dc800315 	stw	r18,12(sp)
   20bdc:	dfc00a15 	stw	ra,40(sp)
   20be0:	df000915 	stw	fp,36(sp)
   20be4:	ddc00815 	stw	r23,32(sp)
   20be8:	dd800715 	stw	r22,28(sp)
   20bec:	dd400615 	stw	r21,24(sp)
   20bf0:	dd000515 	stw	r20,20(sp)
   20bf4:	dcc00415 	stw	r19,16(sp)
   20bf8:	dc400215 	stw	r17,8(sp)
   20bfc:	dc000115 	stw	r16,4(sp)
   20c00:	288002c4 	addi	r2,r5,11
   20c04:	00c00584 	movi	r3,22
   20c08:	2025883a 	mov	r18,r4
   20c0c:	18807f2e 	bgeu	r3,r2,20e0c <_malloc_r+0x238>
   20c10:	047ffe04 	movi	r17,-8
   20c14:	1462703a 	and	r17,r2,r17
   20c18:	8800a316 	blt	r17,zero,20ea8 <_malloc_r+0x2d4>
   20c1c:	8940a236 	bltu	r17,r5,20ea8 <_malloc_r+0x2d4>
   20c20:	002dbdc0 	call	2dbdc <__malloc_lock>
   20c24:	00807dc4 	movi	r2,503
   20c28:	1441e92e 	bgeu	r2,r17,213d0 <_malloc_r+0x7fc>
   20c2c:	8804d27a 	srli	r2,r17,9
   20c30:	1000a126 	beq	r2,zero,20eb8 <_malloc_r+0x2e4>
   20c34:	00c00104 	movi	r3,4
   20c38:	18811e36 	bltu	r3,r2,210b4 <_malloc_r+0x4e0>
   20c3c:	8804d1ba 	srli	r2,r17,6
   20c40:	12000e44 	addi	r8,r2,57
   20c44:	11c00e04 	addi	r7,r2,56
   20c48:	4209883a 	add	r4,r8,r8
   20c4c:	04c10034 	movhi	r19,1024
   20c50:	2109883a 	add	r4,r4,r4
   20c54:	9cc1f004 	addi	r19,r19,1984
   20c58:	2109883a 	add	r4,r4,r4
   20c5c:	9909883a 	add	r4,r19,r4
   20c60:	24000117 	ldw	r16,4(r4)
   20c64:	213ffe04 	addi	r4,r4,-8
   20c68:	24009726 	beq	r4,r16,20ec8 <_malloc_r+0x2f4>
   20c6c:	80800117 	ldw	r2,4(r16)
   20c70:	01bfff04 	movi	r6,-4
   20c74:	014003c4 	movi	r5,15
   20c78:	1184703a 	and	r2,r2,r6
   20c7c:	1447c83a 	sub	r3,r2,r17
   20c80:	28c00716 	blt	r5,r3,20ca0 <_malloc_r+0xcc>
   20c84:	1800920e 	bge	r3,zero,20ed0 <_malloc_r+0x2fc>
   20c88:	84000317 	ldw	r16,12(r16)
   20c8c:	24008e26 	beq	r4,r16,20ec8 <_malloc_r+0x2f4>
   20c90:	80800117 	ldw	r2,4(r16)
   20c94:	1184703a 	and	r2,r2,r6
   20c98:	1447c83a 	sub	r3,r2,r17
   20c9c:	28fff90e 	bge	r5,r3,20c84 <__alt_data_end+0xf8020c84>
   20ca0:	3809883a 	mov	r4,r7
   20ca4:	01810034 	movhi	r6,1024
   20ca8:	9c000417 	ldw	r16,16(r19)
   20cac:	3181f004 	addi	r6,r6,1984
   20cb0:	32000204 	addi	r8,r6,8
   20cb4:	82013426 	beq	r16,r8,21188 <_malloc_r+0x5b4>
   20cb8:	80c00117 	ldw	r3,4(r16)
   20cbc:	00bfff04 	movi	r2,-4
   20cc0:	188e703a 	and	r7,r3,r2
   20cc4:	3c45c83a 	sub	r2,r7,r17
   20cc8:	00c003c4 	movi	r3,15
   20ccc:	18811f16 	blt	r3,r2,2114c <_malloc_r+0x578>
   20cd0:	32000515 	stw	r8,20(r6)
   20cd4:	32000415 	stw	r8,16(r6)
   20cd8:	10007f0e 	bge	r2,zero,20ed8 <_malloc_r+0x304>
   20cdc:	00807fc4 	movi	r2,511
   20ce0:	11c0fd36 	bltu	r2,r7,210d8 <_malloc_r+0x504>
   20ce4:	3806d0fa 	srli	r3,r7,3
   20ce8:	01c00044 	movi	r7,1
   20cec:	30800117 	ldw	r2,4(r6)
   20cf0:	19400044 	addi	r5,r3,1
   20cf4:	294b883a 	add	r5,r5,r5
   20cf8:	1807d0ba 	srai	r3,r3,2
   20cfc:	294b883a 	add	r5,r5,r5
   20d00:	294b883a 	add	r5,r5,r5
   20d04:	298b883a 	add	r5,r5,r6
   20d08:	38c6983a 	sll	r3,r7,r3
   20d0c:	29c00017 	ldw	r7,0(r5)
   20d10:	2a7ffe04 	addi	r9,r5,-8
   20d14:	1886b03a 	or	r3,r3,r2
   20d18:	82400315 	stw	r9,12(r16)
   20d1c:	81c00215 	stw	r7,8(r16)
   20d20:	30c00115 	stw	r3,4(r6)
   20d24:	2c000015 	stw	r16,0(r5)
   20d28:	3c000315 	stw	r16,12(r7)
   20d2c:	2005d0ba 	srai	r2,r4,2
   20d30:	01400044 	movi	r5,1
   20d34:	288a983a 	sll	r5,r5,r2
   20d38:	19406f36 	bltu	r3,r5,20ef8 <_malloc_r+0x324>
   20d3c:	28c4703a 	and	r2,r5,r3
   20d40:	10000a1e 	bne	r2,zero,20d6c <_malloc_r+0x198>
   20d44:	00bfff04 	movi	r2,-4
   20d48:	294b883a 	add	r5,r5,r5
   20d4c:	2088703a 	and	r4,r4,r2
   20d50:	28c4703a 	and	r2,r5,r3
   20d54:	21000104 	addi	r4,r4,4
   20d58:	1000041e 	bne	r2,zero,20d6c <_malloc_r+0x198>
   20d5c:	294b883a 	add	r5,r5,r5
   20d60:	28c4703a 	and	r2,r5,r3
   20d64:	21000104 	addi	r4,r4,4
   20d68:	103ffc26 	beq	r2,zero,20d5c <__alt_data_end+0xf8020d5c>
   20d6c:	02bfff04 	movi	r10,-4
   20d70:	024003c4 	movi	r9,15
   20d74:	21800044 	addi	r6,r4,1
   20d78:	318d883a 	add	r6,r6,r6
   20d7c:	318d883a 	add	r6,r6,r6
   20d80:	318d883a 	add	r6,r6,r6
   20d84:	998d883a 	add	r6,r19,r6
   20d88:	333ffe04 	addi	r12,r6,-8
   20d8c:	2017883a 	mov	r11,r4
   20d90:	31800104 	addi	r6,r6,4
   20d94:	34000017 	ldw	r16,0(r6)
   20d98:	31fffd04 	addi	r7,r6,-12
   20d9c:	81c0041e 	bne	r16,r7,20db0 <_malloc_r+0x1dc>
   20da0:	0000fb06 	br	21190 <_malloc_r+0x5bc>
   20da4:	1801030e 	bge	r3,zero,211b4 <_malloc_r+0x5e0>
   20da8:	84000317 	ldw	r16,12(r16)
   20dac:	81c0f826 	beq	r16,r7,21190 <_malloc_r+0x5bc>
   20db0:	80800117 	ldw	r2,4(r16)
   20db4:	1284703a 	and	r2,r2,r10
   20db8:	1447c83a 	sub	r3,r2,r17
   20dbc:	48fff90e 	bge	r9,r3,20da4 <__alt_data_end+0xf8020da4>
   20dc0:	80800317 	ldw	r2,12(r16)
   20dc4:	81000217 	ldw	r4,8(r16)
   20dc8:	89400054 	ori	r5,r17,1
   20dcc:	81400115 	stw	r5,4(r16)
   20dd0:	20800315 	stw	r2,12(r4)
   20dd4:	11000215 	stw	r4,8(r2)
   20dd8:	8463883a 	add	r17,r16,r17
   20ddc:	9c400515 	stw	r17,20(r19)
   20de0:	9c400415 	stw	r17,16(r19)
   20de4:	18800054 	ori	r2,r3,1
   20de8:	88800115 	stw	r2,4(r17)
   20dec:	8a000315 	stw	r8,12(r17)
   20df0:	8a000215 	stw	r8,8(r17)
   20df4:	88e3883a 	add	r17,r17,r3
   20df8:	88c00015 	stw	r3,0(r17)
   20dfc:	9009883a 	mov	r4,r18
   20e00:	002dc000 	call	2dc00 <__malloc_unlock>
   20e04:	80800204 	addi	r2,r16,8
   20e08:	00001b06 	br	20e78 <_malloc_r+0x2a4>
   20e0c:	04400404 	movi	r17,16
   20e10:	89402536 	bltu	r17,r5,20ea8 <_malloc_r+0x2d4>
   20e14:	002dbdc0 	call	2dbdc <__malloc_lock>
   20e18:	00800184 	movi	r2,6
   20e1c:	01000084 	movi	r4,2
   20e20:	04c10034 	movhi	r19,1024
   20e24:	1085883a 	add	r2,r2,r2
   20e28:	9cc1f004 	addi	r19,r19,1984
   20e2c:	1085883a 	add	r2,r2,r2
   20e30:	9885883a 	add	r2,r19,r2
   20e34:	14000117 	ldw	r16,4(r2)
   20e38:	10fffe04 	addi	r3,r2,-8
   20e3c:	80c0d926 	beq	r16,r3,211a4 <_malloc_r+0x5d0>
   20e40:	80c00117 	ldw	r3,4(r16)
   20e44:	81000317 	ldw	r4,12(r16)
   20e48:	00bfff04 	movi	r2,-4
   20e4c:	1884703a 	and	r2,r3,r2
   20e50:	81400217 	ldw	r5,8(r16)
   20e54:	8085883a 	add	r2,r16,r2
   20e58:	10c00117 	ldw	r3,4(r2)
   20e5c:	29000315 	stw	r4,12(r5)
   20e60:	21400215 	stw	r5,8(r4)
   20e64:	18c00054 	ori	r3,r3,1
   20e68:	10c00115 	stw	r3,4(r2)
   20e6c:	9009883a 	mov	r4,r18
   20e70:	002dc000 	call	2dc00 <__malloc_unlock>
   20e74:	80800204 	addi	r2,r16,8
   20e78:	dfc00a17 	ldw	ra,40(sp)
   20e7c:	df000917 	ldw	fp,36(sp)
   20e80:	ddc00817 	ldw	r23,32(sp)
   20e84:	dd800717 	ldw	r22,28(sp)
   20e88:	dd400617 	ldw	r21,24(sp)
   20e8c:	dd000517 	ldw	r20,20(sp)
   20e90:	dcc00417 	ldw	r19,16(sp)
   20e94:	dc800317 	ldw	r18,12(sp)
   20e98:	dc400217 	ldw	r17,8(sp)
   20e9c:	dc000117 	ldw	r16,4(sp)
   20ea0:	dec00b04 	addi	sp,sp,44
   20ea4:	f800283a 	ret
   20ea8:	00800304 	movi	r2,12
   20eac:	90800015 	stw	r2,0(r18)
   20eb0:	0005883a 	mov	r2,zero
   20eb4:	003ff006 	br	20e78 <__alt_data_end+0xf8020e78>
   20eb8:	01002004 	movi	r4,128
   20ebc:	02001004 	movi	r8,64
   20ec0:	01c00fc4 	movi	r7,63
   20ec4:	003f6106 	br	20c4c <__alt_data_end+0xf8020c4c>
   20ec8:	4009883a 	mov	r4,r8
   20ecc:	003f7506 	br	20ca4 <__alt_data_end+0xf8020ca4>
   20ed0:	81000317 	ldw	r4,12(r16)
   20ed4:	003fde06 	br	20e50 <__alt_data_end+0xf8020e50>
   20ed8:	81c5883a 	add	r2,r16,r7
   20edc:	11400117 	ldw	r5,4(r2)
   20ee0:	9009883a 	mov	r4,r18
   20ee4:	29400054 	ori	r5,r5,1
   20ee8:	11400115 	stw	r5,4(r2)
   20eec:	002dc000 	call	2dc00 <__malloc_unlock>
   20ef0:	80800204 	addi	r2,r16,8
   20ef4:	003fe006 	br	20e78 <__alt_data_end+0xf8020e78>
   20ef8:	9c000217 	ldw	r16,8(r19)
   20efc:	00bfff04 	movi	r2,-4
   20f00:	85800117 	ldw	r22,4(r16)
   20f04:	b0ac703a 	and	r22,r22,r2
   20f08:	b4400336 	bltu	r22,r17,20f18 <_malloc_r+0x344>
   20f0c:	b445c83a 	sub	r2,r22,r17
   20f10:	00c003c4 	movi	r3,15
   20f14:	18805d16 	blt	r3,r2,2108c <_malloc_r+0x4b8>
   20f18:	05c10034 	movhi	r23,1024
   20f1c:	00810034 	movhi	r2,1024
   20f20:	1087e604 	addi	r2,r2,8088
   20f24:	bdc7d304 	addi	r23,r23,8012
   20f28:	15400017 	ldw	r21,0(r2)
   20f2c:	b8c00017 	ldw	r3,0(r23)
   20f30:	00bfffc4 	movi	r2,-1
   20f34:	858d883a 	add	r6,r16,r22
   20f38:	8d6b883a 	add	r21,r17,r21
   20f3c:	1880ea26 	beq	r3,r2,212e8 <_malloc_r+0x714>
   20f40:	ad4403c4 	addi	r21,r21,4111
   20f44:	00bc0004 	movi	r2,-4096
   20f48:	a8aa703a 	and	r21,r21,r2
   20f4c:	a80b883a 	mov	r5,r21
   20f50:	9009883a 	mov	r4,r18
   20f54:	d9800015 	stw	r6,0(sp)
   20f58:	00219200 	call	21920 <_sbrk_r>
   20f5c:	1029883a 	mov	r20,r2
   20f60:	00bfffc4 	movi	r2,-1
   20f64:	d9800017 	ldw	r6,0(sp)
   20f68:	a080e826 	beq	r20,r2,2130c <_malloc_r+0x738>
   20f6c:	a180a636 	bltu	r20,r6,21208 <_malloc_r+0x634>
   20f70:	07010034 	movhi	fp,1024
   20f74:	e707f104 	addi	fp,fp,8132
   20f78:	e0800017 	ldw	r2,0(fp)
   20f7c:	a887883a 	add	r3,r21,r2
   20f80:	e0c00015 	stw	r3,0(fp)
   20f84:	3500e626 	beq	r6,r20,21320 <_malloc_r+0x74c>
   20f88:	b9000017 	ldw	r4,0(r23)
   20f8c:	00bfffc4 	movi	r2,-1
   20f90:	2080ee26 	beq	r4,r2,2134c <_malloc_r+0x778>
   20f94:	a185c83a 	sub	r2,r20,r6
   20f98:	10c5883a 	add	r2,r2,r3
   20f9c:	e0800015 	stw	r2,0(fp)
   20fa0:	a0c001cc 	andi	r3,r20,7
   20fa4:	1800bc26 	beq	r3,zero,21298 <_malloc_r+0x6c4>
   20fa8:	a0e9c83a 	sub	r20,r20,r3
   20fac:	00840204 	movi	r2,4104
   20fb0:	a5000204 	addi	r20,r20,8
   20fb4:	10c7c83a 	sub	r3,r2,r3
   20fb8:	a545883a 	add	r2,r20,r21
   20fbc:	1083ffcc 	andi	r2,r2,4095
   20fc0:	18abc83a 	sub	r21,r3,r2
   20fc4:	a80b883a 	mov	r5,r21
   20fc8:	9009883a 	mov	r4,r18
   20fcc:	00219200 	call	21920 <_sbrk_r>
   20fd0:	00ffffc4 	movi	r3,-1
   20fd4:	10c0e126 	beq	r2,r3,2135c <_malloc_r+0x788>
   20fd8:	1505c83a 	sub	r2,r2,r20
   20fdc:	1545883a 	add	r2,r2,r21
   20fe0:	10800054 	ori	r2,r2,1
   20fe4:	e0c00017 	ldw	r3,0(fp)
   20fe8:	9d000215 	stw	r20,8(r19)
   20fec:	a0800115 	stw	r2,4(r20)
   20ff0:	a8c7883a 	add	r3,r21,r3
   20ff4:	e0c00015 	stw	r3,0(fp)
   20ff8:	84c00e26 	beq	r16,r19,21034 <_malloc_r+0x460>
   20ffc:	018003c4 	movi	r6,15
   21000:	3580a72e 	bgeu	r6,r22,212a0 <_malloc_r+0x6cc>
   21004:	81400117 	ldw	r5,4(r16)
   21008:	013ffe04 	movi	r4,-8
   2100c:	b0bffd04 	addi	r2,r22,-12
   21010:	1104703a 	and	r2,r2,r4
   21014:	2900004c 	andi	r4,r5,1
   21018:	2088b03a 	or	r4,r4,r2
   2101c:	81000115 	stw	r4,4(r16)
   21020:	01400144 	movi	r5,5
   21024:	8089883a 	add	r4,r16,r2
   21028:	21400115 	stw	r5,4(r4)
   2102c:	21400215 	stw	r5,8(r4)
   21030:	3080cd36 	bltu	r6,r2,21368 <_malloc_r+0x794>
   21034:	00810034 	movhi	r2,1024
   21038:	1087e504 	addi	r2,r2,8084
   2103c:	11000017 	ldw	r4,0(r2)
   21040:	20c0012e 	bgeu	r4,r3,21048 <_malloc_r+0x474>
   21044:	10c00015 	stw	r3,0(r2)
   21048:	00810034 	movhi	r2,1024
   2104c:	1087e404 	addi	r2,r2,8080
   21050:	11000017 	ldw	r4,0(r2)
   21054:	9c000217 	ldw	r16,8(r19)
   21058:	20c0012e 	bgeu	r4,r3,21060 <_malloc_r+0x48c>
   2105c:	10c00015 	stw	r3,0(r2)
   21060:	80c00117 	ldw	r3,4(r16)
   21064:	00bfff04 	movi	r2,-4
   21068:	1886703a 	and	r3,r3,r2
   2106c:	1c45c83a 	sub	r2,r3,r17
   21070:	1c400236 	bltu	r3,r17,2107c <_malloc_r+0x4a8>
   21074:	00c003c4 	movi	r3,15
   21078:	18800416 	blt	r3,r2,2108c <_malloc_r+0x4b8>
   2107c:	9009883a 	mov	r4,r18
   21080:	002dc000 	call	2dc00 <__malloc_unlock>
   21084:	0005883a 	mov	r2,zero
   21088:	003f7b06 	br	20e78 <__alt_data_end+0xf8020e78>
   2108c:	88c00054 	ori	r3,r17,1
   21090:	80c00115 	stw	r3,4(r16)
   21094:	8463883a 	add	r17,r16,r17
   21098:	10800054 	ori	r2,r2,1
   2109c:	9c400215 	stw	r17,8(r19)
   210a0:	88800115 	stw	r2,4(r17)
   210a4:	9009883a 	mov	r4,r18
   210a8:	002dc000 	call	2dc00 <__malloc_unlock>
   210ac:	80800204 	addi	r2,r16,8
   210b0:	003f7106 	br	20e78 <__alt_data_end+0xf8020e78>
   210b4:	00c00504 	movi	r3,20
   210b8:	18804a2e 	bgeu	r3,r2,211e4 <_malloc_r+0x610>
   210bc:	00c01504 	movi	r3,84
   210c0:	18806e36 	bltu	r3,r2,2127c <_malloc_r+0x6a8>
   210c4:	8804d33a 	srli	r2,r17,12
   210c8:	12001bc4 	addi	r8,r2,111
   210cc:	11c01b84 	addi	r7,r2,110
   210d0:	4209883a 	add	r4,r8,r8
   210d4:	003edd06 	br	20c4c <__alt_data_end+0xf8020c4c>
   210d8:	3804d27a 	srli	r2,r7,9
   210dc:	00c00104 	movi	r3,4
   210e0:	1880442e 	bgeu	r3,r2,211f4 <_malloc_r+0x620>
   210e4:	00c00504 	movi	r3,20
   210e8:	18808136 	bltu	r3,r2,212f0 <_malloc_r+0x71c>
   210ec:	11401704 	addi	r5,r2,92
   210f0:	10c016c4 	addi	r3,r2,91
   210f4:	294b883a 	add	r5,r5,r5
   210f8:	294b883a 	add	r5,r5,r5
   210fc:	294b883a 	add	r5,r5,r5
   21100:	994b883a 	add	r5,r19,r5
   21104:	28800017 	ldw	r2,0(r5)
   21108:	01810034 	movhi	r6,1024
   2110c:	297ffe04 	addi	r5,r5,-8
   21110:	3181f004 	addi	r6,r6,1984
   21114:	28806526 	beq	r5,r2,212ac <_malloc_r+0x6d8>
   21118:	01bfff04 	movi	r6,-4
   2111c:	10c00117 	ldw	r3,4(r2)
   21120:	1986703a 	and	r3,r3,r6
   21124:	38c0022e 	bgeu	r7,r3,21130 <_malloc_r+0x55c>
   21128:	10800217 	ldw	r2,8(r2)
   2112c:	28bffb1e 	bne	r5,r2,2111c <__alt_data_end+0xf802111c>
   21130:	11400317 	ldw	r5,12(r2)
   21134:	98c00117 	ldw	r3,4(r19)
   21138:	81400315 	stw	r5,12(r16)
   2113c:	80800215 	stw	r2,8(r16)
   21140:	2c000215 	stw	r16,8(r5)
   21144:	14000315 	stw	r16,12(r2)
   21148:	003ef806 	br	20d2c <__alt_data_end+0xf8020d2c>
   2114c:	88c00054 	ori	r3,r17,1
   21150:	80c00115 	stw	r3,4(r16)
   21154:	8463883a 	add	r17,r16,r17
   21158:	34400515 	stw	r17,20(r6)
   2115c:	34400415 	stw	r17,16(r6)
   21160:	10c00054 	ori	r3,r2,1
   21164:	8a000315 	stw	r8,12(r17)
   21168:	8a000215 	stw	r8,8(r17)
   2116c:	88c00115 	stw	r3,4(r17)
   21170:	88a3883a 	add	r17,r17,r2
   21174:	88800015 	stw	r2,0(r17)
   21178:	9009883a 	mov	r4,r18
   2117c:	002dc000 	call	2dc00 <__malloc_unlock>
   21180:	80800204 	addi	r2,r16,8
   21184:	003f3c06 	br	20e78 <__alt_data_end+0xf8020e78>
   21188:	30c00117 	ldw	r3,4(r6)
   2118c:	003ee706 	br	20d2c <__alt_data_end+0xf8020d2c>
   21190:	5ac00044 	addi	r11,r11,1
   21194:	588000cc 	andi	r2,r11,3
   21198:	31800204 	addi	r6,r6,8
   2119c:	103efd1e 	bne	r2,zero,20d94 <__alt_data_end+0xf8020d94>
   211a0:	00002406 	br	21234 <_malloc_r+0x660>
   211a4:	14000317 	ldw	r16,12(r2)
   211a8:	143f251e 	bne	r2,r16,20e40 <__alt_data_end+0xf8020e40>
   211ac:	21000084 	addi	r4,r4,2
   211b0:	003ebc06 	br	20ca4 <__alt_data_end+0xf8020ca4>
   211b4:	8085883a 	add	r2,r16,r2
   211b8:	10c00117 	ldw	r3,4(r2)
   211bc:	81000317 	ldw	r4,12(r16)
   211c0:	81400217 	ldw	r5,8(r16)
   211c4:	18c00054 	ori	r3,r3,1
   211c8:	10c00115 	stw	r3,4(r2)
   211cc:	29000315 	stw	r4,12(r5)
   211d0:	21400215 	stw	r5,8(r4)
   211d4:	9009883a 	mov	r4,r18
   211d8:	002dc000 	call	2dc00 <__malloc_unlock>
   211dc:	80800204 	addi	r2,r16,8
   211e0:	003f2506 	br	20e78 <__alt_data_end+0xf8020e78>
   211e4:	12001704 	addi	r8,r2,92
   211e8:	11c016c4 	addi	r7,r2,91
   211ec:	4209883a 	add	r4,r8,r8
   211f0:	003e9606 	br	20c4c <__alt_data_end+0xf8020c4c>
   211f4:	3804d1ba 	srli	r2,r7,6
   211f8:	11400e44 	addi	r5,r2,57
   211fc:	10c00e04 	addi	r3,r2,56
   21200:	294b883a 	add	r5,r5,r5
   21204:	003fbc06 	br	210f8 <__alt_data_end+0xf80210f8>
   21208:	84ff5926 	beq	r16,r19,20f70 <__alt_data_end+0xf8020f70>
   2120c:	00810034 	movhi	r2,1024
   21210:	1081f004 	addi	r2,r2,1984
   21214:	14000217 	ldw	r16,8(r2)
   21218:	00bfff04 	movi	r2,-4
   2121c:	80c00117 	ldw	r3,4(r16)
   21220:	1886703a 	and	r3,r3,r2
   21224:	003f9106 	br	2106c <__alt_data_end+0xf802106c>
   21228:	60800217 	ldw	r2,8(r12)
   2122c:	213fffc4 	addi	r4,r4,-1
   21230:	1300651e 	bne	r2,r12,213c8 <_malloc_r+0x7f4>
   21234:	208000cc 	andi	r2,r4,3
   21238:	633ffe04 	addi	r12,r12,-8
   2123c:	103ffa1e 	bne	r2,zero,21228 <__alt_data_end+0xf8021228>
   21240:	98800117 	ldw	r2,4(r19)
   21244:	0146303a 	nor	r3,zero,r5
   21248:	1884703a 	and	r2,r3,r2
   2124c:	98800115 	stw	r2,4(r19)
   21250:	294b883a 	add	r5,r5,r5
   21254:	117f2836 	bltu	r2,r5,20ef8 <__alt_data_end+0xf8020ef8>
   21258:	283f2726 	beq	r5,zero,20ef8 <__alt_data_end+0xf8020ef8>
   2125c:	2886703a 	and	r3,r5,r2
   21260:	5809883a 	mov	r4,r11
   21264:	183ec31e 	bne	r3,zero,20d74 <__alt_data_end+0xf8020d74>
   21268:	294b883a 	add	r5,r5,r5
   2126c:	2886703a 	and	r3,r5,r2
   21270:	21000104 	addi	r4,r4,4
   21274:	183ffc26 	beq	r3,zero,21268 <__alt_data_end+0xf8021268>
   21278:	003ebe06 	br	20d74 <__alt_data_end+0xf8020d74>
   2127c:	00c05504 	movi	r3,340
   21280:	18801236 	bltu	r3,r2,212cc <_malloc_r+0x6f8>
   21284:	8804d3fa 	srli	r2,r17,15
   21288:	12001e04 	addi	r8,r2,120
   2128c:	11c01dc4 	addi	r7,r2,119
   21290:	4209883a 	add	r4,r8,r8
   21294:	003e6d06 	br	20c4c <__alt_data_end+0xf8020c4c>
   21298:	00c40004 	movi	r3,4096
   2129c:	003f4606 	br	20fb8 <__alt_data_end+0xf8020fb8>
   212a0:	00800044 	movi	r2,1
   212a4:	a0800115 	stw	r2,4(r20)
   212a8:	003f7406 	br	2107c <__alt_data_end+0xf802107c>
   212ac:	1805d0ba 	srai	r2,r3,2
   212b0:	01c00044 	movi	r7,1
   212b4:	30c00117 	ldw	r3,4(r6)
   212b8:	388e983a 	sll	r7,r7,r2
   212bc:	2805883a 	mov	r2,r5
   212c0:	38c6b03a 	or	r3,r7,r3
   212c4:	30c00115 	stw	r3,4(r6)
   212c8:	003f9b06 	br	21138 <__alt_data_end+0xf8021138>
   212cc:	00c15504 	movi	r3,1364
   212d0:	18801a36 	bltu	r3,r2,2133c <_malloc_r+0x768>
   212d4:	8804d4ba 	srli	r2,r17,18
   212d8:	12001f44 	addi	r8,r2,125
   212dc:	11c01f04 	addi	r7,r2,124
   212e0:	4209883a 	add	r4,r8,r8
   212e4:	003e5906 	br	20c4c <__alt_data_end+0xf8020c4c>
   212e8:	ad400404 	addi	r21,r21,16
   212ec:	003f1706 	br	20f4c <__alt_data_end+0xf8020f4c>
   212f0:	00c01504 	movi	r3,84
   212f4:	18802336 	bltu	r3,r2,21384 <_malloc_r+0x7b0>
   212f8:	3804d33a 	srli	r2,r7,12
   212fc:	11401bc4 	addi	r5,r2,111
   21300:	10c01b84 	addi	r3,r2,110
   21304:	294b883a 	add	r5,r5,r5
   21308:	003f7b06 	br	210f8 <__alt_data_end+0xf80210f8>
   2130c:	9c000217 	ldw	r16,8(r19)
   21310:	00bfff04 	movi	r2,-4
   21314:	80c00117 	ldw	r3,4(r16)
   21318:	1886703a 	and	r3,r3,r2
   2131c:	003f5306 	br	2106c <__alt_data_end+0xf802106c>
   21320:	3083ffcc 	andi	r2,r6,4095
   21324:	103f181e 	bne	r2,zero,20f88 <__alt_data_end+0xf8020f88>
   21328:	99000217 	ldw	r4,8(r19)
   2132c:	b545883a 	add	r2,r22,r21
   21330:	10800054 	ori	r2,r2,1
   21334:	20800115 	stw	r2,4(r4)
   21338:	003f3e06 	br	21034 <__alt_data_end+0xf8021034>
   2133c:	01003f84 	movi	r4,254
   21340:	02001fc4 	movi	r8,127
   21344:	01c01f84 	movi	r7,126
   21348:	003e4006 	br	20c4c <__alt_data_end+0xf8020c4c>
   2134c:	00810034 	movhi	r2,1024
   21350:	1087d304 	addi	r2,r2,8012
   21354:	15000015 	stw	r20,0(r2)
   21358:	003f1106 	br	20fa0 <__alt_data_end+0xf8020fa0>
   2135c:	00800044 	movi	r2,1
   21360:	002b883a 	mov	r21,zero
   21364:	003f1f06 	br	20fe4 <__alt_data_end+0xf8020fe4>
   21368:	81400204 	addi	r5,r16,8
   2136c:	9009883a 	mov	r4,r18
   21370:	00260c00 	call	260c0 <_free_r>
   21374:	00810034 	movhi	r2,1024
   21378:	1087f104 	addi	r2,r2,8132
   2137c:	10c00017 	ldw	r3,0(r2)
   21380:	003f2c06 	br	21034 <__alt_data_end+0xf8021034>
   21384:	00c05504 	movi	r3,340
   21388:	18800536 	bltu	r3,r2,213a0 <_malloc_r+0x7cc>
   2138c:	3804d3fa 	srli	r2,r7,15
   21390:	11401e04 	addi	r5,r2,120
   21394:	10c01dc4 	addi	r3,r2,119
   21398:	294b883a 	add	r5,r5,r5
   2139c:	003f5606 	br	210f8 <__alt_data_end+0xf80210f8>
   213a0:	00c15504 	movi	r3,1364
   213a4:	18800536 	bltu	r3,r2,213bc <_malloc_r+0x7e8>
   213a8:	3804d4ba 	srli	r2,r7,18
   213ac:	11401f44 	addi	r5,r2,125
   213b0:	10c01f04 	addi	r3,r2,124
   213b4:	294b883a 	add	r5,r5,r5
   213b8:	003f4f06 	br	210f8 <__alt_data_end+0xf80210f8>
   213bc:	01403f84 	movi	r5,254
   213c0:	00c01f84 	movi	r3,126
   213c4:	003f4c06 	br	210f8 <__alt_data_end+0xf80210f8>
   213c8:	98800117 	ldw	r2,4(r19)
   213cc:	003fa006 	br	21250 <__alt_data_end+0xf8021250>
   213d0:	8808d0fa 	srli	r4,r17,3
   213d4:	20800044 	addi	r2,r4,1
   213d8:	1085883a 	add	r2,r2,r2
   213dc:	003e9006 	br	20e20 <__alt_data_end+0xf8020e20>

000213e0 <memset>:
   213e0:	20c000cc 	andi	r3,r4,3
   213e4:	2005883a 	mov	r2,r4
   213e8:	18004426 	beq	r3,zero,214fc <memset+0x11c>
   213ec:	31ffffc4 	addi	r7,r6,-1
   213f0:	30004026 	beq	r6,zero,214f4 <memset+0x114>
   213f4:	2813883a 	mov	r9,r5
   213f8:	200d883a 	mov	r6,r4
   213fc:	2007883a 	mov	r3,r4
   21400:	00000406 	br	21414 <memset+0x34>
   21404:	3a3fffc4 	addi	r8,r7,-1
   21408:	31800044 	addi	r6,r6,1
   2140c:	38003926 	beq	r7,zero,214f4 <memset+0x114>
   21410:	400f883a 	mov	r7,r8
   21414:	18c00044 	addi	r3,r3,1
   21418:	32400005 	stb	r9,0(r6)
   2141c:	1a0000cc 	andi	r8,r3,3
   21420:	403ff81e 	bne	r8,zero,21404 <__alt_data_end+0xf8021404>
   21424:	010000c4 	movi	r4,3
   21428:	21c02d2e 	bgeu	r4,r7,214e0 <memset+0x100>
   2142c:	29003fcc 	andi	r4,r5,255
   21430:	200c923a 	slli	r6,r4,8
   21434:	3108b03a 	or	r4,r6,r4
   21438:	200c943a 	slli	r6,r4,16
   2143c:	218cb03a 	or	r6,r4,r6
   21440:	010003c4 	movi	r4,15
   21444:	21c0182e 	bgeu	r4,r7,214a8 <memset+0xc8>
   21448:	3b3ffc04 	addi	r12,r7,-16
   2144c:	6018d13a 	srli	r12,r12,4
   21450:	1a000104 	addi	r8,r3,4
   21454:	1ac00204 	addi	r11,r3,8
   21458:	6008913a 	slli	r4,r12,4
   2145c:	1a800304 	addi	r10,r3,12
   21460:	1813883a 	mov	r9,r3
   21464:	21000504 	addi	r4,r4,20
   21468:	1909883a 	add	r4,r3,r4
   2146c:	49800015 	stw	r6,0(r9)
   21470:	41800015 	stw	r6,0(r8)
   21474:	59800015 	stw	r6,0(r11)
   21478:	51800015 	stw	r6,0(r10)
   2147c:	42000404 	addi	r8,r8,16
   21480:	4a400404 	addi	r9,r9,16
   21484:	5ac00404 	addi	r11,r11,16
   21488:	52800404 	addi	r10,r10,16
   2148c:	413ff71e 	bne	r8,r4,2146c <__alt_data_end+0xf802146c>
   21490:	63000044 	addi	r12,r12,1
   21494:	6018913a 	slli	r12,r12,4
   21498:	39c003cc 	andi	r7,r7,15
   2149c:	010000c4 	movi	r4,3
   214a0:	1b07883a 	add	r3,r3,r12
   214a4:	21c00e2e 	bgeu	r4,r7,214e0 <memset+0x100>
   214a8:	1813883a 	mov	r9,r3
   214ac:	3811883a 	mov	r8,r7
   214b0:	010000c4 	movi	r4,3
   214b4:	49800015 	stw	r6,0(r9)
   214b8:	423fff04 	addi	r8,r8,-4
   214bc:	4a400104 	addi	r9,r9,4
   214c0:	223ffc36 	bltu	r4,r8,214b4 <__alt_data_end+0xf80214b4>
   214c4:	393fff04 	addi	r4,r7,-4
   214c8:	2008d0ba 	srli	r4,r4,2
   214cc:	39c000cc 	andi	r7,r7,3
   214d0:	21000044 	addi	r4,r4,1
   214d4:	2109883a 	add	r4,r4,r4
   214d8:	2109883a 	add	r4,r4,r4
   214dc:	1907883a 	add	r3,r3,r4
   214e0:	38000526 	beq	r7,zero,214f8 <memset+0x118>
   214e4:	19cf883a 	add	r7,r3,r7
   214e8:	19400005 	stb	r5,0(r3)
   214ec:	18c00044 	addi	r3,r3,1
   214f0:	38fffd1e 	bne	r7,r3,214e8 <__alt_data_end+0xf80214e8>
   214f4:	f800283a 	ret
   214f8:	f800283a 	ret
   214fc:	2007883a 	mov	r3,r4
   21500:	300f883a 	mov	r7,r6
   21504:	003fc706 	br	21424 <__alt_data_end+0xf8021424>

00021508 <_open_r>:
   21508:	defffd04 	addi	sp,sp,-12
   2150c:	2805883a 	mov	r2,r5
   21510:	dc000015 	stw	r16,0(sp)
   21514:	04010034 	movhi	r16,1024
   21518:	dc400115 	stw	r17,4(sp)
   2151c:	300b883a 	mov	r5,r6
   21520:	8407e304 	addi	r16,r16,8076
   21524:	2023883a 	mov	r17,r4
   21528:	380d883a 	mov	r6,r7
   2152c:	1009883a 	mov	r4,r2
   21530:	dfc00215 	stw	ra,8(sp)
   21534:	80000015 	stw	zero,0(r16)
   21538:	002dd240 	call	2dd24 <open>
   2153c:	00ffffc4 	movi	r3,-1
   21540:	10c00526 	beq	r2,r3,21558 <_open_r+0x50>
   21544:	dfc00217 	ldw	ra,8(sp)
   21548:	dc400117 	ldw	r17,4(sp)
   2154c:	dc000017 	ldw	r16,0(sp)
   21550:	dec00304 	addi	sp,sp,12
   21554:	f800283a 	ret
   21558:	80c00017 	ldw	r3,0(r16)
   2155c:	183ff926 	beq	r3,zero,21544 <__alt_data_end+0xf8021544>
   21560:	88c00015 	stw	r3,0(r17)
   21564:	003ff706 	br	21544 <__alt_data_end+0xf8021544>

00021568 <_printf_r>:
   21568:	defffd04 	addi	sp,sp,-12
   2156c:	2805883a 	mov	r2,r5
   21570:	dfc00015 	stw	ra,0(sp)
   21574:	d9800115 	stw	r6,4(sp)
   21578:	d9c00215 	stw	r7,8(sp)
   2157c:	21400217 	ldw	r5,8(r4)
   21580:	d9c00104 	addi	r7,sp,4
   21584:	100d883a 	mov	r6,r2
   21588:	0021b480 	call	21b48 <___vfprintf_internal_r>
   2158c:	dfc00017 	ldw	ra,0(sp)
   21590:	dec00304 	addi	sp,sp,12
   21594:	f800283a 	ret

00021598 <printf>:
   21598:	defffc04 	addi	sp,sp,-16
   2159c:	dfc00015 	stw	ra,0(sp)
   215a0:	d9400115 	stw	r5,4(sp)
   215a4:	d9800215 	stw	r6,8(sp)
   215a8:	d9c00315 	stw	r7,12(sp)
   215ac:	00810034 	movhi	r2,1024
   215b0:	1087d204 	addi	r2,r2,8008
   215b4:	10800017 	ldw	r2,0(r2)
   215b8:	200b883a 	mov	r5,r4
   215bc:	d9800104 	addi	r6,sp,4
   215c0:	11000217 	ldw	r4,8(r2)
   215c4:	0023d400 	call	23d40 <__vfprintf_internal>
   215c8:	dfc00017 	ldw	ra,0(sp)
   215cc:	dec00404 	addi	sp,sp,16
   215d0:	f800283a 	ret

000215d4 <_puts_r>:
   215d4:	defff604 	addi	sp,sp,-40
   215d8:	dc000715 	stw	r16,28(sp)
   215dc:	2021883a 	mov	r16,r4
   215e0:	2809883a 	mov	r4,r5
   215e4:	dc400815 	stw	r17,32(sp)
   215e8:	dfc00915 	stw	ra,36(sp)
   215ec:	2823883a 	mov	r17,r5
   215f0:	0021ab00 	call	21ab0 <strlen>
   215f4:	10c00044 	addi	r3,r2,1
   215f8:	d8800115 	stw	r2,4(sp)
   215fc:	00810034 	movhi	r2,1024
   21600:	10801c04 	addi	r2,r2,112
   21604:	d8800215 	stw	r2,8(sp)
   21608:	00800044 	movi	r2,1
   2160c:	d8800315 	stw	r2,12(sp)
   21610:	00800084 	movi	r2,2
   21614:	dc400015 	stw	r17,0(sp)
   21618:	d8c00615 	stw	r3,24(sp)
   2161c:	dec00415 	stw	sp,16(sp)
   21620:	d8800515 	stw	r2,20(sp)
   21624:	80000226 	beq	r16,zero,21630 <_puts_r+0x5c>
   21628:	80800e17 	ldw	r2,56(r16)
   2162c:	10001426 	beq	r2,zero,21680 <_puts_r+0xac>
   21630:	81400217 	ldw	r5,8(r16)
   21634:	2880030b 	ldhu	r2,12(r5)
   21638:	10c8000c 	andi	r3,r2,8192
   2163c:	1800061e 	bne	r3,zero,21658 <_puts_r+0x84>
   21640:	29001917 	ldw	r4,100(r5)
   21644:	00f7ffc4 	movi	r3,-8193
   21648:	10880014 	ori	r2,r2,8192
   2164c:	20c6703a 	and	r3,r4,r3
   21650:	2880030d 	sth	r2,12(r5)
   21654:	28c01915 	stw	r3,100(r5)
   21658:	d9800404 	addi	r6,sp,16
   2165c:	8009883a 	mov	r4,r16
   21660:	00263d00 	call	263d0 <__sfvwrite_r>
   21664:	1000091e 	bne	r2,zero,2168c <_puts_r+0xb8>
   21668:	00800284 	movi	r2,10
   2166c:	dfc00917 	ldw	ra,36(sp)
   21670:	dc400817 	ldw	r17,32(sp)
   21674:	dc000717 	ldw	r16,28(sp)
   21678:	dec00a04 	addi	sp,sp,40
   2167c:	f800283a 	ret
   21680:	8009883a 	mov	r4,r16
   21684:	0025ea00 	call	25ea0 <__sinit>
   21688:	003fe906 	br	21630 <__alt_data_end+0xf8021630>
   2168c:	00bfffc4 	movi	r2,-1
   21690:	003ff606 	br	2166c <__alt_data_end+0xf802166c>

00021694 <puts>:
   21694:	00810034 	movhi	r2,1024
   21698:	1087d204 	addi	r2,r2,8008
   2169c:	200b883a 	mov	r5,r4
   216a0:	11000017 	ldw	r4,0(r2)
   216a4:	00215d41 	jmpi	215d4 <_puts_r>

000216a8 <lflush>:
   216a8:	2080030b 	ldhu	r2,12(r4)
   216ac:	00c00244 	movi	r3,9
   216b0:	1080024c 	andi	r2,r2,9
   216b4:	10c00226 	beq	r2,r3,216c0 <lflush+0x18>
   216b8:	0005883a 	mov	r2,zero
   216bc:	f800283a 	ret
   216c0:	0025b201 	jmpi	25b20 <fflush>

000216c4 <__srefill_r>:
   216c4:	defffc04 	addi	sp,sp,-16
   216c8:	dc400115 	stw	r17,4(sp)
   216cc:	dc000015 	stw	r16,0(sp)
   216d0:	dfc00315 	stw	ra,12(sp)
   216d4:	dc800215 	stw	r18,8(sp)
   216d8:	2023883a 	mov	r17,r4
   216dc:	2821883a 	mov	r16,r5
   216e0:	20000226 	beq	r4,zero,216ec <__srefill_r+0x28>
   216e4:	20800e17 	ldw	r2,56(r4)
   216e8:	10003c26 	beq	r2,zero,217dc <__srefill_r+0x118>
   216ec:	80c0030b 	ldhu	r3,12(r16)
   216f0:	1908000c 	andi	r4,r3,8192
   216f4:	1805883a 	mov	r2,r3
   216f8:	2000071e 	bne	r4,zero,21718 <__srefill_r+0x54>
   216fc:	81001917 	ldw	r4,100(r16)
   21700:	18880014 	ori	r2,r3,8192
   21704:	00f7ffc4 	movi	r3,-8193
   21708:	20c8703a 	and	r4,r4,r3
   2170c:	8080030d 	sth	r2,12(r16)
   21710:	1007883a 	mov	r3,r2
   21714:	81001915 	stw	r4,100(r16)
   21718:	80000115 	stw	zero,4(r16)
   2171c:	1100080c 	andi	r4,r2,32
   21720:	2000571e 	bne	r4,zero,21880 <__srefill_r+0x1bc>
   21724:	1100010c 	andi	r4,r2,4
   21728:	20001f26 	beq	r4,zero,217a8 <__srefill_r+0xe4>
   2172c:	81400c17 	ldw	r5,48(r16)
   21730:	28000826 	beq	r5,zero,21754 <__srefill_r+0x90>
   21734:	80801004 	addi	r2,r16,64
   21738:	28800226 	beq	r5,r2,21744 <__srefill_r+0x80>
   2173c:	8809883a 	mov	r4,r17
   21740:	00260c00 	call	260c0 <_free_r>
   21744:	80800f17 	ldw	r2,60(r16)
   21748:	80000c15 	stw	zero,48(r16)
   2174c:	80800115 	stw	r2,4(r16)
   21750:	1000391e 	bne	r2,zero,21838 <__srefill_r+0x174>
   21754:	80800417 	ldw	r2,16(r16)
   21758:	10004b26 	beq	r2,zero,21888 <__srefill_r+0x1c4>
   2175c:	8480030b 	ldhu	r18,12(r16)
   21760:	908000cc 	andi	r2,r18,3
   21764:	10001f1e 	bne	r2,zero,217e4 <__srefill_r+0x120>
   21768:	81800417 	ldw	r6,16(r16)
   2176c:	80800817 	ldw	r2,32(r16)
   21770:	81c00517 	ldw	r7,20(r16)
   21774:	81400717 	ldw	r5,28(r16)
   21778:	81800015 	stw	r6,0(r16)
   2177c:	8809883a 	mov	r4,r17
   21780:	103ee83a 	callr	r2
   21784:	80800115 	stw	r2,4(r16)
   21788:	00800e0e 	bge	zero,r2,217c4 <__srefill_r+0x100>
   2178c:	0005883a 	mov	r2,zero
   21790:	dfc00317 	ldw	ra,12(sp)
   21794:	dc800217 	ldw	r18,8(sp)
   21798:	dc400117 	ldw	r17,4(sp)
   2179c:	dc000017 	ldw	r16,0(sp)
   217a0:	dec00404 	addi	sp,sp,16
   217a4:	f800283a 	ret
   217a8:	1100040c 	andi	r4,r2,16
   217ac:	20003026 	beq	r4,zero,21870 <__srefill_r+0x1ac>
   217b0:	1080020c 	andi	r2,r2,8
   217b4:	1000241e 	bne	r2,zero,21848 <__srefill_r+0x184>
   217b8:	18c00114 	ori	r3,r3,4
   217bc:	80c0030d 	sth	r3,12(r16)
   217c0:	003fe406 	br	21754 <__alt_data_end+0xf8021754>
   217c4:	80c0030b 	ldhu	r3,12(r16)
   217c8:	1000161e 	bne	r2,zero,21824 <__srefill_r+0x160>
   217cc:	18c00814 	ori	r3,r3,32
   217d0:	00bfffc4 	movi	r2,-1
   217d4:	80c0030d 	sth	r3,12(r16)
   217d8:	003fed06 	br	21790 <__alt_data_end+0xf8021790>
   217dc:	0025ea00 	call	25ea0 <__sinit>
   217e0:	003fc206 	br	216ec <__alt_data_end+0xf80216ec>
   217e4:	00810034 	movhi	r2,1024
   217e8:	1087d104 	addi	r2,r2,8004
   217ec:	11000017 	ldw	r4,0(r2)
   217f0:	014000b4 	movhi	r5,2
   217f4:	00800044 	movi	r2,1
   217f8:	2945aa04 	addi	r5,r5,5800
   217fc:	8080030d 	sth	r2,12(r16)
   21800:	002688c0 	call	2688c <_fwalk>
   21804:	00800244 	movi	r2,9
   21808:	8480030d 	sth	r18,12(r16)
   2180c:	9480024c 	andi	r18,r18,9
   21810:	90bfd51e 	bne	r18,r2,21768 <__alt_data_end+0xf8021768>
   21814:	800b883a 	mov	r5,r16
   21818:	8809883a 	mov	r4,r17
   2181c:	00258a80 	call	258a8 <__sflush_r>
   21820:	003fd106 	br	21768 <__alt_data_end+0xf8021768>
   21824:	18c01014 	ori	r3,r3,64
   21828:	80000115 	stw	zero,4(r16)
   2182c:	00bfffc4 	movi	r2,-1
   21830:	80c0030d 	sth	r3,12(r16)
   21834:	003fd606 	br	21790 <__alt_data_end+0xf8021790>
   21838:	80c00e17 	ldw	r3,56(r16)
   2183c:	0005883a 	mov	r2,zero
   21840:	80c00015 	stw	r3,0(r16)
   21844:	003fd206 	br	21790 <__alt_data_end+0xf8021790>
   21848:	800b883a 	mov	r5,r16
   2184c:	8809883a 	mov	r4,r17
   21850:	0025ac40 	call	25ac4 <_fflush_r>
   21854:	10000a1e 	bne	r2,zero,21880 <__srefill_r+0x1bc>
   21858:	8080030b 	ldhu	r2,12(r16)
   2185c:	00fffdc4 	movi	r3,-9
   21860:	80000215 	stw	zero,8(r16)
   21864:	1886703a 	and	r3,r3,r2
   21868:	80000615 	stw	zero,24(r16)
   2186c:	003fd206 	br	217b8 <__alt_data_end+0xf80217b8>
   21870:	00800244 	movi	r2,9
   21874:	88800015 	stw	r2,0(r17)
   21878:	18c01014 	ori	r3,r3,64
   2187c:	80c0030d 	sth	r3,12(r16)
   21880:	00bfffc4 	movi	r2,-1
   21884:	003fc206 	br	21790 <__alt_data_end+0xf8021790>
   21888:	800b883a 	mov	r5,r16
   2188c:	8809883a 	mov	r4,r17
   21890:	0020a180 	call	20a18 <__smakebuf_r>
   21894:	003fb106 	br	2175c <__alt_data_end+0xf802175c>

00021898 <__srget_r>:
   21898:	defffd04 	addi	sp,sp,-12
   2189c:	dc400115 	stw	r17,4(sp)
   218a0:	dc000015 	stw	r16,0(sp)
   218a4:	dfc00215 	stw	ra,8(sp)
   218a8:	2023883a 	mov	r17,r4
   218ac:	2821883a 	mov	r16,r5
   218b0:	20000226 	beq	r4,zero,218bc <__srget_r+0x24>
   218b4:	20800e17 	ldw	r2,56(r4)
   218b8:	10001026 	beq	r2,zero,218fc <__srget_r+0x64>
   218bc:	800b883a 	mov	r5,r16
   218c0:	8809883a 	mov	r4,r17
   218c4:	00216c40 	call	216c4 <__srefill_r>
   218c8:	10000e1e 	bne	r2,zero,21904 <__srget_r+0x6c>
   218cc:	80c00017 	ldw	r3,0(r16)
   218d0:	80800117 	ldw	r2,4(r16)
   218d4:	19000044 	addi	r4,r3,1
   218d8:	10bfffc4 	addi	r2,r2,-1
   218dc:	80800115 	stw	r2,4(r16)
   218e0:	81000015 	stw	r4,0(r16)
   218e4:	18800003 	ldbu	r2,0(r3)
   218e8:	dfc00217 	ldw	ra,8(sp)
   218ec:	dc400117 	ldw	r17,4(sp)
   218f0:	dc000017 	ldw	r16,0(sp)
   218f4:	dec00304 	addi	sp,sp,12
   218f8:	f800283a 	ret
   218fc:	0025ea00 	call	25ea0 <__sinit>
   21900:	003fee06 	br	218bc <__alt_data_end+0xf80218bc>
   21904:	00bfffc4 	movi	r2,-1
   21908:	003ff706 	br	218e8 <__alt_data_end+0xf80218e8>

0002190c <__srget>:
   2190c:	00810034 	movhi	r2,1024
   21910:	1087d204 	addi	r2,r2,8008
   21914:	200b883a 	mov	r5,r4
   21918:	11000017 	ldw	r4,0(r2)
   2191c:	00218981 	jmpi	21898 <__srget_r>

00021920 <_sbrk_r>:
   21920:	defffd04 	addi	sp,sp,-12
   21924:	dc000015 	stw	r16,0(sp)
   21928:	04010034 	movhi	r16,1024
   2192c:	dc400115 	stw	r17,4(sp)
   21930:	8407e304 	addi	r16,r16,8076
   21934:	2023883a 	mov	r17,r4
   21938:	2809883a 	mov	r4,r5
   2193c:	dfc00215 	stw	ra,8(sp)
   21940:	80000015 	stw	zero,0(r16)
   21944:	002e0140 	call	2e014 <sbrk>
   21948:	00ffffc4 	movi	r3,-1
   2194c:	10c00526 	beq	r2,r3,21964 <_sbrk_r+0x44>
   21950:	dfc00217 	ldw	ra,8(sp)
   21954:	dc400117 	ldw	r17,4(sp)
   21958:	dc000017 	ldw	r16,0(sp)
   2195c:	dec00304 	addi	sp,sp,12
   21960:	f800283a 	ret
   21964:	80c00017 	ldw	r3,0(r16)
   21968:	183ff926 	beq	r3,zero,21950 <__alt_data_end+0xf8021950>
   2196c:	88c00015 	stw	r3,0(r17)
   21970:	003ff706 	br	21950 <__alt_data_end+0xf8021950>

00021974 <__sread>:
   21974:	defffe04 	addi	sp,sp,-8
   21978:	dc000015 	stw	r16,0(sp)
   2197c:	2821883a 	mov	r16,r5
   21980:	2940038f 	ldh	r5,14(r5)
   21984:	dfc00115 	stw	ra,4(sp)
   21988:	0027f280 	call	27f28 <_read_r>
   2198c:	10000716 	blt	r2,zero,219ac <__sread+0x38>
   21990:	80c01417 	ldw	r3,80(r16)
   21994:	1887883a 	add	r3,r3,r2
   21998:	80c01415 	stw	r3,80(r16)
   2199c:	dfc00117 	ldw	ra,4(sp)
   219a0:	dc000017 	ldw	r16,0(sp)
   219a4:	dec00204 	addi	sp,sp,8
   219a8:	f800283a 	ret
   219ac:	80c0030b 	ldhu	r3,12(r16)
   219b0:	18fbffcc 	andi	r3,r3,61439
   219b4:	80c0030d 	sth	r3,12(r16)
   219b8:	dfc00117 	ldw	ra,4(sp)
   219bc:	dc000017 	ldw	r16,0(sp)
   219c0:	dec00204 	addi	sp,sp,8
   219c4:	f800283a 	ret

000219c8 <__seofread>:
   219c8:	0005883a 	mov	r2,zero
   219cc:	f800283a 	ret

000219d0 <__swrite>:
   219d0:	2880030b 	ldhu	r2,12(r5)
   219d4:	defffb04 	addi	sp,sp,-20
   219d8:	dcc00315 	stw	r19,12(sp)
   219dc:	dc800215 	stw	r18,8(sp)
   219e0:	dc400115 	stw	r17,4(sp)
   219e4:	dc000015 	stw	r16,0(sp)
   219e8:	dfc00415 	stw	ra,16(sp)
   219ec:	10c0400c 	andi	r3,r2,256
   219f0:	2821883a 	mov	r16,r5
   219f4:	2023883a 	mov	r17,r4
   219f8:	3025883a 	mov	r18,r6
   219fc:	3827883a 	mov	r19,r7
   21a00:	18000526 	beq	r3,zero,21a18 <__swrite+0x48>
   21a04:	2940038f 	ldh	r5,14(r5)
   21a08:	01c00084 	movi	r7,2
   21a0c:	000d883a 	mov	r6,zero
   21a10:	0026b440 	call	26b44 <_lseek_r>
   21a14:	8080030b 	ldhu	r2,12(r16)
   21a18:	8140038f 	ldh	r5,14(r16)
   21a1c:	10bbffcc 	andi	r2,r2,61439
   21a20:	980f883a 	mov	r7,r19
   21a24:	900d883a 	mov	r6,r18
   21a28:	8809883a 	mov	r4,r17
   21a2c:	8080030d 	sth	r2,12(r16)
   21a30:	dfc00417 	ldw	ra,16(sp)
   21a34:	dcc00317 	ldw	r19,12(sp)
   21a38:	dc800217 	ldw	r18,8(sp)
   21a3c:	dc400117 	ldw	r17,4(sp)
   21a40:	dc000017 	ldw	r16,0(sp)
   21a44:	dec00504 	addi	sp,sp,20
   21a48:	0023e181 	jmpi	23e18 <_write_r>

00021a4c <__sseek>:
   21a4c:	defffe04 	addi	sp,sp,-8
   21a50:	dc000015 	stw	r16,0(sp)
   21a54:	2821883a 	mov	r16,r5
   21a58:	2940038f 	ldh	r5,14(r5)
   21a5c:	dfc00115 	stw	ra,4(sp)
   21a60:	0026b440 	call	26b44 <_lseek_r>
   21a64:	00ffffc4 	movi	r3,-1
   21a68:	10c00826 	beq	r2,r3,21a8c <__sseek+0x40>
   21a6c:	80c0030b 	ldhu	r3,12(r16)
   21a70:	80801415 	stw	r2,80(r16)
   21a74:	18c40014 	ori	r3,r3,4096
   21a78:	80c0030d 	sth	r3,12(r16)
   21a7c:	dfc00117 	ldw	ra,4(sp)
   21a80:	dc000017 	ldw	r16,0(sp)
   21a84:	dec00204 	addi	sp,sp,8
   21a88:	f800283a 	ret
   21a8c:	80c0030b 	ldhu	r3,12(r16)
   21a90:	18fbffcc 	andi	r3,r3,61439
   21a94:	80c0030d 	sth	r3,12(r16)
   21a98:	dfc00117 	ldw	ra,4(sp)
   21a9c:	dc000017 	ldw	r16,0(sp)
   21aa0:	dec00204 	addi	sp,sp,8
   21aa4:	f800283a 	ret

00021aa8 <__sclose>:
   21aa8:	2940038f 	ldh	r5,14(r5)
   21aac:	0023fcc1 	jmpi	23fcc <_close_r>

00021ab0 <strlen>:
   21ab0:	208000cc 	andi	r2,r4,3
   21ab4:	10002026 	beq	r2,zero,21b38 <strlen+0x88>
   21ab8:	20800007 	ldb	r2,0(r4)
   21abc:	10002026 	beq	r2,zero,21b40 <strlen+0x90>
   21ac0:	2005883a 	mov	r2,r4
   21ac4:	00000206 	br	21ad0 <strlen+0x20>
   21ac8:	10c00007 	ldb	r3,0(r2)
   21acc:	18001826 	beq	r3,zero,21b30 <strlen+0x80>
   21ad0:	10800044 	addi	r2,r2,1
   21ad4:	10c000cc 	andi	r3,r2,3
   21ad8:	183ffb1e 	bne	r3,zero,21ac8 <__alt_data_end+0xf8021ac8>
   21adc:	10c00017 	ldw	r3,0(r2)
   21ae0:	01ffbff4 	movhi	r7,65279
   21ae4:	39ffbfc4 	addi	r7,r7,-257
   21ae8:	00ca303a 	nor	r5,zero,r3
   21aec:	01a02074 	movhi	r6,32897
   21af0:	19c7883a 	add	r3,r3,r7
   21af4:	31a02004 	addi	r6,r6,-32640
   21af8:	1946703a 	and	r3,r3,r5
   21afc:	1986703a 	and	r3,r3,r6
   21b00:	1800091e 	bne	r3,zero,21b28 <strlen+0x78>
   21b04:	10800104 	addi	r2,r2,4
   21b08:	10c00017 	ldw	r3,0(r2)
   21b0c:	19cb883a 	add	r5,r3,r7
   21b10:	00c6303a 	nor	r3,zero,r3
   21b14:	28c6703a 	and	r3,r5,r3
   21b18:	1986703a 	and	r3,r3,r6
   21b1c:	183ff926 	beq	r3,zero,21b04 <__alt_data_end+0xf8021b04>
   21b20:	00000106 	br	21b28 <strlen+0x78>
   21b24:	10800044 	addi	r2,r2,1
   21b28:	10c00007 	ldb	r3,0(r2)
   21b2c:	183ffd1e 	bne	r3,zero,21b24 <__alt_data_end+0xf8021b24>
   21b30:	1105c83a 	sub	r2,r2,r4
   21b34:	f800283a 	ret
   21b38:	2005883a 	mov	r2,r4
   21b3c:	003fe706 	br	21adc <__alt_data_end+0xf8021adc>
   21b40:	0005883a 	mov	r2,zero
   21b44:	f800283a 	ret

00021b48 <___vfprintf_internal_r>:
   21b48:	deffb804 	addi	sp,sp,-288
   21b4c:	dfc04715 	stw	ra,284(sp)
   21b50:	ddc04515 	stw	r23,276(sp)
   21b54:	dd404315 	stw	r21,268(sp)
   21b58:	d9002c15 	stw	r4,176(sp)
   21b5c:	282f883a 	mov	r23,r5
   21b60:	302b883a 	mov	r21,r6
   21b64:	d9c02d15 	stw	r7,180(sp)
   21b68:	df004615 	stw	fp,280(sp)
   21b6c:	dd804415 	stw	r22,272(sp)
   21b70:	dd004215 	stw	r20,264(sp)
   21b74:	dcc04115 	stw	r19,260(sp)
   21b78:	dc804015 	stw	r18,256(sp)
   21b7c:	dc403f15 	stw	r17,252(sp)
   21b80:	dc003e15 	stw	r16,248(sp)
   21b84:	0026b140 	call	26b14 <_localeconv_r>
   21b88:	10800017 	ldw	r2,0(r2)
   21b8c:	1009883a 	mov	r4,r2
   21b90:	d8803415 	stw	r2,208(sp)
   21b94:	0021ab00 	call	21ab0 <strlen>
   21b98:	d8803715 	stw	r2,220(sp)
   21b9c:	d8802c17 	ldw	r2,176(sp)
   21ba0:	10000226 	beq	r2,zero,21bac <___vfprintf_internal_r+0x64>
   21ba4:	10800e17 	ldw	r2,56(r2)
   21ba8:	1000f926 	beq	r2,zero,21f90 <___vfprintf_internal_r+0x448>
   21bac:	b880030b 	ldhu	r2,12(r23)
   21bb0:	10c8000c 	andi	r3,r2,8192
   21bb4:	1800061e 	bne	r3,zero,21bd0 <___vfprintf_internal_r+0x88>
   21bb8:	b9001917 	ldw	r4,100(r23)
   21bbc:	00f7ffc4 	movi	r3,-8193
   21bc0:	10880014 	ori	r2,r2,8192
   21bc4:	20c6703a 	and	r3,r4,r3
   21bc8:	b880030d 	sth	r2,12(r23)
   21bcc:	b8c01915 	stw	r3,100(r23)
   21bd0:	10c0020c 	andi	r3,r2,8
   21bd4:	1800c126 	beq	r3,zero,21edc <___vfprintf_internal_r+0x394>
   21bd8:	b8c00417 	ldw	r3,16(r23)
   21bdc:	1800bf26 	beq	r3,zero,21edc <___vfprintf_internal_r+0x394>
   21be0:	1080068c 	andi	r2,r2,26
   21be4:	00c00284 	movi	r3,10
   21be8:	10c0c426 	beq	r2,r3,21efc <___vfprintf_internal_r+0x3b4>
   21bec:	d8c00404 	addi	r3,sp,16
   21bf0:	05010034 	movhi	r20,1024
   21bf4:	d9001e04 	addi	r4,sp,120
   21bf8:	a5002d84 	addi	r20,r20,182
   21bfc:	d8c01e15 	stw	r3,120(sp)
   21c00:	d8002015 	stw	zero,128(sp)
   21c04:	d8001f15 	stw	zero,124(sp)
   21c08:	d8003315 	stw	zero,204(sp)
   21c0c:	d8003615 	stw	zero,216(sp)
   21c10:	d8003815 	stw	zero,224(sp)
   21c14:	1811883a 	mov	r8,r3
   21c18:	d8003915 	stw	zero,228(sp)
   21c1c:	d8003a15 	stw	zero,232(sp)
   21c20:	d8002f15 	stw	zero,188(sp)
   21c24:	d9002815 	stw	r4,160(sp)
   21c28:	a8800007 	ldb	r2,0(r21)
   21c2c:	10027b26 	beq	r2,zero,2261c <___vfprintf_internal_r+0xad4>
   21c30:	00c00944 	movi	r3,37
   21c34:	a821883a 	mov	r16,r21
   21c38:	10c0021e 	bne	r2,r3,21c44 <___vfprintf_internal_r+0xfc>
   21c3c:	00001406 	br	21c90 <___vfprintf_internal_r+0x148>
   21c40:	10c00326 	beq	r2,r3,21c50 <___vfprintf_internal_r+0x108>
   21c44:	84000044 	addi	r16,r16,1
   21c48:	80800007 	ldb	r2,0(r16)
   21c4c:	103ffc1e 	bne	r2,zero,21c40 <__alt_data_end+0xf8021c40>
   21c50:	8563c83a 	sub	r17,r16,r21
   21c54:	88000e26 	beq	r17,zero,21c90 <___vfprintf_internal_r+0x148>
   21c58:	d8c02017 	ldw	r3,128(sp)
   21c5c:	d8801f17 	ldw	r2,124(sp)
   21c60:	45400015 	stw	r21,0(r8)
   21c64:	1c47883a 	add	r3,r3,r17
   21c68:	10800044 	addi	r2,r2,1
   21c6c:	d8c02015 	stw	r3,128(sp)
   21c70:	44400115 	stw	r17,4(r8)
   21c74:	d8801f15 	stw	r2,124(sp)
   21c78:	00c001c4 	movi	r3,7
   21c7c:	1880a716 	blt	r3,r2,21f1c <___vfprintf_internal_r+0x3d4>
   21c80:	42000204 	addi	r8,r8,8
   21c84:	d9402f17 	ldw	r5,188(sp)
   21c88:	2c4b883a 	add	r5,r5,r17
   21c8c:	d9402f15 	stw	r5,188(sp)
   21c90:	80800007 	ldb	r2,0(r16)
   21c94:	1000a826 	beq	r2,zero,21f38 <___vfprintf_internal_r+0x3f0>
   21c98:	84400047 	ldb	r17,1(r16)
   21c9c:	00bfffc4 	movi	r2,-1
   21ca0:	85400044 	addi	r21,r16,1
   21ca4:	d8002785 	stb	zero,158(sp)
   21ca8:	0007883a 	mov	r3,zero
   21cac:	000f883a 	mov	r7,zero
   21cb0:	d8802915 	stw	r2,164(sp)
   21cb4:	d8003115 	stw	zero,196(sp)
   21cb8:	0025883a 	mov	r18,zero
   21cbc:	01401604 	movi	r5,88
   21cc0:	01800244 	movi	r6,9
   21cc4:	02800a84 	movi	r10,42
   21cc8:	02401b04 	movi	r9,108
   21ccc:	ad400044 	addi	r21,r21,1
   21cd0:	88bff804 	addi	r2,r17,-32
   21cd4:	28830436 	bltu	r5,r2,228e8 <___vfprintf_internal_r+0xda0>
   21cd8:	100490ba 	slli	r2,r2,2
   21cdc:	010000b4 	movhi	r4,2
   21ce0:	21073c04 	addi	r4,r4,7408
   21ce4:	1105883a 	add	r2,r2,r4
   21ce8:	10800017 	ldw	r2,0(r2)
   21cec:	1000683a 	jmp	r2
   21cf0:	00022808 	cmpgei	zero,zero,2208
   21cf4:	000228e8 	cmpgeui	zero,zero,2211
   21cf8:	000228e8 	cmpgeui	zero,zero,2211
   21cfc:	00022828 	cmpgeui	zero,zero,2208
   21d00:	000228e8 	cmpgeui	zero,zero,2211
   21d04:	000228e8 	cmpgeui	zero,zero,2211
   21d08:	000228e8 	cmpgeui	zero,zero,2211
   21d0c:	000228e8 	cmpgeui	zero,zero,2211
   21d10:	000228e8 	cmpgeui	zero,zero,2211
   21d14:	000228e8 	cmpgeui	zero,zero,2211
   21d18:	00021f9c 	xori	zero,zero,2174
   21d1c:	00022744 	movi	zero,2205
   21d20:	000228e8 	cmpgeui	zero,zero,2211
   21d24:	00021e64 	muli	zero,zero,2169
   21d28:	00021fc4 	movi	zero,2175
   21d2c:	000228e8 	cmpgeui	zero,zero,2211
   21d30:	00022004 	movi	zero,2176
   21d34:	00022010 	cmplti	zero,zero,2176
   21d38:	00022010 	cmplti	zero,zero,2176
   21d3c:	00022010 	cmplti	zero,zero,2176
   21d40:	00022010 	cmplti	zero,zero,2176
   21d44:	00022010 	cmplti	zero,zero,2176
   21d48:	00022010 	cmplti	zero,zero,2176
   21d4c:	00022010 	cmplti	zero,zero,2176
   21d50:	00022010 	cmplti	zero,zero,2176
   21d54:	00022010 	cmplti	zero,zero,2176
   21d58:	000228e8 	cmpgeui	zero,zero,2211
   21d5c:	000228e8 	cmpgeui	zero,zero,2211
   21d60:	000228e8 	cmpgeui	zero,zero,2211
   21d64:	000228e8 	cmpgeui	zero,zero,2211
   21d68:	000228e8 	cmpgeui	zero,zero,2211
   21d6c:	000228e8 	cmpgeui	zero,zero,2211
   21d70:	000228e8 	cmpgeui	zero,zero,2211
   21d74:	000228e8 	cmpgeui	zero,zero,2211
   21d78:	000228e8 	cmpgeui	zero,zero,2211
   21d7c:	000228e8 	cmpgeui	zero,zero,2211
   21d80:	00022044 	movi	zero,2177
   21d84:	00022100 	call	2210 <__alt_mem_onchip_memory2_0-0x1ddf0>
   21d88:	000228e8 	cmpgeui	zero,zero,2211
   21d8c:	00022100 	call	2210 <__alt_mem_onchip_memory2_0-0x1ddf0>
   21d90:	000228e8 	cmpgeui	zero,zero,2211
   21d94:	000228e8 	cmpgeui	zero,zero,2211
   21d98:	000228e8 	cmpgeui	zero,zero,2211
   21d9c:	000228e8 	cmpgeui	zero,zero,2211
   21da0:	000221a0 	cmpeqi	zero,zero,2182
   21da4:	000228e8 	cmpgeui	zero,zero,2211
   21da8:	000228e8 	cmpgeui	zero,zero,2211
   21dac:	000221ac 	andhi	zero,zero,2182
   21db0:	000228e8 	cmpgeui	zero,zero,2211
   21db4:	000228e8 	cmpgeui	zero,zero,2211
   21db8:	000228e8 	cmpgeui	zero,zero,2211
   21dbc:	000228e8 	cmpgeui	zero,zero,2211
   21dc0:	000228e8 	cmpgeui	zero,zero,2211
   21dc4:	00022624 	muli	zero,zero,2200
   21dc8:	000228e8 	cmpgeui	zero,zero,2211
   21dcc:	000228e8 	cmpgeui	zero,zero,2211
   21dd0:	00022684 	movi	zero,2202
   21dd4:	000228e8 	cmpgeui	zero,zero,2211
   21dd8:	000228e8 	cmpgeui	zero,zero,2211
   21ddc:	000228e8 	cmpgeui	zero,zero,2211
   21de0:	000228e8 	cmpgeui	zero,zero,2211
   21de4:	000228e8 	cmpgeui	zero,zero,2211
   21de8:	000228e8 	cmpgeui	zero,zero,2211
   21dec:	000228e8 	cmpgeui	zero,zero,2211
   21df0:	000228e8 	cmpgeui	zero,zero,2211
   21df4:	000228e8 	cmpgeui	zero,zero,2211
   21df8:	000228e8 	cmpgeui	zero,zero,2211
   21dfc:	00022894 	movui	zero,2210
   21e00:	00022834 	movhi	zero,2208
   21e04:	00022100 	call	2210 <__alt_mem_onchip_memory2_0-0x1ddf0>
   21e08:	00022100 	call	2210 <__alt_mem_onchip_memory2_0-0x1ddf0>
   21e0c:	00022100 	call	2210 <__alt_mem_onchip_memory2_0-0x1ddf0>
   21e10:	00022844 	movi	zero,2209
   21e14:	00022834 	movhi	zero,2208
   21e18:	000228e8 	cmpgeui	zero,zero,2211
   21e1c:	000228e8 	cmpgeui	zero,zero,2211
   21e20:	00022850 	cmplti	zero,zero,2209
   21e24:	000228e8 	cmpgeui	zero,zero,2211
   21e28:	00022860 	cmpeqi	zero,zero,2209
   21e2c:	00022734 	movhi	zero,2204
   21e30:	00021e70 	cmpltui	zero,zero,2169
   21e34:	00022754 	movui	zero,2205
   21e38:	000228e8 	cmpgeui	zero,zero,2211
   21e3c:	00022760 	cmpeqi	zero,zero,2205
   21e40:	000228e8 	cmpgeui	zero,zero,2211
   21e44:	000227bc 	xorhi	zero,zero,2206
   21e48:	000228e8 	cmpgeui	zero,zero,2211
   21e4c:	000228e8 	cmpgeui	zero,zero,2211
   21e50:	000227cc 	andi	zero,zero,2207
   21e54:	d9003117 	ldw	r4,196(sp)
   21e58:	d8802d15 	stw	r2,180(sp)
   21e5c:	0109c83a 	sub	r4,zero,r4
   21e60:	d9003115 	stw	r4,196(sp)
   21e64:	94800114 	ori	r18,r18,4
   21e68:	ac400007 	ldb	r17,0(r21)
   21e6c:	003f9706 	br	21ccc <__alt_data_end+0xf8021ccc>
   21e70:	00800c04 	movi	r2,48
   21e74:	d9002d17 	ldw	r4,180(sp)
   21e78:	d9402917 	ldw	r5,164(sp)
   21e7c:	d8802705 	stb	r2,156(sp)
   21e80:	00801e04 	movi	r2,120
   21e84:	d8802745 	stb	r2,157(sp)
   21e88:	d8002785 	stb	zero,158(sp)
   21e8c:	20c00104 	addi	r3,r4,4
   21e90:	24c00017 	ldw	r19,0(r4)
   21e94:	002d883a 	mov	r22,zero
   21e98:	90800094 	ori	r2,r18,2
   21e9c:	28029a16 	blt	r5,zero,22908 <___vfprintf_internal_r+0xdc0>
   21ea0:	00bfdfc4 	movi	r2,-129
   21ea4:	90a4703a 	and	r18,r18,r2
   21ea8:	d8c02d15 	stw	r3,180(sp)
   21eac:	94800094 	ori	r18,r18,2
   21eb0:	9802871e 	bne	r19,zero,228d0 <___vfprintf_internal_r+0xd88>
   21eb4:	00810034 	movhi	r2,1024
   21eb8:	10802604 	addi	r2,r2,152
   21ebc:	d8803915 	stw	r2,228(sp)
   21ec0:	04401e04 	movi	r17,120
   21ec4:	d8802917 	ldw	r2,164(sp)
   21ec8:	0039883a 	mov	fp,zero
   21ecc:	1001e926 	beq	r2,zero,22674 <___vfprintf_internal_r+0xb2c>
   21ed0:	0027883a 	mov	r19,zero
   21ed4:	002d883a 	mov	r22,zero
   21ed8:	00020506 	br	226f0 <___vfprintf_internal_r+0xba8>
   21edc:	d9002c17 	ldw	r4,176(sp)
   21ee0:	b80b883a 	mov	r5,r23
   21ee4:	0023e780 	call	23e78 <__swsetup_r>
   21ee8:	1005ac1e 	bne	r2,zero,2359c <___vfprintf_internal_r+0x1a54>
   21eec:	b880030b 	ldhu	r2,12(r23)
   21ef0:	00c00284 	movi	r3,10
   21ef4:	1080068c 	andi	r2,r2,26
   21ef8:	10ff3c1e 	bne	r2,r3,21bec <__alt_data_end+0xf8021bec>
   21efc:	b880038f 	ldh	r2,14(r23)
   21f00:	103f3a16 	blt	r2,zero,21bec <__alt_data_end+0xf8021bec>
   21f04:	d9c02d17 	ldw	r7,180(sp)
   21f08:	d9002c17 	ldw	r4,176(sp)
   21f0c:	a80d883a 	mov	r6,r21
   21f10:	b80b883a 	mov	r5,r23
   21f14:	0023d5c0 	call	23d5c <__sbprintf>
   21f18:	00001106 	br	21f60 <___vfprintf_internal_r+0x418>
   21f1c:	d9002c17 	ldw	r4,176(sp)
   21f20:	d9801e04 	addi	r6,sp,120
   21f24:	b80b883a 	mov	r5,r23
   21f28:	00287380 	call	28738 <__sprint_r>
   21f2c:	1000081e 	bne	r2,zero,21f50 <___vfprintf_internal_r+0x408>
   21f30:	da000404 	addi	r8,sp,16
   21f34:	003f5306 	br	21c84 <__alt_data_end+0xf8021c84>
   21f38:	d8802017 	ldw	r2,128(sp)
   21f3c:	10000426 	beq	r2,zero,21f50 <___vfprintf_internal_r+0x408>
   21f40:	d9002c17 	ldw	r4,176(sp)
   21f44:	d9801e04 	addi	r6,sp,120
   21f48:	b80b883a 	mov	r5,r23
   21f4c:	00287380 	call	28738 <__sprint_r>
   21f50:	b880030b 	ldhu	r2,12(r23)
   21f54:	1080100c 	andi	r2,r2,64
   21f58:	1005901e 	bne	r2,zero,2359c <___vfprintf_internal_r+0x1a54>
   21f5c:	d8802f17 	ldw	r2,188(sp)
   21f60:	dfc04717 	ldw	ra,284(sp)
   21f64:	df004617 	ldw	fp,280(sp)
   21f68:	ddc04517 	ldw	r23,276(sp)
   21f6c:	dd804417 	ldw	r22,272(sp)
   21f70:	dd404317 	ldw	r21,268(sp)
   21f74:	dd004217 	ldw	r20,264(sp)
   21f78:	dcc04117 	ldw	r19,260(sp)
   21f7c:	dc804017 	ldw	r18,256(sp)
   21f80:	dc403f17 	ldw	r17,252(sp)
   21f84:	dc003e17 	ldw	r16,248(sp)
   21f88:	dec04804 	addi	sp,sp,288
   21f8c:	f800283a 	ret
   21f90:	d9002c17 	ldw	r4,176(sp)
   21f94:	0025ea00 	call	25ea0 <__sinit>
   21f98:	003f0406 	br	21bac <__alt_data_end+0xf8021bac>
   21f9c:	d8802d17 	ldw	r2,180(sp)
   21fa0:	d9002d17 	ldw	r4,180(sp)
   21fa4:	10800017 	ldw	r2,0(r2)
   21fa8:	d8803115 	stw	r2,196(sp)
   21fac:	20800104 	addi	r2,r4,4
   21fb0:	d9003117 	ldw	r4,196(sp)
   21fb4:	203fa716 	blt	r4,zero,21e54 <__alt_data_end+0xf8021e54>
   21fb8:	d8802d15 	stw	r2,180(sp)
   21fbc:	ac400007 	ldb	r17,0(r21)
   21fc0:	003f4206 	br	21ccc <__alt_data_end+0xf8021ccc>
   21fc4:	ac400007 	ldb	r17,0(r21)
   21fc8:	aac00044 	addi	r11,r21,1
   21fcc:	8a872826 	beq	r17,r10,23c70 <___vfprintf_internal_r+0x2128>
   21fd0:	88bff404 	addi	r2,r17,-48
   21fd4:	0009883a 	mov	r4,zero
   21fd8:	30867d36 	bltu	r6,r2,239d0 <___vfprintf_internal_r+0x1e88>
   21fdc:	5c400007 	ldb	r17,0(r11)
   21fe0:	210002a4 	muli	r4,r4,10
   21fe4:	5d400044 	addi	r21,r11,1
   21fe8:	a817883a 	mov	r11,r21
   21fec:	2089883a 	add	r4,r4,r2
   21ff0:	88bff404 	addi	r2,r17,-48
   21ff4:	30bff92e 	bgeu	r6,r2,21fdc <__alt_data_end+0xf8021fdc>
   21ff8:	2005c916 	blt	r4,zero,23720 <___vfprintf_internal_r+0x1bd8>
   21ffc:	d9002915 	stw	r4,164(sp)
   22000:	003f3306 	br	21cd0 <__alt_data_end+0xf8021cd0>
   22004:	94802014 	ori	r18,r18,128
   22008:	ac400007 	ldb	r17,0(r21)
   2200c:	003f2f06 	br	21ccc <__alt_data_end+0xf8021ccc>
   22010:	a809883a 	mov	r4,r21
   22014:	d8003115 	stw	zero,196(sp)
   22018:	88bff404 	addi	r2,r17,-48
   2201c:	0017883a 	mov	r11,zero
   22020:	24400007 	ldb	r17,0(r4)
   22024:	5ac002a4 	muli	r11,r11,10
   22028:	ad400044 	addi	r21,r21,1
   2202c:	a809883a 	mov	r4,r21
   22030:	12d7883a 	add	r11,r2,r11
   22034:	88bff404 	addi	r2,r17,-48
   22038:	30bff92e 	bgeu	r6,r2,22020 <__alt_data_end+0xf8022020>
   2203c:	dac03115 	stw	r11,196(sp)
   22040:	003f2306 	br	21cd0 <__alt_data_end+0xf8021cd0>
   22044:	18c03fcc 	andi	r3,r3,255
   22048:	18072b1e 	bne	r3,zero,23cf8 <___vfprintf_internal_r+0x21b0>
   2204c:	94800414 	ori	r18,r18,16
   22050:	9080080c 	andi	r2,r18,32
   22054:	10037b26 	beq	r2,zero,22e44 <___vfprintf_internal_r+0x12fc>
   22058:	d9402d17 	ldw	r5,180(sp)
   2205c:	28800117 	ldw	r2,4(r5)
   22060:	2cc00017 	ldw	r19,0(r5)
   22064:	29400204 	addi	r5,r5,8
   22068:	d9402d15 	stw	r5,180(sp)
   2206c:	102d883a 	mov	r22,r2
   22070:	10044b16 	blt	r2,zero,231a0 <___vfprintf_internal_r+0x1658>
   22074:	d9402917 	ldw	r5,164(sp)
   22078:	df002783 	ldbu	fp,158(sp)
   2207c:	2803bc16 	blt	r5,zero,22f70 <___vfprintf_internal_r+0x1428>
   22080:	00ffdfc4 	movi	r3,-129
   22084:	9d84b03a 	or	r2,r19,r22
   22088:	90e4703a 	and	r18,r18,r3
   2208c:	10017726 	beq	r2,zero,2266c <___vfprintf_internal_r+0xb24>
   22090:	b0038326 	beq	r22,zero,22ea0 <___vfprintf_internal_r+0x1358>
   22094:	dc402a15 	stw	r17,168(sp)
   22098:	dc001e04 	addi	r16,sp,120
   2209c:	b023883a 	mov	r17,r22
   220a0:	402d883a 	mov	r22,r8
   220a4:	9809883a 	mov	r4,r19
   220a8:	880b883a 	mov	r5,r17
   220ac:	01800284 	movi	r6,10
   220b0:	000f883a 	mov	r7,zero
   220b4:	002a90c0 	call	2a90c <__umoddi3>
   220b8:	10800c04 	addi	r2,r2,48
   220bc:	843fffc4 	addi	r16,r16,-1
   220c0:	9809883a 	mov	r4,r19
   220c4:	880b883a 	mov	r5,r17
   220c8:	80800005 	stb	r2,0(r16)
   220cc:	01800284 	movi	r6,10
   220d0:	000f883a 	mov	r7,zero
   220d4:	002a3940 	call	2a394 <__udivdi3>
   220d8:	1027883a 	mov	r19,r2
   220dc:	10c4b03a 	or	r2,r2,r3
   220e0:	1823883a 	mov	r17,r3
   220e4:	103fef1e 	bne	r2,zero,220a4 <__alt_data_end+0xf80220a4>
   220e8:	d8c02817 	ldw	r3,160(sp)
   220ec:	dc402a17 	ldw	r17,168(sp)
   220f0:	b011883a 	mov	r8,r22
   220f4:	1c07c83a 	sub	r3,r3,r16
   220f8:	d8c02e15 	stw	r3,184(sp)
   220fc:	00005906 	br	22264 <___vfprintf_internal_r+0x71c>
   22100:	18c03fcc 	andi	r3,r3,255
   22104:	1806fa1e 	bne	r3,zero,23cf0 <___vfprintf_internal_r+0x21a8>
   22108:	9080020c 	andi	r2,r18,8
   2210c:	10048a26 	beq	r2,zero,23338 <___vfprintf_internal_r+0x17f0>
   22110:	d8c02d17 	ldw	r3,180(sp)
   22114:	d9002d17 	ldw	r4,180(sp)
   22118:	d9402d17 	ldw	r5,180(sp)
   2211c:	18c00017 	ldw	r3,0(r3)
   22120:	21000117 	ldw	r4,4(r4)
   22124:	29400204 	addi	r5,r5,8
   22128:	d8c03615 	stw	r3,216(sp)
   2212c:	d9003815 	stw	r4,224(sp)
   22130:	d9402d15 	stw	r5,180(sp)
   22134:	d9003617 	ldw	r4,216(sp)
   22138:	d9403817 	ldw	r5,224(sp)
   2213c:	da003d15 	stw	r8,244(sp)
   22140:	04000044 	movi	r16,1
   22144:	00284ec0 	call	284ec <__fpclassifyd>
   22148:	da003d17 	ldw	r8,244(sp)
   2214c:	14041f1e 	bne	r2,r16,231cc <___vfprintf_internal_r+0x1684>
   22150:	d9003617 	ldw	r4,216(sp)
   22154:	d9403817 	ldw	r5,224(sp)
   22158:	000d883a 	mov	r6,zero
   2215c:	000f883a 	mov	r7,zero
   22160:	002c2f00 	call	2c2f0 <__ledf2>
   22164:	da003d17 	ldw	r8,244(sp)
   22168:	1005be16 	blt	r2,zero,23864 <___vfprintf_internal_r+0x1d1c>
   2216c:	df002783 	ldbu	fp,158(sp)
   22170:	008011c4 	movi	r2,71
   22174:	1445330e 	bge	r2,r17,23644 <___vfprintf_internal_r+0x1afc>
   22178:	04010034 	movhi	r16,1024
   2217c:	84001e04 	addi	r16,r16,120
   22180:	00c000c4 	movi	r3,3
   22184:	00bfdfc4 	movi	r2,-129
   22188:	d8c02a15 	stw	r3,168(sp)
   2218c:	90a4703a 	and	r18,r18,r2
   22190:	d8c02e15 	stw	r3,184(sp)
   22194:	d8002915 	stw	zero,164(sp)
   22198:	d8003215 	stw	zero,200(sp)
   2219c:	00003706 	br	2227c <___vfprintf_internal_r+0x734>
   221a0:	94800214 	ori	r18,r18,8
   221a4:	ac400007 	ldb	r17,0(r21)
   221a8:	003ec806 	br	21ccc <__alt_data_end+0xf8021ccc>
   221ac:	18c03fcc 	andi	r3,r3,255
   221b0:	1806db1e 	bne	r3,zero,23d20 <___vfprintf_internal_r+0x21d8>
   221b4:	94800414 	ori	r18,r18,16
   221b8:	9080080c 	andi	r2,r18,32
   221bc:	1002d826 	beq	r2,zero,22d20 <___vfprintf_internal_r+0x11d8>
   221c0:	d9402d17 	ldw	r5,180(sp)
   221c4:	d8c02917 	ldw	r3,164(sp)
   221c8:	d8002785 	stb	zero,158(sp)
   221cc:	28800204 	addi	r2,r5,8
   221d0:	2cc00017 	ldw	r19,0(r5)
   221d4:	2d800117 	ldw	r22,4(r5)
   221d8:	18048f16 	blt	r3,zero,23418 <___vfprintf_internal_r+0x18d0>
   221dc:	013fdfc4 	movi	r4,-129
   221e0:	9d86b03a 	or	r3,r19,r22
   221e4:	d8802d15 	stw	r2,180(sp)
   221e8:	9124703a 	and	r18,r18,r4
   221ec:	1802d91e 	bne	r3,zero,22d54 <___vfprintf_internal_r+0x120c>
   221f0:	d8c02917 	ldw	r3,164(sp)
   221f4:	0039883a 	mov	fp,zero
   221f8:	1805c326 	beq	r3,zero,23908 <___vfprintf_internal_r+0x1dc0>
   221fc:	0027883a 	mov	r19,zero
   22200:	002d883a 	mov	r22,zero
   22204:	dc001e04 	addi	r16,sp,120
   22208:	9806d0fa 	srli	r3,r19,3
   2220c:	b008977a 	slli	r4,r22,29
   22210:	b02cd0fa 	srli	r22,r22,3
   22214:	9cc001cc 	andi	r19,r19,7
   22218:	98800c04 	addi	r2,r19,48
   2221c:	843fffc4 	addi	r16,r16,-1
   22220:	20e6b03a 	or	r19,r4,r3
   22224:	80800005 	stb	r2,0(r16)
   22228:	9d86b03a 	or	r3,r19,r22
   2222c:	183ff61e 	bne	r3,zero,22208 <__alt_data_end+0xf8022208>
   22230:	90c0004c 	andi	r3,r18,1
   22234:	18013b26 	beq	r3,zero,22724 <___vfprintf_internal_r+0xbdc>
   22238:	10803fcc 	andi	r2,r2,255
   2223c:	1080201c 	xori	r2,r2,128
   22240:	10bfe004 	addi	r2,r2,-128
   22244:	00c00c04 	movi	r3,48
   22248:	10c13626 	beq	r2,r3,22724 <___vfprintf_internal_r+0xbdc>
   2224c:	80ffffc5 	stb	r3,-1(r16)
   22250:	d8c02817 	ldw	r3,160(sp)
   22254:	80bfffc4 	addi	r2,r16,-1
   22258:	1021883a 	mov	r16,r2
   2225c:	1887c83a 	sub	r3,r3,r2
   22260:	d8c02e15 	stw	r3,184(sp)
   22264:	d8802e17 	ldw	r2,184(sp)
   22268:	d9002917 	ldw	r4,164(sp)
   2226c:	1100010e 	bge	r2,r4,22274 <___vfprintf_internal_r+0x72c>
   22270:	2005883a 	mov	r2,r4
   22274:	d8802a15 	stw	r2,168(sp)
   22278:	d8003215 	stw	zero,200(sp)
   2227c:	e7003fcc 	andi	fp,fp,255
   22280:	e700201c 	xori	fp,fp,128
   22284:	e73fe004 	addi	fp,fp,-128
   22288:	e0000326 	beq	fp,zero,22298 <___vfprintf_internal_r+0x750>
   2228c:	d8c02a17 	ldw	r3,168(sp)
   22290:	18c00044 	addi	r3,r3,1
   22294:	d8c02a15 	stw	r3,168(sp)
   22298:	90c0008c 	andi	r3,r18,2
   2229c:	d8c02b15 	stw	r3,172(sp)
   222a0:	18000326 	beq	r3,zero,222b0 <___vfprintf_internal_r+0x768>
   222a4:	d8c02a17 	ldw	r3,168(sp)
   222a8:	18c00084 	addi	r3,r3,2
   222ac:	d8c02a15 	stw	r3,168(sp)
   222b0:	90c0210c 	andi	r3,r18,132
   222b4:	d8c03015 	stw	r3,192(sp)
   222b8:	1801a31e 	bne	r3,zero,22948 <___vfprintf_internal_r+0xe00>
   222bc:	d9003117 	ldw	r4,196(sp)
   222c0:	d8c02a17 	ldw	r3,168(sp)
   222c4:	20e7c83a 	sub	r19,r4,r3
   222c8:	04c19f0e 	bge	zero,r19,22948 <___vfprintf_internal_r+0xe00>
   222cc:	02400404 	movi	r9,16
   222d0:	d8c02017 	ldw	r3,128(sp)
   222d4:	d8801f17 	ldw	r2,124(sp)
   222d8:	4cc50d0e 	bge	r9,r19,23710 <___vfprintf_internal_r+0x1bc8>
   222dc:	01410034 	movhi	r5,1024
   222e0:	29403184 	addi	r5,r5,198
   222e4:	dc403b15 	stw	r17,236(sp)
   222e8:	d9403515 	stw	r5,212(sp)
   222ec:	9823883a 	mov	r17,r19
   222f0:	482d883a 	mov	r22,r9
   222f4:	9027883a 	mov	r19,r18
   222f8:	070001c4 	movi	fp,7
   222fc:	8025883a 	mov	r18,r16
   22300:	dc002c17 	ldw	r16,176(sp)
   22304:	00000306 	br	22314 <___vfprintf_internal_r+0x7cc>
   22308:	8c7ffc04 	addi	r17,r17,-16
   2230c:	42000204 	addi	r8,r8,8
   22310:	b440130e 	bge	r22,r17,22360 <___vfprintf_internal_r+0x818>
   22314:	01010034 	movhi	r4,1024
   22318:	18c00404 	addi	r3,r3,16
   2231c:	10800044 	addi	r2,r2,1
   22320:	21003184 	addi	r4,r4,198
   22324:	41000015 	stw	r4,0(r8)
   22328:	45800115 	stw	r22,4(r8)
   2232c:	d8c02015 	stw	r3,128(sp)
   22330:	d8801f15 	stw	r2,124(sp)
   22334:	e0bff40e 	bge	fp,r2,22308 <__alt_data_end+0xf8022308>
   22338:	d9801e04 	addi	r6,sp,120
   2233c:	b80b883a 	mov	r5,r23
   22340:	8009883a 	mov	r4,r16
   22344:	00287380 	call	28738 <__sprint_r>
   22348:	103f011e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   2234c:	8c7ffc04 	addi	r17,r17,-16
   22350:	d8c02017 	ldw	r3,128(sp)
   22354:	d8801f17 	ldw	r2,124(sp)
   22358:	da000404 	addi	r8,sp,16
   2235c:	b47fed16 	blt	r22,r17,22314 <__alt_data_end+0xf8022314>
   22360:	9021883a 	mov	r16,r18
   22364:	9825883a 	mov	r18,r19
   22368:	8827883a 	mov	r19,r17
   2236c:	dc403b17 	ldw	r17,236(sp)
   22370:	d9403517 	ldw	r5,212(sp)
   22374:	98c7883a 	add	r3,r19,r3
   22378:	10800044 	addi	r2,r2,1
   2237c:	41400015 	stw	r5,0(r8)
   22380:	44c00115 	stw	r19,4(r8)
   22384:	d8c02015 	stw	r3,128(sp)
   22388:	d8801f15 	stw	r2,124(sp)
   2238c:	010001c4 	movi	r4,7
   22390:	2082a316 	blt	r4,r2,22e20 <___vfprintf_internal_r+0x12d8>
   22394:	df002787 	ldb	fp,158(sp)
   22398:	42000204 	addi	r8,r8,8
   2239c:	e0000c26 	beq	fp,zero,223d0 <___vfprintf_internal_r+0x888>
   223a0:	d8801f17 	ldw	r2,124(sp)
   223a4:	d9002784 	addi	r4,sp,158
   223a8:	18c00044 	addi	r3,r3,1
   223ac:	10800044 	addi	r2,r2,1
   223b0:	41000015 	stw	r4,0(r8)
   223b4:	01000044 	movi	r4,1
   223b8:	41000115 	stw	r4,4(r8)
   223bc:	d8c02015 	stw	r3,128(sp)
   223c0:	d8801f15 	stw	r2,124(sp)
   223c4:	010001c4 	movi	r4,7
   223c8:	20823c16 	blt	r4,r2,22cbc <___vfprintf_internal_r+0x1174>
   223cc:	42000204 	addi	r8,r8,8
   223d0:	d8802b17 	ldw	r2,172(sp)
   223d4:	10000c26 	beq	r2,zero,22408 <___vfprintf_internal_r+0x8c0>
   223d8:	d8801f17 	ldw	r2,124(sp)
   223dc:	d9002704 	addi	r4,sp,156
   223e0:	18c00084 	addi	r3,r3,2
   223e4:	10800044 	addi	r2,r2,1
   223e8:	41000015 	stw	r4,0(r8)
   223ec:	01000084 	movi	r4,2
   223f0:	41000115 	stw	r4,4(r8)
   223f4:	d8c02015 	stw	r3,128(sp)
   223f8:	d8801f15 	stw	r2,124(sp)
   223fc:	010001c4 	movi	r4,7
   22400:	20823616 	blt	r4,r2,22cdc <___vfprintf_internal_r+0x1194>
   22404:	42000204 	addi	r8,r8,8
   22408:	d9003017 	ldw	r4,192(sp)
   2240c:	00802004 	movi	r2,128
   22410:	20819926 	beq	r4,r2,22a78 <___vfprintf_internal_r+0xf30>
   22414:	d9402917 	ldw	r5,164(sp)
   22418:	d8802e17 	ldw	r2,184(sp)
   2241c:	28adc83a 	sub	r22,r5,r2
   22420:	0580310e 	bge	zero,r22,224e8 <___vfprintf_internal_r+0x9a0>
   22424:	07000404 	movi	fp,16
   22428:	d8801f17 	ldw	r2,124(sp)
   2242c:	e584140e 	bge	fp,r22,23480 <___vfprintf_internal_r+0x1938>
   22430:	01410034 	movhi	r5,1024
   22434:	29402d84 	addi	r5,r5,182
   22438:	dc402915 	stw	r17,164(sp)
   2243c:	d9402b15 	stw	r5,172(sp)
   22440:	b023883a 	mov	r17,r22
   22444:	04c001c4 	movi	r19,7
   22448:	a82d883a 	mov	r22,r21
   2244c:	902b883a 	mov	r21,r18
   22450:	8025883a 	mov	r18,r16
   22454:	dc002c17 	ldw	r16,176(sp)
   22458:	00000306 	br	22468 <___vfprintf_internal_r+0x920>
   2245c:	8c7ffc04 	addi	r17,r17,-16
   22460:	42000204 	addi	r8,r8,8
   22464:	e440110e 	bge	fp,r17,224ac <___vfprintf_internal_r+0x964>
   22468:	18c00404 	addi	r3,r3,16
   2246c:	10800044 	addi	r2,r2,1
   22470:	45000015 	stw	r20,0(r8)
   22474:	47000115 	stw	fp,4(r8)
   22478:	d8c02015 	stw	r3,128(sp)
   2247c:	d8801f15 	stw	r2,124(sp)
   22480:	98bff60e 	bge	r19,r2,2245c <__alt_data_end+0xf802245c>
   22484:	d9801e04 	addi	r6,sp,120
   22488:	b80b883a 	mov	r5,r23
   2248c:	8009883a 	mov	r4,r16
   22490:	00287380 	call	28738 <__sprint_r>
   22494:	103eae1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22498:	8c7ffc04 	addi	r17,r17,-16
   2249c:	d8c02017 	ldw	r3,128(sp)
   224a0:	d8801f17 	ldw	r2,124(sp)
   224a4:	da000404 	addi	r8,sp,16
   224a8:	e47fef16 	blt	fp,r17,22468 <__alt_data_end+0xf8022468>
   224ac:	9021883a 	mov	r16,r18
   224b0:	a825883a 	mov	r18,r21
   224b4:	b02b883a 	mov	r21,r22
   224b8:	882d883a 	mov	r22,r17
   224bc:	dc402917 	ldw	r17,164(sp)
   224c0:	d9002b17 	ldw	r4,172(sp)
   224c4:	1d87883a 	add	r3,r3,r22
   224c8:	10800044 	addi	r2,r2,1
   224cc:	41000015 	stw	r4,0(r8)
   224d0:	45800115 	stw	r22,4(r8)
   224d4:	d8c02015 	stw	r3,128(sp)
   224d8:	d8801f15 	stw	r2,124(sp)
   224dc:	010001c4 	movi	r4,7
   224e0:	2081ee16 	blt	r4,r2,22c9c <___vfprintf_internal_r+0x1154>
   224e4:	42000204 	addi	r8,r8,8
   224e8:	9080400c 	andi	r2,r18,256
   224ec:	1001181e 	bne	r2,zero,22950 <___vfprintf_internal_r+0xe08>
   224f0:	d9402e17 	ldw	r5,184(sp)
   224f4:	d8801f17 	ldw	r2,124(sp)
   224f8:	44000015 	stw	r16,0(r8)
   224fc:	1947883a 	add	r3,r3,r5
   22500:	10800044 	addi	r2,r2,1
   22504:	41400115 	stw	r5,4(r8)
   22508:	d8c02015 	stw	r3,128(sp)
   2250c:	d8801f15 	stw	r2,124(sp)
   22510:	010001c4 	movi	r4,7
   22514:	2081d316 	blt	r4,r2,22c64 <___vfprintf_internal_r+0x111c>
   22518:	42000204 	addi	r8,r8,8
   2251c:	9480010c 	andi	r18,r18,4
   22520:	90003226 	beq	r18,zero,225ec <___vfprintf_internal_r+0xaa4>
   22524:	d9403117 	ldw	r5,196(sp)
   22528:	d8802a17 	ldw	r2,168(sp)
   2252c:	28a1c83a 	sub	r16,r5,r2
   22530:	04002e0e 	bge	zero,r16,225ec <___vfprintf_internal_r+0xaa4>
   22534:	04400404 	movi	r17,16
   22538:	d8801f17 	ldw	r2,124(sp)
   2253c:	8c04a20e 	bge	r17,r16,237c8 <___vfprintf_internal_r+0x1c80>
   22540:	01410034 	movhi	r5,1024
   22544:	29403184 	addi	r5,r5,198
   22548:	d9403515 	stw	r5,212(sp)
   2254c:	048001c4 	movi	r18,7
   22550:	dcc02c17 	ldw	r19,176(sp)
   22554:	00000306 	br	22564 <___vfprintf_internal_r+0xa1c>
   22558:	843ffc04 	addi	r16,r16,-16
   2255c:	42000204 	addi	r8,r8,8
   22560:	8c00130e 	bge	r17,r16,225b0 <___vfprintf_internal_r+0xa68>
   22564:	01010034 	movhi	r4,1024
   22568:	18c00404 	addi	r3,r3,16
   2256c:	10800044 	addi	r2,r2,1
   22570:	21003184 	addi	r4,r4,198
   22574:	41000015 	stw	r4,0(r8)
   22578:	44400115 	stw	r17,4(r8)
   2257c:	d8c02015 	stw	r3,128(sp)
   22580:	d8801f15 	stw	r2,124(sp)
   22584:	90bff40e 	bge	r18,r2,22558 <__alt_data_end+0xf8022558>
   22588:	d9801e04 	addi	r6,sp,120
   2258c:	b80b883a 	mov	r5,r23
   22590:	9809883a 	mov	r4,r19
   22594:	00287380 	call	28738 <__sprint_r>
   22598:	103e6d1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   2259c:	843ffc04 	addi	r16,r16,-16
   225a0:	d8c02017 	ldw	r3,128(sp)
   225a4:	d8801f17 	ldw	r2,124(sp)
   225a8:	da000404 	addi	r8,sp,16
   225ac:	8c3fed16 	blt	r17,r16,22564 <__alt_data_end+0xf8022564>
   225b0:	d9403517 	ldw	r5,212(sp)
   225b4:	1c07883a 	add	r3,r3,r16
   225b8:	10800044 	addi	r2,r2,1
   225bc:	41400015 	stw	r5,0(r8)
   225c0:	44000115 	stw	r16,4(r8)
   225c4:	d8c02015 	stw	r3,128(sp)
   225c8:	d8801f15 	stw	r2,124(sp)
   225cc:	010001c4 	movi	r4,7
   225d0:	2080060e 	bge	r4,r2,225ec <___vfprintf_internal_r+0xaa4>
   225d4:	d9002c17 	ldw	r4,176(sp)
   225d8:	d9801e04 	addi	r6,sp,120
   225dc:	b80b883a 	mov	r5,r23
   225e0:	00287380 	call	28738 <__sprint_r>
   225e4:	103e5a1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   225e8:	d8c02017 	ldw	r3,128(sp)
   225ec:	d8803117 	ldw	r2,196(sp)
   225f0:	d9002a17 	ldw	r4,168(sp)
   225f4:	1100010e 	bge	r2,r4,225fc <___vfprintf_internal_r+0xab4>
   225f8:	2005883a 	mov	r2,r4
   225fc:	d9402f17 	ldw	r5,188(sp)
   22600:	288b883a 	add	r5,r5,r2
   22604:	d9402f15 	stw	r5,188(sp)
   22608:	18019e1e 	bne	r3,zero,22c84 <___vfprintf_internal_r+0x113c>
   2260c:	a8800007 	ldb	r2,0(r21)
   22610:	d8001f15 	stw	zero,124(sp)
   22614:	da000404 	addi	r8,sp,16
   22618:	103d851e 	bne	r2,zero,21c30 <__alt_data_end+0xf8021c30>
   2261c:	a821883a 	mov	r16,r21
   22620:	003d9b06 	br	21c90 <__alt_data_end+0xf8021c90>
   22624:	18c03fcc 	andi	r3,r3,255
   22628:	1805c11e 	bne	r3,zero,23d30 <___vfprintf_internal_r+0x21e8>
   2262c:	94800414 	ori	r18,r18,16
   22630:	9080080c 	andi	r2,r18,32
   22634:	10020c26 	beq	r2,zero,22e68 <___vfprintf_internal_r+0x1320>
   22638:	d8802d17 	ldw	r2,180(sp)
   2263c:	d9002917 	ldw	r4,164(sp)
   22640:	d8002785 	stb	zero,158(sp)
   22644:	10c00204 	addi	r3,r2,8
   22648:	14c00017 	ldw	r19,0(r2)
   2264c:	15800117 	ldw	r22,4(r2)
   22650:	20040f16 	blt	r4,zero,23690 <___vfprintf_internal_r+0x1b48>
   22654:	013fdfc4 	movi	r4,-129
   22658:	9d84b03a 	or	r2,r19,r22
   2265c:	d8c02d15 	stw	r3,180(sp)
   22660:	9124703a 	and	r18,r18,r4
   22664:	0039883a 	mov	fp,zero
   22668:	103e891e 	bne	r2,zero,22090 <__alt_data_end+0xf8022090>
   2266c:	d9002917 	ldw	r4,164(sp)
   22670:	2002c11e 	bne	r4,zero,23178 <___vfprintf_internal_r+0x1630>
   22674:	d8002915 	stw	zero,164(sp)
   22678:	d8002e15 	stw	zero,184(sp)
   2267c:	dc001e04 	addi	r16,sp,120
   22680:	003ef806 	br	22264 <__alt_data_end+0xf8022264>
   22684:	18c03fcc 	andi	r3,r3,255
   22688:	18059d1e 	bne	r3,zero,23d00 <___vfprintf_internal_r+0x21b8>
   2268c:	01410034 	movhi	r5,1024
   22690:	29402104 	addi	r5,r5,132
   22694:	d9403915 	stw	r5,228(sp)
   22698:	9080080c 	andi	r2,r18,32
   2269c:	10005226 	beq	r2,zero,227e8 <___vfprintf_internal_r+0xca0>
   226a0:	d8802d17 	ldw	r2,180(sp)
   226a4:	14c00017 	ldw	r19,0(r2)
   226a8:	15800117 	ldw	r22,4(r2)
   226ac:	10800204 	addi	r2,r2,8
   226b0:	d8802d15 	stw	r2,180(sp)
   226b4:	9080004c 	andi	r2,r18,1
   226b8:	10019026 	beq	r2,zero,22cfc <___vfprintf_internal_r+0x11b4>
   226bc:	9d84b03a 	or	r2,r19,r22
   226c0:	10036926 	beq	r2,zero,23468 <___vfprintf_internal_r+0x1920>
   226c4:	d8c02917 	ldw	r3,164(sp)
   226c8:	00800c04 	movi	r2,48
   226cc:	d8802705 	stb	r2,156(sp)
   226d0:	dc402745 	stb	r17,157(sp)
   226d4:	d8002785 	stb	zero,158(sp)
   226d8:	90800094 	ori	r2,r18,2
   226dc:	18045d16 	blt	r3,zero,23854 <___vfprintf_internal_r+0x1d0c>
   226e0:	00bfdfc4 	movi	r2,-129
   226e4:	90a4703a 	and	r18,r18,r2
   226e8:	94800094 	ori	r18,r18,2
   226ec:	0039883a 	mov	fp,zero
   226f0:	d9003917 	ldw	r4,228(sp)
   226f4:	dc001e04 	addi	r16,sp,120
   226f8:	988003cc 	andi	r2,r19,15
   226fc:	b006973a 	slli	r3,r22,28
   22700:	2085883a 	add	r2,r4,r2
   22704:	9826d13a 	srli	r19,r19,4
   22708:	10800003 	ldbu	r2,0(r2)
   2270c:	b02cd13a 	srli	r22,r22,4
   22710:	843fffc4 	addi	r16,r16,-1
   22714:	1ce6b03a 	or	r19,r3,r19
   22718:	80800005 	stb	r2,0(r16)
   2271c:	9d84b03a 	or	r2,r19,r22
   22720:	103ff51e 	bne	r2,zero,226f8 <__alt_data_end+0xf80226f8>
   22724:	d8c02817 	ldw	r3,160(sp)
   22728:	1c07c83a 	sub	r3,r3,r16
   2272c:	d8c02e15 	stw	r3,184(sp)
   22730:	003ecc06 	br	22264 <__alt_data_end+0xf8022264>
   22734:	18c03fcc 	andi	r3,r3,255
   22738:	183e9f26 	beq	r3,zero,221b8 <__alt_data_end+0xf80221b8>
   2273c:	d9c02785 	stb	r7,158(sp)
   22740:	003e9d06 	br	221b8 <__alt_data_end+0xf80221b8>
   22744:	00c00044 	movi	r3,1
   22748:	01c00ac4 	movi	r7,43
   2274c:	ac400007 	ldb	r17,0(r21)
   22750:	003d5e06 	br	21ccc <__alt_data_end+0xf8021ccc>
   22754:	94800814 	ori	r18,r18,32
   22758:	ac400007 	ldb	r17,0(r21)
   2275c:	003d5b06 	br	21ccc <__alt_data_end+0xf8021ccc>
   22760:	d8c02d17 	ldw	r3,180(sp)
   22764:	d8002785 	stb	zero,158(sp)
   22768:	1c000017 	ldw	r16,0(r3)
   2276c:	1cc00104 	addi	r19,r3,4
   22770:	80041926 	beq	r16,zero,237d8 <___vfprintf_internal_r+0x1c90>
   22774:	d9002917 	ldw	r4,164(sp)
   22778:	2003d016 	blt	r4,zero,236bc <___vfprintf_internal_r+0x1b74>
   2277c:	200d883a 	mov	r6,r4
   22780:	000b883a 	mov	r5,zero
   22784:	8009883a 	mov	r4,r16
   22788:	da003d15 	stw	r8,244(sp)
   2278c:	0026ba40 	call	26ba4 <memchr>
   22790:	da003d17 	ldw	r8,244(sp)
   22794:	10045426 	beq	r2,zero,238e8 <___vfprintf_internal_r+0x1da0>
   22798:	1405c83a 	sub	r2,r2,r16
   2279c:	d8802e15 	stw	r2,184(sp)
   227a0:	1003cc16 	blt	r2,zero,236d4 <___vfprintf_internal_r+0x1b8c>
   227a4:	df002783 	ldbu	fp,158(sp)
   227a8:	d8802a15 	stw	r2,168(sp)
   227ac:	dcc02d15 	stw	r19,180(sp)
   227b0:	d8002915 	stw	zero,164(sp)
   227b4:	d8003215 	stw	zero,200(sp)
   227b8:	003eb006 	br	2227c <__alt_data_end+0xf802227c>
   227bc:	18c03fcc 	andi	r3,r3,255
   227c0:	183f9b26 	beq	r3,zero,22630 <__alt_data_end+0xf8022630>
   227c4:	d9c02785 	stb	r7,158(sp)
   227c8:	003f9906 	br	22630 <__alt_data_end+0xf8022630>
   227cc:	18c03fcc 	andi	r3,r3,255
   227d0:	1805551e 	bne	r3,zero,23d28 <___vfprintf_internal_r+0x21e0>
   227d4:	01410034 	movhi	r5,1024
   227d8:	29402604 	addi	r5,r5,152
   227dc:	d9403915 	stw	r5,228(sp)
   227e0:	9080080c 	andi	r2,r18,32
   227e4:	103fae1e 	bne	r2,zero,226a0 <__alt_data_end+0xf80226a0>
   227e8:	9080040c 	andi	r2,r18,16
   227ec:	1002de26 	beq	r2,zero,23368 <___vfprintf_internal_r+0x1820>
   227f0:	d8c02d17 	ldw	r3,180(sp)
   227f4:	002d883a 	mov	r22,zero
   227f8:	1cc00017 	ldw	r19,0(r3)
   227fc:	18c00104 	addi	r3,r3,4
   22800:	d8c02d15 	stw	r3,180(sp)
   22804:	003fab06 	br	226b4 <__alt_data_end+0xf80226b4>
   22808:	38803fcc 	andi	r2,r7,255
   2280c:	1080201c 	xori	r2,r2,128
   22810:	10bfe004 	addi	r2,r2,-128
   22814:	1002d21e 	bne	r2,zero,23360 <___vfprintf_internal_r+0x1818>
   22818:	00c00044 	movi	r3,1
   2281c:	01c00804 	movi	r7,32
   22820:	ac400007 	ldb	r17,0(r21)
   22824:	003d2906 	br	21ccc <__alt_data_end+0xf8021ccc>
   22828:	94800054 	ori	r18,r18,1
   2282c:	ac400007 	ldb	r17,0(r21)
   22830:	003d2606 	br	21ccc <__alt_data_end+0xf8021ccc>
   22834:	18c03fcc 	andi	r3,r3,255
   22838:	183e0526 	beq	r3,zero,22050 <__alt_data_end+0xf8022050>
   2283c:	d9c02785 	stb	r7,158(sp)
   22840:	003e0306 	br	22050 <__alt_data_end+0xf8022050>
   22844:	94801014 	ori	r18,r18,64
   22848:	ac400007 	ldb	r17,0(r21)
   2284c:	003d1f06 	br	21ccc <__alt_data_end+0xf8021ccc>
   22850:	ac400007 	ldb	r17,0(r21)
   22854:	8a438726 	beq	r17,r9,23674 <___vfprintf_internal_r+0x1b2c>
   22858:	94800414 	ori	r18,r18,16
   2285c:	003d1b06 	br	21ccc <__alt_data_end+0xf8021ccc>
   22860:	18c03fcc 	andi	r3,r3,255
   22864:	1805341e 	bne	r3,zero,23d38 <___vfprintf_internal_r+0x21f0>
   22868:	9080080c 	andi	r2,r18,32
   2286c:	1002cd26 	beq	r2,zero,233a4 <___vfprintf_internal_r+0x185c>
   22870:	d9402d17 	ldw	r5,180(sp)
   22874:	d9002f17 	ldw	r4,188(sp)
   22878:	28800017 	ldw	r2,0(r5)
   2287c:	2007d7fa 	srai	r3,r4,31
   22880:	29400104 	addi	r5,r5,4
   22884:	d9402d15 	stw	r5,180(sp)
   22888:	11000015 	stw	r4,0(r2)
   2288c:	10c00115 	stw	r3,4(r2)
   22890:	003ce506 	br	21c28 <__alt_data_end+0xf8021c28>
   22894:	d8c02d17 	ldw	r3,180(sp)
   22898:	d9002d17 	ldw	r4,180(sp)
   2289c:	d8002785 	stb	zero,158(sp)
   228a0:	18800017 	ldw	r2,0(r3)
   228a4:	21000104 	addi	r4,r4,4
   228a8:	00c00044 	movi	r3,1
   228ac:	d8c02a15 	stw	r3,168(sp)
   228b0:	d8801405 	stb	r2,80(sp)
   228b4:	d9002d15 	stw	r4,180(sp)
   228b8:	d8c02e15 	stw	r3,184(sp)
   228bc:	d8002915 	stw	zero,164(sp)
   228c0:	d8003215 	stw	zero,200(sp)
   228c4:	dc001404 	addi	r16,sp,80
   228c8:	0039883a 	mov	fp,zero
   228cc:	003e7206 	br	22298 <__alt_data_end+0xf8022298>
   228d0:	01010034 	movhi	r4,1024
   228d4:	21002604 	addi	r4,r4,152
   228d8:	0039883a 	mov	fp,zero
   228dc:	d9003915 	stw	r4,228(sp)
   228e0:	04401e04 	movi	r17,120
   228e4:	003f8206 	br	226f0 <__alt_data_end+0xf80226f0>
   228e8:	18c03fcc 	andi	r3,r3,255
   228ec:	1805061e 	bne	r3,zero,23d08 <___vfprintf_internal_r+0x21c0>
   228f0:	883d9126 	beq	r17,zero,21f38 <__alt_data_end+0xf8021f38>
   228f4:	00c00044 	movi	r3,1
   228f8:	d8c02a15 	stw	r3,168(sp)
   228fc:	dc401405 	stb	r17,80(sp)
   22900:	d8002785 	stb	zero,158(sp)
   22904:	003fec06 	br	228b8 <__alt_data_end+0xf80228b8>
   22908:	01410034 	movhi	r5,1024
   2290c:	29402604 	addi	r5,r5,152
   22910:	d9403915 	stw	r5,228(sp)
   22914:	d8c02d15 	stw	r3,180(sp)
   22918:	1025883a 	mov	r18,r2
   2291c:	04401e04 	movi	r17,120
   22920:	9d84b03a 	or	r2,r19,r22
   22924:	1000fc1e 	bne	r2,zero,22d18 <___vfprintf_internal_r+0x11d0>
   22928:	0039883a 	mov	fp,zero
   2292c:	00800084 	movi	r2,2
   22930:	10803fcc 	andi	r2,r2,255
   22934:	00c00044 	movi	r3,1
   22938:	10c20f26 	beq	r2,r3,23178 <___vfprintf_internal_r+0x1630>
   2293c:	00c00084 	movi	r3,2
   22940:	10fd6326 	beq	r2,r3,21ed0 <__alt_data_end+0xf8021ed0>
   22944:	003e2d06 	br	221fc <__alt_data_end+0xf80221fc>
   22948:	d8c02017 	ldw	r3,128(sp)
   2294c:	003e9306 	br	2239c <__alt_data_end+0xf802239c>
   22950:	00801944 	movi	r2,101
   22954:	14407e0e 	bge	r2,r17,22b50 <___vfprintf_internal_r+0x1008>
   22958:	d9003617 	ldw	r4,216(sp)
   2295c:	d9403817 	ldw	r5,224(sp)
   22960:	000d883a 	mov	r6,zero
   22964:	000f883a 	mov	r7,zero
   22968:	d8c03c15 	stw	r3,240(sp)
   2296c:	da003d15 	stw	r8,244(sp)
   22970:	002c18c0 	call	2c18c <__eqdf2>
   22974:	d8c03c17 	ldw	r3,240(sp)
   22978:	da003d17 	ldw	r8,244(sp)
   2297c:	1000f71e 	bne	r2,zero,22d5c <___vfprintf_internal_r+0x1214>
   22980:	d8801f17 	ldw	r2,124(sp)
   22984:	01010034 	movhi	r4,1024
   22988:	21002d04 	addi	r4,r4,180
   2298c:	18c00044 	addi	r3,r3,1
   22990:	10800044 	addi	r2,r2,1
   22994:	41000015 	stw	r4,0(r8)
   22998:	01000044 	movi	r4,1
   2299c:	41000115 	stw	r4,4(r8)
   229a0:	d8c02015 	stw	r3,128(sp)
   229a4:	d8801f15 	stw	r2,124(sp)
   229a8:	010001c4 	movi	r4,7
   229ac:	2082b816 	blt	r4,r2,23490 <___vfprintf_internal_r+0x1948>
   229b0:	42000204 	addi	r8,r8,8
   229b4:	d8802617 	ldw	r2,152(sp)
   229b8:	d9403317 	ldw	r5,204(sp)
   229bc:	11400216 	blt	r2,r5,229c8 <___vfprintf_internal_r+0xe80>
   229c0:	9080004c 	andi	r2,r18,1
   229c4:	103ed526 	beq	r2,zero,2251c <__alt_data_end+0xf802251c>
   229c8:	d8803717 	ldw	r2,220(sp)
   229cc:	d9003417 	ldw	r4,208(sp)
   229d0:	d9403717 	ldw	r5,220(sp)
   229d4:	1887883a 	add	r3,r3,r2
   229d8:	d8801f17 	ldw	r2,124(sp)
   229dc:	41000015 	stw	r4,0(r8)
   229e0:	41400115 	stw	r5,4(r8)
   229e4:	10800044 	addi	r2,r2,1
   229e8:	d8c02015 	stw	r3,128(sp)
   229ec:	d8801f15 	stw	r2,124(sp)
   229f0:	010001c4 	movi	r4,7
   229f4:	20832916 	blt	r4,r2,2369c <___vfprintf_internal_r+0x1b54>
   229f8:	42000204 	addi	r8,r8,8
   229fc:	d8803317 	ldw	r2,204(sp)
   22a00:	143fffc4 	addi	r16,r2,-1
   22a04:	043ec50e 	bge	zero,r16,2251c <__alt_data_end+0xf802251c>
   22a08:	04400404 	movi	r17,16
   22a0c:	d8801f17 	ldw	r2,124(sp)
   22a10:	8c00880e 	bge	r17,r16,22c34 <___vfprintf_internal_r+0x10ec>
   22a14:	01410034 	movhi	r5,1024
   22a18:	29402d84 	addi	r5,r5,182
   22a1c:	d9402b15 	stw	r5,172(sp)
   22a20:	058001c4 	movi	r22,7
   22a24:	dcc02c17 	ldw	r19,176(sp)
   22a28:	00000306 	br	22a38 <___vfprintf_internal_r+0xef0>
   22a2c:	42000204 	addi	r8,r8,8
   22a30:	843ffc04 	addi	r16,r16,-16
   22a34:	8c00820e 	bge	r17,r16,22c40 <___vfprintf_internal_r+0x10f8>
   22a38:	18c00404 	addi	r3,r3,16
   22a3c:	10800044 	addi	r2,r2,1
   22a40:	45000015 	stw	r20,0(r8)
   22a44:	44400115 	stw	r17,4(r8)
   22a48:	d8c02015 	stw	r3,128(sp)
   22a4c:	d8801f15 	stw	r2,124(sp)
   22a50:	b0bff60e 	bge	r22,r2,22a2c <__alt_data_end+0xf8022a2c>
   22a54:	d9801e04 	addi	r6,sp,120
   22a58:	b80b883a 	mov	r5,r23
   22a5c:	9809883a 	mov	r4,r19
   22a60:	00287380 	call	28738 <__sprint_r>
   22a64:	103d3a1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22a68:	d8c02017 	ldw	r3,128(sp)
   22a6c:	d8801f17 	ldw	r2,124(sp)
   22a70:	da000404 	addi	r8,sp,16
   22a74:	003fee06 	br	22a30 <__alt_data_end+0xf8022a30>
   22a78:	d9403117 	ldw	r5,196(sp)
   22a7c:	d8802a17 	ldw	r2,168(sp)
   22a80:	28adc83a 	sub	r22,r5,r2
   22a84:	05be630e 	bge	zero,r22,22414 <__alt_data_end+0xf8022414>
   22a88:	07000404 	movi	fp,16
   22a8c:	d8801f17 	ldw	r2,124(sp)
   22a90:	e5838f0e 	bge	fp,r22,238d0 <___vfprintf_internal_r+0x1d88>
   22a94:	01410034 	movhi	r5,1024
   22a98:	29402d84 	addi	r5,r5,182
   22a9c:	dc403015 	stw	r17,192(sp)
   22aa0:	d9402b15 	stw	r5,172(sp)
   22aa4:	b023883a 	mov	r17,r22
   22aa8:	04c001c4 	movi	r19,7
   22aac:	a82d883a 	mov	r22,r21
   22ab0:	902b883a 	mov	r21,r18
   22ab4:	8025883a 	mov	r18,r16
   22ab8:	dc002c17 	ldw	r16,176(sp)
   22abc:	00000306 	br	22acc <___vfprintf_internal_r+0xf84>
   22ac0:	8c7ffc04 	addi	r17,r17,-16
   22ac4:	42000204 	addi	r8,r8,8
   22ac8:	e440110e 	bge	fp,r17,22b10 <___vfprintf_internal_r+0xfc8>
   22acc:	18c00404 	addi	r3,r3,16
   22ad0:	10800044 	addi	r2,r2,1
   22ad4:	45000015 	stw	r20,0(r8)
   22ad8:	47000115 	stw	fp,4(r8)
   22adc:	d8c02015 	stw	r3,128(sp)
   22ae0:	d8801f15 	stw	r2,124(sp)
   22ae4:	98bff60e 	bge	r19,r2,22ac0 <__alt_data_end+0xf8022ac0>
   22ae8:	d9801e04 	addi	r6,sp,120
   22aec:	b80b883a 	mov	r5,r23
   22af0:	8009883a 	mov	r4,r16
   22af4:	00287380 	call	28738 <__sprint_r>
   22af8:	103d151e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22afc:	8c7ffc04 	addi	r17,r17,-16
   22b00:	d8c02017 	ldw	r3,128(sp)
   22b04:	d8801f17 	ldw	r2,124(sp)
   22b08:	da000404 	addi	r8,sp,16
   22b0c:	e47fef16 	blt	fp,r17,22acc <__alt_data_end+0xf8022acc>
   22b10:	9021883a 	mov	r16,r18
   22b14:	a825883a 	mov	r18,r21
   22b18:	b02b883a 	mov	r21,r22
   22b1c:	882d883a 	mov	r22,r17
   22b20:	dc403017 	ldw	r17,192(sp)
   22b24:	d9002b17 	ldw	r4,172(sp)
   22b28:	1d87883a 	add	r3,r3,r22
   22b2c:	10800044 	addi	r2,r2,1
   22b30:	41000015 	stw	r4,0(r8)
   22b34:	45800115 	stw	r22,4(r8)
   22b38:	d8c02015 	stw	r3,128(sp)
   22b3c:	d8801f15 	stw	r2,124(sp)
   22b40:	010001c4 	movi	r4,7
   22b44:	20818e16 	blt	r4,r2,23180 <___vfprintf_internal_r+0x1638>
   22b48:	42000204 	addi	r8,r8,8
   22b4c:	003e3106 	br	22414 <__alt_data_end+0xf8022414>
   22b50:	d9403317 	ldw	r5,204(sp)
   22b54:	00800044 	movi	r2,1
   22b58:	18c00044 	addi	r3,r3,1
   22b5c:	1141530e 	bge	r2,r5,230ac <___vfprintf_internal_r+0x1564>
   22b60:	dc401f17 	ldw	r17,124(sp)
   22b64:	00800044 	movi	r2,1
   22b68:	40800115 	stw	r2,4(r8)
   22b6c:	8c400044 	addi	r17,r17,1
   22b70:	44000015 	stw	r16,0(r8)
   22b74:	d8c02015 	stw	r3,128(sp)
   22b78:	dc401f15 	stw	r17,124(sp)
   22b7c:	008001c4 	movi	r2,7
   22b80:	14416b16 	blt	r2,r17,23130 <___vfprintf_internal_r+0x15e8>
   22b84:	42000204 	addi	r8,r8,8
   22b88:	d8803717 	ldw	r2,220(sp)
   22b8c:	d9003417 	ldw	r4,208(sp)
   22b90:	8c400044 	addi	r17,r17,1
   22b94:	10c7883a 	add	r3,r2,r3
   22b98:	40800115 	stw	r2,4(r8)
   22b9c:	41000015 	stw	r4,0(r8)
   22ba0:	d8c02015 	stw	r3,128(sp)
   22ba4:	dc401f15 	stw	r17,124(sp)
   22ba8:	008001c4 	movi	r2,7
   22bac:	14416916 	blt	r2,r17,23154 <___vfprintf_internal_r+0x160c>
   22bb0:	45800204 	addi	r22,r8,8
   22bb4:	d9003617 	ldw	r4,216(sp)
   22bb8:	d9403817 	ldw	r5,224(sp)
   22bbc:	000d883a 	mov	r6,zero
   22bc0:	000f883a 	mov	r7,zero
   22bc4:	d8c03c15 	stw	r3,240(sp)
   22bc8:	002c18c0 	call	2c18c <__eqdf2>
   22bcc:	d8c03c17 	ldw	r3,240(sp)
   22bd0:	1000bc26 	beq	r2,zero,22ec4 <___vfprintf_internal_r+0x137c>
   22bd4:	d9403317 	ldw	r5,204(sp)
   22bd8:	84000044 	addi	r16,r16,1
   22bdc:	8c400044 	addi	r17,r17,1
   22be0:	28bfffc4 	addi	r2,r5,-1
   22be4:	1887883a 	add	r3,r3,r2
   22be8:	b0800115 	stw	r2,4(r22)
   22bec:	b4000015 	stw	r16,0(r22)
   22bf0:	d8c02015 	stw	r3,128(sp)
   22bf4:	dc401f15 	stw	r17,124(sp)
   22bf8:	008001c4 	movi	r2,7
   22bfc:	14414316 	blt	r2,r17,2310c <___vfprintf_internal_r+0x15c4>
   22c00:	b5800204 	addi	r22,r22,8
   22c04:	d9003a17 	ldw	r4,232(sp)
   22c08:	df0022c4 	addi	fp,sp,139
   22c0c:	8c400044 	addi	r17,r17,1
   22c10:	20c7883a 	add	r3,r4,r3
   22c14:	b7000015 	stw	fp,0(r22)
   22c18:	b1000115 	stw	r4,4(r22)
   22c1c:	d8c02015 	stw	r3,128(sp)
   22c20:	dc401f15 	stw	r17,124(sp)
   22c24:	008001c4 	movi	r2,7
   22c28:	14400e16 	blt	r2,r17,22c64 <___vfprintf_internal_r+0x111c>
   22c2c:	b2000204 	addi	r8,r22,8
   22c30:	003e3a06 	br	2251c <__alt_data_end+0xf802251c>
   22c34:	01010034 	movhi	r4,1024
   22c38:	21002d84 	addi	r4,r4,182
   22c3c:	d9002b15 	stw	r4,172(sp)
   22c40:	d9002b17 	ldw	r4,172(sp)
   22c44:	1c07883a 	add	r3,r3,r16
   22c48:	44000115 	stw	r16,4(r8)
   22c4c:	41000015 	stw	r4,0(r8)
   22c50:	10800044 	addi	r2,r2,1
   22c54:	d8c02015 	stw	r3,128(sp)
   22c58:	d8801f15 	stw	r2,124(sp)
   22c5c:	010001c4 	movi	r4,7
   22c60:	20be2d0e 	bge	r4,r2,22518 <__alt_data_end+0xf8022518>
   22c64:	d9002c17 	ldw	r4,176(sp)
   22c68:	d9801e04 	addi	r6,sp,120
   22c6c:	b80b883a 	mov	r5,r23
   22c70:	00287380 	call	28738 <__sprint_r>
   22c74:	103cb61e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22c78:	d8c02017 	ldw	r3,128(sp)
   22c7c:	da000404 	addi	r8,sp,16
   22c80:	003e2606 	br	2251c <__alt_data_end+0xf802251c>
   22c84:	d9002c17 	ldw	r4,176(sp)
   22c88:	d9801e04 	addi	r6,sp,120
   22c8c:	b80b883a 	mov	r5,r23
   22c90:	00287380 	call	28738 <__sprint_r>
   22c94:	103e5d26 	beq	r2,zero,2260c <__alt_data_end+0xf802260c>
   22c98:	003cad06 	br	21f50 <__alt_data_end+0xf8021f50>
   22c9c:	d9002c17 	ldw	r4,176(sp)
   22ca0:	d9801e04 	addi	r6,sp,120
   22ca4:	b80b883a 	mov	r5,r23
   22ca8:	00287380 	call	28738 <__sprint_r>
   22cac:	103ca81e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22cb0:	d8c02017 	ldw	r3,128(sp)
   22cb4:	da000404 	addi	r8,sp,16
   22cb8:	003e0b06 	br	224e8 <__alt_data_end+0xf80224e8>
   22cbc:	d9002c17 	ldw	r4,176(sp)
   22cc0:	d9801e04 	addi	r6,sp,120
   22cc4:	b80b883a 	mov	r5,r23
   22cc8:	00287380 	call	28738 <__sprint_r>
   22ccc:	103ca01e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22cd0:	d8c02017 	ldw	r3,128(sp)
   22cd4:	da000404 	addi	r8,sp,16
   22cd8:	003dbd06 	br	223d0 <__alt_data_end+0xf80223d0>
   22cdc:	d9002c17 	ldw	r4,176(sp)
   22ce0:	d9801e04 	addi	r6,sp,120
   22ce4:	b80b883a 	mov	r5,r23
   22ce8:	00287380 	call	28738 <__sprint_r>
   22cec:	103c981e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22cf0:	d8c02017 	ldw	r3,128(sp)
   22cf4:	da000404 	addi	r8,sp,16
   22cf8:	003dc306 	br	22408 <__alt_data_end+0xf8022408>
   22cfc:	d8802917 	ldw	r2,164(sp)
   22d00:	d8002785 	stb	zero,158(sp)
   22d04:	103f0616 	blt	r2,zero,22920 <__alt_data_end+0xf8022920>
   22d08:	00ffdfc4 	movi	r3,-129
   22d0c:	9d84b03a 	or	r2,r19,r22
   22d10:	90e4703a 	and	r18,r18,r3
   22d14:	103c6b26 	beq	r2,zero,21ec4 <__alt_data_end+0xf8021ec4>
   22d18:	0039883a 	mov	fp,zero
   22d1c:	003e7406 	br	226f0 <__alt_data_end+0xf80226f0>
   22d20:	9080040c 	andi	r2,r18,16
   22d24:	1001b326 	beq	r2,zero,233f4 <___vfprintf_internal_r+0x18ac>
   22d28:	d9002d17 	ldw	r4,180(sp)
   22d2c:	d9402917 	ldw	r5,164(sp)
   22d30:	d8002785 	stb	zero,158(sp)
   22d34:	20800104 	addi	r2,r4,4
   22d38:	24c00017 	ldw	r19,0(r4)
   22d3c:	002d883a 	mov	r22,zero
   22d40:	2801b516 	blt	r5,zero,23418 <___vfprintf_internal_r+0x18d0>
   22d44:	00ffdfc4 	movi	r3,-129
   22d48:	d8802d15 	stw	r2,180(sp)
   22d4c:	90e4703a 	and	r18,r18,r3
   22d50:	983d2726 	beq	r19,zero,221f0 <__alt_data_end+0xf80221f0>
   22d54:	0039883a 	mov	fp,zero
   22d58:	003d2a06 	br	22204 <__alt_data_end+0xf8022204>
   22d5c:	dc402617 	ldw	r17,152(sp)
   22d60:	0441d30e 	bge	zero,r17,234b0 <___vfprintf_internal_r+0x1968>
   22d64:	dc403217 	ldw	r17,200(sp)
   22d68:	d8803317 	ldw	r2,204(sp)
   22d6c:	1440010e 	bge	r2,r17,22d74 <___vfprintf_internal_r+0x122c>
   22d70:	1023883a 	mov	r17,r2
   22d74:	04400a0e 	bge	zero,r17,22da0 <___vfprintf_internal_r+0x1258>
   22d78:	d8801f17 	ldw	r2,124(sp)
   22d7c:	1c47883a 	add	r3,r3,r17
   22d80:	44000015 	stw	r16,0(r8)
   22d84:	10800044 	addi	r2,r2,1
   22d88:	44400115 	stw	r17,4(r8)
   22d8c:	d8c02015 	stw	r3,128(sp)
   22d90:	d8801f15 	stw	r2,124(sp)
   22d94:	010001c4 	movi	r4,7
   22d98:	20826516 	blt	r4,r2,23730 <___vfprintf_internal_r+0x1be8>
   22d9c:	42000204 	addi	r8,r8,8
   22da0:	88026116 	blt	r17,zero,23728 <___vfprintf_internal_r+0x1be0>
   22da4:	d9003217 	ldw	r4,200(sp)
   22da8:	2463c83a 	sub	r17,r4,r17
   22dac:	04407b0e 	bge	zero,r17,22f9c <___vfprintf_internal_r+0x1454>
   22db0:	05800404 	movi	r22,16
   22db4:	d8801f17 	ldw	r2,124(sp)
   22db8:	b4419d0e 	bge	r22,r17,23430 <___vfprintf_internal_r+0x18e8>
   22dbc:	01010034 	movhi	r4,1024
   22dc0:	21002d84 	addi	r4,r4,182
   22dc4:	d9002b15 	stw	r4,172(sp)
   22dc8:	070001c4 	movi	fp,7
   22dcc:	dcc02c17 	ldw	r19,176(sp)
   22dd0:	00000306 	br	22de0 <___vfprintf_internal_r+0x1298>
   22dd4:	42000204 	addi	r8,r8,8
   22dd8:	8c7ffc04 	addi	r17,r17,-16
   22ddc:	b441970e 	bge	r22,r17,2343c <___vfprintf_internal_r+0x18f4>
   22de0:	18c00404 	addi	r3,r3,16
   22de4:	10800044 	addi	r2,r2,1
   22de8:	45000015 	stw	r20,0(r8)
   22dec:	45800115 	stw	r22,4(r8)
   22df0:	d8c02015 	stw	r3,128(sp)
   22df4:	d8801f15 	stw	r2,124(sp)
   22df8:	e0bff60e 	bge	fp,r2,22dd4 <__alt_data_end+0xf8022dd4>
   22dfc:	d9801e04 	addi	r6,sp,120
   22e00:	b80b883a 	mov	r5,r23
   22e04:	9809883a 	mov	r4,r19
   22e08:	00287380 	call	28738 <__sprint_r>
   22e0c:	103c501e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22e10:	d8c02017 	ldw	r3,128(sp)
   22e14:	d8801f17 	ldw	r2,124(sp)
   22e18:	da000404 	addi	r8,sp,16
   22e1c:	003fee06 	br	22dd8 <__alt_data_end+0xf8022dd8>
   22e20:	d9002c17 	ldw	r4,176(sp)
   22e24:	d9801e04 	addi	r6,sp,120
   22e28:	b80b883a 	mov	r5,r23
   22e2c:	00287380 	call	28738 <__sprint_r>
   22e30:	103c471e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22e34:	d8c02017 	ldw	r3,128(sp)
   22e38:	df002787 	ldb	fp,158(sp)
   22e3c:	da000404 	addi	r8,sp,16
   22e40:	003d5606 	br	2239c <__alt_data_end+0xf802239c>
   22e44:	9080040c 	andi	r2,r18,16
   22e48:	10016126 	beq	r2,zero,233d0 <___vfprintf_internal_r+0x1888>
   22e4c:	d8802d17 	ldw	r2,180(sp)
   22e50:	14c00017 	ldw	r19,0(r2)
   22e54:	10800104 	addi	r2,r2,4
   22e58:	d8802d15 	stw	r2,180(sp)
   22e5c:	982dd7fa 	srai	r22,r19,31
   22e60:	b005883a 	mov	r2,r22
   22e64:	003c8206 	br	22070 <__alt_data_end+0xf8022070>
   22e68:	9080040c 	andi	r2,r18,16
   22e6c:	10003526 	beq	r2,zero,22f44 <___vfprintf_internal_r+0x13fc>
   22e70:	d9402d17 	ldw	r5,180(sp)
   22e74:	d8c02917 	ldw	r3,164(sp)
   22e78:	d8002785 	stb	zero,158(sp)
   22e7c:	28800104 	addi	r2,r5,4
   22e80:	2cc00017 	ldw	r19,0(r5)
   22e84:	002d883a 	mov	r22,zero
   22e88:	18003716 	blt	r3,zero,22f68 <___vfprintf_internal_r+0x1420>
   22e8c:	00ffdfc4 	movi	r3,-129
   22e90:	d8802d15 	stw	r2,180(sp)
   22e94:	90e4703a 	and	r18,r18,r3
   22e98:	0039883a 	mov	fp,zero
   22e9c:	983df326 	beq	r19,zero,2266c <__alt_data_end+0xf802266c>
   22ea0:	00800244 	movi	r2,9
   22ea4:	14fc7b36 	bltu	r2,r19,22094 <__alt_data_end+0xf8022094>
   22ea8:	d8c02817 	ldw	r3,160(sp)
   22eac:	dc001dc4 	addi	r16,sp,119
   22eb0:	9cc00c04 	addi	r19,r19,48
   22eb4:	1c07c83a 	sub	r3,r3,r16
   22eb8:	dcc01dc5 	stb	r19,119(sp)
   22ebc:	d8c02e15 	stw	r3,184(sp)
   22ec0:	003ce806 	br	22264 <__alt_data_end+0xf8022264>
   22ec4:	d8803317 	ldw	r2,204(sp)
   22ec8:	143fffc4 	addi	r16,r2,-1
   22ecc:	043f4d0e 	bge	zero,r16,22c04 <__alt_data_end+0xf8022c04>
   22ed0:	07000404 	movi	fp,16
   22ed4:	e400810e 	bge	fp,r16,230dc <___vfprintf_internal_r+0x1594>
   22ed8:	01410034 	movhi	r5,1024
   22edc:	29402d84 	addi	r5,r5,182
   22ee0:	d9402b15 	stw	r5,172(sp)
   22ee4:	01c001c4 	movi	r7,7
   22ee8:	dcc02c17 	ldw	r19,176(sp)
   22eec:	00000306 	br	22efc <___vfprintf_internal_r+0x13b4>
   22ef0:	b5800204 	addi	r22,r22,8
   22ef4:	843ffc04 	addi	r16,r16,-16
   22ef8:	e4007b0e 	bge	fp,r16,230e8 <___vfprintf_internal_r+0x15a0>
   22efc:	18c00404 	addi	r3,r3,16
   22f00:	8c400044 	addi	r17,r17,1
   22f04:	b5000015 	stw	r20,0(r22)
   22f08:	b7000115 	stw	fp,4(r22)
   22f0c:	d8c02015 	stw	r3,128(sp)
   22f10:	dc401f15 	stw	r17,124(sp)
   22f14:	3c7ff60e 	bge	r7,r17,22ef0 <__alt_data_end+0xf8022ef0>
   22f18:	d9801e04 	addi	r6,sp,120
   22f1c:	b80b883a 	mov	r5,r23
   22f20:	9809883a 	mov	r4,r19
   22f24:	d9c03c15 	stw	r7,240(sp)
   22f28:	00287380 	call	28738 <__sprint_r>
   22f2c:	d9c03c17 	ldw	r7,240(sp)
   22f30:	103c071e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22f34:	d8c02017 	ldw	r3,128(sp)
   22f38:	dc401f17 	ldw	r17,124(sp)
   22f3c:	dd800404 	addi	r22,sp,16
   22f40:	003fec06 	br	22ef4 <__alt_data_end+0xf8022ef4>
   22f44:	9080100c 	andi	r2,r18,64
   22f48:	d8002785 	stb	zero,158(sp)
   22f4c:	10010e26 	beq	r2,zero,23388 <___vfprintf_internal_r+0x1840>
   22f50:	d9002d17 	ldw	r4,180(sp)
   22f54:	d9402917 	ldw	r5,164(sp)
   22f58:	002d883a 	mov	r22,zero
   22f5c:	20800104 	addi	r2,r4,4
   22f60:	24c0000b 	ldhu	r19,0(r4)
   22f64:	283fc90e 	bge	r5,zero,22e8c <__alt_data_end+0xf8022e8c>
   22f68:	d8802d15 	stw	r2,180(sp)
   22f6c:	0039883a 	mov	fp,zero
   22f70:	9d84b03a 	or	r2,r19,r22
   22f74:	103c461e 	bne	r2,zero,22090 <__alt_data_end+0xf8022090>
   22f78:	00800044 	movi	r2,1
   22f7c:	003e6c06 	br	22930 <__alt_data_end+0xf8022930>
   22f80:	d9002c17 	ldw	r4,176(sp)
   22f84:	d9801e04 	addi	r6,sp,120
   22f88:	b80b883a 	mov	r5,r23
   22f8c:	00287380 	call	28738 <__sprint_r>
   22f90:	103bef1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   22f94:	d8c02017 	ldw	r3,128(sp)
   22f98:	da000404 	addi	r8,sp,16
   22f9c:	d9003217 	ldw	r4,200(sp)
   22fa0:	d8802617 	ldw	r2,152(sp)
   22fa4:	d9403317 	ldw	r5,204(sp)
   22fa8:	8123883a 	add	r17,r16,r4
   22fac:	11400216 	blt	r2,r5,22fb8 <___vfprintf_internal_r+0x1470>
   22fb0:	9100004c 	andi	r4,r18,1
   22fb4:	20000d26 	beq	r4,zero,22fec <___vfprintf_internal_r+0x14a4>
   22fb8:	d9003717 	ldw	r4,220(sp)
   22fbc:	d9403417 	ldw	r5,208(sp)
   22fc0:	1907883a 	add	r3,r3,r4
   22fc4:	d9001f17 	ldw	r4,124(sp)
   22fc8:	41400015 	stw	r5,0(r8)
   22fcc:	d9403717 	ldw	r5,220(sp)
   22fd0:	21000044 	addi	r4,r4,1
   22fd4:	d8c02015 	stw	r3,128(sp)
   22fd8:	41400115 	stw	r5,4(r8)
   22fdc:	d9001f15 	stw	r4,124(sp)
   22fe0:	014001c4 	movi	r5,7
   22fe4:	2901e816 	blt	r5,r4,23788 <___vfprintf_internal_r+0x1c40>
   22fe8:	42000204 	addi	r8,r8,8
   22fec:	d9003317 	ldw	r4,204(sp)
   22ff0:	8121883a 	add	r16,r16,r4
   22ff4:	2085c83a 	sub	r2,r4,r2
   22ff8:	8461c83a 	sub	r16,r16,r17
   22ffc:	1400010e 	bge	r2,r16,23004 <___vfprintf_internal_r+0x14bc>
   23000:	1021883a 	mov	r16,r2
   23004:	04000a0e 	bge	zero,r16,23030 <___vfprintf_internal_r+0x14e8>
   23008:	d9001f17 	ldw	r4,124(sp)
   2300c:	1c07883a 	add	r3,r3,r16
   23010:	44400015 	stw	r17,0(r8)
   23014:	21000044 	addi	r4,r4,1
   23018:	44000115 	stw	r16,4(r8)
   2301c:	d8c02015 	stw	r3,128(sp)
   23020:	d9001f15 	stw	r4,124(sp)
   23024:	014001c4 	movi	r5,7
   23028:	2901fb16 	blt	r5,r4,23818 <___vfprintf_internal_r+0x1cd0>
   2302c:	42000204 	addi	r8,r8,8
   23030:	8001f716 	blt	r16,zero,23810 <___vfprintf_internal_r+0x1cc8>
   23034:	1421c83a 	sub	r16,r2,r16
   23038:	043d380e 	bge	zero,r16,2251c <__alt_data_end+0xf802251c>
   2303c:	04400404 	movi	r17,16
   23040:	d8801f17 	ldw	r2,124(sp)
   23044:	8c3efb0e 	bge	r17,r16,22c34 <__alt_data_end+0xf8022c34>
   23048:	01410034 	movhi	r5,1024
   2304c:	29402d84 	addi	r5,r5,182
   23050:	d9402b15 	stw	r5,172(sp)
   23054:	058001c4 	movi	r22,7
   23058:	dcc02c17 	ldw	r19,176(sp)
   2305c:	00000306 	br	2306c <___vfprintf_internal_r+0x1524>
   23060:	42000204 	addi	r8,r8,8
   23064:	843ffc04 	addi	r16,r16,-16
   23068:	8c3ef50e 	bge	r17,r16,22c40 <__alt_data_end+0xf8022c40>
   2306c:	18c00404 	addi	r3,r3,16
   23070:	10800044 	addi	r2,r2,1
   23074:	45000015 	stw	r20,0(r8)
   23078:	44400115 	stw	r17,4(r8)
   2307c:	d8c02015 	stw	r3,128(sp)
   23080:	d8801f15 	stw	r2,124(sp)
   23084:	b0bff60e 	bge	r22,r2,23060 <__alt_data_end+0xf8023060>
   23088:	d9801e04 	addi	r6,sp,120
   2308c:	b80b883a 	mov	r5,r23
   23090:	9809883a 	mov	r4,r19
   23094:	00287380 	call	28738 <__sprint_r>
   23098:	103bad1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   2309c:	d8c02017 	ldw	r3,128(sp)
   230a0:	d8801f17 	ldw	r2,124(sp)
   230a4:	da000404 	addi	r8,sp,16
   230a8:	003fee06 	br	23064 <__alt_data_end+0xf8023064>
   230ac:	9088703a 	and	r4,r18,r2
   230b0:	203eab1e 	bne	r4,zero,22b60 <__alt_data_end+0xf8022b60>
   230b4:	dc401f17 	ldw	r17,124(sp)
   230b8:	40800115 	stw	r2,4(r8)
   230bc:	44000015 	stw	r16,0(r8)
   230c0:	8c400044 	addi	r17,r17,1
   230c4:	d8c02015 	stw	r3,128(sp)
   230c8:	dc401f15 	stw	r17,124(sp)
   230cc:	008001c4 	movi	r2,7
   230d0:	14400e16 	blt	r2,r17,2310c <___vfprintf_internal_r+0x15c4>
   230d4:	45800204 	addi	r22,r8,8
   230d8:	003eca06 	br	22c04 <__alt_data_end+0xf8022c04>
   230dc:	01010034 	movhi	r4,1024
   230e0:	21002d84 	addi	r4,r4,182
   230e4:	d9002b15 	stw	r4,172(sp)
   230e8:	d8802b17 	ldw	r2,172(sp)
   230ec:	1c07883a 	add	r3,r3,r16
   230f0:	8c400044 	addi	r17,r17,1
   230f4:	b0800015 	stw	r2,0(r22)
   230f8:	b4000115 	stw	r16,4(r22)
   230fc:	d8c02015 	stw	r3,128(sp)
   23100:	dc401f15 	stw	r17,124(sp)
   23104:	008001c4 	movi	r2,7
   23108:	147ebd0e 	bge	r2,r17,22c00 <__alt_data_end+0xf8022c00>
   2310c:	d9002c17 	ldw	r4,176(sp)
   23110:	d9801e04 	addi	r6,sp,120
   23114:	b80b883a 	mov	r5,r23
   23118:	00287380 	call	28738 <__sprint_r>
   2311c:	103b8c1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   23120:	d8c02017 	ldw	r3,128(sp)
   23124:	dc401f17 	ldw	r17,124(sp)
   23128:	dd800404 	addi	r22,sp,16
   2312c:	003eb506 	br	22c04 <__alt_data_end+0xf8022c04>
   23130:	d9002c17 	ldw	r4,176(sp)
   23134:	d9801e04 	addi	r6,sp,120
   23138:	b80b883a 	mov	r5,r23
   2313c:	00287380 	call	28738 <__sprint_r>
   23140:	103b831e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   23144:	d8c02017 	ldw	r3,128(sp)
   23148:	dc401f17 	ldw	r17,124(sp)
   2314c:	da000404 	addi	r8,sp,16
   23150:	003e8d06 	br	22b88 <__alt_data_end+0xf8022b88>
   23154:	d9002c17 	ldw	r4,176(sp)
   23158:	d9801e04 	addi	r6,sp,120
   2315c:	b80b883a 	mov	r5,r23
   23160:	00287380 	call	28738 <__sprint_r>
   23164:	103b7a1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   23168:	d8c02017 	ldw	r3,128(sp)
   2316c:	dc401f17 	ldw	r17,124(sp)
   23170:	dd800404 	addi	r22,sp,16
   23174:	003e8f06 	br	22bb4 <__alt_data_end+0xf8022bb4>
   23178:	0027883a 	mov	r19,zero
   2317c:	003f4a06 	br	22ea8 <__alt_data_end+0xf8022ea8>
   23180:	d9002c17 	ldw	r4,176(sp)
   23184:	d9801e04 	addi	r6,sp,120
   23188:	b80b883a 	mov	r5,r23
   2318c:	00287380 	call	28738 <__sprint_r>
   23190:	103b6f1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   23194:	d8c02017 	ldw	r3,128(sp)
   23198:	da000404 	addi	r8,sp,16
   2319c:	003c9d06 	br	22414 <__alt_data_end+0xf8022414>
   231a0:	04e7c83a 	sub	r19,zero,r19
   231a4:	9804c03a 	cmpne	r2,r19,zero
   231a8:	05adc83a 	sub	r22,zero,r22
   231ac:	b0adc83a 	sub	r22,r22,r2
   231b0:	d8802917 	ldw	r2,164(sp)
   231b4:	07000b44 	movi	fp,45
   231b8:	df002785 	stb	fp,158(sp)
   231bc:	10017b16 	blt	r2,zero,237ac <___vfprintf_internal_r+0x1c64>
   231c0:	00bfdfc4 	movi	r2,-129
   231c4:	90a4703a 	and	r18,r18,r2
   231c8:	003bb106 	br	22090 <__alt_data_end+0xf8022090>
   231cc:	d9003617 	ldw	r4,216(sp)
   231d0:	d9403817 	ldw	r5,224(sp)
   231d4:	da003d15 	stw	r8,244(sp)
   231d8:	00284ec0 	call	284ec <__fpclassifyd>
   231dc:	da003d17 	ldw	r8,244(sp)
   231e0:	1000f026 	beq	r2,zero,235a4 <___vfprintf_internal_r+0x1a5c>
   231e4:	d9002917 	ldw	r4,164(sp)
   231e8:	05bff7c4 	movi	r22,-33
   231ec:	00bfffc4 	movi	r2,-1
   231f0:	8dac703a 	and	r22,r17,r22
   231f4:	20820026 	beq	r4,r2,239f8 <___vfprintf_internal_r+0x1eb0>
   231f8:	008011c4 	movi	r2,71
   231fc:	b081f726 	beq	r22,r2,239dc <___vfprintf_internal_r+0x1e94>
   23200:	d9003817 	ldw	r4,224(sp)
   23204:	90c04014 	ori	r3,r18,256
   23208:	d8c02b15 	stw	r3,172(sp)
   2320c:	20021516 	blt	r4,zero,23a64 <___vfprintf_internal_r+0x1f1c>
   23210:	dcc03817 	ldw	r19,224(sp)
   23214:	d8002a05 	stb	zero,168(sp)
   23218:	00801984 	movi	r2,102
   2321c:	8881f926 	beq	r17,r2,23a04 <___vfprintf_internal_r+0x1ebc>
   23220:	00801184 	movi	r2,70
   23224:	88821c26 	beq	r17,r2,23a98 <___vfprintf_internal_r+0x1f50>
   23228:	00801144 	movi	r2,69
   2322c:	b081ef26 	beq	r22,r2,239ec <___vfprintf_internal_r+0x1ea4>
   23230:	d8c02917 	ldw	r3,164(sp)
   23234:	d8802104 	addi	r2,sp,132
   23238:	d8800315 	stw	r2,12(sp)
   2323c:	d9403617 	ldw	r5,216(sp)
   23240:	d8802504 	addi	r2,sp,148
   23244:	d9002c17 	ldw	r4,176(sp)
   23248:	d8800215 	stw	r2,8(sp)
   2324c:	d8802604 	addi	r2,sp,152
   23250:	d8c00015 	stw	r3,0(sp)
   23254:	d8800115 	stw	r2,4(sp)
   23258:	01c00084 	movi	r7,2
   2325c:	980d883a 	mov	r6,r19
   23260:	d8c03c15 	stw	r3,240(sp)
   23264:	da003d15 	stw	r8,244(sp)
   23268:	00242200 	call	24220 <_dtoa_r>
   2326c:	1021883a 	mov	r16,r2
   23270:	008019c4 	movi	r2,103
   23274:	d8c03c17 	ldw	r3,240(sp)
   23278:	da003d17 	ldw	r8,244(sp)
   2327c:	88817126 	beq	r17,r2,23844 <___vfprintf_internal_r+0x1cfc>
   23280:	008011c4 	movi	r2,71
   23284:	88829226 	beq	r17,r2,23cd0 <___vfprintf_internal_r+0x2188>
   23288:	80f9883a 	add	fp,r16,r3
   2328c:	d9003617 	ldw	r4,216(sp)
   23290:	000d883a 	mov	r6,zero
   23294:	000f883a 	mov	r7,zero
   23298:	980b883a 	mov	r5,r19
   2329c:	da003d15 	stw	r8,244(sp)
   232a0:	002c18c0 	call	2c18c <__eqdf2>
   232a4:	da003d17 	ldw	r8,244(sp)
   232a8:	10018d26 	beq	r2,zero,238e0 <___vfprintf_internal_r+0x1d98>
   232ac:	d8802117 	ldw	r2,132(sp)
   232b0:	1700062e 	bgeu	r2,fp,232cc <___vfprintf_internal_r+0x1784>
   232b4:	01000c04 	movi	r4,48
   232b8:	10c00044 	addi	r3,r2,1
   232bc:	d8c02115 	stw	r3,132(sp)
   232c0:	11000005 	stb	r4,0(r2)
   232c4:	d8802117 	ldw	r2,132(sp)
   232c8:	173ffb36 	bltu	r2,fp,232b8 <__alt_data_end+0xf80232b8>
   232cc:	1405c83a 	sub	r2,r2,r16
   232d0:	d8803315 	stw	r2,204(sp)
   232d4:	008011c4 	movi	r2,71
   232d8:	b0817626 	beq	r22,r2,238b4 <___vfprintf_internal_r+0x1d6c>
   232dc:	00801944 	movi	r2,101
   232e0:	1442810e 	bge	r2,r17,23ce8 <___vfprintf_internal_r+0x21a0>
   232e4:	d8c02617 	ldw	r3,152(sp)
   232e8:	00801984 	movi	r2,102
   232ec:	d8c03215 	stw	r3,200(sp)
   232f0:	8881fe26 	beq	r17,r2,23aec <___vfprintf_internal_r+0x1fa4>
   232f4:	d8c03217 	ldw	r3,200(sp)
   232f8:	d9003317 	ldw	r4,204(sp)
   232fc:	1901dd16 	blt	r3,r4,23a74 <___vfprintf_internal_r+0x1f2c>
   23300:	9480004c 	andi	r18,r18,1
   23304:	90022b1e 	bne	r18,zero,23bb4 <___vfprintf_internal_r+0x206c>
   23308:	1805883a 	mov	r2,r3
   2330c:	18028016 	blt	r3,zero,23d10 <___vfprintf_internal_r+0x21c8>
   23310:	d8c03217 	ldw	r3,200(sp)
   23314:	044019c4 	movi	r17,103
   23318:	d8c02e15 	stw	r3,184(sp)
   2331c:	df002a07 	ldb	fp,168(sp)
   23320:	e001531e 	bne	fp,zero,23870 <___vfprintf_internal_r+0x1d28>
   23324:	df002783 	ldbu	fp,158(sp)
   23328:	d8802a15 	stw	r2,168(sp)
   2332c:	dc802b17 	ldw	r18,172(sp)
   23330:	d8002915 	stw	zero,164(sp)
   23334:	003bd106 	br	2227c <__alt_data_end+0xf802227c>
   23338:	d8802d17 	ldw	r2,180(sp)
   2333c:	d8c02d17 	ldw	r3,180(sp)
   23340:	d9002d17 	ldw	r4,180(sp)
   23344:	10800017 	ldw	r2,0(r2)
   23348:	18c00117 	ldw	r3,4(r3)
   2334c:	21000204 	addi	r4,r4,8
   23350:	d8803615 	stw	r2,216(sp)
   23354:	d8c03815 	stw	r3,224(sp)
   23358:	d9002d15 	stw	r4,180(sp)
   2335c:	003b7506 	br	22134 <__alt_data_end+0xf8022134>
   23360:	ac400007 	ldb	r17,0(r21)
   23364:	003a5906 	br	21ccc <__alt_data_end+0xf8021ccc>
   23368:	9080100c 	andi	r2,r18,64
   2336c:	1000a826 	beq	r2,zero,23610 <___vfprintf_internal_r+0x1ac8>
   23370:	d9002d17 	ldw	r4,180(sp)
   23374:	002d883a 	mov	r22,zero
   23378:	24c0000b 	ldhu	r19,0(r4)
   2337c:	21000104 	addi	r4,r4,4
   23380:	d9002d15 	stw	r4,180(sp)
   23384:	003ccb06 	br	226b4 <__alt_data_end+0xf80226b4>
   23388:	d8c02d17 	ldw	r3,180(sp)
   2338c:	d9002917 	ldw	r4,164(sp)
   23390:	002d883a 	mov	r22,zero
   23394:	18800104 	addi	r2,r3,4
   23398:	1cc00017 	ldw	r19,0(r3)
   2339c:	203ebb0e 	bge	r4,zero,22e8c <__alt_data_end+0xf8022e8c>
   233a0:	003ef106 	br	22f68 <__alt_data_end+0xf8022f68>
   233a4:	9080040c 	andi	r2,r18,16
   233a8:	1000921e 	bne	r2,zero,235f4 <___vfprintf_internal_r+0x1aac>
   233ac:	9480100c 	andi	r18,r18,64
   233b0:	90013926 	beq	r18,zero,23898 <___vfprintf_internal_r+0x1d50>
   233b4:	d9002d17 	ldw	r4,180(sp)
   233b8:	d9402f17 	ldw	r5,188(sp)
   233bc:	20800017 	ldw	r2,0(r4)
   233c0:	21000104 	addi	r4,r4,4
   233c4:	d9002d15 	stw	r4,180(sp)
   233c8:	1140000d 	sth	r5,0(r2)
   233cc:	003a1606 	br	21c28 <__alt_data_end+0xf8021c28>
   233d0:	9080100c 	andi	r2,r18,64
   233d4:	10008026 	beq	r2,zero,235d8 <___vfprintf_internal_r+0x1a90>
   233d8:	d8c02d17 	ldw	r3,180(sp)
   233dc:	1cc0000f 	ldh	r19,0(r3)
   233e0:	18c00104 	addi	r3,r3,4
   233e4:	d8c02d15 	stw	r3,180(sp)
   233e8:	982dd7fa 	srai	r22,r19,31
   233ec:	b005883a 	mov	r2,r22
   233f0:	003b1f06 	br	22070 <__alt_data_end+0xf8022070>
   233f4:	9080100c 	andi	r2,r18,64
   233f8:	d8002785 	stb	zero,158(sp)
   233fc:	10008a1e 	bne	r2,zero,23628 <___vfprintf_internal_r+0x1ae0>
   23400:	d9402d17 	ldw	r5,180(sp)
   23404:	d8c02917 	ldw	r3,164(sp)
   23408:	002d883a 	mov	r22,zero
   2340c:	28800104 	addi	r2,r5,4
   23410:	2cc00017 	ldw	r19,0(r5)
   23414:	183e4b0e 	bge	r3,zero,22d44 <__alt_data_end+0xf8022d44>
   23418:	9d86b03a 	or	r3,r19,r22
   2341c:	d8802d15 	stw	r2,180(sp)
   23420:	183e4c1e 	bne	r3,zero,22d54 <__alt_data_end+0xf8022d54>
   23424:	0039883a 	mov	fp,zero
   23428:	0005883a 	mov	r2,zero
   2342c:	003d4006 	br	22930 <__alt_data_end+0xf8022930>
   23430:	01410034 	movhi	r5,1024
   23434:	29402d84 	addi	r5,r5,182
   23438:	d9402b15 	stw	r5,172(sp)
   2343c:	d9402b17 	ldw	r5,172(sp)
   23440:	1c47883a 	add	r3,r3,r17
   23444:	10800044 	addi	r2,r2,1
   23448:	41400015 	stw	r5,0(r8)
   2344c:	44400115 	stw	r17,4(r8)
   23450:	d8c02015 	stw	r3,128(sp)
   23454:	d8801f15 	stw	r2,124(sp)
   23458:	010001c4 	movi	r4,7
   2345c:	20bec816 	blt	r4,r2,22f80 <__alt_data_end+0xf8022f80>
   23460:	42000204 	addi	r8,r8,8
   23464:	003ecd06 	br	22f9c <__alt_data_end+0xf8022f9c>
   23468:	d9002917 	ldw	r4,164(sp)
   2346c:	d8002785 	stb	zero,158(sp)
   23470:	203d2d16 	blt	r4,zero,22928 <__alt_data_end+0xf8022928>
   23474:	00bfdfc4 	movi	r2,-129
   23478:	90a4703a 	and	r18,r18,r2
   2347c:	003a9106 	br	21ec4 <__alt_data_end+0xf8021ec4>
   23480:	01010034 	movhi	r4,1024
   23484:	21002d84 	addi	r4,r4,182
   23488:	d9002b15 	stw	r4,172(sp)
   2348c:	003c0c06 	br	224c0 <__alt_data_end+0xf80224c0>
   23490:	d9002c17 	ldw	r4,176(sp)
   23494:	d9801e04 	addi	r6,sp,120
   23498:	b80b883a 	mov	r5,r23
   2349c:	00287380 	call	28738 <__sprint_r>
   234a0:	103aab1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   234a4:	d8c02017 	ldw	r3,128(sp)
   234a8:	da000404 	addi	r8,sp,16
   234ac:	003d4106 	br	229b4 <__alt_data_end+0xf80229b4>
   234b0:	d8801f17 	ldw	r2,124(sp)
   234b4:	01410034 	movhi	r5,1024
   234b8:	01000044 	movi	r4,1
   234bc:	18c00044 	addi	r3,r3,1
   234c0:	10800044 	addi	r2,r2,1
   234c4:	29402d04 	addi	r5,r5,180
   234c8:	41000115 	stw	r4,4(r8)
   234cc:	41400015 	stw	r5,0(r8)
   234d0:	d8c02015 	stw	r3,128(sp)
   234d4:	d8801f15 	stw	r2,124(sp)
   234d8:	010001c4 	movi	r4,7
   234dc:	20805c16 	blt	r4,r2,23650 <___vfprintf_internal_r+0x1b08>
   234e0:	42000204 	addi	r8,r8,8
   234e4:	8800041e 	bne	r17,zero,234f8 <___vfprintf_internal_r+0x19b0>
   234e8:	d8803317 	ldw	r2,204(sp)
   234ec:	1000021e 	bne	r2,zero,234f8 <___vfprintf_internal_r+0x19b0>
   234f0:	9080004c 	andi	r2,r18,1
   234f4:	103c0926 	beq	r2,zero,2251c <__alt_data_end+0xf802251c>
   234f8:	d9003717 	ldw	r4,220(sp)
   234fc:	d8801f17 	ldw	r2,124(sp)
   23500:	d9403417 	ldw	r5,208(sp)
   23504:	20c7883a 	add	r3,r4,r3
   23508:	10800044 	addi	r2,r2,1
   2350c:	41000115 	stw	r4,4(r8)
   23510:	41400015 	stw	r5,0(r8)
   23514:	d8c02015 	stw	r3,128(sp)
   23518:	d8801f15 	stw	r2,124(sp)
   2351c:	010001c4 	movi	r4,7
   23520:	20812116 	blt	r4,r2,239a8 <___vfprintf_internal_r+0x1e60>
   23524:	42000204 	addi	r8,r8,8
   23528:	0463c83a 	sub	r17,zero,r17
   2352c:	0440730e 	bge	zero,r17,236fc <___vfprintf_internal_r+0x1bb4>
   23530:	05800404 	movi	r22,16
   23534:	b440860e 	bge	r22,r17,23750 <___vfprintf_internal_r+0x1c08>
   23538:	01410034 	movhi	r5,1024
   2353c:	29402d84 	addi	r5,r5,182
   23540:	d9402b15 	stw	r5,172(sp)
   23544:	070001c4 	movi	fp,7
   23548:	dcc02c17 	ldw	r19,176(sp)
   2354c:	00000306 	br	2355c <___vfprintf_internal_r+0x1a14>
   23550:	42000204 	addi	r8,r8,8
   23554:	8c7ffc04 	addi	r17,r17,-16
   23558:	b440800e 	bge	r22,r17,2375c <___vfprintf_internal_r+0x1c14>
   2355c:	18c00404 	addi	r3,r3,16
   23560:	10800044 	addi	r2,r2,1
   23564:	45000015 	stw	r20,0(r8)
   23568:	45800115 	stw	r22,4(r8)
   2356c:	d8c02015 	stw	r3,128(sp)
   23570:	d8801f15 	stw	r2,124(sp)
   23574:	e0bff60e 	bge	fp,r2,23550 <__alt_data_end+0xf8023550>
   23578:	d9801e04 	addi	r6,sp,120
   2357c:	b80b883a 	mov	r5,r23
   23580:	9809883a 	mov	r4,r19
   23584:	00287380 	call	28738 <__sprint_r>
   23588:	103a711e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   2358c:	d8c02017 	ldw	r3,128(sp)
   23590:	d8801f17 	ldw	r2,124(sp)
   23594:	da000404 	addi	r8,sp,16
   23598:	003fee06 	br	23554 <__alt_data_end+0xf8023554>
   2359c:	00bfffc4 	movi	r2,-1
   235a0:	003a6f06 	br	21f60 <__alt_data_end+0xf8021f60>
   235a4:	008011c4 	movi	r2,71
   235a8:	1440b816 	blt	r2,r17,2388c <___vfprintf_internal_r+0x1d44>
   235ac:	04010034 	movhi	r16,1024
   235b0:	84001f04 	addi	r16,r16,124
   235b4:	00c000c4 	movi	r3,3
   235b8:	00bfdfc4 	movi	r2,-129
   235bc:	d8c02a15 	stw	r3,168(sp)
   235c0:	90a4703a 	and	r18,r18,r2
   235c4:	df002783 	ldbu	fp,158(sp)
   235c8:	d8c02e15 	stw	r3,184(sp)
   235cc:	d8002915 	stw	zero,164(sp)
   235d0:	d8003215 	stw	zero,200(sp)
   235d4:	003b2906 	br	2227c <__alt_data_end+0xf802227c>
   235d8:	d9002d17 	ldw	r4,180(sp)
   235dc:	24c00017 	ldw	r19,0(r4)
   235e0:	21000104 	addi	r4,r4,4
   235e4:	d9002d15 	stw	r4,180(sp)
   235e8:	982dd7fa 	srai	r22,r19,31
   235ec:	b005883a 	mov	r2,r22
   235f0:	003a9f06 	br	22070 <__alt_data_end+0xf8022070>
   235f4:	d9402d17 	ldw	r5,180(sp)
   235f8:	d8c02f17 	ldw	r3,188(sp)
   235fc:	28800017 	ldw	r2,0(r5)
   23600:	29400104 	addi	r5,r5,4
   23604:	d9402d15 	stw	r5,180(sp)
   23608:	10c00015 	stw	r3,0(r2)
   2360c:	00398606 	br	21c28 <__alt_data_end+0xf8021c28>
   23610:	d9402d17 	ldw	r5,180(sp)
   23614:	002d883a 	mov	r22,zero
   23618:	2cc00017 	ldw	r19,0(r5)
   2361c:	29400104 	addi	r5,r5,4
   23620:	d9402d15 	stw	r5,180(sp)
   23624:	003c2306 	br	226b4 <__alt_data_end+0xf80226b4>
   23628:	d8c02d17 	ldw	r3,180(sp)
   2362c:	d9002917 	ldw	r4,164(sp)
   23630:	002d883a 	mov	r22,zero
   23634:	18800104 	addi	r2,r3,4
   23638:	1cc0000b 	ldhu	r19,0(r3)
   2363c:	203dc10e 	bge	r4,zero,22d44 <__alt_data_end+0xf8022d44>
   23640:	003f7506 	br	23418 <__alt_data_end+0xf8023418>
   23644:	04010034 	movhi	r16,1024
   23648:	84001d04 	addi	r16,r16,116
   2364c:	003acc06 	br	22180 <__alt_data_end+0xf8022180>
   23650:	d9002c17 	ldw	r4,176(sp)
   23654:	d9801e04 	addi	r6,sp,120
   23658:	b80b883a 	mov	r5,r23
   2365c:	00287380 	call	28738 <__sprint_r>
   23660:	103a3b1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   23664:	dc402617 	ldw	r17,152(sp)
   23668:	d8c02017 	ldw	r3,128(sp)
   2366c:	da000404 	addi	r8,sp,16
   23670:	003f9c06 	br	234e4 <__alt_data_end+0xf80234e4>
   23674:	ac400043 	ldbu	r17,1(r21)
   23678:	94800814 	ori	r18,r18,32
   2367c:	ad400044 	addi	r21,r21,1
   23680:	8c403fcc 	andi	r17,r17,255
   23684:	8c40201c 	xori	r17,r17,128
   23688:	8c7fe004 	addi	r17,r17,-128
   2368c:	00398f06 	br	21ccc <__alt_data_end+0xf8021ccc>
   23690:	d8c02d15 	stw	r3,180(sp)
   23694:	0039883a 	mov	fp,zero
   23698:	003e3506 	br	22f70 <__alt_data_end+0xf8022f70>
   2369c:	d9002c17 	ldw	r4,176(sp)
   236a0:	d9801e04 	addi	r6,sp,120
   236a4:	b80b883a 	mov	r5,r23
   236a8:	00287380 	call	28738 <__sprint_r>
   236ac:	103a281e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   236b0:	d8c02017 	ldw	r3,128(sp)
   236b4:	da000404 	addi	r8,sp,16
   236b8:	003cd006 	br	229fc <__alt_data_end+0xf80229fc>
   236bc:	8009883a 	mov	r4,r16
   236c0:	da003d15 	stw	r8,244(sp)
   236c4:	0021ab00 	call	21ab0 <strlen>
   236c8:	d8802e15 	stw	r2,184(sp)
   236cc:	da003d17 	ldw	r8,244(sp)
   236d0:	103c340e 	bge	r2,zero,227a4 <__alt_data_end+0xf80227a4>
   236d4:	0005883a 	mov	r2,zero
   236d8:	003c3206 	br	227a4 <__alt_data_end+0xf80227a4>
   236dc:	d9002c17 	ldw	r4,176(sp)
   236e0:	d9801e04 	addi	r6,sp,120
   236e4:	b80b883a 	mov	r5,r23
   236e8:	00287380 	call	28738 <__sprint_r>
   236ec:	103a181e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   236f0:	d8c02017 	ldw	r3,128(sp)
   236f4:	d8801f17 	ldw	r2,124(sp)
   236f8:	da000404 	addi	r8,sp,16
   236fc:	d9403317 	ldw	r5,204(sp)
   23700:	10800044 	addi	r2,r2,1
   23704:	44000015 	stw	r16,0(r8)
   23708:	28c7883a 	add	r3,r5,r3
   2370c:	003b7d06 	br	22504 <__alt_data_end+0xf8022504>
   23710:	01010034 	movhi	r4,1024
   23714:	21003184 	addi	r4,r4,198
   23718:	d9003515 	stw	r4,212(sp)
   2371c:	003b1406 	br	22370 <__alt_data_end+0xf8022370>
   23720:	013fffc4 	movi	r4,-1
   23724:	003a3506 	br	21ffc <__alt_data_end+0xf8021ffc>
   23728:	0023883a 	mov	r17,zero
   2372c:	003d9d06 	br	22da4 <__alt_data_end+0xf8022da4>
   23730:	d9002c17 	ldw	r4,176(sp)
   23734:	d9801e04 	addi	r6,sp,120
   23738:	b80b883a 	mov	r5,r23
   2373c:	00287380 	call	28738 <__sprint_r>
   23740:	103a031e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   23744:	d8c02017 	ldw	r3,128(sp)
   23748:	da000404 	addi	r8,sp,16
   2374c:	003d9406 	br	22da0 <__alt_data_end+0xf8022da0>
   23750:	01010034 	movhi	r4,1024
   23754:	21002d84 	addi	r4,r4,182
   23758:	d9002b15 	stw	r4,172(sp)
   2375c:	d9002b17 	ldw	r4,172(sp)
   23760:	1c47883a 	add	r3,r3,r17
   23764:	10800044 	addi	r2,r2,1
   23768:	41000015 	stw	r4,0(r8)
   2376c:	44400115 	stw	r17,4(r8)
   23770:	d8c02015 	stw	r3,128(sp)
   23774:	d8801f15 	stw	r2,124(sp)
   23778:	010001c4 	movi	r4,7
   2377c:	20bfd716 	blt	r4,r2,236dc <__alt_data_end+0xf80236dc>
   23780:	42000204 	addi	r8,r8,8
   23784:	003fdd06 	br	236fc <__alt_data_end+0xf80236fc>
   23788:	d9002c17 	ldw	r4,176(sp)
   2378c:	d9801e04 	addi	r6,sp,120
   23790:	b80b883a 	mov	r5,r23
   23794:	00287380 	call	28738 <__sprint_r>
   23798:	1039ed1e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   2379c:	d8802617 	ldw	r2,152(sp)
   237a0:	d8c02017 	ldw	r3,128(sp)
   237a4:	da000404 	addi	r8,sp,16
   237a8:	003e1006 	br	22fec <__alt_data_end+0xf8022fec>
   237ac:	00800044 	movi	r2,1
   237b0:	10803fcc 	andi	r2,r2,255
   237b4:	00c00044 	movi	r3,1
   237b8:	10fa3526 	beq	r2,r3,22090 <__alt_data_end+0xf8022090>
   237bc:	00c00084 	movi	r3,2
   237c0:	10fbcb26 	beq	r2,r3,226f0 <__alt_data_end+0xf80226f0>
   237c4:	003a8f06 	br	22204 <__alt_data_end+0xf8022204>
   237c8:	01010034 	movhi	r4,1024
   237cc:	21003184 	addi	r4,r4,198
   237d0:	d9003515 	stw	r4,212(sp)
   237d4:	003b7606 	br	225b0 <__alt_data_end+0xf80225b0>
   237d8:	d8802917 	ldw	r2,164(sp)
   237dc:	00c00184 	movi	r3,6
   237e0:	1880012e 	bgeu	r3,r2,237e8 <___vfprintf_internal_r+0x1ca0>
   237e4:	1805883a 	mov	r2,r3
   237e8:	d8802e15 	stw	r2,184(sp)
   237ec:	1000ef16 	blt	r2,zero,23bac <___vfprintf_internal_r+0x2064>
   237f0:	04010034 	movhi	r16,1024
   237f4:	d8802a15 	stw	r2,168(sp)
   237f8:	dcc02d15 	stw	r19,180(sp)
   237fc:	d8002915 	stw	zero,164(sp)
   23800:	d8003215 	stw	zero,200(sp)
   23804:	84002b04 	addi	r16,r16,172
   23808:	0039883a 	mov	fp,zero
   2380c:	003aa206 	br	22298 <__alt_data_end+0xf8022298>
   23810:	0021883a 	mov	r16,zero
   23814:	003e0706 	br	23034 <__alt_data_end+0xf8023034>
   23818:	d9002c17 	ldw	r4,176(sp)
   2381c:	d9801e04 	addi	r6,sp,120
   23820:	b80b883a 	mov	r5,r23
   23824:	00287380 	call	28738 <__sprint_r>
   23828:	1039c91e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   2382c:	d8802617 	ldw	r2,152(sp)
   23830:	d9403317 	ldw	r5,204(sp)
   23834:	d8c02017 	ldw	r3,128(sp)
   23838:	da000404 	addi	r8,sp,16
   2383c:	2885c83a 	sub	r2,r5,r2
   23840:	003dfb06 	br	23030 <__alt_data_end+0xf8023030>
   23844:	9080004c 	andi	r2,r18,1
   23848:	103e8f1e 	bne	r2,zero,23288 <__alt_data_end+0xf8023288>
   2384c:	d8802117 	ldw	r2,132(sp)
   23850:	003e9e06 	br	232cc <__alt_data_end+0xf80232cc>
   23854:	1025883a 	mov	r18,r2
   23858:	0039883a 	mov	fp,zero
   2385c:	00800084 	movi	r2,2
   23860:	003fd306 	br	237b0 <__alt_data_end+0xf80237b0>
   23864:	07000b44 	movi	fp,45
   23868:	df002785 	stb	fp,158(sp)
   2386c:	003a4006 	br	22170 <__alt_data_end+0xf8022170>
   23870:	00c00b44 	movi	r3,45
   23874:	d8c02785 	stb	r3,158(sp)
   23878:	d8802a15 	stw	r2,168(sp)
   2387c:	dc802b17 	ldw	r18,172(sp)
   23880:	d8002915 	stw	zero,164(sp)
   23884:	07000b44 	movi	fp,45
   23888:	003a8006 	br	2228c <__alt_data_end+0xf802228c>
   2388c:	04010034 	movhi	r16,1024
   23890:	84002004 	addi	r16,r16,128
   23894:	003f4706 	br	235b4 <__alt_data_end+0xf80235b4>
   23898:	d8c02d17 	ldw	r3,180(sp)
   2389c:	d9002f17 	ldw	r4,188(sp)
   238a0:	18800017 	ldw	r2,0(r3)
   238a4:	18c00104 	addi	r3,r3,4
   238a8:	d8c02d15 	stw	r3,180(sp)
   238ac:	11000015 	stw	r4,0(r2)
   238b0:	0038dd06 	br	21c28 <__alt_data_end+0xf8021c28>
   238b4:	dd802617 	ldw	r22,152(sp)
   238b8:	00bfff44 	movi	r2,-3
   238bc:	b0801c16 	blt	r22,r2,23930 <___vfprintf_internal_r+0x1de8>
   238c0:	d9402917 	ldw	r5,164(sp)
   238c4:	2d801a16 	blt	r5,r22,23930 <___vfprintf_internal_r+0x1de8>
   238c8:	dd803215 	stw	r22,200(sp)
   238cc:	003e8906 	br	232f4 <__alt_data_end+0xf80232f4>
   238d0:	01010034 	movhi	r4,1024
   238d4:	21002d84 	addi	r4,r4,182
   238d8:	d9002b15 	stw	r4,172(sp)
   238dc:	003c9106 	br	22b24 <__alt_data_end+0xf8022b24>
   238e0:	e005883a 	mov	r2,fp
   238e4:	003e7906 	br	232cc <__alt_data_end+0xf80232cc>
   238e8:	d9402917 	ldw	r5,164(sp)
   238ec:	df002783 	ldbu	fp,158(sp)
   238f0:	dcc02d15 	stw	r19,180(sp)
   238f4:	d9402a15 	stw	r5,168(sp)
   238f8:	d9402e15 	stw	r5,184(sp)
   238fc:	d8002915 	stw	zero,164(sp)
   23900:	d8003215 	stw	zero,200(sp)
   23904:	003a5d06 	br	2227c <__alt_data_end+0xf802227c>
   23908:	9080004c 	andi	r2,r18,1
   2390c:	0039883a 	mov	fp,zero
   23910:	10000426 	beq	r2,zero,23924 <___vfprintf_internal_r+0x1ddc>
   23914:	00800c04 	movi	r2,48
   23918:	dc001dc4 	addi	r16,sp,119
   2391c:	d8801dc5 	stb	r2,119(sp)
   23920:	003b8006 	br	22724 <__alt_data_end+0xf8022724>
   23924:	d8002e15 	stw	zero,184(sp)
   23928:	dc001e04 	addi	r16,sp,120
   2392c:	003a4d06 	br	22264 <__alt_data_end+0xf8022264>
   23930:	8c7fff84 	addi	r17,r17,-2
   23934:	b5bfffc4 	addi	r22,r22,-1
   23938:	dd802615 	stw	r22,152(sp)
   2393c:	dc4022c5 	stb	r17,139(sp)
   23940:	b000bf16 	blt	r22,zero,23c40 <___vfprintf_internal_r+0x20f8>
   23944:	00800ac4 	movi	r2,43
   23948:	d8802305 	stb	r2,140(sp)
   2394c:	00800244 	movi	r2,9
   23950:	15807016 	blt	r2,r22,23b14 <___vfprintf_internal_r+0x1fcc>
   23954:	00800c04 	movi	r2,48
   23958:	b5800c04 	addi	r22,r22,48
   2395c:	d8802345 	stb	r2,141(sp)
   23960:	dd802385 	stb	r22,142(sp)
   23964:	d88023c4 	addi	r2,sp,143
   23968:	df0022c4 	addi	fp,sp,139
   2396c:	d8c03317 	ldw	r3,204(sp)
   23970:	1739c83a 	sub	fp,r2,fp
   23974:	d9003317 	ldw	r4,204(sp)
   23978:	e0c7883a 	add	r3,fp,r3
   2397c:	df003a15 	stw	fp,232(sp)
   23980:	d8c02e15 	stw	r3,184(sp)
   23984:	00800044 	movi	r2,1
   23988:	1100b30e 	bge	r2,r4,23c58 <___vfprintf_internal_r+0x2110>
   2398c:	d8c02e17 	ldw	r3,184(sp)
   23990:	18c00044 	addi	r3,r3,1
   23994:	d8c02e15 	stw	r3,184(sp)
   23998:	1805883a 	mov	r2,r3
   2399c:	1800ac16 	blt	r3,zero,23c50 <___vfprintf_internal_r+0x2108>
   239a0:	d8003215 	stw	zero,200(sp)
   239a4:	003e5d06 	br	2331c <__alt_data_end+0xf802331c>
   239a8:	d9002c17 	ldw	r4,176(sp)
   239ac:	d9801e04 	addi	r6,sp,120
   239b0:	b80b883a 	mov	r5,r23
   239b4:	00287380 	call	28738 <__sprint_r>
   239b8:	1039651e 	bne	r2,zero,21f50 <__alt_data_end+0xf8021f50>
   239bc:	dc402617 	ldw	r17,152(sp)
   239c0:	d8c02017 	ldw	r3,128(sp)
   239c4:	d8801f17 	ldw	r2,124(sp)
   239c8:	da000404 	addi	r8,sp,16
   239cc:	003ed606 	br	23528 <__alt_data_end+0xf8023528>
   239d0:	582b883a 	mov	r21,r11
   239d4:	d8002915 	stw	zero,164(sp)
   239d8:	0038bd06 	br	21cd0 <__alt_data_end+0xf8021cd0>
   239dc:	d8802917 	ldw	r2,164(sp)
   239e0:	103e071e 	bne	r2,zero,23200 <__alt_data_end+0xf8023200>
   239e4:	dc002915 	stw	r16,164(sp)
   239e8:	003e0506 	br	23200 <__alt_data_end+0xf8023200>
   239ec:	d9002917 	ldw	r4,164(sp)
   239f0:	20c00044 	addi	r3,r4,1
   239f4:	003e0f06 	br	23234 <__alt_data_end+0xf8023234>
   239f8:	01400184 	movi	r5,6
   239fc:	d9402915 	stw	r5,164(sp)
   23a00:	003dff06 	br	23200 <__alt_data_end+0xf8023200>
   23a04:	d8802104 	addi	r2,sp,132
   23a08:	d8800315 	stw	r2,12(sp)
   23a0c:	d8802504 	addi	r2,sp,148
   23a10:	d8800215 	stw	r2,8(sp)
   23a14:	d8802604 	addi	r2,sp,152
   23a18:	d8800115 	stw	r2,4(sp)
   23a1c:	d8802917 	ldw	r2,164(sp)
   23a20:	d9403617 	ldw	r5,216(sp)
   23a24:	d9002c17 	ldw	r4,176(sp)
   23a28:	d8800015 	stw	r2,0(sp)
   23a2c:	01c000c4 	movi	r7,3
   23a30:	980d883a 	mov	r6,r19
   23a34:	da003d15 	stw	r8,244(sp)
   23a38:	00242200 	call	24220 <_dtoa_r>
   23a3c:	d8c02917 	ldw	r3,164(sp)
   23a40:	da003d17 	ldw	r8,244(sp)
   23a44:	1021883a 	mov	r16,r2
   23a48:	10f9883a 	add	fp,r2,r3
   23a4c:	81000007 	ldb	r4,0(r16)
   23a50:	00800c04 	movi	r2,48
   23a54:	20805e26 	beq	r4,r2,23bd0 <___vfprintf_internal_r+0x2088>
   23a58:	d8c02617 	ldw	r3,152(sp)
   23a5c:	e0f9883a 	add	fp,fp,r3
   23a60:	003e0a06 	br	2328c <__alt_data_end+0xf802328c>
   23a64:	00c00b44 	movi	r3,45
   23a68:	24e0003c 	xorhi	r19,r4,32768
   23a6c:	d8c02a05 	stb	r3,168(sp)
   23a70:	003de906 	br	23218 <__alt_data_end+0xf8023218>
   23a74:	d8c03217 	ldw	r3,200(sp)
   23a78:	00c07a0e 	bge	zero,r3,23c64 <___vfprintf_internal_r+0x211c>
   23a7c:	00800044 	movi	r2,1
   23a80:	d9003317 	ldw	r4,204(sp)
   23a84:	1105883a 	add	r2,r2,r4
   23a88:	d8802e15 	stw	r2,184(sp)
   23a8c:	10004e16 	blt	r2,zero,23bc8 <___vfprintf_internal_r+0x2080>
   23a90:	044019c4 	movi	r17,103
   23a94:	003e2106 	br	2331c <__alt_data_end+0xf802331c>
   23a98:	d9002917 	ldw	r4,164(sp)
   23a9c:	d8802104 	addi	r2,sp,132
   23aa0:	d8800315 	stw	r2,12(sp)
   23aa4:	d9000015 	stw	r4,0(sp)
   23aa8:	d8802504 	addi	r2,sp,148
   23aac:	d9403617 	ldw	r5,216(sp)
   23ab0:	d9002c17 	ldw	r4,176(sp)
   23ab4:	d8800215 	stw	r2,8(sp)
   23ab8:	d8802604 	addi	r2,sp,152
   23abc:	d8800115 	stw	r2,4(sp)
   23ac0:	01c000c4 	movi	r7,3
   23ac4:	980d883a 	mov	r6,r19
   23ac8:	da003d15 	stw	r8,244(sp)
   23acc:	00242200 	call	24220 <_dtoa_r>
   23ad0:	d8c02917 	ldw	r3,164(sp)
   23ad4:	da003d17 	ldw	r8,244(sp)
   23ad8:	1021883a 	mov	r16,r2
   23adc:	00801184 	movi	r2,70
   23ae0:	80f9883a 	add	fp,r16,r3
   23ae4:	88bfd926 	beq	r17,r2,23a4c <__alt_data_end+0xf8023a4c>
   23ae8:	003de806 	br	2328c <__alt_data_end+0xf802328c>
   23aec:	d9002917 	ldw	r4,164(sp)
   23af0:	00c04d0e 	bge	zero,r3,23c28 <___vfprintf_internal_r+0x20e0>
   23af4:	2000441e 	bne	r4,zero,23c08 <___vfprintf_internal_r+0x20c0>
   23af8:	9480004c 	andi	r18,r18,1
   23afc:	9000421e 	bne	r18,zero,23c08 <___vfprintf_internal_r+0x20c0>
   23b00:	1805883a 	mov	r2,r3
   23b04:	18007016 	blt	r3,zero,23cc8 <___vfprintf_internal_r+0x2180>
   23b08:	d8c03217 	ldw	r3,200(sp)
   23b0c:	d8c02e15 	stw	r3,184(sp)
   23b10:	003e0206 	br	2331c <__alt_data_end+0xf802331c>
   23b14:	df0022c4 	addi	fp,sp,139
   23b18:	dc002915 	stw	r16,164(sp)
   23b1c:	4027883a 	mov	r19,r8
   23b20:	e021883a 	mov	r16,fp
   23b24:	b009883a 	mov	r4,r22
   23b28:	01400284 	movi	r5,10
   23b2c:	002aec80 	call	2aec8 <__modsi3>
   23b30:	10800c04 	addi	r2,r2,48
   23b34:	843fffc4 	addi	r16,r16,-1
   23b38:	b009883a 	mov	r4,r22
   23b3c:	01400284 	movi	r5,10
   23b40:	80800005 	stb	r2,0(r16)
   23b44:	002ae440 	call	2ae44 <__divsi3>
   23b48:	102d883a 	mov	r22,r2
   23b4c:	00800244 	movi	r2,9
   23b50:	15bff416 	blt	r2,r22,23b24 <__alt_data_end+0xf8023b24>
   23b54:	9811883a 	mov	r8,r19
   23b58:	b0800c04 	addi	r2,r22,48
   23b5c:	8027883a 	mov	r19,r16
   23b60:	997fffc4 	addi	r5,r19,-1
   23b64:	98bfffc5 	stb	r2,-1(r19)
   23b68:	dc002917 	ldw	r16,164(sp)
   23b6c:	2f006a2e 	bgeu	r5,fp,23d18 <___vfprintf_internal_r+0x21d0>
   23b70:	d9c02384 	addi	r7,sp,142
   23b74:	3ccfc83a 	sub	r7,r7,r19
   23b78:	d9002344 	addi	r4,sp,141
   23b7c:	e1cf883a 	add	r7,fp,r7
   23b80:	00000106 	br	23b88 <___vfprintf_internal_r+0x2040>
   23b84:	28800003 	ldbu	r2,0(r5)
   23b88:	20800005 	stb	r2,0(r4)
   23b8c:	21000044 	addi	r4,r4,1
   23b90:	29400044 	addi	r5,r5,1
   23b94:	393ffb1e 	bne	r7,r4,23b84 <__alt_data_end+0xf8023b84>
   23b98:	d8802304 	addi	r2,sp,140
   23b9c:	14c5c83a 	sub	r2,r2,r19
   23ba0:	d8c02344 	addi	r3,sp,141
   23ba4:	1885883a 	add	r2,r3,r2
   23ba8:	003f7006 	br	2396c <__alt_data_end+0xf802396c>
   23bac:	0005883a 	mov	r2,zero
   23bb0:	003f0f06 	br	237f0 <__alt_data_end+0xf80237f0>
   23bb4:	d8c03217 	ldw	r3,200(sp)
   23bb8:	18c00044 	addi	r3,r3,1
   23bbc:	d8c02e15 	stw	r3,184(sp)
   23bc0:	1805883a 	mov	r2,r3
   23bc4:	183fb20e 	bge	r3,zero,23a90 <__alt_data_end+0xf8023a90>
   23bc8:	0005883a 	mov	r2,zero
   23bcc:	003fb006 	br	23a90 <__alt_data_end+0xf8023a90>
   23bd0:	d9003617 	ldw	r4,216(sp)
   23bd4:	000d883a 	mov	r6,zero
   23bd8:	000f883a 	mov	r7,zero
   23bdc:	980b883a 	mov	r5,r19
   23be0:	d8c03c15 	stw	r3,240(sp)
   23be4:	da003d15 	stw	r8,244(sp)
   23be8:	002c18c0 	call	2c18c <__eqdf2>
   23bec:	d8c03c17 	ldw	r3,240(sp)
   23bf0:	da003d17 	ldw	r8,244(sp)
   23bf4:	103f9826 	beq	r2,zero,23a58 <__alt_data_end+0xf8023a58>
   23bf8:	00800044 	movi	r2,1
   23bfc:	10c7c83a 	sub	r3,r2,r3
   23c00:	d8c02615 	stw	r3,152(sp)
   23c04:	003f9506 	br	23a5c <__alt_data_end+0xf8023a5c>
   23c08:	d9002917 	ldw	r4,164(sp)
   23c0c:	d8c03217 	ldw	r3,200(sp)
   23c10:	20800044 	addi	r2,r4,1
   23c14:	1885883a 	add	r2,r3,r2
   23c18:	d8802e15 	stw	r2,184(sp)
   23c1c:	103dbf0e 	bge	r2,zero,2331c <__alt_data_end+0xf802331c>
   23c20:	0005883a 	mov	r2,zero
   23c24:	003dbd06 	br	2331c <__alt_data_end+0xf802331c>
   23c28:	2000211e 	bne	r4,zero,23cb0 <___vfprintf_internal_r+0x2168>
   23c2c:	9480004c 	andi	r18,r18,1
   23c30:	90001f1e 	bne	r18,zero,23cb0 <___vfprintf_internal_r+0x2168>
   23c34:	00800044 	movi	r2,1
   23c38:	d8802e15 	stw	r2,184(sp)
   23c3c:	003db706 	br	2331c <__alt_data_end+0xf802331c>
   23c40:	00800b44 	movi	r2,45
   23c44:	05adc83a 	sub	r22,zero,r22
   23c48:	d8802305 	stb	r2,140(sp)
   23c4c:	003f3f06 	br	2394c <__alt_data_end+0xf802394c>
   23c50:	0005883a 	mov	r2,zero
   23c54:	003f5206 	br	239a0 <__alt_data_end+0xf80239a0>
   23c58:	90a4703a 	and	r18,r18,r2
   23c5c:	903f4e26 	beq	r18,zero,23998 <__alt_data_end+0xf8023998>
   23c60:	003f4a06 	br	2398c <__alt_data_end+0xf802398c>
   23c64:	00800084 	movi	r2,2
   23c68:	10c5c83a 	sub	r2,r2,r3
   23c6c:	003f8406 	br	23a80 <__alt_data_end+0xf8023a80>
   23c70:	d8802d17 	ldw	r2,180(sp)
   23c74:	d9002d17 	ldw	r4,180(sp)
   23c78:	ac400043 	ldbu	r17,1(r21)
   23c7c:	10800017 	ldw	r2,0(r2)
   23c80:	582b883a 	mov	r21,r11
   23c84:	d8802915 	stw	r2,164(sp)
   23c88:	20800104 	addi	r2,r4,4
   23c8c:	d9002917 	ldw	r4,164(sp)
   23c90:	d8802d15 	stw	r2,180(sp)
   23c94:	203e7a0e 	bge	r4,zero,23680 <__alt_data_end+0xf8023680>
   23c98:	8c403fcc 	andi	r17,r17,255
   23c9c:	00bfffc4 	movi	r2,-1
   23ca0:	8c40201c 	xori	r17,r17,128
   23ca4:	d8802915 	stw	r2,164(sp)
   23ca8:	8c7fe004 	addi	r17,r17,-128
   23cac:	00380706 	br	21ccc <__alt_data_end+0xf8021ccc>
   23cb0:	d8c02917 	ldw	r3,164(sp)
   23cb4:	18c00084 	addi	r3,r3,2
   23cb8:	d8c02e15 	stw	r3,184(sp)
   23cbc:	1805883a 	mov	r2,r3
   23cc0:	183d960e 	bge	r3,zero,2331c <__alt_data_end+0xf802331c>
   23cc4:	003fd606 	br	23c20 <__alt_data_end+0xf8023c20>
   23cc8:	0005883a 	mov	r2,zero
   23ccc:	003f8e06 	br	23b08 <__alt_data_end+0xf8023b08>
   23cd0:	9080004c 	andi	r2,r18,1
   23cd4:	103f811e 	bne	r2,zero,23adc <__alt_data_end+0xf8023adc>
   23cd8:	d8802117 	ldw	r2,132(sp)
   23cdc:	1405c83a 	sub	r2,r2,r16
   23ce0:	d8803315 	stw	r2,204(sp)
   23ce4:	b47ef326 	beq	r22,r17,238b4 <__alt_data_end+0xf80238b4>
   23ce8:	dd802617 	ldw	r22,152(sp)
   23cec:	003f1106 	br	23934 <__alt_data_end+0xf8023934>
   23cf0:	d9c02785 	stb	r7,158(sp)
   23cf4:	00390406 	br	22108 <__alt_data_end+0xf8022108>
   23cf8:	d9c02785 	stb	r7,158(sp)
   23cfc:	0038d306 	br	2204c <__alt_data_end+0xf802204c>
   23d00:	d9c02785 	stb	r7,158(sp)
   23d04:	003a6106 	br	2268c <__alt_data_end+0xf802268c>
   23d08:	d9c02785 	stb	r7,158(sp)
   23d0c:	003af806 	br	228f0 <__alt_data_end+0xf80228f0>
   23d10:	0005883a 	mov	r2,zero
   23d14:	003d7e06 	br	23310 <__alt_data_end+0xf8023310>
   23d18:	d8802344 	addi	r2,sp,141
   23d1c:	003f1306 	br	2396c <__alt_data_end+0xf802396c>
   23d20:	d9c02785 	stb	r7,158(sp)
   23d24:	00392306 	br	221b4 <__alt_data_end+0xf80221b4>
   23d28:	d9c02785 	stb	r7,158(sp)
   23d2c:	003aa906 	br	227d4 <__alt_data_end+0xf80227d4>
   23d30:	d9c02785 	stb	r7,158(sp)
   23d34:	003a3d06 	br	2262c <__alt_data_end+0xf802262c>
   23d38:	d9c02785 	stb	r7,158(sp)
   23d3c:	003aca06 	br	22868 <__alt_data_end+0xf8022868>

00023d40 <__vfprintf_internal>:
   23d40:	00810034 	movhi	r2,1024
   23d44:	1087d204 	addi	r2,r2,8008
   23d48:	300f883a 	mov	r7,r6
   23d4c:	280d883a 	mov	r6,r5
   23d50:	200b883a 	mov	r5,r4
   23d54:	11000017 	ldw	r4,0(r2)
   23d58:	0021b481 	jmpi	21b48 <___vfprintf_internal_r>

00023d5c <__sbprintf>:
   23d5c:	2880030b 	ldhu	r2,12(r5)
   23d60:	2ac01917 	ldw	r11,100(r5)
   23d64:	2a80038b 	ldhu	r10,14(r5)
   23d68:	2a400717 	ldw	r9,28(r5)
   23d6c:	2a000917 	ldw	r8,36(r5)
   23d70:	defee204 	addi	sp,sp,-1144
   23d74:	00c10004 	movi	r3,1024
   23d78:	dc011a15 	stw	r16,1128(sp)
   23d7c:	10bfff4c 	andi	r2,r2,65533
   23d80:	2821883a 	mov	r16,r5
   23d84:	d8cb883a 	add	r5,sp,r3
   23d88:	dc811c15 	stw	r18,1136(sp)
   23d8c:	dc411b15 	stw	r17,1132(sp)
   23d90:	dfc11d15 	stw	ra,1140(sp)
   23d94:	2025883a 	mov	r18,r4
   23d98:	d881030d 	sth	r2,1036(sp)
   23d9c:	dac11915 	stw	r11,1124(sp)
   23da0:	da81038d 	sth	r10,1038(sp)
   23da4:	da410715 	stw	r9,1052(sp)
   23da8:	da010915 	stw	r8,1060(sp)
   23dac:	dec10015 	stw	sp,1024(sp)
   23db0:	dec10415 	stw	sp,1040(sp)
   23db4:	d8c10215 	stw	r3,1032(sp)
   23db8:	d8c10515 	stw	r3,1044(sp)
   23dbc:	d8010615 	stw	zero,1048(sp)
   23dc0:	0021b480 	call	21b48 <___vfprintf_internal_r>
   23dc4:	1023883a 	mov	r17,r2
   23dc8:	10000416 	blt	r2,zero,23ddc <__sbprintf+0x80>
   23dcc:	d9410004 	addi	r5,sp,1024
   23dd0:	9009883a 	mov	r4,r18
   23dd4:	0025ac40 	call	25ac4 <_fflush_r>
   23dd8:	10000d1e 	bne	r2,zero,23e10 <__sbprintf+0xb4>
   23ddc:	d881030b 	ldhu	r2,1036(sp)
   23de0:	1080100c 	andi	r2,r2,64
   23de4:	10000326 	beq	r2,zero,23df4 <__sbprintf+0x98>
   23de8:	8080030b 	ldhu	r2,12(r16)
   23dec:	10801014 	ori	r2,r2,64
   23df0:	8080030d 	sth	r2,12(r16)
   23df4:	8805883a 	mov	r2,r17
   23df8:	dfc11d17 	ldw	ra,1140(sp)
   23dfc:	dc811c17 	ldw	r18,1136(sp)
   23e00:	dc411b17 	ldw	r17,1132(sp)
   23e04:	dc011a17 	ldw	r16,1128(sp)
   23e08:	dec11e04 	addi	sp,sp,1144
   23e0c:	f800283a 	ret
   23e10:	047fffc4 	movi	r17,-1
   23e14:	003ff106 	br	23ddc <__alt_data_end+0xf8023ddc>

00023e18 <_write_r>:
   23e18:	defffd04 	addi	sp,sp,-12
   23e1c:	2805883a 	mov	r2,r5
   23e20:	dc000015 	stw	r16,0(sp)
   23e24:	04010034 	movhi	r16,1024
   23e28:	dc400115 	stw	r17,4(sp)
   23e2c:	300b883a 	mov	r5,r6
   23e30:	8407e304 	addi	r16,r16,8076
   23e34:	2023883a 	mov	r17,r4
   23e38:	380d883a 	mov	r6,r7
   23e3c:	1009883a 	mov	r4,r2
   23e40:	dfc00215 	stw	ra,8(sp)
   23e44:	80000015 	stw	zero,0(r16)
   23e48:	002e1300 	call	2e130 <write>
   23e4c:	00ffffc4 	movi	r3,-1
   23e50:	10c00526 	beq	r2,r3,23e68 <_write_r+0x50>
   23e54:	dfc00217 	ldw	ra,8(sp)
   23e58:	dc400117 	ldw	r17,4(sp)
   23e5c:	dc000017 	ldw	r16,0(sp)
   23e60:	dec00304 	addi	sp,sp,12
   23e64:	f800283a 	ret
   23e68:	80c00017 	ldw	r3,0(r16)
   23e6c:	183ff926 	beq	r3,zero,23e54 <__alt_data_end+0xf8023e54>
   23e70:	88c00015 	stw	r3,0(r17)
   23e74:	003ff706 	br	23e54 <__alt_data_end+0xf8023e54>

00023e78 <__swsetup_r>:
   23e78:	00810034 	movhi	r2,1024
   23e7c:	defffd04 	addi	sp,sp,-12
   23e80:	1087d204 	addi	r2,r2,8008
   23e84:	dc400115 	stw	r17,4(sp)
   23e88:	2023883a 	mov	r17,r4
   23e8c:	11000017 	ldw	r4,0(r2)
   23e90:	dc000015 	stw	r16,0(sp)
   23e94:	dfc00215 	stw	ra,8(sp)
   23e98:	2821883a 	mov	r16,r5
   23e9c:	20000226 	beq	r4,zero,23ea8 <__swsetup_r+0x30>
   23ea0:	20800e17 	ldw	r2,56(r4)
   23ea4:	10003126 	beq	r2,zero,23f6c <__swsetup_r+0xf4>
   23ea8:	8080030b 	ldhu	r2,12(r16)
   23eac:	10c0020c 	andi	r3,r2,8
   23eb0:	1009883a 	mov	r4,r2
   23eb4:	18000f26 	beq	r3,zero,23ef4 <__swsetup_r+0x7c>
   23eb8:	80c00417 	ldw	r3,16(r16)
   23ebc:	18001526 	beq	r3,zero,23f14 <__swsetup_r+0x9c>
   23ec0:	1100004c 	andi	r4,r2,1
   23ec4:	20001c1e 	bne	r4,zero,23f38 <__swsetup_r+0xc0>
   23ec8:	1080008c 	andi	r2,r2,2
   23ecc:	1000291e 	bne	r2,zero,23f74 <__swsetup_r+0xfc>
   23ed0:	80800517 	ldw	r2,20(r16)
   23ed4:	80800215 	stw	r2,8(r16)
   23ed8:	18001c26 	beq	r3,zero,23f4c <__swsetup_r+0xd4>
   23edc:	0005883a 	mov	r2,zero
   23ee0:	dfc00217 	ldw	ra,8(sp)
   23ee4:	dc400117 	ldw	r17,4(sp)
   23ee8:	dc000017 	ldw	r16,0(sp)
   23eec:	dec00304 	addi	sp,sp,12
   23ef0:	f800283a 	ret
   23ef4:	2080040c 	andi	r2,r4,16
   23ef8:	10002e26 	beq	r2,zero,23fb4 <__swsetup_r+0x13c>
   23efc:	2080010c 	andi	r2,r4,4
   23f00:	10001e1e 	bne	r2,zero,23f7c <__swsetup_r+0x104>
   23f04:	80c00417 	ldw	r3,16(r16)
   23f08:	20800214 	ori	r2,r4,8
   23f0c:	8080030d 	sth	r2,12(r16)
   23f10:	183feb1e 	bne	r3,zero,23ec0 <__alt_data_end+0xf8023ec0>
   23f14:	1100a00c 	andi	r4,r2,640
   23f18:	01408004 	movi	r5,512
   23f1c:	217fe826 	beq	r4,r5,23ec0 <__alt_data_end+0xf8023ec0>
   23f20:	800b883a 	mov	r5,r16
   23f24:	8809883a 	mov	r4,r17
   23f28:	0020a180 	call	20a18 <__smakebuf_r>
   23f2c:	8080030b 	ldhu	r2,12(r16)
   23f30:	80c00417 	ldw	r3,16(r16)
   23f34:	003fe206 	br	23ec0 <__alt_data_end+0xf8023ec0>
   23f38:	80800517 	ldw	r2,20(r16)
   23f3c:	80000215 	stw	zero,8(r16)
   23f40:	0085c83a 	sub	r2,zero,r2
   23f44:	80800615 	stw	r2,24(r16)
   23f48:	183fe41e 	bne	r3,zero,23edc <__alt_data_end+0xf8023edc>
   23f4c:	80c0030b 	ldhu	r3,12(r16)
   23f50:	0005883a 	mov	r2,zero
   23f54:	1900200c 	andi	r4,r3,128
   23f58:	203fe126 	beq	r4,zero,23ee0 <__alt_data_end+0xf8023ee0>
   23f5c:	18c01014 	ori	r3,r3,64
   23f60:	80c0030d 	sth	r3,12(r16)
   23f64:	00bfffc4 	movi	r2,-1
   23f68:	003fdd06 	br	23ee0 <__alt_data_end+0xf8023ee0>
   23f6c:	0025ea00 	call	25ea0 <__sinit>
   23f70:	003fcd06 	br	23ea8 <__alt_data_end+0xf8023ea8>
   23f74:	0005883a 	mov	r2,zero
   23f78:	003fd606 	br	23ed4 <__alt_data_end+0xf8023ed4>
   23f7c:	81400c17 	ldw	r5,48(r16)
   23f80:	28000626 	beq	r5,zero,23f9c <__swsetup_r+0x124>
   23f84:	80801004 	addi	r2,r16,64
   23f88:	28800326 	beq	r5,r2,23f98 <__swsetup_r+0x120>
   23f8c:	8809883a 	mov	r4,r17
   23f90:	00260c00 	call	260c0 <_free_r>
   23f94:	8100030b 	ldhu	r4,12(r16)
   23f98:	80000c15 	stw	zero,48(r16)
   23f9c:	80c00417 	ldw	r3,16(r16)
   23fa0:	00bff6c4 	movi	r2,-37
   23fa4:	1108703a 	and	r4,r2,r4
   23fa8:	80000115 	stw	zero,4(r16)
   23fac:	80c00015 	stw	r3,0(r16)
   23fb0:	003fd506 	br	23f08 <__alt_data_end+0xf8023f08>
   23fb4:	00800244 	movi	r2,9
   23fb8:	88800015 	stw	r2,0(r17)
   23fbc:	20801014 	ori	r2,r4,64
   23fc0:	8080030d 	sth	r2,12(r16)
   23fc4:	00bfffc4 	movi	r2,-1
   23fc8:	003fc506 	br	23ee0 <__alt_data_end+0xf8023ee0>

00023fcc <_close_r>:
   23fcc:	defffd04 	addi	sp,sp,-12
   23fd0:	dc000015 	stw	r16,0(sp)
   23fd4:	04010034 	movhi	r16,1024
   23fd8:	dc400115 	stw	r17,4(sp)
   23fdc:	8407e304 	addi	r16,r16,8076
   23fe0:	2023883a 	mov	r17,r4
   23fe4:	2809883a 	mov	r4,r5
   23fe8:	dfc00215 	stw	ra,8(sp)
   23fec:	80000015 	stw	zero,0(r16)
   23ff0:	002d69c0 	call	2d69c <close>
   23ff4:	00ffffc4 	movi	r3,-1
   23ff8:	10c00526 	beq	r2,r3,24010 <_close_r+0x44>
   23ffc:	dfc00217 	ldw	ra,8(sp)
   24000:	dc400117 	ldw	r17,4(sp)
   24004:	dc000017 	ldw	r16,0(sp)
   24008:	dec00304 	addi	sp,sp,12
   2400c:	f800283a 	ret
   24010:	80c00017 	ldw	r3,0(r16)
   24014:	183ff926 	beq	r3,zero,23ffc <__alt_data_end+0xf8023ffc>
   24018:	88c00015 	stw	r3,0(r17)
   2401c:	003ff706 	br	23ffc <__alt_data_end+0xf8023ffc>

00024020 <quorem>:
   24020:	defff704 	addi	sp,sp,-36
   24024:	dc800215 	stw	r18,8(sp)
   24028:	20800417 	ldw	r2,16(r4)
   2402c:	2c800417 	ldw	r18,16(r5)
   24030:	dfc00815 	stw	ra,32(sp)
   24034:	ddc00715 	stw	r23,28(sp)
   24038:	dd800615 	stw	r22,24(sp)
   2403c:	dd400515 	stw	r21,20(sp)
   24040:	dd000415 	stw	r20,16(sp)
   24044:	dcc00315 	stw	r19,12(sp)
   24048:	dc400115 	stw	r17,4(sp)
   2404c:	dc000015 	stw	r16,0(sp)
   24050:	14807116 	blt	r2,r18,24218 <quorem+0x1f8>
   24054:	94bfffc4 	addi	r18,r18,-1
   24058:	94ad883a 	add	r22,r18,r18
   2405c:	b5ad883a 	add	r22,r22,r22
   24060:	2c400504 	addi	r17,r5,20
   24064:	8da9883a 	add	r20,r17,r22
   24068:	25400504 	addi	r21,r4,20
   2406c:	282f883a 	mov	r23,r5
   24070:	adad883a 	add	r22,r21,r22
   24074:	a1400017 	ldw	r5,0(r20)
   24078:	2021883a 	mov	r16,r4
   2407c:	b1000017 	ldw	r4,0(r22)
   24080:	29400044 	addi	r5,r5,1
   24084:	002af3c0 	call	2af3c <__udivsi3>
   24088:	1027883a 	mov	r19,r2
   2408c:	10002c26 	beq	r2,zero,24140 <quorem+0x120>
   24090:	a813883a 	mov	r9,r21
   24094:	880b883a 	mov	r5,r17
   24098:	0009883a 	mov	r4,zero
   2409c:	000d883a 	mov	r6,zero
   240a0:	2a000017 	ldw	r8,0(r5)
   240a4:	49c00017 	ldw	r7,0(r9)
   240a8:	29400104 	addi	r5,r5,4
   240ac:	40bfffcc 	andi	r2,r8,65535
   240b0:	14c5383a 	mul	r2,r2,r19
   240b4:	4010d43a 	srli	r8,r8,16
   240b8:	38ffffcc 	andi	r3,r7,65535
   240bc:	1105883a 	add	r2,r2,r4
   240c0:	1008d43a 	srli	r4,r2,16
   240c4:	44d1383a 	mul	r8,r8,r19
   240c8:	198d883a 	add	r6,r3,r6
   240cc:	10ffffcc 	andi	r3,r2,65535
   240d0:	30c7c83a 	sub	r3,r6,r3
   240d4:	380ed43a 	srli	r7,r7,16
   240d8:	4105883a 	add	r2,r8,r4
   240dc:	180dd43a 	srai	r6,r3,16
   240e0:	113fffcc 	andi	r4,r2,65535
   240e4:	390fc83a 	sub	r7,r7,r4
   240e8:	398d883a 	add	r6,r7,r6
   240ec:	300e943a 	slli	r7,r6,16
   240f0:	18ffffcc 	andi	r3,r3,65535
   240f4:	1008d43a 	srli	r4,r2,16
   240f8:	38ceb03a 	or	r7,r7,r3
   240fc:	49c00015 	stw	r7,0(r9)
   24100:	300dd43a 	srai	r6,r6,16
   24104:	4a400104 	addi	r9,r9,4
   24108:	a17fe52e 	bgeu	r20,r5,240a0 <__alt_data_end+0xf80240a0>
   2410c:	b0800017 	ldw	r2,0(r22)
   24110:	10000b1e 	bne	r2,zero,24140 <quorem+0x120>
   24114:	b0bfff04 	addi	r2,r22,-4
   24118:	a880082e 	bgeu	r21,r2,2413c <quorem+0x11c>
   2411c:	b0ffff17 	ldw	r3,-4(r22)
   24120:	18000326 	beq	r3,zero,24130 <quorem+0x110>
   24124:	00000506 	br	2413c <quorem+0x11c>
   24128:	10c00017 	ldw	r3,0(r2)
   2412c:	1800031e 	bne	r3,zero,2413c <quorem+0x11c>
   24130:	10bfff04 	addi	r2,r2,-4
   24134:	94bfffc4 	addi	r18,r18,-1
   24138:	a8bffb36 	bltu	r21,r2,24128 <__alt_data_end+0xf8024128>
   2413c:	84800415 	stw	r18,16(r16)
   24140:	b80b883a 	mov	r5,r23
   24144:	8009883a 	mov	r4,r16
   24148:	00277f40 	call	277f4 <__mcmp>
   2414c:	10002616 	blt	r2,zero,241e8 <quorem+0x1c8>
   24150:	9cc00044 	addi	r19,r19,1
   24154:	a805883a 	mov	r2,r21
   24158:	000b883a 	mov	r5,zero
   2415c:	11000017 	ldw	r4,0(r2)
   24160:	89800017 	ldw	r6,0(r17)
   24164:	10800104 	addi	r2,r2,4
   24168:	20ffffcc 	andi	r3,r4,65535
   2416c:	194b883a 	add	r5,r3,r5
   24170:	30ffffcc 	andi	r3,r6,65535
   24174:	28c7c83a 	sub	r3,r5,r3
   24178:	300cd43a 	srli	r6,r6,16
   2417c:	2008d43a 	srli	r4,r4,16
   24180:	180bd43a 	srai	r5,r3,16
   24184:	18ffffcc 	andi	r3,r3,65535
   24188:	2189c83a 	sub	r4,r4,r6
   2418c:	2149883a 	add	r4,r4,r5
   24190:	200c943a 	slli	r6,r4,16
   24194:	8c400104 	addi	r17,r17,4
   24198:	200bd43a 	srai	r5,r4,16
   2419c:	30c6b03a 	or	r3,r6,r3
   241a0:	10ffff15 	stw	r3,-4(r2)
   241a4:	a47fed2e 	bgeu	r20,r17,2415c <__alt_data_end+0xf802415c>
   241a8:	9485883a 	add	r2,r18,r18
   241ac:	1085883a 	add	r2,r2,r2
   241b0:	a887883a 	add	r3,r21,r2
   241b4:	18800017 	ldw	r2,0(r3)
   241b8:	10000b1e 	bne	r2,zero,241e8 <quorem+0x1c8>
   241bc:	18bfff04 	addi	r2,r3,-4
   241c0:	a880082e 	bgeu	r21,r2,241e4 <quorem+0x1c4>
   241c4:	18ffff17 	ldw	r3,-4(r3)
   241c8:	18000326 	beq	r3,zero,241d8 <quorem+0x1b8>
   241cc:	00000506 	br	241e4 <quorem+0x1c4>
   241d0:	10c00017 	ldw	r3,0(r2)
   241d4:	1800031e 	bne	r3,zero,241e4 <quorem+0x1c4>
   241d8:	10bfff04 	addi	r2,r2,-4
   241dc:	94bfffc4 	addi	r18,r18,-1
   241e0:	a8bffb36 	bltu	r21,r2,241d0 <__alt_data_end+0xf80241d0>
   241e4:	84800415 	stw	r18,16(r16)
   241e8:	9805883a 	mov	r2,r19
   241ec:	dfc00817 	ldw	ra,32(sp)
   241f0:	ddc00717 	ldw	r23,28(sp)
   241f4:	dd800617 	ldw	r22,24(sp)
   241f8:	dd400517 	ldw	r21,20(sp)
   241fc:	dd000417 	ldw	r20,16(sp)
   24200:	dcc00317 	ldw	r19,12(sp)
   24204:	dc800217 	ldw	r18,8(sp)
   24208:	dc400117 	ldw	r17,4(sp)
   2420c:	dc000017 	ldw	r16,0(sp)
   24210:	dec00904 	addi	sp,sp,36
   24214:	f800283a 	ret
   24218:	0005883a 	mov	r2,zero
   2421c:	003ff306 	br	241ec <__alt_data_end+0xf80241ec>

00024220 <_dtoa_r>:
   24220:	20801017 	ldw	r2,64(r4)
   24224:	deffde04 	addi	sp,sp,-136
   24228:	df002015 	stw	fp,128(sp)
   2422c:	dcc01b15 	stw	r19,108(sp)
   24230:	dc801a15 	stw	r18,104(sp)
   24234:	dc401915 	stw	r17,100(sp)
   24238:	dc001815 	stw	r16,96(sp)
   2423c:	dfc02115 	stw	ra,132(sp)
   24240:	ddc01f15 	stw	r23,124(sp)
   24244:	dd801e15 	stw	r22,120(sp)
   24248:	dd401d15 	stw	r21,116(sp)
   2424c:	dd001c15 	stw	r20,112(sp)
   24250:	d9c00315 	stw	r7,12(sp)
   24254:	2039883a 	mov	fp,r4
   24258:	3023883a 	mov	r17,r6
   2425c:	2825883a 	mov	r18,r5
   24260:	dc002417 	ldw	r16,144(sp)
   24264:	3027883a 	mov	r19,r6
   24268:	10000826 	beq	r2,zero,2428c <_dtoa_r+0x6c>
   2426c:	21801117 	ldw	r6,68(r4)
   24270:	00c00044 	movi	r3,1
   24274:	100b883a 	mov	r5,r2
   24278:	1986983a 	sll	r3,r3,r6
   2427c:	11800115 	stw	r6,4(r2)
   24280:	10c00215 	stw	r3,8(r2)
   24284:	0026fd40 	call	26fd4 <_Bfree>
   24288:	e0001015 	stw	zero,64(fp)
   2428c:	88002e16 	blt	r17,zero,24348 <_dtoa_r+0x128>
   24290:	80000015 	stw	zero,0(r16)
   24294:	889ffc2c 	andhi	r2,r17,32752
   24298:	00dffc34 	movhi	r3,32752
   2429c:	10c01c26 	beq	r2,r3,24310 <_dtoa_r+0xf0>
   242a0:	000d883a 	mov	r6,zero
   242a4:	000f883a 	mov	r7,zero
   242a8:	9009883a 	mov	r4,r18
   242ac:	980b883a 	mov	r5,r19
   242b0:	002c18c0 	call	2c18c <__eqdf2>
   242b4:	10002b1e 	bne	r2,zero,24364 <_dtoa_r+0x144>
   242b8:	d9c02317 	ldw	r7,140(sp)
   242bc:	00800044 	movi	r2,1
   242c0:	38800015 	stw	r2,0(r7)
   242c4:	d8802517 	ldw	r2,148(sp)
   242c8:	10019e26 	beq	r2,zero,24944 <_dtoa_r+0x724>
   242cc:	d8c02517 	ldw	r3,148(sp)
   242d0:	00810034 	movhi	r2,1024
   242d4:	10802d44 	addi	r2,r2,181
   242d8:	18800015 	stw	r2,0(r3)
   242dc:	10bfffc4 	addi	r2,r2,-1
   242e0:	dfc02117 	ldw	ra,132(sp)
   242e4:	df002017 	ldw	fp,128(sp)
   242e8:	ddc01f17 	ldw	r23,124(sp)
   242ec:	dd801e17 	ldw	r22,120(sp)
   242f0:	dd401d17 	ldw	r21,116(sp)
   242f4:	dd001c17 	ldw	r20,112(sp)
   242f8:	dcc01b17 	ldw	r19,108(sp)
   242fc:	dc801a17 	ldw	r18,104(sp)
   24300:	dc401917 	ldw	r17,100(sp)
   24304:	dc001817 	ldw	r16,96(sp)
   24308:	dec02204 	addi	sp,sp,136
   2430c:	f800283a 	ret
   24310:	d8c02317 	ldw	r3,140(sp)
   24314:	0089c3c4 	movi	r2,9999
   24318:	18800015 	stw	r2,0(r3)
   2431c:	90017726 	beq	r18,zero,248fc <_dtoa_r+0x6dc>
   24320:	00810034 	movhi	r2,1024
   24324:	10803904 	addi	r2,r2,228
   24328:	d9002517 	ldw	r4,148(sp)
   2432c:	203fec26 	beq	r4,zero,242e0 <__alt_data_end+0xf80242e0>
   24330:	10c000c7 	ldb	r3,3(r2)
   24334:	1801781e 	bne	r3,zero,24918 <_dtoa_r+0x6f8>
   24338:	10c000c4 	addi	r3,r2,3
   2433c:	d9802517 	ldw	r6,148(sp)
   24340:	30c00015 	stw	r3,0(r6)
   24344:	003fe606 	br	242e0 <__alt_data_end+0xf80242e0>
   24348:	04e00034 	movhi	r19,32768
   2434c:	9cffffc4 	addi	r19,r19,-1
   24350:	00800044 	movi	r2,1
   24354:	8ce6703a 	and	r19,r17,r19
   24358:	80800015 	stw	r2,0(r16)
   2435c:	9823883a 	mov	r17,r19
   24360:	003fcc06 	br	24294 <__alt_data_end+0xf8024294>
   24364:	d8800204 	addi	r2,sp,8
   24368:	d8800015 	stw	r2,0(sp)
   2436c:	d9c00104 	addi	r7,sp,4
   24370:	900b883a 	mov	r5,r18
   24374:	980d883a 	mov	r6,r19
   24378:	e009883a 	mov	r4,fp
   2437c:	8820d53a 	srli	r16,r17,20
   24380:	0027bc00 	call	27bc0 <__d2b>
   24384:	d8800915 	stw	r2,36(sp)
   24388:	8001651e 	bne	r16,zero,24920 <_dtoa_r+0x700>
   2438c:	dd800217 	ldw	r22,8(sp)
   24390:	dc000117 	ldw	r16,4(sp)
   24394:	00800804 	movi	r2,32
   24398:	b421883a 	add	r16,r22,r16
   2439c:	80c10c84 	addi	r3,r16,1074
   243a0:	10c2d10e 	bge	r2,r3,24ee8 <_dtoa_r+0xcc8>
   243a4:	00801004 	movi	r2,64
   243a8:	81010484 	addi	r4,r16,1042
   243ac:	10c7c83a 	sub	r3,r2,r3
   243b0:	9108d83a 	srl	r4,r18,r4
   243b4:	88e2983a 	sll	r17,r17,r3
   243b8:	2448b03a 	or	r4,r4,r17
   243bc:	002d5540 	call	2d554 <__floatunsidf>
   243c0:	017f8434 	movhi	r5,65040
   243c4:	01800044 	movi	r6,1
   243c8:	1009883a 	mov	r4,r2
   243cc:	194b883a 	add	r5,r3,r5
   243d0:	843fffc4 	addi	r16,r16,-1
   243d4:	d9801115 	stw	r6,68(sp)
   243d8:	000d883a 	mov	r6,zero
   243dc:	01cffe34 	movhi	r7,16376
   243e0:	002cafc0 	call	2cafc <__subdf3>
   243e4:	0198dbf4 	movhi	r6,25455
   243e8:	01cff4f4 	movhi	r7,16339
   243ec:	3190d844 	addi	r6,r6,17249
   243f0:	39e1e9c4 	addi	r7,r7,-30809
   243f4:	1009883a 	mov	r4,r2
   243f8:	180b883a 	mov	r5,r3
   243fc:	002c3e40 	call	2c3e4 <__muldf3>
   24400:	01a2d874 	movhi	r6,35681
   24404:	01cff1f4 	movhi	r7,16327
   24408:	31b22cc4 	addi	r6,r6,-14157
   2440c:	39e28a04 	addi	r7,r7,-30168
   24410:	180b883a 	mov	r5,r3
   24414:	1009883a 	mov	r4,r2
   24418:	002aff80 	call	2aff8 <__adddf3>
   2441c:	8009883a 	mov	r4,r16
   24420:	1029883a 	mov	r20,r2
   24424:	1823883a 	mov	r17,r3
   24428:	002d4780 	call	2d478 <__floatsidf>
   2442c:	019427f4 	movhi	r6,20639
   24430:	01cff4f4 	movhi	r7,16339
   24434:	319e7ec4 	addi	r6,r6,31227
   24438:	39d104c4 	addi	r7,r7,17427
   2443c:	1009883a 	mov	r4,r2
   24440:	180b883a 	mov	r5,r3
   24444:	002c3e40 	call	2c3e4 <__muldf3>
   24448:	100d883a 	mov	r6,r2
   2444c:	180f883a 	mov	r7,r3
   24450:	a009883a 	mov	r4,r20
   24454:	880b883a 	mov	r5,r17
   24458:	002aff80 	call	2aff8 <__adddf3>
   2445c:	1009883a 	mov	r4,r2
   24460:	180b883a 	mov	r5,r3
   24464:	1029883a 	mov	r20,r2
   24468:	1823883a 	mov	r17,r3
   2446c:	002d3f80 	call	2d3f8 <__fixdfsi>
   24470:	000d883a 	mov	r6,zero
   24474:	000f883a 	mov	r7,zero
   24478:	a009883a 	mov	r4,r20
   2447c:	880b883a 	mov	r5,r17
   24480:	d8800515 	stw	r2,20(sp)
   24484:	002c2f00 	call	2c2f0 <__ledf2>
   24488:	10028716 	blt	r2,zero,24ea8 <_dtoa_r+0xc88>
   2448c:	d8c00517 	ldw	r3,20(sp)
   24490:	00800584 	movi	r2,22
   24494:	10c27536 	bltu	r2,r3,24e6c <_dtoa_r+0xc4c>
   24498:	180490fa 	slli	r2,r3,3
   2449c:	00c10034 	movhi	r3,1024
   244a0:	18c05404 	addi	r3,r3,336
   244a4:	1885883a 	add	r2,r3,r2
   244a8:	11000017 	ldw	r4,0(r2)
   244ac:	11400117 	ldw	r5,4(r2)
   244b0:	900d883a 	mov	r6,r18
   244b4:	980f883a 	mov	r7,r19
   244b8:	002c2140 	call	2c214 <__gedf2>
   244bc:	00828d0e 	bge	zero,r2,24ef4 <_dtoa_r+0xcd4>
   244c0:	d9000517 	ldw	r4,20(sp)
   244c4:	d8000e15 	stw	zero,56(sp)
   244c8:	213fffc4 	addi	r4,r4,-1
   244cc:	d9000515 	stw	r4,20(sp)
   244d0:	b42dc83a 	sub	r22,r22,r16
   244d4:	b5bfffc4 	addi	r22,r22,-1
   244d8:	b0026f16 	blt	r22,zero,24e98 <_dtoa_r+0xc78>
   244dc:	d8000815 	stw	zero,32(sp)
   244e0:	d9c00517 	ldw	r7,20(sp)
   244e4:	38026416 	blt	r7,zero,24e78 <_dtoa_r+0xc58>
   244e8:	b1ed883a 	add	r22,r22,r7
   244ec:	d9c00d15 	stw	r7,52(sp)
   244f0:	d8000a15 	stw	zero,40(sp)
   244f4:	d9800317 	ldw	r6,12(sp)
   244f8:	00800244 	movi	r2,9
   244fc:	11811436 	bltu	r2,r6,24950 <_dtoa_r+0x730>
   24500:	00800144 	movi	r2,5
   24504:	1184e10e 	bge	r2,r6,2588c <_dtoa_r+0x166c>
   24508:	31bfff04 	addi	r6,r6,-4
   2450c:	d9800315 	stw	r6,12(sp)
   24510:	0023883a 	mov	r17,zero
   24514:	d9800317 	ldw	r6,12(sp)
   24518:	008000c4 	movi	r2,3
   2451c:	30836726 	beq	r6,r2,252bc <_dtoa_r+0x109c>
   24520:	1183410e 	bge	r2,r6,25228 <_dtoa_r+0x1008>
   24524:	d9c00317 	ldw	r7,12(sp)
   24528:	00800104 	movi	r2,4
   2452c:	38827c26 	beq	r7,r2,24f20 <_dtoa_r+0xd00>
   24530:	00800144 	movi	r2,5
   24534:	3884c41e 	bne	r7,r2,25848 <_dtoa_r+0x1628>
   24538:	00800044 	movi	r2,1
   2453c:	d8800b15 	stw	r2,44(sp)
   24540:	d8c00517 	ldw	r3,20(sp)
   24544:	d9002217 	ldw	r4,136(sp)
   24548:	1907883a 	add	r3,r3,r4
   2454c:	19800044 	addi	r6,r3,1
   24550:	d8c00c15 	stw	r3,48(sp)
   24554:	d9800615 	stw	r6,24(sp)
   24558:	0183a40e 	bge	zero,r6,253ec <_dtoa_r+0x11cc>
   2455c:	d9800617 	ldw	r6,24(sp)
   24560:	3021883a 	mov	r16,r6
   24564:	e0001115 	stw	zero,68(fp)
   24568:	008005c4 	movi	r2,23
   2456c:	1184c92e 	bgeu	r2,r6,25894 <_dtoa_r+0x1674>
   24570:	00c00044 	movi	r3,1
   24574:	00800104 	movi	r2,4
   24578:	1085883a 	add	r2,r2,r2
   2457c:	11000504 	addi	r4,r2,20
   24580:	180b883a 	mov	r5,r3
   24584:	18c00044 	addi	r3,r3,1
   24588:	313ffb2e 	bgeu	r6,r4,24578 <__alt_data_end+0xf8024578>
   2458c:	e1401115 	stw	r5,68(fp)
   24590:	e009883a 	mov	r4,fp
   24594:	0026f2c0 	call	26f2c <_Balloc>
   24598:	d8800715 	stw	r2,28(sp)
   2459c:	e0801015 	stw	r2,64(fp)
   245a0:	00800384 	movi	r2,14
   245a4:	1400f736 	bltu	r2,r16,24984 <_dtoa_r+0x764>
   245a8:	8800f626 	beq	r17,zero,24984 <_dtoa_r+0x764>
   245ac:	d9c00517 	ldw	r7,20(sp)
   245b0:	01c39a0e 	bge	zero,r7,2541c <_dtoa_r+0x11fc>
   245b4:	388003cc 	andi	r2,r7,15
   245b8:	100490fa 	slli	r2,r2,3
   245bc:	382bd13a 	srai	r21,r7,4
   245c0:	00c10034 	movhi	r3,1024
   245c4:	18c05404 	addi	r3,r3,336
   245c8:	1885883a 	add	r2,r3,r2
   245cc:	a8c0040c 	andi	r3,r21,16
   245d0:	12400017 	ldw	r9,0(r2)
   245d4:	12000117 	ldw	r8,4(r2)
   245d8:	18037926 	beq	r3,zero,253c0 <_dtoa_r+0x11a0>
   245dc:	00810034 	movhi	r2,1024
   245e0:	10804a04 	addi	r2,r2,296
   245e4:	11800817 	ldw	r6,32(r2)
   245e8:	11c00917 	ldw	r7,36(r2)
   245ec:	9009883a 	mov	r4,r18
   245f0:	980b883a 	mov	r5,r19
   245f4:	da001715 	stw	r8,92(sp)
   245f8:	da401615 	stw	r9,88(sp)
   245fc:	002b8a40 	call	2b8a4 <__divdf3>
   24600:	da001717 	ldw	r8,92(sp)
   24604:	da401617 	ldw	r9,88(sp)
   24608:	ad4003cc 	andi	r21,r21,15
   2460c:	040000c4 	movi	r16,3
   24610:	1023883a 	mov	r17,r2
   24614:	1829883a 	mov	r20,r3
   24618:	a8001126 	beq	r21,zero,24660 <_dtoa_r+0x440>
   2461c:	05c10034 	movhi	r23,1024
   24620:	bdc04a04 	addi	r23,r23,296
   24624:	4805883a 	mov	r2,r9
   24628:	4007883a 	mov	r3,r8
   2462c:	a980004c 	andi	r6,r21,1
   24630:	1009883a 	mov	r4,r2
   24634:	a82bd07a 	srai	r21,r21,1
   24638:	180b883a 	mov	r5,r3
   2463c:	30000426 	beq	r6,zero,24650 <_dtoa_r+0x430>
   24640:	b9800017 	ldw	r6,0(r23)
   24644:	b9c00117 	ldw	r7,4(r23)
   24648:	84000044 	addi	r16,r16,1
   2464c:	002c3e40 	call	2c3e4 <__muldf3>
   24650:	bdc00204 	addi	r23,r23,8
   24654:	a83ff51e 	bne	r21,zero,2462c <__alt_data_end+0xf802462c>
   24658:	1013883a 	mov	r9,r2
   2465c:	1811883a 	mov	r8,r3
   24660:	480d883a 	mov	r6,r9
   24664:	400f883a 	mov	r7,r8
   24668:	8809883a 	mov	r4,r17
   2466c:	a00b883a 	mov	r5,r20
   24670:	002b8a40 	call	2b8a4 <__divdf3>
   24674:	d8800f15 	stw	r2,60(sp)
   24678:	d8c01015 	stw	r3,64(sp)
   2467c:	d8c00e17 	ldw	r3,56(sp)
   24680:	18000626 	beq	r3,zero,2469c <_dtoa_r+0x47c>
   24684:	d9000f17 	ldw	r4,60(sp)
   24688:	d9401017 	ldw	r5,64(sp)
   2468c:	000d883a 	mov	r6,zero
   24690:	01cffc34 	movhi	r7,16368
   24694:	002c2f00 	call	2c2f0 <__ledf2>
   24698:	10040b16 	blt	r2,zero,256c8 <_dtoa_r+0x14a8>
   2469c:	8009883a 	mov	r4,r16
   246a0:	002d4780 	call	2d478 <__floatsidf>
   246a4:	d9800f17 	ldw	r6,60(sp)
   246a8:	d9c01017 	ldw	r7,64(sp)
   246ac:	1009883a 	mov	r4,r2
   246b0:	180b883a 	mov	r5,r3
   246b4:	002c3e40 	call	2c3e4 <__muldf3>
   246b8:	000d883a 	mov	r6,zero
   246bc:	01d00734 	movhi	r7,16412
   246c0:	1009883a 	mov	r4,r2
   246c4:	180b883a 	mov	r5,r3
   246c8:	002aff80 	call	2aff8 <__adddf3>
   246cc:	1021883a 	mov	r16,r2
   246d0:	d8800617 	ldw	r2,24(sp)
   246d4:	047f3034 	movhi	r17,64704
   246d8:	1c63883a 	add	r17,r3,r17
   246dc:	10031826 	beq	r2,zero,25340 <_dtoa_r+0x1120>
   246e0:	d8c00517 	ldw	r3,20(sp)
   246e4:	db000617 	ldw	r12,24(sp)
   246e8:	d8c01315 	stw	r3,76(sp)
   246ec:	d9000b17 	ldw	r4,44(sp)
   246f0:	20038f26 	beq	r4,zero,25530 <_dtoa_r+0x1310>
   246f4:	60bfffc4 	addi	r2,r12,-1
   246f8:	100490fa 	slli	r2,r2,3
   246fc:	00c10034 	movhi	r3,1024
   24700:	18c05404 	addi	r3,r3,336
   24704:	1885883a 	add	r2,r3,r2
   24708:	11800017 	ldw	r6,0(r2)
   2470c:	11c00117 	ldw	r7,4(r2)
   24710:	d8800717 	ldw	r2,28(sp)
   24714:	0009883a 	mov	r4,zero
   24718:	014ff834 	movhi	r5,16352
   2471c:	db001615 	stw	r12,88(sp)
   24720:	15c00044 	addi	r23,r2,1
   24724:	002b8a40 	call	2b8a4 <__divdf3>
   24728:	800d883a 	mov	r6,r16
   2472c:	880f883a 	mov	r7,r17
   24730:	1009883a 	mov	r4,r2
   24734:	180b883a 	mov	r5,r3
   24738:	002cafc0 	call	2cafc <__subdf3>
   2473c:	d9401017 	ldw	r5,64(sp)
   24740:	d9000f17 	ldw	r4,60(sp)
   24744:	102b883a 	mov	r21,r2
   24748:	d8c01215 	stw	r3,72(sp)
   2474c:	002d3f80 	call	2d3f8 <__fixdfsi>
   24750:	1009883a 	mov	r4,r2
   24754:	1029883a 	mov	r20,r2
   24758:	002d4780 	call	2d478 <__floatsidf>
   2475c:	d9000f17 	ldw	r4,60(sp)
   24760:	d9401017 	ldw	r5,64(sp)
   24764:	100d883a 	mov	r6,r2
   24768:	180f883a 	mov	r7,r3
   2476c:	002cafc0 	call	2cafc <__subdf3>
   24770:	1823883a 	mov	r17,r3
   24774:	d8c00717 	ldw	r3,28(sp)
   24778:	d9401217 	ldw	r5,72(sp)
   2477c:	a2000c04 	addi	r8,r20,48
   24780:	1021883a 	mov	r16,r2
   24784:	1a000005 	stb	r8,0(r3)
   24788:	800d883a 	mov	r6,r16
   2478c:	880f883a 	mov	r7,r17
   24790:	a809883a 	mov	r4,r21
   24794:	4029883a 	mov	r20,r8
   24798:	002c2140 	call	2c214 <__gedf2>
   2479c:	00841d16 	blt	zero,r2,25814 <_dtoa_r+0x15f4>
   247a0:	800d883a 	mov	r6,r16
   247a4:	880f883a 	mov	r7,r17
   247a8:	0009883a 	mov	r4,zero
   247ac:	014ffc34 	movhi	r5,16368
   247b0:	002cafc0 	call	2cafc <__subdf3>
   247b4:	d9401217 	ldw	r5,72(sp)
   247b8:	100d883a 	mov	r6,r2
   247bc:	180f883a 	mov	r7,r3
   247c0:	a809883a 	mov	r4,r21
   247c4:	002c2140 	call	2c214 <__gedf2>
   247c8:	db001617 	ldw	r12,88(sp)
   247cc:	00840e16 	blt	zero,r2,25808 <_dtoa_r+0x15e8>
   247d0:	00800044 	movi	r2,1
   247d4:	13006b0e 	bge	r2,r12,24984 <_dtoa_r+0x764>
   247d8:	d9000717 	ldw	r4,28(sp)
   247dc:	dd800f15 	stw	r22,60(sp)
   247e0:	dcc01015 	stw	r19,64(sp)
   247e4:	2319883a 	add	r12,r4,r12
   247e8:	dcc01217 	ldw	r19,72(sp)
   247ec:	602d883a 	mov	r22,r12
   247f0:	dc801215 	stw	r18,72(sp)
   247f4:	b825883a 	mov	r18,r23
   247f8:	00000906 	br	24820 <_dtoa_r+0x600>
   247fc:	002cafc0 	call	2cafc <__subdf3>
   24800:	a80d883a 	mov	r6,r21
   24804:	980f883a 	mov	r7,r19
   24808:	1009883a 	mov	r4,r2
   2480c:	180b883a 	mov	r5,r3
   24810:	002c2f00 	call	2c2f0 <__ledf2>
   24814:	1003e816 	blt	r2,zero,257b8 <_dtoa_r+0x1598>
   24818:	b825883a 	mov	r18,r23
   2481c:	bd83e926 	beq	r23,r22,257c4 <_dtoa_r+0x15a4>
   24820:	a809883a 	mov	r4,r21
   24824:	980b883a 	mov	r5,r19
   24828:	000d883a 	mov	r6,zero
   2482c:	01d00934 	movhi	r7,16420
   24830:	002c3e40 	call	2c3e4 <__muldf3>
   24834:	000d883a 	mov	r6,zero
   24838:	01d00934 	movhi	r7,16420
   2483c:	8009883a 	mov	r4,r16
   24840:	880b883a 	mov	r5,r17
   24844:	102b883a 	mov	r21,r2
   24848:	1827883a 	mov	r19,r3
   2484c:	002c3e40 	call	2c3e4 <__muldf3>
   24850:	180b883a 	mov	r5,r3
   24854:	1009883a 	mov	r4,r2
   24858:	1821883a 	mov	r16,r3
   2485c:	1023883a 	mov	r17,r2
   24860:	002d3f80 	call	2d3f8 <__fixdfsi>
   24864:	1009883a 	mov	r4,r2
   24868:	1029883a 	mov	r20,r2
   2486c:	002d4780 	call	2d478 <__floatsidf>
   24870:	8809883a 	mov	r4,r17
   24874:	800b883a 	mov	r5,r16
   24878:	100d883a 	mov	r6,r2
   2487c:	180f883a 	mov	r7,r3
   24880:	002cafc0 	call	2cafc <__subdf3>
   24884:	a5000c04 	addi	r20,r20,48
   24888:	a80d883a 	mov	r6,r21
   2488c:	980f883a 	mov	r7,r19
   24890:	1009883a 	mov	r4,r2
   24894:	180b883a 	mov	r5,r3
   24898:	95000005 	stb	r20,0(r18)
   2489c:	1021883a 	mov	r16,r2
   248a0:	1823883a 	mov	r17,r3
   248a4:	002c2f00 	call	2c2f0 <__ledf2>
   248a8:	bdc00044 	addi	r23,r23,1
   248ac:	800d883a 	mov	r6,r16
   248b0:	880f883a 	mov	r7,r17
   248b4:	0009883a 	mov	r4,zero
   248b8:	014ffc34 	movhi	r5,16368
   248bc:	103fcf0e 	bge	r2,zero,247fc <__alt_data_end+0xf80247fc>
   248c0:	d8c01317 	ldw	r3,76(sp)
   248c4:	d8c00515 	stw	r3,20(sp)
   248c8:	d9400917 	ldw	r5,36(sp)
   248cc:	e009883a 	mov	r4,fp
   248d0:	0026fd40 	call	26fd4 <_Bfree>
   248d4:	d9000517 	ldw	r4,20(sp)
   248d8:	d9802317 	ldw	r6,140(sp)
   248dc:	d9c02517 	ldw	r7,148(sp)
   248e0:	b8000005 	stb	zero,0(r23)
   248e4:	20800044 	addi	r2,r4,1
   248e8:	30800015 	stw	r2,0(r6)
   248ec:	3802aa26 	beq	r7,zero,25398 <_dtoa_r+0x1178>
   248f0:	3dc00015 	stw	r23,0(r7)
   248f4:	d8800717 	ldw	r2,28(sp)
   248f8:	003e7906 	br	242e0 <__alt_data_end+0xf80242e0>
   248fc:	00800434 	movhi	r2,16
   24900:	10bfffc4 	addi	r2,r2,-1
   24904:	88a2703a 	and	r17,r17,r2
   24908:	883e851e 	bne	r17,zero,24320 <__alt_data_end+0xf8024320>
   2490c:	00810034 	movhi	r2,1024
   24910:	10803604 	addi	r2,r2,216
   24914:	003e8406 	br	24328 <__alt_data_end+0xf8024328>
   24918:	10c00204 	addi	r3,r2,8
   2491c:	003e8706 	br	2433c <__alt_data_end+0xf802433c>
   24920:	01400434 	movhi	r5,16
   24924:	297fffc4 	addi	r5,r5,-1
   24928:	994a703a 	and	r5,r19,r5
   2492c:	9009883a 	mov	r4,r18
   24930:	843f0044 	addi	r16,r16,-1023
   24934:	294ffc34 	orhi	r5,r5,16368
   24938:	dd800217 	ldw	r22,8(sp)
   2493c:	d8001115 	stw	zero,68(sp)
   24940:	003ea506 	br	243d8 <__alt_data_end+0xf80243d8>
   24944:	00810034 	movhi	r2,1024
   24948:	10802d04 	addi	r2,r2,180
   2494c:	003e6406 	br	242e0 <__alt_data_end+0xf80242e0>
   24950:	e0001115 	stw	zero,68(fp)
   24954:	000b883a 	mov	r5,zero
   24958:	e009883a 	mov	r4,fp
   2495c:	0026f2c0 	call	26f2c <_Balloc>
   24960:	01bfffc4 	movi	r6,-1
   24964:	01c00044 	movi	r7,1
   24968:	d8800715 	stw	r2,28(sp)
   2496c:	d9800c15 	stw	r6,48(sp)
   24970:	e0801015 	stw	r2,64(fp)
   24974:	d8000315 	stw	zero,12(sp)
   24978:	d9c00b15 	stw	r7,44(sp)
   2497c:	d9800615 	stw	r6,24(sp)
   24980:	d8002215 	stw	zero,136(sp)
   24984:	d8800117 	ldw	r2,4(sp)
   24988:	10008916 	blt	r2,zero,24bb0 <_dtoa_r+0x990>
   2498c:	d9000517 	ldw	r4,20(sp)
   24990:	00c00384 	movi	r3,14
   24994:	19008616 	blt	r3,r4,24bb0 <_dtoa_r+0x990>
   24998:	200490fa 	slli	r2,r4,3
   2499c:	00c10034 	movhi	r3,1024
   249a0:	d9802217 	ldw	r6,136(sp)
   249a4:	18c05404 	addi	r3,r3,336
   249a8:	1885883a 	add	r2,r3,r2
   249ac:	14000017 	ldw	r16,0(r2)
   249b0:	14400117 	ldw	r17,4(r2)
   249b4:	30016316 	blt	r6,zero,24f44 <_dtoa_r+0xd24>
   249b8:	800d883a 	mov	r6,r16
   249bc:	880f883a 	mov	r7,r17
   249c0:	9009883a 	mov	r4,r18
   249c4:	980b883a 	mov	r5,r19
   249c8:	002b8a40 	call	2b8a4 <__divdf3>
   249cc:	180b883a 	mov	r5,r3
   249d0:	1009883a 	mov	r4,r2
   249d4:	002d3f80 	call	2d3f8 <__fixdfsi>
   249d8:	1009883a 	mov	r4,r2
   249dc:	102b883a 	mov	r21,r2
   249e0:	002d4780 	call	2d478 <__floatsidf>
   249e4:	800d883a 	mov	r6,r16
   249e8:	880f883a 	mov	r7,r17
   249ec:	1009883a 	mov	r4,r2
   249f0:	180b883a 	mov	r5,r3
   249f4:	002c3e40 	call	2c3e4 <__muldf3>
   249f8:	100d883a 	mov	r6,r2
   249fc:	180f883a 	mov	r7,r3
   24a00:	9009883a 	mov	r4,r18
   24a04:	980b883a 	mov	r5,r19
   24a08:	002cafc0 	call	2cafc <__subdf3>
   24a0c:	d9c00717 	ldw	r7,28(sp)
   24a10:	1009883a 	mov	r4,r2
   24a14:	a8800c04 	addi	r2,r21,48
   24a18:	38800005 	stb	r2,0(r7)
   24a1c:	3dc00044 	addi	r23,r7,1
   24a20:	d9c00617 	ldw	r7,24(sp)
   24a24:	01800044 	movi	r6,1
   24a28:	180b883a 	mov	r5,r3
   24a2c:	2005883a 	mov	r2,r4
   24a30:	39803826 	beq	r7,r6,24b14 <_dtoa_r+0x8f4>
   24a34:	000d883a 	mov	r6,zero
   24a38:	01d00934 	movhi	r7,16420
   24a3c:	002c3e40 	call	2c3e4 <__muldf3>
   24a40:	000d883a 	mov	r6,zero
   24a44:	000f883a 	mov	r7,zero
   24a48:	1009883a 	mov	r4,r2
   24a4c:	180b883a 	mov	r5,r3
   24a50:	1025883a 	mov	r18,r2
   24a54:	1827883a 	mov	r19,r3
   24a58:	002c18c0 	call	2c18c <__eqdf2>
   24a5c:	103f9a26 	beq	r2,zero,248c8 <__alt_data_end+0xf80248c8>
   24a60:	d9c00617 	ldw	r7,24(sp)
   24a64:	d8c00717 	ldw	r3,28(sp)
   24a68:	b829883a 	mov	r20,r23
   24a6c:	38bfffc4 	addi	r2,r7,-1
   24a70:	18ad883a 	add	r22,r3,r2
   24a74:	00000a06 	br	24aa0 <_dtoa_r+0x880>
   24a78:	002c3e40 	call	2c3e4 <__muldf3>
   24a7c:	000d883a 	mov	r6,zero
   24a80:	000f883a 	mov	r7,zero
   24a84:	1009883a 	mov	r4,r2
   24a88:	180b883a 	mov	r5,r3
   24a8c:	1025883a 	mov	r18,r2
   24a90:	1827883a 	mov	r19,r3
   24a94:	b829883a 	mov	r20,r23
   24a98:	002c18c0 	call	2c18c <__eqdf2>
   24a9c:	103f8a26 	beq	r2,zero,248c8 <__alt_data_end+0xf80248c8>
   24aa0:	800d883a 	mov	r6,r16
   24aa4:	880f883a 	mov	r7,r17
   24aa8:	9009883a 	mov	r4,r18
   24aac:	980b883a 	mov	r5,r19
   24ab0:	002b8a40 	call	2b8a4 <__divdf3>
   24ab4:	180b883a 	mov	r5,r3
   24ab8:	1009883a 	mov	r4,r2
   24abc:	002d3f80 	call	2d3f8 <__fixdfsi>
   24ac0:	1009883a 	mov	r4,r2
   24ac4:	102b883a 	mov	r21,r2
   24ac8:	002d4780 	call	2d478 <__floatsidf>
   24acc:	800d883a 	mov	r6,r16
   24ad0:	880f883a 	mov	r7,r17
   24ad4:	1009883a 	mov	r4,r2
   24ad8:	180b883a 	mov	r5,r3
   24adc:	002c3e40 	call	2c3e4 <__muldf3>
   24ae0:	100d883a 	mov	r6,r2
   24ae4:	180f883a 	mov	r7,r3
   24ae8:	9009883a 	mov	r4,r18
   24aec:	980b883a 	mov	r5,r19
   24af0:	002cafc0 	call	2cafc <__subdf3>
   24af4:	aa000c04 	addi	r8,r21,48
   24af8:	a2000005 	stb	r8,0(r20)
   24afc:	000d883a 	mov	r6,zero
   24b00:	01d00934 	movhi	r7,16420
   24b04:	1009883a 	mov	r4,r2
   24b08:	180b883a 	mov	r5,r3
   24b0c:	a5c00044 	addi	r23,r20,1
   24b10:	b53fd91e 	bne	r22,r20,24a78 <__alt_data_end+0xf8024a78>
   24b14:	100d883a 	mov	r6,r2
   24b18:	180f883a 	mov	r7,r3
   24b1c:	1009883a 	mov	r4,r2
   24b20:	180b883a 	mov	r5,r3
   24b24:	002aff80 	call	2aff8 <__adddf3>
   24b28:	100d883a 	mov	r6,r2
   24b2c:	180f883a 	mov	r7,r3
   24b30:	8009883a 	mov	r4,r16
   24b34:	880b883a 	mov	r5,r17
   24b38:	1027883a 	mov	r19,r2
   24b3c:	1825883a 	mov	r18,r3
   24b40:	002c2f00 	call	2c2f0 <__ledf2>
   24b44:	10000816 	blt	r2,zero,24b68 <_dtoa_r+0x948>
   24b48:	980d883a 	mov	r6,r19
   24b4c:	900f883a 	mov	r7,r18
   24b50:	8009883a 	mov	r4,r16
   24b54:	880b883a 	mov	r5,r17
   24b58:	002c18c0 	call	2c18c <__eqdf2>
   24b5c:	103f5a1e 	bne	r2,zero,248c8 <__alt_data_end+0xf80248c8>
   24b60:	ad40004c 	andi	r21,r21,1
   24b64:	a83f5826 	beq	r21,zero,248c8 <__alt_data_end+0xf80248c8>
   24b68:	bd3fffc3 	ldbu	r20,-1(r23)
   24b6c:	b8bfffc4 	addi	r2,r23,-1
   24b70:	1007883a 	mov	r3,r2
   24b74:	01400e44 	movi	r5,57
   24b78:	d9800717 	ldw	r6,28(sp)
   24b7c:	00000506 	br	24b94 <_dtoa_r+0x974>
   24b80:	18ffffc4 	addi	r3,r3,-1
   24b84:	11824726 	beq	r2,r6,254a4 <_dtoa_r+0x1284>
   24b88:	1d000003 	ldbu	r20,0(r3)
   24b8c:	102f883a 	mov	r23,r2
   24b90:	10bfffc4 	addi	r2,r2,-1
   24b94:	a1003fcc 	andi	r4,r20,255
   24b98:	2100201c 	xori	r4,r4,128
   24b9c:	213fe004 	addi	r4,r4,-128
   24ba0:	217ff726 	beq	r4,r5,24b80 <__alt_data_end+0xf8024b80>
   24ba4:	a2000044 	addi	r8,r20,1
   24ba8:	12000005 	stb	r8,0(r2)
   24bac:	003f4606 	br	248c8 <__alt_data_end+0xf80248c8>
   24bb0:	d9000b17 	ldw	r4,44(sp)
   24bb4:	2000c826 	beq	r4,zero,24ed8 <_dtoa_r+0xcb8>
   24bb8:	d9800317 	ldw	r6,12(sp)
   24bbc:	00c00044 	movi	r3,1
   24bc0:	1980f90e 	bge	r3,r6,24fa8 <_dtoa_r+0xd88>
   24bc4:	d8800617 	ldw	r2,24(sp)
   24bc8:	d8c00a17 	ldw	r3,40(sp)
   24bcc:	157fffc4 	addi	r21,r2,-1
   24bd0:	1d41f316 	blt	r3,r21,253a0 <_dtoa_r+0x1180>
   24bd4:	1d6bc83a 	sub	r21,r3,r21
   24bd8:	d9c00617 	ldw	r7,24(sp)
   24bdc:	3802aa16 	blt	r7,zero,25688 <_dtoa_r+0x1468>
   24be0:	dd000817 	ldw	r20,32(sp)
   24be4:	d8800617 	ldw	r2,24(sp)
   24be8:	d8c00817 	ldw	r3,32(sp)
   24bec:	01400044 	movi	r5,1
   24bf0:	e009883a 	mov	r4,fp
   24bf4:	1887883a 	add	r3,r3,r2
   24bf8:	d8c00815 	stw	r3,32(sp)
   24bfc:	b0ad883a 	add	r22,r22,r2
   24c00:	00273380 	call	27338 <__i2b>
   24c04:	1023883a 	mov	r17,r2
   24c08:	a0000826 	beq	r20,zero,24c2c <_dtoa_r+0xa0c>
   24c0c:	0580070e 	bge	zero,r22,24c2c <_dtoa_r+0xa0c>
   24c10:	a005883a 	mov	r2,r20
   24c14:	b500b916 	blt	r22,r20,24efc <_dtoa_r+0xcdc>
   24c18:	d9000817 	ldw	r4,32(sp)
   24c1c:	a0a9c83a 	sub	r20,r20,r2
   24c20:	b0adc83a 	sub	r22,r22,r2
   24c24:	2089c83a 	sub	r4,r4,r2
   24c28:	d9000815 	stw	r4,32(sp)
   24c2c:	d9800a17 	ldw	r6,40(sp)
   24c30:	0181810e 	bge	zero,r6,25238 <_dtoa_r+0x1018>
   24c34:	d9c00b17 	ldw	r7,44(sp)
   24c38:	3800b326 	beq	r7,zero,24f08 <_dtoa_r+0xce8>
   24c3c:	a800b226 	beq	r21,zero,24f08 <_dtoa_r+0xce8>
   24c40:	880b883a 	mov	r5,r17
   24c44:	a80d883a 	mov	r6,r21
   24c48:	e009883a 	mov	r4,fp
   24c4c:	002756c0 	call	2756c <__pow5mult>
   24c50:	d9800917 	ldw	r6,36(sp)
   24c54:	100b883a 	mov	r5,r2
   24c58:	e009883a 	mov	r4,fp
   24c5c:	1023883a 	mov	r17,r2
   24c60:	00273740 	call	27374 <__multiply>
   24c64:	1021883a 	mov	r16,r2
   24c68:	d8800a17 	ldw	r2,40(sp)
   24c6c:	d9400917 	ldw	r5,36(sp)
   24c70:	e009883a 	mov	r4,fp
   24c74:	1545c83a 	sub	r2,r2,r21
   24c78:	d8800a15 	stw	r2,40(sp)
   24c7c:	0026fd40 	call	26fd4 <_Bfree>
   24c80:	d8c00a17 	ldw	r3,40(sp)
   24c84:	18009f1e 	bne	r3,zero,24f04 <_dtoa_r+0xce4>
   24c88:	05c00044 	movi	r23,1
   24c8c:	e009883a 	mov	r4,fp
   24c90:	b80b883a 	mov	r5,r23
   24c94:	00273380 	call	27338 <__i2b>
   24c98:	d9000d17 	ldw	r4,52(sp)
   24c9c:	102b883a 	mov	r21,r2
   24ca0:	2000ce26 	beq	r4,zero,24fdc <_dtoa_r+0xdbc>
   24ca4:	200d883a 	mov	r6,r4
   24ca8:	100b883a 	mov	r5,r2
   24cac:	e009883a 	mov	r4,fp
   24cb0:	002756c0 	call	2756c <__pow5mult>
   24cb4:	d9800317 	ldw	r6,12(sp)
   24cb8:	102b883a 	mov	r21,r2
   24cbc:	b981810e 	bge	r23,r6,252c4 <_dtoa_r+0x10a4>
   24cc0:	0027883a 	mov	r19,zero
   24cc4:	a8800417 	ldw	r2,16(r21)
   24cc8:	05c00804 	movi	r23,32
   24ccc:	10800104 	addi	r2,r2,4
   24cd0:	1085883a 	add	r2,r2,r2
   24cd4:	1085883a 	add	r2,r2,r2
   24cd8:	a885883a 	add	r2,r21,r2
   24cdc:	11000017 	ldw	r4,0(r2)
   24ce0:	00272200 	call	27220 <__hi0bits>
   24ce4:	b885c83a 	sub	r2,r23,r2
   24ce8:	1585883a 	add	r2,r2,r22
   24cec:	108007cc 	andi	r2,r2,31
   24cf0:	1000b326 	beq	r2,zero,24fc0 <_dtoa_r+0xda0>
   24cf4:	00c00804 	movi	r3,32
   24cf8:	1887c83a 	sub	r3,r3,r2
   24cfc:	01000104 	movi	r4,4
   24d00:	20c2cd0e 	bge	r4,r3,25838 <_dtoa_r+0x1618>
   24d04:	00c00704 	movi	r3,28
   24d08:	1885c83a 	sub	r2,r3,r2
   24d0c:	d8c00817 	ldw	r3,32(sp)
   24d10:	a0a9883a 	add	r20,r20,r2
   24d14:	b0ad883a 	add	r22,r22,r2
   24d18:	1887883a 	add	r3,r3,r2
   24d1c:	d8c00815 	stw	r3,32(sp)
   24d20:	d9800817 	ldw	r6,32(sp)
   24d24:	0180040e 	bge	zero,r6,24d38 <_dtoa_r+0xb18>
   24d28:	800b883a 	mov	r5,r16
   24d2c:	e009883a 	mov	r4,fp
   24d30:	00276ac0 	call	276ac <__lshift>
   24d34:	1021883a 	mov	r16,r2
   24d38:	0580050e 	bge	zero,r22,24d50 <_dtoa_r+0xb30>
   24d3c:	a80b883a 	mov	r5,r21
   24d40:	b00d883a 	mov	r6,r22
   24d44:	e009883a 	mov	r4,fp
   24d48:	00276ac0 	call	276ac <__lshift>
   24d4c:	102b883a 	mov	r21,r2
   24d50:	d9c00e17 	ldw	r7,56(sp)
   24d54:	3801211e 	bne	r7,zero,251dc <_dtoa_r+0xfbc>
   24d58:	d9800617 	ldw	r6,24(sp)
   24d5c:	0181380e 	bge	zero,r6,25240 <_dtoa_r+0x1020>
   24d60:	d8c00b17 	ldw	r3,44(sp)
   24d64:	1800ab1e 	bne	r3,zero,25014 <_dtoa_r+0xdf4>
   24d68:	dc800717 	ldw	r18,28(sp)
   24d6c:	dcc00617 	ldw	r19,24(sp)
   24d70:	9029883a 	mov	r20,r18
   24d74:	00000206 	br	24d80 <_dtoa_r+0xb60>
   24d78:	0026ffc0 	call	26ffc <__multadd>
   24d7c:	1021883a 	mov	r16,r2
   24d80:	a80b883a 	mov	r5,r21
   24d84:	8009883a 	mov	r4,r16
   24d88:	00240200 	call	24020 <quorem>
   24d8c:	10800c04 	addi	r2,r2,48
   24d90:	90800005 	stb	r2,0(r18)
   24d94:	94800044 	addi	r18,r18,1
   24d98:	9507c83a 	sub	r3,r18,r20
   24d9c:	000f883a 	mov	r7,zero
   24da0:	01800284 	movi	r6,10
   24da4:	800b883a 	mov	r5,r16
   24da8:	e009883a 	mov	r4,fp
   24dac:	1cfff216 	blt	r3,r19,24d78 <__alt_data_end+0xf8024d78>
   24db0:	1011883a 	mov	r8,r2
   24db4:	d8800617 	ldw	r2,24(sp)
   24db8:	0082370e 	bge	zero,r2,25698 <_dtoa_r+0x1478>
   24dbc:	d9000717 	ldw	r4,28(sp)
   24dc0:	0025883a 	mov	r18,zero
   24dc4:	20af883a 	add	r23,r4,r2
   24dc8:	01800044 	movi	r6,1
   24dcc:	800b883a 	mov	r5,r16
   24dd0:	e009883a 	mov	r4,fp
   24dd4:	da001715 	stw	r8,92(sp)
   24dd8:	00276ac0 	call	276ac <__lshift>
   24ddc:	a80b883a 	mov	r5,r21
   24de0:	1009883a 	mov	r4,r2
   24de4:	d8800915 	stw	r2,36(sp)
   24de8:	00277f40 	call	277f4 <__mcmp>
   24dec:	da001717 	ldw	r8,92(sp)
   24df0:	0081800e 	bge	zero,r2,253f4 <_dtoa_r+0x11d4>
   24df4:	b93fffc3 	ldbu	r4,-1(r23)
   24df8:	b8bfffc4 	addi	r2,r23,-1
   24dfc:	1007883a 	mov	r3,r2
   24e00:	01800e44 	movi	r6,57
   24e04:	d9c00717 	ldw	r7,28(sp)
   24e08:	00000506 	br	24e20 <_dtoa_r+0xc00>
   24e0c:	18ffffc4 	addi	r3,r3,-1
   24e10:	11c12326 	beq	r2,r7,252a0 <_dtoa_r+0x1080>
   24e14:	19000003 	ldbu	r4,0(r3)
   24e18:	102f883a 	mov	r23,r2
   24e1c:	10bfffc4 	addi	r2,r2,-1
   24e20:	21403fcc 	andi	r5,r4,255
   24e24:	2940201c 	xori	r5,r5,128
   24e28:	297fe004 	addi	r5,r5,-128
   24e2c:	29bff726 	beq	r5,r6,24e0c <__alt_data_end+0xf8024e0c>
   24e30:	21000044 	addi	r4,r4,1
   24e34:	11000005 	stb	r4,0(r2)
   24e38:	a80b883a 	mov	r5,r21
   24e3c:	e009883a 	mov	r4,fp
   24e40:	0026fd40 	call	26fd4 <_Bfree>
   24e44:	883ea026 	beq	r17,zero,248c8 <__alt_data_end+0xf80248c8>
   24e48:	90000426 	beq	r18,zero,24e5c <_dtoa_r+0xc3c>
   24e4c:	94400326 	beq	r18,r17,24e5c <_dtoa_r+0xc3c>
   24e50:	900b883a 	mov	r5,r18
   24e54:	e009883a 	mov	r4,fp
   24e58:	0026fd40 	call	26fd4 <_Bfree>
   24e5c:	880b883a 	mov	r5,r17
   24e60:	e009883a 	mov	r4,fp
   24e64:	0026fd40 	call	26fd4 <_Bfree>
   24e68:	003e9706 	br	248c8 <__alt_data_end+0xf80248c8>
   24e6c:	01800044 	movi	r6,1
   24e70:	d9800e15 	stw	r6,56(sp)
   24e74:	003d9606 	br	244d0 <__alt_data_end+0xf80244d0>
   24e78:	d8800817 	ldw	r2,32(sp)
   24e7c:	d8c00517 	ldw	r3,20(sp)
   24e80:	d8000d15 	stw	zero,52(sp)
   24e84:	10c5c83a 	sub	r2,r2,r3
   24e88:	00c9c83a 	sub	r4,zero,r3
   24e8c:	d8800815 	stw	r2,32(sp)
   24e90:	d9000a15 	stw	r4,40(sp)
   24e94:	003d9706 	br	244f4 <__alt_data_end+0xf80244f4>
   24e98:	05adc83a 	sub	r22,zero,r22
   24e9c:	dd800815 	stw	r22,32(sp)
   24ea0:	002d883a 	mov	r22,zero
   24ea4:	003d8e06 	br	244e0 <__alt_data_end+0xf80244e0>
   24ea8:	d9000517 	ldw	r4,20(sp)
   24eac:	002d4780 	call	2d478 <__floatsidf>
   24eb0:	100d883a 	mov	r6,r2
   24eb4:	180f883a 	mov	r7,r3
   24eb8:	a009883a 	mov	r4,r20
   24ebc:	880b883a 	mov	r5,r17
   24ec0:	002c18c0 	call	2c18c <__eqdf2>
   24ec4:	103d7126 	beq	r2,zero,2448c <__alt_data_end+0xf802448c>
   24ec8:	d9c00517 	ldw	r7,20(sp)
   24ecc:	39ffffc4 	addi	r7,r7,-1
   24ed0:	d9c00515 	stw	r7,20(sp)
   24ed4:	003d6d06 	br	2448c <__alt_data_end+0xf802448c>
   24ed8:	dd400a17 	ldw	r21,40(sp)
   24edc:	dd000817 	ldw	r20,32(sp)
   24ee0:	0023883a 	mov	r17,zero
   24ee4:	003f4806 	br	24c08 <__alt_data_end+0xf8024c08>
   24ee8:	10e3c83a 	sub	r17,r2,r3
   24eec:	9448983a 	sll	r4,r18,r17
   24ef0:	003d3206 	br	243bc <__alt_data_end+0xf80243bc>
   24ef4:	d8000e15 	stw	zero,56(sp)
   24ef8:	003d7506 	br	244d0 <__alt_data_end+0xf80244d0>
   24efc:	b005883a 	mov	r2,r22
   24f00:	003f4506 	br	24c18 <__alt_data_end+0xf8024c18>
   24f04:	dc000915 	stw	r16,36(sp)
   24f08:	d9800a17 	ldw	r6,40(sp)
   24f0c:	d9400917 	ldw	r5,36(sp)
   24f10:	e009883a 	mov	r4,fp
   24f14:	002756c0 	call	2756c <__pow5mult>
   24f18:	1021883a 	mov	r16,r2
   24f1c:	003f5a06 	br	24c88 <__alt_data_end+0xf8024c88>
   24f20:	01c00044 	movi	r7,1
   24f24:	d9c00b15 	stw	r7,44(sp)
   24f28:	d8802217 	ldw	r2,136(sp)
   24f2c:	0081280e 	bge	zero,r2,253d0 <_dtoa_r+0x11b0>
   24f30:	100d883a 	mov	r6,r2
   24f34:	1021883a 	mov	r16,r2
   24f38:	d8800c15 	stw	r2,48(sp)
   24f3c:	d8800615 	stw	r2,24(sp)
   24f40:	003d8806 	br	24564 <__alt_data_end+0xf8024564>
   24f44:	d8800617 	ldw	r2,24(sp)
   24f48:	00be9b16 	blt	zero,r2,249b8 <__alt_data_end+0xf80249b8>
   24f4c:	10010f1e 	bne	r2,zero,2538c <_dtoa_r+0x116c>
   24f50:	880b883a 	mov	r5,r17
   24f54:	000d883a 	mov	r6,zero
   24f58:	01d00534 	movhi	r7,16404
   24f5c:	8009883a 	mov	r4,r16
   24f60:	002c3e40 	call	2c3e4 <__muldf3>
   24f64:	900d883a 	mov	r6,r18
   24f68:	980f883a 	mov	r7,r19
   24f6c:	1009883a 	mov	r4,r2
   24f70:	180b883a 	mov	r5,r3
   24f74:	002c2140 	call	2c214 <__gedf2>
   24f78:	002b883a 	mov	r21,zero
   24f7c:	0023883a 	mov	r17,zero
   24f80:	1000bf16 	blt	r2,zero,25280 <_dtoa_r+0x1060>
   24f84:	d9802217 	ldw	r6,136(sp)
   24f88:	ddc00717 	ldw	r23,28(sp)
   24f8c:	018c303a 	nor	r6,zero,r6
   24f90:	d9800515 	stw	r6,20(sp)
   24f94:	a80b883a 	mov	r5,r21
   24f98:	e009883a 	mov	r4,fp
   24f9c:	0026fd40 	call	26fd4 <_Bfree>
   24fa0:	883e4926 	beq	r17,zero,248c8 <__alt_data_end+0xf80248c8>
   24fa4:	003fad06 	br	24e5c <__alt_data_end+0xf8024e5c>
   24fa8:	d9c01117 	ldw	r7,68(sp)
   24fac:	3801bc26 	beq	r7,zero,256a0 <_dtoa_r+0x1480>
   24fb0:	10810cc4 	addi	r2,r2,1075
   24fb4:	dd400a17 	ldw	r21,40(sp)
   24fb8:	dd000817 	ldw	r20,32(sp)
   24fbc:	003f0a06 	br	24be8 <__alt_data_end+0xf8024be8>
   24fc0:	00800704 	movi	r2,28
   24fc4:	d9000817 	ldw	r4,32(sp)
   24fc8:	a0a9883a 	add	r20,r20,r2
   24fcc:	b0ad883a 	add	r22,r22,r2
   24fd0:	2089883a 	add	r4,r4,r2
   24fd4:	d9000815 	stw	r4,32(sp)
   24fd8:	003f5106 	br	24d20 <__alt_data_end+0xf8024d20>
   24fdc:	d8c00317 	ldw	r3,12(sp)
   24fe0:	b8c1fc0e 	bge	r23,r3,257d4 <_dtoa_r+0x15b4>
   24fe4:	0027883a 	mov	r19,zero
   24fe8:	b805883a 	mov	r2,r23
   24fec:	003f3e06 	br	24ce8 <__alt_data_end+0xf8024ce8>
   24ff0:	880b883a 	mov	r5,r17
   24ff4:	e009883a 	mov	r4,fp
   24ff8:	000f883a 	mov	r7,zero
   24ffc:	01800284 	movi	r6,10
   25000:	0026ffc0 	call	26ffc <__multadd>
   25004:	d9000c17 	ldw	r4,48(sp)
   25008:	1023883a 	mov	r17,r2
   2500c:	0102040e 	bge	zero,r4,25820 <_dtoa_r+0x1600>
   25010:	d9000615 	stw	r4,24(sp)
   25014:	0500050e 	bge	zero,r20,2502c <_dtoa_r+0xe0c>
   25018:	880b883a 	mov	r5,r17
   2501c:	a00d883a 	mov	r6,r20
   25020:	e009883a 	mov	r4,fp
   25024:	00276ac0 	call	276ac <__lshift>
   25028:	1023883a 	mov	r17,r2
   2502c:	9801241e 	bne	r19,zero,254c0 <_dtoa_r+0x12a0>
   25030:	8829883a 	mov	r20,r17
   25034:	d9000617 	ldw	r4,24(sp)
   25038:	dcc00717 	ldw	r19,28(sp)
   2503c:	9480004c 	andi	r18,r18,1
   25040:	20bfffc4 	addi	r2,r4,-1
   25044:	9885883a 	add	r2,r19,r2
   25048:	d8800415 	stw	r2,16(sp)
   2504c:	dc800615 	stw	r18,24(sp)
   25050:	a80b883a 	mov	r5,r21
   25054:	8009883a 	mov	r4,r16
   25058:	00240200 	call	24020 <quorem>
   2505c:	880b883a 	mov	r5,r17
   25060:	8009883a 	mov	r4,r16
   25064:	102f883a 	mov	r23,r2
   25068:	00277f40 	call	277f4 <__mcmp>
   2506c:	a80b883a 	mov	r5,r21
   25070:	a00d883a 	mov	r6,r20
   25074:	e009883a 	mov	r4,fp
   25078:	102d883a 	mov	r22,r2
   2507c:	00278540 	call	27854 <__mdiff>
   25080:	1007883a 	mov	r3,r2
   25084:	10800317 	ldw	r2,12(r2)
   25088:	bc800c04 	addi	r18,r23,48
   2508c:	180b883a 	mov	r5,r3
   25090:	10004e1e 	bne	r2,zero,251cc <_dtoa_r+0xfac>
   25094:	8009883a 	mov	r4,r16
   25098:	d8c01615 	stw	r3,88(sp)
   2509c:	00277f40 	call	277f4 <__mcmp>
   250a0:	d8c01617 	ldw	r3,88(sp)
   250a4:	e009883a 	mov	r4,fp
   250a8:	d8801615 	stw	r2,88(sp)
   250ac:	180b883a 	mov	r5,r3
   250b0:	0026fd40 	call	26fd4 <_Bfree>
   250b4:	d8801617 	ldw	r2,88(sp)
   250b8:	1000041e 	bne	r2,zero,250cc <_dtoa_r+0xeac>
   250bc:	d9800317 	ldw	r6,12(sp)
   250c0:	3000021e 	bne	r6,zero,250cc <_dtoa_r+0xeac>
   250c4:	d8c00617 	ldw	r3,24(sp)
   250c8:	18003726 	beq	r3,zero,251a8 <_dtoa_r+0xf88>
   250cc:	b0002016 	blt	r22,zero,25150 <_dtoa_r+0xf30>
   250d0:	b000041e 	bne	r22,zero,250e4 <_dtoa_r+0xec4>
   250d4:	d9000317 	ldw	r4,12(sp)
   250d8:	2000021e 	bne	r4,zero,250e4 <_dtoa_r+0xec4>
   250dc:	d8c00617 	ldw	r3,24(sp)
   250e0:	18001b26 	beq	r3,zero,25150 <_dtoa_r+0xf30>
   250e4:	00810716 	blt	zero,r2,25504 <_dtoa_r+0x12e4>
   250e8:	d8c00417 	ldw	r3,16(sp)
   250ec:	9d800044 	addi	r22,r19,1
   250f0:	9c800005 	stb	r18,0(r19)
   250f4:	b02f883a 	mov	r23,r22
   250f8:	98c10626 	beq	r19,r3,25514 <_dtoa_r+0x12f4>
   250fc:	800b883a 	mov	r5,r16
   25100:	000f883a 	mov	r7,zero
   25104:	01800284 	movi	r6,10
   25108:	e009883a 	mov	r4,fp
   2510c:	0026ffc0 	call	26ffc <__multadd>
   25110:	1021883a 	mov	r16,r2
   25114:	000f883a 	mov	r7,zero
   25118:	01800284 	movi	r6,10
   2511c:	880b883a 	mov	r5,r17
   25120:	e009883a 	mov	r4,fp
   25124:	8d002526 	beq	r17,r20,251bc <_dtoa_r+0xf9c>
   25128:	0026ffc0 	call	26ffc <__multadd>
   2512c:	a00b883a 	mov	r5,r20
   25130:	000f883a 	mov	r7,zero
   25134:	01800284 	movi	r6,10
   25138:	e009883a 	mov	r4,fp
   2513c:	1023883a 	mov	r17,r2
   25140:	0026ffc0 	call	26ffc <__multadd>
   25144:	1029883a 	mov	r20,r2
   25148:	b027883a 	mov	r19,r22
   2514c:	003fc006 	br	25050 <__alt_data_end+0xf8025050>
   25150:	9011883a 	mov	r8,r18
   25154:	00800e0e 	bge	zero,r2,25190 <_dtoa_r+0xf70>
   25158:	800b883a 	mov	r5,r16
   2515c:	01800044 	movi	r6,1
   25160:	e009883a 	mov	r4,fp
   25164:	da001715 	stw	r8,92(sp)
   25168:	00276ac0 	call	276ac <__lshift>
   2516c:	a80b883a 	mov	r5,r21
   25170:	1009883a 	mov	r4,r2
   25174:	1021883a 	mov	r16,r2
   25178:	00277f40 	call	277f4 <__mcmp>
   2517c:	da001717 	ldw	r8,92(sp)
   25180:	0081960e 	bge	zero,r2,257dc <_dtoa_r+0x15bc>
   25184:	00800e44 	movi	r2,57
   25188:	40817026 	beq	r8,r2,2574c <_dtoa_r+0x152c>
   2518c:	ba000c44 	addi	r8,r23,49
   25190:	8825883a 	mov	r18,r17
   25194:	9dc00044 	addi	r23,r19,1
   25198:	9a000005 	stb	r8,0(r19)
   2519c:	a023883a 	mov	r17,r20
   251a0:	dc000915 	stw	r16,36(sp)
   251a4:	003f2406 	br	24e38 <__alt_data_end+0xf8024e38>
   251a8:	00800e44 	movi	r2,57
   251ac:	9011883a 	mov	r8,r18
   251b0:	90816626 	beq	r18,r2,2574c <_dtoa_r+0x152c>
   251b4:	05bff516 	blt	zero,r22,2518c <__alt_data_end+0xf802518c>
   251b8:	003ff506 	br	25190 <__alt_data_end+0xf8025190>
   251bc:	0026ffc0 	call	26ffc <__multadd>
   251c0:	1023883a 	mov	r17,r2
   251c4:	1029883a 	mov	r20,r2
   251c8:	003fdf06 	br	25148 <__alt_data_end+0xf8025148>
   251cc:	e009883a 	mov	r4,fp
   251d0:	0026fd40 	call	26fd4 <_Bfree>
   251d4:	00800044 	movi	r2,1
   251d8:	003fbc06 	br	250cc <__alt_data_end+0xf80250cc>
   251dc:	a80b883a 	mov	r5,r21
   251e0:	8009883a 	mov	r4,r16
   251e4:	00277f40 	call	277f4 <__mcmp>
   251e8:	103edb0e 	bge	r2,zero,24d58 <__alt_data_end+0xf8024d58>
   251ec:	800b883a 	mov	r5,r16
   251f0:	000f883a 	mov	r7,zero
   251f4:	01800284 	movi	r6,10
   251f8:	e009883a 	mov	r4,fp
   251fc:	0026ffc0 	call	26ffc <__multadd>
   25200:	1021883a 	mov	r16,r2
   25204:	d8800517 	ldw	r2,20(sp)
   25208:	d8c00b17 	ldw	r3,44(sp)
   2520c:	10bfffc4 	addi	r2,r2,-1
   25210:	d8800515 	stw	r2,20(sp)
   25214:	183f761e 	bne	r3,zero,24ff0 <__alt_data_end+0xf8024ff0>
   25218:	d9000c17 	ldw	r4,48(sp)
   2521c:	0101730e 	bge	zero,r4,257ec <_dtoa_r+0x15cc>
   25220:	d9000615 	stw	r4,24(sp)
   25224:	003ed006 	br	24d68 <__alt_data_end+0xf8024d68>
   25228:	00800084 	movi	r2,2
   2522c:	3081861e 	bne	r6,r2,25848 <_dtoa_r+0x1628>
   25230:	d8000b15 	stw	zero,44(sp)
   25234:	003f3c06 	br	24f28 <__alt_data_end+0xf8024f28>
   25238:	dc000917 	ldw	r16,36(sp)
   2523c:	003e9206 	br	24c88 <__alt_data_end+0xf8024c88>
   25240:	d9c00317 	ldw	r7,12(sp)
   25244:	00800084 	movi	r2,2
   25248:	11fec50e 	bge	r2,r7,24d60 <__alt_data_end+0xf8024d60>
   2524c:	d9000617 	ldw	r4,24(sp)
   25250:	20013c1e 	bne	r4,zero,25744 <_dtoa_r+0x1524>
   25254:	a80b883a 	mov	r5,r21
   25258:	000f883a 	mov	r7,zero
   2525c:	01800144 	movi	r6,5
   25260:	e009883a 	mov	r4,fp
   25264:	0026ffc0 	call	26ffc <__multadd>
   25268:	100b883a 	mov	r5,r2
   2526c:	8009883a 	mov	r4,r16
   25270:	102b883a 	mov	r21,r2
   25274:	00277f40 	call	277f4 <__mcmp>
   25278:	dc000915 	stw	r16,36(sp)
   2527c:	00bf410e 	bge	zero,r2,24f84 <__alt_data_end+0xf8024f84>
   25280:	d9c00717 	ldw	r7,28(sp)
   25284:	00800c44 	movi	r2,49
   25288:	38800005 	stb	r2,0(r7)
   2528c:	d8800517 	ldw	r2,20(sp)
   25290:	3dc00044 	addi	r23,r7,1
   25294:	10800044 	addi	r2,r2,1
   25298:	d8800515 	stw	r2,20(sp)
   2529c:	003f3d06 	br	24f94 <__alt_data_end+0xf8024f94>
   252a0:	d9800517 	ldw	r6,20(sp)
   252a4:	d9c00717 	ldw	r7,28(sp)
   252a8:	00800c44 	movi	r2,49
   252ac:	31800044 	addi	r6,r6,1
   252b0:	d9800515 	stw	r6,20(sp)
   252b4:	38800005 	stb	r2,0(r7)
   252b8:	003edf06 	br	24e38 <__alt_data_end+0xf8024e38>
   252bc:	d8000b15 	stw	zero,44(sp)
   252c0:	003c9f06 	br	24540 <__alt_data_end+0xf8024540>
   252c4:	903e7e1e 	bne	r18,zero,24cc0 <__alt_data_end+0xf8024cc0>
   252c8:	00800434 	movhi	r2,16
   252cc:	10bfffc4 	addi	r2,r2,-1
   252d0:	9884703a 	and	r2,r19,r2
   252d4:	1000ea1e 	bne	r2,zero,25680 <_dtoa_r+0x1460>
   252d8:	9cdffc2c 	andhi	r19,r19,32752
   252dc:	9800e826 	beq	r19,zero,25680 <_dtoa_r+0x1460>
   252e0:	d9c00817 	ldw	r7,32(sp)
   252e4:	b5800044 	addi	r22,r22,1
   252e8:	04c00044 	movi	r19,1
   252ec:	39c00044 	addi	r7,r7,1
   252f0:	d9c00815 	stw	r7,32(sp)
   252f4:	d8800d17 	ldw	r2,52(sp)
   252f8:	103e721e 	bne	r2,zero,24cc4 <__alt_data_end+0xf8024cc4>
   252fc:	00800044 	movi	r2,1
   25300:	003e7906 	br	24ce8 <__alt_data_end+0xf8024ce8>
   25304:	8009883a 	mov	r4,r16
   25308:	002d4780 	call	2d478 <__floatsidf>
   2530c:	d9800f17 	ldw	r6,60(sp)
   25310:	d9c01017 	ldw	r7,64(sp)
   25314:	1009883a 	mov	r4,r2
   25318:	180b883a 	mov	r5,r3
   2531c:	002c3e40 	call	2c3e4 <__muldf3>
   25320:	000d883a 	mov	r6,zero
   25324:	01d00734 	movhi	r7,16412
   25328:	1009883a 	mov	r4,r2
   2532c:	180b883a 	mov	r5,r3
   25330:	002aff80 	call	2aff8 <__adddf3>
   25334:	047f3034 	movhi	r17,64704
   25338:	1021883a 	mov	r16,r2
   2533c:	1c63883a 	add	r17,r3,r17
   25340:	d9000f17 	ldw	r4,60(sp)
   25344:	d9401017 	ldw	r5,64(sp)
   25348:	000d883a 	mov	r6,zero
   2534c:	01d00534 	movhi	r7,16404
   25350:	002cafc0 	call	2cafc <__subdf3>
   25354:	800d883a 	mov	r6,r16
   25358:	880f883a 	mov	r7,r17
   2535c:	1009883a 	mov	r4,r2
   25360:	180b883a 	mov	r5,r3
   25364:	102b883a 	mov	r21,r2
   25368:	1829883a 	mov	r20,r3
   2536c:	002c2140 	call	2c214 <__gedf2>
   25370:	00806c16 	blt	zero,r2,25524 <_dtoa_r+0x1304>
   25374:	89e0003c 	xorhi	r7,r17,32768
   25378:	800d883a 	mov	r6,r16
   2537c:	a809883a 	mov	r4,r21
   25380:	a00b883a 	mov	r5,r20
   25384:	002c2f00 	call	2c2f0 <__ledf2>
   25388:	103d7e0e 	bge	r2,zero,24984 <__alt_data_end+0xf8024984>
   2538c:	002b883a 	mov	r21,zero
   25390:	0023883a 	mov	r17,zero
   25394:	003efb06 	br	24f84 <__alt_data_end+0xf8024f84>
   25398:	d8800717 	ldw	r2,28(sp)
   2539c:	003bd006 	br	242e0 <__alt_data_end+0xf80242e0>
   253a0:	d9000a17 	ldw	r4,40(sp)
   253a4:	d9800d17 	ldw	r6,52(sp)
   253a8:	dd400a15 	stw	r21,40(sp)
   253ac:	a905c83a 	sub	r2,r21,r4
   253b0:	308d883a 	add	r6,r6,r2
   253b4:	d9800d15 	stw	r6,52(sp)
   253b8:	002b883a 	mov	r21,zero
   253bc:	003e0606 	br	24bd8 <__alt_data_end+0xf8024bd8>
   253c0:	9023883a 	mov	r17,r18
   253c4:	9829883a 	mov	r20,r19
   253c8:	04000084 	movi	r16,2
   253cc:	003c9206 	br	24618 <__alt_data_end+0xf8024618>
   253d0:	04000044 	movi	r16,1
   253d4:	dc000c15 	stw	r16,48(sp)
   253d8:	dc000615 	stw	r16,24(sp)
   253dc:	dc002215 	stw	r16,136(sp)
   253e0:	e0001115 	stw	zero,68(fp)
   253e4:	000b883a 	mov	r5,zero
   253e8:	003c6906 	br	24590 <__alt_data_end+0xf8024590>
   253ec:	3021883a 	mov	r16,r6
   253f0:	003ffb06 	br	253e0 <__alt_data_end+0xf80253e0>
   253f4:	1000021e 	bne	r2,zero,25400 <_dtoa_r+0x11e0>
   253f8:	4200004c 	andi	r8,r8,1
   253fc:	403e7d1e 	bne	r8,zero,24df4 <__alt_data_end+0xf8024df4>
   25400:	01000c04 	movi	r4,48
   25404:	00000106 	br	2540c <_dtoa_r+0x11ec>
   25408:	102f883a 	mov	r23,r2
   2540c:	b8bfffc4 	addi	r2,r23,-1
   25410:	10c00007 	ldb	r3,0(r2)
   25414:	193ffc26 	beq	r3,r4,25408 <__alt_data_end+0xf8025408>
   25418:	003e8706 	br	24e38 <__alt_data_end+0xf8024e38>
   2541c:	d8800517 	ldw	r2,20(sp)
   25420:	00a3c83a 	sub	r17,zero,r2
   25424:	8800a426 	beq	r17,zero,256b8 <_dtoa_r+0x1498>
   25428:	888003cc 	andi	r2,r17,15
   2542c:	100490fa 	slli	r2,r2,3
   25430:	00c10034 	movhi	r3,1024
   25434:	18c05404 	addi	r3,r3,336
   25438:	1885883a 	add	r2,r3,r2
   2543c:	11800017 	ldw	r6,0(r2)
   25440:	11c00117 	ldw	r7,4(r2)
   25444:	9009883a 	mov	r4,r18
   25448:	980b883a 	mov	r5,r19
   2544c:	8823d13a 	srai	r17,r17,4
   25450:	002c3e40 	call	2c3e4 <__muldf3>
   25454:	d8800f15 	stw	r2,60(sp)
   25458:	d8c01015 	stw	r3,64(sp)
   2545c:	8800e826 	beq	r17,zero,25800 <_dtoa_r+0x15e0>
   25460:	05010034 	movhi	r20,1024
   25464:	a5004a04 	addi	r20,r20,296
   25468:	04000084 	movi	r16,2
   2546c:	8980004c 	andi	r6,r17,1
   25470:	1009883a 	mov	r4,r2
   25474:	8823d07a 	srai	r17,r17,1
   25478:	180b883a 	mov	r5,r3
   2547c:	30000426 	beq	r6,zero,25490 <_dtoa_r+0x1270>
   25480:	a1800017 	ldw	r6,0(r20)
   25484:	a1c00117 	ldw	r7,4(r20)
   25488:	84000044 	addi	r16,r16,1
   2548c:	002c3e40 	call	2c3e4 <__muldf3>
   25490:	a5000204 	addi	r20,r20,8
   25494:	883ff51e 	bne	r17,zero,2546c <__alt_data_end+0xf802546c>
   25498:	d8800f15 	stw	r2,60(sp)
   2549c:	d8c01015 	stw	r3,64(sp)
   254a0:	003c7606 	br	2467c <__alt_data_end+0xf802467c>
   254a4:	00c00c04 	movi	r3,48
   254a8:	10c00005 	stb	r3,0(r2)
   254ac:	d8c00517 	ldw	r3,20(sp)
   254b0:	bd3fffc3 	ldbu	r20,-1(r23)
   254b4:	18c00044 	addi	r3,r3,1
   254b8:	d8c00515 	stw	r3,20(sp)
   254bc:	003db906 	br	24ba4 <__alt_data_end+0xf8024ba4>
   254c0:	89400117 	ldw	r5,4(r17)
   254c4:	e009883a 	mov	r4,fp
   254c8:	0026f2c0 	call	26f2c <_Balloc>
   254cc:	89800417 	ldw	r6,16(r17)
   254d0:	89400304 	addi	r5,r17,12
   254d4:	11000304 	addi	r4,r2,12
   254d8:	31800084 	addi	r6,r6,2
   254dc:	318d883a 	add	r6,r6,r6
   254e0:	318d883a 	add	r6,r6,r6
   254e4:	1027883a 	mov	r19,r2
   254e8:	0026c880 	call	26c88 <memcpy>
   254ec:	01800044 	movi	r6,1
   254f0:	980b883a 	mov	r5,r19
   254f4:	e009883a 	mov	r4,fp
   254f8:	00276ac0 	call	276ac <__lshift>
   254fc:	1029883a 	mov	r20,r2
   25500:	003ecc06 	br	25034 <__alt_data_end+0xf8025034>
   25504:	00800e44 	movi	r2,57
   25508:	90809026 	beq	r18,r2,2574c <_dtoa_r+0x152c>
   2550c:	92000044 	addi	r8,r18,1
   25510:	003f1f06 	br	25190 <__alt_data_end+0xf8025190>
   25514:	9011883a 	mov	r8,r18
   25518:	8825883a 	mov	r18,r17
   2551c:	a023883a 	mov	r17,r20
   25520:	003e2906 	br	24dc8 <__alt_data_end+0xf8024dc8>
   25524:	002b883a 	mov	r21,zero
   25528:	0023883a 	mov	r17,zero
   2552c:	003f5406 	br	25280 <__alt_data_end+0xf8025280>
   25530:	61bfffc4 	addi	r6,r12,-1
   25534:	300490fa 	slli	r2,r6,3
   25538:	00c10034 	movhi	r3,1024
   2553c:	18c05404 	addi	r3,r3,336
   25540:	1885883a 	add	r2,r3,r2
   25544:	11000017 	ldw	r4,0(r2)
   25548:	11400117 	ldw	r5,4(r2)
   2554c:	d8800717 	ldw	r2,28(sp)
   25550:	880f883a 	mov	r7,r17
   25554:	d9801215 	stw	r6,72(sp)
   25558:	800d883a 	mov	r6,r16
   2555c:	db001615 	stw	r12,88(sp)
   25560:	15c00044 	addi	r23,r2,1
   25564:	002c3e40 	call	2c3e4 <__muldf3>
   25568:	d9401017 	ldw	r5,64(sp)
   2556c:	d9000f17 	ldw	r4,60(sp)
   25570:	d8c01515 	stw	r3,84(sp)
   25574:	d8801415 	stw	r2,80(sp)
   25578:	002d3f80 	call	2d3f8 <__fixdfsi>
   2557c:	1009883a 	mov	r4,r2
   25580:	1021883a 	mov	r16,r2
   25584:	002d4780 	call	2d478 <__floatsidf>
   25588:	d9000f17 	ldw	r4,60(sp)
   2558c:	d9401017 	ldw	r5,64(sp)
   25590:	100d883a 	mov	r6,r2
   25594:	180f883a 	mov	r7,r3
   25598:	002cafc0 	call	2cafc <__subdf3>
   2559c:	1829883a 	mov	r20,r3
   255a0:	d8c00717 	ldw	r3,28(sp)
   255a4:	84000c04 	addi	r16,r16,48
   255a8:	1023883a 	mov	r17,r2
   255ac:	1c000005 	stb	r16,0(r3)
   255b0:	db001617 	ldw	r12,88(sp)
   255b4:	00800044 	movi	r2,1
   255b8:	60802226 	beq	r12,r2,25644 <_dtoa_r+0x1424>
   255bc:	d9c00717 	ldw	r7,28(sp)
   255c0:	8805883a 	mov	r2,r17
   255c4:	b82b883a 	mov	r21,r23
   255c8:	3b19883a 	add	r12,r7,r12
   255cc:	6023883a 	mov	r17,r12
   255d0:	a007883a 	mov	r3,r20
   255d4:	dc800f15 	stw	r18,60(sp)
   255d8:	000d883a 	mov	r6,zero
   255dc:	01d00934 	movhi	r7,16420
   255e0:	1009883a 	mov	r4,r2
   255e4:	180b883a 	mov	r5,r3
   255e8:	002c3e40 	call	2c3e4 <__muldf3>
   255ec:	180b883a 	mov	r5,r3
   255f0:	1009883a 	mov	r4,r2
   255f4:	1829883a 	mov	r20,r3
   255f8:	1025883a 	mov	r18,r2
   255fc:	002d3f80 	call	2d3f8 <__fixdfsi>
   25600:	1009883a 	mov	r4,r2
   25604:	1021883a 	mov	r16,r2
   25608:	002d4780 	call	2d478 <__floatsidf>
   2560c:	100d883a 	mov	r6,r2
   25610:	180f883a 	mov	r7,r3
   25614:	9009883a 	mov	r4,r18
   25618:	a00b883a 	mov	r5,r20
   2561c:	84000c04 	addi	r16,r16,48
   25620:	002cafc0 	call	2cafc <__subdf3>
   25624:	ad400044 	addi	r21,r21,1
   25628:	ac3fffc5 	stb	r16,-1(r21)
   2562c:	ac7fea1e 	bne	r21,r17,255d8 <__alt_data_end+0xf80255d8>
   25630:	1023883a 	mov	r17,r2
   25634:	d8801217 	ldw	r2,72(sp)
   25638:	dc800f17 	ldw	r18,60(sp)
   2563c:	1829883a 	mov	r20,r3
   25640:	b8af883a 	add	r23,r23,r2
   25644:	d9001417 	ldw	r4,80(sp)
   25648:	d9401517 	ldw	r5,84(sp)
   2564c:	000d883a 	mov	r6,zero
   25650:	01cff834 	movhi	r7,16352
   25654:	002aff80 	call	2aff8 <__adddf3>
   25658:	880d883a 	mov	r6,r17
   2565c:	a00f883a 	mov	r7,r20
   25660:	1009883a 	mov	r4,r2
   25664:	180b883a 	mov	r5,r3
   25668:	002c2f00 	call	2c2f0 <__ledf2>
   2566c:	10003e0e 	bge	r2,zero,25768 <_dtoa_r+0x1548>
   25670:	d9001317 	ldw	r4,76(sp)
   25674:	bd3fffc3 	ldbu	r20,-1(r23)
   25678:	d9000515 	stw	r4,20(sp)
   2567c:	003d3b06 	br	24b6c <__alt_data_end+0xf8024b6c>
   25680:	0027883a 	mov	r19,zero
   25684:	003f1b06 	br	252f4 <__alt_data_end+0xf80252f4>
   25688:	d8800817 	ldw	r2,32(sp)
   2568c:	11e9c83a 	sub	r20,r2,r7
   25690:	0005883a 	mov	r2,zero
   25694:	003d5406 	br	24be8 <__alt_data_end+0xf8024be8>
   25698:	00800044 	movi	r2,1
   2569c:	003dc706 	br	24dbc <__alt_data_end+0xf8024dbc>
   256a0:	d8c00217 	ldw	r3,8(sp)
   256a4:	00800d84 	movi	r2,54
   256a8:	dd400a17 	ldw	r21,40(sp)
   256ac:	10c5c83a 	sub	r2,r2,r3
   256b0:	dd000817 	ldw	r20,32(sp)
   256b4:	003d4c06 	br	24be8 <__alt_data_end+0xf8024be8>
   256b8:	dc800f15 	stw	r18,60(sp)
   256bc:	dcc01015 	stw	r19,64(sp)
   256c0:	04000084 	movi	r16,2
   256c4:	003bed06 	br	2467c <__alt_data_end+0xf802467c>
   256c8:	d9000617 	ldw	r4,24(sp)
   256cc:	203f0d26 	beq	r4,zero,25304 <__alt_data_end+0xf8025304>
   256d0:	d9800c17 	ldw	r6,48(sp)
   256d4:	01bcab0e 	bge	zero,r6,24984 <__alt_data_end+0xf8024984>
   256d8:	d9401017 	ldw	r5,64(sp)
   256dc:	d9000f17 	ldw	r4,60(sp)
   256e0:	000d883a 	mov	r6,zero
   256e4:	01d00934 	movhi	r7,16420
   256e8:	002c3e40 	call	2c3e4 <__muldf3>
   256ec:	81000044 	addi	r4,r16,1
   256f0:	d8800f15 	stw	r2,60(sp)
   256f4:	d8c01015 	stw	r3,64(sp)
   256f8:	002d4780 	call	2d478 <__floatsidf>
   256fc:	d9800f17 	ldw	r6,60(sp)
   25700:	d9c01017 	ldw	r7,64(sp)
   25704:	1009883a 	mov	r4,r2
   25708:	180b883a 	mov	r5,r3
   2570c:	002c3e40 	call	2c3e4 <__muldf3>
   25710:	01d00734 	movhi	r7,16412
   25714:	000d883a 	mov	r6,zero
   25718:	1009883a 	mov	r4,r2
   2571c:	180b883a 	mov	r5,r3
   25720:	002aff80 	call	2aff8 <__adddf3>
   25724:	d9c00517 	ldw	r7,20(sp)
   25728:	047f3034 	movhi	r17,64704
   2572c:	1021883a 	mov	r16,r2
   25730:	39ffffc4 	addi	r7,r7,-1
   25734:	d9c01315 	stw	r7,76(sp)
   25738:	1c63883a 	add	r17,r3,r17
   2573c:	db000c17 	ldw	r12,48(sp)
   25740:	003bea06 	br	246ec <__alt_data_end+0xf80246ec>
   25744:	dc000915 	stw	r16,36(sp)
   25748:	003e0e06 	br	24f84 <__alt_data_end+0xf8024f84>
   2574c:	01000e44 	movi	r4,57
   25750:	8825883a 	mov	r18,r17
   25754:	9dc00044 	addi	r23,r19,1
   25758:	99000005 	stb	r4,0(r19)
   2575c:	a023883a 	mov	r17,r20
   25760:	dc000915 	stw	r16,36(sp)
   25764:	003da406 	br	24df8 <__alt_data_end+0xf8024df8>
   25768:	d9801417 	ldw	r6,80(sp)
   2576c:	d9c01517 	ldw	r7,84(sp)
   25770:	0009883a 	mov	r4,zero
   25774:	014ff834 	movhi	r5,16352
   25778:	002cafc0 	call	2cafc <__subdf3>
   2577c:	880d883a 	mov	r6,r17
   25780:	a00f883a 	mov	r7,r20
   25784:	1009883a 	mov	r4,r2
   25788:	180b883a 	mov	r5,r3
   2578c:	002c2140 	call	2c214 <__gedf2>
   25790:	00bc7c0e 	bge	zero,r2,24984 <__alt_data_end+0xf8024984>
   25794:	01000c04 	movi	r4,48
   25798:	00000106 	br	257a0 <_dtoa_r+0x1580>
   2579c:	102f883a 	mov	r23,r2
   257a0:	b8bfffc4 	addi	r2,r23,-1
   257a4:	10c00007 	ldb	r3,0(r2)
   257a8:	193ffc26 	beq	r3,r4,2579c <__alt_data_end+0xf802579c>
   257ac:	d9801317 	ldw	r6,76(sp)
   257b0:	d9800515 	stw	r6,20(sp)
   257b4:	003c4406 	br	248c8 <__alt_data_end+0xf80248c8>
   257b8:	d9801317 	ldw	r6,76(sp)
   257bc:	d9800515 	stw	r6,20(sp)
   257c0:	003cea06 	br	24b6c <__alt_data_end+0xf8024b6c>
   257c4:	dd800f17 	ldw	r22,60(sp)
   257c8:	dcc01017 	ldw	r19,64(sp)
   257cc:	dc801217 	ldw	r18,72(sp)
   257d0:	003c6c06 	br	24984 <__alt_data_end+0xf8024984>
   257d4:	903e031e 	bne	r18,zero,24fe4 <__alt_data_end+0xf8024fe4>
   257d8:	003ebb06 	br	252c8 <__alt_data_end+0xf80252c8>
   257dc:	103e6c1e 	bne	r2,zero,25190 <__alt_data_end+0xf8025190>
   257e0:	4080004c 	andi	r2,r8,1
   257e4:	103e6a26 	beq	r2,zero,25190 <__alt_data_end+0xf8025190>
   257e8:	003e6606 	br	25184 <__alt_data_end+0xf8025184>
   257ec:	d8c00317 	ldw	r3,12(sp)
   257f0:	00800084 	movi	r2,2
   257f4:	10c02916 	blt	r2,r3,2589c <_dtoa_r+0x167c>
   257f8:	d9000c17 	ldw	r4,48(sp)
   257fc:	003e8806 	br	25220 <__alt_data_end+0xf8025220>
   25800:	04000084 	movi	r16,2
   25804:	003b9d06 	br	2467c <__alt_data_end+0xf802467c>
   25808:	d9001317 	ldw	r4,76(sp)
   2580c:	d9000515 	stw	r4,20(sp)
   25810:	003cd606 	br	24b6c <__alt_data_end+0xf8024b6c>
   25814:	d8801317 	ldw	r2,76(sp)
   25818:	d8800515 	stw	r2,20(sp)
   2581c:	003c2a06 	br	248c8 <__alt_data_end+0xf80248c8>
   25820:	d9800317 	ldw	r6,12(sp)
   25824:	00800084 	movi	r2,2
   25828:	11801516 	blt	r2,r6,25880 <_dtoa_r+0x1660>
   2582c:	d9c00c17 	ldw	r7,48(sp)
   25830:	d9c00615 	stw	r7,24(sp)
   25834:	003df706 	br	25014 <__alt_data_end+0xf8025014>
   25838:	193d3926 	beq	r3,r4,24d20 <__alt_data_end+0xf8024d20>
   2583c:	00c00f04 	movi	r3,60
   25840:	1885c83a 	sub	r2,r3,r2
   25844:	003ddf06 	br	24fc4 <__alt_data_end+0xf8024fc4>
   25848:	e009883a 	mov	r4,fp
   2584c:	e0001115 	stw	zero,68(fp)
   25850:	000b883a 	mov	r5,zero
   25854:	0026f2c0 	call	26f2c <_Balloc>
   25858:	d8800715 	stw	r2,28(sp)
   2585c:	d8c00717 	ldw	r3,28(sp)
   25860:	00bfffc4 	movi	r2,-1
   25864:	01000044 	movi	r4,1
   25868:	d8800c15 	stw	r2,48(sp)
   2586c:	e0c01015 	stw	r3,64(fp)
   25870:	d9000b15 	stw	r4,44(sp)
   25874:	d8800615 	stw	r2,24(sp)
   25878:	d8002215 	stw	zero,136(sp)
   2587c:	003c4106 	br	24984 <__alt_data_end+0xf8024984>
   25880:	d8c00c17 	ldw	r3,48(sp)
   25884:	d8c00615 	stw	r3,24(sp)
   25888:	003e7006 	br	2524c <__alt_data_end+0xf802524c>
   2588c:	04400044 	movi	r17,1
   25890:	003b2006 	br	24514 <__alt_data_end+0xf8024514>
   25894:	000b883a 	mov	r5,zero
   25898:	003b3d06 	br	24590 <__alt_data_end+0xf8024590>
   2589c:	d8800c17 	ldw	r2,48(sp)
   258a0:	d8800615 	stw	r2,24(sp)
   258a4:	003e6906 	br	2524c <__alt_data_end+0xf802524c>

000258a8 <__sflush_r>:
   258a8:	2880030b 	ldhu	r2,12(r5)
   258ac:	defffb04 	addi	sp,sp,-20
   258b0:	dcc00315 	stw	r19,12(sp)
   258b4:	dc400115 	stw	r17,4(sp)
   258b8:	dfc00415 	stw	ra,16(sp)
   258bc:	dc800215 	stw	r18,8(sp)
   258c0:	dc000015 	stw	r16,0(sp)
   258c4:	10c0020c 	andi	r3,r2,8
   258c8:	2823883a 	mov	r17,r5
   258cc:	2027883a 	mov	r19,r4
   258d0:	1800311e 	bne	r3,zero,25998 <__sflush_r+0xf0>
   258d4:	28c00117 	ldw	r3,4(r5)
   258d8:	10820014 	ori	r2,r2,2048
   258dc:	2880030d 	sth	r2,12(r5)
   258e0:	00c04b0e 	bge	zero,r3,25a10 <__sflush_r+0x168>
   258e4:	8a000a17 	ldw	r8,40(r17)
   258e8:	40002326 	beq	r8,zero,25978 <__sflush_r+0xd0>
   258ec:	9c000017 	ldw	r16,0(r19)
   258f0:	10c4000c 	andi	r3,r2,4096
   258f4:	98000015 	stw	zero,0(r19)
   258f8:	18004826 	beq	r3,zero,25a1c <__sflush_r+0x174>
   258fc:	89801417 	ldw	r6,80(r17)
   25900:	10c0010c 	andi	r3,r2,4
   25904:	18000626 	beq	r3,zero,25920 <__sflush_r+0x78>
   25908:	88c00117 	ldw	r3,4(r17)
   2590c:	88800c17 	ldw	r2,48(r17)
   25910:	30cdc83a 	sub	r6,r6,r3
   25914:	10000226 	beq	r2,zero,25920 <__sflush_r+0x78>
   25918:	88800f17 	ldw	r2,60(r17)
   2591c:	308dc83a 	sub	r6,r6,r2
   25920:	89400717 	ldw	r5,28(r17)
   25924:	000f883a 	mov	r7,zero
   25928:	9809883a 	mov	r4,r19
   2592c:	403ee83a 	callr	r8
   25930:	00ffffc4 	movi	r3,-1
   25934:	10c04426 	beq	r2,r3,25a48 <__sflush_r+0x1a0>
   25938:	88c0030b 	ldhu	r3,12(r17)
   2593c:	89000417 	ldw	r4,16(r17)
   25940:	88000115 	stw	zero,4(r17)
   25944:	197dffcc 	andi	r5,r3,63487
   25948:	8940030d 	sth	r5,12(r17)
   2594c:	89000015 	stw	r4,0(r17)
   25950:	18c4000c 	andi	r3,r3,4096
   25954:	18002c1e 	bne	r3,zero,25a08 <__sflush_r+0x160>
   25958:	89400c17 	ldw	r5,48(r17)
   2595c:	9c000015 	stw	r16,0(r19)
   25960:	28000526 	beq	r5,zero,25978 <__sflush_r+0xd0>
   25964:	88801004 	addi	r2,r17,64
   25968:	28800226 	beq	r5,r2,25974 <__sflush_r+0xcc>
   2596c:	9809883a 	mov	r4,r19
   25970:	00260c00 	call	260c0 <_free_r>
   25974:	88000c15 	stw	zero,48(r17)
   25978:	0005883a 	mov	r2,zero
   2597c:	dfc00417 	ldw	ra,16(sp)
   25980:	dcc00317 	ldw	r19,12(sp)
   25984:	dc800217 	ldw	r18,8(sp)
   25988:	dc400117 	ldw	r17,4(sp)
   2598c:	dc000017 	ldw	r16,0(sp)
   25990:	dec00504 	addi	sp,sp,20
   25994:	f800283a 	ret
   25998:	2c800417 	ldw	r18,16(r5)
   2599c:	903ff626 	beq	r18,zero,25978 <__alt_data_end+0xf8025978>
   259a0:	2c000017 	ldw	r16,0(r5)
   259a4:	108000cc 	andi	r2,r2,3
   259a8:	2c800015 	stw	r18,0(r5)
   259ac:	84a1c83a 	sub	r16,r16,r18
   259b0:	1000131e 	bne	r2,zero,25a00 <__sflush_r+0x158>
   259b4:	28800517 	ldw	r2,20(r5)
   259b8:	88800215 	stw	r2,8(r17)
   259bc:	04000316 	blt	zero,r16,259cc <__sflush_r+0x124>
   259c0:	003fed06 	br	25978 <__alt_data_end+0xf8025978>
   259c4:	90a5883a 	add	r18,r18,r2
   259c8:	043feb0e 	bge	zero,r16,25978 <__alt_data_end+0xf8025978>
   259cc:	88800917 	ldw	r2,36(r17)
   259d0:	89400717 	ldw	r5,28(r17)
   259d4:	800f883a 	mov	r7,r16
   259d8:	900d883a 	mov	r6,r18
   259dc:	9809883a 	mov	r4,r19
   259e0:	103ee83a 	callr	r2
   259e4:	80a1c83a 	sub	r16,r16,r2
   259e8:	00bff616 	blt	zero,r2,259c4 <__alt_data_end+0xf80259c4>
   259ec:	88c0030b 	ldhu	r3,12(r17)
   259f0:	00bfffc4 	movi	r2,-1
   259f4:	18c01014 	ori	r3,r3,64
   259f8:	88c0030d 	sth	r3,12(r17)
   259fc:	003fdf06 	br	2597c <__alt_data_end+0xf802597c>
   25a00:	0005883a 	mov	r2,zero
   25a04:	003fec06 	br	259b8 <__alt_data_end+0xf80259b8>
   25a08:	88801415 	stw	r2,80(r17)
   25a0c:	003fd206 	br	25958 <__alt_data_end+0xf8025958>
   25a10:	28c00f17 	ldw	r3,60(r5)
   25a14:	00ffb316 	blt	zero,r3,258e4 <__alt_data_end+0xf80258e4>
   25a18:	003fd706 	br	25978 <__alt_data_end+0xf8025978>
   25a1c:	89400717 	ldw	r5,28(r17)
   25a20:	000d883a 	mov	r6,zero
   25a24:	01c00044 	movi	r7,1
   25a28:	9809883a 	mov	r4,r19
   25a2c:	403ee83a 	callr	r8
   25a30:	100d883a 	mov	r6,r2
   25a34:	00bfffc4 	movi	r2,-1
   25a38:	30801426 	beq	r6,r2,25a8c <__sflush_r+0x1e4>
   25a3c:	8880030b 	ldhu	r2,12(r17)
   25a40:	8a000a17 	ldw	r8,40(r17)
   25a44:	003fae06 	br	25900 <__alt_data_end+0xf8025900>
   25a48:	98c00017 	ldw	r3,0(r19)
   25a4c:	183fba26 	beq	r3,zero,25938 <__alt_data_end+0xf8025938>
   25a50:	01000744 	movi	r4,29
   25a54:	19000626 	beq	r3,r4,25a70 <__sflush_r+0x1c8>
   25a58:	01000584 	movi	r4,22
   25a5c:	19000426 	beq	r3,r4,25a70 <__sflush_r+0x1c8>
   25a60:	88c0030b 	ldhu	r3,12(r17)
   25a64:	18c01014 	ori	r3,r3,64
   25a68:	88c0030d 	sth	r3,12(r17)
   25a6c:	003fc306 	br	2597c <__alt_data_end+0xf802597c>
   25a70:	8880030b 	ldhu	r2,12(r17)
   25a74:	88c00417 	ldw	r3,16(r17)
   25a78:	88000115 	stw	zero,4(r17)
   25a7c:	10bdffcc 	andi	r2,r2,63487
   25a80:	8880030d 	sth	r2,12(r17)
   25a84:	88c00015 	stw	r3,0(r17)
   25a88:	003fb306 	br	25958 <__alt_data_end+0xf8025958>
   25a8c:	98800017 	ldw	r2,0(r19)
   25a90:	103fea26 	beq	r2,zero,25a3c <__alt_data_end+0xf8025a3c>
   25a94:	00c00744 	movi	r3,29
   25a98:	10c00226 	beq	r2,r3,25aa4 <__sflush_r+0x1fc>
   25a9c:	00c00584 	movi	r3,22
   25aa0:	10c0031e 	bne	r2,r3,25ab0 <__sflush_r+0x208>
   25aa4:	9c000015 	stw	r16,0(r19)
   25aa8:	0005883a 	mov	r2,zero
   25aac:	003fb306 	br	2597c <__alt_data_end+0xf802597c>
   25ab0:	88c0030b 	ldhu	r3,12(r17)
   25ab4:	3005883a 	mov	r2,r6
   25ab8:	18c01014 	ori	r3,r3,64
   25abc:	88c0030d 	sth	r3,12(r17)
   25ac0:	003fae06 	br	2597c <__alt_data_end+0xf802597c>

00025ac4 <_fflush_r>:
   25ac4:	defffd04 	addi	sp,sp,-12
   25ac8:	dc000115 	stw	r16,4(sp)
   25acc:	dfc00215 	stw	ra,8(sp)
   25ad0:	2021883a 	mov	r16,r4
   25ad4:	20000226 	beq	r4,zero,25ae0 <_fflush_r+0x1c>
   25ad8:	20800e17 	ldw	r2,56(r4)
   25adc:	10000c26 	beq	r2,zero,25b10 <_fflush_r+0x4c>
   25ae0:	2880030f 	ldh	r2,12(r5)
   25ae4:	1000051e 	bne	r2,zero,25afc <_fflush_r+0x38>
   25ae8:	0005883a 	mov	r2,zero
   25aec:	dfc00217 	ldw	ra,8(sp)
   25af0:	dc000117 	ldw	r16,4(sp)
   25af4:	dec00304 	addi	sp,sp,12
   25af8:	f800283a 	ret
   25afc:	8009883a 	mov	r4,r16
   25b00:	dfc00217 	ldw	ra,8(sp)
   25b04:	dc000117 	ldw	r16,4(sp)
   25b08:	dec00304 	addi	sp,sp,12
   25b0c:	00258a81 	jmpi	258a8 <__sflush_r>
   25b10:	d9400015 	stw	r5,0(sp)
   25b14:	0025ea00 	call	25ea0 <__sinit>
   25b18:	d9400017 	ldw	r5,0(sp)
   25b1c:	003ff006 	br	25ae0 <__alt_data_end+0xf8025ae0>

00025b20 <fflush>:
   25b20:	20000526 	beq	r4,zero,25b38 <fflush+0x18>
   25b24:	00810034 	movhi	r2,1024
   25b28:	1087d204 	addi	r2,r2,8008
   25b2c:	200b883a 	mov	r5,r4
   25b30:	11000017 	ldw	r4,0(r2)
   25b34:	0025ac41 	jmpi	25ac4 <_fflush_r>
   25b38:	00810034 	movhi	r2,1024
   25b3c:	1087d104 	addi	r2,r2,8004
   25b40:	11000017 	ldw	r4,0(r2)
   25b44:	014000b4 	movhi	r5,2
   25b48:	2956b104 	addi	r5,r5,23236
   25b4c:	00269501 	jmpi	26950 <_fwalk_reent>

00025b50 <__fp_unlock>:
   25b50:	0005883a 	mov	r2,zero
   25b54:	f800283a 	ret

00025b58 <_cleanup_r>:
   25b58:	014000f4 	movhi	r5,3
   25b5c:	29675204 	addi	r5,r5,-25272
   25b60:	00269501 	jmpi	26950 <_fwalk_reent>

00025b64 <__sinit.part.1>:
   25b64:	defff704 	addi	sp,sp,-36
   25b68:	00c000b4 	movhi	r3,2
   25b6c:	dfc00815 	stw	ra,32(sp)
   25b70:	ddc00715 	stw	r23,28(sp)
   25b74:	dd800615 	stw	r22,24(sp)
   25b78:	dd400515 	stw	r21,20(sp)
   25b7c:	dd000415 	stw	r20,16(sp)
   25b80:	dcc00315 	stw	r19,12(sp)
   25b84:	dc800215 	stw	r18,8(sp)
   25b88:	dc400115 	stw	r17,4(sp)
   25b8c:	dc000015 	stw	r16,0(sp)
   25b90:	18d6d604 	addi	r3,r3,23384
   25b94:	24000117 	ldw	r16,4(r4)
   25b98:	20c00f15 	stw	r3,60(r4)
   25b9c:	2080bb04 	addi	r2,r4,748
   25ba0:	00c000c4 	movi	r3,3
   25ba4:	20c0b915 	stw	r3,740(r4)
   25ba8:	2080ba15 	stw	r2,744(r4)
   25bac:	2000b815 	stw	zero,736(r4)
   25bb0:	05c00204 	movi	r23,8
   25bb4:	00800104 	movi	r2,4
   25bb8:	2025883a 	mov	r18,r4
   25bbc:	b80d883a 	mov	r6,r23
   25bc0:	81001704 	addi	r4,r16,92
   25bc4:	000b883a 	mov	r5,zero
   25bc8:	80000015 	stw	zero,0(r16)
   25bcc:	80000115 	stw	zero,4(r16)
   25bd0:	80000215 	stw	zero,8(r16)
   25bd4:	8080030d 	sth	r2,12(r16)
   25bd8:	80001915 	stw	zero,100(r16)
   25bdc:	8000038d 	sth	zero,14(r16)
   25be0:	80000415 	stw	zero,16(r16)
   25be4:	80000515 	stw	zero,20(r16)
   25be8:	80000615 	stw	zero,24(r16)
   25bec:	00213e00 	call	213e0 <memset>
   25bf0:	058000b4 	movhi	r22,2
   25bf4:	94400217 	ldw	r17,8(r18)
   25bf8:	054000b4 	movhi	r21,2
   25bfc:	050000b4 	movhi	r20,2
   25c00:	04c000b4 	movhi	r19,2
   25c04:	b5865d04 	addi	r22,r22,6516
   25c08:	ad467404 	addi	r21,r21,6608
   25c0c:	a5069304 	addi	r20,r20,6732
   25c10:	9cc6aa04 	addi	r19,r19,6824
   25c14:	85800815 	stw	r22,32(r16)
   25c18:	85400915 	stw	r21,36(r16)
   25c1c:	85000a15 	stw	r20,40(r16)
   25c20:	84c00b15 	stw	r19,44(r16)
   25c24:	84000715 	stw	r16,28(r16)
   25c28:	00800284 	movi	r2,10
   25c2c:	8880030d 	sth	r2,12(r17)
   25c30:	00800044 	movi	r2,1
   25c34:	b80d883a 	mov	r6,r23
   25c38:	89001704 	addi	r4,r17,92
   25c3c:	000b883a 	mov	r5,zero
   25c40:	88000015 	stw	zero,0(r17)
   25c44:	88000115 	stw	zero,4(r17)
   25c48:	88000215 	stw	zero,8(r17)
   25c4c:	88001915 	stw	zero,100(r17)
   25c50:	8880038d 	sth	r2,14(r17)
   25c54:	88000415 	stw	zero,16(r17)
   25c58:	88000515 	stw	zero,20(r17)
   25c5c:	88000615 	stw	zero,24(r17)
   25c60:	00213e00 	call	213e0 <memset>
   25c64:	94000317 	ldw	r16,12(r18)
   25c68:	00800484 	movi	r2,18
   25c6c:	8c400715 	stw	r17,28(r17)
   25c70:	8d800815 	stw	r22,32(r17)
   25c74:	8d400915 	stw	r21,36(r17)
   25c78:	8d000a15 	stw	r20,40(r17)
   25c7c:	8cc00b15 	stw	r19,44(r17)
   25c80:	8080030d 	sth	r2,12(r16)
   25c84:	00800084 	movi	r2,2
   25c88:	80000015 	stw	zero,0(r16)
   25c8c:	80000115 	stw	zero,4(r16)
   25c90:	80000215 	stw	zero,8(r16)
   25c94:	80001915 	stw	zero,100(r16)
   25c98:	8080038d 	sth	r2,14(r16)
   25c9c:	80000415 	stw	zero,16(r16)
   25ca0:	80000515 	stw	zero,20(r16)
   25ca4:	80000615 	stw	zero,24(r16)
   25ca8:	b80d883a 	mov	r6,r23
   25cac:	000b883a 	mov	r5,zero
   25cb0:	81001704 	addi	r4,r16,92
   25cb4:	00213e00 	call	213e0 <memset>
   25cb8:	00800044 	movi	r2,1
   25cbc:	84000715 	stw	r16,28(r16)
   25cc0:	85800815 	stw	r22,32(r16)
   25cc4:	85400915 	stw	r21,36(r16)
   25cc8:	85000a15 	stw	r20,40(r16)
   25ccc:	84c00b15 	stw	r19,44(r16)
   25cd0:	90800e15 	stw	r2,56(r18)
   25cd4:	dfc00817 	ldw	ra,32(sp)
   25cd8:	ddc00717 	ldw	r23,28(sp)
   25cdc:	dd800617 	ldw	r22,24(sp)
   25ce0:	dd400517 	ldw	r21,20(sp)
   25ce4:	dd000417 	ldw	r20,16(sp)
   25ce8:	dcc00317 	ldw	r19,12(sp)
   25cec:	dc800217 	ldw	r18,8(sp)
   25cf0:	dc400117 	ldw	r17,4(sp)
   25cf4:	dc000017 	ldw	r16,0(sp)
   25cf8:	dec00904 	addi	sp,sp,36
   25cfc:	f800283a 	ret

00025d00 <__fp_lock>:
   25d00:	0005883a 	mov	r2,zero
   25d04:	f800283a 	ret

00025d08 <__sfmoreglue>:
   25d08:	defffc04 	addi	sp,sp,-16
   25d0c:	dc400115 	stw	r17,4(sp)
   25d10:	2c7fffc4 	addi	r17,r5,-1
   25d14:	8c401a24 	muli	r17,r17,104
   25d18:	dc800215 	stw	r18,8(sp)
   25d1c:	2825883a 	mov	r18,r5
   25d20:	89401d04 	addi	r5,r17,116
   25d24:	dc000015 	stw	r16,0(sp)
   25d28:	dfc00315 	stw	ra,12(sp)
   25d2c:	0020bd40 	call	20bd4 <_malloc_r>
   25d30:	1021883a 	mov	r16,r2
   25d34:	10000726 	beq	r2,zero,25d54 <__sfmoreglue+0x4c>
   25d38:	11000304 	addi	r4,r2,12
   25d3c:	10000015 	stw	zero,0(r2)
   25d40:	14800115 	stw	r18,4(r2)
   25d44:	11000215 	stw	r4,8(r2)
   25d48:	89801a04 	addi	r6,r17,104
   25d4c:	000b883a 	mov	r5,zero
   25d50:	00213e00 	call	213e0 <memset>
   25d54:	8005883a 	mov	r2,r16
   25d58:	dfc00317 	ldw	ra,12(sp)
   25d5c:	dc800217 	ldw	r18,8(sp)
   25d60:	dc400117 	ldw	r17,4(sp)
   25d64:	dc000017 	ldw	r16,0(sp)
   25d68:	dec00404 	addi	sp,sp,16
   25d6c:	f800283a 	ret

00025d70 <__sfp>:
   25d70:	defffb04 	addi	sp,sp,-20
   25d74:	dc000015 	stw	r16,0(sp)
   25d78:	04010034 	movhi	r16,1024
   25d7c:	8407d104 	addi	r16,r16,8004
   25d80:	dcc00315 	stw	r19,12(sp)
   25d84:	2027883a 	mov	r19,r4
   25d88:	81000017 	ldw	r4,0(r16)
   25d8c:	dfc00415 	stw	ra,16(sp)
   25d90:	dc800215 	stw	r18,8(sp)
   25d94:	20800e17 	ldw	r2,56(r4)
   25d98:	dc400115 	stw	r17,4(sp)
   25d9c:	1000021e 	bne	r2,zero,25da8 <__sfp+0x38>
   25da0:	0025b640 	call	25b64 <__sinit.part.1>
   25da4:	81000017 	ldw	r4,0(r16)
   25da8:	2480b804 	addi	r18,r4,736
   25dac:	047fffc4 	movi	r17,-1
   25db0:	91000117 	ldw	r4,4(r18)
   25db4:	94000217 	ldw	r16,8(r18)
   25db8:	213fffc4 	addi	r4,r4,-1
   25dbc:	20000a16 	blt	r4,zero,25de8 <__sfp+0x78>
   25dc0:	8080030f 	ldh	r2,12(r16)
   25dc4:	10000c26 	beq	r2,zero,25df8 <__sfp+0x88>
   25dc8:	80c01d04 	addi	r3,r16,116
   25dcc:	00000206 	br	25dd8 <__sfp+0x68>
   25dd0:	18bfe60f 	ldh	r2,-104(r3)
   25dd4:	10000826 	beq	r2,zero,25df8 <__sfp+0x88>
   25dd8:	213fffc4 	addi	r4,r4,-1
   25ddc:	1c3ffd04 	addi	r16,r3,-12
   25de0:	18c01a04 	addi	r3,r3,104
   25de4:	247ffa1e 	bne	r4,r17,25dd0 <__alt_data_end+0xf8025dd0>
   25de8:	90800017 	ldw	r2,0(r18)
   25dec:	10001d26 	beq	r2,zero,25e64 <__sfp+0xf4>
   25df0:	1025883a 	mov	r18,r2
   25df4:	003fee06 	br	25db0 <__alt_data_end+0xf8025db0>
   25df8:	00bfffc4 	movi	r2,-1
   25dfc:	8080038d 	sth	r2,14(r16)
   25e00:	00800044 	movi	r2,1
   25e04:	8080030d 	sth	r2,12(r16)
   25e08:	80001915 	stw	zero,100(r16)
   25e0c:	80000015 	stw	zero,0(r16)
   25e10:	80000215 	stw	zero,8(r16)
   25e14:	80000115 	stw	zero,4(r16)
   25e18:	80000415 	stw	zero,16(r16)
   25e1c:	80000515 	stw	zero,20(r16)
   25e20:	80000615 	stw	zero,24(r16)
   25e24:	01800204 	movi	r6,8
   25e28:	000b883a 	mov	r5,zero
   25e2c:	81001704 	addi	r4,r16,92
   25e30:	00213e00 	call	213e0 <memset>
   25e34:	8005883a 	mov	r2,r16
   25e38:	80000c15 	stw	zero,48(r16)
   25e3c:	80000d15 	stw	zero,52(r16)
   25e40:	80001115 	stw	zero,68(r16)
   25e44:	80001215 	stw	zero,72(r16)
   25e48:	dfc00417 	ldw	ra,16(sp)
   25e4c:	dcc00317 	ldw	r19,12(sp)
   25e50:	dc800217 	ldw	r18,8(sp)
   25e54:	dc400117 	ldw	r17,4(sp)
   25e58:	dc000017 	ldw	r16,0(sp)
   25e5c:	dec00504 	addi	sp,sp,20
   25e60:	f800283a 	ret
   25e64:	01400104 	movi	r5,4
   25e68:	9809883a 	mov	r4,r19
   25e6c:	0025d080 	call	25d08 <__sfmoreglue>
   25e70:	90800015 	stw	r2,0(r18)
   25e74:	103fde1e 	bne	r2,zero,25df0 <__alt_data_end+0xf8025df0>
   25e78:	00800304 	movi	r2,12
   25e7c:	98800015 	stw	r2,0(r19)
   25e80:	0005883a 	mov	r2,zero
   25e84:	003ff006 	br	25e48 <__alt_data_end+0xf8025e48>

00025e88 <_cleanup>:
   25e88:	00810034 	movhi	r2,1024
   25e8c:	1087d104 	addi	r2,r2,8004
   25e90:	11000017 	ldw	r4,0(r2)
   25e94:	014000f4 	movhi	r5,3
   25e98:	29675204 	addi	r5,r5,-25272
   25e9c:	00269501 	jmpi	26950 <_fwalk_reent>

00025ea0 <__sinit>:
   25ea0:	20800e17 	ldw	r2,56(r4)
   25ea4:	10000126 	beq	r2,zero,25eac <__sinit+0xc>
   25ea8:	f800283a 	ret
   25eac:	0025b641 	jmpi	25b64 <__sinit.part.1>

00025eb0 <__sfp_lock_acquire>:
   25eb0:	f800283a 	ret

00025eb4 <__sfp_lock_release>:
   25eb4:	f800283a 	ret

00025eb8 <__sinit_lock_acquire>:
   25eb8:	f800283a 	ret

00025ebc <__sinit_lock_release>:
   25ebc:	f800283a 	ret

00025ec0 <__fp_lock_all>:
   25ec0:	00810034 	movhi	r2,1024
   25ec4:	1087d204 	addi	r2,r2,8008
   25ec8:	11000017 	ldw	r4,0(r2)
   25ecc:	014000b4 	movhi	r5,2
   25ed0:	29574004 	addi	r5,r5,23808
   25ed4:	002688c1 	jmpi	2688c <_fwalk>

00025ed8 <__fp_unlock_all>:
   25ed8:	00810034 	movhi	r2,1024
   25edc:	1087d204 	addi	r2,r2,8008
   25ee0:	11000017 	ldw	r4,0(r2)
   25ee4:	014000b4 	movhi	r5,2
   25ee8:	2956d404 	addi	r5,r5,23376
   25eec:	002688c1 	jmpi	2688c <_fwalk>

00025ef0 <__sflags>:
   25ef0:	28800007 	ldb	r2,0(r5)
   25ef4:	00c01c84 	movi	r3,114
   25ef8:	10c02426 	beq	r2,r3,25f8c <__sflags+0x9c>
   25efc:	00c01dc4 	movi	r3,119
   25f00:	10c01e26 	beq	r2,r3,25f7c <__sflags+0x8c>
   25f04:	00c01844 	movi	r3,97
   25f08:	10c00426 	beq	r2,r3,25f1c <__sflags+0x2c>
   25f0c:	00800584 	movi	r2,22
   25f10:	20800015 	stw	r2,0(r4)
   25f14:	0005883a 	mov	r2,zero
   25f18:	f800283a 	ret
   25f1c:	02c08204 	movi	r11,520
   25f20:	01000044 	movi	r4,1
   25f24:	00804204 	movi	r2,264
   25f28:	01c00ac4 	movi	r7,43
   25f2c:	02bff8c4 	movi	r10,-29
   25f30:	027fff04 	movi	r9,-4
   25f34:	02001e04 	movi	r8,120
   25f38:	29400044 	addi	r5,r5,1
   25f3c:	28c00007 	ldb	r3,0(r5)
   25f40:	18000626 	beq	r3,zero,25f5c <__sflags+0x6c>
   25f44:	19c00826 	beq	r3,r7,25f68 <__sflags+0x78>
   25f48:	1a3ffb1e 	bne	r3,r8,25f38 <__alt_data_end+0xf8025f38>
   25f4c:	29400044 	addi	r5,r5,1
   25f50:	28c00007 	ldb	r3,0(r5)
   25f54:	21020014 	ori	r4,r4,2048
   25f58:	183ffa1e 	bne	r3,zero,25f44 <__alt_data_end+0xf8025f44>
   25f5c:	22c8b03a 	or	r4,r4,r11
   25f60:	31000015 	stw	r4,0(r6)
   25f64:	f800283a 	ret
   25f68:	1284703a 	and	r2,r2,r10
   25f6c:	2248703a 	and	r4,r4,r9
   25f70:	10800414 	ori	r2,r2,16
   25f74:	21000094 	ori	r4,r4,2
   25f78:	003fef06 	br	25f38 <__alt_data_end+0xf8025f38>
   25f7c:	02c18004 	movi	r11,1536
   25f80:	01000044 	movi	r4,1
   25f84:	00800204 	movi	r2,8
   25f88:	003fe706 	br	25f28 <__alt_data_end+0xf8025f28>
   25f8c:	0017883a 	mov	r11,zero
   25f90:	0009883a 	mov	r4,zero
   25f94:	00800104 	movi	r2,4
   25f98:	003fe306 	br	25f28 <__alt_data_end+0xf8025f28>

00025f9c <_malloc_trim_r>:
   25f9c:	defffb04 	addi	sp,sp,-20
   25fa0:	dcc00315 	stw	r19,12(sp)
   25fa4:	04c10034 	movhi	r19,1024
   25fa8:	dc800215 	stw	r18,8(sp)
   25fac:	dc400115 	stw	r17,4(sp)
   25fb0:	dc000015 	stw	r16,0(sp)
   25fb4:	dfc00415 	stw	ra,16(sp)
   25fb8:	2821883a 	mov	r16,r5
   25fbc:	9cc1f004 	addi	r19,r19,1984
   25fc0:	2025883a 	mov	r18,r4
   25fc4:	002dbdc0 	call	2dbdc <__malloc_lock>
   25fc8:	98800217 	ldw	r2,8(r19)
   25fcc:	14400117 	ldw	r17,4(r2)
   25fd0:	00bfff04 	movi	r2,-4
   25fd4:	88a2703a 	and	r17,r17,r2
   25fd8:	8c21c83a 	sub	r16,r17,r16
   25fdc:	8403fbc4 	addi	r16,r16,4079
   25fe0:	8020d33a 	srli	r16,r16,12
   25fe4:	0083ffc4 	movi	r2,4095
   25fe8:	843fffc4 	addi	r16,r16,-1
   25fec:	8020933a 	slli	r16,r16,12
   25ff0:	1400060e 	bge	r2,r16,2600c <_malloc_trim_r+0x70>
   25ff4:	000b883a 	mov	r5,zero
   25ff8:	9009883a 	mov	r4,r18
   25ffc:	00219200 	call	21920 <_sbrk_r>
   26000:	98c00217 	ldw	r3,8(r19)
   26004:	1c47883a 	add	r3,r3,r17
   26008:	10c00a26 	beq	r2,r3,26034 <_malloc_trim_r+0x98>
   2600c:	9009883a 	mov	r4,r18
   26010:	002dc000 	call	2dc00 <__malloc_unlock>
   26014:	0005883a 	mov	r2,zero
   26018:	dfc00417 	ldw	ra,16(sp)
   2601c:	dcc00317 	ldw	r19,12(sp)
   26020:	dc800217 	ldw	r18,8(sp)
   26024:	dc400117 	ldw	r17,4(sp)
   26028:	dc000017 	ldw	r16,0(sp)
   2602c:	dec00504 	addi	sp,sp,20
   26030:	f800283a 	ret
   26034:	040bc83a 	sub	r5,zero,r16
   26038:	9009883a 	mov	r4,r18
   2603c:	00219200 	call	21920 <_sbrk_r>
   26040:	00ffffc4 	movi	r3,-1
   26044:	10c00d26 	beq	r2,r3,2607c <_malloc_trim_r+0xe0>
   26048:	00c10034 	movhi	r3,1024
   2604c:	18c7f104 	addi	r3,r3,8132
   26050:	18800017 	ldw	r2,0(r3)
   26054:	99000217 	ldw	r4,8(r19)
   26058:	8c23c83a 	sub	r17,r17,r16
   2605c:	8c400054 	ori	r17,r17,1
   26060:	1421c83a 	sub	r16,r2,r16
   26064:	24400115 	stw	r17,4(r4)
   26068:	9009883a 	mov	r4,r18
   2606c:	1c000015 	stw	r16,0(r3)
   26070:	002dc000 	call	2dc00 <__malloc_unlock>
   26074:	00800044 	movi	r2,1
   26078:	003fe706 	br	26018 <__alt_data_end+0xf8026018>
   2607c:	000b883a 	mov	r5,zero
   26080:	9009883a 	mov	r4,r18
   26084:	00219200 	call	21920 <_sbrk_r>
   26088:	99000217 	ldw	r4,8(r19)
   2608c:	014003c4 	movi	r5,15
   26090:	1107c83a 	sub	r3,r2,r4
   26094:	28ffdd0e 	bge	r5,r3,2600c <__alt_data_end+0xf802600c>
   26098:	01410034 	movhi	r5,1024
   2609c:	2947d304 	addi	r5,r5,8012
   260a0:	29400017 	ldw	r5,0(r5)
   260a4:	18c00054 	ori	r3,r3,1
   260a8:	20c00115 	stw	r3,4(r4)
   260ac:	00c10034 	movhi	r3,1024
   260b0:	1145c83a 	sub	r2,r2,r5
   260b4:	18c7f104 	addi	r3,r3,8132
   260b8:	18800015 	stw	r2,0(r3)
   260bc:	003fd306 	br	2600c <__alt_data_end+0xf802600c>

000260c0 <_free_r>:
   260c0:	28004126 	beq	r5,zero,261c8 <_free_r+0x108>
   260c4:	defffd04 	addi	sp,sp,-12
   260c8:	dc400115 	stw	r17,4(sp)
   260cc:	dc000015 	stw	r16,0(sp)
   260d0:	2023883a 	mov	r17,r4
   260d4:	2821883a 	mov	r16,r5
   260d8:	dfc00215 	stw	ra,8(sp)
   260dc:	002dbdc0 	call	2dbdc <__malloc_lock>
   260e0:	81ffff17 	ldw	r7,-4(r16)
   260e4:	00bfff84 	movi	r2,-2
   260e8:	01010034 	movhi	r4,1024
   260ec:	81bffe04 	addi	r6,r16,-8
   260f0:	3884703a 	and	r2,r7,r2
   260f4:	2101f004 	addi	r4,r4,1984
   260f8:	308b883a 	add	r5,r6,r2
   260fc:	2a400117 	ldw	r9,4(r5)
   26100:	22000217 	ldw	r8,8(r4)
   26104:	00ffff04 	movi	r3,-4
   26108:	48c6703a 	and	r3,r9,r3
   2610c:	2a005726 	beq	r5,r8,2626c <_free_r+0x1ac>
   26110:	28c00115 	stw	r3,4(r5)
   26114:	39c0004c 	andi	r7,r7,1
   26118:	3800091e 	bne	r7,zero,26140 <_free_r+0x80>
   2611c:	823ffe17 	ldw	r8,-8(r16)
   26120:	22400204 	addi	r9,r4,8
   26124:	320dc83a 	sub	r6,r6,r8
   26128:	31c00217 	ldw	r7,8(r6)
   2612c:	1205883a 	add	r2,r2,r8
   26130:	3a406526 	beq	r7,r9,262c8 <_free_r+0x208>
   26134:	32000317 	ldw	r8,12(r6)
   26138:	3a000315 	stw	r8,12(r7)
   2613c:	41c00215 	stw	r7,8(r8)
   26140:	28cf883a 	add	r7,r5,r3
   26144:	39c00117 	ldw	r7,4(r7)
   26148:	39c0004c 	andi	r7,r7,1
   2614c:	38003a26 	beq	r7,zero,26238 <_free_r+0x178>
   26150:	10c00054 	ori	r3,r2,1
   26154:	30c00115 	stw	r3,4(r6)
   26158:	3087883a 	add	r3,r6,r2
   2615c:	18800015 	stw	r2,0(r3)
   26160:	00c07fc4 	movi	r3,511
   26164:	18801936 	bltu	r3,r2,261cc <_free_r+0x10c>
   26168:	1004d0fa 	srli	r2,r2,3
   2616c:	01c00044 	movi	r7,1
   26170:	21400117 	ldw	r5,4(r4)
   26174:	10c00044 	addi	r3,r2,1
   26178:	18c7883a 	add	r3,r3,r3
   2617c:	1005d0ba 	srai	r2,r2,2
   26180:	18c7883a 	add	r3,r3,r3
   26184:	18c7883a 	add	r3,r3,r3
   26188:	1907883a 	add	r3,r3,r4
   2618c:	3884983a 	sll	r2,r7,r2
   26190:	19c00017 	ldw	r7,0(r3)
   26194:	1a3ffe04 	addi	r8,r3,-8
   26198:	1144b03a 	or	r2,r2,r5
   2619c:	32000315 	stw	r8,12(r6)
   261a0:	31c00215 	stw	r7,8(r6)
   261a4:	20800115 	stw	r2,4(r4)
   261a8:	19800015 	stw	r6,0(r3)
   261ac:	39800315 	stw	r6,12(r7)
   261b0:	8809883a 	mov	r4,r17
   261b4:	dfc00217 	ldw	ra,8(sp)
   261b8:	dc400117 	ldw	r17,4(sp)
   261bc:	dc000017 	ldw	r16,0(sp)
   261c0:	dec00304 	addi	sp,sp,12
   261c4:	002dc001 	jmpi	2dc00 <__malloc_unlock>
   261c8:	f800283a 	ret
   261cc:	100ad27a 	srli	r5,r2,9
   261d0:	00c00104 	movi	r3,4
   261d4:	19404a36 	bltu	r3,r5,26300 <_free_r+0x240>
   261d8:	100ad1ba 	srli	r5,r2,6
   261dc:	28c00e44 	addi	r3,r5,57
   261e0:	18c7883a 	add	r3,r3,r3
   261e4:	29400e04 	addi	r5,r5,56
   261e8:	18c7883a 	add	r3,r3,r3
   261ec:	18c7883a 	add	r3,r3,r3
   261f0:	1909883a 	add	r4,r3,r4
   261f4:	20c00017 	ldw	r3,0(r4)
   261f8:	01c10034 	movhi	r7,1024
   261fc:	213ffe04 	addi	r4,r4,-8
   26200:	39c1f004 	addi	r7,r7,1984
   26204:	20c04426 	beq	r4,r3,26318 <_free_r+0x258>
   26208:	01ffff04 	movi	r7,-4
   2620c:	19400117 	ldw	r5,4(r3)
   26210:	29ca703a 	and	r5,r5,r7
   26214:	1140022e 	bgeu	r2,r5,26220 <_free_r+0x160>
   26218:	18c00217 	ldw	r3,8(r3)
   2621c:	20fffb1e 	bne	r4,r3,2620c <__alt_data_end+0xf802620c>
   26220:	19000317 	ldw	r4,12(r3)
   26224:	31000315 	stw	r4,12(r6)
   26228:	30c00215 	stw	r3,8(r6)
   2622c:	21800215 	stw	r6,8(r4)
   26230:	19800315 	stw	r6,12(r3)
   26234:	003fde06 	br	261b0 <__alt_data_end+0xf80261b0>
   26238:	29c00217 	ldw	r7,8(r5)
   2623c:	10c5883a 	add	r2,r2,r3
   26240:	00c10034 	movhi	r3,1024
   26244:	18c1f204 	addi	r3,r3,1992
   26248:	38c03b26 	beq	r7,r3,26338 <_free_r+0x278>
   2624c:	2a000317 	ldw	r8,12(r5)
   26250:	11400054 	ori	r5,r2,1
   26254:	3087883a 	add	r3,r6,r2
   26258:	3a000315 	stw	r8,12(r7)
   2625c:	41c00215 	stw	r7,8(r8)
   26260:	31400115 	stw	r5,4(r6)
   26264:	18800015 	stw	r2,0(r3)
   26268:	003fbd06 	br	26160 <__alt_data_end+0xf8026160>
   2626c:	39c0004c 	andi	r7,r7,1
   26270:	10c5883a 	add	r2,r2,r3
   26274:	3800071e 	bne	r7,zero,26294 <_free_r+0x1d4>
   26278:	81fffe17 	ldw	r7,-8(r16)
   2627c:	31cdc83a 	sub	r6,r6,r7
   26280:	30c00317 	ldw	r3,12(r6)
   26284:	31400217 	ldw	r5,8(r6)
   26288:	11c5883a 	add	r2,r2,r7
   2628c:	28c00315 	stw	r3,12(r5)
   26290:	19400215 	stw	r5,8(r3)
   26294:	10c00054 	ori	r3,r2,1
   26298:	30c00115 	stw	r3,4(r6)
   2629c:	00c10034 	movhi	r3,1024
   262a0:	18c7d404 	addi	r3,r3,8016
   262a4:	18c00017 	ldw	r3,0(r3)
   262a8:	21800215 	stw	r6,8(r4)
   262ac:	10ffc036 	bltu	r2,r3,261b0 <__alt_data_end+0xf80261b0>
   262b0:	00810034 	movhi	r2,1024
   262b4:	1087e604 	addi	r2,r2,8088
   262b8:	11400017 	ldw	r5,0(r2)
   262bc:	8809883a 	mov	r4,r17
   262c0:	0025f9c0 	call	25f9c <_malloc_trim_r>
   262c4:	003fba06 	br	261b0 <__alt_data_end+0xf80261b0>
   262c8:	28c9883a 	add	r4,r5,r3
   262cc:	21000117 	ldw	r4,4(r4)
   262d0:	2100004c 	andi	r4,r4,1
   262d4:	2000391e 	bne	r4,zero,263bc <_free_r+0x2fc>
   262d8:	29c00217 	ldw	r7,8(r5)
   262dc:	29000317 	ldw	r4,12(r5)
   262e0:	1885883a 	add	r2,r3,r2
   262e4:	10c00054 	ori	r3,r2,1
   262e8:	39000315 	stw	r4,12(r7)
   262ec:	21c00215 	stw	r7,8(r4)
   262f0:	30c00115 	stw	r3,4(r6)
   262f4:	308d883a 	add	r6,r6,r2
   262f8:	30800015 	stw	r2,0(r6)
   262fc:	003fac06 	br	261b0 <__alt_data_end+0xf80261b0>
   26300:	00c00504 	movi	r3,20
   26304:	19401536 	bltu	r3,r5,2635c <_free_r+0x29c>
   26308:	28c01704 	addi	r3,r5,92
   2630c:	18c7883a 	add	r3,r3,r3
   26310:	294016c4 	addi	r5,r5,91
   26314:	003fb406 	br	261e8 <__alt_data_end+0xf80261e8>
   26318:	280bd0ba 	srai	r5,r5,2
   2631c:	00c00044 	movi	r3,1
   26320:	38800117 	ldw	r2,4(r7)
   26324:	194a983a 	sll	r5,r3,r5
   26328:	2007883a 	mov	r3,r4
   2632c:	2884b03a 	or	r2,r5,r2
   26330:	38800115 	stw	r2,4(r7)
   26334:	003fbb06 	br	26224 <__alt_data_end+0xf8026224>
   26338:	21800515 	stw	r6,20(r4)
   2633c:	21800415 	stw	r6,16(r4)
   26340:	10c00054 	ori	r3,r2,1
   26344:	31c00315 	stw	r7,12(r6)
   26348:	31c00215 	stw	r7,8(r6)
   2634c:	30c00115 	stw	r3,4(r6)
   26350:	308d883a 	add	r6,r6,r2
   26354:	30800015 	stw	r2,0(r6)
   26358:	003f9506 	br	261b0 <__alt_data_end+0xf80261b0>
   2635c:	00c01504 	movi	r3,84
   26360:	19400536 	bltu	r3,r5,26378 <_free_r+0x2b8>
   26364:	100ad33a 	srli	r5,r2,12
   26368:	28c01bc4 	addi	r3,r5,111
   2636c:	18c7883a 	add	r3,r3,r3
   26370:	29401b84 	addi	r5,r5,110
   26374:	003f9c06 	br	261e8 <__alt_data_end+0xf80261e8>
   26378:	00c05504 	movi	r3,340
   2637c:	19400536 	bltu	r3,r5,26394 <_free_r+0x2d4>
   26380:	100ad3fa 	srli	r5,r2,15
   26384:	28c01e04 	addi	r3,r5,120
   26388:	18c7883a 	add	r3,r3,r3
   2638c:	29401dc4 	addi	r5,r5,119
   26390:	003f9506 	br	261e8 <__alt_data_end+0xf80261e8>
   26394:	00c15504 	movi	r3,1364
   26398:	19400536 	bltu	r3,r5,263b0 <_free_r+0x2f0>
   2639c:	100ad4ba 	srli	r5,r2,18
   263a0:	28c01f44 	addi	r3,r5,125
   263a4:	18c7883a 	add	r3,r3,r3
   263a8:	29401f04 	addi	r5,r5,124
   263ac:	003f8e06 	br	261e8 <__alt_data_end+0xf80261e8>
   263b0:	00c03f84 	movi	r3,254
   263b4:	01401f84 	movi	r5,126
   263b8:	003f8b06 	br	261e8 <__alt_data_end+0xf80261e8>
   263bc:	10c00054 	ori	r3,r2,1
   263c0:	30c00115 	stw	r3,4(r6)
   263c4:	308d883a 	add	r6,r6,r2
   263c8:	30800015 	stw	r2,0(r6)
   263cc:	003f7806 	br	261b0 <__alt_data_end+0xf80261b0>

000263d0 <__sfvwrite_r>:
   263d0:	30800217 	ldw	r2,8(r6)
   263d4:	10006726 	beq	r2,zero,26574 <__sfvwrite_r+0x1a4>
   263d8:	28c0030b 	ldhu	r3,12(r5)
   263dc:	defff404 	addi	sp,sp,-48
   263e0:	dd400715 	stw	r21,28(sp)
   263e4:	dd000615 	stw	r20,24(sp)
   263e8:	dc000215 	stw	r16,8(sp)
   263ec:	dfc00b15 	stw	ra,44(sp)
   263f0:	df000a15 	stw	fp,40(sp)
   263f4:	ddc00915 	stw	r23,36(sp)
   263f8:	dd800815 	stw	r22,32(sp)
   263fc:	dcc00515 	stw	r19,20(sp)
   26400:	dc800415 	stw	r18,16(sp)
   26404:	dc400315 	stw	r17,12(sp)
   26408:	1880020c 	andi	r2,r3,8
   2640c:	2821883a 	mov	r16,r5
   26410:	202b883a 	mov	r21,r4
   26414:	3029883a 	mov	r20,r6
   26418:	10002726 	beq	r2,zero,264b8 <__sfvwrite_r+0xe8>
   2641c:	28800417 	ldw	r2,16(r5)
   26420:	10002526 	beq	r2,zero,264b8 <__sfvwrite_r+0xe8>
   26424:	1880008c 	andi	r2,r3,2
   26428:	a4400017 	ldw	r17,0(r20)
   2642c:	10002a26 	beq	r2,zero,264d8 <__sfvwrite_r+0x108>
   26430:	05a00034 	movhi	r22,32768
   26434:	0027883a 	mov	r19,zero
   26438:	0025883a 	mov	r18,zero
   2643c:	b5bf0004 	addi	r22,r22,-1024
   26440:	980d883a 	mov	r6,r19
   26444:	a809883a 	mov	r4,r21
   26448:	90004626 	beq	r18,zero,26564 <__sfvwrite_r+0x194>
   2644c:	900f883a 	mov	r7,r18
   26450:	b480022e 	bgeu	r22,r18,2645c <__sfvwrite_r+0x8c>
   26454:	01e00034 	movhi	r7,32768
   26458:	39ff0004 	addi	r7,r7,-1024
   2645c:	80800917 	ldw	r2,36(r16)
   26460:	81400717 	ldw	r5,28(r16)
   26464:	103ee83a 	callr	r2
   26468:	0080570e 	bge	zero,r2,265c8 <__sfvwrite_r+0x1f8>
   2646c:	a0c00217 	ldw	r3,8(r20)
   26470:	98a7883a 	add	r19,r19,r2
   26474:	90a5c83a 	sub	r18,r18,r2
   26478:	1885c83a 	sub	r2,r3,r2
   2647c:	a0800215 	stw	r2,8(r20)
   26480:	103fef1e 	bne	r2,zero,26440 <__alt_data_end+0xf8026440>
   26484:	0005883a 	mov	r2,zero
   26488:	dfc00b17 	ldw	ra,44(sp)
   2648c:	df000a17 	ldw	fp,40(sp)
   26490:	ddc00917 	ldw	r23,36(sp)
   26494:	dd800817 	ldw	r22,32(sp)
   26498:	dd400717 	ldw	r21,28(sp)
   2649c:	dd000617 	ldw	r20,24(sp)
   264a0:	dcc00517 	ldw	r19,20(sp)
   264a4:	dc800417 	ldw	r18,16(sp)
   264a8:	dc400317 	ldw	r17,12(sp)
   264ac:	dc000217 	ldw	r16,8(sp)
   264b0:	dec00c04 	addi	sp,sp,48
   264b4:	f800283a 	ret
   264b8:	800b883a 	mov	r5,r16
   264bc:	a809883a 	mov	r4,r21
   264c0:	0023e780 	call	23e78 <__swsetup_r>
   264c4:	1000eb1e 	bne	r2,zero,26874 <__sfvwrite_r+0x4a4>
   264c8:	80c0030b 	ldhu	r3,12(r16)
   264cc:	a4400017 	ldw	r17,0(r20)
   264d0:	1880008c 	andi	r2,r3,2
   264d4:	103fd61e 	bne	r2,zero,26430 <__alt_data_end+0xf8026430>
   264d8:	1880004c 	andi	r2,r3,1
   264dc:	10003f1e 	bne	r2,zero,265dc <__sfvwrite_r+0x20c>
   264e0:	0039883a 	mov	fp,zero
   264e4:	0025883a 	mov	r18,zero
   264e8:	90001a26 	beq	r18,zero,26554 <__sfvwrite_r+0x184>
   264ec:	1880800c 	andi	r2,r3,512
   264f0:	84c00217 	ldw	r19,8(r16)
   264f4:	10002126 	beq	r2,zero,2657c <__sfvwrite_r+0x1ac>
   264f8:	982f883a 	mov	r23,r19
   264fc:	94c09336 	bltu	r18,r19,2674c <__sfvwrite_r+0x37c>
   26500:	1881200c 	andi	r2,r3,1152
   26504:	10009e1e 	bne	r2,zero,26780 <__sfvwrite_r+0x3b0>
   26508:	81000017 	ldw	r4,0(r16)
   2650c:	b80d883a 	mov	r6,r23
   26510:	e00b883a 	mov	r5,fp
   26514:	0026dd00 	call	26dd0 <memmove>
   26518:	80c00217 	ldw	r3,8(r16)
   2651c:	81000017 	ldw	r4,0(r16)
   26520:	9005883a 	mov	r2,r18
   26524:	1ce7c83a 	sub	r19,r3,r19
   26528:	25cf883a 	add	r7,r4,r23
   2652c:	84c00215 	stw	r19,8(r16)
   26530:	81c00015 	stw	r7,0(r16)
   26534:	a0c00217 	ldw	r3,8(r20)
   26538:	e0b9883a 	add	fp,fp,r2
   2653c:	90a5c83a 	sub	r18,r18,r2
   26540:	18a7c83a 	sub	r19,r3,r2
   26544:	a4c00215 	stw	r19,8(r20)
   26548:	983fce26 	beq	r19,zero,26484 <__alt_data_end+0xf8026484>
   2654c:	80c0030b 	ldhu	r3,12(r16)
   26550:	903fe61e 	bne	r18,zero,264ec <__alt_data_end+0xf80264ec>
   26554:	8f000017 	ldw	fp,0(r17)
   26558:	8c800117 	ldw	r18,4(r17)
   2655c:	8c400204 	addi	r17,r17,8
   26560:	003fe106 	br	264e8 <__alt_data_end+0xf80264e8>
   26564:	8cc00017 	ldw	r19,0(r17)
   26568:	8c800117 	ldw	r18,4(r17)
   2656c:	8c400204 	addi	r17,r17,8
   26570:	003fb306 	br	26440 <__alt_data_end+0xf8026440>
   26574:	0005883a 	mov	r2,zero
   26578:	f800283a 	ret
   2657c:	81000017 	ldw	r4,0(r16)
   26580:	80800417 	ldw	r2,16(r16)
   26584:	11005736 	bltu	r2,r4,266e4 <__sfvwrite_r+0x314>
   26588:	85c00517 	ldw	r23,20(r16)
   2658c:	95c05536 	bltu	r18,r23,266e4 <__sfvwrite_r+0x314>
   26590:	00a00034 	movhi	r2,32768
   26594:	10bfffc4 	addi	r2,r2,-1
   26598:	9009883a 	mov	r4,r18
   2659c:	1480012e 	bgeu	r2,r18,265a4 <__sfvwrite_r+0x1d4>
   265a0:	1009883a 	mov	r4,r2
   265a4:	b80b883a 	mov	r5,r23
   265a8:	002ae440 	call	2ae44 <__divsi3>
   265ac:	15cf383a 	mul	r7,r2,r23
   265b0:	81400717 	ldw	r5,28(r16)
   265b4:	80800917 	ldw	r2,36(r16)
   265b8:	e00d883a 	mov	r6,fp
   265bc:	a809883a 	mov	r4,r21
   265c0:	103ee83a 	callr	r2
   265c4:	00bfdb16 	blt	zero,r2,26534 <__alt_data_end+0xf8026534>
   265c8:	8080030b 	ldhu	r2,12(r16)
   265cc:	10801014 	ori	r2,r2,64
   265d0:	8080030d 	sth	r2,12(r16)
   265d4:	00bfffc4 	movi	r2,-1
   265d8:	003fab06 	br	26488 <__alt_data_end+0xf8026488>
   265dc:	0027883a 	mov	r19,zero
   265e0:	0011883a 	mov	r8,zero
   265e4:	0039883a 	mov	fp,zero
   265e8:	0025883a 	mov	r18,zero
   265ec:	90001f26 	beq	r18,zero,2666c <__sfvwrite_r+0x29c>
   265f0:	40005a26 	beq	r8,zero,2675c <__sfvwrite_r+0x38c>
   265f4:	982d883a 	mov	r22,r19
   265f8:	94c0012e 	bgeu	r18,r19,26600 <__sfvwrite_r+0x230>
   265fc:	902d883a 	mov	r22,r18
   26600:	81000017 	ldw	r4,0(r16)
   26604:	80800417 	ldw	r2,16(r16)
   26608:	b02f883a 	mov	r23,r22
   2660c:	81c00517 	ldw	r7,20(r16)
   26610:	1100032e 	bgeu	r2,r4,26620 <__sfvwrite_r+0x250>
   26614:	80c00217 	ldw	r3,8(r16)
   26618:	38c7883a 	add	r3,r7,r3
   2661c:	1d801816 	blt	r3,r22,26680 <__sfvwrite_r+0x2b0>
   26620:	b1c03e16 	blt	r22,r7,2671c <__sfvwrite_r+0x34c>
   26624:	80800917 	ldw	r2,36(r16)
   26628:	81400717 	ldw	r5,28(r16)
   2662c:	e00d883a 	mov	r6,fp
   26630:	da000115 	stw	r8,4(sp)
   26634:	a809883a 	mov	r4,r21
   26638:	103ee83a 	callr	r2
   2663c:	102f883a 	mov	r23,r2
   26640:	da000117 	ldw	r8,4(sp)
   26644:	00bfe00e 	bge	zero,r2,265c8 <__alt_data_end+0xf80265c8>
   26648:	9de7c83a 	sub	r19,r19,r23
   2664c:	98001f26 	beq	r19,zero,266cc <__sfvwrite_r+0x2fc>
   26650:	a0800217 	ldw	r2,8(r20)
   26654:	e5f9883a 	add	fp,fp,r23
   26658:	95e5c83a 	sub	r18,r18,r23
   2665c:	15efc83a 	sub	r23,r2,r23
   26660:	a5c00215 	stw	r23,8(r20)
   26664:	b83f8726 	beq	r23,zero,26484 <__alt_data_end+0xf8026484>
   26668:	903fe11e 	bne	r18,zero,265f0 <__alt_data_end+0xf80265f0>
   2666c:	8f000017 	ldw	fp,0(r17)
   26670:	8c800117 	ldw	r18,4(r17)
   26674:	0011883a 	mov	r8,zero
   26678:	8c400204 	addi	r17,r17,8
   2667c:	003fdb06 	br	265ec <__alt_data_end+0xf80265ec>
   26680:	180d883a 	mov	r6,r3
   26684:	e00b883a 	mov	r5,fp
   26688:	da000115 	stw	r8,4(sp)
   2668c:	d8c00015 	stw	r3,0(sp)
   26690:	0026dd00 	call	26dd0 <memmove>
   26694:	d8c00017 	ldw	r3,0(sp)
   26698:	80800017 	ldw	r2,0(r16)
   2669c:	800b883a 	mov	r5,r16
   266a0:	a809883a 	mov	r4,r21
   266a4:	10c5883a 	add	r2,r2,r3
   266a8:	80800015 	stw	r2,0(r16)
   266ac:	d8c00015 	stw	r3,0(sp)
   266b0:	0025ac40 	call	25ac4 <_fflush_r>
   266b4:	d8c00017 	ldw	r3,0(sp)
   266b8:	da000117 	ldw	r8,4(sp)
   266bc:	103fc21e 	bne	r2,zero,265c8 <__alt_data_end+0xf80265c8>
   266c0:	182f883a 	mov	r23,r3
   266c4:	9de7c83a 	sub	r19,r19,r23
   266c8:	983fe11e 	bne	r19,zero,26650 <__alt_data_end+0xf8026650>
   266cc:	800b883a 	mov	r5,r16
   266d0:	a809883a 	mov	r4,r21
   266d4:	0025ac40 	call	25ac4 <_fflush_r>
   266d8:	103fbb1e 	bne	r2,zero,265c8 <__alt_data_end+0xf80265c8>
   266dc:	0011883a 	mov	r8,zero
   266e0:	003fdb06 	br	26650 <__alt_data_end+0xf8026650>
   266e4:	94c0012e 	bgeu	r18,r19,266ec <__sfvwrite_r+0x31c>
   266e8:	9027883a 	mov	r19,r18
   266ec:	980d883a 	mov	r6,r19
   266f0:	e00b883a 	mov	r5,fp
   266f4:	0026dd00 	call	26dd0 <memmove>
   266f8:	80800217 	ldw	r2,8(r16)
   266fc:	80c00017 	ldw	r3,0(r16)
   26700:	14c5c83a 	sub	r2,r2,r19
   26704:	1cc7883a 	add	r3,r3,r19
   26708:	80800215 	stw	r2,8(r16)
   2670c:	80c00015 	stw	r3,0(r16)
   26710:	10004326 	beq	r2,zero,26820 <__sfvwrite_r+0x450>
   26714:	9805883a 	mov	r2,r19
   26718:	003f8606 	br	26534 <__alt_data_end+0xf8026534>
   2671c:	b00d883a 	mov	r6,r22
   26720:	e00b883a 	mov	r5,fp
   26724:	da000115 	stw	r8,4(sp)
   26728:	0026dd00 	call	26dd0 <memmove>
   2672c:	80800217 	ldw	r2,8(r16)
   26730:	80c00017 	ldw	r3,0(r16)
   26734:	da000117 	ldw	r8,4(sp)
   26738:	1585c83a 	sub	r2,r2,r22
   2673c:	1dad883a 	add	r22,r3,r22
   26740:	80800215 	stw	r2,8(r16)
   26744:	85800015 	stw	r22,0(r16)
   26748:	003fbf06 	br	26648 <__alt_data_end+0xf8026648>
   2674c:	81000017 	ldw	r4,0(r16)
   26750:	9027883a 	mov	r19,r18
   26754:	902f883a 	mov	r23,r18
   26758:	003f6c06 	br	2650c <__alt_data_end+0xf802650c>
   2675c:	900d883a 	mov	r6,r18
   26760:	01400284 	movi	r5,10
   26764:	e009883a 	mov	r4,fp
   26768:	0026ba40 	call	26ba4 <memchr>
   2676c:	10003e26 	beq	r2,zero,26868 <__sfvwrite_r+0x498>
   26770:	10800044 	addi	r2,r2,1
   26774:	1727c83a 	sub	r19,r2,fp
   26778:	02000044 	movi	r8,1
   2677c:	003f9d06 	br	265f4 <__alt_data_end+0xf80265f4>
   26780:	80800517 	ldw	r2,20(r16)
   26784:	81400417 	ldw	r5,16(r16)
   26788:	81c00017 	ldw	r7,0(r16)
   2678c:	10a7883a 	add	r19,r2,r2
   26790:	9885883a 	add	r2,r19,r2
   26794:	1026d7fa 	srli	r19,r2,31
   26798:	396dc83a 	sub	r22,r7,r5
   2679c:	b1000044 	addi	r4,r22,1
   267a0:	9885883a 	add	r2,r19,r2
   267a4:	1027d07a 	srai	r19,r2,1
   267a8:	2485883a 	add	r2,r4,r18
   267ac:	980d883a 	mov	r6,r19
   267b0:	9880022e 	bgeu	r19,r2,267bc <__sfvwrite_r+0x3ec>
   267b4:	1027883a 	mov	r19,r2
   267b8:	100d883a 	mov	r6,r2
   267bc:	18c1000c 	andi	r3,r3,1024
   267c0:	18001c26 	beq	r3,zero,26834 <__sfvwrite_r+0x464>
   267c4:	300b883a 	mov	r5,r6
   267c8:	a809883a 	mov	r4,r21
   267cc:	0020bd40 	call	20bd4 <_malloc_r>
   267d0:	102f883a 	mov	r23,r2
   267d4:	10002926 	beq	r2,zero,2687c <__sfvwrite_r+0x4ac>
   267d8:	81400417 	ldw	r5,16(r16)
   267dc:	b00d883a 	mov	r6,r22
   267e0:	1009883a 	mov	r4,r2
   267e4:	0026c880 	call	26c88 <memcpy>
   267e8:	8080030b 	ldhu	r2,12(r16)
   267ec:	00fedfc4 	movi	r3,-1153
   267f0:	10c4703a 	and	r2,r2,r3
   267f4:	10802014 	ori	r2,r2,128
   267f8:	8080030d 	sth	r2,12(r16)
   267fc:	bd89883a 	add	r4,r23,r22
   26800:	9d8fc83a 	sub	r7,r19,r22
   26804:	85c00415 	stw	r23,16(r16)
   26808:	84c00515 	stw	r19,20(r16)
   2680c:	81000015 	stw	r4,0(r16)
   26810:	9027883a 	mov	r19,r18
   26814:	81c00215 	stw	r7,8(r16)
   26818:	902f883a 	mov	r23,r18
   2681c:	003f3b06 	br	2650c <__alt_data_end+0xf802650c>
   26820:	800b883a 	mov	r5,r16
   26824:	a809883a 	mov	r4,r21
   26828:	0025ac40 	call	25ac4 <_fflush_r>
   2682c:	103fb926 	beq	r2,zero,26714 <__alt_data_end+0xf8026714>
   26830:	003f6506 	br	265c8 <__alt_data_end+0xf80265c8>
   26834:	a809883a 	mov	r4,r21
   26838:	0027f880 	call	27f88 <_realloc_r>
   2683c:	102f883a 	mov	r23,r2
   26840:	103fee1e 	bne	r2,zero,267fc <__alt_data_end+0xf80267fc>
   26844:	81400417 	ldw	r5,16(r16)
   26848:	a809883a 	mov	r4,r21
   2684c:	00260c00 	call	260c0 <_free_r>
   26850:	8080030b 	ldhu	r2,12(r16)
   26854:	00ffdfc4 	movi	r3,-129
   26858:	1884703a 	and	r2,r3,r2
   2685c:	00c00304 	movi	r3,12
   26860:	a8c00015 	stw	r3,0(r21)
   26864:	003f5906 	br	265cc <__alt_data_end+0xf80265cc>
   26868:	94c00044 	addi	r19,r18,1
   2686c:	02000044 	movi	r8,1
   26870:	003f6006 	br	265f4 <__alt_data_end+0xf80265f4>
   26874:	00bfffc4 	movi	r2,-1
   26878:	003f0306 	br	26488 <__alt_data_end+0xf8026488>
   2687c:	00800304 	movi	r2,12
   26880:	a8800015 	stw	r2,0(r21)
   26884:	8080030b 	ldhu	r2,12(r16)
   26888:	003f5006 	br	265cc <__alt_data_end+0xf80265cc>

0002688c <_fwalk>:
   2688c:	defff704 	addi	sp,sp,-36
   26890:	dd000415 	stw	r20,16(sp)
   26894:	dfc00815 	stw	ra,32(sp)
   26898:	ddc00715 	stw	r23,28(sp)
   2689c:	dd800615 	stw	r22,24(sp)
   268a0:	dd400515 	stw	r21,20(sp)
   268a4:	dcc00315 	stw	r19,12(sp)
   268a8:	dc800215 	stw	r18,8(sp)
   268ac:	dc400115 	stw	r17,4(sp)
   268b0:	dc000015 	stw	r16,0(sp)
   268b4:	2500b804 	addi	r20,r4,736
   268b8:	a0002326 	beq	r20,zero,26948 <_fwalk+0xbc>
   268bc:	282b883a 	mov	r21,r5
   268c0:	002f883a 	mov	r23,zero
   268c4:	05800044 	movi	r22,1
   268c8:	04ffffc4 	movi	r19,-1
   268cc:	a4400117 	ldw	r17,4(r20)
   268d0:	a4800217 	ldw	r18,8(r20)
   268d4:	8c7fffc4 	addi	r17,r17,-1
   268d8:	88000d16 	blt	r17,zero,26910 <_fwalk+0x84>
   268dc:	94000304 	addi	r16,r18,12
   268e0:	94800384 	addi	r18,r18,14
   268e4:	8080000b 	ldhu	r2,0(r16)
   268e8:	8c7fffc4 	addi	r17,r17,-1
   268ec:	813ffd04 	addi	r4,r16,-12
   268f0:	b080042e 	bgeu	r22,r2,26904 <_fwalk+0x78>
   268f4:	9080000f 	ldh	r2,0(r18)
   268f8:	14c00226 	beq	r2,r19,26904 <_fwalk+0x78>
   268fc:	a83ee83a 	callr	r21
   26900:	b8aeb03a 	or	r23,r23,r2
   26904:	84001a04 	addi	r16,r16,104
   26908:	94801a04 	addi	r18,r18,104
   2690c:	8cfff51e 	bne	r17,r19,268e4 <__alt_data_end+0xf80268e4>
   26910:	a5000017 	ldw	r20,0(r20)
   26914:	a03fed1e 	bne	r20,zero,268cc <__alt_data_end+0xf80268cc>
   26918:	b805883a 	mov	r2,r23
   2691c:	dfc00817 	ldw	ra,32(sp)
   26920:	ddc00717 	ldw	r23,28(sp)
   26924:	dd800617 	ldw	r22,24(sp)
   26928:	dd400517 	ldw	r21,20(sp)
   2692c:	dd000417 	ldw	r20,16(sp)
   26930:	dcc00317 	ldw	r19,12(sp)
   26934:	dc800217 	ldw	r18,8(sp)
   26938:	dc400117 	ldw	r17,4(sp)
   2693c:	dc000017 	ldw	r16,0(sp)
   26940:	dec00904 	addi	sp,sp,36
   26944:	f800283a 	ret
   26948:	002f883a 	mov	r23,zero
   2694c:	003ff206 	br	26918 <__alt_data_end+0xf8026918>

00026950 <_fwalk_reent>:
   26950:	defff704 	addi	sp,sp,-36
   26954:	dd000415 	stw	r20,16(sp)
   26958:	dfc00815 	stw	ra,32(sp)
   2695c:	ddc00715 	stw	r23,28(sp)
   26960:	dd800615 	stw	r22,24(sp)
   26964:	dd400515 	stw	r21,20(sp)
   26968:	dcc00315 	stw	r19,12(sp)
   2696c:	dc800215 	stw	r18,8(sp)
   26970:	dc400115 	stw	r17,4(sp)
   26974:	dc000015 	stw	r16,0(sp)
   26978:	2500b804 	addi	r20,r4,736
   2697c:	a0002326 	beq	r20,zero,26a0c <_fwalk_reent+0xbc>
   26980:	282b883a 	mov	r21,r5
   26984:	2027883a 	mov	r19,r4
   26988:	002f883a 	mov	r23,zero
   2698c:	05800044 	movi	r22,1
   26990:	04bfffc4 	movi	r18,-1
   26994:	a4400117 	ldw	r17,4(r20)
   26998:	a4000217 	ldw	r16,8(r20)
   2699c:	8c7fffc4 	addi	r17,r17,-1
   269a0:	88000c16 	blt	r17,zero,269d4 <_fwalk_reent+0x84>
   269a4:	84000304 	addi	r16,r16,12
   269a8:	8080000b 	ldhu	r2,0(r16)
   269ac:	8c7fffc4 	addi	r17,r17,-1
   269b0:	817ffd04 	addi	r5,r16,-12
   269b4:	b080052e 	bgeu	r22,r2,269cc <_fwalk_reent+0x7c>
   269b8:	8080008f 	ldh	r2,2(r16)
   269bc:	9809883a 	mov	r4,r19
   269c0:	14800226 	beq	r2,r18,269cc <_fwalk_reent+0x7c>
   269c4:	a83ee83a 	callr	r21
   269c8:	b8aeb03a 	or	r23,r23,r2
   269cc:	84001a04 	addi	r16,r16,104
   269d0:	8cbff51e 	bne	r17,r18,269a8 <__alt_data_end+0xf80269a8>
   269d4:	a5000017 	ldw	r20,0(r20)
   269d8:	a03fee1e 	bne	r20,zero,26994 <__alt_data_end+0xf8026994>
   269dc:	b805883a 	mov	r2,r23
   269e0:	dfc00817 	ldw	ra,32(sp)
   269e4:	ddc00717 	ldw	r23,28(sp)
   269e8:	dd800617 	ldw	r22,24(sp)
   269ec:	dd400517 	ldw	r21,20(sp)
   269f0:	dd000417 	ldw	r20,16(sp)
   269f4:	dcc00317 	ldw	r19,12(sp)
   269f8:	dc800217 	ldw	r18,8(sp)
   269fc:	dc400117 	ldw	r17,4(sp)
   26a00:	dc000017 	ldw	r16,0(sp)
   26a04:	dec00904 	addi	sp,sp,36
   26a08:	f800283a 	ret
   26a0c:	002f883a 	mov	r23,zero
   26a10:	003ff206 	br	269dc <__alt_data_end+0xf80269dc>

00026a14 <_isatty_r>:
   26a14:	defffd04 	addi	sp,sp,-12
   26a18:	dc000015 	stw	r16,0(sp)
   26a1c:	04010034 	movhi	r16,1024
   26a20:	dc400115 	stw	r17,4(sp)
   26a24:	8407e304 	addi	r16,r16,8076
   26a28:	2023883a 	mov	r17,r4
   26a2c:	2809883a 	mov	r4,r5
   26a30:	dfc00215 	stw	ra,8(sp)
   26a34:	80000015 	stw	zero,0(r16)
   26a38:	002d8c00 	call	2d8c0 <isatty>
   26a3c:	00ffffc4 	movi	r3,-1
   26a40:	10c00526 	beq	r2,r3,26a58 <_isatty_r+0x44>
   26a44:	dfc00217 	ldw	ra,8(sp)
   26a48:	dc400117 	ldw	r17,4(sp)
   26a4c:	dc000017 	ldw	r16,0(sp)
   26a50:	dec00304 	addi	sp,sp,12
   26a54:	f800283a 	ret
   26a58:	80c00017 	ldw	r3,0(r16)
   26a5c:	183ff926 	beq	r3,zero,26a44 <__alt_data_end+0xf8026a44>
   26a60:	88c00015 	stw	r3,0(r17)
   26a64:	003ff706 	br	26a44 <__alt_data_end+0xf8026a44>

00026a68 <_setlocale_r>:
   26a68:	30001b26 	beq	r6,zero,26ad8 <_setlocale_r+0x70>
   26a6c:	01410034 	movhi	r5,1024
   26a70:	defffe04 	addi	sp,sp,-8
   26a74:	29403a04 	addi	r5,r5,232
   26a78:	3009883a 	mov	r4,r6
   26a7c:	dc000015 	stw	r16,0(sp)
   26a80:	dfc00115 	stw	ra,4(sp)
   26a84:	3021883a 	mov	r16,r6
   26a88:	00285600 	call	28560 <strcmp>
   26a8c:	1000061e 	bne	r2,zero,26aa8 <_setlocale_r+0x40>
   26a90:	00810034 	movhi	r2,1024
   26a94:	10801b04 	addi	r2,r2,108
   26a98:	dfc00117 	ldw	ra,4(sp)
   26a9c:	dc000017 	ldw	r16,0(sp)
   26aa0:	dec00204 	addi	sp,sp,8
   26aa4:	f800283a 	ret
   26aa8:	01410034 	movhi	r5,1024
   26aac:	29401b04 	addi	r5,r5,108
   26ab0:	8009883a 	mov	r4,r16
   26ab4:	00285600 	call	28560 <strcmp>
   26ab8:	103ff526 	beq	r2,zero,26a90 <__alt_data_end+0xf8026a90>
   26abc:	01410034 	movhi	r5,1024
   26ac0:	29402504 	addi	r5,r5,148
   26ac4:	8009883a 	mov	r4,r16
   26ac8:	00285600 	call	28560 <strcmp>
   26acc:	103ff026 	beq	r2,zero,26a90 <__alt_data_end+0xf8026a90>
   26ad0:	0005883a 	mov	r2,zero
   26ad4:	003ff006 	br	26a98 <__alt_data_end+0xf8026a98>
   26ad8:	00810034 	movhi	r2,1024
   26adc:	10801b04 	addi	r2,r2,108
   26ae0:	f800283a 	ret

00026ae4 <__locale_charset>:
   26ae4:	00810034 	movhi	r2,1024
   26ae8:	1082fa04 	addi	r2,r2,3048
   26aec:	f800283a 	ret

00026af0 <__locale_mb_cur_max>:
   26af0:	00810034 	movhi	r2,1024
   26af4:	1087d504 	addi	r2,r2,8020
   26af8:	10800017 	ldw	r2,0(r2)
   26afc:	f800283a 	ret

00026b00 <__locale_msgcharset>:
   26b00:	00810034 	movhi	r2,1024
   26b04:	1082f204 	addi	r2,r2,3016
   26b08:	f800283a 	ret

00026b0c <__locale_cjk_lang>:
   26b0c:	0005883a 	mov	r2,zero
   26b10:	f800283a 	ret

00026b14 <_localeconv_r>:
   26b14:	00810034 	movhi	r2,1024
   26b18:	10830204 	addi	r2,r2,3080
   26b1c:	f800283a 	ret

00026b20 <setlocale>:
   26b20:	00810034 	movhi	r2,1024
   26b24:	1087d204 	addi	r2,r2,8008
   26b28:	280d883a 	mov	r6,r5
   26b2c:	200b883a 	mov	r5,r4
   26b30:	11000017 	ldw	r4,0(r2)
   26b34:	0026a681 	jmpi	26a68 <_setlocale_r>

00026b38 <localeconv>:
   26b38:	00810034 	movhi	r2,1024
   26b3c:	10830204 	addi	r2,r2,3080
   26b40:	f800283a 	ret

00026b44 <_lseek_r>:
   26b44:	defffd04 	addi	sp,sp,-12
   26b48:	2805883a 	mov	r2,r5
   26b4c:	dc000015 	stw	r16,0(sp)
   26b50:	04010034 	movhi	r16,1024
   26b54:	dc400115 	stw	r17,4(sp)
   26b58:	300b883a 	mov	r5,r6
   26b5c:	8407e304 	addi	r16,r16,8076
   26b60:	2023883a 	mov	r17,r4
   26b64:	380d883a 	mov	r6,r7
   26b68:	1009883a 	mov	r4,r2
   26b6c:	dfc00215 	stw	ra,8(sp)
   26b70:	80000015 	stw	zero,0(r16)
   26b74:	002da8c0 	call	2da8c <lseek>
   26b78:	00ffffc4 	movi	r3,-1
   26b7c:	10c00526 	beq	r2,r3,26b94 <_lseek_r+0x50>
   26b80:	dfc00217 	ldw	ra,8(sp)
   26b84:	dc400117 	ldw	r17,4(sp)
   26b88:	dc000017 	ldw	r16,0(sp)
   26b8c:	dec00304 	addi	sp,sp,12
   26b90:	f800283a 	ret
   26b94:	80c00017 	ldw	r3,0(r16)
   26b98:	183ff926 	beq	r3,zero,26b80 <__alt_data_end+0xf8026b80>
   26b9c:	88c00015 	stw	r3,0(r17)
   26ba0:	003ff706 	br	26b80 <__alt_data_end+0xf8026b80>

00026ba4 <memchr>:
   26ba4:	208000cc 	andi	r2,r4,3
   26ba8:	280f883a 	mov	r7,r5
   26bac:	10003426 	beq	r2,zero,26c80 <memchr+0xdc>
   26bb0:	30bfffc4 	addi	r2,r6,-1
   26bb4:	30001a26 	beq	r6,zero,26c20 <memchr+0x7c>
   26bb8:	20c00003 	ldbu	r3,0(r4)
   26bbc:	29803fcc 	andi	r6,r5,255
   26bc0:	30c0051e 	bne	r6,r3,26bd8 <memchr+0x34>
   26bc4:	00001806 	br	26c28 <memchr+0x84>
   26bc8:	10001526 	beq	r2,zero,26c20 <memchr+0x7c>
   26bcc:	20c00003 	ldbu	r3,0(r4)
   26bd0:	10bfffc4 	addi	r2,r2,-1
   26bd4:	30c01426 	beq	r6,r3,26c28 <memchr+0x84>
   26bd8:	21000044 	addi	r4,r4,1
   26bdc:	20c000cc 	andi	r3,r4,3
   26be0:	183ff91e 	bne	r3,zero,26bc8 <__alt_data_end+0xf8026bc8>
   26be4:	020000c4 	movi	r8,3
   26be8:	40801136 	bltu	r8,r2,26c30 <memchr+0x8c>
   26bec:	10000c26 	beq	r2,zero,26c20 <memchr+0x7c>
   26bf0:	20c00003 	ldbu	r3,0(r4)
   26bf4:	29403fcc 	andi	r5,r5,255
   26bf8:	28c00b26 	beq	r5,r3,26c28 <memchr+0x84>
   26bfc:	20c00044 	addi	r3,r4,1
   26c00:	39803fcc 	andi	r6,r7,255
   26c04:	2089883a 	add	r4,r4,r2
   26c08:	00000306 	br	26c18 <memchr+0x74>
   26c0c:	18c00044 	addi	r3,r3,1
   26c10:	197fffc3 	ldbu	r5,-1(r3)
   26c14:	31400526 	beq	r6,r5,26c2c <memchr+0x88>
   26c18:	1805883a 	mov	r2,r3
   26c1c:	20fffb1e 	bne	r4,r3,26c0c <__alt_data_end+0xf8026c0c>
   26c20:	0005883a 	mov	r2,zero
   26c24:	f800283a 	ret
   26c28:	2005883a 	mov	r2,r4
   26c2c:	f800283a 	ret
   26c30:	28c03fcc 	andi	r3,r5,255
   26c34:	1812923a 	slli	r9,r3,8
   26c38:	02ffbff4 	movhi	r11,65279
   26c3c:	02a02074 	movhi	r10,32897
   26c40:	48d2b03a 	or	r9,r9,r3
   26c44:	4806943a 	slli	r3,r9,16
   26c48:	5affbfc4 	addi	r11,r11,-257
   26c4c:	52a02004 	addi	r10,r10,-32640
   26c50:	48d2b03a 	or	r9,r9,r3
   26c54:	20c00017 	ldw	r3,0(r4)
   26c58:	48c6f03a 	xor	r3,r9,r3
   26c5c:	1acd883a 	add	r6,r3,r11
   26c60:	00c6303a 	nor	r3,zero,r3
   26c64:	30c6703a 	and	r3,r6,r3
   26c68:	1a86703a 	and	r3,r3,r10
   26c6c:	183fe01e 	bne	r3,zero,26bf0 <__alt_data_end+0xf8026bf0>
   26c70:	10bfff04 	addi	r2,r2,-4
   26c74:	21000104 	addi	r4,r4,4
   26c78:	40bff636 	bltu	r8,r2,26c54 <__alt_data_end+0xf8026c54>
   26c7c:	003fdb06 	br	26bec <__alt_data_end+0xf8026bec>
   26c80:	3005883a 	mov	r2,r6
   26c84:	003fd706 	br	26be4 <__alt_data_end+0xf8026be4>

00026c88 <memcpy>:
   26c88:	defffd04 	addi	sp,sp,-12
   26c8c:	dfc00215 	stw	ra,8(sp)
   26c90:	dc400115 	stw	r17,4(sp)
   26c94:	dc000015 	stw	r16,0(sp)
   26c98:	00c003c4 	movi	r3,15
   26c9c:	2005883a 	mov	r2,r4
   26ca0:	1980452e 	bgeu	r3,r6,26db8 <memcpy+0x130>
   26ca4:	2906b03a 	or	r3,r5,r4
   26ca8:	18c000cc 	andi	r3,r3,3
   26cac:	1800441e 	bne	r3,zero,26dc0 <memcpy+0x138>
   26cb0:	347ffc04 	addi	r17,r6,-16
   26cb4:	8822d13a 	srli	r17,r17,4
   26cb8:	28c00104 	addi	r3,r5,4
   26cbc:	23400104 	addi	r13,r4,4
   26cc0:	8820913a 	slli	r16,r17,4
   26cc4:	2b000204 	addi	r12,r5,8
   26cc8:	22c00204 	addi	r11,r4,8
   26ccc:	84000504 	addi	r16,r16,20
   26cd0:	2a800304 	addi	r10,r5,12
   26cd4:	22400304 	addi	r9,r4,12
   26cd8:	2c21883a 	add	r16,r5,r16
   26cdc:	2811883a 	mov	r8,r5
   26ce0:	200f883a 	mov	r7,r4
   26ce4:	41000017 	ldw	r4,0(r8)
   26ce8:	1fc00017 	ldw	ra,0(r3)
   26cec:	63c00017 	ldw	r15,0(r12)
   26cf0:	39000015 	stw	r4,0(r7)
   26cf4:	53800017 	ldw	r14,0(r10)
   26cf8:	6fc00015 	stw	ra,0(r13)
   26cfc:	5bc00015 	stw	r15,0(r11)
   26d00:	4b800015 	stw	r14,0(r9)
   26d04:	18c00404 	addi	r3,r3,16
   26d08:	39c00404 	addi	r7,r7,16
   26d0c:	42000404 	addi	r8,r8,16
   26d10:	6b400404 	addi	r13,r13,16
   26d14:	63000404 	addi	r12,r12,16
   26d18:	5ac00404 	addi	r11,r11,16
   26d1c:	52800404 	addi	r10,r10,16
   26d20:	4a400404 	addi	r9,r9,16
   26d24:	1c3fef1e 	bne	r3,r16,26ce4 <__alt_data_end+0xf8026ce4>
   26d28:	89c00044 	addi	r7,r17,1
   26d2c:	380e913a 	slli	r7,r7,4
   26d30:	310003cc 	andi	r4,r6,15
   26d34:	02c000c4 	movi	r11,3
   26d38:	11c7883a 	add	r3,r2,r7
   26d3c:	29cb883a 	add	r5,r5,r7
   26d40:	5900212e 	bgeu	r11,r4,26dc8 <memcpy+0x140>
   26d44:	1813883a 	mov	r9,r3
   26d48:	2811883a 	mov	r8,r5
   26d4c:	200f883a 	mov	r7,r4
   26d50:	42800017 	ldw	r10,0(r8)
   26d54:	4a400104 	addi	r9,r9,4
   26d58:	39ffff04 	addi	r7,r7,-4
   26d5c:	4abfff15 	stw	r10,-4(r9)
   26d60:	42000104 	addi	r8,r8,4
   26d64:	59fffa36 	bltu	r11,r7,26d50 <__alt_data_end+0xf8026d50>
   26d68:	213fff04 	addi	r4,r4,-4
   26d6c:	2008d0ba 	srli	r4,r4,2
   26d70:	318000cc 	andi	r6,r6,3
   26d74:	21000044 	addi	r4,r4,1
   26d78:	2109883a 	add	r4,r4,r4
   26d7c:	2109883a 	add	r4,r4,r4
   26d80:	1907883a 	add	r3,r3,r4
   26d84:	290b883a 	add	r5,r5,r4
   26d88:	30000626 	beq	r6,zero,26da4 <memcpy+0x11c>
   26d8c:	198d883a 	add	r6,r3,r6
   26d90:	29c00003 	ldbu	r7,0(r5)
   26d94:	18c00044 	addi	r3,r3,1
   26d98:	29400044 	addi	r5,r5,1
   26d9c:	19ffffc5 	stb	r7,-1(r3)
   26da0:	19bffb1e 	bne	r3,r6,26d90 <__alt_data_end+0xf8026d90>
   26da4:	dfc00217 	ldw	ra,8(sp)
   26da8:	dc400117 	ldw	r17,4(sp)
   26dac:	dc000017 	ldw	r16,0(sp)
   26db0:	dec00304 	addi	sp,sp,12
   26db4:	f800283a 	ret
   26db8:	2007883a 	mov	r3,r4
   26dbc:	003ff206 	br	26d88 <__alt_data_end+0xf8026d88>
   26dc0:	2007883a 	mov	r3,r4
   26dc4:	003ff106 	br	26d8c <__alt_data_end+0xf8026d8c>
   26dc8:	200d883a 	mov	r6,r4
   26dcc:	003fee06 	br	26d88 <__alt_data_end+0xf8026d88>

00026dd0 <memmove>:
   26dd0:	2005883a 	mov	r2,r4
   26dd4:	29000b2e 	bgeu	r5,r4,26e04 <memmove+0x34>
   26dd8:	298f883a 	add	r7,r5,r6
   26ddc:	21c0092e 	bgeu	r4,r7,26e04 <memmove+0x34>
   26de0:	2187883a 	add	r3,r4,r6
   26de4:	198bc83a 	sub	r5,r3,r6
   26de8:	30004826 	beq	r6,zero,26f0c <memmove+0x13c>
   26dec:	39ffffc4 	addi	r7,r7,-1
   26df0:	39000003 	ldbu	r4,0(r7)
   26df4:	18ffffc4 	addi	r3,r3,-1
   26df8:	19000005 	stb	r4,0(r3)
   26dfc:	28fffb1e 	bne	r5,r3,26dec <__alt_data_end+0xf8026dec>
   26e00:	f800283a 	ret
   26e04:	00c003c4 	movi	r3,15
   26e08:	1980412e 	bgeu	r3,r6,26f10 <memmove+0x140>
   26e0c:	2886b03a 	or	r3,r5,r2
   26e10:	18c000cc 	andi	r3,r3,3
   26e14:	1800401e 	bne	r3,zero,26f18 <memmove+0x148>
   26e18:	33fffc04 	addi	r15,r6,-16
   26e1c:	781ed13a 	srli	r15,r15,4
   26e20:	28c00104 	addi	r3,r5,4
   26e24:	13400104 	addi	r13,r2,4
   26e28:	781c913a 	slli	r14,r15,4
   26e2c:	2b000204 	addi	r12,r5,8
   26e30:	12c00204 	addi	r11,r2,8
   26e34:	73800504 	addi	r14,r14,20
   26e38:	2a800304 	addi	r10,r5,12
   26e3c:	12400304 	addi	r9,r2,12
   26e40:	2b9d883a 	add	r14,r5,r14
   26e44:	2811883a 	mov	r8,r5
   26e48:	100f883a 	mov	r7,r2
   26e4c:	41000017 	ldw	r4,0(r8)
   26e50:	39c00404 	addi	r7,r7,16
   26e54:	18c00404 	addi	r3,r3,16
   26e58:	393ffc15 	stw	r4,-16(r7)
   26e5c:	193ffc17 	ldw	r4,-16(r3)
   26e60:	6b400404 	addi	r13,r13,16
   26e64:	5ac00404 	addi	r11,r11,16
   26e68:	693ffc15 	stw	r4,-16(r13)
   26e6c:	61000017 	ldw	r4,0(r12)
   26e70:	4a400404 	addi	r9,r9,16
   26e74:	42000404 	addi	r8,r8,16
   26e78:	593ffc15 	stw	r4,-16(r11)
   26e7c:	51000017 	ldw	r4,0(r10)
   26e80:	63000404 	addi	r12,r12,16
   26e84:	52800404 	addi	r10,r10,16
   26e88:	493ffc15 	stw	r4,-16(r9)
   26e8c:	1bbfef1e 	bne	r3,r14,26e4c <__alt_data_end+0xf8026e4c>
   26e90:	79000044 	addi	r4,r15,1
   26e94:	2008913a 	slli	r4,r4,4
   26e98:	328003cc 	andi	r10,r6,15
   26e9c:	02c000c4 	movi	r11,3
   26ea0:	1107883a 	add	r3,r2,r4
   26ea4:	290b883a 	add	r5,r5,r4
   26ea8:	5a801e2e 	bgeu	r11,r10,26f24 <memmove+0x154>
   26eac:	1813883a 	mov	r9,r3
   26eb0:	2811883a 	mov	r8,r5
   26eb4:	500f883a 	mov	r7,r10
   26eb8:	41000017 	ldw	r4,0(r8)
   26ebc:	4a400104 	addi	r9,r9,4
   26ec0:	39ffff04 	addi	r7,r7,-4
   26ec4:	493fff15 	stw	r4,-4(r9)
   26ec8:	42000104 	addi	r8,r8,4
   26ecc:	59fffa36 	bltu	r11,r7,26eb8 <__alt_data_end+0xf8026eb8>
   26ed0:	513fff04 	addi	r4,r10,-4
   26ed4:	2008d0ba 	srli	r4,r4,2
   26ed8:	318000cc 	andi	r6,r6,3
   26edc:	21000044 	addi	r4,r4,1
   26ee0:	2109883a 	add	r4,r4,r4
   26ee4:	2109883a 	add	r4,r4,r4
   26ee8:	1907883a 	add	r3,r3,r4
   26eec:	290b883a 	add	r5,r5,r4
   26ef0:	30000b26 	beq	r6,zero,26f20 <memmove+0x150>
   26ef4:	198d883a 	add	r6,r3,r6
   26ef8:	29c00003 	ldbu	r7,0(r5)
   26efc:	18c00044 	addi	r3,r3,1
   26f00:	29400044 	addi	r5,r5,1
   26f04:	19ffffc5 	stb	r7,-1(r3)
   26f08:	19bffb1e 	bne	r3,r6,26ef8 <__alt_data_end+0xf8026ef8>
   26f0c:	f800283a 	ret
   26f10:	1007883a 	mov	r3,r2
   26f14:	003ff606 	br	26ef0 <__alt_data_end+0xf8026ef0>
   26f18:	1007883a 	mov	r3,r2
   26f1c:	003ff506 	br	26ef4 <__alt_data_end+0xf8026ef4>
   26f20:	f800283a 	ret
   26f24:	500d883a 	mov	r6,r10
   26f28:	003ff106 	br	26ef0 <__alt_data_end+0xf8026ef0>

00026f2c <_Balloc>:
   26f2c:	20801317 	ldw	r2,76(r4)
   26f30:	defffc04 	addi	sp,sp,-16
   26f34:	dc400115 	stw	r17,4(sp)
   26f38:	dc000015 	stw	r16,0(sp)
   26f3c:	dfc00315 	stw	ra,12(sp)
   26f40:	dc800215 	stw	r18,8(sp)
   26f44:	2023883a 	mov	r17,r4
   26f48:	2821883a 	mov	r16,r5
   26f4c:	10000f26 	beq	r2,zero,26f8c <_Balloc+0x60>
   26f50:	8407883a 	add	r3,r16,r16
   26f54:	18c7883a 	add	r3,r3,r3
   26f58:	10c7883a 	add	r3,r2,r3
   26f5c:	18800017 	ldw	r2,0(r3)
   26f60:	10001126 	beq	r2,zero,26fa8 <_Balloc+0x7c>
   26f64:	11000017 	ldw	r4,0(r2)
   26f68:	19000015 	stw	r4,0(r3)
   26f6c:	10000415 	stw	zero,16(r2)
   26f70:	10000315 	stw	zero,12(r2)
   26f74:	dfc00317 	ldw	ra,12(sp)
   26f78:	dc800217 	ldw	r18,8(sp)
   26f7c:	dc400117 	ldw	r17,4(sp)
   26f80:	dc000017 	ldw	r16,0(sp)
   26f84:	dec00404 	addi	sp,sp,16
   26f88:	f800283a 	ret
   26f8c:	01800844 	movi	r6,33
   26f90:	01400104 	movi	r5,4
   26f94:	0029c840 	call	29c84 <_calloc_r>
   26f98:	88801315 	stw	r2,76(r17)
   26f9c:	103fec1e 	bne	r2,zero,26f50 <__alt_data_end+0xf8026f50>
   26fa0:	0005883a 	mov	r2,zero
   26fa4:	003ff306 	br	26f74 <__alt_data_end+0xf8026f74>
   26fa8:	01400044 	movi	r5,1
   26fac:	2c24983a 	sll	r18,r5,r16
   26fb0:	8809883a 	mov	r4,r17
   26fb4:	91800144 	addi	r6,r18,5
   26fb8:	318d883a 	add	r6,r6,r6
   26fbc:	318d883a 	add	r6,r6,r6
   26fc0:	0029c840 	call	29c84 <_calloc_r>
   26fc4:	103ff626 	beq	r2,zero,26fa0 <__alt_data_end+0xf8026fa0>
   26fc8:	14000115 	stw	r16,4(r2)
   26fcc:	14800215 	stw	r18,8(r2)
   26fd0:	003fe606 	br	26f6c <__alt_data_end+0xf8026f6c>

00026fd4 <_Bfree>:
   26fd4:	28000826 	beq	r5,zero,26ff8 <_Bfree+0x24>
   26fd8:	28c00117 	ldw	r3,4(r5)
   26fdc:	20801317 	ldw	r2,76(r4)
   26fe0:	18c7883a 	add	r3,r3,r3
   26fe4:	18c7883a 	add	r3,r3,r3
   26fe8:	10c5883a 	add	r2,r2,r3
   26fec:	10c00017 	ldw	r3,0(r2)
   26ff0:	28c00015 	stw	r3,0(r5)
   26ff4:	11400015 	stw	r5,0(r2)
   26ff8:	f800283a 	ret

00026ffc <__multadd>:
   26ffc:	defffa04 	addi	sp,sp,-24
   27000:	dc800315 	stw	r18,12(sp)
   27004:	dc400215 	stw	r17,8(sp)
   27008:	dc000115 	stw	r16,4(sp)
   2700c:	2823883a 	mov	r17,r5
   27010:	2c000417 	ldw	r16,16(r5)
   27014:	dfc00515 	stw	ra,20(sp)
   27018:	dcc00415 	stw	r19,16(sp)
   2701c:	2025883a 	mov	r18,r4
   27020:	29400504 	addi	r5,r5,20
   27024:	0011883a 	mov	r8,zero
   27028:	28c00017 	ldw	r3,0(r5)
   2702c:	29400104 	addi	r5,r5,4
   27030:	42000044 	addi	r8,r8,1
   27034:	18bfffcc 	andi	r2,r3,65535
   27038:	1185383a 	mul	r2,r2,r6
   2703c:	1806d43a 	srli	r3,r3,16
   27040:	11cf883a 	add	r7,r2,r7
   27044:	3808d43a 	srli	r4,r7,16
   27048:	1987383a 	mul	r3,r3,r6
   2704c:	38bfffcc 	andi	r2,r7,65535
   27050:	1907883a 	add	r3,r3,r4
   27054:	1808943a 	slli	r4,r3,16
   27058:	180ed43a 	srli	r7,r3,16
   2705c:	2085883a 	add	r2,r4,r2
   27060:	28bfff15 	stw	r2,-4(r5)
   27064:	443ff016 	blt	r8,r16,27028 <__alt_data_end+0xf8027028>
   27068:	38000926 	beq	r7,zero,27090 <__multadd+0x94>
   2706c:	88800217 	ldw	r2,8(r17)
   27070:	80800f0e 	bge	r16,r2,270b0 <__multadd+0xb4>
   27074:	80800144 	addi	r2,r16,5
   27078:	1085883a 	add	r2,r2,r2
   2707c:	1085883a 	add	r2,r2,r2
   27080:	8885883a 	add	r2,r17,r2
   27084:	11c00015 	stw	r7,0(r2)
   27088:	84000044 	addi	r16,r16,1
   2708c:	8c000415 	stw	r16,16(r17)
   27090:	8805883a 	mov	r2,r17
   27094:	dfc00517 	ldw	ra,20(sp)
   27098:	dcc00417 	ldw	r19,16(sp)
   2709c:	dc800317 	ldw	r18,12(sp)
   270a0:	dc400217 	ldw	r17,8(sp)
   270a4:	dc000117 	ldw	r16,4(sp)
   270a8:	dec00604 	addi	sp,sp,24
   270ac:	f800283a 	ret
   270b0:	89400117 	ldw	r5,4(r17)
   270b4:	9009883a 	mov	r4,r18
   270b8:	d9c00015 	stw	r7,0(sp)
   270bc:	29400044 	addi	r5,r5,1
   270c0:	0026f2c0 	call	26f2c <_Balloc>
   270c4:	89800417 	ldw	r6,16(r17)
   270c8:	89400304 	addi	r5,r17,12
   270cc:	11000304 	addi	r4,r2,12
   270d0:	31800084 	addi	r6,r6,2
   270d4:	318d883a 	add	r6,r6,r6
   270d8:	318d883a 	add	r6,r6,r6
   270dc:	1027883a 	mov	r19,r2
   270e0:	0026c880 	call	26c88 <memcpy>
   270e4:	d9c00017 	ldw	r7,0(sp)
   270e8:	88000a26 	beq	r17,zero,27114 <__multadd+0x118>
   270ec:	88c00117 	ldw	r3,4(r17)
   270f0:	90801317 	ldw	r2,76(r18)
   270f4:	18c7883a 	add	r3,r3,r3
   270f8:	18c7883a 	add	r3,r3,r3
   270fc:	10c5883a 	add	r2,r2,r3
   27100:	10c00017 	ldw	r3,0(r2)
   27104:	88c00015 	stw	r3,0(r17)
   27108:	14400015 	stw	r17,0(r2)
   2710c:	9823883a 	mov	r17,r19
   27110:	003fd806 	br	27074 <__alt_data_end+0xf8027074>
   27114:	9823883a 	mov	r17,r19
   27118:	003fd606 	br	27074 <__alt_data_end+0xf8027074>

0002711c <__s2b>:
   2711c:	defff904 	addi	sp,sp,-28
   27120:	dc400115 	stw	r17,4(sp)
   27124:	dc000015 	stw	r16,0(sp)
   27128:	2023883a 	mov	r17,r4
   2712c:	2821883a 	mov	r16,r5
   27130:	39000204 	addi	r4,r7,8
   27134:	01400244 	movi	r5,9
   27138:	dcc00315 	stw	r19,12(sp)
   2713c:	dc800215 	stw	r18,8(sp)
   27140:	dfc00615 	stw	ra,24(sp)
   27144:	dd400515 	stw	r21,20(sp)
   27148:	dd000415 	stw	r20,16(sp)
   2714c:	3825883a 	mov	r18,r7
   27150:	3027883a 	mov	r19,r6
   27154:	002ae440 	call	2ae44 <__divsi3>
   27158:	00c00044 	movi	r3,1
   2715c:	000b883a 	mov	r5,zero
   27160:	1880030e 	bge	r3,r2,27170 <__s2b+0x54>
   27164:	18c7883a 	add	r3,r3,r3
   27168:	29400044 	addi	r5,r5,1
   2716c:	18bffd16 	blt	r3,r2,27164 <__alt_data_end+0xf8027164>
   27170:	8809883a 	mov	r4,r17
   27174:	0026f2c0 	call	26f2c <_Balloc>
   27178:	d8c00717 	ldw	r3,28(sp)
   2717c:	10c00515 	stw	r3,20(r2)
   27180:	00c00044 	movi	r3,1
   27184:	10c00415 	stw	r3,16(r2)
   27188:	00c00244 	movi	r3,9
   2718c:	1cc0210e 	bge	r3,r19,27214 <__s2b+0xf8>
   27190:	80eb883a 	add	r21,r16,r3
   27194:	a829883a 	mov	r20,r21
   27198:	84e1883a 	add	r16,r16,r19
   2719c:	a1c00007 	ldb	r7,0(r20)
   271a0:	01800284 	movi	r6,10
   271a4:	a5000044 	addi	r20,r20,1
   271a8:	100b883a 	mov	r5,r2
   271ac:	39fff404 	addi	r7,r7,-48
   271b0:	8809883a 	mov	r4,r17
   271b4:	0026ffc0 	call	26ffc <__multadd>
   271b8:	a43ff81e 	bne	r20,r16,2719c <__alt_data_end+0xf802719c>
   271bc:	ace1883a 	add	r16,r21,r19
   271c0:	843ffe04 	addi	r16,r16,-8
   271c4:	9c800a0e 	bge	r19,r18,271f0 <__s2b+0xd4>
   271c8:	94e5c83a 	sub	r18,r18,r19
   271cc:	84a5883a 	add	r18,r16,r18
   271d0:	81c00007 	ldb	r7,0(r16)
   271d4:	01800284 	movi	r6,10
   271d8:	84000044 	addi	r16,r16,1
   271dc:	100b883a 	mov	r5,r2
   271e0:	39fff404 	addi	r7,r7,-48
   271e4:	8809883a 	mov	r4,r17
   271e8:	0026ffc0 	call	26ffc <__multadd>
   271ec:	84bff81e 	bne	r16,r18,271d0 <__alt_data_end+0xf80271d0>
   271f0:	dfc00617 	ldw	ra,24(sp)
   271f4:	dd400517 	ldw	r21,20(sp)
   271f8:	dd000417 	ldw	r20,16(sp)
   271fc:	dcc00317 	ldw	r19,12(sp)
   27200:	dc800217 	ldw	r18,8(sp)
   27204:	dc400117 	ldw	r17,4(sp)
   27208:	dc000017 	ldw	r16,0(sp)
   2720c:	dec00704 	addi	sp,sp,28
   27210:	f800283a 	ret
   27214:	84000284 	addi	r16,r16,10
   27218:	1827883a 	mov	r19,r3
   2721c:	003fe906 	br	271c4 <__alt_data_end+0xf80271c4>

00027220 <__hi0bits>:
   27220:	20bfffec 	andhi	r2,r4,65535
   27224:	1000141e 	bne	r2,zero,27278 <__hi0bits+0x58>
   27228:	2008943a 	slli	r4,r4,16
   2722c:	00800404 	movi	r2,16
   27230:	20ffc02c 	andhi	r3,r4,65280
   27234:	1800021e 	bne	r3,zero,27240 <__hi0bits+0x20>
   27238:	2008923a 	slli	r4,r4,8
   2723c:	10800204 	addi	r2,r2,8
   27240:	20fc002c 	andhi	r3,r4,61440
   27244:	1800021e 	bne	r3,zero,27250 <__hi0bits+0x30>
   27248:	2008913a 	slli	r4,r4,4
   2724c:	10800104 	addi	r2,r2,4
   27250:	20f0002c 	andhi	r3,r4,49152
   27254:	1800031e 	bne	r3,zero,27264 <__hi0bits+0x44>
   27258:	2109883a 	add	r4,r4,r4
   2725c:	10800084 	addi	r2,r2,2
   27260:	2109883a 	add	r4,r4,r4
   27264:	20000316 	blt	r4,zero,27274 <__hi0bits+0x54>
   27268:	2110002c 	andhi	r4,r4,16384
   2726c:	2000041e 	bne	r4,zero,27280 <__hi0bits+0x60>
   27270:	00800804 	movi	r2,32
   27274:	f800283a 	ret
   27278:	0005883a 	mov	r2,zero
   2727c:	003fec06 	br	27230 <__alt_data_end+0xf8027230>
   27280:	10800044 	addi	r2,r2,1
   27284:	f800283a 	ret

00027288 <__lo0bits>:
   27288:	20c00017 	ldw	r3,0(r4)
   2728c:	188001cc 	andi	r2,r3,7
   27290:	10000826 	beq	r2,zero,272b4 <__lo0bits+0x2c>
   27294:	1880004c 	andi	r2,r3,1
   27298:	1000211e 	bne	r2,zero,27320 <__lo0bits+0x98>
   2729c:	1880008c 	andi	r2,r3,2
   272a0:	1000211e 	bne	r2,zero,27328 <__lo0bits+0xa0>
   272a4:	1806d0ba 	srli	r3,r3,2
   272a8:	00800084 	movi	r2,2
   272ac:	20c00015 	stw	r3,0(r4)
   272b0:	f800283a 	ret
   272b4:	18bfffcc 	andi	r2,r3,65535
   272b8:	10001326 	beq	r2,zero,27308 <__lo0bits+0x80>
   272bc:	0005883a 	mov	r2,zero
   272c0:	19403fcc 	andi	r5,r3,255
   272c4:	2800021e 	bne	r5,zero,272d0 <__lo0bits+0x48>
   272c8:	1806d23a 	srli	r3,r3,8
   272cc:	10800204 	addi	r2,r2,8
   272d0:	194003cc 	andi	r5,r3,15
   272d4:	2800021e 	bne	r5,zero,272e0 <__lo0bits+0x58>
   272d8:	1806d13a 	srli	r3,r3,4
   272dc:	10800104 	addi	r2,r2,4
   272e0:	194000cc 	andi	r5,r3,3
   272e4:	2800021e 	bne	r5,zero,272f0 <__lo0bits+0x68>
   272e8:	1806d0ba 	srli	r3,r3,2
   272ec:	10800084 	addi	r2,r2,2
   272f0:	1940004c 	andi	r5,r3,1
   272f4:	2800081e 	bne	r5,zero,27318 <__lo0bits+0x90>
   272f8:	1806d07a 	srli	r3,r3,1
   272fc:	1800051e 	bne	r3,zero,27314 <__lo0bits+0x8c>
   27300:	00800804 	movi	r2,32
   27304:	f800283a 	ret
   27308:	1806d43a 	srli	r3,r3,16
   2730c:	00800404 	movi	r2,16
   27310:	003feb06 	br	272c0 <__alt_data_end+0xf80272c0>
   27314:	10800044 	addi	r2,r2,1
   27318:	20c00015 	stw	r3,0(r4)
   2731c:	f800283a 	ret
   27320:	0005883a 	mov	r2,zero
   27324:	f800283a 	ret
   27328:	1806d07a 	srli	r3,r3,1
   2732c:	00800044 	movi	r2,1
   27330:	20c00015 	stw	r3,0(r4)
   27334:	f800283a 	ret

00027338 <__i2b>:
   27338:	defffd04 	addi	sp,sp,-12
   2733c:	dc000015 	stw	r16,0(sp)
   27340:	04000044 	movi	r16,1
   27344:	dc400115 	stw	r17,4(sp)
   27348:	2823883a 	mov	r17,r5
   2734c:	800b883a 	mov	r5,r16
   27350:	dfc00215 	stw	ra,8(sp)
   27354:	0026f2c0 	call	26f2c <_Balloc>
   27358:	14400515 	stw	r17,20(r2)
   2735c:	14000415 	stw	r16,16(r2)
   27360:	dfc00217 	ldw	ra,8(sp)
   27364:	dc400117 	ldw	r17,4(sp)
   27368:	dc000017 	ldw	r16,0(sp)
   2736c:	dec00304 	addi	sp,sp,12
   27370:	f800283a 	ret

00027374 <__multiply>:
   27374:	defffa04 	addi	sp,sp,-24
   27378:	dcc00315 	stw	r19,12(sp)
   2737c:	dc800215 	stw	r18,8(sp)
   27380:	34c00417 	ldw	r19,16(r6)
   27384:	2c800417 	ldw	r18,16(r5)
   27388:	dd000415 	stw	r20,16(sp)
   2738c:	dc400115 	stw	r17,4(sp)
   27390:	dfc00515 	stw	ra,20(sp)
   27394:	dc000015 	stw	r16,0(sp)
   27398:	2829883a 	mov	r20,r5
   2739c:	3023883a 	mov	r17,r6
   273a0:	94c0050e 	bge	r18,r19,273b8 <__multiply+0x44>
   273a4:	9007883a 	mov	r3,r18
   273a8:	3029883a 	mov	r20,r6
   273ac:	9825883a 	mov	r18,r19
   273b0:	2823883a 	mov	r17,r5
   273b4:	1827883a 	mov	r19,r3
   273b8:	a0800217 	ldw	r2,8(r20)
   273bc:	94e1883a 	add	r16,r18,r19
   273c0:	a1400117 	ldw	r5,4(r20)
   273c4:	1400010e 	bge	r2,r16,273cc <__multiply+0x58>
   273c8:	29400044 	addi	r5,r5,1
   273cc:	0026f2c0 	call	26f2c <_Balloc>
   273d0:	8415883a 	add	r10,r16,r16
   273d4:	12c00504 	addi	r11,r2,20
   273d8:	5295883a 	add	r10,r10,r10
   273dc:	5a95883a 	add	r10,r11,r10
   273e0:	5807883a 	mov	r3,r11
   273e4:	5a80032e 	bgeu	r11,r10,273f4 <__multiply+0x80>
   273e8:	18000015 	stw	zero,0(r3)
   273ec:	18c00104 	addi	r3,r3,4
   273f0:	1abffd36 	bltu	r3,r10,273e8 <__alt_data_end+0xf80273e8>
   273f4:	9ce7883a 	add	r19,r19,r19
   273f8:	94a5883a 	add	r18,r18,r18
   273fc:	89800504 	addi	r6,r17,20
   27400:	9ce7883a 	add	r19,r19,r19
   27404:	a3400504 	addi	r13,r20,20
   27408:	94a5883a 	add	r18,r18,r18
   2740c:	34d9883a 	add	r12,r6,r19
   27410:	6c93883a 	add	r9,r13,r18
   27414:	3300422e 	bgeu	r6,r12,27520 <__multiply+0x1ac>
   27418:	37c00017 	ldw	ra,0(r6)
   2741c:	fbffffcc 	andi	r15,ra,65535
   27420:	78001b26 	beq	r15,zero,27490 <__multiply+0x11c>
   27424:	5811883a 	mov	r8,r11
   27428:	681d883a 	mov	r14,r13
   2742c:	000f883a 	mov	r7,zero
   27430:	71000017 	ldw	r4,0(r14)
   27434:	40c00017 	ldw	r3,0(r8)
   27438:	73800104 	addi	r14,r14,4
   2743c:	217fffcc 	andi	r5,r4,65535
   27440:	2bcb383a 	mul	r5,r5,r15
   27444:	2008d43a 	srli	r4,r4,16
   27448:	1c7fffcc 	andi	r17,r3,65535
   2744c:	2c4b883a 	add	r5,r5,r17
   27450:	29cb883a 	add	r5,r5,r7
   27454:	23c9383a 	mul	r4,r4,r15
   27458:	1806d43a 	srli	r3,r3,16
   2745c:	280ed43a 	srli	r7,r5,16
   27460:	297fffcc 	andi	r5,r5,65535
   27464:	20c7883a 	add	r3,r4,r3
   27468:	19c7883a 	add	r3,r3,r7
   2746c:	1808943a 	slli	r4,r3,16
   27470:	4023883a 	mov	r17,r8
   27474:	180ed43a 	srli	r7,r3,16
   27478:	214ab03a 	or	r5,r4,r5
   2747c:	41400015 	stw	r5,0(r8)
   27480:	42000104 	addi	r8,r8,4
   27484:	727fea36 	bltu	r14,r9,27430 <__alt_data_end+0xf8027430>
   27488:	89c00115 	stw	r7,4(r17)
   2748c:	37c00017 	ldw	ra,0(r6)
   27490:	f83ed43a 	srli	ra,ra,16
   27494:	f8001f26 	beq	ra,zero,27514 <__multiply+0x1a0>
   27498:	58c00017 	ldw	r3,0(r11)
   2749c:	681d883a 	mov	r14,r13
   274a0:	581f883a 	mov	r15,r11
   274a4:	1811883a 	mov	r8,r3
   274a8:	5825883a 	mov	r18,r11
   274ac:	000f883a 	mov	r7,zero
   274b0:	00000106 	br	274b8 <__multiply+0x144>
   274b4:	8825883a 	mov	r18,r17
   274b8:	7140000b 	ldhu	r5,0(r14)
   274bc:	4010d43a 	srli	r8,r8,16
   274c0:	193fffcc 	andi	r4,r3,65535
   274c4:	2fcb383a 	mul	r5,r5,ra
   274c8:	7bc00104 	addi	r15,r15,4
   274cc:	73800104 	addi	r14,r14,4
   274d0:	2a0b883a 	add	r5,r5,r8
   274d4:	29cb883a 	add	r5,r5,r7
   274d8:	2806943a 	slli	r3,r5,16
   274dc:	94400104 	addi	r17,r18,4
   274e0:	280ad43a 	srli	r5,r5,16
   274e4:	1908b03a 	or	r4,r3,r4
   274e8:	793fff15 	stw	r4,-4(r15)
   274ec:	70ffff17 	ldw	r3,-4(r14)
   274f0:	8a000017 	ldw	r8,0(r17)
   274f4:	1806d43a 	srli	r3,r3,16
   274f8:	413fffcc 	andi	r4,r8,65535
   274fc:	1fc7383a 	mul	r3,r3,ra
   27500:	1907883a 	add	r3,r3,r4
   27504:	1947883a 	add	r3,r3,r5
   27508:	180ed43a 	srli	r7,r3,16
   2750c:	727fe936 	bltu	r14,r9,274b4 <__alt_data_end+0xf80274b4>
   27510:	90c00115 	stw	r3,4(r18)
   27514:	31800104 	addi	r6,r6,4
   27518:	5ac00104 	addi	r11,r11,4
   2751c:	333fbe36 	bltu	r6,r12,27418 <__alt_data_end+0xf8027418>
   27520:	0400090e 	bge	zero,r16,27548 <__multiply+0x1d4>
   27524:	50ffff17 	ldw	r3,-4(r10)
   27528:	52bfff04 	addi	r10,r10,-4
   2752c:	18000326 	beq	r3,zero,2753c <__multiply+0x1c8>
   27530:	00000506 	br	27548 <__multiply+0x1d4>
   27534:	50c00017 	ldw	r3,0(r10)
   27538:	1800031e 	bne	r3,zero,27548 <__multiply+0x1d4>
   2753c:	843fffc4 	addi	r16,r16,-1
   27540:	52bfff04 	addi	r10,r10,-4
   27544:	803ffb1e 	bne	r16,zero,27534 <__alt_data_end+0xf8027534>
   27548:	14000415 	stw	r16,16(r2)
   2754c:	dfc00517 	ldw	ra,20(sp)
   27550:	dd000417 	ldw	r20,16(sp)
   27554:	dcc00317 	ldw	r19,12(sp)
   27558:	dc800217 	ldw	r18,8(sp)
   2755c:	dc400117 	ldw	r17,4(sp)
   27560:	dc000017 	ldw	r16,0(sp)
   27564:	dec00604 	addi	sp,sp,24
   27568:	f800283a 	ret

0002756c <__pow5mult>:
   2756c:	defffa04 	addi	sp,sp,-24
   27570:	dcc00315 	stw	r19,12(sp)
   27574:	dc000015 	stw	r16,0(sp)
   27578:	dfc00515 	stw	ra,20(sp)
   2757c:	dd000415 	stw	r20,16(sp)
   27580:	dc800215 	stw	r18,8(sp)
   27584:	dc400115 	stw	r17,4(sp)
   27588:	308000cc 	andi	r2,r6,3
   2758c:	3021883a 	mov	r16,r6
   27590:	2027883a 	mov	r19,r4
   27594:	10002f1e 	bne	r2,zero,27654 <__pow5mult+0xe8>
   27598:	2825883a 	mov	r18,r5
   2759c:	8021d0ba 	srai	r16,r16,2
   275a0:	80001a26 	beq	r16,zero,2760c <__pow5mult+0xa0>
   275a4:	9c401217 	ldw	r17,72(r19)
   275a8:	8800061e 	bne	r17,zero,275c4 <__pow5mult+0x58>
   275ac:	00003406 	br	27680 <__pow5mult+0x114>
   275b0:	8021d07a 	srai	r16,r16,1
   275b4:	80001526 	beq	r16,zero,2760c <__pow5mult+0xa0>
   275b8:	88800017 	ldw	r2,0(r17)
   275bc:	10001c26 	beq	r2,zero,27630 <__pow5mult+0xc4>
   275c0:	1023883a 	mov	r17,r2
   275c4:	8080004c 	andi	r2,r16,1
   275c8:	103ff926 	beq	r2,zero,275b0 <__alt_data_end+0xf80275b0>
   275cc:	880d883a 	mov	r6,r17
   275d0:	900b883a 	mov	r5,r18
   275d4:	9809883a 	mov	r4,r19
   275d8:	00273740 	call	27374 <__multiply>
   275dc:	90001b26 	beq	r18,zero,2764c <__pow5mult+0xe0>
   275e0:	91000117 	ldw	r4,4(r18)
   275e4:	98c01317 	ldw	r3,76(r19)
   275e8:	8021d07a 	srai	r16,r16,1
   275ec:	2109883a 	add	r4,r4,r4
   275f0:	2109883a 	add	r4,r4,r4
   275f4:	1907883a 	add	r3,r3,r4
   275f8:	19000017 	ldw	r4,0(r3)
   275fc:	91000015 	stw	r4,0(r18)
   27600:	1c800015 	stw	r18,0(r3)
   27604:	1025883a 	mov	r18,r2
   27608:	803feb1e 	bne	r16,zero,275b8 <__alt_data_end+0xf80275b8>
   2760c:	9005883a 	mov	r2,r18
   27610:	dfc00517 	ldw	ra,20(sp)
   27614:	dd000417 	ldw	r20,16(sp)
   27618:	dcc00317 	ldw	r19,12(sp)
   2761c:	dc800217 	ldw	r18,8(sp)
   27620:	dc400117 	ldw	r17,4(sp)
   27624:	dc000017 	ldw	r16,0(sp)
   27628:	dec00604 	addi	sp,sp,24
   2762c:	f800283a 	ret
   27630:	880d883a 	mov	r6,r17
   27634:	880b883a 	mov	r5,r17
   27638:	9809883a 	mov	r4,r19
   2763c:	00273740 	call	27374 <__multiply>
   27640:	88800015 	stw	r2,0(r17)
   27644:	10000015 	stw	zero,0(r2)
   27648:	003fdd06 	br	275c0 <__alt_data_end+0xf80275c0>
   2764c:	1025883a 	mov	r18,r2
   27650:	003fd706 	br	275b0 <__alt_data_end+0xf80275b0>
   27654:	10bfffc4 	addi	r2,r2,-1
   27658:	1085883a 	add	r2,r2,r2
   2765c:	00c10034 	movhi	r3,1024
   27660:	18c03d04 	addi	r3,r3,244
   27664:	1085883a 	add	r2,r2,r2
   27668:	1885883a 	add	r2,r3,r2
   2766c:	11800017 	ldw	r6,0(r2)
   27670:	000f883a 	mov	r7,zero
   27674:	0026ffc0 	call	26ffc <__multadd>
   27678:	1025883a 	mov	r18,r2
   2767c:	003fc706 	br	2759c <__alt_data_end+0xf802759c>
   27680:	05000044 	movi	r20,1
   27684:	a00b883a 	mov	r5,r20
   27688:	9809883a 	mov	r4,r19
   2768c:	0026f2c0 	call	26f2c <_Balloc>
   27690:	1023883a 	mov	r17,r2
   27694:	00809c44 	movi	r2,625
   27698:	88800515 	stw	r2,20(r17)
   2769c:	8d000415 	stw	r20,16(r17)
   276a0:	9c401215 	stw	r17,72(r19)
   276a4:	88000015 	stw	zero,0(r17)
   276a8:	003fc606 	br	275c4 <__alt_data_end+0xf80275c4>

000276ac <__lshift>:
   276ac:	defff904 	addi	sp,sp,-28
   276b0:	dd400515 	stw	r21,20(sp)
   276b4:	dcc00315 	stw	r19,12(sp)
   276b8:	302bd17a 	srai	r21,r6,5
   276bc:	2cc00417 	ldw	r19,16(r5)
   276c0:	28800217 	ldw	r2,8(r5)
   276c4:	dd000415 	stw	r20,16(sp)
   276c8:	ace7883a 	add	r19,r21,r19
   276cc:	dc800215 	stw	r18,8(sp)
   276d0:	dc400115 	stw	r17,4(sp)
   276d4:	dc000015 	stw	r16,0(sp)
   276d8:	dfc00615 	stw	ra,24(sp)
   276dc:	9c000044 	addi	r16,r19,1
   276e0:	2823883a 	mov	r17,r5
   276e4:	3029883a 	mov	r20,r6
   276e8:	2025883a 	mov	r18,r4
   276ec:	29400117 	ldw	r5,4(r5)
   276f0:	1400030e 	bge	r2,r16,27700 <__lshift+0x54>
   276f4:	1085883a 	add	r2,r2,r2
   276f8:	29400044 	addi	r5,r5,1
   276fc:	143ffd16 	blt	r2,r16,276f4 <__alt_data_end+0xf80276f4>
   27700:	9009883a 	mov	r4,r18
   27704:	0026f2c0 	call	26f2c <_Balloc>
   27708:	10c00504 	addi	r3,r2,20
   2770c:	0540070e 	bge	zero,r21,2772c <__lshift+0x80>
   27710:	ad6b883a 	add	r21,r21,r21
   27714:	ad6b883a 	add	r21,r21,r21
   27718:	1809883a 	mov	r4,r3
   2771c:	1d47883a 	add	r3,r3,r21
   27720:	20000015 	stw	zero,0(r4)
   27724:	21000104 	addi	r4,r4,4
   27728:	193ffd1e 	bne	r3,r4,27720 <__alt_data_end+0xf8027720>
   2772c:	8a000417 	ldw	r8,16(r17)
   27730:	89000504 	addi	r4,r17,20
   27734:	a18007cc 	andi	r6,r20,31
   27738:	4211883a 	add	r8,r8,r8
   2773c:	4211883a 	add	r8,r8,r8
   27740:	2211883a 	add	r8,r4,r8
   27744:	30002326 	beq	r6,zero,277d4 <__lshift+0x128>
   27748:	02400804 	movi	r9,32
   2774c:	4993c83a 	sub	r9,r9,r6
   27750:	000b883a 	mov	r5,zero
   27754:	21c00017 	ldw	r7,0(r4)
   27758:	1815883a 	mov	r10,r3
   2775c:	18c00104 	addi	r3,r3,4
   27760:	398e983a 	sll	r7,r7,r6
   27764:	21000104 	addi	r4,r4,4
   27768:	394ab03a 	or	r5,r7,r5
   2776c:	197fff15 	stw	r5,-4(r3)
   27770:	217fff17 	ldw	r5,-4(r4)
   27774:	2a4ad83a 	srl	r5,r5,r9
   27778:	223ff636 	bltu	r4,r8,27754 <__alt_data_end+0xf8027754>
   2777c:	51400115 	stw	r5,4(r10)
   27780:	28001a1e 	bne	r5,zero,277ec <__lshift+0x140>
   27784:	843fffc4 	addi	r16,r16,-1
   27788:	14000415 	stw	r16,16(r2)
   2778c:	88000826 	beq	r17,zero,277b0 <__lshift+0x104>
   27790:	89000117 	ldw	r4,4(r17)
   27794:	90c01317 	ldw	r3,76(r18)
   27798:	2109883a 	add	r4,r4,r4
   2779c:	2109883a 	add	r4,r4,r4
   277a0:	1907883a 	add	r3,r3,r4
   277a4:	19000017 	ldw	r4,0(r3)
   277a8:	89000015 	stw	r4,0(r17)
   277ac:	1c400015 	stw	r17,0(r3)
   277b0:	dfc00617 	ldw	ra,24(sp)
   277b4:	dd400517 	ldw	r21,20(sp)
   277b8:	dd000417 	ldw	r20,16(sp)
   277bc:	dcc00317 	ldw	r19,12(sp)
   277c0:	dc800217 	ldw	r18,8(sp)
   277c4:	dc400117 	ldw	r17,4(sp)
   277c8:	dc000017 	ldw	r16,0(sp)
   277cc:	dec00704 	addi	sp,sp,28
   277d0:	f800283a 	ret
   277d4:	21400017 	ldw	r5,0(r4)
   277d8:	18c00104 	addi	r3,r3,4
   277dc:	21000104 	addi	r4,r4,4
   277e0:	197fff15 	stw	r5,-4(r3)
   277e4:	223ffb36 	bltu	r4,r8,277d4 <__alt_data_end+0xf80277d4>
   277e8:	003fe606 	br	27784 <__alt_data_end+0xf8027784>
   277ec:	9c000084 	addi	r16,r19,2
   277f0:	003fe406 	br	27784 <__alt_data_end+0xf8027784>

000277f4 <__mcmp>:
   277f4:	20800417 	ldw	r2,16(r4)
   277f8:	28c00417 	ldw	r3,16(r5)
   277fc:	10c5c83a 	sub	r2,r2,r3
   27800:	1000111e 	bne	r2,zero,27848 <__mcmp+0x54>
   27804:	18c7883a 	add	r3,r3,r3
   27808:	18c7883a 	add	r3,r3,r3
   2780c:	21000504 	addi	r4,r4,20
   27810:	29400504 	addi	r5,r5,20
   27814:	20c5883a 	add	r2,r4,r3
   27818:	28cb883a 	add	r5,r5,r3
   2781c:	00000106 	br	27824 <__mcmp+0x30>
   27820:	20800a2e 	bgeu	r4,r2,2784c <__mcmp+0x58>
   27824:	10bfff04 	addi	r2,r2,-4
   27828:	297fff04 	addi	r5,r5,-4
   2782c:	11800017 	ldw	r6,0(r2)
   27830:	28c00017 	ldw	r3,0(r5)
   27834:	30fffa26 	beq	r6,r3,27820 <__alt_data_end+0xf8027820>
   27838:	30c00236 	bltu	r6,r3,27844 <__mcmp+0x50>
   2783c:	00800044 	movi	r2,1
   27840:	f800283a 	ret
   27844:	00bfffc4 	movi	r2,-1
   27848:	f800283a 	ret
   2784c:	0005883a 	mov	r2,zero
   27850:	f800283a 	ret

00027854 <__mdiff>:
   27854:	28c00417 	ldw	r3,16(r5)
   27858:	30800417 	ldw	r2,16(r6)
   2785c:	defffa04 	addi	sp,sp,-24
   27860:	dcc00315 	stw	r19,12(sp)
   27864:	dc800215 	stw	r18,8(sp)
   27868:	dfc00515 	stw	ra,20(sp)
   2786c:	dd000415 	stw	r20,16(sp)
   27870:	dc400115 	stw	r17,4(sp)
   27874:	dc000015 	stw	r16,0(sp)
   27878:	1887c83a 	sub	r3,r3,r2
   2787c:	2825883a 	mov	r18,r5
   27880:	3027883a 	mov	r19,r6
   27884:	1800141e 	bne	r3,zero,278d8 <__mdiff+0x84>
   27888:	1085883a 	add	r2,r2,r2
   2788c:	1085883a 	add	r2,r2,r2
   27890:	2a000504 	addi	r8,r5,20
   27894:	34000504 	addi	r16,r6,20
   27898:	4087883a 	add	r3,r8,r2
   2789c:	8085883a 	add	r2,r16,r2
   278a0:	00000106 	br	278a8 <__mdiff+0x54>
   278a4:	40c0592e 	bgeu	r8,r3,27a0c <__mdiff+0x1b8>
   278a8:	18ffff04 	addi	r3,r3,-4
   278ac:	10bfff04 	addi	r2,r2,-4
   278b0:	19c00017 	ldw	r7,0(r3)
   278b4:	11400017 	ldw	r5,0(r2)
   278b8:	397ffa26 	beq	r7,r5,278a4 <__alt_data_end+0xf80278a4>
   278bc:	3940592e 	bgeu	r7,r5,27a24 <__mdiff+0x1d0>
   278c0:	9005883a 	mov	r2,r18
   278c4:	4023883a 	mov	r17,r8
   278c8:	9825883a 	mov	r18,r19
   278cc:	05000044 	movi	r20,1
   278d0:	1027883a 	mov	r19,r2
   278d4:	00000406 	br	278e8 <__mdiff+0x94>
   278d8:	18005616 	blt	r3,zero,27a34 <__mdiff+0x1e0>
   278dc:	34400504 	addi	r17,r6,20
   278e0:	2c000504 	addi	r16,r5,20
   278e4:	0029883a 	mov	r20,zero
   278e8:	91400117 	ldw	r5,4(r18)
   278ec:	0026f2c0 	call	26f2c <_Balloc>
   278f0:	92400417 	ldw	r9,16(r18)
   278f4:	9b000417 	ldw	r12,16(r19)
   278f8:	12c00504 	addi	r11,r2,20
   278fc:	4a51883a 	add	r8,r9,r9
   27900:	6319883a 	add	r12,r12,r12
   27904:	4211883a 	add	r8,r8,r8
   27908:	6319883a 	add	r12,r12,r12
   2790c:	15000315 	stw	r20,12(r2)
   27910:	8211883a 	add	r8,r16,r8
   27914:	8b19883a 	add	r12,r17,r12
   27918:	0007883a 	mov	r3,zero
   2791c:	81400017 	ldw	r5,0(r16)
   27920:	89c00017 	ldw	r7,0(r17)
   27924:	59800104 	addi	r6,r11,4
   27928:	293fffcc 	andi	r4,r5,65535
   2792c:	20c7883a 	add	r3,r4,r3
   27930:	393fffcc 	andi	r4,r7,65535
   27934:	1909c83a 	sub	r4,r3,r4
   27938:	280ad43a 	srli	r5,r5,16
   2793c:	380ed43a 	srli	r7,r7,16
   27940:	2007d43a 	srai	r3,r4,16
   27944:	213fffcc 	andi	r4,r4,65535
   27948:	29cbc83a 	sub	r5,r5,r7
   2794c:	28c7883a 	add	r3,r5,r3
   27950:	180a943a 	slli	r5,r3,16
   27954:	8c400104 	addi	r17,r17,4
   27958:	84000104 	addi	r16,r16,4
   2795c:	2908b03a 	or	r4,r5,r4
   27960:	59000015 	stw	r4,0(r11)
   27964:	1807d43a 	srai	r3,r3,16
   27968:	3015883a 	mov	r10,r6
   2796c:	3017883a 	mov	r11,r6
   27970:	8b3fea36 	bltu	r17,r12,2791c <__alt_data_end+0xf802791c>
   27974:	8200162e 	bgeu	r16,r8,279d0 <__mdiff+0x17c>
   27978:	8017883a 	mov	r11,r16
   2797c:	59400017 	ldw	r5,0(r11)
   27980:	31800104 	addi	r6,r6,4
   27984:	5ac00104 	addi	r11,r11,4
   27988:	293fffcc 	andi	r4,r5,65535
   2798c:	20c7883a 	add	r3,r4,r3
   27990:	280ed43a 	srli	r7,r5,16
   27994:	180bd43a 	srai	r5,r3,16
   27998:	193fffcc 	andi	r4,r3,65535
   2799c:	3947883a 	add	r3,r7,r5
   279a0:	180a943a 	slli	r5,r3,16
   279a4:	1807d43a 	srai	r3,r3,16
   279a8:	2908b03a 	or	r4,r5,r4
   279ac:	313fff15 	stw	r4,-4(r6)
   279b0:	5a3ff236 	bltu	r11,r8,2797c <__alt_data_end+0xf802797c>
   279b4:	0406303a 	nor	r3,zero,r16
   279b8:	1a07883a 	add	r3,r3,r8
   279bc:	1806d0ba 	srli	r3,r3,2
   279c0:	18c00044 	addi	r3,r3,1
   279c4:	18c7883a 	add	r3,r3,r3
   279c8:	18c7883a 	add	r3,r3,r3
   279cc:	50d5883a 	add	r10,r10,r3
   279d0:	50ffff04 	addi	r3,r10,-4
   279d4:	2000041e 	bne	r4,zero,279e8 <__mdiff+0x194>
   279d8:	18ffff04 	addi	r3,r3,-4
   279dc:	19000017 	ldw	r4,0(r3)
   279e0:	4a7fffc4 	addi	r9,r9,-1
   279e4:	203ffc26 	beq	r4,zero,279d8 <__alt_data_end+0xf80279d8>
   279e8:	12400415 	stw	r9,16(r2)
   279ec:	dfc00517 	ldw	ra,20(sp)
   279f0:	dd000417 	ldw	r20,16(sp)
   279f4:	dcc00317 	ldw	r19,12(sp)
   279f8:	dc800217 	ldw	r18,8(sp)
   279fc:	dc400117 	ldw	r17,4(sp)
   27a00:	dc000017 	ldw	r16,0(sp)
   27a04:	dec00604 	addi	sp,sp,24
   27a08:	f800283a 	ret
   27a0c:	000b883a 	mov	r5,zero
   27a10:	0026f2c0 	call	26f2c <_Balloc>
   27a14:	00c00044 	movi	r3,1
   27a18:	10c00415 	stw	r3,16(r2)
   27a1c:	10000515 	stw	zero,20(r2)
   27a20:	003ff206 	br	279ec <__alt_data_end+0xf80279ec>
   27a24:	8023883a 	mov	r17,r16
   27a28:	0029883a 	mov	r20,zero
   27a2c:	4021883a 	mov	r16,r8
   27a30:	003fad06 	br	278e8 <__alt_data_end+0xf80278e8>
   27a34:	9005883a 	mov	r2,r18
   27a38:	94400504 	addi	r17,r18,20
   27a3c:	9c000504 	addi	r16,r19,20
   27a40:	9825883a 	mov	r18,r19
   27a44:	05000044 	movi	r20,1
   27a48:	1027883a 	mov	r19,r2
   27a4c:	003fa606 	br	278e8 <__alt_data_end+0xf80278e8>

00027a50 <__ulp>:
   27a50:	295ffc2c 	andhi	r5,r5,32752
   27a54:	00bf3034 	movhi	r2,64704
   27a58:	2887883a 	add	r3,r5,r2
   27a5c:	00c0020e 	bge	zero,r3,27a68 <__ulp+0x18>
   27a60:	0005883a 	mov	r2,zero
   27a64:	f800283a 	ret
   27a68:	00c7c83a 	sub	r3,zero,r3
   27a6c:	1807d53a 	srai	r3,r3,20
   27a70:	008004c4 	movi	r2,19
   27a74:	10c00b0e 	bge	r2,r3,27aa4 <__ulp+0x54>
   27a78:	18bffb04 	addi	r2,r3,-20
   27a7c:	01000784 	movi	r4,30
   27a80:	0007883a 	mov	r3,zero
   27a84:	20800516 	blt	r4,r2,27a9c <__ulp+0x4c>
   27a88:	010007c4 	movi	r4,31
   27a8c:	2089c83a 	sub	r4,r4,r2
   27a90:	00800044 	movi	r2,1
   27a94:	1104983a 	sll	r2,r2,r4
   27a98:	f800283a 	ret
   27a9c:	00800044 	movi	r2,1
   27aa0:	f800283a 	ret
   27aa4:	01400234 	movhi	r5,8
   27aa8:	28c7d83a 	sra	r3,r5,r3
   27aac:	0005883a 	mov	r2,zero
   27ab0:	f800283a 	ret

00027ab4 <__b2d>:
   27ab4:	defffa04 	addi	sp,sp,-24
   27ab8:	dc000015 	stw	r16,0(sp)
   27abc:	24000417 	ldw	r16,16(r4)
   27ac0:	dc400115 	stw	r17,4(sp)
   27ac4:	24400504 	addi	r17,r4,20
   27ac8:	8421883a 	add	r16,r16,r16
   27acc:	8421883a 	add	r16,r16,r16
   27ad0:	8c21883a 	add	r16,r17,r16
   27ad4:	dc800215 	stw	r18,8(sp)
   27ad8:	84bfff17 	ldw	r18,-4(r16)
   27adc:	dd000415 	stw	r20,16(sp)
   27ae0:	dcc00315 	stw	r19,12(sp)
   27ae4:	9009883a 	mov	r4,r18
   27ae8:	2829883a 	mov	r20,r5
   27aec:	dfc00515 	stw	ra,20(sp)
   27af0:	00272200 	call	27220 <__hi0bits>
   27af4:	00c00804 	movi	r3,32
   27af8:	1889c83a 	sub	r4,r3,r2
   27afc:	a1000015 	stw	r4,0(r20)
   27b00:	01000284 	movi	r4,10
   27b04:	84ffff04 	addi	r19,r16,-4
   27b08:	20801216 	blt	r4,r2,27b54 <__b2d+0xa0>
   27b0c:	018002c4 	movi	r6,11
   27b10:	308dc83a 	sub	r6,r6,r2
   27b14:	9186d83a 	srl	r3,r18,r6
   27b18:	18cffc34 	orhi	r3,r3,16368
   27b1c:	8cc0212e 	bgeu	r17,r19,27ba4 <__b2d+0xf0>
   27b20:	813ffe17 	ldw	r4,-8(r16)
   27b24:	218cd83a 	srl	r6,r4,r6
   27b28:	10800544 	addi	r2,r2,21
   27b2c:	9084983a 	sll	r2,r18,r2
   27b30:	1184b03a 	or	r2,r2,r6
   27b34:	dfc00517 	ldw	ra,20(sp)
   27b38:	dd000417 	ldw	r20,16(sp)
   27b3c:	dcc00317 	ldw	r19,12(sp)
   27b40:	dc800217 	ldw	r18,8(sp)
   27b44:	dc400117 	ldw	r17,4(sp)
   27b48:	dc000017 	ldw	r16,0(sp)
   27b4c:	dec00604 	addi	sp,sp,24
   27b50:	f800283a 	ret
   27b54:	8cc00f2e 	bgeu	r17,r19,27b94 <__b2d+0xe0>
   27b58:	117ffd44 	addi	r5,r2,-11
   27b5c:	80bffe17 	ldw	r2,-8(r16)
   27b60:	28000e26 	beq	r5,zero,27b9c <__b2d+0xe8>
   27b64:	1949c83a 	sub	r4,r3,r5
   27b68:	9164983a 	sll	r18,r18,r5
   27b6c:	1106d83a 	srl	r3,r2,r4
   27b70:	81bffe04 	addi	r6,r16,-8
   27b74:	948ffc34 	orhi	r18,r18,16368
   27b78:	90c6b03a 	or	r3,r18,r3
   27b7c:	89800e2e 	bgeu	r17,r6,27bb8 <__b2d+0x104>
   27b80:	81bffd17 	ldw	r6,-12(r16)
   27b84:	1144983a 	sll	r2,r2,r5
   27b88:	310ad83a 	srl	r5,r6,r4
   27b8c:	2884b03a 	or	r2,r5,r2
   27b90:	003fe806 	br	27b34 <__alt_data_end+0xf8027b34>
   27b94:	10bffd44 	addi	r2,r2,-11
   27b98:	1000041e 	bne	r2,zero,27bac <__b2d+0xf8>
   27b9c:	90cffc34 	orhi	r3,r18,16368
   27ba0:	003fe406 	br	27b34 <__alt_data_end+0xf8027b34>
   27ba4:	000d883a 	mov	r6,zero
   27ba8:	003fdf06 	br	27b28 <__alt_data_end+0xf8027b28>
   27bac:	90a4983a 	sll	r18,r18,r2
   27bb0:	0005883a 	mov	r2,zero
   27bb4:	003ff906 	br	27b9c <__alt_data_end+0xf8027b9c>
   27bb8:	1144983a 	sll	r2,r2,r5
   27bbc:	003fdd06 	br	27b34 <__alt_data_end+0xf8027b34>

00027bc0 <__d2b>:
   27bc0:	defff804 	addi	sp,sp,-32
   27bc4:	dc000215 	stw	r16,8(sp)
   27bc8:	3021883a 	mov	r16,r6
   27bcc:	dc400315 	stw	r17,12(sp)
   27bd0:	8022907a 	slli	r17,r16,1
   27bd4:	dd000615 	stw	r20,24(sp)
   27bd8:	2829883a 	mov	r20,r5
   27bdc:	01400044 	movi	r5,1
   27be0:	dcc00515 	stw	r19,20(sp)
   27be4:	dc800415 	stw	r18,16(sp)
   27be8:	dfc00715 	stw	ra,28(sp)
   27bec:	3825883a 	mov	r18,r7
   27bf0:	8822d57a 	srli	r17,r17,21
   27bf4:	0026f2c0 	call	26f2c <_Balloc>
   27bf8:	1027883a 	mov	r19,r2
   27bfc:	00800434 	movhi	r2,16
   27c00:	10bfffc4 	addi	r2,r2,-1
   27c04:	808c703a 	and	r6,r16,r2
   27c08:	88000126 	beq	r17,zero,27c10 <__d2b+0x50>
   27c0c:	31800434 	orhi	r6,r6,16
   27c10:	d9800015 	stw	r6,0(sp)
   27c14:	a0002426 	beq	r20,zero,27ca8 <__d2b+0xe8>
   27c18:	d9000104 	addi	r4,sp,4
   27c1c:	dd000115 	stw	r20,4(sp)
   27c20:	00272880 	call	27288 <__lo0bits>
   27c24:	d8c00017 	ldw	r3,0(sp)
   27c28:	10002f1e 	bne	r2,zero,27ce8 <__d2b+0x128>
   27c2c:	d9000117 	ldw	r4,4(sp)
   27c30:	99000515 	stw	r4,20(r19)
   27c34:	1821003a 	cmpeq	r16,r3,zero
   27c38:	01000084 	movi	r4,2
   27c3c:	2421c83a 	sub	r16,r4,r16
   27c40:	98c00615 	stw	r3,24(r19)
   27c44:	9c000415 	stw	r16,16(r19)
   27c48:	88001f1e 	bne	r17,zero,27cc8 <__d2b+0x108>
   27c4c:	10bef384 	addi	r2,r2,-1074
   27c50:	90800015 	stw	r2,0(r18)
   27c54:	00900034 	movhi	r2,16384
   27c58:	10bfffc4 	addi	r2,r2,-1
   27c5c:	8085883a 	add	r2,r16,r2
   27c60:	1085883a 	add	r2,r2,r2
   27c64:	1085883a 	add	r2,r2,r2
   27c68:	9885883a 	add	r2,r19,r2
   27c6c:	11000517 	ldw	r4,20(r2)
   27c70:	8020917a 	slli	r16,r16,5
   27c74:	00272200 	call	27220 <__hi0bits>
   27c78:	d8c00817 	ldw	r3,32(sp)
   27c7c:	8085c83a 	sub	r2,r16,r2
   27c80:	18800015 	stw	r2,0(r3)
   27c84:	9805883a 	mov	r2,r19
   27c88:	dfc00717 	ldw	ra,28(sp)
   27c8c:	dd000617 	ldw	r20,24(sp)
   27c90:	dcc00517 	ldw	r19,20(sp)
   27c94:	dc800417 	ldw	r18,16(sp)
   27c98:	dc400317 	ldw	r17,12(sp)
   27c9c:	dc000217 	ldw	r16,8(sp)
   27ca0:	dec00804 	addi	sp,sp,32
   27ca4:	f800283a 	ret
   27ca8:	d809883a 	mov	r4,sp
   27cac:	00272880 	call	27288 <__lo0bits>
   27cb0:	d8c00017 	ldw	r3,0(sp)
   27cb4:	04000044 	movi	r16,1
   27cb8:	9c000415 	stw	r16,16(r19)
   27cbc:	98c00515 	stw	r3,20(r19)
   27cc0:	10800804 	addi	r2,r2,32
   27cc4:	883fe126 	beq	r17,zero,27c4c <__alt_data_end+0xf8027c4c>
   27cc8:	00c00d44 	movi	r3,53
   27ccc:	8c7ef344 	addi	r17,r17,-1075
   27cd0:	88a3883a 	add	r17,r17,r2
   27cd4:	1885c83a 	sub	r2,r3,r2
   27cd8:	d8c00817 	ldw	r3,32(sp)
   27cdc:	94400015 	stw	r17,0(r18)
   27ce0:	18800015 	stw	r2,0(r3)
   27ce4:	003fe706 	br	27c84 <__alt_data_end+0xf8027c84>
   27ce8:	01000804 	movi	r4,32
   27cec:	2089c83a 	sub	r4,r4,r2
   27cf0:	1908983a 	sll	r4,r3,r4
   27cf4:	d9400117 	ldw	r5,4(sp)
   27cf8:	1886d83a 	srl	r3,r3,r2
   27cfc:	2148b03a 	or	r4,r4,r5
   27d00:	99000515 	stw	r4,20(r19)
   27d04:	d8c00015 	stw	r3,0(sp)
   27d08:	003fca06 	br	27c34 <__alt_data_end+0xf8027c34>

00027d0c <__ratio>:
   27d0c:	defff904 	addi	sp,sp,-28
   27d10:	dc400315 	stw	r17,12(sp)
   27d14:	2823883a 	mov	r17,r5
   27d18:	d9400104 	addi	r5,sp,4
   27d1c:	dfc00615 	stw	ra,24(sp)
   27d20:	dcc00515 	stw	r19,20(sp)
   27d24:	dc800415 	stw	r18,16(sp)
   27d28:	2027883a 	mov	r19,r4
   27d2c:	dc000215 	stw	r16,8(sp)
   27d30:	0027ab40 	call	27ab4 <__b2d>
   27d34:	d80b883a 	mov	r5,sp
   27d38:	8809883a 	mov	r4,r17
   27d3c:	1025883a 	mov	r18,r2
   27d40:	1821883a 	mov	r16,r3
   27d44:	0027ab40 	call	27ab4 <__b2d>
   27d48:	8a000417 	ldw	r8,16(r17)
   27d4c:	99000417 	ldw	r4,16(r19)
   27d50:	d9400117 	ldw	r5,4(sp)
   27d54:	2209c83a 	sub	r4,r4,r8
   27d58:	2010917a 	slli	r8,r4,5
   27d5c:	d9000017 	ldw	r4,0(sp)
   27d60:	2909c83a 	sub	r4,r5,r4
   27d64:	4109883a 	add	r4,r8,r4
   27d68:	01000e0e 	bge	zero,r4,27da4 <__ratio+0x98>
   27d6c:	2008953a 	slli	r4,r4,20
   27d70:	2421883a 	add	r16,r4,r16
   27d74:	100d883a 	mov	r6,r2
   27d78:	180f883a 	mov	r7,r3
   27d7c:	9009883a 	mov	r4,r18
   27d80:	800b883a 	mov	r5,r16
   27d84:	002b8a40 	call	2b8a4 <__divdf3>
   27d88:	dfc00617 	ldw	ra,24(sp)
   27d8c:	dcc00517 	ldw	r19,20(sp)
   27d90:	dc800417 	ldw	r18,16(sp)
   27d94:	dc400317 	ldw	r17,12(sp)
   27d98:	dc000217 	ldw	r16,8(sp)
   27d9c:	dec00704 	addi	sp,sp,28
   27da0:	f800283a 	ret
   27da4:	2008953a 	slli	r4,r4,20
   27da8:	1907c83a 	sub	r3,r3,r4
   27dac:	003ff106 	br	27d74 <__alt_data_end+0xf8027d74>

00027db0 <_mprec_log10>:
   27db0:	defffe04 	addi	sp,sp,-8
   27db4:	dc000015 	stw	r16,0(sp)
   27db8:	dfc00115 	stw	ra,4(sp)
   27dbc:	008005c4 	movi	r2,23
   27dc0:	2021883a 	mov	r16,r4
   27dc4:	11000d0e 	bge	r2,r4,27dfc <_mprec_log10+0x4c>
   27dc8:	0005883a 	mov	r2,zero
   27dcc:	00cffc34 	movhi	r3,16368
   27dd0:	843fffc4 	addi	r16,r16,-1
   27dd4:	000d883a 	mov	r6,zero
   27dd8:	01d00934 	movhi	r7,16420
   27ddc:	1009883a 	mov	r4,r2
   27de0:	180b883a 	mov	r5,r3
   27de4:	002c3e40 	call	2c3e4 <__muldf3>
   27de8:	803ff91e 	bne	r16,zero,27dd0 <__alt_data_end+0xf8027dd0>
   27dec:	dfc00117 	ldw	ra,4(sp)
   27df0:	dc000017 	ldw	r16,0(sp)
   27df4:	dec00204 	addi	sp,sp,8
   27df8:	f800283a 	ret
   27dfc:	202090fa 	slli	r16,r4,3
   27e00:	00810034 	movhi	r2,1024
   27e04:	10805404 	addi	r2,r2,336
   27e08:	1421883a 	add	r16,r2,r16
   27e0c:	80800017 	ldw	r2,0(r16)
   27e10:	80c00117 	ldw	r3,4(r16)
   27e14:	dfc00117 	ldw	ra,4(sp)
   27e18:	dc000017 	ldw	r16,0(sp)
   27e1c:	dec00204 	addi	sp,sp,8
   27e20:	f800283a 	ret

00027e24 <__copybits>:
   27e24:	297fffc4 	addi	r5,r5,-1
   27e28:	280fd17a 	srai	r7,r5,5
   27e2c:	30c00417 	ldw	r3,16(r6)
   27e30:	30800504 	addi	r2,r6,20
   27e34:	39c00044 	addi	r7,r7,1
   27e38:	18c7883a 	add	r3,r3,r3
   27e3c:	39cf883a 	add	r7,r7,r7
   27e40:	18c7883a 	add	r3,r3,r3
   27e44:	39cf883a 	add	r7,r7,r7
   27e48:	10c7883a 	add	r3,r2,r3
   27e4c:	21cf883a 	add	r7,r4,r7
   27e50:	10c00d2e 	bgeu	r2,r3,27e88 <__copybits+0x64>
   27e54:	200b883a 	mov	r5,r4
   27e58:	12000017 	ldw	r8,0(r2)
   27e5c:	29400104 	addi	r5,r5,4
   27e60:	10800104 	addi	r2,r2,4
   27e64:	2a3fff15 	stw	r8,-4(r5)
   27e68:	10fffb36 	bltu	r2,r3,27e58 <__alt_data_end+0xf8027e58>
   27e6c:	1985c83a 	sub	r2,r3,r6
   27e70:	10bffac4 	addi	r2,r2,-21
   27e74:	1004d0ba 	srli	r2,r2,2
   27e78:	10800044 	addi	r2,r2,1
   27e7c:	1085883a 	add	r2,r2,r2
   27e80:	1085883a 	add	r2,r2,r2
   27e84:	2089883a 	add	r4,r4,r2
   27e88:	21c0032e 	bgeu	r4,r7,27e98 <__copybits+0x74>
   27e8c:	20000015 	stw	zero,0(r4)
   27e90:	21000104 	addi	r4,r4,4
   27e94:	21fffd36 	bltu	r4,r7,27e8c <__alt_data_end+0xf8027e8c>
   27e98:	f800283a 	ret

00027e9c <__any_on>:
   27e9c:	20c00417 	ldw	r3,16(r4)
   27ea0:	2805d17a 	srai	r2,r5,5
   27ea4:	21000504 	addi	r4,r4,20
   27ea8:	18800d0e 	bge	r3,r2,27ee0 <__any_on+0x44>
   27eac:	18c7883a 	add	r3,r3,r3
   27eb0:	18c7883a 	add	r3,r3,r3
   27eb4:	20c7883a 	add	r3,r4,r3
   27eb8:	20c0192e 	bgeu	r4,r3,27f20 <__any_on+0x84>
   27ebc:	18bfff17 	ldw	r2,-4(r3)
   27ec0:	18ffff04 	addi	r3,r3,-4
   27ec4:	1000041e 	bne	r2,zero,27ed8 <__any_on+0x3c>
   27ec8:	20c0142e 	bgeu	r4,r3,27f1c <__any_on+0x80>
   27ecc:	18ffff04 	addi	r3,r3,-4
   27ed0:	19400017 	ldw	r5,0(r3)
   27ed4:	283ffc26 	beq	r5,zero,27ec8 <__alt_data_end+0xf8027ec8>
   27ed8:	00800044 	movi	r2,1
   27edc:	f800283a 	ret
   27ee0:	10c00a0e 	bge	r2,r3,27f0c <__any_on+0x70>
   27ee4:	1085883a 	add	r2,r2,r2
   27ee8:	1085883a 	add	r2,r2,r2
   27eec:	294007cc 	andi	r5,r5,31
   27ef0:	2087883a 	add	r3,r4,r2
   27ef4:	283ff026 	beq	r5,zero,27eb8 <__alt_data_end+0xf8027eb8>
   27ef8:	19800017 	ldw	r6,0(r3)
   27efc:	3144d83a 	srl	r2,r6,r5
   27f00:	114a983a 	sll	r5,r2,r5
   27f04:	317ff41e 	bne	r6,r5,27ed8 <__alt_data_end+0xf8027ed8>
   27f08:	003feb06 	br	27eb8 <__alt_data_end+0xf8027eb8>
   27f0c:	1085883a 	add	r2,r2,r2
   27f10:	1085883a 	add	r2,r2,r2
   27f14:	2087883a 	add	r3,r4,r2
   27f18:	003fe706 	br	27eb8 <__alt_data_end+0xf8027eb8>
   27f1c:	f800283a 	ret
   27f20:	0005883a 	mov	r2,zero
   27f24:	f800283a 	ret

00027f28 <_read_r>:
   27f28:	defffd04 	addi	sp,sp,-12
   27f2c:	2805883a 	mov	r2,r5
   27f30:	dc000015 	stw	r16,0(sp)
   27f34:	04010034 	movhi	r16,1024
   27f38:	dc400115 	stw	r17,4(sp)
   27f3c:	300b883a 	mov	r5,r6
   27f40:	8407e304 	addi	r16,r16,8076
   27f44:	2023883a 	mov	r17,r4
   27f48:	380d883a 	mov	r6,r7
   27f4c:	1009883a 	mov	r4,r2
   27f50:	dfc00215 	stw	ra,8(sp)
   27f54:	80000015 	stw	zero,0(r16)
   27f58:	002deb40 	call	2deb4 <read>
   27f5c:	00ffffc4 	movi	r3,-1
   27f60:	10c00526 	beq	r2,r3,27f78 <_read_r+0x50>
   27f64:	dfc00217 	ldw	ra,8(sp)
   27f68:	dc400117 	ldw	r17,4(sp)
   27f6c:	dc000017 	ldw	r16,0(sp)
   27f70:	dec00304 	addi	sp,sp,12
   27f74:	f800283a 	ret
   27f78:	80c00017 	ldw	r3,0(r16)
   27f7c:	183ff926 	beq	r3,zero,27f64 <__alt_data_end+0xf8027f64>
   27f80:	88c00015 	stw	r3,0(r17)
   27f84:	003ff706 	br	27f64 <__alt_data_end+0xf8027f64>

00027f88 <_realloc_r>:
   27f88:	defff604 	addi	sp,sp,-40
   27f8c:	dc800215 	stw	r18,8(sp)
   27f90:	dfc00915 	stw	ra,36(sp)
   27f94:	df000815 	stw	fp,32(sp)
   27f98:	ddc00715 	stw	r23,28(sp)
   27f9c:	dd800615 	stw	r22,24(sp)
   27fa0:	dd400515 	stw	r21,20(sp)
   27fa4:	dd000415 	stw	r20,16(sp)
   27fa8:	dcc00315 	stw	r19,12(sp)
   27fac:	dc400115 	stw	r17,4(sp)
   27fb0:	dc000015 	stw	r16,0(sp)
   27fb4:	3025883a 	mov	r18,r6
   27fb8:	2800b726 	beq	r5,zero,28298 <_realloc_r+0x310>
   27fbc:	282b883a 	mov	r21,r5
   27fc0:	2029883a 	mov	r20,r4
   27fc4:	002dbdc0 	call	2dbdc <__malloc_lock>
   27fc8:	a8bfff17 	ldw	r2,-4(r21)
   27fcc:	043fff04 	movi	r16,-4
   27fd0:	90c002c4 	addi	r3,r18,11
   27fd4:	01000584 	movi	r4,22
   27fd8:	acfffe04 	addi	r19,r21,-8
   27fdc:	1420703a 	and	r16,r2,r16
   27fe0:	20c0332e 	bgeu	r4,r3,280b0 <_realloc_r+0x128>
   27fe4:	047ffe04 	movi	r17,-8
   27fe8:	1c62703a 	and	r17,r3,r17
   27fec:	8807883a 	mov	r3,r17
   27ff0:	88005816 	blt	r17,zero,28154 <_realloc_r+0x1cc>
   27ff4:	8c805736 	bltu	r17,r18,28154 <_realloc_r+0x1cc>
   27ff8:	80c0300e 	bge	r16,r3,280bc <_realloc_r+0x134>
   27ffc:	07010034 	movhi	fp,1024
   28000:	e701f004 	addi	fp,fp,1984
   28004:	e1c00217 	ldw	r7,8(fp)
   28008:	9c09883a 	add	r4,r19,r16
   2800c:	22000117 	ldw	r8,4(r4)
   28010:	21c06326 	beq	r4,r7,281a0 <_realloc_r+0x218>
   28014:	017fff84 	movi	r5,-2
   28018:	414a703a 	and	r5,r8,r5
   2801c:	214b883a 	add	r5,r4,r5
   28020:	29800117 	ldw	r6,4(r5)
   28024:	3180004c 	andi	r6,r6,1
   28028:	30003f26 	beq	r6,zero,28128 <_realloc_r+0x1a0>
   2802c:	1080004c 	andi	r2,r2,1
   28030:	10008326 	beq	r2,zero,28240 <_realloc_r+0x2b8>
   28034:	900b883a 	mov	r5,r18
   28038:	a009883a 	mov	r4,r20
   2803c:	0020bd40 	call	20bd4 <_malloc_r>
   28040:	1025883a 	mov	r18,r2
   28044:	10011e26 	beq	r2,zero,284c0 <_realloc_r+0x538>
   28048:	a93fff17 	ldw	r4,-4(r21)
   2804c:	10fffe04 	addi	r3,r2,-8
   28050:	00bfff84 	movi	r2,-2
   28054:	2084703a 	and	r2,r4,r2
   28058:	9885883a 	add	r2,r19,r2
   2805c:	1880ee26 	beq	r3,r2,28418 <_realloc_r+0x490>
   28060:	81bfff04 	addi	r6,r16,-4
   28064:	00800904 	movi	r2,36
   28068:	1180b836 	bltu	r2,r6,2834c <_realloc_r+0x3c4>
   2806c:	00c004c4 	movi	r3,19
   28070:	19809636 	bltu	r3,r6,282cc <_realloc_r+0x344>
   28074:	9005883a 	mov	r2,r18
   28078:	a807883a 	mov	r3,r21
   2807c:	19000017 	ldw	r4,0(r3)
   28080:	11000015 	stw	r4,0(r2)
   28084:	19000117 	ldw	r4,4(r3)
   28088:	11000115 	stw	r4,4(r2)
   2808c:	18c00217 	ldw	r3,8(r3)
   28090:	10c00215 	stw	r3,8(r2)
   28094:	a80b883a 	mov	r5,r21
   28098:	a009883a 	mov	r4,r20
   2809c:	00260c00 	call	260c0 <_free_r>
   280a0:	a009883a 	mov	r4,r20
   280a4:	002dc000 	call	2dc00 <__malloc_unlock>
   280a8:	9005883a 	mov	r2,r18
   280ac:	00001206 	br	280f8 <_realloc_r+0x170>
   280b0:	00c00404 	movi	r3,16
   280b4:	1823883a 	mov	r17,r3
   280b8:	003fce06 	br	27ff4 <__alt_data_end+0xf8027ff4>
   280bc:	a825883a 	mov	r18,r21
   280c0:	8445c83a 	sub	r2,r16,r17
   280c4:	00c003c4 	movi	r3,15
   280c8:	18802636 	bltu	r3,r2,28164 <_realloc_r+0x1dc>
   280cc:	99800117 	ldw	r6,4(r19)
   280d0:	9c07883a 	add	r3,r19,r16
   280d4:	3180004c 	andi	r6,r6,1
   280d8:	3420b03a 	or	r16,r6,r16
   280dc:	9c000115 	stw	r16,4(r19)
   280e0:	18800117 	ldw	r2,4(r3)
   280e4:	10800054 	ori	r2,r2,1
   280e8:	18800115 	stw	r2,4(r3)
   280ec:	a009883a 	mov	r4,r20
   280f0:	002dc000 	call	2dc00 <__malloc_unlock>
   280f4:	9005883a 	mov	r2,r18
   280f8:	dfc00917 	ldw	ra,36(sp)
   280fc:	df000817 	ldw	fp,32(sp)
   28100:	ddc00717 	ldw	r23,28(sp)
   28104:	dd800617 	ldw	r22,24(sp)
   28108:	dd400517 	ldw	r21,20(sp)
   2810c:	dd000417 	ldw	r20,16(sp)
   28110:	dcc00317 	ldw	r19,12(sp)
   28114:	dc800217 	ldw	r18,8(sp)
   28118:	dc400117 	ldw	r17,4(sp)
   2811c:	dc000017 	ldw	r16,0(sp)
   28120:	dec00a04 	addi	sp,sp,40
   28124:	f800283a 	ret
   28128:	017fff04 	movi	r5,-4
   2812c:	414a703a 	and	r5,r8,r5
   28130:	814d883a 	add	r6,r16,r5
   28134:	30c01f16 	blt	r6,r3,281b4 <_realloc_r+0x22c>
   28138:	20800317 	ldw	r2,12(r4)
   2813c:	20c00217 	ldw	r3,8(r4)
   28140:	a825883a 	mov	r18,r21
   28144:	3021883a 	mov	r16,r6
   28148:	18800315 	stw	r2,12(r3)
   2814c:	10c00215 	stw	r3,8(r2)
   28150:	003fdb06 	br	280c0 <__alt_data_end+0xf80280c0>
   28154:	00800304 	movi	r2,12
   28158:	a0800015 	stw	r2,0(r20)
   2815c:	0005883a 	mov	r2,zero
   28160:	003fe506 	br	280f8 <__alt_data_end+0xf80280f8>
   28164:	98c00117 	ldw	r3,4(r19)
   28168:	9c4b883a 	add	r5,r19,r17
   2816c:	11000054 	ori	r4,r2,1
   28170:	18c0004c 	andi	r3,r3,1
   28174:	1c62b03a 	or	r17,r3,r17
   28178:	9c400115 	stw	r17,4(r19)
   2817c:	29000115 	stw	r4,4(r5)
   28180:	2885883a 	add	r2,r5,r2
   28184:	10c00117 	ldw	r3,4(r2)
   28188:	29400204 	addi	r5,r5,8
   2818c:	a009883a 	mov	r4,r20
   28190:	18c00054 	ori	r3,r3,1
   28194:	10c00115 	stw	r3,4(r2)
   28198:	00260c00 	call	260c0 <_free_r>
   2819c:	003fd306 	br	280ec <__alt_data_end+0xf80280ec>
   281a0:	017fff04 	movi	r5,-4
   281a4:	414a703a 	and	r5,r8,r5
   281a8:	89800404 	addi	r6,r17,16
   281ac:	8151883a 	add	r8,r16,r5
   281b0:	4180590e 	bge	r8,r6,28318 <_realloc_r+0x390>
   281b4:	1080004c 	andi	r2,r2,1
   281b8:	103f9e1e 	bne	r2,zero,28034 <__alt_data_end+0xf8028034>
   281bc:	adbffe17 	ldw	r22,-8(r21)
   281c0:	00bfff04 	movi	r2,-4
   281c4:	9dadc83a 	sub	r22,r19,r22
   281c8:	b1800117 	ldw	r6,4(r22)
   281cc:	3084703a 	and	r2,r6,r2
   281d0:	20002026 	beq	r4,zero,28254 <_realloc_r+0x2cc>
   281d4:	80af883a 	add	r23,r16,r2
   281d8:	b96f883a 	add	r23,r23,r5
   281dc:	21c05f26 	beq	r4,r7,2835c <_realloc_r+0x3d4>
   281e0:	b8c01c16 	blt	r23,r3,28254 <_realloc_r+0x2cc>
   281e4:	20800317 	ldw	r2,12(r4)
   281e8:	20c00217 	ldw	r3,8(r4)
   281ec:	81bfff04 	addi	r6,r16,-4
   281f0:	01000904 	movi	r4,36
   281f4:	18800315 	stw	r2,12(r3)
   281f8:	10c00215 	stw	r3,8(r2)
   281fc:	b0c00217 	ldw	r3,8(r22)
   28200:	b0800317 	ldw	r2,12(r22)
   28204:	b4800204 	addi	r18,r22,8
   28208:	18800315 	stw	r2,12(r3)
   2820c:	10c00215 	stw	r3,8(r2)
   28210:	21801b36 	bltu	r4,r6,28280 <_realloc_r+0x2f8>
   28214:	008004c4 	movi	r2,19
   28218:	1180352e 	bgeu	r2,r6,282f0 <_realloc_r+0x368>
   2821c:	a8800017 	ldw	r2,0(r21)
   28220:	b0800215 	stw	r2,8(r22)
   28224:	a8800117 	ldw	r2,4(r21)
   28228:	b0800315 	stw	r2,12(r22)
   2822c:	008006c4 	movi	r2,27
   28230:	11807f36 	bltu	r2,r6,28430 <_realloc_r+0x4a8>
   28234:	b0800404 	addi	r2,r22,16
   28238:	ad400204 	addi	r21,r21,8
   2823c:	00002d06 	br	282f4 <_realloc_r+0x36c>
   28240:	adbffe17 	ldw	r22,-8(r21)
   28244:	00bfff04 	movi	r2,-4
   28248:	9dadc83a 	sub	r22,r19,r22
   2824c:	b1000117 	ldw	r4,4(r22)
   28250:	2084703a 	and	r2,r4,r2
   28254:	b03f7726 	beq	r22,zero,28034 <__alt_data_end+0xf8028034>
   28258:	80af883a 	add	r23,r16,r2
   2825c:	b8ff7516 	blt	r23,r3,28034 <__alt_data_end+0xf8028034>
   28260:	b0800317 	ldw	r2,12(r22)
   28264:	b0c00217 	ldw	r3,8(r22)
   28268:	81bfff04 	addi	r6,r16,-4
   2826c:	01000904 	movi	r4,36
   28270:	18800315 	stw	r2,12(r3)
   28274:	10c00215 	stw	r3,8(r2)
   28278:	b4800204 	addi	r18,r22,8
   2827c:	21bfe52e 	bgeu	r4,r6,28214 <__alt_data_end+0xf8028214>
   28280:	a80b883a 	mov	r5,r21
   28284:	9009883a 	mov	r4,r18
   28288:	0026dd00 	call	26dd0 <memmove>
   2828c:	b821883a 	mov	r16,r23
   28290:	b027883a 	mov	r19,r22
   28294:	003f8a06 	br	280c0 <__alt_data_end+0xf80280c0>
   28298:	300b883a 	mov	r5,r6
   2829c:	dfc00917 	ldw	ra,36(sp)
   282a0:	df000817 	ldw	fp,32(sp)
   282a4:	ddc00717 	ldw	r23,28(sp)
   282a8:	dd800617 	ldw	r22,24(sp)
   282ac:	dd400517 	ldw	r21,20(sp)
   282b0:	dd000417 	ldw	r20,16(sp)
   282b4:	dcc00317 	ldw	r19,12(sp)
   282b8:	dc800217 	ldw	r18,8(sp)
   282bc:	dc400117 	ldw	r17,4(sp)
   282c0:	dc000017 	ldw	r16,0(sp)
   282c4:	dec00a04 	addi	sp,sp,40
   282c8:	0020bd41 	jmpi	20bd4 <_malloc_r>
   282cc:	a8c00017 	ldw	r3,0(r21)
   282d0:	90c00015 	stw	r3,0(r18)
   282d4:	a8c00117 	ldw	r3,4(r21)
   282d8:	90c00115 	stw	r3,4(r18)
   282dc:	00c006c4 	movi	r3,27
   282e0:	19804536 	bltu	r3,r6,283f8 <_realloc_r+0x470>
   282e4:	90800204 	addi	r2,r18,8
   282e8:	a8c00204 	addi	r3,r21,8
   282ec:	003f6306 	br	2807c <__alt_data_end+0xf802807c>
   282f0:	9005883a 	mov	r2,r18
   282f4:	a8c00017 	ldw	r3,0(r21)
   282f8:	b821883a 	mov	r16,r23
   282fc:	b027883a 	mov	r19,r22
   28300:	10c00015 	stw	r3,0(r2)
   28304:	a8c00117 	ldw	r3,4(r21)
   28308:	10c00115 	stw	r3,4(r2)
   2830c:	a8c00217 	ldw	r3,8(r21)
   28310:	10c00215 	stw	r3,8(r2)
   28314:	003f6a06 	br	280c0 <__alt_data_end+0xf80280c0>
   28318:	9c67883a 	add	r19,r19,r17
   2831c:	4445c83a 	sub	r2,r8,r17
   28320:	e4c00215 	stw	r19,8(fp)
   28324:	10800054 	ori	r2,r2,1
   28328:	98800115 	stw	r2,4(r19)
   2832c:	a8bfff17 	ldw	r2,-4(r21)
   28330:	a009883a 	mov	r4,r20
   28334:	1080004c 	andi	r2,r2,1
   28338:	1462b03a 	or	r17,r2,r17
   2833c:	ac7fff15 	stw	r17,-4(r21)
   28340:	002dc000 	call	2dc00 <__malloc_unlock>
   28344:	a805883a 	mov	r2,r21
   28348:	003f6b06 	br	280f8 <__alt_data_end+0xf80280f8>
   2834c:	a80b883a 	mov	r5,r21
   28350:	9009883a 	mov	r4,r18
   28354:	0026dd00 	call	26dd0 <memmove>
   28358:	003f4e06 	br	28094 <__alt_data_end+0xf8028094>
   2835c:	89000404 	addi	r4,r17,16
   28360:	b93fbc16 	blt	r23,r4,28254 <__alt_data_end+0xf8028254>
   28364:	b0800317 	ldw	r2,12(r22)
   28368:	b0c00217 	ldw	r3,8(r22)
   2836c:	81bfff04 	addi	r6,r16,-4
   28370:	01000904 	movi	r4,36
   28374:	18800315 	stw	r2,12(r3)
   28378:	10c00215 	stw	r3,8(r2)
   2837c:	b4800204 	addi	r18,r22,8
   28380:	21804336 	bltu	r4,r6,28490 <_realloc_r+0x508>
   28384:	008004c4 	movi	r2,19
   28388:	11803f2e 	bgeu	r2,r6,28488 <_realloc_r+0x500>
   2838c:	a8800017 	ldw	r2,0(r21)
   28390:	b0800215 	stw	r2,8(r22)
   28394:	a8800117 	ldw	r2,4(r21)
   28398:	b0800315 	stw	r2,12(r22)
   2839c:	008006c4 	movi	r2,27
   283a0:	11803f36 	bltu	r2,r6,284a0 <_realloc_r+0x518>
   283a4:	b0800404 	addi	r2,r22,16
   283a8:	ad400204 	addi	r21,r21,8
   283ac:	a8c00017 	ldw	r3,0(r21)
   283b0:	10c00015 	stw	r3,0(r2)
   283b4:	a8c00117 	ldw	r3,4(r21)
   283b8:	10c00115 	stw	r3,4(r2)
   283bc:	a8c00217 	ldw	r3,8(r21)
   283c0:	10c00215 	stw	r3,8(r2)
   283c4:	b447883a 	add	r3,r22,r17
   283c8:	bc45c83a 	sub	r2,r23,r17
   283cc:	e0c00215 	stw	r3,8(fp)
   283d0:	10800054 	ori	r2,r2,1
   283d4:	18800115 	stw	r2,4(r3)
   283d8:	b0800117 	ldw	r2,4(r22)
   283dc:	a009883a 	mov	r4,r20
   283e0:	1080004c 	andi	r2,r2,1
   283e4:	1462b03a 	or	r17,r2,r17
   283e8:	b4400115 	stw	r17,4(r22)
   283ec:	002dc000 	call	2dc00 <__malloc_unlock>
   283f0:	9005883a 	mov	r2,r18
   283f4:	003f4006 	br	280f8 <__alt_data_end+0xf80280f8>
   283f8:	a8c00217 	ldw	r3,8(r21)
   283fc:	90c00215 	stw	r3,8(r18)
   28400:	a8c00317 	ldw	r3,12(r21)
   28404:	90c00315 	stw	r3,12(r18)
   28408:	30801126 	beq	r6,r2,28450 <_realloc_r+0x4c8>
   2840c:	90800404 	addi	r2,r18,16
   28410:	a8c00404 	addi	r3,r21,16
   28414:	003f1906 	br	2807c <__alt_data_end+0xf802807c>
   28418:	90ffff17 	ldw	r3,-4(r18)
   2841c:	00bfff04 	movi	r2,-4
   28420:	a825883a 	mov	r18,r21
   28424:	1884703a 	and	r2,r3,r2
   28428:	80a1883a 	add	r16,r16,r2
   2842c:	003f2406 	br	280c0 <__alt_data_end+0xf80280c0>
   28430:	a8800217 	ldw	r2,8(r21)
   28434:	b0800415 	stw	r2,16(r22)
   28438:	a8800317 	ldw	r2,12(r21)
   2843c:	b0800515 	stw	r2,20(r22)
   28440:	31000a26 	beq	r6,r4,2846c <_realloc_r+0x4e4>
   28444:	b0800604 	addi	r2,r22,24
   28448:	ad400404 	addi	r21,r21,16
   2844c:	003fa906 	br	282f4 <__alt_data_end+0xf80282f4>
   28450:	a9000417 	ldw	r4,16(r21)
   28454:	90800604 	addi	r2,r18,24
   28458:	a8c00604 	addi	r3,r21,24
   2845c:	91000415 	stw	r4,16(r18)
   28460:	a9000517 	ldw	r4,20(r21)
   28464:	91000515 	stw	r4,20(r18)
   28468:	003f0406 	br	2807c <__alt_data_end+0xf802807c>
   2846c:	a8c00417 	ldw	r3,16(r21)
   28470:	ad400604 	addi	r21,r21,24
   28474:	b0800804 	addi	r2,r22,32
   28478:	b0c00615 	stw	r3,24(r22)
   2847c:	a8ffff17 	ldw	r3,-4(r21)
   28480:	b0c00715 	stw	r3,28(r22)
   28484:	003f9b06 	br	282f4 <__alt_data_end+0xf80282f4>
   28488:	9005883a 	mov	r2,r18
   2848c:	003fc706 	br	283ac <__alt_data_end+0xf80283ac>
   28490:	a80b883a 	mov	r5,r21
   28494:	9009883a 	mov	r4,r18
   28498:	0026dd00 	call	26dd0 <memmove>
   2849c:	003fc906 	br	283c4 <__alt_data_end+0xf80283c4>
   284a0:	a8800217 	ldw	r2,8(r21)
   284a4:	b0800415 	stw	r2,16(r22)
   284a8:	a8800317 	ldw	r2,12(r21)
   284ac:	b0800515 	stw	r2,20(r22)
   284b0:	31000726 	beq	r6,r4,284d0 <_realloc_r+0x548>
   284b4:	b0800604 	addi	r2,r22,24
   284b8:	ad400404 	addi	r21,r21,16
   284bc:	003fbb06 	br	283ac <__alt_data_end+0xf80283ac>
   284c0:	a009883a 	mov	r4,r20
   284c4:	002dc000 	call	2dc00 <__malloc_unlock>
   284c8:	0005883a 	mov	r2,zero
   284cc:	003f0a06 	br	280f8 <__alt_data_end+0xf80280f8>
   284d0:	a8c00417 	ldw	r3,16(r21)
   284d4:	ad400604 	addi	r21,r21,24
   284d8:	b0800804 	addi	r2,r22,32
   284dc:	b0c00615 	stw	r3,24(r22)
   284e0:	a8ffff17 	ldw	r3,-4(r21)
   284e4:	b0c00715 	stw	r3,28(r22)
   284e8:	003fb006 	br	283ac <__alt_data_end+0xf80283ac>

000284ec <__fpclassifyd>:
   284ec:	00a00034 	movhi	r2,32768
   284f0:	10bfffc4 	addi	r2,r2,-1
   284f4:	2884703a 	and	r2,r5,r2
   284f8:	10000726 	beq	r2,zero,28518 <__fpclassifyd+0x2c>
   284fc:	00fffc34 	movhi	r3,65520
   28500:	019ff834 	movhi	r6,32736
   28504:	28c7883a 	add	r3,r5,r3
   28508:	31bfffc4 	addi	r6,r6,-1
   2850c:	30c00536 	bltu	r6,r3,28524 <__fpclassifyd+0x38>
   28510:	00800104 	movi	r2,4
   28514:	f800283a 	ret
   28518:	2000021e 	bne	r4,zero,28524 <__fpclassifyd+0x38>
   2851c:	00800084 	movi	r2,2
   28520:	f800283a 	ret
   28524:	00dffc34 	movhi	r3,32752
   28528:	019ff834 	movhi	r6,32736
   2852c:	28cb883a 	add	r5,r5,r3
   28530:	31bfffc4 	addi	r6,r6,-1
   28534:	317ff62e 	bgeu	r6,r5,28510 <__alt_data_end+0xf8028510>
   28538:	01400434 	movhi	r5,16
   2853c:	297fffc4 	addi	r5,r5,-1
   28540:	28800236 	bltu	r5,r2,2854c <__fpclassifyd+0x60>
   28544:	008000c4 	movi	r2,3
   28548:	f800283a 	ret
   2854c:	10c00226 	beq	r2,r3,28558 <__fpclassifyd+0x6c>
   28550:	0005883a 	mov	r2,zero
   28554:	f800283a 	ret
   28558:	2005003a 	cmpeq	r2,r4,zero
   2855c:	f800283a 	ret

00028560 <strcmp>:
   28560:	2144b03a 	or	r2,r4,r5
   28564:	108000cc 	andi	r2,r2,3
   28568:	1000171e 	bne	r2,zero,285c8 <strcmp+0x68>
   2856c:	20800017 	ldw	r2,0(r4)
   28570:	28c00017 	ldw	r3,0(r5)
   28574:	10c0141e 	bne	r2,r3,285c8 <strcmp+0x68>
   28578:	027fbff4 	movhi	r9,65279
   2857c:	4a7fbfc4 	addi	r9,r9,-257
   28580:	0086303a 	nor	r3,zero,r2
   28584:	02202074 	movhi	r8,32897
   28588:	1245883a 	add	r2,r2,r9
   2858c:	42202004 	addi	r8,r8,-32640
   28590:	10c4703a 	and	r2,r2,r3
   28594:	1204703a 	and	r2,r2,r8
   28598:	10000226 	beq	r2,zero,285a4 <strcmp+0x44>
   2859c:	00002306 	br	2862c <strcmp+0xcc>
   285a0:	1000221e 	bne	r2,zero,2862c <strcmp+0xcc>
   285a4:	21000104 	addi	r4,r4,4
   285a8:	20c00017 	ldw	r3,0(r4)
   285ac:	29400104 	addi	r5,r5,4
   285b0:	29800017 	ldw	r6,0(r5)
   285b4:	1a4f883a 	add	r7,r3,r9
   285b8:	00c4303a 	nor	r2,zero,r3
   285bc:	3884703a 	and	r2,r7,r2
   285c0:	1204703a 	and	r2,r2,r8
   285c4:	19bff626 	beq	r3,r6,285a0 <__alt_data_end+0xf80285a0>
   285c8:	20800003 	ldbu	r2,0(r4)
   285cc:	10c03fcc 	andi	r3,r2,255
   285d0:	18c0201c 	xori	r3,r3,128
   285d4:	18ffe004 	addi	r3,r3,-128
   285d8:	18000c26 	beq	r3,zero,2860c <strcmp+0xac>
   285dc:	29800007 	ldb	r6,0(r5)
   285e0:	19800326 	beq	r3,r6,285f0 <strcmp+0x90>
   285e4:	00001306 	br	28634 <strcmp+0xd4>
   285e8:	29800007 	ldb	r6,0(r5)
   285ec:	11800b1e 	bne	r2,r6,2861c <strcmp+0xbc>
   285f0:	21000044 	addi	r4,r4,1
   285f4:	20c00003 	ldbu	r3,0(r4)
   285f8:	29400044 	addi	r5,r5,1
   285fc:	18803fcc 	andi	r2,r3,255
   28600:	1080201c 	xori	r2,r2,128
   28604:	10bfe004 	addi	r2,r2,-128
   28608:	103ff71e 	bne	r2,zero,285e8 <__alt_data_end+0xf80285e8>
   2860c:	0007883a 	mov	r3,zero
   28610:	28800003 	ldbu	r2,0(r5)
   28614:	1885c83a 	sub	r2,r3,r2
   28618:	f800283a 	ret
   2861c:	28800003 	ldbu	r2,0(r5)
   28620:	18c03fcc 	andi	r3,r3,255
   28624:	1885c83a 	sub	r2,r3,r2
   28628:	f800283a 	ret
   2862c:	0005883a 	mov	r2,zero
   28630:	f800283a 	ret
   28634:	10c03fcc 	andi	r3,r2,255
   28638:	003ff506 	br	28610 <__alt_data_end+0xf8028610>

0002863c <__sprint_r.part.0>:
   2863c:	28801917 	ldw	r2,100(r5)
   28640:	defff604 	addi	sp,sp,-40
   28644:	dd400515 	stw	r21,20(sp)
   28648:	dfc00915 	stw	ra,36(sp)
   2864c:	df000815 	stw	fp,32(sp)
   28650:	ddc00715 	stw	r23,28(sp)
   28654:	dd800615 	stw	r22,24(sp)
   28658:	dd000415 	stw	r20,16(sp)
   2865c:	dcc00315 	stw	r19,12(sp)
   28660:	dc800215 	stw	r18,8(sp)
   28664:	dc400115 	stw	r17,4(sp)
   28668:	dc000015 	stw	r16,0(sp)
   2866c:	1088000c 	andi	r2,r2,8192
   28670:	302b883a 	mov	r21,r6
   28674:	10002e26 	beq	r2,zero,28730 <__sprint_r.part.0+0xf4>
   28678:	30800217 	ldw	r2,8(r6)
   2867c:	35800017 	ldw	r22,0(r6)
   28680:	10002926 	beq	r2,zero,28728 <__sprint_r.part.0+0xec>
   28684:	2827883a 	mov	r19,r5
   28688:	2029883a 	mov	r20,r4
   2868c:	b5c00104 	addi	r23,r22,4
   28690:	04bfffc4 	movi	r18,-1
   28694:	bc400017 	ldw	r17,0(r23)
   28698:	b4000017 	ldw	r16,0(r22)
   2869c:	0039883a 	mov	fp,zero
   286a0:	8822d0ba 	srli	r17,r17,2
   286a4:	8800031e 	bne	r17,zero,286b4 <__sprint_r.part.0+0x78>
   286a8:	00001806 	br	2870c <__sprint_r.part.0+0xd0>
   286ac:	84000104 	addi	r16,r16,4
   286b0:	8f001526 	beq	r17,fp,28708 <__sprint_r.part.0+0xcc>
   286b4:	81400017 	ldw	r5,0(r16)
   286b8:	980d883a 	mov	r6,r19
   286bc:	a009883a 	mov	r4,r20
   286c0:	0029fb00 	call	29fb0 <_fputwc_r>
   286c4:	e7000044 	addi	fp,fp,1
   286c8:	14bff81e 	bne	r2,r18,286ac <__alt_data_end+0xf80286ac>
   286cc:	9005883a 	mov	r2,r18
   286d0:	a8000215 	stw	zero,8(r21)
   286d4:	a8000115 	stw	zero,4(r21)
   286d8:	dfc00917 	ldw	ra,36(sp)
   286dc:	df000817 	ldw	fp,32(sp)
   286e0:	ddc00717 	ldw	r23,28(sp)
   286e4:	dd800617 	ldw	r22,24(sp)
   286e8:	dd400517 	ldw	r21,20(sp)
   286ec:	dd000417 	ldw	r20,16(sp)
   286f0:	dcc00317 	ldw	r19,12(sp)
   286f4:	dc800217 	ldw	r18,8(sp)
   286f8:	dc400117 	ldw	r17,4(sp)
   286fc:	dc000017 	ldw	r16,0(sp)
   28700:	dec00a04 	addi	sp,sp,40
   28704:	f800283a 	ret
   28708:	a8800217 	ldw	r2,8(r21)
   2870c:	8c63883a 	add	r17,r17,r17
   28710:	8c63883a 	add	r17,r17,r17
   28714:	1445c83a 	sub	r2,r2,r17
   28718:	a8800215 	stw	r2,8(r21)
   2871c:	b5800204 	addi	r22,r22,8
   28720:	bdc00204 	addi	r23,r23,8
   28724:	103fdb1e 	bne	r2,zero,28694 <__alt_data_end+0xf8028694>
   28728:	0005883a 	mov	r2,zero
   2872c:	003fe806 	br	286d0 <__alt_data_end+0xf80286d0>
   28730:	00263d00 	call	263d0 <__sfvwrite_r>
   28734:	003fe606 	br	286d0 <__alt_data_end+0xf80286d0>

00028738 <__sprint_r>:
   28738:	30c00217 	ldw	r3,8(r6)
   2873c:	18000126 	beq	r3,zero,28744 <__sprint_r+0xc>
   28740:	002863c1 	jmpi	2863c <__sprint_r.part.0>
   28744:	30000115 	stw	zero,4(r6)
   28748:	0005883a 	mov	r2,zero
   2874c:	f800283a 	ret

00028750 <___vfiprintf_internal_r>:
   28750:	deffc904 	addi	sp,sp,-220
   28754:	df003515 	stw	fp,212(sp)
   28758:	dd003115 	stw	r20,196(sp)
   2875c:	dfc03615 	stw	ra,216(sp)
   28760:	ddc03415 	stw	r23,208(sp)
   28764:	dd803315 	stw	r22,204(sp)
   28768:	dd403215 	stw	r21,200(sp)
   2876c:	dcc03015 	stw	r19,192(sp)
   28770:	dc802f15 	stw	r18,188(sp)
   28774:	dc402e15 	stw	r17,184(sp)
   28778:	dc002d15 	stw	r16,180(sp)
   2877c:	d9002015 	stw	r4,128(sp)
   28780:	d9c02215 	stw	r7,136(sp)
   28784:	2829883a 	mov	r20,r5
   28788:	3039883a 	mov	fp,r6
   2878c:	20000226 	beq	r4,zero,28798 <___vfiprintf_internal_r+0x48>
   28790:	20800e17 	ldw	r2,56(r4)
   28794:	1000cf26 	beq	r2,zero,28ad4 <___vfiprintf_internal_r+0x384>
   28798:	a080030b 	ldhu	r2,12(r20)
   2879c:	10c8000c 	andi	r3,r2,8192
   287a0:	1800061e 	bne	r3,zero,287bc <___vfiprintf_internal_r+0x6c>
   287a4:	a1001917 	ldw	r4,100(r20)
   287a8:	00f7ffc4 	movi	r3,-8193
   287ac:	10880014 	ori	r2,r2,8192
   287b0:	20c6703a 	and	r3,r4,r3
   287b4:	a080030d 	sth	r2,12(r20)
   287b8:	a0c01915 	stw	r3,100(r20)
   287bc:	10c0020c 	andi	r3,r2,8
   287c0:	1800a926 	beq	r3,zero,28a68 <___vfiprintf_internal_r+0x318>
   287c4:	a0c00417 	ldw	r3,16(r20)
   287c8:	1800a726 	beq	r3,zero,28a68 <___vfiprintf_internal_r+0x318>
   287cc:	1080068c 	andi	r2,r2,26
   287d0:	00c00284 	movi	r3,10
   287d4:	10c0ac26 	beq	r2,r3,28a88 <___vfiprintf_internal_r+0x338>
   287d8:	da801a04 	addi	r10,sp,104
   287dc:	da801e15 	stw	r10,120(sp)
   287e0:	d8801e17 	ldw	r2,120(sp)
   287e4:	da8019c4 	addi	r10,sp,103
   287e8:	05810034 	movhi	r22,1024
   287ec:	05c10034 	movhi	r23,1024
   287f0:	da801f15 	stw	r10,124(sp)
   287f4:	1295c83a 	sub	r10,r2,r10
   287f8:	b5808a04 	addi	r22,r22,552
   287fc:	bdc08604 	addi	r23,r23,536
   28800:	dec01a15 	stw	sp,104(sp)
   28804:	d8001c15 	stw	zero,112(sp)
   28808:	d8001b15 	stw	zero,108(sp)
   2880c:	d8002615 	stw	zero,152(sp)
   28810:	d8002315 	stw	zero,140(sp)
   28814:	da802715 	stw	r10,156(sp)
   28818:	d811883a 	mov	r8,sp
   2881c:	dd002115 	stw	r20,132(sp)
   28820:	e021883a 	mov	r16,fp
   28824:	80800007 	ldb	r2,0(r16)
   28828:	1003ea26 	beq	r2,zero,297d4 <___vfiprintf_internal_r+0x1084>
   2882c:	00c00944 	movi	r3,37
   28830:	8025883a 	mov	r18,r16
   28834:	10c0021e 	bne	r2,r3,28840 <___vfiprintf_internal_r+0xf0>
   28838:	00001606 	br	28894 <___vfiprintf_internal_r+0x144>
   2883c:	10c00326 	beq	r2,r3,2884c <___vfiprintf_internal_r+0xfc>
   28840:	94800044 	addi	r18,r18,1
   28844:	90800007 	ldb	r2,0(r18)
   28848:	103ffc1e 	bne	r2,zero,2883c <__alt_data_end+0xf802883c>
   2884c:	9423c83a 	sub	r17,r18,r16
   28850:	88001026 	beq	r17,zero,28894 <___vfiprintf_internal_r+0x144>
   28854:	d8c01c17 	ldw	r3,112(sp)
   28858:	d8801b17 	ldw	r2,108(sp)
   2885c:	44000015 	stw	r16,0(r8)
   28860:	88c7883a 	add	r3,r17,r3
   28864:	10800044 	addi	r2,r2,1
   28868:	44400115 	stw	r17,4(r8)
   2886c:	d8c01c15 	stw	r3,112(sp)
   28870:	d8801b15 	stw	r2,108(sp)
   28874:	010001c4 	movi	r4,7
   28878:	2080760e 	bge	r4,r2,28a54 <___vfiprintf_internal_r+0x304>
   2887c:	1803821e 	bne	r3,zero,29688 <___vfiprintf_internal_r+0xf38>
   28880:	da802317 	ldw	r10,140(sp)
   28884:	d8001b15 	stw	zero,108(sp)
   28888:	d811883a 	mov	r8,sp
   2888c:	5455883a 	add	r10,r10,r17
   28890:	da802315 	stw	r10,140(sp)
   28894:	90800007 	ldb	r2,0(r18)
   28898:	10044626 	beq	r2,zero,299b4 <___vfiprintf_internal_r+0x1264>
   2889c:	90c00047 	ldb	r3,1(r18)
   288a0:	94000044 	addi	r16,r18,1
   288a4:	d8001d85 	stb	zero,118(sp)
   288a8:	0009883a 	mov	r4,zero
   288ac:	000f883a 	mov	r7,zero
   288b0:	027fffc4 	movi	r9,-1
   288b4:	0023883a 	mov	r17,zero
   288b8:	0029883a 	mov	r20,zero
   288bc:	01401604 	movi	r5,88
   288c0:	01800244 	movi	r6,9
   288c4:	03400a84 	movi	r13,42
   288c8:	03001b04 	movi	r12,108
   288cc:	84000044 	addi	r16,r16,1
   288d0:	18bff804 	addi	r2,r3,-32
   288d4:	28827336 	bltu	r5,r2,292a4 <___vfiprintf_internal_r+0xb54>
   288d8:	100490ba 	slli	r2,r2,2
   288dc:	028000f4 	movhi	r10,3
   288e0:	52a23c04 	addi	r10,r10,-30480
   288e4:	1285883a 	add	r2,r2,r10
   288e8:	10800017 	ldw	r2,0(r2)
   288ec:	1000683a 	jmp	r2
   288f0:	00028fd8 	cmpnei	zero,zero,2623
   288f4:	000292a4 	muli	zero,zero,2634
   288f8:	000292a4 	muli	zero,zero,2634
   288fc:	00028ff8 	rdprs	zero,zero,2623
   28900:	000292a4 	muli	zero,zero,2634
   28904:	000292a4 	muli	zero,zero,2634
   28908:	000292a4 	muli	zero,zero,2634
   2890c:	000292a4 	muli	zero,zero,2634
   28910:	000292a4 	muli	zero,zero,2634
   28914:	000292a4 	muli	zero,zero,2634
   28918:	000291e0 	cmpeqi	zero,zero,2631
   2891c:	000291fc 	xorhi	zero,zero,2631
   28920:	000292a4 	muli	zero,zero,2634
   28924:	00028ae4 	muli	zero,zero,2603
   28928:	0002920c 	andi	zero,zero,2632
   2892c:	000292a4 	muli	zero,zero,2634
   28930:	00029004 	movi	zero,2624
   28934:	00029010 	cmplti	zero,zero,2624
   28938:	00029010 	cmplti	zero,zero,2624
   2893c:	00029010 	cmplti	zero,zero,2624
   28940:	00029010 	cmplti	zero,zero,2624
   28944:	00029010 	cmplti	zero,zero,2624
   28948:	00029010 	cmplti	zero,zero,2624
   2894c:	00029010 	cmplti	zero,zero,2624
   28950:	00029010 	cmplti	zero,zero,2624
   28954:	00029010 	cmplti	zero,zero,2624
   28958:	000292a4 	muli	zero,zero,2634
   2895c:	000292a4 	muli	zero,zero,2634
   28960:	000292a4 	muli	zero,zero,2634
   28964:	000292a4 	muli	zero,zero,2634
   28968:	000292a4 	muli	zero,zero,2634
   2896c:	000292a4 	muli	zero,zero,2634
   28970:	000292a4 	muli	zero,zero,2634
   28974:	000292a4 	muli	zero,zero,2634
   28978:	000292a4 	muli	zero,zero,2634
   2897c:	000292a4 	muli	zero,zero,2634
   28980:	0002903c 	xorhi	zero,zero,2624
   28984:	000292a4 	muli	zero,zero,2634
   28988:	000292a4 	muli	zero,zero,2634
   2898c:	000292a4 	muli	zero,zero,2634
   28990:	000292a4 	muli	zero,zero,2634
   28994:	000292a4 	muli	zero,zero,2634
   28998:	000292a4 	muli	zero,zero,2634
   2899c:	000292a4 	muli	zero,zero,2634
   289a0:	000292a4 	muli	zero,zero,2634
   289a4:	000292a4 	muli	zero,zero,2634
   289a8:	000292a4 	muli	zero,zero,2634
   289ac:	00029074 	movhi	zero,2625
   289b0:	000292a4 	muli	zero,zero,2634
   289b4:	000292a4 	muli	zero,zero,2634
   289b8:	000292a4 	muli	zero,zero,2634
   289bc:	000292a4 	muli	zero,zero,2634
   289c0:	000292a4 	muli	zero,zero,2634
   289c4:	000290cc 	andi	zero,zero,2627
   289c8:	000292a4 	muli	zero,zero,2634
   289cc:	000292a4 	muli	zero,zero,2634
   289d0:	0002913c 	xorhi	zero,zero,2628
   289d4:	000292a4 	muli	zero,zero,2634
   289d8:	000292a4 	muli	zero,zero,2634
   289dc:	000292a4 	muli	zero,zero,2634
   289e0:	000292a4 	muli	zero,zero,2634
   289e4:	000292a4 	muli	zero,zero,2634
   289e8:	000292a4 	muli	zero,zero,2634
   289ec:	000292a4 	muli	zero,zero,2634
   289f0:	000292a4 	muli	zero,zero,2634
   289f4:	000292a4 	muli	zero,zero,2634
   289f8:	000292a4 	muli	zero,zero,2634
   289fc:	00028ee8 	cmpgeui	zero,zero,2619
   28a00:	00028f14 	movui	zero,2620
   28a04:	000292a4 	muli	zero,zero,2634
   28a08:	000292a4 	muli	zero,zero,2634
   28a0c:	000292a4 	muli	zero,zero,2634
   28a10:	0002924c 	andi	zero,zero,2633
   28a14:	00028f14 	movui	zero,2620
   28a18:	000292a4 	muli	zero,zero,2634
   28a1c:	000292a4 	muli	zero,zero,2634
   28a20:	00028da8 	cmpgeui	zero,zero,2614
   28a24:	000292a4 	muli	zero,zero,2634
   28a28:	00028db8 	rdprs	zero,zero,2614
   28a2c:	00028df4 	movhi	zero,2615
   28a30:	00028af0 	cmpltui	zero,zero,2603
   28a34:	00028d9c 	xori	zero,zero,2614
   28a38:	000292a4 	muli	zero,zero,2634
   28a3c:	00029178 	rdprs	zero,zero,2629
   28a40:	000292a4 	muli	zero,zero,2634
   28a44:	000291d0 	cmplti	zero,zero,2631
   28a48:	000292a4 	muli	zero,zero,2634
   28a4c:	000292a4 	muli	zero,zero,2634
   28a50:	00028e94 	movui	zero,2618
   28a54:	42000204 	addi	r8,r8,8
   28a58:	da802317 	ldw	r10,140(sp)
   28a5c:	5455883a 	add	r10,r10,r17
   28a60:	da802315 	stw	r10,140(sp)
   28a64:	003f8b06 	br	28894 <__alt_data_end+0xf8028894>
   28a68:	d9002017 	ldw	r4,128(sp)
   28a6c:	a00b883a 	mov	r5,r20
   28a70:	0023e780 	call	23e78 <__swsetup_r>
   28a74:	1003b11e 	bne	r2,zero,2993c <___vfiprintf_internal_r+0x11ec>
   28a78:	a080030b 	ldhu	r2,12(r20)
   28a7c:	00c00284 	movi	r3,10
   28a80:	1080068c 	andi	r2,r2,26
   28a84:	10ff541e 	bne	r2,r3,287d8 <__alt_data_end+0xf80287d8>
   28a88:	a080038f 	ldh	r2,14(r20)
   28a8c:	103f5216 	blt	r2,zero,287d8 <__alt_data_end+0xf80287d8>
   28a90:	d9c02217 	ldw	r7,136(sp)
   28a94:	d9002017 	ldw	r4,128(sp)
   28a98:	e00d883a 	mov	r6,fp
   28a9c:	a00b883a 	mov	r5,r20
   28aa0:	0029bc80 	call	29bc8 <__sbprintf>
   28aa4:	dfc03617 	ldw	ra,216(sp)
   28aa8:	df003517 	ldw	fp,212(sp)
   28aac:	ddc03417 	ldw	r23,208(sp)
   28ab0:	dd803317 	ldw	r22,204(sp)
   28ab4:	dd403217 	ldw	r21,200(sp)
   28ab8:	dd003117 	ldw	r20,196(sp)
   28abc:	dcc03017 	ldw	r19,192(sp)
   28ac0:	dc802f17 	ldw	r18,188(sp)
   28ac4:	dc402e17 	ldw	r17,184(sp)
   28ac8:	dc002d17 	ldw	r16,180(sp)
   28acc:	dec03704 	addi	sp,sp,220
   28ad0:	f800283a 	ret
   28ad4:	0025ea00 	call	25ea0 <__sinit>
   28ad8:	003f2f06 	br	28798 <__alt_data_end+0xf8028798>
   28adc:	0463c83a 	sub	r17,zero,r17
   28ae0:	d8802215 	stw	r2,136(sp)
   28ae4:	a5000114 	ori	r20,r20,4
   28ae8:	80c00007 	ldb	r3,0(r16)
   28aec:	003f7706 	br	288cc <__alt_data_end+0xf80288cc>
   28af0:	00800c04 	movi	r2,48
   28af4:	da802217 	ldw	r10,136(sp)
   28af8:	d8801d05 	stb	r2,116(sp)
   28afc:	00801e04 	movi	r2,120
   28b00:	d8801d45 	stb	r2,117(sp)
   28b04:	d8001d85 	stb	zero,118(sp)
   28b08:	50c00104 	addi	r3,r10,4
   28b0c:	54800017 	ldw	r18,0(r10)
   28b10:	0027883a 	mov	r19,zero
   28b14:	a0800094 	ori	r2,r20,2
   28b18:	48030b16 	blt	r9,zero,29748 <___vfiprintf_internal_r+0xff8>
   28b1c:	00bfdfc4 	movi	r2,-129
   28b20:	a096703a 	and	r11,r20,r2
   28b24:	d8c02215 	stw	r3,136(sp)
   28b28:	5d000094 	ori	r20,r11,2
   28b2c:	90032b1e 	bne	r18,zero,297dc <___vfiprintf_internal_r+0x108c>
   28b30:	00810034 	movhi	r2,1024
   28b34:	10802604 	addi	r2,r2,152
   28b38:	d8802615 	stw	r2,152(sp)
   28b3c:	0039883a 	mov	fp,zero
   28b40:	48017b1e 	bne	r9,zero,29130 <___vfiprintf_internal_r+0x9e0>
   28b44:	0013883a 	mov	r9,zero
   28b48:	0027883a 	mov	r19,zero
   28b4c:	dd401a04 	addi	r21,sp,104
   28b50:	4825883a 	mov	r18,r9
   28b54:	4cc0010e 	bge	r9,r19,28b5c <___vfiprintf_internal_r+0x40c>
   28b58:	9825883a 	mov	r18,r19
   28b5c:	e7003fcc 	andi	fp,fp,255
   28b60:	e700201c 	xori	fp,fp,128
   28b64:	e73fe004 	addi	fp,fp,-128
   28b68:	e0000126 	beq	fp,zero,28b70 <___vfiprintf_internal_r+0x420>
   28b6c:	94800044 	addi	r18,r18,1
   28b70:	a380008c 	andi	r14,r20,2
   28b74:	70000126 	beq	r14,zero,28b7c <___vfiprintf_internal_r+0x42c>
   28b78:	94800084 	addi	r18,r18,2
   28b7c:	a700210c 	andi	fp,r20,132
   28b80:	e001df1e 	bne	fp,zero,29300 <___vfiprintf_internal_r+0xbb0>
   28b84:	8c87c83a 	sub	r3,r17,r18
   28b88:	00c1dd0e 	bge	zero,r3,29300 <___vfiprintf_internal_r+0xbb0>
   28b8c:	01c00404 	movi	r7,16
   28b90:	d8801c17 	ldw	r2,112(sp)
   28b94:	38c3ad0e 	bge	r7,r3,29a4c <___vfiprintf_internal_r+0x12fc>
   28b98:	02810034 	movhi	r10,1024
   28b9c:	52808a04 	addi	r10,r10,552
   28ba0:	dc002915 	stw	r16,164(sp)
   28ba4:	d9801b17 	ldw	r6,108(sp)
   28ba8:	da802415 	stw	r10,144(sp)
   28bac:	03c001c4 	movi	r15,7
   28bb0:	da402515 	stw	r9,148(sp)
   28bb4:	db802815 	stw	r14,160(sp)
   28bb8:	1821883a 	mov	r16,r3
   28bbc:	00000506 	br	28bd4 <___vfiprintf_internal_r+0x484>
   28bc0:	31400084 	addi	r5,r6,2
   28bc4:	42000204 	addi	r8,r8,8
   28bc8:	200d883a 	mov	r6,r4
   28bcc:	843ffc04 	addi	r16,r16,-16
   28bd0:	3c000d0e 	bge	r7,r16,28c08 <___vfiprintf_internal_r+0x4b8>
   28bd4:	10800404 	addi	r2,r2,16
   28bd8:	31000044 	addi	r4,r6,1
   28bdc:	45800015 	stw	r22,0(r8)
   28be0:	41c00115 	stw	r7,4(r8)
   28be4:	d8801c15 	stw	r2,112(sp)
   28be8:	d9001b15 	stw	r4,108(sp)
   28bec:	793ff40e 	bge	r15,r4,28bc0 <__alt_data_end+0xf8028bc0>
   28bf0:	1001b51e 	bne	r2,zero,292c8 <___vfiprintf_internal_r+0xb78>
   28bf4:	843ffc04 	addi	r16,r16,-16
   28bf8:	000d883a 	mov	r6,zero
   28bfc:	01400044 	movi	r5,1
   28c00:	d811883a 	mov	r8,sp
   28c04:	3c3ff316 	blt	r7,r16,28bd4 <__alt_data_end+0xf8028bd4>
   28c08:	8007883a 	mov	r3,r16
   28c0c:	da402517 	ldw	r9,148(sp)
   28c10:	db802817 	ldw	r14,160(sp)
   28c14:	dc002917 	ldw	r16,164(sp)
   28c18:	da802417 	ldw	r10,144(sp)
   28c1c:	1885883a 	add	r2,r3,r2
   28c20:	40c00115 	stw	r3,4(r8)
   28c24:	42800015 	stw	r10,0(r8)
   28c28:	d8801c15 	stw	r2,112(sp)
   28c2c:	d9401b15 	stw	r5,108(sp)
   28c30:	00c001c4 	movi	r3,7
   28c34:	19426016 	blt	r3,r5,295b8 <___vfiprintf_internal_r+0xe68>
   28c38:	d8c01d87 	ldb	r3,118(sp)
   28c3c:	42000204 	addi	r8,r8,8
   28c40:	29000044 	addi	r4,r5,1
   28c44:	1801b31e 	bne	r3,zero,29314 <___vfiprintf_internal_r+0xbc4>
   28c48:	7001c026 	beq	r14,zero,2934c <___vfiprintf_internal_r+0xbfc>
   28c4c:	d8c01d04 	addi	r3,sp,116
   28c50:	10800084 	addi	r2,r2,2
   28c54:	40c00015 	stw	r3,0(r8)
   28c58:	00c00084 	movi	r3,2
   28c5c:	40c00115 	stw	r3,4(r8)
   28c60:	d8801c15 	stw	r2,112(sp)
   28c64:	d9001b15 	stw	r4,108(sp)
   28c68:	00c001c4 	movi	r3,7
   28c6c:	1902650e 	bge	r3,r4,29604 <___vfiprintf_internal_r+0xeb4>
   28c70:	10029a1e 	bne	r2,zero,296dc <___vfiprintf_internal_r+0xf8c>
   28c74:	00c02004 	movi	r3,128
   28c78:	01000044 	movi	r4,1
   28c7c:	000b883a 	mov	r5,zero
   28c80:	d811883a 	mov	r8,sp
   28c84:	e0c1b31e 	bne	fp,r3,29354 <___vfiprintf_internal_r+0xc04>
   28c88:	8cb9c83a 	sub	fp,r17,r18
   28c8c:	0701b10e 	bge	zero,fp,29354 <___vfiprintf_internal_r+0xc04>
   28c90:	01c00404 	movi	r7,16
   28c94:	3f03890e 	bge	r7,fp,29abc <___vfiprintf_internal_r+0x136c>
   28c98:	00c10034 	movhi	r3,1024
   28c9c:	18c08604 	addi	r3,r3,536
   28ca0:	d8c02415 	stw	r3,144(sp)
   28ca4:	8007883a 	mov	r3,r16
   28ca8:	034001c4 	movi	r13,7
   28cac:	e021883a 	mov	r16,fp
   28cb0:	da402515 	stw	r9,148(sp)
   28cb4:	1839883a 	mov	fp,r3
   28cb8:	00000506 	br	28cd0 <___vfiprintf_internal_r+0x580>
   28cbc:	29800084 	addi	r6,r5,2
   28cc0:	42000204 	addi	r8,r8,8
   28cc4:	180b883a 	mov	r5,r3
   28cc8:	843ffc04 	addi	r16,r16,-16
   28ccc:	3c000d0e 	bge	r7,r16,28d04 <___vfiprintf_internal_r+0x5b4>
   28cd0:	10800404 	addi	r2,r2,16
   28cd4:	28c00044 	addi	r3,r5,1
   28cd8:	45c00015 	stw	r23,0(r8)
   28cdc:	41c00115 	stw	r7,4(r8)
   28ce0:	d8801c15 	stw	r2,112(sp)
   28ce4:	d8c01b15 	stw	r3,108(sp)
   28ce8:	68fff40e 	bge	r13,r3,28cbc <__alt_data_end+0xf8028cbc>
   28cec:	1002241e 	bne	r2,zero,29580 <___vfiprintf_internal_r+0xe30>
   28cf0:	843ffc04 	addi	r16,r16,-16
   28cf4:	01800044 	movi	r6,1
   28cf8:	000b883a 	mov	r5,zero
   28cfc:	d811883a 	mov	r8,sp
   28d00:	3c3ff316 	blt	r7,r16,28cd0 <__alt_data_end+0xf8028cd0>
   28d04:	da402517 	ldw	r9,148(sp)
   28d08:	e007883a 	mov	r3,fp
   28d0c:	8039883a 	mov	fp,r16
   28d10:	1821883a 	mov	r16,r3
   28d14:	d8c02417 	ldw	r3,144(sp)
   28d18:	1705883a 	add	r2,r2,fp
   28d1c:	47000115 	stw	fp,4(r8)
   28d20:	40c00015 	stw	r3,0(r8)
   28d24:	d8801c15 	stw	r2,112(sp)
   28d28:	d9801b15 	stw	r6,108(sp)
   28d2c:	00c001c4 	movi	r3,7
   28d30:	19827616 	blt	r3,r6,2970c <___vfiprintf_internal_r+0xfbc>
   28d34:	4cf9c83a 	sub	fp,r9,r19
   28d38:	42000204 	addi	r8,r8,8
   28d3c:	31000044 	addi	r4,r6,1
   28d40:	300b883a 	mov	r5,r6
   28d44:	07018516 	blt	zero,fp,2935c <___vfiprintf_internal_r+0xc0c>
   28d48:	9885883a 	add	r2,r19,r2
   28d4c:	45400015 	stw	r21,0(r8)
   28d50:	44c00115 	stw	r19,4(r8)
   28d54:	d8801c15 	stw	r2,112(sp)
   28d58:	d9001b15 	stw	r4,108(sp)
   28d5c:	00c001c4 	movi	r3,7
   28d60:	1901dd0e 	bge	r3,r4,294d8 <___vfiprintf_internal_r+0xd88>
   28d64:	1002401e 	bne	r2,zero,29668 <___vfiprintf_internal_r+0xf18>
   28d68:	d8001b15 	stw	zero,108(sp)
   28d6c:	a2c0010c 	andi	r11,r20,4
   28d70:	58000226 	beq	r11,zero,28d7c <___vfiprintf_internal_r+0x62c>
   28d74:	8ca7c83a 	sub	r19,r17,r18
   28d78:	04c2f216 	blt	zero,r19,29944 <___vfiprintf_internal_r+0x11f4>
   28d7c:	8c80010e 	bge	r17,r18,28d84 <___vfiprintf_internal_r+0x634>
   28d80:	9023883a 	mov	r17,r18
   28d84:	da802317 	ldw	r10,140(sp)
   28d88:	5455883a 	add	r10,r10,r17
   28d8c:	da802315 	stw	r10,140(sp)
   28d90:	d8001b15 	stw	zero,108(sp)
   28d94:	d811883a 	mov	r8,sp
   28d98:	003ea206 	br	28824 <__alt_data_end+0xf8028824>
   28d9c:	a5000814 	ori	r20,r20,32
   28da0:	80c00007 	ldb	r3,0(r16)
   28da4:	003ec906 	br	288cc <__alt_data_end+0xf80288cc>
   28da8:	80c00007 	ldb	r3,0(r16)
   28dac:	1b030926 	beq	r3,r12,299d4 <___vfiprintf_internal_r+0x1284>
   28db0:	a5000414 	ori	r20,r20,16
   28db4:	003ec506 	br	288cc <__alt_data_end+0xf80288cc>
   28db8:	21003fcc 	andi	r4,r4,255
   28dbc:	20035e1e 	bne	r4,zero,29b38 <___vfiprintf_internal_r+0x13e8>
   28dc0:	a080080c 	andi	r2,r20,32
   28dc4:	1002a526 	beq	r2,zero,2985c <___vfiprintf_internal_r+0x110c>
   28dc8:	da802217 	ldw	r10,136(sp)
   28dcc:	50800017 	ldw	r2,0(r10)
   28dd0:	da802317 	ldw	r10,140(sp)
   28dd4:	5007d7fa 	srai	r3,r10,31
   28dd8:	da802217 	ldw	r10,136(sp)
   28ddc:	10c00115 	stw	r3,4(r2)
   28de0:	52800104 	addi	r10,r10,4
   28de4:	da802215 	stw	r10,136(sp)
   28de8:	da802317 	ldw	r10,140(sp)
   28dec:	12800015 	stw	r10,0(r2)
   28df0:	003e8c06 	br	28824 <__alt_data_end+0xf8028824>
   28df4:	21003fcc 	andi	r4,r4,255
   28df8:	2003511e 	bne	r4,zero,29b40 <___vfiprintf_internal_r+0x13f0>
   28dfc:	a080080c 	andi	r2,r20,32
   28e00:	1000a126 	beq	r2,zero,29088 <___vfiprintf_internal_r+0x938>
   28e04:	da802217 	ldw	r10,136(sp)
   28e08:	d8001d85 	stb	zero,118(sp)
   28e0c:	50800204 	addi	r2,r10,8
   28e10:	54800017 	ldw	r18,0(r10)
   28e14:	54c00117 	ldw	r19,4(r10)
   28e18:	4802b416 	blt	r9,zero,298ec <___vfiprintf_internal_r+0x119c>
   28e1c:	013fdfc4 	movi	r4,-129
   28e20:	94c6b03a 	or	r3,r18,r19
   28e24:	d8802215 	stw	r2,136(sp)
   28e28:	a128703a 	and	r20,r20,r4
   28e2c:	1800a226 	beq	r3,zero,290b8 <___vfiprintf_internal_r+0x968>
   28e30:	0039883a 	mov	fp,zero
   28e34:	dd401a04 	addi	r21,sp,104
   28e38:	9006d0fa 	srli	r3,r18,3
   28e3c:	9808977a 	slli	r4,r19,29
   28e40:	9826d0fa 	srli	r19,r19,3
   28e44:	948001cc 	andi	r18,r18,7
   28e48:	90800c04 	addi	r2,r18,48
   28e4c:	ad7fffc4 	addi	r21,r21,-1
   28e50:	20e4b03a 	or	r18,r4,r3
   28e54:	a8800005 	stb	r2,0(r21)
   28e58:	94c6b03a 	or	r3,r18,r19
   28e5c:	183ff61e 	bne	r3,zero,28e38 <__alt_data_end+0xf8028e38>
   28e60:	a0c0004c 	andi	r3,r20,1
   28e64:	18005926 	beq	r3,zero,28fcc <___vfiprintf_internal_r+0x87c>
   28e68:	10803fcc 	andi	r2,r2,255
   28e6c:	1080201c 	xori	r2,r2,128
   28e70:	10bfe004 	addi	r2,r2,-128
   28e74:	00c00c04 	movi	r3,48
   28e78:	10c05426 	beq	r2,r3,28fcc <___vfiprintf_internal_r+0x87c>
   28e7c:	da801e17 	ldw	r10,120(sp)
   28e80:	a8bfffc4 	addi	r2,r21,-1
   28e84:	a8ffffc5 	stb	r3,-1(r21)
   28e88:	50a7c83a 	sub	r19,r10,r2
   28e8c:	102b883a 	mov	r21,r2
   28e90:	003f2f06 	br	28b50 <__alt_data_end+0xf8028b50>
   28e94:	21003fcc 	andi	r4,r4,255
   28e98:	2003421e 	bne	r4,zero,29ba4 <___vfiprintf_internal_r+0x1454>
   28e9c:	00810034 	movhi	r2,1024
   28ea0:	10802604 	addi	r2,r2,152
   28ea4:	d8802615 	stw	r2,152(sp)
   28ea8:	a080080c 	andi	r2,r20,32
   28eac:	1000aa26 	beq	r2,zero,29158 <___vfiprintf_internal_r+0xa08>
   28eb0:	da802217 	ldw	r10,136(sp)
   28eb4:	54800017 	ldw	r18,0(r10)
   28eb8:	54c00117 	ldw	r19,4(r10)
   28ebc:	52800204 	addi	r10,r10,8
   28ec0:	da802215 	stw	r10,136(sp)
   28ec4:	a080004c 	andi	r2,r20,1
   28ec8:	1001d226 	beq	r2,zero,29614 <___vfiprintf_internal_r+0xec4>
   28ecc:	94c4b03a 	or	r2,r18,r19
   28ed0:	1002351e 	bne	r2,zero,297a8 <___vfiprintf_internal_r+0x1058>
   28ed4:	d8001d85 	stb	zero,118(sp)
   28ed8:	48022216 	blt	r9,zero,29764 <___vfiprintf_internal_r+0x1014>
   28edc:	00bfdfc4 	movi	r2,-129
   28ee0:	a0a8703a 	and	r20,r20,r2
   28ee4:	003f1506 	br	28b3c <__alt_data_end+0xf8028b3c>
   28ee8:	da802217 	ldw	r10,136(sp)
   28eec:	04800044 	movi	r18,1
   28ef0:	d8001d85 	stb	zero,118(sp)
   28ef4:	50800017 	ldw	r2,0(r10)
   28ef8:	52800104 	addi	r10,r10,4
   28efc:	da802215 	stw	r10,136(sp)
   28f00:	d8801005 	stb	r2,64(sp)
   28f04:	9027883a 	mov	r19,r18
   28f08:	dd401004 	addi	r21,sp,64
   28f0c:	0013883a 	mov	r9,zero
   28f10:	003f1706 	br	28b70 <__alt_data_end+0xf8028b70>
   28f14:	21003fcc 	andi	r4,r4,255
   28f18:	2003201e 	bne	r4,zero,29b9c <___vfiprintf_internal_r+0x144c>
   28f1c:	a080080c 	andi	r2,r20,32
   28f20:	10004b26 	beq	r2,zero,29050 <___vfiprintf_internal_r+0x900>
   28f24:	da802217 	ldw	r10,136(sp)
   28f28:	50800117 	ldw	r2,4(r10)
   28f2c:	54800017 	ldw	r18,0(r10)
   28f30:	52800204 	addi	r10,r10,8
   28f34:	da802215 	stw	r10,136(sp)
   28f38:	1027883a 	mov	r19,r2
   28f3c:	10022c16 	blt	r2,zero,297f0 <___vfiprintf_internal_r+0x10a0>
   28f40:	df001d83 	ldbu	fp,118(sp)
   28f44:	48007216 	blt	r9,zero,29110 <___vfiprintf_internal_r+0x9c0>
   28f48:	00ffdfc4 	movi	r3,-129
   28f4c:	94c4b03a 	or	r2,r18,r19
   28f50:	a0e8703a 	and	r20,r20,r3
   28f54:	1000cc26 	beq	r2,zero,29288 <___vfiprintf_internal_r+0xb38>
   28f58:	98021026 	beq	r19,zero,2979c <___vfiprintf_internal_r+0x104c>
   28f5c:	dc402415 	stw	r17,144(sp)
   28f60:	dc002515 	stw	r16,148(sp)
   28f64:	9823883a 	mov	r17,r19
   28f68:	9021883a 	mov	r16,r18
   28f6c:	dd401a04 	addi	r21,sp,104
   28f70:	4825883a 	mov	r18,r9
   28f74:	4027883a 	mov	r19,r8
   28f78:	8009883a 	mov	r4,r16
   28f7c:	880b883a 	mov	r5,r17
   28f80:	01800284 	movi	r6,10
   28f84:	000f883a 	mov	r7,zero
   28f88:	002a90c0 	call	2a90c <__umoddi3>
   28f8c:	10800c04 	addi	r2,r2,48
   28f90:	ad7fffc4 	addi	r21,r21,-1
   28f94:	8009883a 	mov	r4,r16
   28f98:	880b883a 	mov	r5,r17
   28f9c:	a8800005 	stb	r2,0(r21)
   28fa0:	01800284 	movi	r6,10
   28fa4:	000f883a 	mov	r7,zero
   28fa8:	002a3940 	call	2a394 <__udivdi3>
   28fac:	1021883a 	mov	r16,r2
   28fb0:	10c4b03a 	or	r2,r2,r3
   28fb4:	1823883a 	mov	r17,r3
   28fb8:	103fef1e 	bne	r2,zero,28f78 <__alt_data_end+0xf8028f78>
   28fbc:	dc402417 	ldw	r17,144(sp)
   28fc0:	dc002517 	ldw	r16,148(sp)
   28fc4:	9013883a 	mov	r9,r18
   28fc8:	9811883a 	mov	r8,r19
   28fcc:	da801e17 	ldw	r10,120(sp)
   28fd0:	5567c83a 	sub	r19,r10,r21
   28fd4:	003ede06 	br	28b50 <__alt_data_end+0xf8028b50>
   28fd8:	38803fcc 	andi	r2,r7,255
   28fdc:	1080201c 	xori	r2,r2,128
   28fe0:	10bfe004 	addi	r2,r2,-128
   28fe4:	1002371e 	bne	r2,zero,298c4 <___vfiprintf_internal_r+0x1174>
   28fe8:	01000044 	movi	r4,1
   28fec:	01c00804 	movi	r7,32
   28ff0:	80c00007 	ldb	r3,0(r16)
   28ff4:	003e3506 	br	288cc <__alt_data_end+0xf80288cc>
   28ff8:	a5000054 	ori	r20,r20,1
   28ffc:	80c00007 	ldb	r3,0(r16)
   29000:	003e3206 	br	288cc <__alt_data_end+0xf80288cc>
   29004:	a5002014 	ori	r20,r20,128
   29008:	80c00007 	ldb	r3,0(r16)
   2900c:	003e2f06 	br	288cc <__alt_data_end+0xf80288cc>
   29010:	8015883a 	mov	r10,r16
   29014:	0023883a 	mov	r17,zero
   29018:	18bff404 	addi	r2,r3,-48
   2901c:	50c00007 	ldb	r3,0(r10)
   29020:	8c4002a4 	muli	r17,r17,10
   29024:	84000044 	addi	r16,r16,1
   29028:	8015883a 	mov	r10,r16
   2902c:	1463883a 	add	r17,r2,r17
   29030:	18bff404 	addi	r2,r3,-48
   29034:	30bff92e 	bgeu	r6,r2,2901c <__alt_data_end+0xf802901c>
   29038:	003e2506 	br	288d0 <__alt_data_end+0xf80288d0>
   2903c:	21003fcc 	andi	r4,r4,255
   29040:	2002d41e 	bne	r4,zero,29b94 <___vfiprintf_internal_r+0x1444>
   29044:	a5000414 	ori	r20,r20,16
   29048:	a080080c 	andi	r2,r20,32
   2904c:	103fb51e 	bne	r2,zero,28f24 <__alt_data_end+0xf8028f24>
   29050:	a080040c 	andi	r2,r20,16
   29054:	1001f826 	beq	r2,zero,29838 <___vfiprintf_internal_r+0x10e8>
   29058:	da802217 	ldw	r10,136(sp)
   2905c:	54800017 	ldw	r18,0(r10)
   29060:	52800104 	addi	r10,r10,4
   29064:	da802215 	stw	r10,136(sp)
   29068:	9027d7fa 	srai	r19,r18,31
   2906c:	9805883a 	mov	r2,r19
   29070:	003fb206 	br	28f3c <__alt_data_end+0xf8028f3c>
   29074:	21003fcc 	andi	r4,r4,255
   29078:	2002c41e 	bne	r4,zero,29b8c <___vfiprintf_internal_r+0x143c>
   2907c:	a5000414 	ori	r20,r20,16
   29080:	a080080c 	andi	r2,r20,32
   29084:	103f5f1e 	bne	r2,zero,28e04 <__alt_data_end+0xf8028e04>
   29088:	a080040c 	andi	r2,r20,16
   2908c:	10020f26 	beq	r2,zero,298cc <___vfiprintf_internal_r+0x117c>
   29090:	da802217 	ldw	r10,136(sp)
   29094:	d8001d85 	stb	zero,118(sp)
   29098:	0027883a 	mov	r19,zero
   2909c:	50800104 	addi	r2,r10,4
   290a0:	54800017 	ldw	r18,0(r10)
   290a4:	48021116 	blt	r9,zero,298ec <___vfiprintf_internal_r+0x119c>
   290a8:	00ffdfc4 	movi	r3,-129
   290ac:	d8802215 	stw	r2,136(sp)
   290b0:	a0e8703a 	and	r20,r20,r3
   290b4:	903f5e1e 	bne	r18,zero,28e30 <__alt_data_end+0xf8028e30>
   290b8:	0039883a 	mov	fp,zero
   290bc:	4802a626 	beq	r9,zero,29b58 <___vfiprintf_internal_r+0x1408>
   290c0:	0025883a 	mov	r18,zero
   290c4:	0027883a 	mov	r19,zero
   290c8:	003f5a06 	br	28e34 <__alt_data_end+0xf8028e34>
   290cc:	21003fcc 	andi	r4,r4,255
   290d0:	20029f1e 	bne	r4,zero,29b50 <___vfiprintf_internal_r+0x1400>
   290d4:	a5000414 	ori	r20,r20,16
   290d8:	a080080c 	andi	r2,r20,32
   290dc:	10005e1e 	bne	r2,zero,29258 <___vfiprintf_internal_r+0xb08>
   290e0:	a080040c 	andi	r2,r20,16
   290e4:	1001a21e 	bne	r2,zero,29770 <___vfiprintf_internal_r+0x1020>
   290e8:	a080100c 	andi	r2,r20,64
   290ec:	d8001d85 	stb	zero,118(sp)
   290f0:	da802217 	ldw	r10,136(sp)
   290f4:	1002231e 	bne	r2,zero,29984 <___vfiprintf_internal_r+0x1234>
   290f8:	50800104 	addi	r2,r10,4
   290fc:	54800017 	ldw	r18,0(r10)
   29100:	0027883a 	mov	r19,zero
   29104:	4801a00e 	bge	r9,zero,29788 <___vfiprintf_internal_r+0x1038>
   29108:	d8802215 	stw	r2,136(sp)
   2910c:	0039883a 	mov	fp,zero
   29110:	94c4b03a 	or	r2,r18,r19
   29114:	103f901e 	bne	r2,zero,28f58 <__alt_data_end+0xf8028f58>
   29118:	00800044 	movi	r2,1
   2911c:	10803fcc 	andi	r2,r2,255
   29120:	00c00044 	movi	r3,1
   29124:	10c05926 	beq	r2,r3,2928c <___vfiprintf_internal_r+0xb3c>
   29128:	00c00084 	movi	r3,2
   2912c:	10ffe41e 	bne	r2,r3,290c0 <__alt_data_end+0xf80290c0>
   29130:	0025883a 	mov	r18,zero
   29134:	0027883a 	mov	r19,zero
   29138:	00013d06 	br	29630 <___vfiprintf_internal_r+0xee0>
   2913c:	21003fcc 	andi	r4,r4,255
   29140:	2002811e 	bne	r4,zero,29b48 <___vfiprintf_internal_r+0x13f8>
   29144:	00810034 	movhi	r2,1024
   29148:	10802104 	addi	r2,r2,132
   2914c:	d8802615 	stw	r2,152(sp)
   29150:	a080080c 	andi	r2,r20,32
   29154:	103f561e 	bne	r2,zero,28eb0 <__alt_data_end+0xf8028eb0>
   29158:	a080040c 	andi	r2,r20,16
   2915c:	1001d126 	beq	r2,zero,298a4 <___vfiprintf_internal_r+0x1154>
   29160:	da802217 	ldw	r10,136(sp)
   29164:	0027883a 	mov	r19,zero
   29168:	54800017 	ldw	r18,0(r10)
   2916c:	52800104 	addi	r10,r10,4
   29170:	da802215 	stw	r10,136(sp)
   29174:	003f5306 	br	28ec4 <__alt_data_end+0xf8028ec4>
   29178:	da802217 	ldw	r10,136(sp)
   2917c:	d8001d85 	stb	zero,118(sp)
   29180:	55400017 	ldw	r21,0(r10)
   29184:	50c00104 	addi	r3,r10,4
   29188:	a8024226 	beq	r21,zero,29a94 <___vfiprintf_internal_r+0x1344>
   2918c:	48021816 	blt	r9,zero,299f0 <___vfiprintf_internal_r+0x12a0>
   29190:	480d883a 	mov	r6,r9
   29194:	000b883a 	mov	r5,zero
   29198:	a809883a 	mov	r4,r21
   2919c:	d8c02a15 	stw	r3,168(sp)
   291a0:	da002b15 	stw	r8,172(sp)
   291a4:	da402c15 	stw	r9,176(sp)
   291a8:	0026ba40 	call	26ba4 <memchr>
   291ac:	d8c02a17 	ldw	r3,168(sp)
   291b0:	da002b17 	ldw	r8,172(sp)
   291b4:	da402c17 	ldw	r9,176(sp)
   291b8:	10024826 	beq	r2,zero,29adc <___vfiprintf_internal_r+0x138c>
   291bc:	1567c83a 	sub	r19,r2,r21
   291c0:	df001d83 	ldbu	fp,118(sp)
   291c4:	d8c02215 	stw	r3,136(sp)
   291c8:	0013883a 	mov	r9,zero
   291cc:	003e6006 	br	28b50 <__alt_data_end+0xf8028b50>
   291d0:	21003fcc 	andi	r4,r4,255
   291d4:	203fc026 	beq	r4,zero,290d8 <__alt_data_end+0xf80290d8>
   291d8:	d9c01d85 	stb	r7,118(sp)
   291dc:	003fbe06 	br	290d8 <__alt_data_end+0xf80290d8>
   291e0:	da802217 	ldw	r10,136(sp)
   291e4:	54400017 	ldw	r17,0(r10)
   291e8:	50800104 	addi	r2,r10,4
   291ec:	883e3b16 	blt	r17,zero,28adc <__alt_data_end+0xf8028adc>
   291f0:	d8802215 	stw	r2,136(sp)
   291f4:	80c00007 	ldb	r3,0(r16)
   291f8:	003db406 	br	288cc <__alt_data_end+0xf80288cc>
   291fc:	01000044 	movi	r4,1
   29200:	01c00ac4 	movi	r7,43
   29204:	80c00007 	ldb	r3,0(r16)
   29208:	003db006 	br	288cc <__alt_data_end+0xf80288cc>
   2920c:	80c00007 	ldb	r3,0(r16)
   29210:	82800044 	addi	r10,r16,1
   29214:	1b423c26 	beq	r3,r13,29b08 <___vfiprintf_internal_r+0x13b8>
   29218:	18bff404 	addi	r2,r3,-48
   2921c:	0013883a 	mov	r9,zero
   29220:	30822b36 	bltu	r6,r2,29ad0 <___vfiprintf_internal_r+0x1380>
   29224:	50c00007 	ldb	r3,0(r10)
   29228:	4a4002a4 	muli	r9,r9,10
   2922c:	54000044 	addi	r16,r10,1
   29230:	8015883a 	mov	r10,r16
   29234:	4893883a 	add	r9,r9,r2
   29238:	18bff404 	addi	r2,r3,-48
   2923c:	30bff92e 	bgeu	r6,r2,29224 <__alt_data_end+0xf8029224>
   29240:	483da30e 	bge	r9,zero,288d0 <__alt_data_end+0xf80288d0>
   29244:	027fffc4 	movi	r9,-1
   29248:	003da106 	br	288d0 <__alt_data_end+0xf80288d0>
   2924c:	a5001014 	ori	r20,r20,64
   29250:	80c00007 	ldb	r3,0(r16)
   29254:	003d9d06 	br	288cc <__alt_data_end+0xf80288cc>
   29258:	da802217 	ldw	r10,136(sp)
   2925c:	d8001d85 	stb	zero,118(sp)
   29260:	50c00204 	addi	r3,r10,8
   29264:	54800017 	ldw	r18,0(r10)
   29268:	54c00117 	ldw	r19,4(r10)
   2926c:	4801ca16 	blt	r9,zero,29998 <___vfiprintf_internal_r+0x1248>
   29270:	013fdfc4 	movi	r4,-129
   29274:	94c4b03a 	or	r2,r18,r19
   29278:	d8c02215 	stw	r3,136(sp)
   2927c:	a128703a 	and	r20,r20,r4
   29280:	0039883a 	mov	fp,zero
   29284:	103f341e 	bne	r2,zero,28f58 <__alt_data_end+0xf8028f58>
   29288:	483e2e26 	beq	r9,zero,28b44 <__alt_data_end+0xf8028b44>
   2928c:	0025883a 	mov	r18,zero
   29290:	94800c04 	addi	r18,r18,48
   29294:	dc8019c5 	stb	r18,103(sp)
   29298:	dcc02717 	ldw	r19,156(sp)
   2929c:	dd4019c4 	addi	r21,sp,103
   292a0:	003e2b06 	br	28b50 <__alt_data_end+0xf8028b50>
   292a4:	21003fcc 	andi	r4,r4,255
   292a8:	2002361e 	bne	r4,zero,29b84 <___vfiprintf_internal_r+0x1434>
   292ac:	1801c126 	beq	r3,zero,299b4 <___vfiprintf_internal_r+0x1264>
   292b0:	04800044 	movi	r18,1
   292b4:	d8c01005 	stb	r3,64(sp)
   292b8:	d8001d85 	stb	zero,118(sp)
   292bc:	9027883a 	mov	r19,r18
   292c0:	dd401004 	addi	r21,sp,64
   292c4:	003f1106 	br	28f0c <__alt_data_end+0xf8028f0c>
   292c8:	d9402117 	ldw	r5,132(sp)
   292cc:	d9002017 	ldw	r4,128(sp)
   292d0:	d9801a04 	addi	r6,sp,104
   292d4:	d9c02b15 	stw	r7,172(sp)
   292d8:	dbc02a15 	stw	r15,168(sp)
   292dc:	002863c0 	call	2863c <__sprint_r.part.0>
   292e0:	d9c02b17 	ldw	r7,172(sp)
   292e4:	dbc02a17 	ldw	r15,168(sp)
   292e8:	10006d1e 	bne	r2,zero,294a0 <___vfiprintf_internal_r+0xd50>
   292ec:	d9801b17 	ldw	r6,108(sp)
   292f0:	d8801c17 	ldw	r2,112(sp)
   292f4:	d811883a 	mov	r8,sp
   292f8:	31400044 	addi	r5,r6,1
   292fc:	003e3306 	br	28bcc <__alt_data_end+0xf8028bcc>
   29300:	d9401b17 	ldw	r5,108(sp)
   29304:	d8801c17 	ldw	r2,112(sp)
   29308:	29000044 	addi	r4,r5,1
   2930c:	d8c01d87 	ldb	r3,118(sp)
   29310:	183e4d26 	beq	r3,zero,28c48 <__alt_data_end+0xf8028c48>
   29314:	00c00044 	movi	r3,1
   29318:	d9401d84 	addi	r5,sp,118
   2931c:	10c5883a 	add	r2,r2,r3
   29320:	41400015 	stw	r5,0(r8)
   29324:	40c00115 	stw	r3,4(r8)
   29328:	d8801c15 	stw	r2,112(sp)
   2932c:	d9001b15 	stw	r4,108(sp)
   29330:	014001c4 	movi	r5,7
   29334:	2900a90e 	bge	r5,r4,295dc <___vfiprintf_internal_r+0xe8c>
   29338:	1000da1e 	bne	r2,zero,296a4 <___vfiprintf_internal_r+0xf54>
   2933c:	7000ab1e 	bne	r14,zero,295ec <___vfiprintf_internal_r+0xe9c>
   29340:	000b883a 	mov	r5,zero
   29344:	1809883a 	mov	r4,r3
   29348:	d811883a 	mov	r8,sp
   2934c:	00c02004 	movi	r3,128
   29350:	e0fe4d26 	beq	fp,r3,28c88 <__alt_data_end+0xf8028c88>
   29354:	4cf9c83a 	sub	fp,r9,r19
   29358:	073e7b0e 	bge	zero,fp,28d48 <__alt_data_end+0xf8028d48>
   2935c:	01c00404 	movi	r7,16
   29360:	3f01900e 	bge	r7,fp,299a4 <___vfiprintf_internal_r+0x1254>
   29364:	00c10034 	movhi	r3,1024
   29368:	18c08604 	addi	r3,r3,536
   2936c:	d8c02415 	stw	r3,144(sp)
   29370:	034001c4 	movi	r13,7
   29374:	00000506 	br	2938c <___vfiprintf_internal_r+0xc3c>
   29378:	29000084 	addi	r4,r5,2
   2937c:	42000204 	addi	r8,r8,8
   29380:	180b883a 	mov	r5,r3
   29384:	e73ffc04 	addi	fp,fp,-16
   29388:	3f000d0e 	bge	r7,fp,293c0 <___vfiprintf_internal_r+0xc70>
   2938c:	10800404 	addi	r2,r2,16
   29390:	28c00044 	addi	r3,r5,1
   29394:	45c00015 	stw	r23,0(r8)
   29398:	41c00115 	stw	r7,4(r8)
   2939c:	d8801c15 	stw	r2,112(sp)
   293a0:	d8c01b15 	stw	r3,108(sp)
   293a4:	68fff40e 	bge	r13,r3,29378 <__alt_data_end+0xf8029378>
   293a8:	1000101e 	bne	r2,zero,293ec <___vfiprintf_internal_r+0xc9c>
   293ac:	e73ffc04 	addi	fp,fp,-16
   293b0:	01000044 	movi	r4,1
   293b4:	000b883a 	mov	r5,zero
   293b8:	d811883a 	mov	r8,sp
   293bc:	3f3ff316 	blt	r7,fp,2938c <__alt_data_end+0xf802938c>
   293c0:	da802417 	ldw	r10,144(sp)
   293c4:	1705883a 	add	r2,r2,fp
   293c8:	47000115 	stw	fp,4(r8)
   293cc:	42800015 	stw	r10,0(r8)
   293d0:	d8801c15 	stw	r2,112(sp)
   293d4:	d9001b15 	stw	r4,108(sp)
   293d8:	00c001c4 	movi	r3,7
   293dc:	19003616 	blt	r3,r4,294b8 <___vfiprintf_internal_r+0xd68>
   293e0:	42000204 	addi	r8,r8,8
   293e4:	21000044 	addi	r4,r4,1
   293e8:	003e5706 	br	28d48 <__alt_data_end+0xf8028d48>
   293ec:	d9402117 	ldw	r5,132(sp)
   293f0:	d9002017 	ldw	r4,128(sp)
   293f4:	d9801a04 	addi	r6,sp,104
   293f8:	d9c02b15 	stw	r7,172(sp)
   293fc:	db402a15 	stw	r13,168(sp)
   29400:	002863c0 	call	2863c <__sprint_r.part.0>
   29404:	d9c02b17 	ldw	r7,172(sp)
   29408:	db402a17 	ldw	r13,168(sp)
   2940c:	1000241e 	bne	r2,zero,294a0 <___vfiprintf_internal_r+0xd50>
   29410:	d9401b17 	ldw	r5,108(sp)
   29414:	d8801c17 	ldw	r2,112(sp)
   29418:	d811883a 	mov	r8,sp
   2941c:	29000044 	addi	r4,r5,1
   29420:	003fd806 	br	29384 <__alt_data_end+0xf8029384>
   29424:	d9401b17 	ldw	r5,108(sp)
   29428:	00c10034 	movhi	r3,1024
   2942c:	18c08a04 	addi	r3,r3,552
   29430:	d8c02415 	stw	r3,144(sp)
   29434:	29400044 	addi	r5,r5,1
   29438:	d8c02417 	ldw	r3,144(sp)
   2943c:	14c5883a 	add	r2,r2,r19
   29440:	44c00115 	stw	r19,4(r8)
   29444:	40c00015 	stw	r3,0(r8)
   29448:	d8801c15 	stw	r2,112(sp)
   2944c:	d9401b15 	stw	r5,108(sp)
   29450:	00c001c4 	movi	r3,7
   29454:	1940070e 	bge	r3,r5,29474 <___vfiprintf_internal_r+0xd24>
   29458:	103e4826 	beq	r2,zero,28d7c <__alt_data_end+0xf8028d7c>
   2945c:	d9402117 	ldw	r5,132(sp)
   29460:	d9002017 	ldw	r4,128(sp)
   29464:	d9801a04 	addi	r6,sp,104
   29468:	002863c0 	call	2863c <__sprint_r.part.0>
   2946c:	10000c1e 	bne	r2,zero,294a0 <___vfiprintf_internal_r+0xd50>
   29470:	d8801c17 	ldw	r2,112(sp)
   29474:	8c80010e 	bge	r17,r18,2947c <___vfiprintf_internal_r+0xd2c>
   29478:	9023883a 	mov	r17,r18
   2947c:	da802317 	ldw	r10,140(sp)
   29480:	5455883a 	add	r10,r10,r17
   29484:	da802315 	stw	r10,140(sp)
   29488:	103e4126 	beq	r2,zero,28d90 <__alt_data_end+0xf8028d90>
   2948c:	d9402117 	ldw	r5,132(sp)
   29490:	d9002017 	ldw	r4,128(sp)
   29494:	d9801a04 	addi	r6,sp,104
   29498:	002863c0 	call	2863c <__sprint_r.part.0>
   2949c:	103e3c26 	beq	r2,zero,28d90 <__alt_data_end+0xf8028d90>
   294a0:	dd002117 	ldw	r20,132(sp)
   294a4:	a080030b 	ldhu	r2,12(r20)
   294a8:	1080100c 	andi	r2,r2,64
   294ac:	1001231e 	bne	r2,zero,2993c <___vfiprintf_internal_r+0x11ec>
   294b0:	d8802317 	ldw	r2,140(sp)
   294b4:	003d7b06 	br	28aa4 <__alt_data_end+0xf8028aa4>
   294b8:	1000991e 	bne	r2,zero,29720 <___vfiprintf_internal_r+0xfd0>
   294bc:	00c00044 	movi	r3,1
   294c0:	9805883a 	mov	r2,r19
   294c4:	dd400015 	stw	r21,0(sp)
   294c8:	dcc00115 	stw	r19,4(sp)
   294cc:	dcc01c15 	stw	r19,112(sp)
   294d0:	d8c01b15 	stw	r3,108(sp)
   294d4:	d811883a 	mov	r8,sp
   294d8:	42000204 	addi	r8,r8,8
   294dc:	a2c0010c 	andi	r11,r20,4
   294e0:	583fe426 	beq	r11,zero,29474 <__alt_data_end+0xf8029474>
   294e4:	8ca7c83a 	sub	r19,r17,r18
   294e8:	04ffe20e 	bge	zero,r19,29474 <__alt_data_end+0xf8029474>
   294ec:	01c00404 	movi	r7,16
   294f0:	3cffcc0e 	bge	r7,r19,29424 <__alt_data_end+0xf8029424>
   294f4:	02810034 	movhi	r10,1024
   294f8:	52808a04 	addi	r10,r10,552
   294fc:	d9001b17 	ldw	r4,108(sp)
   29500:	da802415 	stw	r10,144(sp)
   29504:	382b883a 	mov	r21,r7
   29508:	050001c4 	movi	r20,7
   2950c:	df002017 	ldw	fp,128(sp)
   29510:	00000506 	br	29528 <___vfiprintf_internal_r+0xdd8>
   29514:	21400084 	addi	r5,r4,2
   29518:	42000204 	addi	r8,r8,8
   2951c:	1809883a 	mov	r4,r3
   29520:	9cfffc04 	addi	r19,r19,-16
   29524:	acffc40e 	bge	r21,r19,29438 <__alt_data_end+0xf8029438>
   29528:	10800404 	addi	r2,r2,16
   2952c:	20c00044 	addi	r3,r4,1
   29530:	45800015 	stw	r22,0(r8)
   29534:	45400115 	stw	r21,4(r8)
   29538:	d8801c15 	stw	r2,112(sp)
   2953c:	d8c01b15 	stw	r3,108(sp)
   29540:	a0fff40e 	bge	r20,r3,29514 <__alt_data_end+0xf8029514>
   29544:	1000041e 	bne	r2,zero,29558 <___vfiprintf_internal_r+0xe08>
   29548:	01400044 	movi	r5,1
   2954c:	0009883a 	mov	r4,zero
   29550:	d811883a 	mov	r8,sp
   29554:	003ff206 	br	29520 <__alt_data_end+0xf8029520>
   29558:	d9402117 	ldw	r5,132(sp)
   2955c:	d9801a04 	addi	r6,sp,104
   29560:	e009883a 	mov	r4,fp
   29564:	002863c0 	call	2863c <__sprint_r.part.0>
   29568:	103fcd1e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   2956c:	d9001b17 	ldw	r4,108(sp)
   29570:	d8801c17 	ldw	r2,112(sp)
   29574:	d811883a 	mov	r8,sp
   29578:	21400044 	addi	r5,r4,1
   2957c:	003fe806 	br	29520 <__alt_data_end+0xf8029520>
   29580:	d9402117 	ldw	r5,132(sp)
   29584:	d9002017 	ldw	r4,128(sp)
   29588:	d9801a04 	addi	r6,sp,104
   2958c:	d9c02b15 	stw	r7,172(sp)
   29590:	db402a15 	stw	r13,168(sp)
   29594:	002863c0 	call	2863c <__sprint_r.part.0>
   29598:	d9c02b17 	ldw	r7,172(sp)
   2959c:	db402a17 	ldw	r13,168(sp)
   295a0:	103fbf1e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   295a4:	d9401b17 	ldw	r5,108(sp)
   295a8:	d8801c17 	ldw	r2,112(sp)
   295ac:	d811883a 	mov	r8,sp
   295b0:	29800044 	addi	r6,r5,1
   295b4:	003dc406 	br	28cc8 <__alt_data_end+0xf8028cc8>
   295b8:	1000d21e 	bne	r2,zero,29904 <___vfiprintf_internal_r+0x11b4>
   295bc:	d8c01d87 	ldb	r3,118(sp)
   295c0:	18009526 	beq	r3,zero,29818 <___vfiprintf_internal_r+0x10c8>
   295c4:	00800044 	movi	r2,1
   295c8:	d8c01d84 	addi	r3,sp,118
   295cc:	1009883a 	mov	r4,r2
   295d0:	d8c00015 	stw	r3,0(sp)
   295d4:	d8800115 	stw	r2,4(sp)
   295d8:	d811883a 	mov	r8,sp
   295dc:	200b883a 	mov	r5,r4
   295e0:	42000204 	addi	r8,r8,8
   295e4:	21000044 	addi	r4,r4,1
   295e8:	003d9706 	br	28c48 <__alt_data_end+0xf8028c48>
   295ec:	d9001d04 	addi	r4,sp,116
   295f0:	00800084 	movi	r2,2
   295f4:	d9000015 	stw	r4,0(sp)
   295f8:	d8800115 	stw	r2,4(sp)
   295fc:	1809883a 	mov	r4,r3
   29600:	d811883a 	mov	r8,sp
   29604:	200b883a 	mov	r5,r4
   29608:	42000204 	addi	r8,r8,8
   2960c:	21000044 	addi	r4,r4,1
   29610:	003f4e06 	br	2934c <__alt_data_end+0xf802934c>
   29614:	d8001d85 	stb	zero,118(sp)
   29618:	48005016 	blt	r9,zero,2975c <___vfiprintf_internal_r+0x100c>
   2961c:	00ffdfc4 	movi	r3,-129
   29620:	94c4b03a 	or	r2,r18,r19
   29624:	a0e8703a 	and	r20,r20,r3
   29628:	103d4426 	beq	r2,zero,28b3c <__alt_data_end+0xf8028b3c>
   2962c:	0039883a 	mov	fp,zero
   29630:	d9002617 	ldw	r4,152(sp)
   29634:	dd401a04 	addi	r21,sp,104
   29638:	908003cc 	andi	r2,r18,15
   2963c:	9806973a 	slli	r3,r19,28
   29640:	2085883a 	add	r2,r4,r2
   29644:	9024d13a 	srli	r18,r18,4
   29648:	10800003 	ldbu	r2,0(r2)
   2964c:	9826d13a 	srli	r19,r19,4
   29650:	ad7fffc4 	addi	r21,r21,-1
   29654:	1ca4b03a 	or	r18,r3,r18
   29658:	a8800005 	stb	r2,0(r21)
   2965c:	94c4b03a 	or	r2,r18,r19
   29660:	103ff51e 	bne	r2,zero,29638 <__alt_data_end+0xf8029638>
   29664:	003e5906 	br	28fcc <__alt_data_end+0xf8028fcc>
   29668:	d9402117 	ldw	r5,132(sp)
   2966c:	d9002017 	ldw	r4,128(sp)
   29670:	d9801a04 	addi	r6,sp,104
   29674:	002863c0 	call	2863c <__sprint_r.part.0>
   29678:	103f891e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   2967c:	d8801c17 	ldw	r2,112(sp)
   29680:	d811883a 	mov	r8,sp
   29684:	003f9506 	br	294dc <__alt_data_end+0xf80294dc>
   29688:	d9402117 	ldw	r5,132(sp)
   2968c:	d9002017 	ldw	r4,128(sp)
   29690:	d9801a04 	addi	r6,sp,104
   29694:	002863c0 	call	2863c <__sprint_r.part.0>
   29698:	103f811e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   2969c:	d811883a 	mov	r8,sp
   296a0:	003ced06 	br	28a58 <__alt_data_end+0xf8028a58>
   296a4:	d9402117 	ldw	r5,132(sp)
   296a8:	d9002017 	ldw	r4,128(sp)
   296ac:	d9801a04 	addi	r6,sp,104
   296b0:	da402c15 	stw	r9,176(sp)
   296b4:	db802a15 	stw	r14,168(sp)
   296b8:	002863c0 	call	2863c <__sprint_r.part.0>
   296bc:	da402c17 	ldw	r9,176(sp)
   296c0:	db802a17 	ldw	r14,168(sp)
   296c4:	103f761e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   296c8:	d9401b17 	ldw	r5,108(sp)
   296cc:	d8801c17 	ldw	r2,112(sp)
   296d0:	d811883a 	mov	r8,sp
   296d4:	29000044 	addi	r4,r5,1
   296d8:	003d5b06 	br	28c48 <__alt_data_end+0xf8028c48>
   296dc:	d9402117 	ldw	r5,132(sp)
   296e0:	d9002017 	ldw	r4,128(sp)
   296e4:	d9801a04 	addi	r6,sp,104
   296e8:	da402c15 	stw	r9,176(sp)
   296ec:	002863c0 	call	2863c <__sprint_r.part.0>
   296f0:	da402c17 	ldw	r9,176(sp)
   296f4:	103f6a1e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   296f8:	d9401b17 	ldw	r5,108(sp)
   296fc:	d8801c17 	ldw	r2,112(sp)
   29700:	d811883a 	mov	r8,sp
   29704:	29000044 	addi	r4,r5,1
   29708:	003f1006 	br	2934c <__alt_data_end+0xf802934c>
   2970c:	1000c31e 	bne	r2,zero,29a1c <___vfiprintf_internal_r+0x12cc>
   29710:	01000044 	movi	r4,1
   29714:	000b883a 	mov	r5,zero
   29718:	d811883a 	mov	r8,sp
   2971c:	003f0d06 	br	29354 <__alt_data_end+0xf8029354>
   29720:	d9402117 	ldw	r5,132(sp)
   29724:	d9002017 	ldw	r4,128(sp)
   29728:	d9801a04 	addi	r6,sp,104
   2972c:	002863c0 	call	2863c <__sprint_r.part.0>
   29730:	103f5b1e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   29734:	d9001b17 	ldw	r4,108(sp)
   29738:	d8801c17 	ldw	r2,112(sp)
   2973c:	d811883a 	mov	r8,sp
   29740:	21000044 	addi	r4,r4,1
   29744:	003d8006 	br	28d48 <__alt_data_end+0xf8028d48>
   29748:	01010034 	movhi	r4,1024
   2974c:	21002604 	addi	r4,r4,152
   29750:	d9002615 	stw	r4,152(sp)
   29754:	d8c02215 	stw	r3,136(sp)
   29758:	1029883a 	mov	r20,r2
   2975c:	94c4b03a 	or	r2,r18,r19
   29760:	103fb21e 	bne	r2,zero,2962c <__alt_data_end+0xf802962c>
   29764:	0039883a 	mov	fp,zero
   29768:	00800084 	movi	r2,2
   2976c:	003e6b06 	br	2911c <__alt_data_end+0xf802911c>
   29770:	da802217 	ldw	r10,136(sp)
   29774:	d8001d85 	stb	zero,118(sp)
   29778:	0027883a 	mov	r19,zero
   2977c:	50800104 	addi	r2,r10,4
   29780:	54800017 	ldw	r18,0(r10)
   29784:	483e6016 	blt	r9,zero,29108 <__alt_data_end+0xf8029108>
   29788:	00ffdfc4 	movi	r3,-129
   2978c:	d8802215 	stw	r2,136(sp)
   29790:	a0e8703a 	and	r20,r20,r3
   29794:	0039883a 	mov	fp,zero
   29798:	903ebb26 	beq	r18,zero,29288 <__alt_data_end+0xf8029288>
   2979c:	00800244 	movi	r2,9
   297a0:	14bdee36 	bltu	r2,r18,28f5c <__alt_data_end+0xf8028f5c>
   297a4:	003eba06 	br	29290 <__alt_data_end+0xf8029290>
   297a8:	00800c04 	movi	r2,48
   297ac:	d8c01d45 	stb	r3,117(sp)
   297b0:	d8801d05 	stb	r2,116(sp)
   297b4:	d8001d85 	stb	zero,118(sp)
   297b8:	a0c00094 	ori	r3,r20,2
   297bc:	4800a916 	blt	r9,zero,29a64 <___vfiprintf_internal_r+0x1314>
   297c0:	00bfdfc4 	movi	r2,-129
   297c4:	a096703a 	and	r11,r20,r2
   297c8:	5d000094 	ori	r20,r11,2
   297cc:	0039883a 	mov	fp,zero
   297d0:	003f9706 	br	29630 <__alt_data_end+0xf8029630>
   297d4:	8025883a 	mov	r18,r16
   297d8:	003c2e06 	br	28894 <__alt_data_end+0xf8028894>
   297dc:	00810034 	movhi	r2,1024
   297e0:	10802604 	addi	r2,r2,152
   297e4:	0039883a 	mov	fp,zero
   297e8:	d8802615 	stw	r2,152(sp)
   297ec:	003f9006 	br	29630 <__alt_data_end+0xf8029630>
   297f0:	04a5c83a 	sub	r18,zero,r18
   297f4:	07000b44 	movi	fp,45
   297f8:	9004c03a 	cmpne	r2,r18,zero
   297fc:	04e7c83a 	sub	r19,zero,r19
   29800:	df001d85 	stb	fp,118(sp)
   29804:	98a7c83a 	sub	r19,r19,r2
   29808:	48009f16 	blt	r9,zero,29a88 <___vfiprintf_internal_r+0x1338>
   2980c:	00bfdfc4 	movi	r2,-129
   29810:	a0a8703a 	and	r20,r20,r2
   29814:	003dd006 	br	28f58 <__alt_data_end+0xf8028f58>
   29818:	70004c26 	beq	r14,zero,2994c <___vfiprintf_internal_r+0x11fc>
   2981c:	00800084 	movi	r2,2
   29820:	d8c01d04 	addi	r3,sp,116
   29824:	d8c00015 	stw	r3,0(sp)
   29828:	d8800115 	stw	r2,4(sp)
   2982c:	01000044 	movi	r4,1
   29830:	d811883a 	mov	r8,sp
   29834:	003f7306 	br	29604 <__alt_data_end+0xf8029604>
   29838:	a080100c 	andi	r2,r20,64
   2983c:	da802217 	ldw	r10,136(sp)
   29840:	103e0626 	beq	r2,zero,2905c <__alt_data_end+0xf802905c>
   29844:	5480000f 	ldh	r18,0(r10)
   29848:	52800104 	addi	r10,r10,4
   2984c:	da802215 	stw	r10,136(sp)
   29850:	9027d7fa 	srai	r19,r18,31
   29854:	9805883a 	mov	r2,r19
   29858:	003db806 	br	28f3c <__alt_data_end+0xf8028f3c>
   2985c:	a080040c 	andi	r2,r20,16
   29860:	1000091e 	bne	r2,zero,29888 <___vfiprintf_internal_r+0x1138>
   29864:	a2c0100c 	andi	r11,r20,64
   29868:	58000726 	beq	r11,zero,29888 <___vfiprintf_internal_r+0x1138>
   2986c:	da802217 	ldw	r10,136(sp)
   29870:	50800017 	ldw	r2,0(r10)
   29874:	52800104 	addi	r10,r10,4
   29878:	da802215 	stw	r10,136(sp)
   2987c:	da802317 	ldw	r10,140(sp)
   29880:	1280000d 	sth	r10,0(r2)
   29884:	003be706 	br	28824 <__alt_data_end+0xf8028824>
   29888:	da802217 	ldw	r10,136(sp)
   2988c:	50800017 	ldw	r2,0(r10)
   29890:	52800104 	addi	r10,r10,4
   29894:	da802215 	stw	r10,136(sp)
   29898:	da802317 	ldw	r10,140(sp)
   2989c:	12800015 	stw	r10,0(r2)
   298a0:	003be006 	br	28824 <__alt_data_end+0xf8028824>
   298a4:	a080100c 	andi	r2,r20,64
   298a8:	da802217 	ldw	r10,136(sp)
   298ac:	10003026 	beq	r2,zero,29970 <___vfiprintf_internal_r+0x1220>
   298b0:	5480000b 	ldhu	r18,0(r10)
   298b4:	52800104 	addi	r10,r10,4
   298b8:	0027883a 	mov	r19,zero
   298bc:	da802215 	stw	r10,136(sp)
   298c0:	003d8006 	br	28ec4 <__alt_data_end+0xf8028ec4>
   298c4:	80c00007 	ldb	r3,0(r16)
   298c8:	003c0006 	br	288cc <__alt_data_end+0xf80288cc>
   298cc:	a080100c 	andi	r2,r20,64
   298d0:	d8001d85 	stb	zero,118(sp)
   298d4:	da802217 	ldw	r10,136(sp)
   298d8:	1000201e 	bne	r2,zero,2995c <___vfiprintf_internal_r+0x120c>
   298dc:	50800104 	addi	r2,r10,4
   298e0:	54800017 	ldw	r18,0(r10)
   298e4:	0027883a 	mov	r19,zero
   298e8:	483def0e 	bge	r9,zero,290a8 <__alt_data_end+0xf80290a8>
   298ec:	94c6b03a 	or	r3,r18,r19
   298f0:	d8802215 	stw	r2,136(sp)
   298f4:	183d4e1e 	bne	r3,zero,28e30 <__alt_data_end+0xf8028e30>
   298f8:	0039883a 	mov	fp,zero
   298fc:	0005883a 	mov	r2,zero
   29900:	003e0606 	br	2911c <__alt_data_end+0xf802911c>
   29904:	d9402117 	ldw	r5,132(sp)
   29908:	d9002017 	ldw	r4,128(sp)
   2990c:	d9801a04 	addi	r6,sp,104
   29910:	da402c15 	stw	r9,176(sp)
   29914:	db802a15 	stw	r14,168(sp)
   29918:	002863c0 	call	2863c <__sprint_r.part.0>
   2991c:	da402c17 	ldw	r9,176(sp)
   29920:	db802a17 	ldw	r14,168(sp)
   29924:	103ede1e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   29928:	d9401b17 	ldw	r5,108(sp)
   2992c:	d8801c17 	ldw	r2,112(sp)
   29930:	d811883a 	mov	r8,sp
   29934:	29000044 	addi	r4,r5,1
   29938:	003e7406 	br	2930c <__alt_data_end+0xf802930c>
   2993c:	00bfffc4 	movi	r2,-1
   29940:	003c5806 	br	28aa4 <__alt_data_end+0xf8028aa4>
   29944:	d811883a 	mov	r8,sp
   29948:	003ee806 	br	294ec <__alt_data_end+0xf80294ec>
   2994c:	000b883a 	mov	r5,zero
   29950:	01000044 	movi	r4,1
   29954:	d811883a 	mov	r8,sp
   29958:	003e7c06 	br	2934c <__alt_data_end+0xf802934c>
   2995c:	50800104 	addi	r2,r10,4
   29960:	5480000b 	ldhu	r18,0(r10)
   29964:	0027883a 	mov	r19,zero
   29968:	483dcf0e 	bge	r9,zero,290a8 <__alt_data_end+0xf80290a8>
   2996c:	003fdf06 	br	298ec <__alt_data_end+0xf80298ec>
   29970:	54800017 	ldw	r18,0(r10)
   29974:	52800104 	addi	r10,r10,4
   29978:	0027883a 	mov	r19,zero
   2997c:	da802215 	stw	r10,136(sp)
   29980:	003d5006 	br	28ec4 <__alt_data_end+0xf8028ec4>
   29984:	50800104 	addi	r2,r10,4
   29988:	5480000b 	ldhu	r18,0(r10)
   2998c:	0027883a 	mov	r19,zero
   29990:	483f7d0e 	bge	r9,zero,29788 <__alt_data_end+0xf8029788>
   29994:	003ddc06 	br	29108 <__alt_data_end+0xf8029108>
   29998:	d8c02215 	stw	r3,136(sp)
   2999c:	0039883a 	mov	fp,zero
   299a0:	003ddb06 	br	29110 <__alt_data_end+0xf8029110>
   299a4:	02810034 	movhi	r10,1024
   299a8:	52808604 	addi	r10,r10,536
   299ac:	da802415 	stw	r10,144(sp)
   299b0:	003e8306 	br	293c0 <__alt_data_end+0xf80293c0>
   299b4:	d8801c17 	ldw	r2,112(sp)
   299b8:	dd002117 	ldw	r20,132(sp)
   299bc:	103eb926 	beq	r2,zero,294a4 <__alt_data_end+0xf80294a4>
   299c0:	d9002017 	ldw	r4,128(sp)
   299c4:	d9801a04 	addi	r6,sp,104
   299c8:	a00b883a 	mov	r5,r20
   299cc:	002863c0 	call	2863c <__sprint_r.part.0>
   299d0:	003eb406 	br	294a4 <__alt_data_end+0xf80294a4>
   299d4:	80c00043 	ldbu	r3,1(r16)
   299d8:	a5000814 	ori	r20,r20,32
   299dc:	84000044 	addi	r16,r16,1
   299e0:	18c03fcc 	andi	r3,r3,255
   299e4:	18c0201c 	xori	r3,r3,128
   299e8:	18ffe004 	addi	r3,r3,-128
   299ec:	003bb706 	br	288cc <__alt_data_end+0xf80288cc>
   299f0:	a809883a 	mov	r4,r21
   299f4:	d8c02a15 	stw	r3,168(sp)
   299f8:	da002b15 	stw	r8,172(sp)
   299fc:	0021ab00 	call	21ab0 <strlen>
   29a00:	d8c02a17 	ldw	r3,168(sp)
   29a04:	1027883a 	mov	r19,r2
   29a08:	df001d83 	ldbu	fp,118(sp)
   29a0c:	d8c02215 	stw	r3,136(sp)
   29a10:	0013883a 	mov	r9,zero
   29a14:	da002b17 	ldw	r8,172(sp)
   29a18:	003c4d06 	br	28b50 <__alt_data_end+0xf8028b50>
   29a1c:	d9402117 	ldw	r5,132(sp)
   29a20:	d9002017 	ldw	r4,128(sp)
   29a24:	d9801a04 	addi	r6,sp,104
   29a28:	da402c15 	stw	r9,176(sp)
   29a2c:	002863c0 	call	2863c <__sprint_r.part.0>
   29a30:	da402c17 	ldw	r9,176(sp)
   29a34:	103e9a1e 	bne	r2,zero,294a0 <__alt_data_end+0xf80294a0>
   29a38:	d9401b17 	ldw	r5,108(sp)
   29a3c:	d8801c17 	ldw	r2,112(sp)
   29a40:	d811883a 	mov	r8,sp
   29a44:	29000044 	addi	r4,r5,1
   29a48:	003e4206 	br	29354 <__alt_data_end+0xf8029354>
   29a4c:	d9401b17 	ldw	r5,108(sp)
   29a50:	01010034 	movhi	r4,1024
   29a54:	21008a04 	addi	r4,r4,552
   29a58:	d9002415 	stw	r4,144(sp)
   29a5c:	29400044 	addi	r5,r5,1
   29a60:	003c6d06 	br	28c18 <__alt_data_end+0xf8028c18>
   29a64:	0039883a 	mov	fp,zero
   29a68:	00800084 	movi	r2,2
   29a6c:	10803fcc 	andi	r2,r2,255
   29a70:	01000044 	movi	r4,1
   29a74:	11001e26 	beq	r2,r4,29af0 <___vfiprintf_internal_r+0x13a0>
   29a78:	01000084 	movi	r4,2
   29a7c:	11001e1e 	bne	r2,r4,29af8 <___vfiprintf_internal_r+0x13a8>
   29a80:	1829883a 	mov	r20,r3
   29a84:	003eea06 	br	29630 <__alt_data_end+0xf8029630>
   29a88:	a007883a 	mov	r3,r20
   29a8c:	00800044 	movi	r2,1
   29a90:	003ff606 	br	29a6c <__alt_data_end+0xf8029a6c>
   29a94:	00800184 	movi	r2,6
   29a98:	1240012e 	bgeu	r2,r9,29aa0 <___vfiprintf_internal_r+0x1350>
   29a9c:	1013883a 	mov	r9,r2
   29aa0:	4827883a 	mov	r19,r9
   29aa4:	4825883a 	mov	r18,r9
   29aa8:	48001516 	blt	r9,zero,29b00 <___vfiprintf_internal_r+0x13b0>
   29aac:	05410034 	movhi	r21,1024
   29ab0:	d8c02215 	stw	r3,136(sp)
   29ab4:	ad402b04 	addi	r21,r21,172
   29ab8:	003d1406 	br	28f0c <__alt_data_end+0xf8028f0c>
   29abc:	02810034 	movhi	r10,1024
   29ac0:	52808604 	addi	r10,r10,536
   29ac4:	da802415 	stw	r10,144(sp)
   29ac8:	200d883a 	mov	r6,r4
   29acc:	003c9106 	br	28d14 <__alt_data_end+0xf8028d14>
   29ad0:	5021883a 	mov	r16,r10
   29ad4:	0013883a 	mov	r9,zero
   29ad8:	003b7d06 	br	288d0 <__alt_data_end+0xf80288d0>
   29adc:	4827883a 	mov	r19,r9
   29ae0:	df001d83 	ldbu	fp,118(sp)
   29ae4:	d8c02215 	stw	r3,136(sp)
   29ae8:	0013883a 	mov	r9,zero
   29aec:	003c1806 	br	28b50 <__alt_data_end+0xf8028b50>
   29af0:	1829883a 	mov	r20,r3
   29af4:	003d1806 	br	28f58 <__alt_data_end+0xf8028f58>
   29af8:	1829883a 	mov	r20,r3
   29afc:	003ccd06 	br	28e34 <__alt_data_end+0xf8028e34>
   29b00:	0025883a 	mov	r18,zero
   29b04:	003fe906 	br	29aac <__alt_data_end+0xf8029aac>
   29b08:	d8802217 	ldw	r2,136(sp)
   29b0c:	80c00043 	ldbu	r3,1(r16)
   29b10:	5021883a 	mov	r16,r10
   29b14:	12400017 	ldw	r9,0(r2)
   29b18:	10800104 	addi	r2,r2,4
   29b1c:	d8802215 	stw	r2,136(sp)
   29b20:	483faf0e 	bge	r9,zero,299e0 <__alt_data_end+0xf80299e0>
   29b24:	18c03fcc 	andi	r3,r3,255
   29b28:	18c0201c 	xori	r3,r3,128
   29b2c:	027fffc4 	movi	r9,-1
   29b30:	18ffe004 	addi	r3,r3,-128
   29b34:	003b6506 	br	288cc <__alt_data_end+0xf80288cc>
   29b38:	d9c01d85 	stb	r7,118(sp)
   29b3c:	003ca006 	br	28dc0 <__alt_data_end+0xf8028dc0>
   29b40:	d9c01d85 	stb	r7,118(sp)
   29b44:	003cad06 	br	28dfc <__alt_data_end+0xf8028dfc>
   29b48:	d9c01d85 	stb	r7,118(sp)
   29b4c:	003d7d06 	br	29144 <__alt_data_end+0xf8029144>
   29b50:	d9c01d85 	stb	r7,118(sp)
   29b54:	003d5f06 	br	290d4 <__alt_data_end+0xf80290d4>
   29b58:	a080004c 	andi	r2,r20,1
   29b5c:	0039883a 	mov	fp,zero
   29b60:	10000526 	beq	r2,zero,29b78 <___vfiprintf_internal_r+0x1428>
   29b64:	00800c04 	movi	r2,48
   29b68:	d88019c5 	stb	r2,103(sp)
   29b6c:	dcc02717 	ldw	r19,156(sp)
   29b70:	dd4019c4 	addi	r21,sp,103
   29b74:	003bf606 	br	28b50 <__alt_data_end+0xf8028b50>
   29b78:	0027883a 	mov	r19,zero
   29b7c:	dd401a04 	addi	r21,sp,104
   29b80:	003bf306 	br	28b50 <__alt_data_end+0xf8028b50>
   29b84:	d9c01d85 	stb	r7,118(sp)
   29b88:	003dc806 	br	292ac <__alt_data_end+0xf80292ac>
   29b8c:	d9c01d85 	stb	r7,118(sp)
   29b90:	003d3a06 	br	2907c <__alt_data_end+0xf802907c>
   29b94:	d9c01d85 	stb	r7,118(sp)
   29b98:	003d2a06 	br	29044 <__alt_data_end+0xf8029044>
   29b9c:	d9c01d85 	stb	r7,118(sp)
   29ba0:	003cde06 	br	28f1c <__alt_data_end+0xf8028f1c>
   29ba4:	d9c01d85 	stb	r7,118(sp)
   29ba8:	003cbc06 	br	28e9c <__alt_data_end+0xf8028e9c>

00029bac <__vfiprintf_internal>:
   29bac:	00810034 	movhi	r2,1024
   29bb0:	1087d204 	addi	r2,r2,8008
   29bb4:	300f883a 	mov	r7,r6
   29bb8:	280d883a 	mov	r6,r5
   29bbc:	200b883a 	mov	r5,r4
   29bc0:	11000017 	ldw	r4,0(r2)
   29bc4:	00287501 	jmpi	28750 <___vfiprintf_internal_r>

00029bc8 <__sbprintf>:
   29bc8:	2880030b 	ldhu	r2,12(r5)
   29bcc:	2ac01917 	ldw	r11,100(r5)
   29bd0:	2a80038b 	ldhu	r10,14(r5)
   29bd4:	2a400717 	ldw	r9,28(r5)
   29bd8:	2a000917 	ldw	r8,36(r5)
   29bdc:	defee204 	addi	sp,sp,-1144
   29be0:	00c10004 	movi	r3,1024
   29be4:	dc011a15 	stw	r16,1128(sp)
   29be8:	10bfff4c 	andi	r2,r2,65533
   29bec:	2821883a 	mov	r16,r5
   29bf0:	d8cb883a 	add	r5,sp,r3
   29bf4:	dc811c15 	stw	r18,1136(sp)
   29bf8:	dc411b15 	stw	r17,1132(sp)
   29bfc:	dfc11d15 	stw	ra,1140(sp)
   29c00:	2025883a 	mov	r18,r4
   29c04:	d881030d 	sth	r2,1036(sp)
   29c08:	dac11915 	stw	r11,1124(sp)
   29c0c:	da81038d 	sth	r10,1038(sp)
   29c10:	da410715 	stw	r9,1052(sp)
   29c14:	da010915 	stw	r8,1060(sp)
   29c18:	dec10015 	stw	sp,1024(sp)
   29c1c:	dec10415 	stw	sp,1040(sp)
   29c20:	d8c10215 	stw	r3,1032(sp)
   29c24:	d8c10515 	stw	r3,1044(sp)
   29c28:	d8010615 	stw	zero,1048(sp)
   29c2c:	00287500 	call	28750 <___vfiprintf_internal_r>
   29c30:	1023883a 	mov	r17,r2
   29c34:	10000416 	blt	r2,zero,29c48 <__sbprintf+0x80>
   29c38:	d9410004 	addi	r5,sp,1024
   29c3c:	9009883a 	mov	r4,r18
   29c40:	0025ac40 	call	25ac4 <_fflush_r>
   29c44:	10000d1e 	bne	r2,zero,29c7c <__sbprintf+0xb4>
   29c48:	d881030b 	ldhu	r2,1036(sp)
   29c4c:	1080100c 	andi	r2,r2,64
   29c50:	10000326 	beq	r2,zero,29c60 <__sbprintf+0x98>
   29c54:	8080030b 	ldhu	r2,12(r16)
   29c58:	10801014 	ori	r2,r2,64
   29c5c:	8080030d 	sth	r2,12(r16)
   29c60:	8805883a 	mov	r2,r17
   29c64:	dfc11d17 	ldw	ra,1140(sp)
   29c68:	dc811c17 	ldw	r18,1136(sp)
   29c6c:	dc411b17 	ldw	r17,1132(sp)
   29c70:	dc011a17 	ldw	r16,1128(sp)
   29c74:	dec11e04 	addi	sp,sp,1144
   29c78:	f800283a 	ret
   29c7c:	047fffc4 	movi	r17,-1
   29c80:	003ff106 	br	29c48 <__alt_data_end+0xf8029c48>

00029c84 <_calloc_r>:
   29c84:	298b383a 	mul	r5,r5,r6
   29c88:	defffe04 	addi	sp,sp,-8
   29c8c:	dfc00115 	stw	ra,4(sp)
   29c90:	dc000015 	stw	r16,0(sp)
   29c94:	0020bd40 	call	20bd4 <_malloc_r>
   29c98:	10002926 	beq	r2,zero,29d40 <_calloc_r+0xbc>
   29c9c:	11bfff17 	ldw	r6,-4(r2)
   29ca0:	1021883a 	mov	r16,r2
   29ca4:	00bfff04 	movi	r2,-4
   29ca8:	308c703a 	and	r6,r6,r2
   29cac:	00c00904 	movi	r3,36
   29cb0:	308d883a 	add	r6,r6,r2
   29cb4:	19801636 	bltu	r3,r6,29d10 <_calloc_r+0x8c>
   29cb8:	008004c4 	movi	r2,19
   29cbc:	11800b2e 	bgeu	r2,r6,29cec <_calloc_r+0x68>
   29cc0:	80000015 	stw	zero,0(r16)
   29cc4:	80000115 	stw	zero,4(r16)
   29cc8:	008006c4 	movi	r2,27
   29ccc:	11801a2e 	bgeu	r2,r6,29d38 <_calloc_r+0xb4>
   29cd0:	80000215 	stw	zero,8(r16)
   29cd4:	80000315 	stw	zero,12(r16)
   29cd8:	30c0151e 	bne	r6,r3,29d30 <_calloc_r+0xac>
   29cdc:	80000415 	stw	zero,16(r16)
   29ce0:	80800604 	addi	r2,r16,24
   29ce4:	80000515 	stw	zero,20(r16)
   29ce8:	00000106 	br	29cf0 <_calloc_r+0x6c>
   29cec:	8005883a 	mov	r2,r16
   29cf0:	10000015 	stw	zero,0(r2)
   29cf4:	10000115 	stw	zero,4(r2)
   29cf8:	10000215 	stw	zero,8(r2)
   29cfc:	8005883a 	mov	r2,r16
   29d00:	dfc00117 	ldw	ra,4(sp)
   29d04:	dc000017 	ldw	r16,0(sp)
   29d08:	dec00204 	addi	sp,sp,8
   29d0c:	f800283a 	ret
   29d10:	000b883a 	mov	r5,zero
   29d14:	8009883a 	mov	r4,r16
   29d18:	00213e00 	call	213e0 <memset>
   29d1c:	8005883a 	mov	r2,r16
   29d20:	dfc00117 	ldw	ra,4(sp)
   29d24:	dc000017 	ldw	r16,0(sp)
   29d28:	dec00204 	addi	sp,sp,8
   29d2c:	f800283a 	ret
   29d30:	80800404 	addi	r2,r16,16
   29d34:	003fee06 	br	29cf0 <__alt_data_end+0xf8029cf0>
   29d38:	80800204 	addi	r2,r16,8
   29d3c:	003fec06 	br	29cf0 <__alt_data_end+0xf8029cf0>
   29d40:	0005883a 	mov	r2,zero
   29d44:	003fee06 	br	29d00 <__alt_data_end+0xf8029d00>

00029d48 <_fclose_r>:
   29d48:	28003926 	beq	r5,zero,29e30 <_fclose_r+0xe8>
   29d4c:	defffc04 	addi	sp,sp,-16
   29d50:	dc400115 	stw	r17,4(sp)
   29d54:	dc000015 	stw	r16,0(sp)
   29d58:	dfc00315 	stw	ra,12(sp)
   29d5c:	dc800215 	stw	r18,8(sp)
   29d60:	2023883a 	mov	r17,r4
   29d64:	2821883a 	mov	r16,r5
   29d68:	20000226 	beq	r4,zero,29d74 <_fclose_r+0x2c>
   29d6c:	20800e17 	ldw	r2,56(r4)
   29d70:	10002726 	beq	r2,zero,29e10 <_fclose_r+0xc8>
   29d74:	8080030f 	ldh	r2,12(r16)
   29d78:	1000071e 	bne	r2,zero,29d98 <_fclose_r+0x50>
   29d7c:	0005883a 	mov	r2,zero
   29d80:	dfc00317 	ldw	ra,12(sp)
   29d84:	dc800217 	ldw	r18,8(sp)
   29d88:	dc400117 	ldw	r17,4(sp)
   29d8c:	dc000017 	ldw	r16,0(sp)
   29d90:	dec00404 	addi	sp,sp,16
   29d94:	f800283a 	ret
   29d98:	800b883a 	mov	r5,r16
   29d9c:	8809883a 	mov	r4,r17
   29da0:	00258a80 	call	258a8 <__sflush_r>
   29da4:	1025883a 	mov	r18,r2
   29da8:	80800b17 	ldw	r2,44(r16)
   29dac:	10000426 	beq	r2,zero,29dc0 <_fclose_r+0x78>
   29db0:	81400717 	ldw	r5,28(r16)
   29db4:	8809883a 	mov	r4,r17
   29db8:	103ee83a 	callr	r2
   29dbc:	10001616 	blt	r2,zero,29e18 <_fclose_r+0xd0>
   29dc0:	8080030b 	ldhu	r2,12(r16)
   29dc4:	1080200c 	andi	r2,r2,128
   29dc8:	1000151e 	bne	r2,zero,29e20 <_fclose_r+0xd8>
   29dcc:	81400c17 	ldw	r5,48(r16)
   29dd0:	28000526 	beq	r5,zero,29de8 <_fclose_r+0xa0>
   29dd4:	80801004 	addi	r2,r16,64
   29dd8:	28800226 	beq	r5,r2,29de4 <_fclose_r+0x9c>
   29ddc:	8809883a 	mov	r4,r17
   29de0:	00260c00 	call	260c0 <_free_r>
   29de4:	80000c15 	stw	zero,48(r16)
   29de8:	81401117 	ldw	r5,68(r16)
   29dec:	28000326 	beq	r5,zero,29dfc <_fclose_r+0xb4>
   29df0:	8809883a 	mov	r4,r17
   29df4:	00260c00 	call	260c0 <_free_r>
   29df8:	80001115 	stw	zero,68(r16)
   29dfc:	0025eb00 	call	25eb0 <__sfp_lock_acquire>
   29e00:	8000030d 	sth	zero,12(r16)
   29e04:	0025eb40 	call	25eb4 <__sfp_lock_release>
   29e08:	9005883a 	mov	r2,r18
   29e0c:	003fdc06 	br	29d80 <__alt_data_end+0xf8029d80>
   29e10:	0025ea00 	call	25ea0 <__sinit>
   29e14:	003fd706 	br	29d74 <__alt_data_end+0xf8029d74>
   29e18:	04bfffc4 	movi	r18,-1
   29e1c:	003fe806 	br	29dc0 <__alt_data_end+0xf8029dc0>
   29e20:	81400417 	ldw	r5,16(r16)
   29e24:	8809883a 	mov	r4,r17
   29e28:	00260c00 	call	260c0 <_free_r>
   29e2c:	003fe706 	br	29dcc <__alt_data_end+0xf8029dcc>
   29e30:	0005883a 	mov	r2,zero
   29e34:	f800283a 	ret

00029e38 <fclose>:
   29e38:	00810034 	movhi	r2,1024
   29e3c:	1087d204 	addi	r2,r2,8008
   29e40:	200b883a 	mov	r5,r4
   29e44:	11000017 	ldw	r4,0(r2)
   29e48:	0029d481 	jmpi	29d48 <_fclose_r>

00029e4c <__fputwc>:
   29e4c:	defff804 	addi	sp,sp,-32
   29e50:	dcc00415 	stw	r19,16(sp)
   29e54:	dc800315 	stw	r18,12(sp)
   29e58:	dc000115 	stw	r16,4(sp)
   29e5c:	dfc00715 	stw	ra,28(sp)
   29e60:	dd400615 	stw	r21,24(sp)
   29e64:	dd000515 	stw	r20,20(sp)
   29e68:	dc400215 	stw	r17,8(sp)
   29e6c:	2027883a 	mov	r19,r4
   29e70:	2825883a 	mov	r18,r5
   29e74:	3021883a 	mov	r16,r6
   29e78:	0026af00 	call	26af0 <__locale_mb_cur_max>
   29e7c:	00c00044 	movi	r3,1
   29e80:	10c03e26 	beq	r2,r3,29f7c <__fputwc+0x130>
   29e84:	81c01704 	addi	r7,r16,92
   29e88:	900d883a 	mov	r6,r18
   29e8c:	d80b883a 	mov	r5,sp
   29e90:	9809883a 	mov	r4,r19
   29e94:	002a1ac0 	call	2a1ac <_wcrtomb_r>
   29e98:	1029883a 	mov	r20,r2
   29e9c:	00bfffc4 	movi	r2,-1
   29ea0:	a0802026 	beq	r20,r2,29f24 <__fputwc+0xd8>
   29ea4:	d9400003 	ldbu	r5,0(sp)
   29ea8:	a0001c26 	beq	r20,zero,29f1c <__fputwc+0xd0>
   29eac:	0023883a 	mov	r17,zero
   29eb0:	05400284 	movi	r21,10
   29eb4:	00000906 	br	29edc <__fputwc+0x90>
   29eb8:	80800017 	ldw	r2,0(r16)
   29ebc:	11400005 	stb	r5,0(r2)
   29ec0:	80c00017 	ldw	r3,0(r16)
   29ec4:	18c00044 	addi	r3,r3,1
   29ec8:	80c00015 	stw	r3,0(r16)
   29ecc:	8c400044 	addi	r17,r17,1
   29ed0:	dc45883a 	add	r2,sp,r17
   29ed4:	8d00112e 	bgeu	r17,r20,29f1c <__fputwc+0xd0>
   29ed8:	11400003 	ldbu	r5,0(r2)
   29edc:	80c00217 	ldw	r3,8(r16)
   29ee0:	18ffffc4 	addi	r3,r3,-1
   29ee4:	80c00215 	stw	r3,8(r16)
   29ee8:	183ff30e 	bge	r3,zero,29eb8 <__alt_data_end+0xf8029eb8>
   29eec:	80800617 	ldw	r2,24(r16)
   29ef0:	18801916 	blt	r3,r2,29f58 <__fputwc+0x10c>
   29ef4:	80800017 	ldw	r2,0(r16)
   29ef8:	11400005 	stb	r5,0(r2)
   29efc:	80800017 	ldw	r2,0(r16)
   29f00:	10c00003 	ldbu	r3,0(r2)
   29f04:	10800044 	addi	r2,r2,1
   29f08:	1d402326 	beq	r3,r21,29f98 <__fputwc+0x14c>
   29f0c:	80800015 	stw	r2,0(r16)
   29f10:	8c400044 	addi	r17,r17,1
   29f14:	dc45883a 	add	r2,sp,r17
   29f18:	8d3fef36 	bltu	r17,r20,29ed8 <__alt_data_end+0xf8029ed8>
   29f1c:	9005883a 	mov	r2,r18
   29f20:	00000406 	br	29f34 <__fputwc+0xe8>
   29f24:	80c0030b 	ldhu	r3,12(r16)
   29f28:	a005883a 	mov	r2,r20
   29f2c:	18c01014 	ori	r3,r3,64
   29f30:	80c0030d 	sth	r3,12(r16)
   29f34:	dfc00717 	ldw	ra,28(sp)
   29f38:	dd400617 	ldw	r21,24(sp)
   29f3c:	dd000517 	ldw	r20,20(sp)
   29f40:	dcc00417 	ldw	r19,16(sp)
   29f44:	dc800317 	ldw	r18,12(sp)
   29f48:	dc400217 	ldw	r17,8(sp)
   29f4c:	dc000117 	ldw	r16,4(sp)
   29f50:	dec00804 	addi	sp,sp,32
   29f54:	f800283a 	ret
   29f58:	800d883a 	mov	r6,r16
   29f5c:	29403fcc 	andi	r5,r5,255
   29f60:	9809883a 	mov	r4,r19
   29f64:	002a0540 	call	2a054 <__swbuf_r>
   29f68:	10bfffe0 	cmpeqi	r2,r2,-1
   29f6c:	10803fcc 	andi	r2,r2,255
   29f70:	103fd626 	beq	r2,zero,29ecc <__alt_data_end+0xf8029ecc>
   29f74:	00bfffc4 	movi	r2,-1
   29f78:	003fee06 	br	29f34 <__alt_data_end+0xf8029f34>
   29f7c:	90ffffc4 	addi	r3,r18,-1
   29f80:	01003f84 	movi	r4,254
   29f84:	20ffbf36 	bltu	r4,r3,29e84 <__alt_data_end+0xf8029e84>
   29f88:	900b883a 	mov	r5,r18
   29f8c:	dc800005 	stb	r18,0(sp)
   29f90:	1029883a 	mov	r20,r2
   29f94:	003fc506 	br	29eac <__alt_data_end+0xf8029eac>
   29f98:	800d883a 	mov	r6,r16
   29f9c:	a80b883a 	mov	r5,r21
   29fa0:	9809883a 	mov	r4,r19
   29fa4:	002a0540 	call	2a054 <__swbuf_r>
   29fa8:	10bfffe0 	cmpeqi	r2,r2,-1
   29fac:	003fef06 	br	29f6c <__alt_data_end+0xf8029f6c>

00029fb0 <_fputwc_r>:
   29fb0:	3080030b 	ldhu	r2,12(r6)
   29fb4:	10c8000c 	andi	r3,r2,8192
   29fb8:	1800051e 	bne	r3,zero,29fd0 <_fputwc_r+0x20>
   29fbc:	30c01917 	ldw	r3,100(r6)
   29fc0:	10880014 	ori	r2,r2,8192
   29fc4:	3080030d 	sth	r2,12(r6)
   29fc8:	18880014 	ori	r2,r3,8192
   29fcc:	30801915 	stw	r2,100(r6)
   29fd0:	0029e4c1 	jmpi	29e4c <__fputwc>

00029fd4 <fputwc>:
   29fd4:	00810034 	movhi	r2,1024
   29fd8:	defffc04 	addi	sp,sp,-16
   29fdc:	1087d204 	addi	r2,r2,8008
   29fe0:	dc000115 	stw	r16,4(sp)
   29fe4:	14000017 	ldw	r16,0(r2)
   29fe8:	dc400215 	stw	r17,8(sp)
   29fec:	dfc00315 	stw	ra,12(sp)
   29ff0:	2023883a 	mov	r17,r4
   29ff4:	80000226 	beq	r16,zero,2a000 <fputwc+0x2c>
   29ff8:	80800e17 	ldw	r2,56(r16)
   29ffc:	10001026 	beq	r2,zero,2a040 <fputwc+0x6c>
   2a000:	2880030b 	ldhu	r2,12(r5)
   2a004:	10c8000c 	andi	r3,r2,8192
   2a008:	1800051e 	bne	r3,zero,2a020 <fputwc+0x4c>
   2a00c:	28c01917 	ldw	r3,100(r5)
   2a010:	10880014 	ori	r2,r2,8192
   2a014:	2880030d 	sth	r2,12(r5)
   2a018:	18880014 	ori	r2,r3,8192
   2a01c:	28801915 	stw	r2,100(r5)
   2a020:	280d883a 	mov	r6,r5
   2a024:	8009883a 	mov	r4,r16
   2a028:	880b883a 	mov	r5,r17
   2a02c:	dfc00317 	ldw	ra,12(sp)
   2a030:	dc400217 	ldw	r17,8(sp)
   2a034:	dc000117 	ldw	r16,4(sp)
   2a038:	dec00404 	addi	sp,sp,16
   2a03c:	0029e4c1 	jmpi	29e4c <__fputwc>
   2a040:	8009883a 	mov	r4,r16
   2a044:	d9400015 	stw	r5,0(sp)
   2a048:	0025ea00 	call	25ea0 <__sinit>
   2a04c:	d9400017 	ldw	r5,0(sp)
   2a050:	003feb06 	br	2a000 <__alt_data_end+0xf802a000>

0002a054 <__swbuf_r>:
   2a054:	defffb04 	addi	sp,sp,-20
   2a058:	dcc00315 	stw	r19,12(sp)
   2a05c:	dc800215 	stw	r18,8(sp)
   2a060:	dc000015 	stw	r16,0(sp)
   2a064:	dfc00415 	stw	ra,16(sp)
   2a068:	dc400115 	stw	r17,4(sp)
   2a06c:	2025883a 	mov	r18,r4
   2a070:	2827883a 	mov	r19,r5
   2a074:	3021883a 	mov	r16,r6
   2a078:	20000226 	beq	r4,zero,2a084 <__swbuf_r+0x30>
   2a07c:	20800e17 	ldw	r2,56(r4)
   2a080:	10004226 	beq	r2,zero,2a18c <__swbuf_r+0x138>
   2a084:	80800617 	ldw	r2,24(r16)
   2a088:	8100030b 	ldhu	r4,12(r16)
   2a08c:	80800215 	stw	r2,8(r16)
   2a090:	2080020c 	andi	r2,r4,8
   2a094:	10003626 	beq	r2,zero,2a170 <__swbuf_r+0x11c>
   2a098:	80c00417 	ldw	r3,16(r16)
   2a09c:	18003426 	beq	r3,zero,2a170 <__swbuf_r+0x11c>
   2a0a0:	2088000c 	andi	r2,r4,8192
   2a0a4:	9c403fcc 	andi	r17,r19,255
   2a0a8:	10001a26 	beq	r2,zero,2a114 <__swbuf_r+0xc0>
   2a0ac:	80800017 	ldw	r2,0(r16)
   2a0b0:	81000517 	ldw	r4,20(r16)
   2a0b4:	10c7c83a 	sub	r3,r2,r3
   2a0b8:	1900200e 	bge	r3,r4,2a13c <__swbuf_r+0xe8>
   2a0bc:	18c00044 	addi	r3,r3,1
   2a0c0:	81000217 	ldw	r4,8(r16)
   2a0c4:	11400044 	addi	r5,r2,1
   2a0c8:	81400015 	stw	r5,0(r16)
   2a0cc:	213fffc4 	addi	r4,r4,-1
   2a0d0:	81000215 	stw	r4,8(r16)
   2a0d4:	14c00005 	stb	r19,0(r2)
   2a0d8:	80800517 	ldw	r2,20(r16)
   2a0dc:	10c01e26 	beq	r2,r3,2a158 <__swbuf_r+0x104>
   2a0e0:	8080030b 	ldhu	r2,12(r16)
   2a0e4:	1080004c 	andi	r2,r2,1
   2a0e8:	10000226 	beq	r2,zero,2a0f4 <__swbuf_r+0xa0>
   2a0ec:	00800284 	movi	r2,10
   2a0f0:	88801926 	beq	r17,r2,2a158 <__swbuf_r+0x104>
   2a0f4:	8805883a 	mov	r2,r17
   2a0f8:	dfc00417 	ldw	ra,16(sp)
   2a0fc:	dcc00317 	ldw	r19,12(sp)
   2a100:	dc800217 	ldw	r18,8(sp)
   2a104:	dc400117 	ldw	r17,4(sp)
   2a108:	dc000017 	ldw	r16,0(sp)
   2a10c:	dec00504 	addi	sp,sp,20
   2a110:	f800283a 	ret
   2a114:	81401917 	ldw	r5,100(r16)
   2a118:	00b7ffc4 	movi	r2,-8193
   2a11c:	21080014 	ori	r4,r4,8192
   2a120:	2884703a 	and	r2,r5,r2
   2a124:	80801915 	stw	r2,100(r16)
   2a128:	80800017 	ldw	r2,0(r16)
   2a12c:	8100030d 	sth	r4,12(r16)
   2a130:	81000517 	ldw	r4,20(r16)
   2a134:	10c7c83a 	sub	r3,r2,r3
   2a138:	193fe016 	blt	r3,r4,2a0bc <__alt_data_end+0xf802a0bc>
   2a13c:	800b883a 	mov	r5,r16
   2a140:	9009883a 	mov	r4,r18
   2a144:	0025ac40 	call	25ac4 <_fflush_r>
   2a148:	1000071e 	bne	r2,zero,2a168 <__swbuf_r+0x114>
   2a14c:	80800017 	ldw	r2,0(r16)
   2a150:	00c00044 	movi	r3,1
   2a154:	003fda06 	br	2a0c0 <__alt_data_end+0xf802a0c0>
   2a158:	800b883a 	mov	r5,r16
   2a15c:	9009883a 	mov	r4,r18
   2a160:	0025ac40 	call	25ac4 <_fflush_r>
   2a164:	103fe326 	beq	r2,zero,2a0f4 <__alt_data_end+0xf802a0f4>
   2a168:	00bfffc4 	movi	r2,-1
   2a16c:	003fe206 	br	2a0f8 <__alt_data_end+0xf802a0f8>
   2a170:	800b883a 	mov	r5,r16
   2a174:	9009883a 	mov	r4,r18
   2a178:	0023e780 	call	23e78 <__swsetup_r>
   2a17c:	103ffa1e 	bne	r2,zero,2a168 <__alt_data_end+0xf802a168>
   2a180:	8100030b 	ldhu	r4,12(r16)
   2a184:	80c00417 	ldw	r3,16(r16)
   2a188:	003fc506 	br	2a0a0 <__alt_data_end+0xf802a0a0>
   2a18c:	0025ea00 	call	25ea0 <__sinit>
   2a190:	003fbc06 	br	2a084 <__alt_data_end+0xf802a084>

0002a194 <__swbuf>:
   2a194:	00810034 	movhi	r2,1024
   2a198:	1087d204 	addi	r2,r2,8008
   2a19c:	280d883a 	mov	r6,r5
   2a1a0:	200b883a 	mov	r5,r4
   2a1a4:	11000017 	ldw	r4,0(r2)
   2a1a8:	002a0541 	jmpi	2a054 <__swbuf_r>

0002a1ac <_wcrtomb_r>:
   2a1ac:	defff604 	addi	sp,sp,-40
   2a1b0:	00810034 	movhi	r2,1024
   2a1b4:	dc800815 	stw	r18,32(sp)
   2a1b8:	dc400715 	stw	r17,28(sp)
   2a1bc:	dc000615 	stw	r16,24(sp)
   2a1c0:	1087d604 	addi	r2,r2,8024
   2a1c4:	dfc00915 	stw	ra,36(sp)
   2a1c8:	2021883a 	mov	r16,r4
   2a1cc:	3823883a 	mov	r17,r7
   2a1d0:	14800017 	ldw	r18,0(r2)
   2a1d4:	28001426 	beq	r5,zero,2a228 <_wcrtomb_r+0x7c>
   2a1d8:	d9400415 	stw	r5,16(sp)
   2a1dc:	d9800515 	stw	r6,20(sp)
   2a1e0:	0026ae40 	call	26ae4 <__locale_charset>
   2a1e4:	d9800517 	ldw	r6,20(sp)
   2a1e8:	d9400417 	ldw	r5,16(sp)
   2a1ec:	100f883a 	mov	r7,r2
   2a1f0:	dc400015 	stw	r17,0(sp)
   2a1f4:	8009883a 	mov	r4,r16
   2a1f8:	903ee83a 	callr	r18
   2a1fc:	00ffffc4 	movi	r3,-1
   2a200:	10c0031e 	bne	r2,r3,2a210 <_wcrtomb_r+0x64>
   2a204:	88000015 	stw	zero,0(r17)
   2a208:	00c02284 	movi	r3,138
   2a20c:	80c00015 	stw	r3,0(r16)
   2a210:	dfc00917 	ldw	ra,36(sp)
   2a214:	dc800817 	ldw	r18,32(sp)
   2a218:	dc400717 	ldw	r17,28(sp)
   2a21c:	dc000617 	ldw	r16,24(sp)
   2a220:	dec00a04 	addi	sp,sp,40
   2a224:	f800283a 	ret
   2a228:	0026ae40 	call	26ae4 <__locale_charset>
   2a22c:	100f883a 	mov	r7,r2
   2a230:	dc400015 	stw	r17,0(sp)
   2a234:	000d883a 	mov	r6,zero
   2a238:	d9400104 	addi	r5,sp,4
   2a23c:	8009883a 	mov	r4,r16
   2a240:	903ee83a 	callr	r18
   2a244:	003fed06 	br	2a1fc <__alt_data_end+0xf802a1fc>

0002a248 <wcrtomb>:
   2a248:	defff604 	addi	sp,sp,-40
   2a24c:	00810034 	movhi	r2,1024
   2a250:	dc800615 	stw	r18,24(sp)
   2a254:	dc400515 	stw	r17,20(sp)
   2a258:	1087d204 	addi	r2,r2,8008
   2a25c:	dfc00915 	stw	ra,36(sp)
   2a260:	dd000815 	stw	r20,32(sp)
   2a264:	dcc00715 	stw	r19,28(sp)
   2a268:	dc000415 	stw	r16,16(sp)
   2a26c:	3025883a 	mov	r18,r6
   2a270:	14400017 	ldw	r17,0(r2)
   2a274:	20001926 	beq	r4,zero,2a2dc <wcrtomb+0x94>
   2a278:	00810034 	movhi	r2,1024
   2a27c:	1087d604 	addi	r2,r2,8024
   2a280:	15000017 	ldw	r20,0(r2)
   2a284:	2021883a 	mov	r16,r4
   2a288:	2827883a 	mov	r19,r5
   2a28c:	0026ae40 	call	26ae4 <__locale_charset>
   2a290:	100f883a 	mov	r7,r2
   2a294:	dc800015 	stw	r18,0(sp)
   2a298:	980d883a 	mov	r6,r19
   2a29c:	800b883a 	mov	r5,r16
   2a2a0:	8809883a 	mov	r4,r17
   2a2a4:	a03ee83a 	callr	r20
   2a2a8:	00ffffc4 	movi	r3,-1
   2a2ac:	10c0031e 	bne	r2,r3,2a2bc <wcrtomb+0x74>
   2a2b0:	90000015 	stw	zero,0(r18)
   2a2b4:	00c02284 	movi	r3,138
   2a2b8:	88c00015 	stw	r3,0(r17)
   2a2bc:	dfc00917 	ldw	ra,36(sp)
   2a2c0:	dd000817 	ldw	r20,32(sp)
   2a2c4:	dcc00717 	ldw	r19,28(sp)
   2a2c8:	dc800617 	ldw	r18,24(sp)
   2a2cc:	dc400517 	ldw	r17,20(sp)
   2a2d0:	dc000417 	ldw	r16,16(sp)
   2a2d4:	dec00a04 	addi	sp,sp,40
   2a2d8:	f800283a 	ret
   2a2dc:	00810034 	movhi	r2,1024
   2a2e0:	1087d604 	addi	r2,r2,8024
   2a2e4:	14000017 	ldw	r16,0(r2)
   2a2e8:	0026ae40 	call	26ae4 <__locale_charset>
   2a2ec:	100f883a 	mov	r7,r2
   2a2f0:	dc800015 	stw	r18,0(sp)
   2a2f4:	000d883a 	mov	r6,zero
   2a2f8:	d9400104 	addi	r5,sp,4
   2a2fc:	8809883a 	mov	r4,r17
   2a300:	803ee83a 	callr	r16
   2a304:	003fe806 	br	2a2a8 <__alt_data_end+0xf802a2a8>

0002a308 <__ascii_wctomb>:
   2a308:	28000526 	beq	r5,zero,2a320 <__ascii_wctomb+0x18>
   2a30c:	00803fc4 	movi	r2,255
   2a310:	11800536 	bltu	r2,r6,2a328 <__ascii_wctomb+0x20>
   2a314:	29800005 	stb	r6,0(r5)
   2a318:	00800044 	movi	r2,1
   2a31c:	f800283a 	ret
   2a320:	0005883a 	mov	r2,zero
   2a324:	f800283a 	ret
   2a328:	00802284 	movi	r2,138
   2a32c:	20800015 	stw	r2,0(r4)
   2a330:	00bfffc4 	movi	r2,-1
   2a334:	f800283a 	ret

0002a338 <_wctomb_r>:
   2a338:	00810034 	movhi	r2,1024
   2a33c:	defff904 	addi	sp,sp,-28
   2a340:	1087d604 	addi	r2,r2,8024
   2a344:	dfc00615 	stw	ra,24(sp)
   2a348:	dc400515 	stw	r17,20(sp)
   2a34c:	dc000415 	stw	r16,16(sp)
   2a350:	3823883a 	mov	r17,r7
   2a354:	14000017 	ldw	r16,0(r2)
   2a358:	d9000115 	stw	r4,4(sp)
   2a35c:	d9400215 	stw	r5,8(sp)
   2a360:	d9800315 	stw	r6,12(sp)
   2a364:	0026ae40 	call	26ae4 <__locale_charset>
   2a368:	d9800317 	ldw	r6,12(sp)
   2a36c:	d9400217 	ldw	r5,8(sp)
   2a370:	d9000117 	ldw	r4,4(sp)
   2a374:	100f883a 	mov	r7,r2
   2a378:	dc400015 	stw	r17,0(sp)
   2a37c:	803ee83a 	callr	r16
   2a380:	dfc00617 	ldw	ra,24(sp)
   2a384:	dc400517 	ldw	r17,20(sp)
   2a388:	dc000417 	ldw	r16,16(sp)
   2a38c:	dec00704 	addi	sp,sp,28
   2a390:	f800283a 	ret

0002a394 <__udivdi3>:
   2a394:	defff504 	addi	sp,sp,-44
   2a398:	dcc00415 	stw	r19,16(sp)
   2a39c:	dc000115 	stw	r16,4(sp)
   2a3a0:	dfc00a15 	stw	ra,40(sp)
   2a3a4:	df000915 	stw	fp,36(sp)
   2a3a8:	ddc00815 	stw	r23,32(sp)
   2a3ac:	dd800715 	stw	r22,28(sp)
   2a3b0:	dd400615 	stw	r21,24(sp)
   2a3b4:	dd000515 	stw	r20,20(sp)
   2a3b8:	dc800315 	stw	r18,12(sp)
   2a3bc:	dc400215 	stw	r17,8(sp)
   2a3c0:	2027883a 	mov	r19,r4
   2a3c4:	2821883a 	mov	r16,r5
   2a3c8:	3800411e 	bne	r7,zero,2a4d0 <__udivdi3+0x13c>
   2a3cc:	3023883a 	mov	r17,r6
   2a3d0:	2025883a 	mov	r18,r4
   2a3d4:	2980522e 	bgeu	r5,r6,2a520 <__udivdi3+0x18c>
   2a3d8:	00bfffd4 	movui	r2,65535
   2a3dc:	282d883a 	mov	r22,r5
   2a3e0:	1180a836 	bltu	r2,r6,2a684 <__udivdi3+0x2f0>
   2a3e4:	00803fc4 	movi	r2,255
   2a3e8:	1185803a 	cmpltu	r2,r2,r6
   2a3ec:	100490fa 	slli	r2,r2,3
   2a3f0:	3086d83a 	srl	r3,r6,r2
   2a3f4:	01010034 	movhi	r4,1024
   2a3f8:	21008e04 	addi	r4,r4,568
   2a3fc:	20c7883a 	add	r3,r4,r3
   2a400:	18c00003 	ldbu	r3,0(r3)
   2a404:	1885883a 	add	r2,r3,r2
   2a408:	00c00804 	movi	r3,32
   2a40c:	1887c83a 	sub	r3,r3,r2
   2a410:	18000526 	beq	r3,zero,2a428 <__udivdi3+0x94>
   2a414:	80e0983a 	sll	r16,r16,r3
   2a418:	9884d83a 	srl	r2,r19,r2
   2a41c:	30e2983a 	sll	r17,r6,r3
   2a420:	98e4983a 	sll	r18,r19,r3
   2a424:	142cb03a 	or	r22,r2,r16
   2a428:	882ad43a 	srli	r21,r17,16
   2a42c:	b009883a 	mov	r4,r22
   2a430:	8d3fffcc 	andi	r20,r17,65535
   2a434:	a80b883a 	mov	r5,r21
   2a438:	002afa00 	call	2afa0 <__umodsi3>
   2a43c:	b009883a 	mov	r4,r22
   2a440:	a80b883a 	mov	r5,r21
   2a444:	1027883a 	mov	r19,r2
   2a448:	002af3c0 	call	2af3c <__udivsi3>
   2a44c:	102d883a 	mov	r22,r2
   2a450:	9826943a 	slli	r19,r19,16
   2a454:	9004d43a 	srli	r2,r18,16
   2a458:	a5a1383a 	mul	r16,r20,r22
   2a45c:	14c4b03a 	or	r2,r2,r19
   2a460:	1400052e 	bgeu	r2,r16,2a478 <__udivdi3+0xe4>
   2a464:	1445883a 	add	r2,r2,r17
   2a468:	b0ffffc4 	addi	r3,r22,-1
   2a46c:	14400136 	bltu	r2,r17,2a474 <__udivdi3+0xe0>
   2a470:	14012336 	bltu	r2,r16,2a900 <__udivdi3+0x56c>
   2a474:	182d883a 	mov	r22,r3
   2a478:	1421c83a 	sub	r16,r2,r16
   2a47c:	a80b883a 	mov	r5,r21
   2a480:	8009883a 	mov	r4,r16
   2a484:	002afa00 	call	2afa0 <__umodsi3>
   2a488:	1027883a 	mov	r19,r2
   2a48c:	a80b883a 	mov	r5,r21
   2a490:	8009883a 	mov	r4,r16
   2a494:	002af3c0 	call	2af3c <__udivsi3>
   2a498:	9826943a 	slli	r19,r19,16
   2a49c:	a0a9383a 	mul	r20,r20,r2
   2a4a0:	94bfffcc 	andi	r18,r18,65535
   2a4a4:	94e4b03a 	or	r18,r18,r19
   2a4a8:	9500052e 	bgeu	r18,r20,2a4c0 <__udivdi3+0x12c>
   2a4ac:	8ca5883a 	add	r18,r17,r18
   2a4b0:	10ffffc4 	addi	r3,r2,-1
   2a4b4:	9440f136 	bltu	r18,r17,2a87c <__udivdi3+0x4e8>
   2a4b8:	9500f02e 	bgeu	r18,r20,2a87c <__udivdi3+0x4e8>
   2a4bc:	10bfff84 	addi	r2,r2,-2
   2a4c0:	b00c943a 	slli	r6,r22,16
   2a4c4:	0007883a 	mov	r3,zero
   2a4c8:	3084b03a 	or	r2,r6,r2
   2a4cc:	00005906 	br	2a634 <__udivdi3+0x2a0>
   2a4d0:	29c05636 	bltu	r5,r7,2a62c <__udivdi3+0x298>
   2a4d4:	00bfffd4 	movui	r2,65535
   2a4d8:	11c0622e 	bgeu	r2,r7,2a664 <__udivdi3+0x2d0>
   2a4dc:	00804034 	movhi	r2,256
   2a4e0:	10bfffc4 	addi	r2,r2,-1
   2a4e4:	11c0ee36 	bltu	r2,r7,2a8a0 <__udivdi3+0x50c>
   2a4e8:	00800404 	movi	r2,16
   2a4ec:	3886d83a 	srl	r3,r7,r2
   2a4f0:	01010034 	movhi	r4,1024
   2a4f4:	21008e04 	addi	r4,r4,568
   2a4f8:	20c7883a 	add	r3,r4,r3
   2a4fc:	18c00003 	ldbu	r3,0(r3)
   2a500:	05400804 	movi	r21,32
   2a504:	1885883a 	add	r2,r3,r2
   2a508:	a8abc83a 	sub	r21,r21,r2
   2a50c:	a800621e 	bne	r21,zero,2a698 <__udivdi3+0x304>
   2a510:	3c00e936 	bltu	r7,r16,2a8b8 <__udivdi3+0x524>
   2a514:	9985403a 	cmpgeu	r2,r19,r6
   2a518:	0007883a 	mov	r3,zero
   2a51c:	00004506 	br	2a634 <__udivdi3+0x2a0>
   2a520:	3000041e 	bne	r6,zero,2a534 <__udivdi3+0x1a0>
   2a524:	000b883a 	mov	r5,zero
   2a528:	01000044 	movi	r4,1
   2a52c:	002af3c0 	call	2af3c <__udivsi3>
   2a530:	1023883a 	mov	r17,r2
   2a534:	00bfffd4 	movui	r2,65535
   2a538:	14404e2e 	bgeu	r2,r17,2a674 <__udivdi3+0x2e0>
   2a53c:	00804034 	movhi	r2,256
   2a540:	10bfffc4 	addi	r2,r2,-1
   2a544:	1440d836 	bltu	r2,r17,2a8a8 <__udivdi3+0x514>
   2a548:	00800404 	movi	r2,16
   2a54c:	8886d83a 	srl	r3,r17,r2
   2a550:	01010034 	movhi	r4,1024
   2a554:	21008e04 	addi	r4,r4,568
   2a558:	20c7883a 	add	r3,r4,r3
   2a55c:	18c00003 	ldbu	r3,0(r3)
   2a560:	1885883a 	add	r2,r3,r2
   2a564:	00c00804 	movi	r3,32
   2a568:	1887c83a 	sub	r3,r3,r2
   2a56c:	18008f1e 	bne	r3,zero,2a7ac <__udivdi3+0x418>
   2a570:	882ad43a 	srli	r21,r17,16
   2a574:	8461c83a 	sub	r16,r16,r17
   2a578:	8d3fffcc 	andi	r20,r17,65535
   2a57c:	00c00044 	movi	r3,1
   2a580:	8009883a 	mov	r4,r16
   2a584:	a80b883a 	mov	r5,r21
   2a588:	d8c00015 	stw	r3,0(sp)
   2a58c:	002afa00 	call	2afa0 <__umodsi3>
   2a590:	8009883a 	mov	r4,r16
   2a594:	a80b883a 	mov	r5,r21
   2a598:	1027883a 	mov	r19,r2
   2a59c:	002af3c0 	call	2af3c <__udivsi3>
   2a5a0:	9826943a 	slli	r19,r19,16
   2a5a4:	9008d43a 	srli	r4,r18,16
   2a5a8:	1521383a 	mul	r16,r2,r20
   2a5ac:	102d883a 	mov	r22,r2
   2a5b0:	24c8b03a 	or	r4,r4,r19
   2a5b4:	d8c00017 	ldw	r3,0(sp)
   2a5b8:	2400052e 	bgeu	r4,r16,2a5d0 <__udivdi3+0x23c>
   2a5bc:	2449883a 	add	r4,r4,r17
   2a5c0:	b0bfffc4 	addi	r2,r22,-1
   2a5c4:	24400136 	bltu	r4,r17,2a5cc <__udivdi3+0x238>
   2a5c8:	2400ca36 	bltu	r4,r16,2a8f4 <__udivdi3+0x560>
   2a5cc:	102d883a 	mov	r22,r2
   2a5d0:	2421c83a 	sub	r16,r4,r16
   2a5d4:	a80b883a 	mov	r5,r21
   2a5d8:	8009883a 	mov	r4,r16
   2a5dc:	d8c00015 	stw	r3,0(sp)
   2a5e0:	002afa00 	call	2afa0 <__umodsi3>
   2a5e4:	1027883a 	mov	r19,r2
   2a5e8:	a80b883a 	mov	r5,r21
   2a5ec:	8009883a 	mov	r4,r16
   2a5f0:	002af3c0 	call	2af3c <__udivsi3>
   2a5f4:	9826943a 	slli	r19,r19,16
   2a5f8:	1529383a 	mul	r20,r2,r20
   2a5fc:	94bfffcc 	andi	r18,r18,65535
   2a600:	94e4b03a 	or	r18,r18,r19
   2a604:	d8c00017 	ldw	r3,0(sp)
   2a608:	9500052e 	bgeu	r18,r20,2a620 <__udivdi3+0x28c>
   2a60c:	8ca5883a 	add	r18,r17,r18
   2a610:	113fffc4 	addi	r4,r2,-1
   2a614:	94409736 	bltu	r18,r17,2a874 <__udivdi3+0x4e0>
   2a618:	9500962e 	bgeu	r18,r20,2a874 <__udivdi3+0x4e0>
   2a61c:	10bfff84 	addi	r2,r2,-2
   2a620:	b00c943a 	slli	r6,r22,16
   2a624:	3084b03a 	or	r2,r6,r2
   2a628:	00000206 	br	2a634 <__udivdi3+0x2a0>
   2a62c:	0007883a 	mov	r3,zero
   2a630:	0005883a 	mov	r2,zero
   2a634:	dfc00a17 	ldw	ra,40(sp)
   2a638:	df000917 	ldw	fp,36(sp)
   2a63c:	ddc00817 	ldw	r23,32(sp)
   2a640:	dd800717 	ldw	r22,28(sp)
   2a644:	dd400617 	ldw	r21,24(sp)
   2a648:	dd000517 	ldw	r20,20(sp)
   2a64c:	dcc00417 	ldw	r19,16(sp)
   2a650:	dc800317 	ldw	r18,12(sp)
   2a654:	dc400217 	ldw	r17,8(sp)
   2a658:	dc000117 	ldw	r16,4(sp)
   2a65c:	dec00b04 	addi	sp,sp,44
   2a660:	f800283a 	ret
   2a664:	00803fc4 	movi	r2,255
   2a668:	11c5803a 	cmpltu	r2,r2,r7
   2a66c:	100490fa 	slli	r2,r2,3
   2a670:	003f9e06 	br	2a4ec <__alt_data_end+0xf802a4ec>
   2a674:	00803fc4 	movi	r2,255
   2a678:	1445803a 	cmpltu	r2,r2,r17
   2a67c:	100490fa 	slli	r2,r2,3
   2a680:	003fb206 	br	2a54c <__alt_data_end+0xf802a54c>
   2a684:	00804034 	movhi	r2,256
   2a688:	10bfffc4 	addi	r2,r2,-1
   2a68c:	11808836 	bltu	r2,r6,2a8b0 <__udivdi3+0x51c>
   2a690:	00800404 	movi	r2,16
   2a694:	003f5606 	br	2a3f0 <__alt_data_end+0xf802a3f0>
   2a698:	30aed83a 	srl	r23,r6,r2
   2a69c:	3d4e983a 	sll	r7,r7,r21
   2a6a0:	80acd83a 	srl	r22,r16,r2
   2a6a4:	9884d83a 	srl	r2,r19,r2
   2a6a8:	3deeb03a 	or	r23,r7,r23
   2a6ac:	b824d43a 	srli	r18,r23,16
   2a6b0:	8560983a 	sll	r16,r16,r21
   2a6b4:	b009883a 	mov	r4,r22
   2a6b8:	900b883a 	mov	r5,r18
   2a6bc:	3568983a 	sll	r20,r6,r21
   2a6c0:	1420b03a 	or	r16,r2,r16
   2a6c4:	002afa00 	call	2afa0 <__umodsi3>
   2a6c8:	b009883a 	mov	r4,r22
   2a6cc:	900b883a 	mov	r5,r18
   2a6d0:	1023883a 	mov	r17,r2
   2a6d4:	002af3c0 	call	2af3c <__udivsi3>
   2a6d8:	8808943a 	slli	r4,r17,16
   2a6dc:	bf3fffcc 	andi	fp,r23,65535
   2a6e0:	8006d43a 	srli	r3,r16,16
   2a6e4:	e0a3383a 	mul	r17,fp,r2
   2a6e8:	100d883a 	mov	r6,r2
   2a6ec:	1906b03a 	or	r3,r3,r4
   2a6f0:	1c40042e 	bgeu	r3,r17,2a704 <__udivdi3+0x370>
   2a6f4:	1dc7883a 	add	r3,r3,r23
   2a6f8:	10bfffc4 	addi	r2,r2,-1
   2a6fc:	1dc0752e 	bgeu	r3,r23,2a8d4 <__udivdi3+0x540>
   2a700:	100d883a 	mov	r6,r2
   2a704:	1c63c83a 	sub	r17,r3,r17
   2a708:	900b883a 	mov	r5,r18
   2a70c:	8809883a 	mov	r4,r17
   2a710:	d9800015 	stw	r6,0(sp)
   2a714:	002afa00 	call	2afa0 <__umodsi3>
   2a718:	102d883a 	mov	r22,r2
   2a71c:	8809883a 	mov	r4,r17
   2a720:	900b883a 	mov	r5,r18
   2a724:	002af3c0 	call	2af3c <__udivsi3>
   2a728:	b02c943a 	slli	r22,r22,16
   2a72c:	e089383a 	mul	r4,fp,r2
   2a730:	843fffcc 	andi	r16,r16,65535
   2a734:	85a0b03a 	or	r16,r16,r22
   2a738:	d9800017 	ldw	r6,0(sp)
   2a73c:	8100042e 	bgeu	r16,r4,2a750 <__udivdi3+0x3bc>
   2a740:	85e1883a 	add	r16,r16,r23
   2a744:	10ffffc4 	addi	r3,r2,-1
   2a748:	85c05e2e 	bgeu	r16,r23,2a8c4 <__udivdi3+0x530>
   2a74c:	1805883a 	mov	r2,r3
   2a750:	300c943a 	slli	r6,r6,16
   2a754:	a17fffcc 	andi	r5,r20,65535
   2a758:	a028d43a 	srli	r20,r20,16
   2a75c:	3084b03a 	or	r2,r6,r2
   2a760:	10ffffcc 	andi	r3,r2,65535
   2a764:	100cd43a 	srli	r6,r2,16
   2a768:	194f383a 	mul	r7,r3,r5
   2a76c:	1d07383a 	mul	r3,r3,r20
   2a770:	314b383a 	mul	r5,r6,r5
   2a774:	3810d43a 	srli	r8,r7,16
   2a778:	8121c83a 	sub	r16,r16,r4
   2a77c:	1947883a 	add	r3,r3,r5
   2a780:	40c7883a 	add	r3,r8,r3
   2a784:	350d383a 	mul	r6,r6,r20
   2a788:	1940022e 	bgeu	r3,r5,2a794 <__udivdi3+0x400>
   2a78c:	01000074 	movhi	r4,1
   2a790:	310d883a 	add	r6,r6,r4
   2a794:	1828d43a 	srli	r20,r3,16
   2a798:	a18d883a 	add	r6,r20,r6
   2a79c:	81803e36 	bltu	r16,r6,2a898 <__udivdi3+0x504>
   2a7a0:	81803826 	beq	r16,r6,2a884 <__udivdi3+0x4f0>
   2a7a4:	0007883a 	mov	r3,zero
   2a7a8:	003fa206 	br	2a634 <__alt_data_end+0xf802a634>
   2a7ac:	88e2983a 	sll	r17,r17,r3
   2a7b0:	80a8d83a 	srl	r20,r16,r2
   2a7b4:	80e0983a 	sll	r16,r16,r3
   2a7b8:	882ad43a 	srli	r21,r17,16
   2a7bc:	9884d83a 	srl	r2,r19,r2
   2a7c0:	a009883a 	mov	r4,r20
   2a7c4:	a80b883a 	mov	r5,r21
   2a7c8:	142eb03a 	or	r23,r2,r16
   2a7cc:	98e4983a 	sll	r18,r19,r3
   2a7d0:	002afa00 	call	2afa0 <__umodsi3>
   2a7d4:	a009883a 	mov	r4,r20
   2a7d8:	a80b883a 	mov	r5,r21
   2a7dc:	1021883a 	mov	r16,r2
   2a7e0:	002af3c0 	call	2af3c <__udivsi3>
   2a7e4:	1039883a 	mov	fp,r2
   2a7e8:	8d3fffcc 	andi	r20,r17,65535
   2a7ec:	8020943a 	slli	r16,r16,16
   2a7f0:	b804d43a 	srli	r2,r23,16
   2a7f4:	a72d383a 	mul	r22,r20,fp
   2a7f8:	1404b03a 	or	r2,r2,r16
   2a7fc:	1580062e 	bgeu	r2,r22,2a818 <__udivdi3+0x484>
   2a800:	1445883a 	add	r2,r2,r17
   2a804:	e0ffffc4 	addi	r3,fp,-1
   2a808:	14403836 	bltu	r2,r17,2a8ec <__udivdi3+0x558>
   2a80c:	1580372e 	bgeu	r2,r22,2a8ec <__udivdi3+0x558>
   2a810:	e73fff84 	addi	fp,fp,-2
   2a814:	1445883a 	add	r2,r2,r17
   2a818:	15adc83a 	sub	r22,r2,r22
   2a81c:	a80b883a 	mov	r5,r21
   2a820:	b009883a 	mov	r4,r22
   2a824:	002afa00 	call	2afa0 <__umodsi3>
   2a828:	1027883a 	mov	r19,r2
   2a82c:	b009883a 	mov	r4,r22
   2a830:	a80b883a 	mov	r5,r21
   2a834:	002af3c0 	call	2af3c <__udivsi3>
   2a838:	9826943a 	slli	r19,r19,16
   2a83c:	a0a1383a 	mul	r16,r20,r2
   2a840:	b93fffcc 	andi	r4,r23,65535
   2a844:	24c8b03a 	or	r4,r4,r19
   2a848:	2400062e 	bgeu	r4,r16,2a864 <__udivdi3+0x4d0>
   2a84c:	2449883a 	add	r4,r4,r17
   2a850:	10ffffc4 	addi	r3,r2,-1
   2a854:	24402336 	bltu	r4,r17,2a8e4 <__udivdi3+0x550>
   2a858:	2400222e 	bgeu	r4,r16,2a8e4 <__udivdi3+0x550>
   2a85c:	10bfff84 	addi	r2,r2,-2
   2a860:	2449883a 	add	r4,r4,r17
   2a864:	e038943a 	slli	fp,fp,16
   2a868:	2421c83a 	sub	r16,r4,r16
   2a86c:	e086b03a 	or	r3,fp,r2
   2a870:	003f4306 	br	2a580 <__alt_data_end+0xf802a580>
   2a874:	2005883a 	mov	r2,r4
   2a878:	003f6906 	br	2a620 <__alt_data_end+0xf802a620>
   2a87c:	1805883a 	mov	r2,r3
   2a880:	003f0f06 	br	2a4c0 <__alt_data_end+0xf802a4c0>
   2a884:	1806943a 	slli	r3,r3,16
   2a888:	9d66983a 	sll	r19,r19,r21
   2a88c:	39ffffcc 	andi	r7,r7,65535
   2a890:	19c7883a 	add	r3,r3,r7
   2a894:	98ffc32e 	bgeu	r19,r3,2a7a4 <__alt_data_end+0xf802a7a4>
   2a898:	10bfffc4 	addi	r2,r2,-1
   2a89c:	003fc106 	br	2a7a4 <__alt_data_end+0xf802a7a4>
   2a8a0:	00800604 	movi	r2,24
   2a8a4:	003f1106 	br	2a4ec <__alt_data_end+0xf802a4ec>
   2a8a8:	00800604 	movi	r2,24
   2a8ac:	003f2706 	br	2a54c <__alt_data_end+0xf802a54c>
   2a8b0:	00800604 	movi	r2,24
   2a8b4:	003ece06 	br	2a3f0 <__alt_data_end+0xf802a3f0>
   2a8b8:	0007883a 	mov	r3,zero
   2a8bc:	00800044 	movi	r2,1
   2a8c0:	003f5c06 	br	2a634 <__alt_data_end+0xf802a634>
   2a8c4:	813fa12e 	bgeu	r16,r4,2a74c <__alt_data_end+0xf802a74c>
   2a8c8:	10bfff84 	addi	r2,r2,-2
   2a8cc:	85e1883a 	add	r16,r16,r23
   2a8d0:	003f9f06 	br	2a750 <__alt_data_end+0xf802a750>
   2a8d4:	1c7f8a2e 	bgeu	r3,r17,2a700 <__alt_data_end+0xf802a700>
   2a8d8:	31bfff84 	addi	r6,r6,-2
   2a8dc:	1dc7883a 	add	r3,r3,r23
   2a8e0:	003f8806 	br	2a704 <__alt_data_end+0xf802a704>
   2a8e4:	1805883a 	mov	r2,r3
   2a8e8:	003fde06 	br	2a864 <__alt_data_end+0xf802a864>
   2a8ec:	1839883a 	mov	fp,r3
   2a8f0:	003fc906 	br	2a818 <__alt_data_end+0xf802a818>
   2a8f4:	b5bfff84 	addi	r22,r22,-2
   2a8f8:	2449883a 	add	r4,r4,r17
   2a8fc:	003f3406 	br	2a5d0 <__alt_data_end+0xf802a5d0>
   2a900:	b5bfff84 	addi	r22,r22,-2
   2a904:	1445883a 	add	r2,r2,r17
   2a908:	003edb06 	br	2a478 <__alt_data_end+0xf802a478>

0002a90c <__umoddi3>:
   2a90c:	defff404 	addi	sp,sp,-48
   2a910:	df000a15 	stw	fp,40(sp)
   2a914:	dc400315 	stw	r17,12(sp)
   2a918:	dc000215 	stw	r16,8(sp)
   2a91c:	dfc00b15 	stw	ra,44(sp)
   2a920:	ddc00915 	stw	r23,36(sp)
   2a924:	dd800815 	stw	r22,32(sp)
   2a928:	dd400715 	stw	r21,28(sp)
   2a92c:	dd000615 	stw	r20,24(sp)
   2a930:	dcc00515 	stw	r19,20(sp)
   2a934:	dc800415 	stw	r18,16(sp)
   2a938:	2021883a 	mov	r16,r4
   2a93c:	2823883a 	mov	r17,r5
   2a940:	2839883a 	mov	fp,r5
   2a944:	38003c1e 	bne	r7,zero,2aa38 <__umoddi3+0x12c>
   2a948:	3027883a 	mov	r19,r6
   2a94c:	2029883a 	mov	r20,r4
   2a950:	2980512e 	bgeu	r5,r6,2aa98 <__umoddi3+0x18c>
   2a954:	00bfffd4 	movui	r2,65535
   2a958:	11809a36 	bltu	r2,r6,2abc4 <__umoddi3+0x2b8>
   2a95c:	01003fc4 	movi	r4,255
   2a960:	2189803a 	cmpltu	r4,r4,r6
   2a964:	200890fa 	slli	r4,r4,3
   2a968:	3104d83a 	srl	r2,r6,r4
   2a96c:	00c10034 	movhi	r3,1024
   2a970:	18c08e04 	addi	r3,r3,568
   2a974:	1885883a 	add	r2,r3,r2
   2a978:	10c00003 	ldbu	r3,0(r2)
   2a97c:	00800804 	movi	r2,32
   2a980:	1909883a 	add	r4,r3,r4
   2a984:	1125c83a 	sub	r18,r2,r4
   2a988:	90000526 	beq	r18,zero,2a9a0 <__umoddi3+0x94>
   2a98c:	8ca2983a 	sll	r17,r17,r18
   2a990:	8108d83a 	srl	r4,r16,r4
   2a994:	34a6983a 	sll	r19,r6,r18
   2a998:	84a8983a 	sll	r20,r16,r18
   2a99c:	2478b03a 	or	fp,r4,r17
   2a9a0:	982ed43a 	srli	r23,r19,16
   2a9a4:	e009883a 	mov	r4,fp
   2a9a8:	9dbfffcc 	andi	r22,r19,65535
   2a9ac:	b80b883a 	mov	r5,r23
   2a9b0:	002afa00 	call	2afa0 <__umodsi3>
   2a9b4:	e009883a 	mov	r4,fp
   2a9b8:	b80b883a 	mov	r5,r23
   2a9bc:	102b883a 	mov	r21,r2
   2a9c0:	002af3c0 	call	2af3c <__udivsi3>
   2a9c4:	a806943a 	slli	r3,r21,16
   2a9c8:	a008d43a 	srli	r4,r20,16
   2a9cc:	b085383a 	mul	r2,r22,r2
   2a9d0:	20c8b03a 	or	r4,r4,r3
   2a9d4:	2080032e 	bgeu	r4,r2,2a9e4 <__umoddi3+0xd8>
   2a9d8:	24c9883a 	add	r4,r4,r19
   2a9dc:	24c00136 	bltu	r4,r19,2a9e4 <__umoddi3+0xd8>
   2a9e0:	20811036 	bltu	r4,r2,2ae24 <__umoddi3+0x518>
   2a9e4:	20abc83a 	sub	r21,r4,r2
   2a9e8:	b80b883a 	mov	r5,r23
   2a9ec:	a809883a 	mov	r4,r21
   2a9f0:	002afa00 	call	2afa0 <__umodsi3>
   2a9f4:	1023883a 	mov	r17,r2
   2a9f8:	b80b883a 	mov	r5,r23
   2a9fc:	a809883a 	mov	r4,r21
   2aa00:	002af3c0 	call	2af3c <__udivsi3>
   2aa04:	8822943a 	slli	r17,r17,16
   2aa08:	b085383a 	mul	r2,r22,r2
   2aa0c:	a0ffffcc 	andi	r3,r20,65535
   2aa10:	1c46b03a 	or	r3,r3,r17
   2aa14:	1880042e 	bgeu	r3,r2,2aa28 <__umoddi3+0x11c>
   2aa18:	1cc7883a 	add	r3,r3,r19
   2aa1c:	1cc00236 	bltu	r3,r19,2aa28 <__umoddi3+0x11c>
   2aa20:	1880012e 	bgeu	r3,r2,2aa28 <__umoddi3+0x11c>
   2aa24:	1cc7883a 	add	r3,r3,r19
   2aa28:	1885c83a 	sub	r2,r3,r2
   2aa2c:	1484d83a 	srl	r2,r2,r18
   2aa30:	0007883a 	mov	r3,zero
   2aa34:	00004f06 	br	2ab74 <__umoddi3+0x268>
   2aa38:	29c04c36 	bltu	r5,r7,2ab6c <__umoddi3+0x260>
   2aa3c:	00bfffd4 	movui	r2,65535
   2aa40:	11c0582e 	bgeu	r2,r7,2aba4 <__umoddi3+0x298>
   2aa44:	00804034 	movhi	r2,256
   2aa48:	10bfffc4 	addi	r2,r2,-1
   2aa4c:	11c0e736 	bltu	r2,r7,2adec <__umoddi3+0x4e0>
   2aa50:	01000404 	movi	r4,16
   2aa54:	3904d83a 	srl	r2,r7,r4
   2aa58:	00c10034 	movhi	r3,1024
   2aa5c:	18c08e04 	addi	r3,r3,568
   2aa60:	1885883a 	add	r2,r3,r2
   2aa64:	14c00003 	ldbu	r19,0(r2)
   2aa68:	00c00804 	movi	r3,32
   2aa6c:	9927883a 	add	r19,r19,r4
   2aa70:	1ce9c83a 	sub	r20,r3,r19
   2aa74:	a000581e 	bne	r20,zero,2abd8 <__umoddi3+0x2cc>
   2aa78:	3c400136 	bltu	r7,r17,2aa80 <__umoddi3+0x174>
   2aa7c:	8180eb36 	bltu	r16,r6,2ae2c <__umoddi3+0x520>
   2aa80:	8185c83a 	sub	r2,r16,r6
   2aa84:	89e3c83a 	sub	r17,r17,r7
   2aa88:	8089803a 	cmpltu	r4,r16,r2
   2aa8c:	8939c83a 	sub	fp,r17,r4
   2aa90:	e007883a 	mov	r3,fp
   2aa94:	00003706 	br	2ab74 <__umoddi3+0x268>
   2aa98:	3000041e 	bne	r6,zero,2aaac <__umoddi3+0x1a0>
   2aa9c:	000b883a 	mov	r5,zero
   2aaa0:	01000044 	movi	r4,1
   2aaa4:	002af3c0 	call	2af3c <__udivsi3>
   2aaa8:	1027883a 	mov	r19,r2
   2aaac:	00bfffd4 	movui	r2,65535
   2aab0:	14c0402e 	bgeu	r2,r19,2abb4 <__umoddi3+0x2a8>
   2aab4:	00804034 	movhi	r2,256
   2aab8:	10bfffc4 	addi	r2,r2,-1
   2aabc:	14c0cd36 	bltu	r2,r19,2adf4 <__umoddi3+0x4e8>
   2aac0:	00800404 	movi	r2,16
   2aac4:	9886d83a 	srl	r3,r19,r2
   2aac8:	01010034 	movhi	r4,1024
   2aacc:	21008e04 	addi	r4,r4,568
   2aad0:	20c7883a 	add	r3,r4,r3
   2aad4:	18c00003 	ldbu	r3,0(r3)
   2aad8:	1887883a 	add	r3,r3,r2
   2aadc:	00800804 	movi	r2,32
   2aae0:	10e5c83a 	sub	r18,r2,r3
   2aae4:	9000901e 	bne	r18,zero,2ad28 <__umoddi3+0x41c>
   2aae8:	982cd43a 	srli	r22,r19,16
   2aaec:	8ce3c83a 	sub	r17,r17,r19
   2aaf0:	9d7fffcc 	andi	r21,r19,65535
   2aaf4:	b00b883a 	mov	r5,r22
   2aaf8:	8809883a 	mov	r4,r17
   2aafc:	002afa00 	call	2afa0 <__umodsi3>
   2ab00:	8809883a 	mov	r4,r17
   2ab04:	b00b883a 	mov	r5,r22
   2ab08:	1021883a 	mov	r16,r2
   2ab0c:	002af3c0 	call	2af3c <__udivsi3>
   2ab10:	8006943a 	slli	r3,r16,16
   2ab14:	a008d43a 	srli	r4,r20,16
   2ab18:	1545383a 	mul	r2,r2,r21
   2ab1c:	20c8b03a 	or	r4,r4,r3
   2ab20:	2080042e 	bgeu	r4,r2,2ab34 <__umoddi3+0x228>
   2ab24:	24c9883a 	add	r4,r4,r19
   2ab28:	24c00236 	bltu	r4,r19,2ab34 <__umoddi3+0x228>
   2ab2c:	2080012e 	bgeu	r4,r2,2ab34 <__umoddi3+0x228>
   2ab30:	24c9883a 	add	r4,r4,r19
   2ab34:	20a1c83a 	sub	r16,r4,r2
   2ab38:	b00b883a 	mov	r5,r22
   2ab3c:	8009883a 	mov	r4,r16
   2ab40:	002afa00 	call	2afa0 <__umodsi3>
   2ab44:	1023883a 	mov	r17,r2
   2ab48:	b00b883a 	mov	r5,r22
   2ab4c:	8009883a 	mov	r4,r16
   2ab50:	002af3c0 	call	2af3c <__udivsi3>
   2ab54:	8822943a 	slli	r17,r17,16
   2ab58:	1545383a 	mul	r2,r2,r21
   2ab5c:	a53fffcc 	andi	r20,r20,65535
   2ab60:	a446b03a 	or	r3,r20,r17
   2ab64:	18bfb02e 	bgeu	r3,r2,2aa28 <__alt_data_end+0xf802aa28>
   2ab68:	003fab06 	br	2aa18 <__alt_data_end+0xf802aa18>
   2ab6c:	2005883a 	mov	r2,r4
   2ab70:	2807883a 	mov	r3,r5
   2ab74:	dfc00b17 	ldw	ra,44(sp)
   2ab78:	df000a17 	ldw	fp,40(sp)
   2ab7c:	ddc00917 	ldw	r23,36(sp)
   2ab80:	dd800817 	ldw	r22,32(sp)
   2ab84:	dd400717 	ldw	r21,28(sp)
   2ab88:	dd000617 	ldw	r20,24(sp)
   2ab8c:	dcc00517 	ldw	r19,20(sp)
   2ab90:	dc800417 	ldw	r18,16(sp)
   2ab94:	dc400317 	ldw	r17,12(sp)
   2ab98:	dc000217 	ldw	r16,8(sp)
   2ab9c:	dec00c04 	addi	sp,sp,48
   2aba0:	f800283a 	ret
   2aba4:	04c03fc4 	movi	r19,255
   2aba8:	99c9803a 	cmpltu	r4,r19,r7
   2abac:	200890fa 	slli	r4,r4,3
   2abb0:	003fa806 	br	2aa54 <__alt_data_end+0xf802aa54>
   2abb4:	00803fc4 	movi	r2,255
   2abb8:	14c5803a 	cmpltu	r2,r2,r19
   2abbc:	100490fa 	slli	r2,r2,3
   2abc0:	003fc006 	br	2aac4 <__alt_data_end+0xf802aac4>
   2abc4:	00804034 	movhi	r2,256
   2abc8:	10bfffc4 	addi	r2,r2,-1
   2abcc:	11808b36 	bltu	r2,r6,2adfc <__umoddi3+0x4f0>
   2abd0:	01000404 	movi	r4,16
   2abd4:	003f6406 	br	2a968 <__alt_data_end+0xf802a968>
   2abd8:	34c4d83a 	srl	r2,r6,r19
   2abdc:	3d0e983a 	sll	r7,r7,r20
   2abe0:	8cf8d83a 	srl	fp,r17,r19
   2abe4:	8d10983a 	sll	r8,r17,r20
   2abe8:	38aab03a 	or	r21,r7,r2
   2abec:	a82cd43a 	srli	r22,r21,16
   2abf0:	84e2d83a 	srl	r17,r16,r19
   2abf4:	e009883a 	mov	r4,fp
   2abf8:	b00b883a 	mov	r5,r22
   2abfc:	8a22b03a 	or	r17,r17,r8
   2ac00:	3524983a 	sll	r18,r6,r20
   2ac04:	002afa00 	call	2afa0 <__umodsi3>
   2ac08:	e009883a 	mov	r4,fp
   2ac0c:	b00b883a 	mov	r5,r22
   2ac10:	102f883a 	mov	r23,r2
   2ac14:	002af3c0 	call	2af3c <__udivsi3>
   2ac18:	100d883a 	mov	r6,r2
   2ac1c:	b808943a 	slli	r4,r23,16
   2ac20:	aa3fffcc 	andi	r8,r21,65535
   2ac24:	8804d43a 	srli	r2,r17,16
   2ac28:	41af383a 	mul	r23,r8,r6
   2ac2c:	8520983a 	sll	r16,r16,r20
   2ac30:	1104b03a 	or	r2,r2,r4
   2ac34:	15c0042e 	bgeu	r2,r23,2ac48 <__umoddi3+0x33c>
   2ac38:	1545883a 	add	r2,r2,r21
   2ac3c:	30ffffc4 	addi	r3,r6,-1
   2ac40:	1540742e 	bgeu	r2,r21,2ae14 <__umoddi3+0x508>
   2ac44:	180d883a 	mov	r6,r3
   2ac48:	15efc83a 	sub	r23,r2,r23
   2ac4c:	b00b883a 	mov	r5,r22
   2ac50:	b809883a 	mov	r4,r23
   2ac54:	d9800115 	stw	r6,4(sp)
   2ac58:	da000015 	stw	r8,0(sp)
   2ac5c:	002afa00 	call	2afa0 <__umodsi3>
   2ac60:	b00b883a 	mov	r5,r22
   2ac64:	b809883a 	mov	r4,r23
   2ac68:	1039883a 	mov	fp,r2
   2ac6c:	002af3c0 	call	2af3c <__udivsi3>
   2ac70:	da000017 	ldw	r8,0(sp)
   2ac74:	e038943a 	slli	fp,fp,16
   2ac78:	100b883a 	mov	r5,r2
   2ac7c:	4089383a 	mul	r4,r8,r2
   2ac80:	8a3fffcc 	andi	r8,r17,65535
   2ac84:	4710b03a 	or	r8,r8,fp
   2ac88:	d9800117 	ldw	r6,4(sp)
   2ac8c:	4100042e 	bgeu	r8,r4,2aca0 <__umoddi3+0x394>
   2ac90:	4551883a 	add	r8,r8,r21
   2ac94:	10bfffc4 	addi	r2,r2,-1
   2ac98:	45405a2e 	bgeu	r8,r21,2ae04 <__umoddi3+0x4f8>
   2ac9c:	100b883a 	mov	r5,r2
   2aca0:	300c943a 	slli	r6,r6,16
   2aca4:	91ffffcc 	andi	r7,r18,65535
   2aca8:	9004d43a 	srli	r2,r18,16
   2acac:	314cb03a 	or	r6,r6,r5
   2acb0:	317fffcc 	andi	r5,r6,65535
   2acb4:	300cd43a 	srli	r6,r6,16
   2acb8:	29d3383a 	mul	r9,r5,r7
   2acbc:	288b383a 	mul	r5,r5,r2
   2acc0:	31cf383a 	mul	r7,r6,r7
   2acc4:	4806d43a 	srli	r3,r9,16
   2acc8:	4111c83a 	sub	r8,r8,r4
   2accc:	29cb883a 	add	r5,r5,r7
   2acd0:	194b883a 	add	r5,r3,r5
   2acd4:	3085383a 	mul	r2,r6,r2
   2acd8:	29c0022e 	bgeu	r5,r7,2ace4 <__umoddi3+0x3d8>
   2acdc:	00c00074 	movhi	r3,1
   2ace0:	10c5883a 	add	r2,r2,r3
   2ace4:	2808d43a 	srli	r4,r5,16
   2ace8:	280a943a 	slli	r5,r5,16
   2acec:	4a7fffcc 	andi	r9,r9,65535
   2acf0:	2085883a 	add	r2,r4,r2
   2acf4:	2a4b883a 	add	r5,r5,r9
   2acf8:	40803636 	bltu	r8,r2,2add4 <__umoddi3+0x4c8>
   2acfc:	40804d26 	beq	r8,r2,2ae34 <__umoddi3+0x528>
   2ad00:	4089c83a 	sub	r4,r8,r2
   2ad04:	280f883a 	mov	r7,r5
   2ad08:	81cfc83a 	sub	r7,r16,r7
   2ad0c:	81c7803a 	cmpltu	r3,r16,r7
   2ad10:	20c7c83a 	sub	r3,r4,r3
   2ad14:	1cc4983a 	sll	r2,r3,r19
   2ad18:	3d0ed83a 	srl	r7,r7,r20
   2ad1c:	1d06d83a 	srl	r3,r3,r20
   2ad20:	11c4b03a 	or	r2,r2,r7
   2ad24:	003f9306 	br	2ab74 <__alt_data_end+0xf802ab74>
   2ad28:	9ca6983a 	sll	r19,r19,r18
   2ad2c:	88e8d83a 	srl	r20,r17,r3
   2ad30:	80c4d83a 	srl	r2,r16,r3
   2ad34:	982cd43a 	srli	r22,r19,16
   2ad38:	8ca2983a 	sll	r17,r17,r18
   2ad3c:	a009883a 	mov	r4,r20
   2ad40:	b00b883a 	mov	r5,r22
   2ad44:	1478b03a 	or	fp,r2,r17
   2ad48:	002afa00 	call	2afa0 <__umodsi3>
   2ad4c:	a009883a 	mov	r4,r20
   2ad50:	b00b883a 	mov	r5,r22
   2ad54:	1023883a 	mov	r17,r2
   2ad58:	002af3c0 	call	2af3c <__udivsi3>
   2ad5c:	9d7fffcc 	andi	r21,r19,65535
   2ad60:	880a943a 	slli	r5,r17,16
   2ad64:	e008d43a 	srli	r4,fp,16
   2ad68:	a885383a 	mul	r2,r21,r2
   2ad6c:	84a8983a 	sll	r20,r16,r18
   2ad70:	2148b03a 	or	r4,r4,r5
   2ad74:	2080042e 	bgeu	r4,r2,2ad88 <__umoddi3+0x47c>
   2ad78:	24c9883a 	add	r4,r4,r19
   2ad7c:	24c00236 	bltu	r4,r19,2ad88 <__umoddi3+0x47c>
   2ad80:	2080012e 	bgeu	r4,r2,2ad88 <__umoddi3+0x47c>
   2ad84:	24c9883a 	add	r4,r4,r19
   2ad88:	20a3c83a 	sub	r17,r4,r2
   2ad8c:	b00b883a 	mov	r5,r22
   2ad90:	8809883a 	mov	r4,r17
   2ad94:	002afa00 	call	2afa0 <__umodsi3>
   2ad98:	102f883a 	mov	r23,r2
   2ad9c:	8809883a 	mov	r4,r17
   2ada0:	b00b883a 	mov	r5,r22
   2ada4:	002af3c0 	call	2af3c <__udivsi3>
   2ada8:	b82e943a 	slli	r23,r23,16
   2adac:	a885383a 	mul	r2,r21,r2
   2adb0:	e13fffcc 	andi	r4,fp,65535
   2adb4:	25c8b03a 	or	r4,r4,r23
   2adb8:	2080042e 	bgeu	r4,r2,2adcc <__umoddi3+0x4c0>
   2adbc:	24c9883a 	add	r4,r4,r19
   2adc0:	24c00236 	bltu	r4,r19,2adcc <__umoddi3+0x4c0>
   2adc4:	2080012e 	bgeu	r4,r2,2adcc <__umoddi3+0x4c0>
   2adc8:	24c9883a 	add	r4,r4,r19
   2adcc:	20a3c83a 	sub	r17,r4,r2
   2add0:	003f4806 	br	2aaf4 <__alt_data_end+0xf802aaf4>
   2add4:	2c8fc83a 	sub	r7,r5,r18
   2add8:	1545c83a 	sub	r2,r2,r21
   2addc:	29cb803a 	cmpltu	r5,r5,r7
   2ade0:	1145c83a 	sub	r2,r2,r5
   2ade4:	4089c83a 	sub	r4,r8,r2
   2ade8:	003fc706 	br	2ad08 <__alt_data_end+0xf802ad08>
   2adec:	01000604 	movi	r4,24
   2adf0:	003f1806 	br	2aa54 <__alt_data_end+0xf802aa54>
   2adf4:	00800604 	movi	r2,24
   2adf8:	003f3206 	br	2aac4 <__alt_data_end+0xf802aac4>
   2adfc:	01000604 	movi	r4,24
   2ae00:	003ed906 	br	2a968 <__alt_data_end+0xf802a968>
   2ae04:	413fa52e 	bgeu	r8,r4,2ac9c <__alt_data_end+0xf802ac9c>
   2ae08:	297fff84 	addi	r5,r5,-2
   2ae0c:	4551883a 	add	r8,r8,r21
   2ae10:	003fa306 	br	2aca0 <__alt_data_end+0xf802aca0>
   2ae14:	15ff8b2e 	bgeu	r2,r23,2ac44 <__alt_data_end+0xf802ac44>
   2ae18:	31bfff84 	addi	r6,r6,-2
   2ae1c:	1545883a 	add	r2,r2,r21
   2ae20:	003f8906 	br	2ac48 <__alt_data_end+0xf802ac48>
   2ae24:	24c9883a 	add	r4,r4,r19
   2ae28:	003eee06 	br	2a9e4 <__alt_data_end+0xf802a9e4>
   2ae2c:	8005883a 	mov	r2,r16
   2ae30:	003f1706 	br	2aa90 <__alt_data_end+0xf802aa90>
   2ae34:	817fe736 	bltu	r16,r5,2add4 <__alt_data_end+0xf802add4>
   2ae38:	280f883a 	mov	r7,r5
   2ae3c:	0009883a 	mov	r4,zero
   2ae40:	003fb106 	br	2ad08 <__alt_data_end+0xf802ad08>

0002ae44 <__divsi3>:
   2ae44:	20001b16 	blt	r4,zero,2aeb4 <__divsi3+0x70>
   2ae48:	000f883a 	mov	r7,zero
   2ae4c:	28001616 	blt	r5,zero,2aea8 <__divsi3+0x64>
   2ae50:	200d883a 	mov	r6,r4
   2ae54:	29001a2e 	bgeu	r5,r4,2aec0 <__divsi3+0x7c>
   2ae58:	00800804 	movi	r2,32
   2ae5c:	00c00044 	movi	r3,1
   2ae60:	00000106 	br	2ae68 <__divsi3+0x24>
   2ae64:	10000d26 	beq	r2,zero,2ae9c <__divsi3+0x58>
   2ae68:	294b883a 	add	r5,r5,r5
   2ae6c:	10bfffc4 	addi	r2,r2,-1
   2ae70:	18c7883a 	add	r3,r3,r3
   2ae74:	293ffb36 	bltu	r5,r4,2ae64 <__alt_data_end+0xf802ae64>
   2ae78:	0005883a 	mov	r2,zero
   2ae7c:	18000726 	beq	r3,zero,2ae9c <__divsi3+0x58>
   2ae80:	0005883a 	mov	r2,zero
   2ae84:	31400236 	bltu	r6,r5,2ae90 <__divsi3+0x4c>
   2ae88:	314dc83a 	sub	r6,r6,r5
   2ae8c:	10c4b03a 	or	r2,r2,r3
   2ae90:	1806d07a 	srli	r3,r3,1
   2ae94:	280ad07a 	srli	r5,r5,1
   2ae98:	183ffa1e 	bne	r3,zero,2ae84 <__alt_data_end+0xf802ae84>
   2ae9c:	38000126 	beq	r7,zero,2aea4 <__divsi3+0x60>
   2aea0:	0085c83a 	sub	r2,zero,r2
   2aea4:	f800283a 	ret
   2aea8:	014bc83a 	sub	r5,zero,r5
   2aeac:	39c0005c 	xori	r7,r7,1
   2aeb0:	003fe706 	br	2ae50 <__alt_data_end+0xf802ae50>
   2aeb4:	0109c83a 	sub	r4,zero,r4
   2aeb8:	01c00044 	movi	r7,1
   2aebc:	003fe306 	br	2ae4c <__alt_data_end+0xf802ae4c>
   2aec0:	00c00044 	movi	r3,1
   2aec4:	003fee06 	br	2ae80 <__alt_data_end+0xf802ae80>

0002aec8 <__modsi3>:
   2aec8:	20001716 	blt	r4,zero,2af28 <__modsi3+0x60>
   2aecc:	000f883a 	mov	r7,zero
   2aed0:	2005883a 	mov	r2,r4
   2aed4:	28001216 	blt	r5,zero,2af20 <__modsi3+0x58>
   2aed8:	2900162e 	bgeu	r5,r4,2af34 <__modsi3+0x6c>
   2aedc:	01800804 	movi	r6,32
   2aee0:	00c00044 	movi	r3,1
   2aee4:	00000106 	br	2aeec <__modsi3+0x24>
   2aee8:	30000a26 	beq	r6,zero,2af14 <__modsi3+0x4c>
   2aeec:	294b883a 	add	r5,r5,r5
   2aef0:	31bfffc4 	addi	r6,r6,-1
   2aef4:	18c7883a 	add	r3,r3,r3
   2aef8:	293ffb36 	bltu	r5,r4,2aee8 <__alt_data_end+0xf802aee8>
   2aefc:	18000526 	beq	r3,zero,2af14 <__modsi3+0x4c>
   2af00:	1806d07a 	srli	r3,r3,1
   2af04:	11400136 	bltu	r2,r5,2af0c <__modsi3+0x44>
   2af08:	1145c83a 	sub	r2,r2,r5
   2af0c:	280ad07a 	srli	r5,r5,1
   2af10:	183ffb1e 	bne	r3,zero,2af00 <__alt_data_end+0xf802af00>
   2af14:	38000126 	beq	r7,zero,2af1c <__modsi3+0x54>
   2af18:	0085c83a 	sub	r2,zero,r2
   2af1c:	f800283a 	ret
   2af20:	014bc83a 	sub	r5,zero,r5
   2af24:	003fec06 	br	2aed8 <__alt_data_end+0xf802aed8>
   2af28:	0109c83a 	sub	r4,zero,r4
   2af2c:	01c00044 	movi	r7,1
   2af30:	003fe706 	br	2aed0 <__alt_data_end+0xf802aed0>
   2af34:	00c00044 	movi	r3,1
   2af38:	003ff106 	br	2af00 <__alt_data_end+0xf802af00>

0002af3c <__udivsi3>:
   2af3c:	200d883a 	mov	r6,r4
   2af40:	2900152e 	bgeu	r5,r4,2af98 <__udivsi3+0x5c>
   2af44:	28001416 	blt	r5,zero,2af98 <__udivsi3+0x5c>
   2af48:	00800804 	movi	r2,32
   2af4c:	00c00044 	movi	r3,1
   2af50:	00000206 	br	2af5c <__udivsi3+0x20>
   2af54:	10000e26 	beq	r2,zero,2af90 <__udivsi3+0x54>
   2af58:	28000516 	blt	r5,zero,2af70 <__udivsi3+0x34>
   2af5c:	294b883a 	add	r5,r5,r5
   2af60:	10bfffc4 	addi	r2,r2,-1
   2af64:	18c7883a 	add	r3,r3,r3
   2af68:	293ffa36 	bltu	r5,r4,2af54 <__alt_data_end+0xf802af54>
   2af6c:	18000826 	beq	r3,zero,2af90 <__udivsi3+0x54>
   2af70:	0005883a 	mov	r2,zero
   2af74:	31400236 	bltu	r6,r5,2af80 <__udivsi3+0x44>
   2af78:	314dc83a 	sub	r6,r6,r5
   2af7c:	10c4b03a 	or	r2,r2,r3
   2af80:	1806d07a 	srli	r3,r3,1
   2af84:	280ad07a 	srli	r5,r5,1
   2af88:	183ffa1e 	bne	r3,zero,2af74 <__alt_data_end+0xf802af74>
   2af8c:	f800283a 	ret
   2af90:	0005883a 	mov	r2,zero
   2af94:	f800283a 	ret
   2af98:	00c00044 	movi	r3,1
   2af9c:	003ff406 	br	2af70 <__alt_data_end+0xf802af70>

0002afa0 <__umodsi3>:
   2afa0:	2005883a 	mov	r2,r4
   2afa4:	2900122e 	bgeu	r5,r4,2aff0 <__umodsi3+0x50>
   2afa8:	28001116 	blt	r5,zero,2aff0 <__umodsi3+0x50>
   2afac:	01800804 	movi	r6,32
   2afb0:	00c00044 	movi	r3,1
   2afb4:	00000206 	br	2afc0 <__umodsi3+0x20>
   2afb8:	30000c26 	beq	r6,zero,2afec <__umodsi3+0x4c>
   2afbc:	28000516 	blt	r5,zero,2afd4 <__umodsi3+0x34>
   2afc0:	294b883a 	add	r5,r5,r5
   2afc4:	31bfffc4 	addi	r6,r6,-1
   2afc8:	18c7883a 	add	r3,r3,r3
   2afcc:	293ffa36 	bltu	r5,r4,2afb8 <__alt_data_end+0xf802afb8>
   2afd0:	18000626 	beq	r3,zero,2afec <__umodsi3+0x4c>
   2afd4:	1806d07a 	srli	r3,r3,1
   2afd8:	11400136 	bltu	r2,r5,2afe0 <__umodsi3+0x40>
   2afdc:	1145c83a 	sub	r2,r2,r5
   2afe0:	280ad07a 	srli	r5,r5,1
   2afe4:	183ffb1e 	bne	r3,zero,2afd4 <__alt_data_end+0xf802afd4>
   2afe8:	f800283a 	ret
   2afec:	f800283a 	ret
   2aff0:	00c00044 	movi	r3,1
   2aff4:	003ff706 	br	2afd4 <__alt_data_end+0xf802afd4>

0002aff8 <__adddf3>:
   2aff8:	02c00434 	movhi	r11,16
   2affc:	5affffc4 	addi	r11,r11,-1
   2b000:	2806d7fa 	srli	r3,r5,31
   2b004:	2ad4703a 	and	r10,r5,r11
   2b008:	3ad2703a 	and	r9,r7,r11
   2b00c:	3804d53a 	srli	r2,r7,20
   2b010:	3018d77a 	srli	r12,r6,29
   2b014:	280ad53a 	srli	r5,r5,20
   2b018:	501490fa 	slli	r10,r10,3
   2b01c:	2010d77a 	srli	r8,r4,29
   2b020:	481290fa 	slli	r9,r9,3
   2b024:	380ed7fa 	srli	r7,r7,31
   2b028:	defffb04 	addi	sp,sp,-20
   2b02c:	dc800215 	stw	r18,8(sp)
   2b030:	dc400115 	stw	r17,4(sp)
   2b034:	dc000015 	stw	r16,0(sp)
   2b038:	dfc00415 	stw	ra,16(sp)
   2b03c:	dcc00315 	stw	r19,12(sp)
   2b040:	1c803fcc 	andi	r18,r3,255
   2b044:	2c01ffcc 	andi	r16,r5,2047
   2b048:	5210b03a 	or	r8,r10,r8
   2b04c:	202290fa 	slli	r17,r4,3
   2b050:	1081ffcc 	andi	r2,r2,2047
   2b054:	4b12b03a 	or	r9,r9,r12
   2b058:	300c90fa 	slli	r6,r6,3
   2b05c:	91c07526 	beq	r18,r7,2b234 <__adddf3+0x23c>
   2b060:	8087c83a 	sub	r3,r16,r2
   2b064:	00c0ab0e 	bge	zero,r3,2b314 <__adddf3+0x31c>
   2b068:	10002a1e 	bne	r2,zero,2b114 <__adddf3+0x11c>
   2b06c:	4984b03a 	or	r2,r9,r6
   2b070:	1000961e 	bne	r2,zero,2b2cc <__adddf3+0x2d4>
   2b074:	888001cc 	andi	r2,r17,7
   2b078:	10000726 	beq	r2,zero,2b098 <__adddf3+0xa0>
   2b07c:	888003cc 	andi	r2,r17,15
   2b080:	00c00104 	movi	r3,4
   2b084:	10c00426 	beq	r2,r3,2b098 <__adddf3+0xa0>
   2b088:	88c7883a 	add	r3,r17,r3
   2b08c:	1c63803a 	cmpltu	r17,r3,r17
   2b090:	4451883a 	add	r8,r8,r17
   2b094:	1823883a 	mov	r17,r3
   2b098:	4080202c 	andhi	r2,r8,128
   2b09c:	10005926 	beq	r2,zero,2b204 <__adddf3+0x20c>
   2b0a0:	84000044 	addi	r16,r16,1
   2b0a4:	0081ffc4 	movi	r2,2047
   2b0a8:	8080ba26 	beq	r16,r2,2b394 <__adddf3+0x39c>
   2b0ac:	00bfe034 	movhi	r2,65408
   2b0b0:	10bfffc4 	addi	r2,r2,-1
   2b0b4:	4090703a 	and	r8,r8,r2
   2b0b8:	4004977a 	slli	r2,r8,29
   2b0bc:	4010927a 	slli	r8,r8,9
   2b0c0:	8822d0fa 	srli	r17,r17,3
   2b0c4:	8401ffcc 	andi	r16,r16,2047
   2b0c8:	4010d33a 	srli	r8,r8,12
   2b0cc:	9007883a 	mov	r3,r18
   2b0d0:	1444b03a 	or	r2,r2,r17
   2b0d4:	8401ffcc 	andi	r16,r16,2047
   2b0d8:	8020953a 	slli	r16,r16,20
   2b0dc:	18c03fcc 	andi	r3,r3,255
   2b0e0:	01000434 	movhi	r4,16
   2b0e4:	213fffc4 	addi	r4,r4,-1
   2b0e8:	180697fa 	slli	r3,r3,31
   2b0ec:	4110703a 	and	r8,r8,r4
   2b0f0:	4410b03a 	or	r8,r8,r16
   2b0f4:	40c6b03a 	or	r3,r8,r3
   2b0f8:	dfc00417 	ldw	ra,16(sp)
   2b0fc:	dcc00317 	ldw	r19,12(sp)
   2b100:	dc800217 	ldw	r18,8(sp)
   2b104:	dc400117 	ldw	r17,4(sp)
   2b108:	dc000017 	ldw	r16,0(sp)
   2b10c:	dec00504 	addi	sp,sp,20
   2b110:	f800283a 	ret
   2b114:	0081ffc4 	movi	r2,2047
   2b118:	80bfd626 	beq	r16,r2,2b074 <__alt_data_end+0xf802b074>
   2b11c:	4a402034 	orhi	r9,r9,128
   2b120:	00800e04 	movi	r2,56
   2b124:	10c09f16 	blt	r2,r3,2b3a4 <__adddf3+0x3ac>
   2b128:	008007c4 	movi	r2,31
   2b12c:	10c0c216 	blt	r2,r3,2b438 <__adddf3+0x440>
   2b130:	00800804 	movi	r2,32
   2b134:	10c5c83a 	sub	r2,r2,r3
   2b138:	488a983a 	sll	r5,r9,r2
   2b13c:	30c8d83a 	srl	r4,r6,r3
   2b140:	3084983a 	sll	r2,r6,r2
   2b144:	48c6d83a 	srl	r3,r9,r3
   2b148:	290cb03a 	or	r6,r5,r4
   2b14c:	1004c03a 	cmpne	r2,r2,zero
   2b150:	308cb03a 	or	r6,r6,r2
   2b154:	898dc83a 	sub	r6,r17,r6
   2b158:	89a3803a 	cmpltu	r17,r17,r6
   2b15c:	40d1c83a 	sub	r8,r8,r3
   2b160:	4451c83a 	sub	r8,r8,r17
   2b164:	3023883a 	mov	r17,r6
   2b168:	4080202c 	andhi	r2,r8,128
   2b16c:	10002326 	beq	r2,zero,2b1fc <__adddf3+0x204>
   2b170:	04c02034 	movhi	r19,128
   2b174:	9cffffc4 	addi	r19,r19,-1
   2b178:	44e6703a 	and	r19,r8,r19
   2b17c:	98007626 	beq	r19,zero,2b358 <__adddf3+0x360>
   2b180:	9809883a 	mov	r4,r19
   2b184:	002d5fc0 	call	2d5fc <__clzsi2>
   2b188:	10fffe04 	addi	r3,r2,-8
   2b18c:	010007c4 	movi	r4,31
   2b190:	20c07716 	blt	r4,r3,2b370 <__adddf3+0x378>
   2b194:	00800804 	movi	r2,32
   2b198:	10c5c83a 	sub	r2,r2,r3
   2b19c:	8884d83a 	srl	r2,r17,r2
   2b1a0:	98d0983a 	sll	r8,r19,r3
   2b1a4:	88e2983a 	sll	r17,r17,r3
   2b1a8:	1204b03a 	or	r2,r2,r8
   2b1ac:	1c007416 	blt	r3,r16,2b380 <__adddf3+0x388>
   2b1b0:	1c21c83a 	sub	r16,r3,r16
   2b1b4:	82000044 	addi	r8,r16,1
   2b1b8:	00c007c4 	movi	r3,31
   2b1bc:	1a009116 	blt	r3,r8,2b404 <__adddf3+0x40c>
   2b1c0:	00c00804 	movi	r3,32
   2b1c4:	1a07c83a 	sub	r3,r3,r8
   2b1c8:	8a08d83a 	srl	r4,r17,r8
   2b1cc:	88e2983a 	sll	r17,r17,r3
   2b1d0:	10c6983a 	sll	r3,r2,r3
   2b1d4:	1210d83a 	srl	r8,r2,r8
   2b1d8:	8804c03a 	cmpne	r2,r17,zero
   2b1dc:	1906b03a 	or	r3,r3,r4
   2b1e0:	18a2b03a 	or	r17,r3,r2
   2b1e4:	0021883a 	mov	r16,zero
   2b1e8:	003fa206 	br	2b074 <__alt_data_end+0xf802b074>
   2b1ec:	1890b03a 	or	r8,r3,r2
   2b1f0:	40017d26 	beq	r8,zero,2b7e8 <__adddf3+0x7f0>
   2b1f4:	1011883a 	mov	r8,r2
   2b1f8:	1823883a 	mov	r17,r3
   2b1fc:	888001cc 	andi	r2,r17,7
   2b200:	103f9e1e 	bne	r2,zero,2b07c <__alt_data_end+0xf802b07c>
   2b204:	4004977a 	slli	r2,r8,29
   2b208:	8822d0fa 	srli	r17,r17,3
   2b20c:	4010d0fa 	srli	r8,r8,3
   2b210:	9007883a 	mov	r3,r18
   2b214:	1444b03a 	or	r2,r2,r17
   2b218:	0101ffc4 	movi	r4,2047
   2b21c:	81002426 	beq	r16,r4,2b2b0 <__adddf3+0x2b8>
   2b220:	8120703a 	and	r16,r16,r4
   2b224:	01000434 	movhi	r4,16
   2b228:	213fffc4 	addi	r4,r4,-1
   2b22c:	4110703a 	and	r8,r8,r4
   2b230:	003fa806 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b234:	8089c83a 	sub	r4,r16,r2
   2b238:	01005e0e 	bge	zero,r4,2b3b4 <__adddf3+0x3bc>
   2b23c:	10002b26 	beq	r2,zero,2b2ec <__adddf3+0x2f4>
   2b240:	0081ffc4 	movi	r2,2047
   2b244:	80bf8b26 	beq	r16,r2,2b074 <__alt_data_end+0xf802b074>
   2b248:	4a402034 	orhi	r9,r9,128
   2b24c:	00800e04 	movi	r2,56
   2b250:	1100a40e 	bge	r2,r4,2b4e4 <__adddf3+0x4ec>
   2b254:	498cb03a 	or	r6,r9,r6
   2b258:	300ac03a 	cmpne	r5,r6,zero
   2b25c:	0013883a 	mov	r9,zero
   2b260:	2c4b883a 	add	r5,r5,r17
   2b264:	2c63803a 	cmpltu	r17,r5,r17
   2b268:	4a11883a 	add	r8,r9,r8
   2b26c:	8a11883a 	add	r8,r17,r8
   2b270:	2823883a 	mov	r17,r5
   2b274:	4080202c 	andhi	r2,r8,128
   2b278:	103fe026 	beq	r2,zero,2b1fc <__alt_data_end+0xf802b1fc>
   2b27c:	84000044 	addi	r16,r16,1
   2b280:	0081ffc4 	movi	r2,2047
   2b284:	8080d226 	beq	r16,r2,2b5d0 <__adddf3+0x5d8>
   2b288:	00bfe034 	movhi	r2,65408
   2b28c:	10bfffc4 	addi	r2,r2,-1
   2b290:	4090703a 	and	r8,r8,r2
   2b294:	880ad07a 	srli	r5,r17,1
   2b298:	400897fa 	slli	r4,r8,31
   2b29c:	88c0004c 	andi	r3,r17,1
   2b2a0:	28e2b03a 	or	r17,r5,r3
   2b2a4:	4010d07a 	srli	r8,r8,1
   2b2a8:	2462b03a 	or	r17,r4,r17
   2b2ac:	003f7106 	br	2b074 <__alt_data_end+0xf802b074>
   2b2b0:	4088b03a 	or	r4,r8,r2
   2b2b4:	20014526 	beq	r4,zero,2b7cc <__adddf3+0x7d4>
   2b2b8:	01000434 	movhi	r4,16
   2b2bc:	42000234 	orhi	r8,r8,8
   2b2c0:	213fffc4 	addi	r4,r4,-1
   2b2c4:	4110703a 	and	r8,r8,r4
   2b2c8:	003f8206 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b2cc:	18ffffc4 	addi	r3,r3,-1
   2b2d0:	1800491e 	bne	r3,zero,2b3f8 <__adddf3+0x400>
   2b2d4:	898bc83a 	sub	r5,r17,r6
   2b2d8:	8963803a 	cmpltu	r17,r17,r5
   2b2dc:	4251c83a 	sub	r8,r8,r9
   2b2e0:	4451c83a 	sub	r8,r8,r17
   2b2e4:	2823883a 	mov	r17,r5
   2b2e8:	003f9f06 	br	2b168 <__alt_data_end+0xf802b168>
   2b2ec:	4984b03a 	or	r2,r9,r6
   2b2f0:	103f6026 	beq	r2,zero,2b074 <__alt_data_end+0xf802b074>
   2b2f4:	213fffc4 	addi	r4,r4,-1
   2b2f8:	2000931e 	bne	r4,zero,2b548 <__adddf3+0x550>
   2b2fc:	898d883a 	add	r6,r17,r6
   2b300:	3463803a 	cmpltu	r17,r6,r17
   2b304:	4251883a 	add	r8,r8,r9
   2b308:	8a11883a 	add	r8,r17,r8
   2b30c:	3023883a 	mov	r17,r6
   2b310:	003fd806 	br	2b274 <__alt_data_end+0xf802b274>
   2b314:	1800541e 	bne	r3,zero,2b468 <__adddf3+0x470>
   2b318:	80800044 	addi	r2,r16,1
   2b31c:	1081ffcc 	andi	r2,r2,2047
   2b320:	00c00044 	movi	r3,1
   2b324:	1880a00e 	bge	r3,r2,2b5a8 <__adddf3+0x5b0>
   2b328:	8989c83a 	sub	r4,r17,r6
   2b32c:	8905803a 	cmpltu	r2,r17,r4
   2b330:	4267c83a 	sub	r19,r8,r9
   2b334:	98a7c83a 	sub	r19,r19,r2
   2b338:	9880202c 	andhi	r2,r19,128
   2b33c:	10006326 	beq	r2,zero,2b4cc <__adddf3+0x4d4>
   2b340:	3463c83a 	sub	r17,r6,r17
   2b344:	4a07c83a 	sub	r3,r9,r8
   2b348:	344d803a 	cmpltu	r6,r6,r17
   2b34c:	19a7c83a 	sub	r19,r3,r6
   2b350:	3825883a 	mov	r18,r7
   2b354:	983f8a1e 	bne	r19,zero,2b180 <__alt_data_end+0xf802b180>
   2b358:	8809883a 	mov	r4,r17
   2b35c:	002d5fc0 	call	2d5fc <__clzsi2>
   2b360:	10800804 	addi	r2,r2,32
   2b364:	10fffe04 	addi	r3,r2,-8
   2b368:	010007c4 	movi	r4,31
   2b36c:	20ff890e 	bge	r4,r3,2b194 <__alt_data_end+0xf802b194>
   2b370:	10bff604 	addi	r2,r2,-40
   2b374:	8884983a 	sll	r2,r17,r2
   2b378:	0023883a 	mov	r17,zero
   2b37c:	1c3f8c0e 	bge	r3,r16,2b1b0 <__alt_data_end+0xf802b1b0>
   2b380:	023fe034 	movhi	r8,65408
   2b384:	423fffc4 	addi	r8,r8,-1
   2b388:	80e1c83a 	sub	r16,r16,r3
   2b38c:	1210703a 	and	r8,r2,r8
   2b390:	003f3806 	br	2b074 <__alt_data_end+0xf802b074>
   2b394:	9007883a 	mov	r3,r18
   2b398:	0011883a 	mov	r8,zero
   2b39c:	0005883a 	mov	r2,zero
   2b3a0:	003f4c06 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b3a4:	498cb03a 	or	r6,r9,r6
   2b3a8:	300cc03a 	cmpne	r6,r6,zero
   2b3ac:	0007883a 	mov	r3,zero
   2b3b0:	003f6806 	br	2b154 <__alt_data_end+0xf802b154>
   2b3b4:	20009c1e 	bne	r4,zero,2b628 <__adddf3+0x630>
   2b3b8:	80800044 	addi	r2,r16,1
   2b3bc:	1141ffcc 	andi	r5,r2,2047
   2b3c0:	01000044 	movi	r4,1
   2b3c4:	2140670e 	bge	r4,r5,2b564 <__adddf3+0x56c>
   2b3c8:	0101ffc4 	movi	r4,2047
   2b3cc:	11007f26 	beq	r2,r4,2b5cc <__adddf3+0x5d4>
   2b3d0:	898d883a 	add	r6,r17,r6
   2b3d4:	4247883a 	add	r3,r8,r9
   2b3d8:	3451803a 	cmpltu	r8,r6,r17
   2b3dc:	40d1883a 	add	r8,r8,r3
   2b3e0:	402297fa 	slli	r17,r8,31
   2b3e4:	300cd07a 	srli	r6,r6,1
   2b3e8:	4010d07a 	srli	r8,r8,1
   2b3ec:	1021883a 	mov	r16,r2
   2b3f0:	89a2b03a 	or	r17,r17,r6
   2b3f4:	003f1f06 	br	2b074 <__alt_data_end+0xf802b074>
   2b3f8:	0081ffc4 	movi	r2,2047
   2b3fc:	80bf481e 	bne	r16,r2,2b120 <__alt_data_end+0xf802b120>
   2b400:	003f1c06 	br	2b074 <__alt_data_end+0xf802b074>
   2b404:	843ff844 	addi	r16,r16,-31
   2b408:	01000804 	movi	r4,32
   2b40c:	1406d83a 	srl	r3,r2,r16
   2b410:	41005026 	beq	r8,r4,2b554 <__adddf3+0x55c>
   2b414:	01001004 	movi	r4,64
   2b418:	2211c83a 	sub	r8,r4,r8
   2b41c:	1204983a 	sll	r2,r2,r8
   2b420:	88a2b03a 	or	r17,r17,r2
   2b424:	8822c03a 	cmpne	r17,r17,zero
   2b428:	1c62b03a 	or	r17,r3,r17
   2b42c:	0011883a 	mov	r8,zero
   2b430:	0021883a 	mov	r16,zero
   2b434:	003f7106 	br	2b1fc <__alt_data_end+0xf802b1fc>
   2b438:	193ff804 	addi	r4,r3,-32
   2b43c:	00800804 	movi	r2,32
   2b440:	4908d83a 	srl	r4,r9,r4
   2b444:	18804526 	beq	r3,r2,2b55c <__adddf3+0x564>
   2b448:	00801004 	movi	r2,64
   2b44c:	10c5c83a 	sub	r2,r2,r3
   2b450:	4886983a 	sll	r3,r9,r2
   2b454:	198cb03a 	or	r6,r3,r6
   2b458:	300cc03a 	cmpne	r6,r6,zero
   2b45c:	218cb03a 	or	r6,r4,r6
   2b460:	0007883a 	mov	r3,zero
   2b464:	003f3b06 	br	2b154 <__alt_data_end+0xf802b154>
   2b468:	80002a26 	beq	r16,zero,2b514 <__adddf3+0x51c>
   2b46c:	0101ffc4 	movi	r4,2047
   2b470:	11006826 	beq	r2,r4,2b614 <__adddf3+0x61c>
   2b474:	00c7c83a 	sub	r3,zero,r3
   2b478:	42002034 	orhi	r8,r8,128
   2b47c:	01000e04 	movi	r4,56
   2b480:	20c07c16 	blt	r4,r3,2b674 <__adddf3+0x67c>
   2b484:	010007c4 	movi	r4,31
   2b488:	20c0da16 	blt	r4,r3,2b7f4 <__adddf3+0x7fc>
   2b48c:	01000804 	movi	r4,32
   2b490:	20c9c83a 	sub	r4,r4,r3
   2b494:	4114983a 	sll	r10,r8,r4
   2b498:	88cad83a 	srl	r5,r17,r3
   2b49c:	8908983a 	sll	r4,r17,r4
   2b4a0:	40c6d83a 	srl	r3,r8,r3
   2b4a4:	5162b03a 	or	r17,r10,r5
   2b4a8:	2008c03a 	cmpne	r4,r4,zero
   2b4ac:	8922b03a 	or	r17,r17,r4
   2b4b0:	3463c83a 	sub	r17,r6,r17
   2b4b4:	48c7c83a 	sub	r3,r9,r3
   2b4b8:	344d803a 	cmpltu	r6,r6,r17
   2b4bc:	1991c83a 	sub	r8,r3,r6
   2b4c0:	1021883a 	mov	r16,r2
   2b4c4:	3825883a 	mov	r18,r7
   2b4c8:	003f2706 	br	2b168 <__alt_data_end+0xf802b168>
   2b4cc:	24d0b03a 	or	r8,r4,r19
   2b4d0:	40001b1e 	bne	r8,zero,2b540 <__adddf3+0x548>
   2b4d4:	0005883a 	mov	r2,zero
   2b4d8:	0007883a 	mov	r3,zero
   2b4dc:	0021883a 	mov	r16,zero
   2b4e0:	003f4d06 	br	2b218 <__alt_data_end+0xf802b218>
   2b4e4:	008007c4 	movi	r2,31
   2b4e8:	11003c16 	blt	r2,r4,2b5dc <__adddf3+0x5e4>
   2b4ec:	00800804 	movi	r2,32
   2b4f0:	1105c83a 	sub	r2,r2,r4
   2b4f4:	488e983a 	sll	r7,r9,r2
   2b4f8:	310ad83a 	srl	r5,r6,r4
   2b4fc:	3084983a 	sll	r2,r6,r2
   2b500:	4912d83a 	srl	r9,r9,r4
   2b504:	394ab03a 	or	r5,r7,r5
   2b508:	1004c03a 	cmpne	r2,r2,zero
   2b50c:	288ab03a 	or	r5,r5,r2
   2b510:	003f5306 	br	2b260 <__alt_data_end+0xf802b260>
   2b514:	4448b03a 	or	r4,r8,r17
   2b518:	20003e26 	beq	r4,zero,2b614 <__adddf3+0x61c>
   2b51c:	00c6303a 	nor	r3,zero,r3
   2b520:	18003a1e 	bne	r3,zero,2b60c <__adddf3+0x614>
   2b524:	3463c83a 	sub	r17,r6,r17
   2b528:	4a07c83a 	sub	r3,r9,r8
   2b52c:	344d803a 	cmpltu	r6,r6,r17
   2b530:	1991c83a 	sub	r8,r3,r6
   2b534:	1021883a 	mov	r16,r2
   2b538:	3825883a 	mov	r18,r7
   2b53c:	003f0a06 	br	2b168 <__alt_data_end+0xf802b168>
   2b540:	2023883a 	mov	r17,r4
   2b544:	003f0d06 	br	2b17c <__alt_data_end+0xf802b17c>
   2b548:	0081ffc4 	movi	r2,2047
   2b54c:	80bf3f1e 	bne	r16,r2,2b24c <__alt_data_end+0xf802b24c>
   2b550:	003ec806 	br	2b074 <__alt_data_end+0xf802b074>
   2b554:	0005883a 	mov	r2,zero
   2b558:	003fb106 	br	2b420 <__alt_data_end+0xf802b420>
   2b55c:	0007883a 	mov	r3,zero
   2b560:	003fbc06 	br	2b454 <__alt_data_end+0xf802b454>
   2b564:	4444b03a 	or	r2,r8,r17
   2b568:	8000871e 	bne	r16,zero,2b788 <__adddf3+0x790>
   2b56c:	1000ba26 	beq	r2,zero,2b858 <__adddf3+0x860>
   2b570:	4984b03a 	or	r2,r9,r6
   2b574:	103ebf26 	beq	r2,zero,2b074 <__alt_data_end+0xf802b074>
   2b578:	8985883a 	add	r2,r17,r6
   2b57c:	4247883a 	add	r3,r8,r9
   2b580:	1451803a 	cmpltu	r8,r2,r17
   2b584:	40d1883a 	add	r8,r8,r3
   2b588:	40c0202c 	andhi	r3,r8,128
   2b58c:	1023883a 	mov	r17,r2
   2b590:	183f1a26 	beq	r3,zero,2b1fc <__alt_data_end+0xf802b1fc>
   2b594:	00bfe034 	movhi	r2,65408
   2b598:	10bfffc4 	addi	r2,r2,-1
   2b59c:	2021883a 	mov	r16,r4
   2b5a0:	4090703a 	and	r8,r8,r2
   2b5a4:	003eb306 	br	2b074 <__alt_data_end+0xf802b074>
   2b5a8:	4444b03a 	or	r2,r8,r17
   2b5ac:	8000291e 	bne	r16,zero,2b654 <__adddf3+0x65c>
   2b5b0:	10004b1e 	bne	r2,zero,2b6e0 <__adddf3+0x6e8>
   2b5b4:	4990b03a 	or	r8,r9,r6
   2b5b8:	40008b26 	beq	r8,zero,2b7e8 <__adddf3+0x7f0>
   2b5bc:	4811883a 	mov	r8,r9
   2b5c0:	3023883a 	mov	r17,r6
   2b5c4:	3825883a 	mov	r18,r7
   2b5c8:	003eaa06 	br	2b074 <__alt_data_end+0xf802b074>
   2b5cc:	1021883a 	mov	r16,r2
   2b5d0:	0011883a 	mov	r8,zero
   2b5d4:	0005883a 	mov	r2,zero
   2b5d8:	003f0f06 	br	2b218 <__alt_data_end+0xf802b218>
   2b5dc:	217ff804 	addi	r5,r4,-32
   2b5e0:	00800804 	movi	r2,32
   2b5e4:	494ad83a 	srl	r5,r9,r5
   2b5e8:	20807d26 	beq	r4,r2,2b7e0 <__adddf3+0x7e8>
   2b5ec:	00801004 	movi	r2,64
   2b5f0:	1109c83a 	sub	r4,r2,r4
   2b5f4:	4912983a 	sll	r9,r9,r4
   2b5f8:	498cb03a 	or	r6,r9,r6
   2b5fc:	300cc03a 	cmpne	r6,r6,zero
   2b600:	298ab03a 	or	r5,r5,r6
   2b604:	0013883a 	mov	r9,zero
   2b608:	003f1506 	br	2b260 <__alt_data_end+0xf802b260>
   2b60c:	0101ffc4 	movi	r4,2047
   2b610:	113f9a1e 	bne	r2,r4,2b47c <__alt_data_end+0xf802b47c>
   2b614:	4811883a 	mov	r8,r9
   2b618:	3023883a 	mov	r17,r6
   2b61c:	1021883a 	mov	r16,r2
   2b620:	3825883a 	mov	r18,r7
   2b624:	003e9306 	br	2b074 <__alt_data_end+0xf802b074>
   2b628:	8000161e 	bne	r16,zero,2b684 <__adddf3+0x68c>
   2b62c:	444ab03a 	or	r5,r8,r17
   2b630:	28005126 	beq	r5,zero,2b778 <__adddf3+0x780>
   2b634:	0108303a 	nor	r4,zero,r4
   2b638:	20004d1e 	bne	r4,zero,2b770 <__adddf3+0x778>
   2b63c:	89a3883a 	add	r17,r17,r6
   2b640:	4253883a 	add	r9,r8,r9
   2b644:	898d803a 	cmpltu	r6,r17,r6
   2b648:	3251883a 	add	r8,r6,r9
   2b64c:	1021883a 	mov	r16,r2
   2b650:	003f0806 	br	2b274 <__alt_data_end+0xf802b274>
   2b654:	1000301e 	bne	r2,zero,2b718 <__adddf3+0x720>
   2b658:	4984b03a 	or	r2,r9,r6
   2b65c:	10007126 	beq	r2,zero,2b824 <__adddf3+0x82c>
   2b660:	4811883a 	mov	r8,r9
   2b664:	3023883a 	mov	r17,r6
   2b668:	3825883a 	mov	r18,r7
   2b66c:	0401ffc4 	movi	r16,2047
   2b670:	003e8006 	br	2b074 <__alt_data_end+0xf802b074>
   2b674:	4462b03a 	or	r17,r8,r17
   2b678:	8822c03a 	cmpne	r17,r17,zero
   2b67c:	0007883a 	mov	r3,zero
   2b680:	003f8b06 	br	2b4b0 <__alt_data_end+0xf802b4b0>
   2b684:	0141ffc4 	movi	r5,2047
   2b688:	11403b26 	beq	r2,r5,2b778 <__adddf3+0x780>
   2b68c:	0109c83a 	sub	r4,zero,r4
   2b690:	42002034 	orhi	r8,r8,128
   2b694:	01400e04 	movi	r5,56
   2b698:	29006716 	blt	r5,r4,2b838 <__adddf3+0x840>
   2b69c:	014007c4 	movi	r5,31
   2b6a0:	29007016 	blt	r5,r4,2b864 <__adddf3+0x86c>
   2b6a4:	01400804 	movi	r5,32
   2b6a8:	290bc83a 	sub	r5,r5,r4
   2b6ac:	4154983a 	sll	r10,r8,r5
   2b6b0:	890ed83a 	srl	r7,r17,r4
   2b6b4:	894a983a 	sll	r5,r17,r5
   2b6b8:	4108d83a 	srl	r4,r8,r4
   2b6bc:	51e2b03a 	or	r17,r10,r7
   2b6c0:	280ac03a 	cmpne	r5,r5,zero
   2b6c4:	8962b03a 	or	r17,r17,r5
   2b6c8:	89a3883a 	add	r17,r17,r6
   2b6cc:	2253883a 	add	r9,r4,r9
   2b6d0:	898d803a 	cmpltu	r6,r17,r6
   2b6d4:	3251883a 	add	r8,r6,r9
   2b6d8:	1021883a 	mov	r16,r2
   2b6dc:	003ee506 	br	2b274 <__alt_data_end+0xf802b274>
   2b6e0:	4984b03a 	or	r2,r9,r6
   2b6e4:	103e6326 	beq	r2,zero,2b074 <__alt_data_end+0xf802b074>
   2b6e8:	8987c83a 	sub	r3,r17,r6
   2b6ec:	88c9803a 	cmpltu	r4,r17,r3
   2b6f0:	4245c83a 	sub	r2,r8,r9
   2b6f4:	1105c83a 	sub	r2,r2,r4
   2b6f8:	1100202c 	andhi	r4,r2,128
   2b6fc:	203ebb26 	beq	r4,zero,2b1ec <__alt_data_end+0xf802b1ec>
   2b700:	3463c83a 	sub	r17,r6,r17
   2b704:	4a07c83a 	sub	r3,r9,r8
   2b708:	344d803a 	cmpltu	r6,r6,r17
   2b70c:	1991c83a 	sub	r8,r3,r6
   2b710:	3825883a 	mov	r18,r7
   2b714:	003e5706 	br	2b074 <__alt_data_end+0xf802b074>
   2b718:	4984b03a 	or	r2,r9,r6
   2b71c:	10002e26 	beq	r2,zero,2b7d8 <__adddf3+0x7e0>
   2b720:	4004d0fa 	srli	r2,r8,3
   2b724:	8822d0fa 	srli	r17,r17,3
   2b728:	4010977a 	slli	r8,r8,29
   2b72c:	10c0022c 	andhi	r3,r2,8
   2b730:	4462b03a 	or	r17,r8,r17
   2b734:	18000826 	beq	r3,zero,2b758 <__adddf3+0x760>
   2b738:	4808d0fa 	srli	r4,r9,3
   2b73c:	20c0022c 	andhi	r3,r4,8
   2b740:	1800051e 	bne	r3,zero,2b758 <__adddf3+0x760>
   2b744:	300cd0fa 	srli	r6,r6,3
   2b748:	4806977a 	slli	r3,r9,29
   2b74c:	2005883a 	mov	r2,r4
   2b750:	3825883a 	mov	r18,r7
   2b754:	19a2b03a 	or	r17,r3,r6
   2b758:	8810d77a 	srli	r8,r17,29
   2b75c:	100490fa 	slli	r2,r2,3
   2b760:	882290fa 	slli	r17,r17,3
   2b764:	0401ffc4 	movi	r16,2047
   2b768:	4090b03a 	or	r8,r8,r2
   2b76c:	003e4106 	br	2b074 <__alt_data_end+0xf802b074>
   2b770:	0141ffc4 	movi	r5,2047
   2b774:	117fc71e 	bne	r2,r5,2b694 <__alt_data_end+0xf802b694>
   2b778:	4811883a 	mov	r8,r9
   2b77c:	3023883a 	mov	r17,r6
   2b780:	1021883a 	mov	r16,r2
   2b784:	003e3b06 	br	2b074 <__alt_data_end+0xf802b074>
   2b788:	10002f26 	beq	r2,zero,2b848 <__adddf3+0x850>
   2b78c:	4984b03a 	or	r2,r9,r6
   2b790:	10001126 	beq	r2,zero,2b7d8 <__adddf3+0x7e0>
   2b794:	4004d0fa 	srli	r2,r8,3
   2b798:	8822d0fa 	srli	r17,r17,3
   2b79c:	4010977a 	slli	r8,r8,29
   2b7a0:	10c0022c 	andhi	r3,r2,8
   2b7a4:	4462b03a 	or	r17,r8,r17
   2b7a8:	183feb26 	beq	r3,zero,2b758 <__alt_data_end+0xf802b758>
   2b7ac:	4808d0fa 	srli	r4,r9,3
   2b7b0:	20c0022c 	andhi	r3,r4,8
   2b7b4:	183fe81e 	bne	r3,zero,2b758 <__alt_data_end+0xf802b758>
   2b7b8:	300cd0fa 	srli	r6,r6,3
   2b7bc:	4806977a 	slli	r3,r9,29
   2b7c0:	2005883a 	mov	r2,r4
   2b7c4:	19a2b03a 	or	r17,r3,r6
   2b7c8:	003fe306 	br	2b758 <__alt_data_end+0xf802b758>
   2b7cc:	0011883a 	mov	r8,zero
   2b7d0:	0005883a 	mov	r2,zero
   2b7d4:	003e3f06 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b7d8:	0401ffc4 	movi	r16,2047
   2b7dc:	003e2506 	br	2b074 <__alt_data_end+0xf802b074>
   2b7e0:	0013883a 	mov	r9,zero
   2b7e4:	003f8406 	br	2b5f8 <__alt_data_end+0xf802b5f8>
   2b7e8:	0005883a 	mov	r2,zero
   2b7ec:	0007883a 	mov	r3,zero
   2b7f0:	003e8906 	br	2b218 <__alt_data_end+0xf802b218>
   2b7f4:	197ff804 	addi	r5,r3,-32
   2b7f8:	01000804 	movi	r4,32
   2b7fc:	414ad83a 	srl	r5,r8,r5
   2b800:	19002426 	beq	r3,r4,2b894 <__adddf3+0x89c>
   2b804:	01001004 	movi	r4,64
   2b808:	20c7c83a 	sub	r3,r4,r3
   2b80c:	40c6983a 	sll	r3,r8,r3
   2b810:	1c46b03a 	or	r3,r3,r17
   2b814:	1806c03a 	cmpne	r3,r3,zero
   2b818:	28e2b03a 	or	r17,r5,r3
   2b81c:	0007883a 	mov	r3,zero
   2b820:	003f2306 	br	2b4b0 <__alt_data_end+0xf802b4b0>
   2b824:	0007883a 	mov	r3,zero
   2b828:	5811883a 	mov	r8,r11
   2b82c:	00bfffc4 	movi	r2,-1
   2b830:	0401ffc4 	movi	r16,2047
   2b834:	003e7806 	br	2b218 <__alt_data_end+0xf802b218>
   2b838:	4462b03a 	or	r17,r8,r17
   2b83c:	8822c03a 	cmpne	r17,r17,zero
   2b840:	0009883a 	mov	r4,zero
   2b844:	003fa006 	br	2b6c8 <__alt_data_end+0xf802b6c8>
   2b848:	4811883a 	mov	r8,r9
   2b84c:	3023883a 	mov	r17,r6
   2b850:	0401ffc4 	movi	r16,2047
   2b854:	003e0706 	br	2b074 <__alt_data_end+0xf802b074>
   2b858:	4811883a 	mov	r8,r9
   2b85c:	3023883a 	mov	r17,r6
   2b860:	003e0406 	br	2b074 <__alt_data_end+0xf802b074>
   2b864:	21fff804 	addi	r7,r4,-32
   2b868:	01400804 	movi	r5,32
   2b86c:	41ced83a 	srl	r7,r8,r7
   2b870:	21400a26 	beq	r4,r5,2b89c <__adddf3+0x8a4>
   2b874:	01401004 	movi	r5,64
   2b878:	2909c83a 	sub	r4,r5,r4
   2b87c:	4108983a 	sll	r4,r8,r4
   2b880:	2448b03a 	or	r4,r4,r17
   2b884:	2008c03a 	cmpne	r4,r4,zero
   2b888:	3922b03a 	or	r17,r7,r4
   2b88c:	0009883a 	mov	r4,zero
   2b890:	003f8d06 	br	2b6c8 <__alt_data_end+0xf802b6c8>
   2b894:	0007883a 	mov	r3,zero
   2b898:	003fdd06 	br	2b810 <__alt_data_end+0xf802b810>
   2b89c:	0009883a 	mov	r4,zero
   2b8a0:	003ff706 	br	2b880 <__alt_data_end+0xf802b880>

0002b8a4 <__divdf3>:
   2b8a4:	defff204 	addi	sp,sp,-56
   2b8a8:	dd400915 	stw	r21,36(sp)
   2b8ac:	282ad53a 	srli	r21,r5,20
   2b8b0:	dd000815 	stw	r20,32(sp)
   2b8b4:	2828d7fa 	srli	r20,r5,31
   2b8b8:	dc000415 	stw	r16,16(sp)
   2b8bc:	04000434 	movhi	r16,16
   2b8c0:	df000c15 	stw	fp,48(sp)
   2b8c4:	843fffc4 	addi	r16,r16,-1
   2b8c8:	dfc00d15 	stw	ra,52(sp)
   2b8cc:	ddc00b15 	stw	r23,44(sp)
   2b8d0:	dd800a15 	stw	r22,40(sp)
   2b8d4:	dcc00715 	stw	r19,28(sp)
   2b8d8:	dc800615 	stw	r18,24(sp)
   2b8dc:	dc400515 	stw	r17,20(sp)
   2b8e0:	ad41ffcc 	andi	r21,r21,2047
   2b8e4:	2c20703a 	and	r16,r5,r16
   2b8e8:	a7003fcc 	andi	fp,r20,255
   2b8ec:	a8006126 	beq	r21,zero,2ba74 <__divdf3+0x1d0>
   2b8f0:	0081ffc4 	movi	r2,2047
   2b8f4:	2025883a 	mov	r18,r4
   2b8f8:	a8803726 	beq	r21,r2,2b9d8 <__divdf3+0x134>
   2b8fc:	80800434 	orhi	r2,r16,16
   2b900:	100490fa 	slli	r2,r2,3
   2b904:	2020d77a 	srli	r16,r4,29
   2b908:	202490fa 	slli	r18,r4,3
   2b90c:	ad7f0044 	addi	r21,r21,-1023
   2b910:	80a0b03a 	or	r16,r16,r2
   2b914:	0027883a 	mov	r19,zero
   2b918:	0013883a 	mov	r9,zero
   2b91c:	3804d53a 	srli	r2,r7,20
   2b920:	382cd7fa 	srli	r22,r7,31
   2b924:	04400434 	movhi	r17,16
   2b928:	8c7fffc4 	addi	r17,r17,-1
   2b92c:	1081ffcc 	andi	r2,r2,2047
   2b930:	3011883a 	mov	r8,r6
   2b934:	3c62703a 	and	r17,r7,r17
   2b938:	b5c03fcc 	andi	r23,r22,255
   2b93c:	10006c26 	beq	r2,zero,2baf0 <__divdf3+0x24c>
   2b940:	00c1ffc4 	movi	r3,2047
   2b944:	10c06426 	beq	r2,r3,2bad8 <__divdf3+0x234>
   2b948:	88c00434 	orhi	r3,r17,16
   2b94c:	180690fa 	slli	r3,r3,3
   2b950:	3022d77a 	srli	r17,r6,29
   2b954:	301090fa 	slli	r8,r6,3
   2b958:	10bf0044 	addi	r2,r2,-1023
   2b95c:	88e2b03a 	or	r17,r17,r3
   2b960:	000f883a 	mov	r7,zero
   2b964:	a58cf03a 	xor	r6,r20,r22
   2b968:	3cc8b03a 	or	r4,r7,r19
   2b96c:	a8abc83a 	sub	r21,r21,r2
   2b970:	008003c4 	movi	r2,15
   2b974:	3007883a 	mov	r3,r6
   2b978:	34c03fcc 	andi	r19,r6,255
   2b97c:	11009036 	bltu	r2,r4,2bbc0 <__divdf3+0x31c>
   2b980:	200890ba 	slli	r4,r4,2
   2b984:	008000f4 	movhi	r2,3
   2b988:	10ae6604 	addi	r2,r2,-18024
   2b98c:	2089883a 	add	r4,r4,r2
   2b990:	20800017 	ldw	r2,0(r4)
   2b994:	1000683a 	jmp	r2
   2b998:	0002bbc0 	call	2bbc <__alt_mem_onchip_memory2_0-0x1d444>
   2b99c:	0002ba10 	cmplti	zero,zero,2792
   2b9a0:	0002bbb0 	cmpltui	zero,zero,2798
   2b9a4:	0002ba04 	movi	zero,2792
   2b9a8:	0002bbb0 	cmpltui	zero,zero,2798
   2b9ac:	0002bb84 	movi	zero,2798
   2b9b0:	0002bbb0 	cmpltui	zero,zero,2798
   2b9b4:	0002ba04 	movi	zero,2792
   2b9b8:	0002ba10 	cmplti	zero,zero,2792
   2b9bc:	0002ba10 	cmplti	zero,zero,2792
   2b9c0:	0002bb84 	movi	zero,2798
   2b9c4:	0002ba04 	movi	zero,2792
   2b9c8:	0002b9f4 	movhi	zero,2791
   2b9cc:	0002b9f4 	movhi	zero,2791
   2b9d0:	0002b9f4 	movhi	zero,2791
   2b9d4:	0002bea4 	muli	zero,zero,2810
   2b9d8:	2404b03a 	or	r2,r4,r16
   2b9dc:	1000661e 	bne	r2,zero,2bb78 <__divdf3+0x2d4>
   2b9e0:	04c00204 	movi	r19,8
   2b9e4:	0021883a 	mov	r16,zero
   2b9e8:	0025883a 	mov	r18,zero
   2b9ec:	02400084 	movi	r9,2
   2b9f0:	003fca06 	br	2b91c <__alt_data_end+0xf802b91c>
   2b9f4:	8023883a 	mov	r17,r16
   2b9f8:	9011883a 	mov	r8,r18
   2b9fc:	e02f883a 	mov	r23,fp
   2ba00:	480f883a 	mov	r7,r9
   2ba04:	00800084 	movi	r2,2
   2ba08:	3881311e 	bne	r7,r2,2bed0 <__divdf3+0x62c>
   2ba0c:	b827883a 	mov	r19,r23
   2ba10:	98c0004c 	andi	r3,r19,1
   2ba14:	0081ffc4 	movi	r2,2047
   2ba18:	000b883a 	mov	r5,zero
   2ba1c:	0025883a 	mov	r18,zero
   2ba20:	1004953a 	slli	r2,r2,20
   2ba24:	18c03fcc 	andi	r3,r3,255
   2ba28:	04400434 	movhi	r17,16
   2ba2c:	8c7fffc4 	addi	r17,r17,-1
   2ba30:	180697fa 	slli	r3,r3,31
   2ba34:	2c4a703a 	and	r5,r5,r17
   2ba38:	288ab03a 	or	r5,r5,r2
   2ba3c:	28c6b03a 	or	r3,r5,r3
   2ba40:	9005883a 	mov	r2,r18
   2ba44:	dfc00d17 	ldw	ra,52(sp)
   2ba48:	df000c17 	ldw	fp,48(sp)
   2ba4c:	ddc00b17 	ldw	r23,44(sp)
   2ba50:	dd800a17 	ldw	r22,40(sp)
   2ba54:	dd400917 	ldw	r21,36(sp)
   2ba58:	dd000817 	ldw	r20,32(sp)
   2ba5c:	dcc00717 	ldw	r19,28(sp)
   2ba60:	dc800617 	ldw	r18,24(sp)
   2ba64:	dc400517 	ldw	r17,20(sp)
   2ba68:	dc000417 	ldw	r16,16(sp)
   2ba6c:	dec00e04 	addi	sp,sp,56
   2ba70:	f800283a 	ret
   2ba74:	2404b03a 	or	r2,r4,r16
   2ba78:	2027883a 	mov	r19,r4
   2ba7c:	10003926 	beq	r2,zero,2bb64 <__divdf3+0x2c0>
   2ba80:	80012e26 	beq	r16,zero,2bf3c <__divdf3+0x698>
   2ba84:	8009883a 	mov	r4,r16
   2ba88:	d9800315 	stw	r6,12(sp)
   2ba8c:	d9c00215 	stw	r7,8(sp)
   2ba90:	002d5fc0 	call	2d5fc <__clzsi2>
   2ba94:	d9800317 	ldw	r6,12(sp)
   2ba98:	d9c00217 	ldw	r7,8(sp)
   2ba9c:	113ffd44 	addi	r4,r2,-11
   2baa0:	00c00704 	movi	r3,28
   2baa4:	19012116 	blt	r3,r4,2bf2c <__divdf3+0x688>
   2baa8:	00c00744 	movi	r3,29
   2baac:	147ffe04 	addi	r17,r2,-8
   2bab0:	1907c83a 	sub	r3,r3,r4
   2bab4:	8460983a 	sll	r16,r16,r17
   2bab8:	98c6d83a 	srl	r3,r19,r3
   2babc:	9c64983a 	sll	r18,r19,r17
   2bac0:	1c20b03a 	or	r16,r3,r16
   2bac4:	1080fcc4 	addi	r2,r2,1011
   2bac8:	00abc83a 	sub	r21,zero,r2
   2bacc:	0027883a 	mov	r19,zero
   2bad0:	0013883a 	mov	r9,zero
   2bad4:	003f9106 	br	2b91c <__alt_data_end+0xf802b91c>
   2bad8:	3446b03a 	or	r3,r6,r17
   2badc:	18001f1e 	bne	r3,zero,2bb5c <__divdf3+0x2b8>
   2bae0:	0023883a 	mov	r17,zero
   2bae4:	0011883a 	mov	r8,zero
   2bae8:	01c00084 	movi	r7,2
   2baec:	003f9d06 	br	2b964 <__alt_data_end+0xf802b964>
   2baf0:	3446b03a 	or	r3,r6,r17
   2baf4:	18001526 	beq	r3,zero,2bb4c <__divdf3+0x2a8>
   2baf8:	88011b26 	beq	r17,zero,2bf68 <__divdf3+0x6c4>
   2bafc:	8809883a 	mov	r4,r17
   2bb00:	d9800315 	stw	r6,12(sp)
   2bb04:	da400115 	stw	r9,4(sp)
   2bb08:	002d5fc0 	call	2d5fc <__clzsi2>
   2bb0c:	d9800317 	ldw	r6,12(sp)
   2bb10:	da400117 	ldw	r9,4(sp)
   2bb14:	113ffd44 	addi	r4,r2,-11
   2bb18:	00c00704 	movi	r3,28
   2bb1c:	19010e16 	blt	r3,r4,2bf58 <__divdf3+0x6b4>
   2bb20:	00c00744 	movi	r3,29
   2bb24:	123ffe04 	addi	r8,r2,-8
   2bb28:	1907c83a 	sub	r3,r3,r4
   2bb2c:	8a22983a 	sll	r17,r17,r8
   2bb30:	30c6d83a 	srl	r3,r6,r3
   2bb34:	3210983a 	sll	r8,r6,r8
   2bb38:	1c62b03a 	or	r17,r3,r17
   2bb3c:	1080fcc4 	addi	r2,r2,1011
   2bb40:	0085c83a 	sub	r2,zero,r2
   2bb44:	000f883a 	mov	r7,zero
   2bb48:	003f8606 	br	2b964 <__alt_data_end+0xf802b964>
   2bb4c:	0023883a 	mov	r17,zero
   2bb50:	0011883a 	mov	r8,zero
   2bb54:	01c00044 	movi	r7,1
   2bb58:	003f8206 	br	2b964 <__alt_data_end+0xf802b964>
   2bb5c:	01c000c4 	movi	r7,3
   2bb60:	003f8006 	br	2b964 <__alt_data_end+0xf802b964>
   2bb64:	04c00104 	movi	r19,4
   2bb68:	0021883a 	mov	r16,zero
   2bb6c:	0025883a 	mov	r18,zero
   2bb70:	02400044 	movi	r9,1
   2bb74:	003f6906 	br	2b91c <__alt_data_end+0xf802b91c>
   2bb78:	04c00304 	movi	r19,12
   2bb7c:	024000c4 	movi	r9,3
   2bb80:	003f6606 	br	2b91c <__alt_data_end+0xf802b91c>
   2bb84:	01400434 	movhi	r5,16
   2bb88:	0007883a 	mov	r3,zero
   2bb8c:	297fffc4 	addi	r5,r5,-1
   2bb90:	04bfffc4 	movi	r18,-1
   2bb94:	0081ffc4 	movi	r2,2047
   2bb98:	003fa106 	br	2ba20 <__alt_data_end+0xf802ba20>
   2bb9c:	00c00044 	movi	r3,1
   2bba0:	1887c83a 	sub	r3,r3,r2
   2bba4:	01000e04 	movi	r4,56
   2bba8:	20c1210e 	bge	r4,r3,2c030 <__divdf3+0x78c>
   2bbac:	98c0004c 	andi	r3,r19,1
   2bbb0:	0005883a 	mov	r2,zero
   2bbb4:	000b883a 	mov	r5,zero
   2bbb8:	0025883a 	mov	r18,zero
   2bbbc:	003f9806 	br	2ba20 <__alt_data_end+0xf802ba20>
   2bbc0:	8c00fd36 	bltu	r17,r16,2bfb8 <__divdf3+0x714>
   2bbc4:	8440fb26 	beq	r16,r17,2bfb4 <__divdf3+0x710>
   2bbc8:	8007883a 	mov	r3,r16
   2bbcc:	ad7fffc4 	addi	r21,r21,-1
   2bbd0:	0021883a 	mov	r16,zero
   2bbd4:	4004d63a 	srli	r2,r8,24
   2bbd8:	8822923a 	slli	r17,r17,8
   2bbdc:	1809883a 	mov	r4,r3
   2bbe0:	402c923a 	slli	r22,r8,8
   2bbe4:	88b8b03a 	or	fp,r17,r2
   2bbe8:	e028d43a 	srli	r20,fp,16
   2bbec:	d8c00015 	stw	r3,0(sp)
   2bbf0:	e5ffffcc 	andi	r23,fp,65535
   2bbf4:	a00b883a 	mov	r5,r20
   2bbf8:	002af3c0 	call	2af3c <__udivsi3>
   2bbfc:	d8c00017 	ldw	r3,0(sp)
   2bc00:	a00b883a 	mov	r5,r20
   2bc04:	d8800315 	stw	r2,12(sp)
   2bc08:	1809883a 	mov	r4,r3
   2bc0c:	002afa00 	call	2afa0 <__umodsi3>
   2bc10:	d9800317 	ldw	r6,12(sp)
   2bc14:	1006943a 	slli	r3,r2,16
   2bc18:	9004d43a 	srli	r2,r18,16
   2bc1c:	b9a3383a 	mul	r17,r23,r6
   2bc20:	10c4b03a 	or	r2,r2,r3
   2bc24:	1440062e 	bgeu	r2,r17,2bc40 <__divdf3+0x39c>
   2bc28:	1705883a 	add	r2,r2,fp
   2bc2c:	30ffffc4 	addi	r3,r6,-1
   2bc30:	1700ee36 	bltu	r2,fp,2bfec <__divdf3+0x748>
   2bc34:	1440ed2e 	bgeu	r2,r17,2bfec <__divdf3+0x748>
   2bc38:	31bfff84 	addi	r6,r6,-2
   2bc3c:	1705883a 	add	r2,r2,fp
   2bc40:	1463c83a 	sub	r17,r2,r17
   2bc44:	a00b883a 	mov	r5,r20
   2bc48:	8809883a 	mov	r4,r17
   2bc4c:	d9800315 	stw	r6,12(sp)
   2bc50:	002af3c0 	call	2af3c <__udivsi3>
   2bc54:	a00b883a 	mov	r5,r20
   2bc58:	8809883a 	mov	r4,r17
   2bc5c:	d8800215 	stw	r2,8(sp)
   2bc60:	002afa00 	call	2afa0 <__umodsi3>
   2bc64:	d9c00217 	ldw	r7,8(sp)
   2bc68:	1004943a 	slli	r2,r2,16
   2bc6c:	94bfffcc 	andi	r18,r18,65535
   2bc70:	b9d1383a 	mul	r8,r23,r7
   2bc74:	90a4b03a 	or	r18,r18,r2
   2bc78:	d9800317 	ldw	r6,12(sp)
   2bc7c:	9200062e 	bgeu	r18,r8,2bc98 <__divdf3+0x3f4>
   2bc80:	9725883a 	add	r18,r18,fp
   2bc84:	38bfffc4 	addi	r2,r7,-1
   2bc88:	9700d636 	bltu	r18,fp,2bfe4 <__divdf3+0x740>
   2bc8c:	9200d52e 	bgeu	r18,r8,2bfe4 <__divdf3+0x740>
   2bc90:	39ffff84 	addi	r7,r7,-2
   2bc94:	9725883a 	add	r18,r18,fp
   2bc98:	3004943a 	slli	r2,r6,16
   2bc9c:	b012d43a 	srli	r9,r22,16
   2bca0:	b1bfffcc 	andi	r6,r22,65535
   2bca4:	11e2b03a 	or	r17,r2,r7
   2bca8:	8806d43a 	srli	r3,r17,16
   2bcac:	893fffcc 	andi	r4,r17,65535
   2bcb0:	218b383a 	mul	r5,r4,r6
   2bcb4:	30c5383a 	mul	r2,r6,r3
   2bcb8:	2249383a 	mul	r4,r4,r9
   2bcbc:	280ed43a 	srli	r7,r5,16
   2bcc0:	9225c83a 	sub	r18,r18,r8
   2bcc4:	2089883a 	add	r4,r4,r2
   2bcc8:	3909883a 	add	r4,r7,r4
   2bccc:	1a47383a 	mul	r3,r3,r9
   2bcd0:	2080022e 	bgeu	r4,r2,2bcdc <__divdf3+0x438>
   2bcd4:	00800074 	movhi	r2,1
   2bcd8:	1887883a 	add	r3,r3,r2
   2bcdc:	2004d43a 	srli	r2,r4,16
   2bce0:	2008943a 	slli	r4,r4,16
   2bce4:	297fffcc 	andi	r5,r5,65535
   2bce8:	10c7883a 	add	r3,r2,r3
   2bcec:	2149883a 	add	r4,r4,r5
   2bcf0:	90c0a536 	bltu	r18,r3,2bf88 <__divdf3+0x6e4>
   2bcf4:	90c0bf26 	beq	r18,r3,2bff4 <__divdf3+0x750>
   2bcf8:	90c7c83a 	sub	r3,r18,r3
   2bcfc:	810fc83a 	sub	r7,r16,r4
   2bd00:	81e5803a 	cmpltu	r18,r16,r7
   2bd04:	1ca5c83a 	sub	r18,r3,r18
   2bd08:	e480c126 	beq	fp,r18,2c010 <__divdf3+0x76c>
   2bd0c:	a00b883a 	mov	r5,r20
   2bd10:	9009883a 	mov	r4,r18
   2bd14:	d9800315 	stw	r6,12(sp)
   2bd18:	d9c00215 	stw	r7,8(sp)
   2bd1c:	da400115 	stw	r9,4(sp)
   2bd20:	002af3c0 	call	2af3c <__udivsi3>
   2bd24:	a00b883a 	mov	r5,r20
   2bd28:	9009883a 	mov	r4,r18
   2bd2c:	d8800015 	stw	r2,0(sp)
   2bd30:	002afa00 	call	2afa0 <__umodsi3>
   2bd34:	d9c00217 	ldw	r7,8(sp)
   2bd38:	da000017 	ldw	r8,0(sp)
   2bd3c:	1006943a 	slli	r3,r2,16
   2bd40:	3804d43a 	srli	r2,r7,16
   2bd44:	ba21383a 	mul	r16,r23,r8
   2bd48:	d9800317 	ldw	r6,12(sp)
   2bd4c:	10c4b03a 	or	r2,r2,r3
   2bd50:	da400117 	ldw	r9,4(sp)
   2bd54:	1400062e 	bgeu	r2,r16,2bd70 <__divdf3+0x4cc>
   2bd58:	1705883a 	add	r2,r2,fp
   2bd5c:	40ffffc4 	addi	r3,r8,-1
   2bd60:	1700ad36 	bltu	r2,fp,2c018 <__divdf3+0x774>
   2bd64:	1400ac2e 	bgeu	r2,r16,2c018 <__divdf3+0x774>
   2bd68:	423fff84 	addi	r8,r8,-2
   2bd6c:	1705883a 	add	r2,r2,fp
   2bd70:	1421c83a 	sub	r16,r2,r16
   2bd74:	a00b883a 	mov	r5,r20
   2bd78:	8009883a 	mov	r4,r16
   2bd7c:	d9800315 	stw	r6,12(sp)
   2bd80:	d9c00215 	stw	r7,8(sp)
   2bd84:	da000015 	stw	r8,0(sp)
   2bd88:	da400115 	stw	r9,4(sp)
   2bd8c:	002af3c0 	call	2af3c <__udivsi3>
   2bd90:	8009883a 	mov	r4,r16
   2bd94:	a00b883a 	mov	r5,r20
   2bd98:	1025883a 	mov	r18,r2
   2bd9c:	002afa00 	call	2afa0 <__umodsi3>
   2bda0:	d9c00217 	ldw	r7,8(sp)
   2bda4:	1004943a 	slli	r2,r2,16
   2bda8:	bcaf383a 	mul	r23,r23,r18
   2bdac:	393fffcc 	andi	r4,r7,65535
   2bdb0:	2088b03a 	or	r4,r4,r2
   2bdb4:	d9800317 	ldw	r6,12(sp)
   2bdb8:	da000017 	ldw	r8,0(sp)
   2bdbc:	da400117 	ldw	r9,4(sp)
   2bdc0:	25c0062e 	bgeu	r4,r23,2bddc <__divdf3+0x538>
   2bdc4:	2709883a 	add	r4,r4,fp
   2bdc8:	90bfffc4 	addi	r2,r18,-1
   2bdcc:	27009436 	bltu	r4,fp,2c020 <__divdf3+0x77c>
   2bdd0:	25c0932e 	bgeu	r4,r23,2c020 <__divdf3+0x77c>
   2bdd4:	94bfff84 	addi	r18,r18,-2
   2bdd8:	2709883a 	add	r4,r4,fp
   2bddc:	4004943a 	slli	r2,r8,16
   2bde0:	25efc83a 	sub	r23,r4,r23
   2bde4:	1490b03a 	or	r8,r2,r18
   2bde8:	4008d43a 	srli	r4,r8,16
   2bdec:	40ffffcc 	andi	r3,r8,65535
   2bdf0:	30c5383a 	mul	r2,r6,r3
   2bdf4:	1a47383a 	mul	r3,r3,r9
   2bdf8:	310d383a 	mul	r6,r6,r4
   2bdfc:	100ad43a 	srli	r5,r2,16
   2be00:	4913383a 	mul	r9,r9,r4
   2be04:	1987883a 	add	r3,r3,r6
   2be08:	28c7883a 	add	r3,r5,r3
   2be0c:	1980022e 	bgeu	r3,r6,2be18 <__divdf3+0x574>
   2be10:	01000074 	movhi	r4,1
   2be14:	4913883a 	add	r9,r9,r4
   2be18:	1808d43a 	srli	r4,r3,16
   2be1c:	1806943a 	slli	r3,r3,16
   2be20:	10bfffcc 	andi	r2,r2,65535
   2be24:	2253883a 	add	r9,r4,r9
   2be28:	1887883a 	add	r3,r3,r2
   2be2c:	ba403836 	bltu	r23,r9,2bf10 <__divdf3+0x66c>
   2be30:	ba403626 	beq	r23,r9,2bf0c <__divdf3+0x668>
   2be34:	42000054 	ori	r8,r8,1
   2be38:	a880ffc4 	addi	r2,r21,1023
   2be3c:	00bf570e 	bge	zero,r2,2bb9c <__alt_data_end+0xf802bb9c>
   2be40:	40c001cc 	andi	r3,r8,7
   2be44:	18000726 	beq	r3,zero,2be64 <__divdf3+0x5c0>
   2be48:	40c003cc 	andi	r3,r8,15
   2be4c:	01000104 	movi	r4,4
   2be50:	19000426 	beq	r3,r4,2be64 <__divdf3+0x5c0>
   2be54:	4107883a 	add	r3,r8,r4
   2be58:	1a11803a 	cmpltu	r8,r3,r8
   2be5c:	8a23883a 	add	r17,r17,r8
   2be60:	1811883a 	mov	r8,r3
   2be64:	88c0402c 	andhi	r3,r17,256
   2be68:	18000426 	beq	r3,zero,2be7c <__divdf3+0x5d8>
   2be6c:	00ffc034 	movhi	r3,65280
   2be70:	18ffffc4 	addi	r3,r3,-1
   2be74:	a8810004 	addi	r2,r21,1024
   2be78:	88e2703a 	and	r17,r17,r3
   2be7c:	00c1ff84 	movi	r3,2046
   2be80:	18bee316 	blt	r3,r2,2ba10 <__alt_data_end+0xf802ba10>
   2be84:	8824977a 	slli	r18,r17,29
   2be88:	4010d0fa 	srli	r8,r8,3
   2be8c:	8822927a 	slli	r17,r17,9
   2be90:	1081ffcc 	andi	r2,r2,2047
   2be94:	9224b03a 	or	r18,r18,r8
   2be98:	880ad33a 	srli	r5,r17,12
   2be9c:	98c0004c 	andi	r3,r19,1
   2bea0:	003edf06 	br	2ba20 <__alt_data_end+0xf802ba20>
   2bea4:	8080022c 	andhi	r2,r16,8
   2bea8:	10001226 	beq	r2,zero,2bef4 <__divdf3+0x650>
   2beac:	8880022c 	andhi	r2,r17,8
   2beb0:	1000101e 	bne	r2,zero,2bef4 <__divdf3+0x650>
   2beb4:	00800434 	movhi	r2,16
   2beb8:	89400234 	orhi	r5,r17,8
   2bebc:	10bfffc4 	addi	r2,r2,-1
   2bec0:	b007883a 	mov	r3,r22
   2bec4:	288a703a 	and	r5,r5,r2
   2bec8:	4025883a 	mov	r18,r8
   2becc:	003f3106 	br	2bb94 <__alt_data_end+0xf802bb94>
   2bed0:	008000c4 	movi	r2,3
   2bed4:	3880a626 	beq	r7,r2,2c170 <__divdf3+0x8cc>
   2bed8:	00800044 	movi	r2,1
   2bedc:	3880521e 	bne	r7,r2,2c028 <__divdf3+0x784>
   2bee0:	b807883a 	mov	r3,r23
   2bee4:	0005883a 	mov	r2,zero
   2bee8:	000b883a 	mov	r5,zero
   2beec:	0025883a 	mov	r18,zero
   2bef0:	003ecb06 	br	2ba20 <__alt_data_end+0xf802ba20>
   2bef4:	00800434 	movhi	r2,16
   2bef8:	81400234 	orhi	r5,r16,8
   2befc:	10bfffc4 	addi	r2,r2,-1
   2bf00:	a007883a 	mov	r3,r20
   2bf04:	288a703a 	and	r5,r5,r2
   2bf08:	003f2206 	br	2bb94 <__alt_data_end+0xf802bb94>
   2bf0c:	183fca26 	beq	r3,zero,2be38 <__alt_data_end+0xf802be38>
   2bf10:	e5ef883a 	add	r23,fp,r23
   2bf14:	40bfffc4 	addi	r2,r8,-1
   2bf18:	bf00392e 	bgeu	r23,fp,2c000 <__divdf3+0x75c>
   2bf1c:	1011883a 	mov	r8,r2
   2bf20:	ba7fc41e 	bne	r23,r9,2be34 <__alt_data_end+0xf802be34>
   2bf24:	b0ffc31e 	bne	r22,r3,2be34 <__alt_data_end+0xf802be34>
   2bf28:	003fc306 	br	2be38 <__alt_data_end+0xf802be38>
   2bf2c:	143ff604 	addi	r16,r2,-40
   2bf30:	9c20983a 	sll	r16,r19,r16
   2bf34:	0025883a 	mov	r18,zero
   2bf38:	003ee206 	br	2bac4 <__alt_data_end+0xf802bac4>
   2bf3c:	d9800315 	stw	r6,12(sp)
   2bf40:	d9c00215 	stw	r7,8(sp)
   2bf44:	002d5fc0 	call	2d5fc <__clzsi2>
   2bf48:	10800804 	addi	r2,r2,32
   2bf4c:	d9c00217 	ldw	r7,8(sp)
   2bf50:	d9800317 	ldw	r6,12(sp)
   2bf54:	003ed106 	br	2ba9c <__alt_data_end+0xf802ba9c>
   2bf58:	147ff604 	addi	r17,r2,-40
   2bf5c:	3462983a 	sll	r17,r6,r17
   2bf60:	0011883a 	mov	r8,zero
   2bf64:	003ef506 	br	2bb3c <__alt_data_end+0xf802bb3c>
   2bf68:	3009883a 	mov	r4,r6
   2bf6c:	d9800315 	stw	r6,12(sp)
   2bf70:	da400115 	stw	r9,4(sp)
   2bf74:	002d5fc0 	call	2d5fc <__clzsi2>
   2bf78:	10800804 	addi	r2,r2,32
   2bf7c:	da400117 	ldw	r9,4(sp)
   2bf80:	d9800317 	ldw	r6,12(sp)
   2bf84:	003ee306 	br	2bb14 <__alt_data_end+0xf802bb14>
   2bf88:	85a1883a 	add	r16,r16,r22
   2bf8c:	8585803a 	cmpltu	r2,r16,r22
   2bf90:	1705883a 	add	r2,r2,fp
   2bf94:	14a5883a 	add	r18,r2,r18
   2bf98:	88bfffc4 	addi	r2,r17,-1
   2bf9c:	e4800c2e 	bgeu	fp,r18,2bfd0 <__divdf3+0x72c>
   2bfa0:	90c03e36 	bltu	r18,r3,2c09c <__divdf3+0x7f8>
   2bfa4:	1c806926 	beq	r3,r18,2c14c <__divdf3+0x8a8>
   2bfa8:	90c7c83a 	sub	r3,r18,r3
   2bfac:	1023883a 	mov	r17,r2
   2bfb0:	003f5206 	br	2bcfc <__alt_data_end+0xf802bcfc>
   2bfb4:	923f0436 	bltu	r18,r8,2bbc8 <__alt_data_end+0xf802bbc8>
   2bfb8:	800897fa 	slli	r4,r16,31
   2bfbc:	9004d07a 	srli	r2,r18,1
   2bfc0:	8006d07a 	srli	r3,r16,1
   2bfc4:	902097fa 	slli	r16,r18,31
   2bfc8:	20a4b03a 	or	r18,r4,r2
   2bfcc:	003f0106 	br	2bbd4 <__alt_data_end+0xf802bbd4>
   2bfd0:	e4bff51e 	bne	fp,r18,2bfa8 <__alt_data_end+0xf802bfa8>
   2bfd4:	85bff22e 	bgeu	r16,r22,2bfa0 <__alt_data_end+0xf802bfa0>
   2bfd8:	e0c7c83a 	sub	r3,fp,r3
   2bfdc:	1023883a 	mov	r17,r2
   2bfe0:	003f4606 	br	2bcfc <__alt_data_end+0xf802bcfc>
   2bfe4:	100f883a 	mov	r7,r2
   2bfe8:	003f2b06 	br	2bc98 <__alt_data_end+0xf802bc98>
   2bfec:	180d883a 	mov	r6,r3
   2bff0:	003f1306 	br	2bc40 <__alt_data_end+0xf802bc40>
   2bff4:	813fe436 	bltu	r16,r4,2bf88 <__alt_data_end+0xf802bf88>
   2bff8:	0007883a 	mov	r3,zero
   2bffc:	003f3f06 	br	2bcfc <__alt_data_end+0xf802bcfc>
   2c000:	ba402c36 	bltu	r23,r9,2c0b4 <__divdf3+0x810>
   2c004:	4dc05426 	beq	r9,r23,2c158 <__divdf3+0x8b4>
   2c008:	1011883a 	mov	r8,r2
   2c00c:	003f8906 	br	2be34 <__alt_data_end+0xf802be34>
   2c010:	023fffc4 	movi	r8,-1
   2c014:	003f8806 	br	2be38 <__alt_data_end+0xf802be38>
   2c018:	1811883a 	mov	r8,r3
   2c01c:	003f5406 	br	2bd70 <__alt_data_end+0xf802bd70>
   2c020:	1025883a 	mov	r18,r2
   2c024:	003f6d06 	br	2bddc <__alt_data_end+0xf802bddc>
   2c028:	b827883a 	mov	r19,r23
   2c02c:	003f8206 	br	2be38 <__alt_data_end+0xf802be38>
   2c030:	010007c4 	movi	r4,31
   2c034:	20c02616 	blt	r4,r3,2c0d0 <__divdf3+0x82c>
   2c038:	00800804 	movi	r2,32
   2c03c:	10c5c83a 	sub	r2,r2,r3
   2c040:	888a983a 	sll	r5,r17,r2
   2c044:	40c8d83a 	srl	r4,r8,r3
   2c048:	4084983a 	sll	r2,r8,r2
   2c04c:	88e2d83a 	srl	r17,r17,r3
   2c050:	2906b03a 	or	r3,r5,r4
   2c054:	1004c03a 	cmpne	r2,r2,zero
   2c058:	1886b03a 	or	r3,r3,r2
   2c05c:	188001cc 	andi	r2,r3,7
   2c060:	10000726 	beq	r2,zero,2c080 <__divdf3+0x7dc>
   2c064:	188003cc 	andi	r2,r3,15
   2c068:	01000104 	movi	r4,4
   2c06c:	11000426 	beq	r2,r4,2c080 <__divdf3+0x7dc>
   2c070:	1805883a 	mov	r2,r3
   2c074:	10c00104 	addi	r3,r2,4
   2c078:	1885803a 	cmpltu	r2,r3,r2
   2c07c:	88a3883a 	add	r17,r17,r2
   2c080:	8880202c 	andhi	r2,r17,128
   2c084:	10002726 	beq	r2,zero,2c124 <__divdf3+0x880>
   2c088:	98c0004c 	andi	r3,r19,1
   2c08c:	00800044 	movi	r2,1
   2c090:	000b883a 	mov	r5,zero
   2c094:	0025883a 	mov	r18,zero
   2c098:	003e6106 	br	2ba20 <__alt_data_end+0xf802ba20>
   2c09c:	85a1883a 	add	r16,r16,r22
   2c0a0:	8585803a 	cmpltu	r2,r16,r22
   2c0a4:	1705883a 	add	r2,r2,fp
   2c0a8:	14a5883a 	add	r18,r2,r18
   2c0ac:	8c7fff84 	addi	r17,r17,-2
   2c0b0:	003f1106 	br	2bcf8 <__alt_data_end+0xf802bcf8>
   2c0b4:	b589883a 	add	r4,r22,r22
   2c0b8:	25ad803a 	cmpltu	r22,r4,r22
   2c0bc:	b739883a 	add	fp,r22,fp
   2c0c0:	40bfff84 	addi	r2,r8,-2
   2c0c4:	bf2f883a 	add	r23,r23,fp
   2c0c8:	202d883a 	mov	r22,r4
   2c0cc:	003f9306 	br	2bf1c <__alt_data_end+0xf802bf1c>
   2c0d0:	013ff844 	movi	r4,-31
   2c0d4:	2085c83a 	sub	r2,r4,r2
   2c0d8:	8888d83a 	srl	r4,r17,r2
   2c0dc:	00800804 	movi	r2,32
   2c0e0:	18802126 	beq	r3,r2,2c168 <__divdf3+0x8c4>
   2c0e4:	00801004 	movi	r2,64
   2c0e8:	10c5c83a 	sub	r2,r2,r3
   2c0ec:	8884983a 	sll	r2,r17,r2
   2c0f0:	1204b03a 	or	r2,r2,r8
   2c0f4:	1004c03a 	cmpne	r2,r2,zero
   2c0f8:	2084b03a 	or	r2,r4,r2
   2c0fc:	144001cc 	andi	r17,r2,7
   2c100:	88000d1e 	bne	r17,zero,2c138 <__divdf3+0x894>
   2c104:	000b883a 	mov	r5,zero
   2c108:	1024d0fa 	srli	r18,r2,3
   2c10c:	98c0004c 	andi	r3,r19,1
   2c110:	0005883a 	mov	r2,zero
   2c114:	9464b03a 	or	r18,r18,r17
   2c118:	003e4106 	br	2ba20 <__alt_data_end+0xf802ba20>
   2c11c:	1007883a 	mov	r3,r2
   2c120:	0023883a 	mov	r17,zero
   2c124:	880a927a 	slli	r5,r17,9
   2c128:	1805883a 	mov	r2,r3
   2c12c:	8822977a 	slli	r17,r17,29
   2c130:	280ad33a 	srli	r5,r5,12
   2c134:	003ff406 	br	2c108 <__alt_data_end+0xf802c108>
   2c138:	10c003cc 	andi	r3,r2,15
   2c13c:	01000104 	movi	r4,4
   2c140:	193ff626 	beq	r3,r4,2c11c <__alt_data_end+0xf802c11c>
   2c144:	0023883a 	mov	r17,zero
   2c148:	003fca06 	br	2c074 <__alt_data_end+0xf802c074>
   2c14c:	813fd336 	bltu	r16,r4,2c09c <__alt_data_end+0xf802c09c>
   2c150:	1023883a 	mov	r17,r2
   2c154:	003fa806 	br	2bff8 <__alt_data_end+0xf802bff8>
   2c158:	b0ffd636 	bltu	r22,r3,2c0b4 <__alt_data_end+0xf802c0b4>
   2c15c:	1011883a 	mov	r8,r2
   2c160:	b0ff341e 	bne	r22,r3,2be34 <__alt_data_end+0xf802be34>
   2c164:	003f3406 	br	2be38 <__alt_data_end+0xf802be38>
   2c168:	0005883a 	mov	r2,zero
   2c16c:	003fe006 	br	2c0f0 <__alt_data_end+0xf802c0f0>
   2c170:	00800434 	movhi	r2,16
   2c174:	89400234 	orhi	r5,r17,8
   2c178:	10bfffc4 	addi	r2,r2,-1
   2c17c:	b807883a 	mov	r3,r23
   2c180:	288a703a 	and	r5,r5,r2
   2c184:	4025883a 	mov	r18,r8
   2c188:	003e8206 	br	2bb94 <__alt_data_end+0xf802bb94>

0002c18c <__eqdf2>:
   2c18c:	2804d53a 	srli	r2,r5,20
   2c190:	3806d53a 	srli	r3,r7,20
   2c194:	02000434 	movhi	r8,16
   2c198:	423fffc4 	addi	r8,r8,-1
   2c19c:	1081ffcc 	andi	r2,r2,2047
   2c1a0:	0281ffc4 	movi	r10,2047
   2c1a4:	2a12703a 	and	r9,r5,r8
   2c1a8:	18c1ffcc 	andi	r3,r3,2047
   2c1ac:	3a10703a 	and	r8,r7,r8
   2c1b0:	280ad7fa 	srli	r5,r5,31
   2c1b4:	380ed7fa 	srli	r7,r7,31
   2c1b8:	12801026 	beq	r2,r10,2c1fc <__eqdf2+0x70>
   2c1bc:	0281ffc4 	movi	r10,2047
   2c1c0:	1a800a26 	beq	r3,r10,2c1ec <__eqdf2+0x60>
   2c1c4:	10c00226 	beq	r2,r3,2c1d0 <__eqdf2+0x44>
   2c1c8:	00800044 	movi	r2,1
   2c1cc:	f800283a 	ret
   2c1d0:	4a3ffd1e 	bne	r9,r8,2c1c8 <__alt_data_end+0xf802c1c8>
   2c1d4:	21bffc1e 	bne	r4,r6,2c1c8 <__alt_data_end+0xf802c1c8>
   2c1d8:	29c00c26 	beq	r5,r7,2c20c <__eqdf2+0x80>
   2c1dc:	103ffa1e 	bne	r2,zero,2c1c8 <__alt_data_end+0xf802c1c8>
   2c1e0:	2244b03a 	or	r2,r4,r9
   2c1e4:	1004c03a 	cmpne	r2,r2,zero
   2c1e8:	f800283a 	ret
   2c1ec:	3214b03a 	or	r10,r6,r8
   2c1f0:	503ff426 	beq	r10,zero,2c1c4 <__alt_data_end+0xf802c1c4>
   2c1f4:	00800044 	movi	r2,1
   2c1f8:	f800283a 	ret
   2c1fc:	2254b03a 	or	r10,r4,r9
   2c200:	503fee26 	beq	r10,zero,2c1bc <__alt_data_end+0xf802c1bc>
   2c204:	00800044 	movi	r2,1
   2c208:	f800283a 	ret
   2c20c:	0005883a 	mov	r2,zero
   2c210:	f800283a 	ret

0002c214 <__gedf2>:
   2c214:	2804d53a 	srli	r2,r5,20
   2c218:	3806d53a 	srli	r3,r7,20
   2c21c:	02000434 	movhi	r8,16
   2c220:	423fffc4 	addi	r8,r8,-1
   2c224:	1081ffcc 	andi	r2,r2,2047
   2c228:	0241ffc4 	movi	r9,2047
   2c22c:	2a14703a 	and	r10,r5,r8
   2c230:	18c1ffcc 	andi	r3,r3,2047
   2c234:	3a10703a 	and	r8,r7,r8
   2c238:	280ad7fa 	srli	r5,r5,31
   2c23c:	380ed7fa 	srli	r7,r7,31
   2c240:	12401d26 	beq	r2,r9,2c2b8 <__gedf2+0xa4>
   2c244:	0241ffc4 	movi	r9,2047
   2c248:	1a401226 	beq	r3,r9,2c294 <__gedf2+0x80>
   2c24c:	1000081e 	bne	r2,zero,2c270 <__gedf2+0x5c>
   2c250:	2296b03a 	or	r11,r4,r10
   2c254:	5813003a 	cmpeq	r9,r11,zero
   2c258:	1800091e 	bne	r3,zero,2c280 <__gedf2+0x6c>
   2c25c:	3218b03a 	or	r12,r6,r8
   2c260:	6000071e 	bne	r12,zero,2c280 <__gedf2+0x6c>
   2c264:	0005883a 	mov	r2,zero
   2c268:	5800101e 	bne	r11,zero,2c2ac <__gedf2+0x98>
   2c26c:	f800283a 	ret
   2c270:	18000c1e 	bne	r3,zero,2c2a4 <__gedf2+0x90>
   2c274:	3212b03a 	or	r9,r6,r8
   2c278:	48000c26 	beq	r9,zero,2c2ac <__gedf2+0x98>
   2c27c:	0013883a 	mov	r9,zero
   2c280:	39c03fcc 	andi	r7,r7,255
   2c284:	48000826 	beq	r9,zero,2c2a8 <__gedf2+0x94>
   2c288:	38000926 	beq	r7,zero,2c2b0 <__gedf2+0x9c>
   2c28c:	00800044 	movi	r2,1
   2c290:	f800283a 	ret
   2c294:	3212b03a 	or	r9,r6,r8
   2c298:	483fec26 	beq	r9,zero,2c24c <__alt_data_end+0xf802c24c>
   2c29c:	00bfff84 	movi	r2,-2
   2c2a0:	f800283a 	ret
   2c2a4:	39c03fcc 	andi	r7,r7,255
   2c2a8:	29c00626 	beq	r5,r7,2c2c4 <__gedf2+0xb0>
   2c2ac:	283ff726 	beq	r5,zero,2c28c <__alt_data_end+0xf802c28c>
   2c2b0:	00bfffc4 	movi	r2,-1
   2c2b4:	f800283a 	ret
   2c2b8:	2292b03a 	or	r9,r4,r10
   2c2bc:	483fe126 	beq	r9,zero,2c244 <__alt_data_end+0xf802c244>
   2c2c0:	003ff606 	br	2c29c <__alt_data_end+0xf802c29c>
   2c2c4:	18bff916 	blt	r3,r2,2c2ac <__alt_data_end+0xf802c2ac>
   2c2c8:	10c00316 	blt	r2,r3,2c2d8 <__gedf2+0xc4>
   2c2cc:	42bff736 	bltu	r8,r10,2c2ac <__alt_data_end+0xf802c2ac>
   2c2d0:	52000326 	beq	r10,r8,2c2e0 <__gedf2+0xcc>
   2c2d4:	5200042e 	bgeu	r10,r8,2c2e8 <__gedf2+0xd4>
   2c2d8:	283fec1e 	bne	r5,zero,2c28c <__alt_data_end+0xf802c28c>
   2c2dc:	003ff406 	br	2c2b0 <__alt_data_end+0xf802c2b0>
   2c2e0:	313ff236 	bltu	r6,r4,2c2ac <__alt_data_end+0xf802c2ac>
   2c2e4:	21bffc36 	bltu	r4,r6,2c2d8 <__alt_data_end+0xf802c2d8>
   2c2e8:	0005883a 	mov	r2,zero
   2c2ec:	f800283a 	ret

0002c2f0 <__ledf2>:
   2c2f0:	2804d53a 	srli	r2,r5,20
   2c2f4:	3810d53a 	srli	r8,r7,20
   2c2f8:	00c00434 	movhi	r3,16
   2c2fc:	18ffffc4 	addi	r3,r3,-1
   2c300:	1081ffcc 	andi	r2,r2,2047
   2c304:	0241ffc4 	movi	r9,2047
   2c308:	28d4703a 	and	r10,r5,r3
   2c30c:	4201ffcc 	andi	r8,r8,2047
   2c310:	38c6703a 	and	r3,r7,r3
   2c314:	280ad7fa 	srli	r5,r5,31
   2c318:	380ed7fa 	srli	r7,r7,31
   2c31c:	12401f26 	beq	r2,r9,2c39c <__ledf2+0xac>
   2c320:	0241ffc4 	movi	r9,2047
   2c324:	42401426 	beq	r8,r9,2c378 <__ledf2+0x88>
   2c328:	1000091e 	bne	r2,zero,2c350 <__ledf2+0x60>
   2c32c:	2296b03a 	or	r11,r4,r10
   2c330:	5813003a 	cmpeq	r9,r11,zero
   2c334:	29403fcc 	andi	r5,r5,255
   2c338:	40000a1e 	bne	r8,zero,2c364 <__ledf2+0x74>
   2c33c:	30d8b03a 	or	r12,r6,r3
   2c340:	6000081e 	bne	r12,zero,2c364 <__ledf2+0x74>
   2c344:	0005883a 	mov	r2,zero
   2c348:	5800111e 	bne	r11,zero,2c390 <__ledf2+0xa0>
   2c34c:	f800283a 	ret
   2c350:	29403fcc 	andi	r5,r5,255
   2c354:	40000c1e 	bne	r8,zero,2c388 <__ledf2+0x98>
   2c358:	30d2b03a 	or	r9,r6,r3
   2c35c:	48000c26 	beq	r9,zero,2c390 <__ledf2+0xa0>
   2c360:	0013883a 	mov	r9,zero
   2c364:	39c03fcc 	andi	r7,r7,255
   2c368:	48000826 	beq	r9,zero,2c38c <__ledf2+0x9c>
   2c36c:	38001126 	beq	r7,zero,2c3b4 <__ledf2+0xc4>
   2c370:	00800044 	movi	r2,1
   2c374:	f800283a 	ret
   2c378:	30d2b03a 	or	r9,r6,r3
   2c37c:	483fea26 	beq	r9,zero,2c328 <__alt_data_end+0xf802c328>
   2c380:	00800084 	movi	r2,2
   2c384:	f800283a 	ret
   2c388:	39c03fcc 	andi	r7,r7,255
   2c38c:	39400726 	beq	r7,r5,2c3ac <__ledf2+0xbc>
   2c390:	2800081e 	bne	r5,zero,2c3b4 <__ledf2+0xc4>
   2c394:	00800044 	movi	r2,1
   2c398:	f800283a 	ret
   2c39c:	2292b03a 	or	r9,r4,r10
   2c3a0:	483fdf26 	beq	r9,zero,2c320 <__alt_data_end+0xf802c320>
   2c3a4:	00800084 	movi	r2,2
   2c3a8:	f800283a 	ret
   2c3ac:	4080030e 	bge	r8,r2,2c3bc <__ledf2+0xcc>
   2c3b0:	383fef26 	beq	r7,zero,2c370 <__alt_data_end+0xf802c370>
   2c3b4:	00bfffc4 	movi	r2,-1
   2c3b8:	f800283a 	ret
   2c3bc:	123feb16 	blt	r2,r8,2c36c <__alt_data_end+0xf802c36c>
   2c3c0:	1abff336 	bltu	r3,r10,2c390 <__alt_data_end+0xf802c390>
   2c3c4:	50c00326 	beq	r10,r3,2c3d4 <__ledf2+0xe4>
   2c3c8:	50c0042e 	bgeu	r10,r3,2c3dc <__ledf2+0xec>
   2c3cc:	283fe81e 	bne	r5,zero,2c370 <__alt_data_end+0xf802c370>
   2c3d0:	003ff806 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2c3d4:	313fee36 	bltu	r6,r4,2c390 <__alt_data_end+0xf802c390>
   2c3d8:	21bffc36 	bltu	r4,r6,2c3cc <__alt_data_end+0xf802c3cc>
   2c3dc:	0005883a 	mov	r2,zero
   2c3e0:	f800283a 	ret

0002c3e4 <__muldf3>:
   2c3e4:	defff304 	addi	sp,sp,-52
   2c3e8:	2804d53a 	srli	r2,r5,20
   2c3ec:	dd800915 	stw	r22,36(sp)
   2c3f0:	282cd7fa 	srli	r22,r5,31
   2c3f4:	dc000315 	stw	r16,12(sp)
   2c3f8:	04000434 	movhi	r16,16
   2c3fc:	dd400815 	stw	r21,32(sp)
   2c400:	dc800515 	stw	r18,20(sp)
   2c404:	843fffc4 	addi	r16,r16,-1
   2c408:	dfc00c15 	stw	ra,48(sp)
   2c40c:	df000b15 	stw	fp,44(sp)
   2c410:	ddc00a15 	stw	r23,40(sp)
   2c414:	dd000715 	stw	r20,28(sp)
   2c418:	dcc00615 	stw	r19,24(sp)
   2c41c:	dc400415 	stw	r17,16(sp)
   2c420:	1481ffcc 	andi	r18,r2,2047
   2c424:	2c20703a 	and	r16,r5,r16
   2c428:	b02b883a 	mov	r21,r22
   2c42c:	b2403fcc 	andi	r9,r22,255
   2c430:	90006026 	beq	r18,zero,2c5b4 <__muldf3+0x1d0>
   2c434:	0081ffc4 	movi	r2,2047
   2c438:	2029883a 	mov	r20,r4
   2c43c:	90803626 	beq	r18,r2,2c518 <__muldf3+0x134>
   2c440:	80800434 	orhi	r2,r16,16
   2c444:	100490fa 	slli	r2,r2,3
   2c448:	2020d77a 	srli	r16,r4,29
   2c44c:	202890fa 	slli	r20,r4,3
   2c450:	94bf0044 	addi	r18,r18,-1023
   2c454:	80a0b03a 	or	r16,r16,r2
   2c458:	0027883a 	mov	r19,zero
   2c45c:	0039883a 	mov	fp,zero
   2c460:	3804d53a 	srli	r2,r7,20
   2c464:	382ed7fa 	srli	r23,r7,31
   2c468:	04400434 	movhi	r17,16
   2c46c:	8c7fffc4 	addi	r17,r17,-1
   2c470:	1081ffcc 	andi	r2,r2,2047
   2c474:	3011883a 	mov	r8,r6
   2c478:	3c62703a 	and	r17,r7,r17
   2c47c:	ba803fcc 	andi	r10,r23,255
   2c480:	10006d26 	beq	r2,zero,2c638 <__muldf3+0x254>
   2c484:	00c1ffc4 	movi	r3,2047
   2c488:	10c06526 	beq	r2,r3,2c620 <__muldf3+0x23c>
   2c48c:	88c00434 	orhi	r3,r17,16
   2c490:	180690fa 	slli	r3,r3,3
   2c494:	3022d77a 	srli	r17,r6,29
   2c498:	301090fa 	slli	r8,r6,3
   2c49c:	10bf0044 	addi	r2,r2,-1023
   2c4a0:	88e2b03a 	or	r17,r17,r3
   2c4a4:	000b883a 	mov	r5,zero
   2c4a8:	9085883a 	add	r2,r18,r2
   2c4ac:	2cc8b03a 	or	r4,r5,r19
   2c4b0:	00c003c4 	movi	r3,15
   2c4b4:	bdacf03a 	xor	r22,r23,r22
   2c4b8:	12c00044 	addi	r11,r2,1
   2c4bc:	19009936 	bltu	r3,r4,2c724 <__muldf3+0x340>
   2c4c0:	200890ba 	slli	r4,r4,2
   2c4c4:	00c000f4 	movhi	r3,3
   2c4c8:	18f13604 	addi	r3,r3,-15144
   2c4cc:	20c9883a 	add	r4,r4,r3
   2c4d0:	20c00017 	ldw	r3,0(r4)
   2c4d4:	1800683a 	jmp	r3
   2c4d8:	0002c724 	muli	zero,zero,2844
   2c4dc:	0002c538 	rdprs	zero,zero,2836
   2c4e0:	0002c538 	rdprs	zero,zero,2836
   2c4e4:	0002c534 	movhi	zero,2836
   2c4e8:	0002c700 	call	2c70 <__alt_mem_onchip_memory2_0-0x1d390>
   2c4ec:	0002c700 	call	2c70 <__alt_mem_onchip_memory2_0-0x1d390>
   2c4f0:	0002c6e8 	cmpgeui	zero,zero,2843
   2c4f4:	0002c534 	movhi	zero,2836
   2c4f8:	0002c700 	call	2c70 <__alt_mem_onchip_memory2_0-0x1d390>
   2c4fc:	0002c6e8 	cmpgeui	zero,zero,2843
   2c500:	0002c700 	call	2c70 <__alt_mem_onchip_memory2_0-0x1d390>
   2c504:	0002c534 	movhi	zero,2836
   2c508:	0002c710 	cmplti	zero,zero,2844
   2c50c:	0002c710 	cmplti	zero,zero,2844
   2c510:	0002c710 	cmplti	zero,zero,2844
   2c514:	0002c92c 	andhi	zero,zero,2852
   2c518:	2404b03a 	or	r2,r4,r16
   2c51c:	10006f1e 	bne	r2,zero,2c6dc <__muldf3+0x2f8>
   2c520:	04c00204 	movi	r19,8
   2c524:	0021883a 	mov	r16,zero
   2c528:	0029883a 	mov	r20,zero
   2c52c:	07000084 	movi	fp,2
   2c530:	003fcb06 	br	2c460 <__alt_data_end+0xf802c460>
   2c534:	502d883a 	mov	r22,r10
   2c538:	00800084 	movi	r2,2
   2c53c:	28805726 	beq	r5,r2,2c69c <__muldf3+0x2b8>
   2c540:	008000c4 	movi	r2,3
   2c544:	28816626 	beq	r5,r2,2cae0 <__muldf3+0x6fc>
   2c548:	00800044 	movi	r2,1
   2c54c:	2881411e 	bne	r5,r2,2ca54 <__muldf3+0x670>
   2c550:	b02b883a 	mov	r21,r22
   2c554:	0005883a 	mov	r2,zero
   2c558:	000b883a 	mov	r5,zero
   2c55c:	0029883a 	mov	r20,zero
   2c560:	1004953a 	slli	r2,r2,20
   2c564:	a8c03fcc 	andi	r3,r21,255
   2c568:	04400434 	movhi	r17,16
   2c56c:	8c7fffc4 	addi	r17,r17,-1
   2c570:	180697fa 	slli	r3,r3,31
   2c574:	2c4a703a 	and	r5,r5,r17
   2c578:	288ab03a 	or	r5,r5,r2
   2c57c:	28c6b03a 	or	r3,r5,r3
   2c580:	a005883a 	mov	r2,r20
   2c584:	dfc00c17 	ldw	ra,48(sp)
   2c588:	df000b17 	ldw	fp,44(sp)
   2c58c:	ddc00a17 	ldw	r23,40(sp)
   2c590:	dd800917 	ldw	r22,36(sp)
   2c594:	dd400817 	ldw	r21,32(sp)
   2c598:	dd000717 	ldw	r20,28(sp)
   2c59c:	dcc00617 	ldw	r19,24(sp)
   2c5a0:	dc800517 	ldw	r18,20(sp)
   2c5a4:	dc400417 	ldw	r17,16(sp)
   2c5a8:	dc000317 	ldw	r16,12(sp)
   2c5ac:	dec00d04 	addi	sp,sp,52
   2c5b0:	f800283a 	ret
   2c5b4:	2404b03a 	or	r2,r4,r16
   2c5b8:	2027883a 	mov	r19,r4
   2c5bc:	10004226 	beq	r2,zero,2c6c8 <__muldf3+0x2e4>
   2c5c0:	8000fc26 	beq	r16,zero,2c9b4 <__muldf3+0x5d0>
   2c5c4:	8009883a 	mov	r4,r16
   2c5c8:	d9800215 	stw	r6,8(sp)
   2c5cc:	d9c00015 	stw	r7,0(sp)
   2c5d0:	da400115 	stw	r9,4(sp)
   2c5d4:	002d5fc0 	call	2d5fc <__clzsi2>
   2c5d8:	d9800217 	ldw	r6,8(sp)
   2c5dc:	d9c00017 	ldw	r7,0(sp)
   2c5e0:	da400117 	ldw	r9,4(sp)
   2c5e4:	113ffd44 	addi	r4,r2,-11
   2c5e8:	00c00704 	movi	r3,28
   2c5ec:	1900ed16 	blt	r3,r4,2c9a4 <__muldf3+0x5c0>
   2c5f0:	00c00744 	movi	r3,29
   2c5f4:	147ffe04 	addi	r17,r2,-8
   2c5f8:	1907c83a 	sub	r3,r3,r4
   2c5fc:	8460983a 	sll	r16,r16,r17
   2c600:	98c6d83a 	srl	r3,r19,r3
   2c604:	9c68983a 	sll	r20,r19,r17
   2c608:	1c20b03a 	or	r16,r3,r16
   2c60c:	1080fcc4 	addi	r2,r2,1011
   2c610:	00a5c83a 	sub	r18,zero,r2
   2c614:	0027883a 	mov	r19,zero
   2c618:	0039883a 	mov	fp,zero
   2c61c:	003f9006 	br	2c460 <__alt_data_end+0xf802c460>
   2c620:	3446b03a 	or	r3,r6,r17
   2c624:	1800261e 	bne	r3,zero,2c6c0 <__muldf3+0x2dc>
   2c628:	0023883a 	mov	r17,zero
   2c62c:	0011883a 	mov	r8,zero
   2c630:	01400084 	movi	r5,2
   2c634:	003f9c06 	br	2c4a8 <__alt_data_end+0xf802c4a8>
   2c638:	3446b03a 	or	r3,r6,r17
   2c63c:	18001c26 	beq	r3,zero,2c6b0 <__muldf3+0x2cc>
   2c640:	8800ce26 	beq	r17,zero,2c97c <__muldf3+0x598>
   2c644:	8809883a 	mov	r4,r17
   2c648:	d9800215 	stw	r6,8(sp)
   2c64c:	da400115 	stw	r9,4(sp)
   2c650:	da800015 	stw	r10,0(sp)
   2c654:	002d5fc0 	call	2d5fc <__clzsi2>
   2c658:	d9800217 	ldw	r6,8(sp)
   2c65c:	da400117 	ldw	r9,4(sp)
   2c660:	da800017 	ldw	r10,0(sp)
   2c664:	113ffd44 	addi	r4,r2,-11
   2c668:	00c00704 	movi	r3,28
   2c66c:	1900bf16 	blt	r3,r4,2c96c <__muldf3+0x588>
   2c670:	00c00744 	movi	r3,29
   2c674:	123ffe04 	addi	r8,r2,-8
   2c678:	1907c83a 	sub	r3,r3,r4
   2c67c:	8a22983a 	sll	r17,r17,r8
   2c680:	30c6d83a 	srl	r3,r6,r3
   2c684:	3210983a 	sll	r8,r6,r8
   2c688:	1c62b03a 	or	r17,r3,r17
   2c68c:	1080fcc4 	addi	r2,r2,1011
   2c690:	0085c83a 	sub	r2,zero,r2
   2c694:	000b883a 	mov	r5,zero
   2c698:	003f8306 	br	2c4a8 <__alt_data_end+0xf802c4a8>
   2c69c:	b02b883a 	mov	r21,r22
   2c6a0:	0081ffc4 	movi	r2,2047
   2c6a4:	000b883a 	mov	r5,zero
   2c6a8:	0029883a 	mov	r20,zero
   2c6ac:	003fac06 	br	2c560 <__alt_data_end+0xf802c560>
   2c6b0:	0023883a 	mov	r17,zero
   2c6b4:	0011883a 	mov	r8,zero
   2c6b8:	01400044 	movi	r5,1
   2c6bc:	003f7a06 	br	2c4a8 <__alt_data_end+0xf802c4a8>
   2c6c0:	014000c4 	movi	r5,3
   2c6c4:	003f7806 	br	2c4a8 <__alt_data_end+0xf802c4a8>
   2c6c8:	04c00104 	movi	r19,4
   2c6cc:	0021883a 	mov	r16,zero
   2c6d0:	0029883a 	mov	r20,zero
   2c6d4:	07000044 	movi	fp,1
   2c6d8:	003f6106 	br	2c460 <__alt_data_end+0xf802c460>
   2c6dc:	04c00304 	movi	r19,12
   2c6e0:	070000c4 	movi	fp,3
   2c6e4:	003f5e06 	br	2c460 <__alt_data_end+0xf802c460>
   2c6e8:	01400434 	movhi	r5,16
   2c6ec:	002b883a 	mov	r21,zero
   2c6f0:	297fffc4 	addi	r5,r5,-1
   2c6f4:	053fffc4 	movi	r20,-1
   2c6f8:	0081ffc4 	movi	r2,2047
   2c6fc:	003f9806 	br	2c560 <__alt_data_end+0xf802c560>
   2c700:	8023883a 	mov	r17,r16
   2c704:	a011883a 	mov	r8,r20
   2c708:	e00b883a 	mov	r5,fp
   2c70c:	003f8a06 	br	2c538 <__alt_data_end+0xf802c538>
   2c710:	8023883a 	mov	r17,r16
   2c714:	a011883a 	mov	r8,r20
   2c718:	482d883a 	mov	r22,r9
   2c71c:	e00b883a 	mov	r5,fp
   2c720:	003f8506 	br	2c538 <__alt_data_end+0xf802c538>
   2c724:	a00ad43a 	srli	r5,r20,16
   2c728:	401ad43a 	srli	r13,r8,16
   2c72c:	a53fffcc 	andi	r20,r20,65535
   2c730:	423fffcc 	andi	r8,r8,65535
   2c734:	4519383a 	mul	r12,r8,r20
   2c738:	4147383a 	mul	r3,r8,r5
   2c73c:	6d09383a 	mul	r4,r13,r20
   2c740:	600cd43a 	srli	r6,r12,16
   2c744:	2b5d383a 	mul	r14,r5,r13
   2c748:	20c9883a 	add	r4,r4,r3
   2c74c:	310d883a 	add	r6,r6,r4
   2c750:	30c0022e 	bgeu	r6,r3,2c75c <__muldf3+0x378>
   2c754:	00c00074 	movhi	r3,1
   2c758:	70dd883a 	add	r14,r14,r3
   2c75c:	8826d43a 	srli	r19,r17,16
   2c760:	8bffffcc 	andi	r15,r17,65535
   2c764:	7d23383a 	mul	r17,r15,r20
   2c768:	7949383a 	mul	r4,r15,r5
   2c76c:	9d29383a 	mul	r20,r19,r20
   2c770:	8814d43a 	srli	r10,r17,16
   2c774:	3012943a 	slli	r9,r6,16
   2c778:	a129883a 	add	r20,r20,r4
   2c77c:	633fffcc 	andi	r12,r12,65535
   2c780:	5515883a 	add	r10,r10,r20
   2c784:	3006d43a 	srli	r3,r6,16
   2c788:	4b13883a 	add	r9,r9,r12
   2c78c:	2ccb383a 	mul	r5,r5,r19
   2c790:	5100022e 	bgeu	r10,r4,2c79c <__muldf3+0x3b8>
   2c794:	01000074 	movhi	r4,1
   2c798:	290b883a 	add	r5,r5,r4
   2c79c:	802ad43a 	srli	r21,r16,16
   2c7a0:	843fffcc 	andi	r16,r16,65535
   2c7a4:	440d383a 	mul	r6,r8,r16
   2c7a8:	4565383a 	mul	r18,r8,r21
   2c7ac:	8349383a 	mul	r4,r16,r13
   2c7b0:	500e943a 	slli	r7,r10,16
   2c7b4:	3010d43a 	srli	r8,r6,16
   2c7b8:	5028d43a 	srli	r20,r10,16
   2c7bc:	2489883a 	add	r4,r4,r18
   2c7c0:	8abfffcc 	andi	r10,r17,65535
   2c7c4:	3a95883a 	add	r10,r7,r10
   2c7c8:	4119883a 	add	r12,r8,r4
   2c7cc:	a169883a 	add	r20,r20,r5
   2c7d0:	1a87883a 	add	r3,r3,r10
   2c7d4:	6d5b383a 	mul	r13,r13,r21
   2c7d8:	6480022e 	bgeu	r12,r18,2c7e4 <__muldf3+0x400>
   2c7dc:	01000074 	movhi	r4,1
   2c7e0:	691b883a 	add	r13,r13,r4
   2c7e4:	7c25383a 	mul	r18,r15,r16
   2c7e8:	7d4b383a 	mul	r5,r15,r21
   2c7ec:	84cf383a 	mul	r7,r16,r19
   2c7f0:	901ed43a 	srli	r15,r18,16
   2c7f4:	6008d43a 	srli	r4,r12,16
   2c7f8:	6010943a 	slli	r8,r12,16
   2c7fc:	394f883a 	add	r7,r7,r5
   2c800:	333fffcc 	andi	r12,r6,65535
   2c804:	79df883a 	add	r15,r15,r7
   2c808:	235b883a 	add	r13,r4,r13
   2c80c:	9d63383a 	mul	r17,r19,r21
   2c810:	4309883a 	add	r4,r8,r12
   2c814:	7940022e 	bgeu	r15,r5,2c820 <__muldf3+0x43c>
   2c818:	01400074 	movhi	r5,1
   2c81c:	8963883a 	add	r17,r17,r5
   2c820:	780a943a 	slli	r5,r15,16
   2c824:	91bfffcc 	andi	r6,r18,65535
   2c828:	70c7883a 	add	r3,r14,r3
   2c82c:	298d883a 	add	r6,r5,r6
   2c830:	1a8f803a 	cmpltu	r7,r3,r10
   2c834:	350b883a 	add	r5,r6,r20
   2c838:	20c7883a 	add	r3,r4,r3
   2c83c:	3955883a 	add	r10,r7,r5
   2c840:	1909803a 	cmpltu	r4,r3,r4
   2c844:	6a91883a 	add	r8,r13,r10
   2c848:	780cd43a 	srli	r6,r15,16
   2c84c:	2219883a 	add	r12,r4,r8
   2c850:	2d0b803a 	cmpltu	r5,r5,r20
   2c854:	51cf803a 	cmpltu	r7,r10,r7
   2c858:	29ceb03a 	or	r7,r5,r7
   2c85c:	4351803a 	cmpltu	r8,r8,r13
   2c860:	610b803a 	cmpltu	r5,r12,r4
   2c864:	4148b03a 	or	r4,r8,r5
   2c868:	398f883a 	add	r7,r7,r6
   2c86c:	3909883a 	add	r4,r7,r4
   2c870:	1810927a 	slli	r8,r3,9
   2c874:	2449883a 	add	r4,r4,r17
   2c878:	2008927a 	slli	r4,r4,9
   2c87c:	6022d5fa 	srli	r17,r12,23
   2c880:	1806d5fa 	srli	r3,r3,23
   2c884:	4252b03a 	or	r9,r8,r9
   2c888:	600a927a 	slli	r5,r12,9
   2c88c:	4810c03a 	cmpne	r8,r9,zero
   2c890:	2462b03a 	or	r17,r4,r17
   2c894:	40c6b03a 	or	r3,r8,r3
   2c898:	8900402c 	andhi	r4,r17,256
   2c89c:	1950b03a 	or	r8,r3,r5
   2c8a0:	20000726 	beq	r4,zero,2c8c0 <__muldf3+0x4dc>
   2c8a4:	4006d07a 	srli	r3,r8,1
   2c8a8:	880497fa 	slli	r2,r17,31
   2c8ac:	4200004c 	andi	r8,r8,1
   2c8b0:	8822d07a 	srli	r17,r17,1
   2c8b4:	1a10b03a 	or	r8,r3,r8
   2c8b8:	1210b03a 	or	r8,r2,r8
   2c8bc:	5805883a 	mov	r2,r11
   2c8c0:	1140ffc4 	addi	r5,r2,1023
   2c8c4:	0140440e 	bge	zero,r5,2c9d8 <__muldf3+0x5f4>
   2c8c8:	40c001cc 	andi	r3,r8,7
   2c8cc:	18000726 	beq	r3,zero,2c8ec <__muldf3+0x508>
   2c8d0:	40c003cc 	andi	r3,r8,15
   2c8d4:	01000104 	movi	r4,4
   2c8d8:	19000426 	beq	r3,r4,2c8ec <__muldf3+0x508>
   2c8dc:	4107883a 	add	r3,r8,r4
   2c8e0:	1a11803a 	cmpltu	r8,r3,r8
   2c8e4:	8a23883a 	add	r17,r17,r8
   2c8e8:	1811883a 	mov	r8,r3
   2c8ec:	88c0402c 	andhi	r3,r17,256
   2c8f0:	18000426 	beq	r3,zero,2c904 <__muldf3+0x520>
   2c8f4:	11410004 	addi	r5,r2,1024
   2c8f8:	00bfc034 	movhi	r2,65280
   2c8fc:	10bfffc4 	addi	r2,r2,-1
   2c900:	88a2703a 	and	r17,r17,r2
   2c904:	0081ff84 	movi	r2,2046
   2c908:	117f6416 	blt	r2,r5,2c69c <__alt_data_end+0xf802c69c>
   2c90c:	8828977a 	slli	r20,r17,29
   2c910:	4010d0fa 	srli	r8,r8,3
   2c914:	8822927a 	slli	r17,r17,9
   2c918:	2881ffcc 	andi	r2,r5,2047
   2c91c:	a228b03a 	or	r20,r20,r8
   2c920:	880ad33a 	srli	r5,r17,12
   2c924:	b02b883a 	mov	r21,r22
   2c928:	003f0d06 	br	2c560 <__alt_data_end+0xf802c560>
   2c92c:	8080022c 	andhi	r2,r16,8
   2c930:	10000926 	beq	r2,zero,2c958 <__muldf3+0x574>
   2c934:	8880022c 	andhi	r2,r17,8
   2c938:	1000071e 	bne	r2,zero,2c958 <__muldf3+0x574>
   2c93c:	00800434 	movhi	r2,16
   2c940:	89400234 	orhi	r5,r17,8
   2c944:	10bfffc4 	addi	r2,r2,-1
   2c948:	b82b883a 	mov	r21,r23
   2c94c:	288a703a 	and	r5,r5,r2
   2c950:	4029883a 	mov	r20,r8
   2c954:	003f6806 	br	2c6f8 <__alt_data_end+0xf802c6f8>
   2c958:	00800434 	movhi	r2,16
   2c95c:	81400234 	orhi	r5,r16,8
   2c960:	10bfffc4 	addi	r2,r2,-1
   2c964:	288a703a 	and	r5,r5,r2
   2c968:	003f6306 	br	2c6f8 <__alt_data_end+0xf802c6f8>
   2c96c:	147ff604 	addi	r17,r2,-40
   2c970:	3462983a 	sll	r17,r6,r17
   2c974:	0011883a 	mov	r8,zero
   2c978:	003f4406 	br	2c68c <__alt_data_end+0xf802c68c>
   2c97c:	3009883a 	mov	r4,r6
   2c980:	d9800215 	stw	r6,8(sp)
   2c984:	da400115 	stw	r9,4(sp)
   2c988:	da800015 	stw	r10,0(sp)
   2c98c:	002d5fc0 	call	2d5fc <__clzsi2>
   2c990:	10800804 	addi	r2,r2,32
   2c994:	da800017 	ldw	r10,0(sp)
   2c998:	da400117 	ldw	r9,4(sp)
   2c99c:	d9800217 	ldw	r6,8(sp)
   2c9a0:	003f3006 	br	2c664 <__alt_data_end+0xf802c664>
   2c9a4:	143ff604 	addi	r16,r2,-40
   2c9a8:	9c20983a 	sll	r16,r19,r16
   2c9ac:	0029883a 	mov	r20,zero
   2c9b0:	003f1606 	br	2c60c <__alt_data_end+0xf802c60c>
   2c9b4:	d9800215 	stw	r6,8(sp)
   2c9b8:	d9c00015 	stw	r7,0(sp)
   2c9bc:	da400115 	stw	r9,4(sp)
   2c9c0:	002d5fc0 	call	2d5fc <__clzsi2>
   2c9c4:	10800804 	addi	r2,r2,32
   2c9c8:	da400117 	ldw	r9,4(sp)
   2c9cc:	d9c00017 	ldw	r7,0(sp)
   2c9d0:	d9800217 	ldw	r6,8(sp)
   2c9d4:	003f0306 	br	2c5e4 <__alt_data_end+0xf802c5e4>
   2c9d8:	00c00044 	movi	r3,1
   2c9dc:	1947c83a 	sub	r3,r3,r5
   2c9e0:	00800e04 	movi	r2,56
   2c9e4:	10feda16 	blt	r2,r3,2c550 <__alt_data_end+0xf802c550>
   2c9e8:	008007c4 	movi	r2,31
   2c9ec:	10c01b16 	blt	r2,r3,2ca5c <__muldf3+0x678>
   2c9f0:	00800804 	movi	r2,32
   2c9f4:	10c5c83a 	sub	r2,r2,r3
   2c9f8:	888a983a 	sll	r5,r17,r2
   2c9fc:	40c8d83a 	srl	r4,r8,r3
   2ca00:	4084983a 	sll	r2,r8,r2
   2ca04:	88e2d83a 	srl	r17,r17,r3
   2ca08:	2906b03a 	or	r3,r5,r4
   2ca0c:	1004c03a 	cmpne	r2,r2,zero
   2ca10:	1886b03a 	or	r3,r3,r2
   2ca14:	188001cc 	andi	r2,r3,7
   2ca18:	10000726 	beq	r2,zero,2ca38 <__muldf3+0x654>
   2ca1c:	188003cc 	andi	r2,r3,15
   2ca20:	01000104 	movi	r4,4
   2ca24:	11000426 	beq	r2,r4,2ca38 <__muldf3+0x654>
   2ca28:	1805883a 	mov	r2,r3
   2ca2c:	10c00104 	addi	r3,r2,4
   2ca30:	1885803a 	cmpltu	r2,r3,r2
   2ca34:	88a3883a 	add	r17,r17,r2
   2ca38:	8880202c 	andhi	r2,r17,128
   2ca3c:	10001c26 	beq	r2,zero,2cab0 <__muldf3+0x6cc>
   2ca40:	b02b883a 	mov	r21,r22
   2ca44:	00800044 	movi	r2,1
   2ca48:	000b883a 	mov	r5,zero
   2ca4c:	0029883a 	mov	r20,zero
   2ca50:	003ec306 	br	2c560 <__alt_data_end+0xf802c560>
   2ca54:	5805883a 	mov	r2,r11
   2ca58:	003f9906 	br	2c8c0 <__alt_data_end+0xf802c8c0>
   2ca5c:	00bff844 	movi	r2,-31
   2ca60:	1145c83a 	sub	r2,r2,r5
   2ca64:	8888d83a 	srl	r4,r17,r2
   2ca68:	00800804 	movi	r2,32
   2ca6c:	18801a26 	beq	r3,r2,2cad8 <__muldf3+0x6f4>
   2ca70:	00801004 	movi	r2,64
   2ca74:	10c5c83a 	sub	r2,r2,r3
   2ca78:	8884983a 	sll	r2,r17,r2
   2ca7c:	1204b03a 	or	r2,r2,r8
   2ca80:	1004c03a 	cmpne	r2,r2,zero
   2ca84:	2084b03a 	or	r2,r4,r2
   2ca88:	144001cc 	andi	r17,r2,7
   2ca8c:	88000d1e 	bne	r17,zero,2cac4 <__muldf3+0x6e0>
   2ca90:	000b883a 	mov	r5,zero
   2ca94:	1028d0fa 	srli	r20,r2,3
   2ca98:	b02b883a 	mov	r21,r22
   2ca9c:	0005883a 	mov	r2,zero
   2caa0:	a468b03a 	or	r20,r20,r17
   2caa4:	003eae06 	br	2c560 <__alt_data_end+0xf802c560>
   2caa8:	1007883a 	mov	r3,r2
   2caac:	0023883a 	mov	r17,zero
   2cab0:	880a927a 	slli	r5,r17,9
   2cab4:	1805883a 	mov	r2,r3
   2cab8:	8822977a 	slli	r17,r17,29
   2cabc:	280ad33a 	srli	r5,r5,12
   2cac0:	003ff406 	br	2ca94 <__alt_data_end+0xf802ca94>
   2cac4:	10c003cc 	andi	r3,r2,15
   2cac8:	01000104 	movi	r4,4
   2cacc:	193ff626 	beq	r3,r4,2caa8 <__alt_data_end+0xf802caa8>
   2cad0:	0023883a 	mov	r17,zero
   2cad4:	003fd506 	br	2ca2c <__alt_data_end+0xf802ca2c>
   2cad8:	0005883a 	mov	r2,zero
   2cadc:	003fe706 	br	2ca7c <__alt_data_end+0xf802ca7c>
   2cae0:	00800434 	movhi	r2,16
   2cae4:	89400234 	orhi	r5,r17,8
   2cae8:	10bfffc4 	addi	r2,r2,-1
   2caec:	b02b883a 	mov	r21,r22
   2caf0:	288a703a 	and	r5,r5,r2
   2caf4:	4029883a 	mov	r20,r8
   2caf8:	003eff06 	br	2c6f8 <__alt_data_end+0xf802c6f8>

0002cafc <__subdf3>:
   2cafc:	02000434 	movhi	r8,16
   2cb00:	423fffc4 	addi	r8,r8,-1
   2cb04:	defffb04 	addi	sp,sp,-20
   2cb08:	2a14703a 	and	r10,r5,r8
   2cb0c:	3812d53a 	srli	r9,r7,20
   2cb10:	3a10703a 	and	r8,r7,r8
   2cb14:	2006d77a 	srli	r3,r4,29
   2cb18:	3004d77a 	srli	r2,r6,29
   2cb1c:	dc000015 	stw	r16,0(sp)
   2cb20:	501490fa 	slli	r10,r10,3
   2cb24:	2820d53a 	srli	r16,r5,20
   2cb28:	401090fa 	slli	r8,r8,3
   2cb2c:	dc800215 	stw	r18,8(sp)
   2cb30:	dc400115 	stw	r17,4(sp)
   2cb34:	dfc00415 	stw	ra,16(sp)
   2cb38:	202290fa 	slli	r17,r4,3
   2cb3c:	dcc00315 	stw	r19,12(sp)
   2cb40:	4a41ffcc 	andi	r9,r9,2047
   2cb44:	0101ffc4 	movi	r4,2047
   2cb48:	2824d7fa 	srli	r18,r5,31
   2cb4c:	8401ffcc 	andi	r16,r16,2047
   2cb50:	50c6b03a 	or	r3,r10,r3
   2cb54:	380ed7fa 	srli	r7,r7,31
   2cb58:	408ab03a 	or	r5,r8,r2
   2cb5c:	300c90fa 	slli	r6,r6,3
   2cb60:	49009626 	beq	r9,r4,2cdbc <__subdf3+0x2c0>
   2cb64:	39c0005c 	xori	r7,r7,1
   2cb68:	8245c83a 	sub	r2,r16,r9
   2cb6c:	3c807426 	beq	r7,r18,2cd40 <__subdf3+0x244>
   2cb70:	0080af0e 	bge	zero,r2,2ce30 <__subdf3+0x334>
   2cb74:	48002a1e 	bne	r9,zero,2cc20 <__subdf3+0x124>
   2cb78:	2988b03a 	or	r4,r5,r6
   2cb7c:	20009a1e 	bne	r4,zero,2cde8 <__subdf3+0x2ec>
   2cb80:	888001cc 	andi	r2,r17,7
   2cb84:	10000726 	beq	r2,zero,2cba4 <__subdf3+0xa8>
   2cb88:	888003cc 	andi	r2,r17,15
   2cb8c:	01000104 	movi	r4,4
   2cb90:	11000426 	beq	r2,r4,2cba4 <__subdf3+0xa8>
   2cb94:	890b883a 	add	r5,r17,r4
   2cb98:	2c63803a 	cmpltu	r17,r5,r17
   2cb9c:	1c47883a 	add	r3,r3,r17
   2cba0:	2823883a 	mov	r17,r5
   2cba4:	1880202c 	andhi	r2,r3,128
   2cba8:	10005926 	beq	r2,zero,2cd10 <__subdf3+0x214>
   2cbac:	84000044 	addi	r16,r16,1
   2cbb0:	0081ffc4 	movi	r2,2047
   2cbb4:	8080be26 	beq	r16,r2,2ceb0 <__subdf3+0x3b4>
   2cbb8:	017fe034 	movhi	r5,65408
   2cbbc:	297fffc4 	addi	r5,r5,-1
   2cbc0:	1946703a 	and	r3,r3,r5
   2cbc4:	1804977a 	slli	r2,r3,29
   2cbc8:	1806927a 	slli	r3,r3,9
   2cbcc:	8822d0fa 	srli	r17,r17,3
   2cbd0:	8401ffcc 	andi	r16,r16,2047
   2cbd4:	180ad33a 	srli	r5,r3,12
   2cbd8:	9100004c 	andi	r4,r18,1
   2cbdc:	1444b03a 	or	r2,r2,r17
   2cbe0:	80c1ffcc 	andi	r3,r16,2047
   2cbe4:	1820953a 	slli	r16,r3,20
   2cbe8:	20c03fcc 	andi	r3,r4,255
   2cbec:	180897fa 	slli	r4,r3,31
   2cbf0:	00c00434 	movhi	r3,16
   2cbf4:	18ffffc4 	addi	r3,r3,-1
   2cbf8:	28c6703a 	and	r3,r5,r3
   2cbfc:	1c06b03a 	or	r3,r3,r16
   2cc00:	1906b03a 	or	r3,r3,r4
   2cc04:	dfc00417 	ldw	ra,16(sp)
   2cc08:	dcc00317 	ldw	r19,12(sp)
   2cc0c:	dc800217 	ldw	r18,8(sp)
   2cc10:	dc400117 	ldw	r17,4(sp)
   2cc14:	dc000017 	ldw	r16,0(sp)
   2cc18:	dec00504 	addi	sp,sp,20
   2cc1c:	f800283a 	ret
   2cc20:	0101ffc4 	movi	r4,2047
   2cc24:	813fd626 	beq	r16,r4,2cb80 <__alt_data_end+0xf802cb80>
   2cc28:	29402034 	orhi	r5,r5,128
   2cc2c:	01000e04 	movi	r4,56
   2cc30:	2080a316 	blt	r4,r2,2cec0 <__subdf3+0x3c4>
   2cc34:	010007c4 	movi	r4,31
   2cc38:	2080c616 	blt	r4,r2,2cf54 <__subdf3+0x458>
   2cc3c:	01000804 	movi	r4,32
   2cc40:	2089c83a 	sub	r4,r4,r2
   2cc44:	2910983a 	sll	r8,r5,r4
   2cc48:	308ed83a 	srl	r7,r6,r2
   2cc4c:	3108983a 	sll	r4,r6,r4
   2cc50:	2884d83a 	srl	r2,r5,r2
   2cc54:	41ccb03a 	or	r6,r8,r7
   2cc58:	2008c03a 	cmpne	r4,r4,zero
   2cc5c:	310cb03a 	or	r6,r6,r4
   2cc60:	898dc83a 	sub	r6,r17,r6
   2cc64:	89a3803a 	cmpltu	r17,r17,r6
   2cc68:	1887c83a 	sub	r3,r3,r2
   2cc6c:	1c47c83a 	sub	r3,r3,r17
   2cc70:	3023883a 	mov	r17,r6
   2cc74:	1880202c 	andhi	r2,r3,128
   2cc78:	10002326 	beq	r2,zero,2cd08 <__subdf3+0x20c>
   2cc7c:	04c02034 	movhi	r19,128
   2cc80:	9cffffc4 	addi	r19,r19,-1
   2cc84:	1ce6703a 	and	r19,r3,r19
   2cc88:	98007a26 	beq	r19,zero,2ce74 <__subdf3+0x378>
   2cc8c:	9809883a 	mov	r4,r19
   2cc90:	002d5fc0 	call	2d5fc <__clzsi2>
   2cc94:	113ffe04 	addi	r4,r2,-8
   2cc98:	00c007c4 	movi	r3,31
   2cc9c:	19007b16 	blt	r3,r4,2ce8c <__subdf3+0x390>
   2cca0:	00800804 	movi	r2,32
   2cca4:	1105c83a 	sub	r2,r2,r4
   2cca8:	8884d83a 	srl	r2,r17,r2
   2ccac:	9906983a 	sll	r3,r19,r4
   2ccb0:	8922983a 	sll	r17,r17,r4
   2ccb4:	10c4b03a 	or	r2,r2,r3
   2ccb8:	24007816 	blt	r4,r16,2ce9c <__subdf3+0x3a0>
   2ccbc:	2421c83a 	sub	r16,r4,r16
   2ccc0:	80c00044 	addi	r3,r16,1
   2ccc4:	010007c4 	movi	r4,31
   2ccc8:	20c09516 	blt	r4,r3,2cf20 <__subdf3+0x424>
   2cccc:	01400804 	movi	r5,32
   2ccd0:	28cbc83a 	sub	r5,r5,r3
   2ccd4:	88c8d83a 	srl	r4,r17,r3
   2ccd8:	8962983a 	sll	r17,r17,r5
   2ccdc:	114a983a 	sll	r5,r2,r5
   2cce0:	10c6d83a 	srl	r3,r2,r3
   2cce4:	8804c03a 	cmpne	r2,r17,zero
   2cce8:	290ab03a 	or	r5,r5,r4
   2ccec:	28a2b03a 	or	r17,r5,r2
   2ccf0:	0021883a 	mov	r16,zero
   2ccf4:	003fa206 	br	2cb80 <__alt_data_end+0xf802cb80>
   2ccf8:	2090b03a 	or	r8,r4,r2
   2ccfc:	40018e26 	beq	r8,zero,2d338 <__subdf3+0x83c>
   2cd00:	1007883a 	mov	r3,r2
   2cd04:	2023883a 	mov	r17,r4
   2cd08:	888001cc 	andi	r2,r17,7
   2cd0c:	103f9e1e 	bne	r2,zero,2cb88 <__alt_data_end+0xf802cb88>
   2cd10:	1804977a 	slli	r2,r3,29
   2cd14:	8822d0fa 	srli	r17,r17,3
   2cd18:	1810d0fa 	srli	r8,r3,3
   2cd1c:	9100004c 	andi	r4,r18,1
   2cd20:	1444b03a 	or	r2,r2,r17
   2cd24:	00c1ffc4 	movi	r3,2047
   2cd28:	80c02826 	beq	r16,r3,2cdcc <__subdf3+0x2d0>
   2cd2c:	01400434 	movhi	r5,16
   2cd30:	297fffc4 	addi	r5,r5,-1
   2cd34:	80e0703a 	and	r16,r16,r3
   2cd38:	414a703a 	and	r5,r8,r5
   2cd3c:	003fa806 	br	2cbe0 <__alt_data_end+0xf802cbe0>
   2cd40:	0080630e 	bge	zero,r2,2ced0 <__subdf3+0x3d4>
   2cd44:	48003026 	beq	r9,zero,2ce08 <__subdf3+0x30c>
   2cd48:	0101ffc4 	movi	r4,2047
   2cd4c:	813f8c26 	beq	r16,r4,2cb80 <__alt_data_end+0xf802cb80>
   2cd50:	29402034 	orhi	r5,r5,128
   2cd54:	01000e04 	movi	r4,56
   2cd58:	2080a90e 	bge	r4,r2,2d000 <__subdf3+0x504>
   2cd5c:	298cb03a 	or	r6,r5,r6
   2cd60:	3012c03a 	cmpne	r9,r6,zero
   2cd64:	0005883a 	mov	r2,zero
   2cd68:	4c53883a 	add	r9,r9,r17
   2cd6c:	4c63803a 	cmpltu	r17,r9,r17
   2cd70:	10c7883a 	add	r3,r2,r3
   2cd74:	88c7883a 	add	r3,r17,r3
   2cd78:	4823883a 	mov	r17,r9
   2cd7c:	1880202c 	andhi	r2,r3,128
   2cd80:	1000d026 	beq	r2,zero,2d0c4 <__subdf3+0x5c8>
   2cd84:	84000044 	addi	r16,r16,1
   2cd88:	0081ffc4 	movi	r2,2047
   2cd8c:	8080fe26 	beq	r16,r2,2d188 <__subdf3+0x68c>
   2cd90:	00bfe034 	movhi	r2,65408
   2cd94:	10bfffc4 	addi	r2,r2,-1
   2cd98:	1886703a 	and	r3,r3,r2
   2cd9c:	880ad07a 	srli	r5,r17,1
   2cda0:	180497fa 	slli	r2,r3,31
   2cda4:	8900004c 	andi	r4,r17,1
   2cda8:	2922b03a 	or	r17,r5,r4
   2cdac:	1806d07a 	srli	r3,r3,1
   2cdb0:	1462b03a 	or	r17,r2,r17
   2cdb4:	3825883a 	mov	r18,r7
   2cdb8:	003f7106 	br	2cb80 <__alt_data_end+0xf802cb80>
   2cdbc:	2984b03a 	or	r2,r5,r6
   2cdc0:	103f6826 	beq	r2,zero,2cb64 <__alt_data_end+0xf802cb64>
   2cdc4:	39c03fcc 	andi	r7,r7,255
   2cdc8:	003f6706 	br	2cb68 <__alt_data_end+0xf802cb68>
   2cdcc:	4086b03a 	or	r3,r8,r2
   2cdd0:	18015226 	beq	r3,zero,2d31c <__subdf3+0x820>
   2cdd4:	00c00434 	movhi	r3,16
   2cdd8:	41400234 	orhi	r5,r8,8
   2cddc:	18ffffc4 	addi	r3,r3,-1
   2cde0:	28ca703a 	and	r5,r5,r3
   2cde4:	003f7e06 	br	2cbe0 <__alt_data_end+0xf802cbe0>
   2cde8:	10bfffc4 	addi	r2,r2,-1
   2cdec:	1000491e 	bne	r2,zero,2cf14 <__subdf3+0x418>
   2cdf0:	898fc83a 	sub	r7,r17,r6
   2cdf4:	89e3803a 	cmpltu	r17,r17,r7
   2cdf8:	1947c83a 	sub	r3,r3,r5
   2cdfc:	1c47c83a 	sub	r3,r3,r17
   2ce00:	3823883a 	mov	r17,r7
   2ce04:	003f9b06 	br	2cc74 <__alt_data_end+0xf802cc74>
   2ce08:	2988b03a 	or	r4,r5,r6
   2ce0c:	203f5c26 	beq	r4,zero,2cb80 <__alt_data_end+0xf802cb80>
   2ce10:	10bfffc4 	addi	r2,r2,-1
   2ce14:	1000931e 	bne	r2,zero,2d064 <__subdf3+0x568>
   2ce18:	898d883a 	add	r6,r17,r6
   2ce1c:	3463803a 	cmpltu	r17,r6,r17
   2ce20:	1947883a 	add	r3,r3,r5
   2ce24:	88c7883a 	add	r3,r17,r3
   2ce28:	3023883a 	mov	r17,r6
   2ce2c:	003fd306 	br	2cd7c <__alt_data_end+0xf802cd7c>
   2ce30:	1000541e 	bne	r2,zero,2cf84 <__subdf3+0x488>
   2ce34:	80800044 	addi	r2,r16,1
   2ce38:	1081ffcc 	andi	r2,r2,2047
   2ce3c:	01000044 	movi	r4,1
   2ce40:	2080a20e 	bge	r4,r2,2d0cc <__subdf3+0x5d0>
   2ce44:	8989c83a 	sub	r4,r17,r6
   2ce48:	8905803a 	cmpltu	r2,r17,r4
   2ce4c:	1967c83a 	sub	r19,r3,r5
   2ce50:	98a7c83a 	sub	r19,r19,r2
   2ce54:	9880202c 	andhi	r2,r19,128
   2ce58:	10006326 	beq	r2,zero,2cfe8 <__subdf3+0x4ec>
   2ce5c:	3463c83a 	sub	r17,r6,r17
   2ce60:	28c7c83a 	sub	r3,r5,r3
   2ce64:	344d803a 	cmpltu	r6,r6,r17
   2ce68:	19a7c83a 	sub	r19,r3,r6
   2ce6c:	3825883a 	mov	r18,r7
   2ce70:	983f861e 	bne	r19,zero,2cc8c <__alt_data_end+0xf802cc8c>
   2ce74:	8809883a 	mov	r4,r17
   2ce78:	002d5fc0 	call	2d5fc <__clzsi2>
   2ce7c:	10800804 	addi	r2,r2,32
   2ce80:	113ffe04 	addi	r4,r2,-8
   2ce84:	00c007c4 	movi	r3,31
   2ce88:	193f850e 	bge	r3,r4,2cca0 <__alt_data_end+0xf802cca0>
   2ce8c:	10bff604 	addi	r2,r2,-40
   2ce90:	8884983a 	sll	r2,r17,r2
   2ce94:	0023883a 	mov	r17,zero
   2ce98:	243f880e 	bge	r4,r16,2ccbc <__alt_data_end+0xf802ccbc>
   2ce9c:	00ffe034 	movhi	r3,65408
   2cea0:	18ffffc4 	addi	r3,r3,-1
   2cea4:	8121c83a 	sub	r16,r16,r4
   2cea8:	10c6703a 	and	r3,r2,r3
   2ceac:	003f3406 	br	2cb80 <__alt_data_end+0xf802cb80>
   2ceb0:	9100004c 	andi	r4,r18,1
   2ceb4:	000b883a 	mov	r5,zero
   2ceb8:	0005883a 	mov	r2,zero
   2cebc:	003f4806 	br	2cbe0 <__alt_data_end+0xf802cbe0>
   2cec0:	298cb03a 	or	r6,r5,r6
   2cec4:	300cc03a 	cmpne	r6,r6,zero
   2cec8:	0005883a 	mov	r2,zero
   2cecc:	003f6406 	br	2cc60 <__alt_data_end+0xf802cc60>
   2ced0:	10009a1e 	bne	r2,zero,2d13c <__subdf3+0x640>
   2ced4:	82400044 	addi	r9,r16,1
   2ced8:	4881ffcc 	andi	r2,r9,2047
   2cedc:	02800044 	movi	r10,1
   2cee0:	5080670e 	bge	r10,r2,2d080 <__subdf3+0x584>
   2cee4:	0081ffc4 	movi	r2,2047
   2cee8:	4880af26 	beq	r9,r2,2d1a8 <__subdf3+0x6ac>
   2ceec:	898d883a 	add	r6,r17,r6
   2cef0:	1945883a 	add	r2,r3,r5
   2cef4:	3447803a 	cmpltu	r3,r6,r17
   2cef8:	1887883a 	add	r3,r3,r2
   2cefc:	182297fa 	slli	r17,r3,31
   2cf00:	300cd07a 	srli	r6,r6,1
   2cf04:	1806d07a 	srli	r3,r3,1
   2cf08:	4821883a 	mov	r16,r9
   2cf0c:	89a2b03a 	or	r17,r17,r6
   2cf10:	003f1b06 	br	2cb80 <__alt_data_end+0xf802cb80>
   2cf14:	0101ffc4 	movi	r4,2047
   2cf18:	813f441e 	bne	r16,r4,2cc2c <__alt_data_end+0xf802cc2c>
   2cf1c:	003f1806 	br	2cb80 <__alt_data_end+0xf802cb80>
   2cf20:	843ff844 	addi	r16,r16,-31
   2cf24:	01400804 	movi	r5,32
   2cf28:	1408d83a 	srl	r4,r2,r16
   2cf2c:	19405026 	beq	r3,r5,2d070 <__subdf3+0x574>
   2cf30:	01401004 	movi	r5,64
   2cf34:	28c7c83a 	sub	r3,r5,r3
   2cf38:	10c4983a 	sll	r2,r2,r3
   2cf3c:	88a2b03a 	or	r17,r17,r2
   2cf40:	8822c03a 	cmpne	r17,r17,zero
   2cf44:	2462b03a 	or	r17,r4,r17
   2cf48:	0007883a 	mov	r3,zero
   2cf4c:	0021883a 	mov	r16,zero
   2cf50:	003f6d06 	br	2cd08 <__alt_data_end+0xf802cd08>
   2cf54:	11fff804 	addi	r7,r2,-32
   2cf58:	01000804 	movi	r4,32
   2cf5c:	29ced83a 	srl	r7,r5,r7
   2cf60:	11004526 	beq	r2,r4,2d078 <__subdf3+0x57c>
   2cf64:	01001004 	movi	r4,64
   2cf68:	2089c83a 	sub	r4,r4,r2
   2cf6c:	2904983a 	sll	r2,r5,r4
   2cf70:	118cb03a 	or	r6,r2,r6
   2cf74:	300cc03a 	cmpne	r6,r6,zero
   2cf78:	398cb03a 	or	r6,r7,r6
   2cf7c:	0005883a 	mov	r2,zero
   2cf80:	003f3706 	br	2cc60 <__alt_data_end+0xf802cc60>
   2cf84:	80002a26 	beq	r16,zero,2d030 <__subdf3+0x534>
   2cf88:	0101ffc4 	movi	r4,2047
   2cf8c:	49006626 	beq	r9,r4,2d128 <__subdf3+0x62c>
   2cf90:	0085c83a 	sub	r2,zero,r2
   2cf94:	18c02034 	orhi	r3,r3,128
   2cf98:	01000e04 	movi	r4,56
   2cf9c:	20807e16 	blt	r4,r2,2d198 <__subdf3+0x69c>
   2cfa0:	010007c4 	movi	r4,31
   2cfa4:	2080e716 	blt	r4,r2,2d344 <__subdf3+0x848>
   2cfa8:	01000804 	movi	r4,32
   2cfac:	2089c83a 	sub	r4,r4,r2
   2cfb0:	1914983a 	sll	r10,r3,r4
   2cfb4:	8890d83a 	srl	r8,r17,r2
   2cfb8:	8908983a 	sll	r4,r17,r4
   2cfbc:	1884d83a 	srl	r2,r3,r2
   2cfc0:	5222b03a 	or	r17,r10,r8
   2cfc4:	2006c03a 	cmpne	r3,r4,zero
   2cfc8:	88e2b03a 	or	r17,r17,r3
   2cfcc:	3463c83a 	sub	r17,r6,r17
   2cfd0:	2885c83a 	sub	r2,r5,r2
   2cfd4:	344d803a 	cmpltu	r6,r6,r17
   2cfd8:	1187c83a 	sub	r3,r2,r6
   2cfdc:	4821883a 	mov	r16,r9
   2cfe0:	3825883a 	mov	r18,r7
   2cfe4:	003f2306 	br	2cc74 <__alt_data_end+0xf802cc74>
   2cfe8:	24d0b03a 	or	r8,r4,r19
   2cfec:	40001b1e 	bne	r8,zero,2d05c <__subdf3+0x560>
   2cff0:	0005883a 	mov	r2,zero
   2cff4:	0009883a 	mov	r4,zero
   2cff8:	0021883a 	mov	r16,zero
   2cffc:	003f4906 	br	2cd24 <__alt_data_end+0xf802cd24>
   2d000:	010007c4 	movi	r4,31
   2d004:	20803a16 	blt	r4,r2,2d0f0 <__subdf3+0x5f4>
   2d008:	01000804 	movi	r4,32
   2d00c:	2089c83a 	sub	r4,r4,r2
   2d010:	2912983a 	sll	r9,r5,r4
   2d014:	3090d83a 	srl	r8,r6,r2
   2d018:	3108983a 	sll	r4,r6,r4
   2d01c:	2884d83a 	srl	r2,r5,r2
   2d020:	4a12b03a 	or	r9,r9,r8
   2d024:	2008c03a 	cmpne	r4,r4,zero
   2d028:	4912b03a 	or	r9,r9,r4
   2d02c:	003f4e06 	br	2cd68 <__alt_data_end+0xf802cd68>
   2d030:	1c48b03a 	or	r4,r3,r17
   2d034:	20003c26 	beq	r4,zero,2d128 <__subdf3+0x62c>
   2d038:	0084303a 	nor	r2,zero,r2
   2d03c:	1000381e 	bne	r2,zero,2d120 <__subdf3+0x624>
   2d040:	3463c83a 	sub	r17,r6,r17
   2d044:	28c5c83a 	sub	r2,r5,r3
   2d048:	344d803a 	cmpltu	r6,r6,r17
   2d04c:	1187c83a 	sub	r3,r2,r6
   2d050:	4821883a 	mov	r16,r9
   2d054:	3825883a 	mov	r18,r7
   2d058:	003f0606 	br	2cc74 <__alt_data_end+0xf802cc74>
   2d05c:	2023883a 	mov	r17,r4
   2d060:	003f0906 	br	2cc88 <__alt_data_end+0xf802cc88>
   2d064:	0101ffc4 	movi	r4,2047
   2d068:	813f3a1e 	bne	r16,r4,2cd54 <__alt_data_end+0xf802cd54>
   2d06c:	003ec406 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d070:	0005883a 	mov	r2,zero
   2d074:	003fb106 	br	2cf3c <__alt_data_end+0xf802cf3c>
   2d078:	0005883a 	mov	r2,zero
   2d07c:	003fbc06 	br	2cf70 <__alt_data_end+0xf802cf70>
   2d080:	1c44b03a 	or	r2,r3,r17
   2d084:	80008e1e 	bne	r16,zero,2d2c0 <__subdf3+0x7c4>
   2d088:	1000c826 	beq	r2,zero,2d3ac <__subdf3+0x8b0>
   2d08c:	2984b03a 	or	r2,r5,r6
   2d090:	103ebb26 	beq	r2,zero,2cb80 <__alt_data_end+0xf802cb80>
   2d094:	8989883a 	add	r4,r17,r6
   2d098:	1945883a 	add	r2,r3,r5
   2d09c:	2447803a 	cmpltu	r3,r4,r17
   2d0a0:	1887883a 	add	r3,r3,r2
   2d0a4:	1880202c 	andhi	r2,r3,128
   2d0a8:	2023883a 	mov	r17,r4
   2d0ac:	103f1626 	beq	r2,zero,2cd08 <__alt_data_end+0xf802cd08>
   2d0b0:	00bfe034 	movhi	r2,65408
   2d0b4:	10bfffc4 	addi	r2,r2,-1
   2d0b8:	5021883a 	mov	r16,r10
   2d0bc:	1886703a 	and	r3,r3,r2
   2d0c0:	003eaf06 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d0c4:	3825883a 	mov	r18,r7
   2d0c8:	003f0f06 	br	2cd08 <__alt_data_end+0xf802cd08>
   2d0cc:	1c44b03a 	or	r2,r3,r17
   2d0d0:	8000251e 	bne	r16,zero,2d168 <__subdf3+0x66c>
   2d0d4:	1000661e 	bne	r2,zero,2d270 <__subdf3+0x774>
   2d0d8:	2990b03a 	or	r8,r5,r6
   2d0dc:	40009626 	beq	r8,zero,2d338 <__subdf3+0x83c>
   2d0e0:	2807883a 	mov	r3,r5
   2d0e4:	3023883a 	mov	r17,r6
   2d0e8:	3825883a 	mov	r18,r7
   2d0ec:	003ea406 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d0f0:	127ff804 	addi	r9,r2,-32
   2d0f4:	01000804 	movi	r4,32
   2d0f8:	2a52d83a 	srl	r9,r5,r9
   2d0fc:	11008c26 	beq	r2,r4,2d330 <__subdf3+0x834>
   2d100:	01001004 	movi	r4,64
   2d104:	2085c83a 	sub	r2,r4,r2
   2d108:	2884983a 	sll	r2,r5,r2
   2d10c:	118cb03a 	or	r6,r2,r6
   2d110:	300cc03a 	cmpne	r6,r6,zero
   2d114:	4992b03a 	or	r9,r9,r6
   2d118:	0005883a 	mov	r2,zero
   2d11c:	003f1206 	br	2cd68 <__alt_data_end+0xf802cd68>
   2d120:	0101ffc4 	movi	r4,2047
   2d124:	493f9c1e 	bne	r9,r4,2cf98 <__alt_data_end+0xf802cf98>
   2d128:	2807883a 	mov	r3,r5
   2d12c:	3023883a 	mov	r17,r6
   2d130:	4821883a 	mov	r16,r9
   2d134:	3825883a 	mov	r18,r7
   2d138:	003e9106 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d13c:	80001f1e 	bne	r16,zero,2d1bc <__subdf3+0x6c0>
   2d140:	1c48b03a 	or	r4,r3,r17
   2d144:	20005a26 	beq	r4,zero,2d2b0 <__subdf3+0x7b4>
   2d148:	0084303a 	nor	r2,zero,r2
   2d14c:	1000561e 	bne	r2,zero,2d2a8 <__subdf3+0x7ac>
   2d150:	89a3883a 	add	r17,r17,r6
   2d154:	1945883a 	add	r2,r3,r5
   2d158:	898d803a 	cmpltu	r6,r17,r6
   2d15c:	3087883a 	add	r3,r6,r2
   2d160:	4821883a 	mov	r16,r9
   2d164:	003f0506 	br	2cd7c <__alt_data_end+0xf802cd7c>
   2d168:	10002b1e 	bne	r2,zero,2d218 <__subdf3+0x71c>
   2d16c:	2984b03a 	or	r2,r5,r6
   2d170:	10008026 	beq	r2,zero,2d374 <__subdf3+0x878>
   2d174:	2807883a 	mov	r3,r5
   2d178:	3023883a 	mov	r17,r6
   2d17c:	3825883a 	mov	r18,r7
   2d180:	0401ffc4 	movi	r16,2047
   2d184:	003e7e06 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d188:	3809883a 	mov	r4,r7
   2d18c:	0011883a 	mov	r8,zero
   2d190:	0005883a 	mov	r2,zero
   2d194:	003ee306 	br	2cd24 <__alt_data_end+0xf802cd24>
   2d198:	1c62b03a 	or	r17,r3,r17
   2d19c:	8822c03a 	cmpne	r17,r17,zero
   2d1a0:	0005883a 	mov	r2,zero
   2d1a4:	003f8906 	br	2cfcc <__alt_data_end+0xf802cfcc>
   2d1a8:	3809883a 	mov	r4,r7
   2d1ac:	4821883a 	mov	r16,r9
   2d1b0:	0011883a 	mov	r8,zero
   2d1b4:	0005883a 	mov	r2,zero
   2d1b8:	003eda06 	br	2cd24 <__alt_data_end+0xf802cd24>
   2d1bc:	0101ffc4 	movi	r4,2047
   2d1c0:	49003b26 	beq	r9,r4,2d2b0 <__subdf3+0x7b4>
   2d1c4:	0085c83a 	sub	r2,zero,r2
   2d1c8:	18c02034 	orhi	r3,r3,128
   2d1cc:	01000e04 	movi	r4,56
   2d1d0:	20806e16 	blt	r4,r2,2d38c <__subdf3+0x890>
   2d1d4:	010007c4 	movi	r4,31
   2d1d8:	20807716 	blt	r4,r2,2d3b8 <__subdf3+0x8bc>
   2d1dc:	01000804 	movi	r4,32
   2d1e0:	2089c83a 	sub	r4,r4,r2
   2d1e4:	1914983a 	sll	r10,r3,r4
   2d1e8:	8890d83a 	srl	r8,r17,r2
   2d1ec:	8908983a 	sll	r4,r17,r4
   2d1f0:	1884d83a 	srl	r2,r3,r2
   2d1f4:	5222b03a 	or	r17,r10,r8
   2d1f8:	2006c03a 	cmpne	r3,r4,zero
   2d1fc:	88e2b03a 	or	r17,r17,r3
   2d200:	89a3883a 	add	r17,r17,r6
   2d204:	1145883a 	add	r2,r2,r5
   2d208:	898d803a 	cmpltu	r6,r17,r6
   2d20c:	3087883a 	add	r3,r6,r2
   2d210:	4821883a 	mov	r16,r9
   2d214:	003ed906 	br	2cd7c <__alt_data_end+0xf802cd7c>
   2d218:	2984b03a 	or	r2,r5,r6
   2d21c:	10004226 	beq	r2,zero,2d328 <__subdf3+0x82c>
   2d220:	1808d0fa 	srli	r4,r3,3
   2d224:	8822d0fa 	srli	r17,r17,3
   2d228:	1806977a 	slli	r3,r3,29
   2d22c:	2080022c 	andhi	r2,r4,8
   2d230:	1c62b03a 	or	r17,r3,r17
   2d234:	10000826 	beq	r2,zero,2d258 <__subdf3+0x75c>
   2d238:	2812d0fa 	srli	r9,r5,3
   2d23c:	4880022c 	andhi	r2,r9,8
   2d240:	1000051e 	bne	r2,zero,2d258 <__subdf3+0x75c>
   2d244:	300cd0fa 	srli	r6,r6,3
   2d248:	2804977a 	slli	r2,r5,29
   2d24c:	4809883a 	mov	r4,r9
   2d250:	3825883a 	mov	r18,r7
   2d254:	11a2b03a 	or	r17,r2,r6
   2d258:	8806d77a 	srli	r3,r17,29
   2d25c:	200890fa 	slli	r4,r4,3
   2d260:	882290fa 	slli	r17,r17,3
   2d264:	0401ffc4 	movi	r16,2047
   2d268:	1906b03a 	or	r3,r3,r4
   2d26c:	003e4406 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d270:	2984b03a 	or	r2,r5,r6
   2d274:	103e4226 	beq	r2,zero,2cb80 <__alt_data_end+0xf802cb80>
   2d278:	8989c83a 	sub	r4,r17,r6
   2d27c:	8911803a 	cmpltu	r8,r17,r4
   2d280:	1945c83a 	sub	r2,r3,r5
   2d284:	1205c83a 	sub	r2,r2,r8
   2d288:	1200202c 	andhi	r8,r2,128
   2d28c:	403e9a26 	beq	r8,zero,2ccf8 <__alt_data_end+0xf802ccf8>
   2d290:	3463c83a 	sub	r17,r6,r17
   2d294:	28c5c83a 	sub	r2,r5,r3
   2d298:	344d803a 	cmpltu	r6,r6,r17
   2d29c:	1187c83a 	sub	r3,r2,r6
   2d2a0:	3825883a 	mov	r18,r7
   2d2a4:	003e3606 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d2a8:	0101ffc4 	movi	r4,2047
   2d2ac:	493fc71e 	bne	r9,r4,2d1cc <__alt_data_end+0xf802d1cc>
   2d2b0:	2807883a 	mov	r3,r5
   2d2b4:	3023883a 	mov	r17,r6
   2d2b8:	4821883a 	mov	r16,r9
   2d2bc:	003e3006 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d2c0:	10003626 	beq	r2,zero,2d39c <__subdf3+0x8a0>
   2d2c4:	2984b03a 	or	r2,r5,r6
   2d2c8:	10001726 	beq	r2,zero,2d328 <__subdf3+0x82c>
   2d2cc:	1808d0fa 	srli	r4,r3,3
   2d2d0:	8822d0fa 	srli	r17,r17,3
   2d2d4:	1806977a 	slli	r3,r3,29
   2d2d8:	2080022c 	andhi	r2,r4,8
   2d2dc:	1c62b03a 	or	r17,r3,r17
   2d2e0:	10000726 	beq	r2,zero,2d300 <__subdf3+0x804>
   2d2e4:	2812d0fa 	srli	r9,r5,3
   2d2e8:	4880022c 	andhi	r2,r9,8
   2d2ec:	1000041e 	bne	r2,zero,2d300 <__subdf3+0x804>
   2d2f0:	300cd0fa 	srli	r6,r6,3
   2d2f4:	2804977a 	slli	r2,r5,29
   2d2f8:	4809883a 	mov	r4,r9
   2d2fc:	11a2b03a 	or	r17,r2,r6
   2d300:	8806d77a 	srli	r3,r17,29
   2d304:	200890fa 	slli	r4,r4,3
   2d308:	882290fa 	slli	r17,r17,3
   2d30c:	3825883a 	mov	r18,r7
   2d310:	1906b03a 	or	r3,r3,r4
   2d314:	0401ffc4 	movi	r16,2047
   2d318:	003e1906 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d31c:	000b883a 	mov	r5,zero
   2d320:	0005883a 	mov	r2,zero
   2d324:	003e2e06 	br	2cbe0 <__alt_data_end+0xf802cbe0>
   2d328:	0401ffc4 	movi	r16,2047
   2d32c:	003e1406 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d330:	0005883a 	mov	r2,zero
   2d334:	003f7506 	br	2d10c <__alt_data_end+0xf802d10c>
   2d338:	0005883a 	mov	r2,zero
   2d33c:	0009883a 	mov	r4,zero
   2d340:	003e7806 	br	2cd24 <__alt_data_end+0xf802cd24>
   2d344:	123ff804 	addi	r8,r2,-32
   2d348:	01000804 	movi	r4,32
   2d34c:	1a10d83a 	srl	r8,r3,r8
   2d350:	11002526 	beq	r2,r4,2d3e8 <__subdf3+0x8ec>
   2d354:	01001004 	movi	r4,64
   2d358:	2085c83a 	sub	r2,r4,r2
   2d35c:	1884983a 	sll	r2,r3,r2
   2d360:	1444b03a 	or	r2,r2,r17
   2d364:	1004c03a 	cmpne	r2,r2,zero
   2d368:	40a2b03a 	or	r17,r8,r2
   2d36c:	0005883a 	mov	r2,zero
   2d370:	003f1606 	br	2cfcc <__alt_data_end+0xf802cfcc>
   2d374:	02000434 	movhi	r8,16
   2d378:	0009883a 	mov	r4,zero
   2d37c:	423fffc4 	addi	r8,r8,-1
   2d380:	00bfffc4 	movi	r2,-1
   2d384:	0401ffc4 	movi	r16,2047
   2d388:	003e6606 	br	2cd24 <__alt_data_end+0xf802cd24>
   2d38c:	1c62b03a 	or	r17,r3,r17
   2d390:	8822c03a 	cmpne	r17,r17,zero
   2d394:	0005883a 	mov	r2,zero
   2d398:	003f9906 	br	2d200 <__alt_data_end+0xf802d200>
   2d39c:	2807883a 	mov	r3,r5
   2d3a0:	3023883a 	mov	r17,r6
   2d3a4:	0401ffc4 	movi	r16,2047
   2d3a8:	003df506 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d3ac:	2807883a 	mov	r3,r5
   2d3b0:	3023883a 	mov	r17,r6
   2d3b4:	003df206 	br	2cb80 <__alt_data_end+0xf802cb80>
   2d3b8:	123ff804 	addi	r8,r2,-32
   2d3bc:	01000804 	movi	r4,32
   2d3c0:	1a10d83a 	srl	r8,r3,r8
   2d3c4:	11000a26 	beq	r2,r4,2d3f0 <__subdf3+0x8f4>
   2d3c8:	01001004 	movi	r4,64
   2d3cc:	2085c83a 	sub	r2,r4,r2
   2d3d0:	1884983a 	sll	r2,r3,r2
   2d3d4:	1444b03a 	or	r2,r2,r17
   2d3d8:	1004c03a 	cmpne	r2,r2,zero
   2d3dc:	40a2b03a 	or	r17,r8,r2
   2d3e0:	0005883a 	mov	r2,zero
   2d3e4:	003f8606 	br	2d200 <__alt_data_end+0xf802d200>
   2d3e8:	0005883a 	mov	r2,zero
   2d3ec:	003fdc06 	br	2d360 <__alt_data_end+0xf802d360>
   2d3f0:	0005883a 	mov	r2,zero
   2d3f4:	003ff706 	br	2d3d4 <__alt_data_end+0xf802d3d4>

0002d3f8 <__fixdfsi>:
   2d3f8:	280cd53a 	srli	r6,r5,20
   2d3fc:	00c00434 	movhi	r3,16
   2d400:	18ffffc4 	addi	r3,r3,-1
   2d404:	3181ffcc 	andi	r6,r6,2047
   2d408:	01c0ff84 	movi	r7,1022
   2d40c:	28c6703a 	and	r3,r5,r3
   2d410:	280ad7fa 	srli	r5,r5,31
   2d414:	3980120e 	bge	r7,r6,2d460 <__fixdfsi+0x68>
   2d418:	00810744 	movi	r2,1053
   2d41c:	11800c16 	blt	r2,r6,2d450 <__fixdfsi+0x58>
   2d420:	00810cc4 	movi	r2,1075
   2d424:	1185c83a 	sub	r2,r2,r6
   2d428:	01c007c4 	movi	r7,31
   2d42c:	18c00434 	orhi	r3,r3,16
   2d430:	38800d16 	blt	r7,r2,2d468 <__fixdfsi+0x70>
   2d434:	31befb44 	addi	r6,r6,-1043
   2d438:	2084d83a 	srl	r2,r4,r2
   2d43c:	1986983a 	sll	r3,r3,r6
   2d440:	1884b03a 	or	r2,r3,r2
   2d444:	28000726 	beq	r5,zero,2d464 <__fixdfsi+0x6c>
   2d448:	0085c83a 	sub	r2,zero,r2
   2d44c:	f800283a 	ret
   2d450:	00a00034 	movhi	r2,32768
   2d454:	10bfffc4 	addi	r2,r2,-1
   2d458:	2885883a 	add	r2,r5,r2
   2d45c:	f800283a 	ret
   2d460:	0005883a 	mov	r2,zero
   2d464:	f800283a 	ret
   2d468:	008104c4 	movi	r2,1043
   2d46c:	1185c83a 	sub	r2,r2,r6
   2d470:	1884d83a 	srl	r2,r3,r2
   2d474:	003ff306 	br	2d444 <__alt_data_end+0xf802d444>

0002d478 <__floatsidf>:
   2d478:	defffd04 	addi	sp,sp,-12
   2d47c:	dfc00215 	stw	ra,8(sp)
   2d480:	dc400115 	stw	r17,4(sp)
   2d484:	dc000015 	stw	r16,0(sp)
   2d488:	20002b26 	beq	r4,zero,2d538 <__floatsidf+0xc0>
   2d48c:	2023883a 	mov	r17,r4
   2d490:	2020d7fa 	srli	r16,r4,31
   2d494:	20002d16 	blt	r4,zero,2d54c <__floatsidf+0xd4>
   2d498:	8809883a 	mov	r4,r17
   2d49c:	002d5fc0 	call	2d5fc <__clzsi2>
   2d4a0:	01410784 	movi	r5,1054
   2d4a4:	288bc83a 	sub	r5,r5,r2
   2d4a8:	01010cc4 	movi	r4,1075
   2d4ac:	2149c83a 	sub	r4,r4,r5
   2d4b0:	00c007c4 	movi	r3,31
   2d4b4:	1900160e 	bge	r3,r4,2d510 <__floatsidf+0x98>
   2d4b8:	00c104c4 	movi	r3,1043
   2d4bc:	1947c83a 	sub	r3,r3,r5
   2d4c0:	88c6983a 	sll	r3,r17,r3
   2d4c4:	00800434 	movhi	r2,16
   2d4c8:	10bfffc4 	addi	r2,r2,-1
   2d4cc:	1886703a 	and	r3,r3,r2
   2d4d0:	2941ffcc 	andi	r5,r5,2047
   2d4d4:	800d883a 	mov	r6,r16
   2d4d8:	0005883a 	mov	r2,zero
   2d4dc:	280a953a 	slli	r5,r5,20
   2d4e0:	31803fcc 	andi	r6,r6,255
   2d4e4:	01000434 	movhi	r4,16
   2d4e8:	300c97fa 	slli	r6,r6,31
   2d4ec:	213fffc4 	addi	r4,r4,-1
   2d4f0:	1906703a 	and	r3,r3,r4
   2d4f4:	1946b03a 	or	r3,r3,r5
   2d4f8:	1986b03a 	or	r3,r3,r6
   2d4fc:	dfc00217 	ldw	ra,8(sp)
   2d500:	dc400117 	ldw	r17,4(sp)
   2d504:	dc000017 	ldw	r16,0(sp)
   2d508:	dec00304 	addi	sp,sp,12
   2d50c:	f800283a 	ret
   2d510:	00c002c4 	movi	r3,11
   2d514:	1887c83a 	sub	r3,r3,r2
   2d518:	88c6d83a 	srl	r3,r17,r3
   2d51c:	8904983a 	sll	r2,r17,r4
   2d520:	01000434 	movhi	r4,16
   2d524:	213fffc4 	addi	r4,r4,-1
   2d528:	2941ffcc 	andi	r5,r5,2047
   2d52c:	1906703a 	and	r3,r3,r4
   2d530:	800d883a 	mov	r6,r16
   2d534:	003fe906 	br	2d4dc <__alt_data_end+0xf802d4dc>
   2d538:	000d883a 	mov	r6,zero
   2d53c:	000b883a 	mov	r5,zero
   2d540:	0007883a 	mov	r3,zero
   2d544:	0005883a 	mov	r2,zero
   2d548:	003fe406 	br	2d4dc <__alt_data_end+0xf802d4dc>
   2d54c:	0123c83a 	sub	r17,zero,r4
   2d550:	003fd106 	br	2d498 <__alt_data_end+0xf802d498>

0002d554 <__floatunsidf>:
   2d554:	defffe04 	addi	sp,sp,-8
   2d558:	dc000015 	stw	r16,0(sp)
   2d55c:	dfc00115 	stw	ra,4(sp)
   2d560:	2021883a 	mov	r16,r4
   2d564:	20002226 	beq	r4,zero,2d5f0 <__floatunsidf+0x9c>
   2d568:	002d5fc0 	call	2d5fc <__clzsi2>
   2d56c:	01010784 	movi	r4,1054
   2d570:	2089c83a 	sub	r4,r4,r2
   2d574:	01810cc4 	movi	r6,1075
   2d578:	310dc83a 	sub	r6,r6,r4
   2d57c:	00c007c4 	movi	r3,31
   2d580:	1980120e 	bge	r3,r6,2d5cc <__floatunsidf+0x78>
   2d584:	00c104c4 	movi	r3,1043
   2d588:	1907c83a 	sub	r3,r3,r4
   2d58c:	80ca983a 	sll	r5,r16,r3
   2d590:	00800434 	movhi	r2,16
   2d594:	10bfffc4 	addi	r2,r2,-1
   2d598:	2101ffcc 	andi	r4,r4,2047
   2d59c:	0021883a 	mov	r16,zero
   2d5a0:	288a703a 	and	r5,r5,r2
   2d5a4:	2008953a 	slli	r4,r4,20
   2d5a8:	00c00434 	movhi	r3,16
   2d5ac:	18ffffc4 	addi	r3,r3,-1
   2d5b0:	28c6703a 	and	r3,r5,r3
   2d5b4:	8005883a 	mov	r2,r16
   2d5b8:	1906b03a 	or	r3,r3,r4
   2d5bc:	dfc00117 	ldw	ra,4(sp)
   2d5c0:	dc000017 	ldw	r16,0(sp)
   2d5c4:	dec00204 	addi	sp,sp,8
   2d5c8:	f800283a 	ret
   2d5cc:	00c002c4 	movi	r3,11
   2d5d0:	188bc83a 	sub	r5,r3,r2
   2d5d4:	814ad83a 	srl	r5,r16,r5
   2d5d8:	00c00434 	movhi	r3,16
   2d5dc:	18ffffc4 	addi	r3,r3,-1
   2d5e0:	81a0983a 	sll	r16,r16,r6
   2d5e4:	2101ffcc 	andi	r4,r4,2047
   2d5e8:	28ca703a 	and	r5,r5,r3
   2d5ec:	003fed06 	br	2d5a4 <__alt_data_end+0xf802d5a4>
   2d5f0:	0009883a 	mov	r4,zero
   2d5f4:	000b883a 	mov	r5,zero
   2d5f8:	003fea06 	br	2d5a4 <__alt_data_end+0xf802d5a4>

0002d5fc <__clzsi2>:
   2d5fc:	00bfffd4 	movui	r2,65535
   2d600:	11000536 	bltu	r2,r4,2d618 <__clzsi2+0x1c>
   2d604:	00803fc4 	movi	r2,255
   2d608:	11000f36 	bltu	r2,r4,2d648 <__clzsi2+0x4c>
   2d60c:	00800804 	movi	r2,32
   2d610:	0007883a 	mov	r3,zero
   2d614:	00000506 	br	2d62c <__clzsi2+0x30>
   2d618:	00804034 	movhi	r2,256
   2d61c:	10bfffc4 	addi	r2,r2,-1
   2d620:	11000c2e 	bgeu	r2,r4,2d654 <__clzsi2+0x58>
   2d624:	00800204 	movi	r2,8
   2d628:	00c00604 	movi	r3,24
   2d62c:	20c8d83a 	srl	r4,r4,r3
   2d630:	00c10034 	movhi	r3,1024
   2d634:	18c08e04 	addi	r3,r3,568
   2d638:	1909883a 	add	r4,r3,r4
   2d63c:	20c00003 	ldbu	r3,0(r4)
   2d640:	10c5c83a 	sub	r2,r2,r3
   2d644:	f800283a 	ret
   2d648:	00800604 	movi	r2,24
   2d64c:	00c00204 	movi	r3,8
   2d650:	003ff606 	br	2d62c <__alt_data_end+0xf802d62c>
   2d654:	00800404 	movi	r2,16
   2d658:	1007883a 	mov	r3,r2
   2d65c:	003ff306 	br	2d62c <__alt_data_end+0xf802d62c>

0002d660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d660:	defffe04 	addi	sp,sp,-8
   2d664:	dfc00115 	stw	ra,4(sp)
   2d668:	df000015 	stw	fp,0(sp)
   2d66c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d670:	d0a00b17 	ldw	r2,-32724(gp)
   2d674:	10000326 	beq	r2,zero,2d684 <alt_get_errno+0x24>
   2d678:	d0a00b17 	ldw	r2,-32724(gp)
   2d67c:	103ee83a 	callr	r2
   2d680:	00000106 	br	2d688 <alt_get_errno+0x28>
   2d684:	d0a01204 	addi	r2,gp,-32696
}
   2d688:	e037883a 	mov	sp,fp
   2d68c:	dfc00117 	ldw	ra,4(sp)
   2d690:	df000017 	ldw	fp,0(sp)
   2d694:	dec00204 	addi	sp,sp,8
   2d698:	f800283a 	ret

0002d69c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d69c:	defffb04 	addi	sp,sp,-20
   2d6a0:	dfc00415 	stw	ra,16(sp)
   2d6a4:	df000315 	stw	fp,12(sp)
   2d6a8:	df000304 	addi	fp,sp,12
   2d6ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d6b0:	e0bfff17 	ldw	r2,-4(fp)
   2d6b4:	10000616 	blt	r2,zero,2d6d0 <close+0x34>
   2d6b8:	e0bfff17 	ldw	r2,-4(fp)
   2d6bc:	10c00324 	muli	r3,r2,12
   2d6c0:	00810034 	movhi	r2,1024
   2d6c4:	10831a04 	addi	r2,r2,3176
   2d6c8:	1885883a 	add	r2,r3,r2
   2d6cc:	00000106 	br	2d6d4 <close+0x38>
   2d6d0:	0005883a 	mov	r2,zero
   2d6d4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d6d8:	e0bffd17 	ldw	r2,-12(fp)
   2d6dc:	10001926 	beq	r2,zero,2d744 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d6e0:	e0bffd17 	ldw	r2,-12(fp)
   2d6e4:	10800017 	ldw	r2,0(r2)
   2d6e8:	10800417 	ldw	r2,16(r2)
   2d6ec:	10000626 	beq	r2,zero,2d708 <close+0x6c>
   2d6f0:	e0bffd17 	ldw	r2,-12(fp)
   2d6f4:	10800017 	ldw	r2,0(r2)
   2d6f8:	10800417 	ldw	r2,16(r2)
   2d6fc:	e13ffd17 	ldw	r4,-12(fp)
   2d700:	103ee83a 	callr	r2
   2d704:	00000106 	br	2d70c <close+0x70>
   2d708:	0005883a 	mov	r2,zero
   2d70c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d710:	e13fff17 	ldw	r4,-4(fp)
   2d714:	002dfb00 	call	2dfb0 <alt_release_fd>
    if (rval < 0)
   2d718:	e0bffe17 	ldw	r2,-8(fp)
   2d71c:	1000070e 	bge	r2,zero,2d73c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2d720:	002d6600 	call	2d660 <alt_get_errno>
   2d724:	1007883a 	mov	r3,r2
   2d728:	e0bffe17 	ldw	r2,-8(fp)
   2d72c:	0085c83a 	sub	r2,zero,r2
   2d730:	18800015 	stw	r2,0(r3)
      return -1;
   2d734:	00bfffc4 	movi	r2,-1
   2d738:	00000706 	br	2d758 <close+0xbc>
    }
    return 0;
   2d73c:	0005883a 	mov	r2,zero
   2d740:	00000506 	br	2d758 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d744:	002d6600 	call	2d660 <alt_get_errno>
   2d748:	1007883a 	mov	r3,r2
   2d74c:	00801444 	movi	r2,81
   2d750:	18800015 	stw	r2,0(r3)
    return -1;
   2d754:	00bfffc4 	movi	r2,-1
  }
}
   2d758:	e037883a 	mov	sp,fp
   2d75c:	dfc00117 	ldw	ra,4(sp)
   2d760:	df000017 	ldw	fp,0(sp)
   2d764:	dec00204 	addi	sp,sp,8
   2d768:	f800283a 	ret

0002d76c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d76c:	defffc04 	addi	sp,sp,-16
   2d770:	df000315 	stw	fp,12(sp)
   2d774:	df000304 	addi	fp,sp,12
   2d778:	e13ffd15 	stw	r4,-12(fp)
   2d77c:	e17ffe15 	stw	r5,-8(fp)
   2d780:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d784:	e0bfff17 	ldw	r2,-4(fp)
}
   2d788:	e037883a 	mov	sp,fp
   2d78c:	df000017 	ldw	fp,0(sp)
   2d790:	dec00104 	addi	sp,sp,4
   2d794:	f800283a 	ret

0002d798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d798:	defffe04 	addi	sp,sp,-8
   2d79c:	dfc00115 	stw	ra,4(sp)
   2d7a0:	df000015 	stw	fp,0(sp)
   2d7a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d7a8:	d0a00b17 	ldw	r2,-32724(gp)
   2d7ac:	10000326 	beq	r2,zero,2d7bc <alt_get_errno+0x24>
   2d7b0:	d0a00b17 	ldw	r2,-32724(gp)
   2d7b4:	103ee83a 	callr	r2
   2d7b8:	00000106 	br	2d7c0 <alt_get_errno+0x28>
   2d7bc:	d0a01204 	addi	r2,gp,-32696
}
   2d7c0:	e037883a 	mov	sp,fp
   2d7c4:	dfc00117 	ldw	ra,4(sp)
   2d7c8:	df000017 	ldw	fp,0(sp)
   2d7cc:	dec00204 	addi	sp,sp,8
   2d7d0:	f800283a 	ret

0002d7d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d7d4:	defffb04 	addi	sp,sp,-20
   2d7d8:	dfc00415 	stw	ra,16(sp)
   2d7dc:	df000315 	stw	fp,12(sp)
   2d7e0:	df000304 	addi	fp,sp,12
   2d7e4:	e13ffe15 	stw	r4,-8(fp)
   2d7e8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d7ec:	e0bffe17 	ldw	r2,-8(fp)
   2d7f0:	10000616 	blt	r2,zero,2d80c <fstat+0x38>
   2d7f4:	e0bffe17 	ldw	r2,-8(fp)
   2d7f8:	10c00324 	muli	r3,r2,12
   2d7fc:	00810034 	movhi	r2,1024
   2d800:	10831a04 	addi	r2,r2,3176
   2d804:	1885883a 	add	r2,r3,r2
   2d808:	00000106 	br	2d810 <fstat+0x3c>
   2d80c:	0005883a 	mov	r2,zero
   2d810:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d814:	e0bffd17 	ldw	r2,-12(fp)
   2d818:	10001026 	beq	r2,zero,2d85c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d81c:	e0bffd17 	ldw	r2,-12(fp)
   2d820:	10800017 	ldw	r2,0(r2)
   2d824:	10800817 	ldw	r2,32(r2)
   2d828:	10000726 	beq	r2,zero,2d848 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2d82c:	e0bffd17 	ldw	r2,-12(fp)
   2d830:	10800017 	ldw	r2,0(r2)
   2d834:	10800817 	ldw	r2,32(r2)
   2d838:	e17fff17 	ldw	r5,-4(fp)
   2d83c:	e13ffd17 	ldw	r4,-12(fp)
   2d840:	103ee83a 	callr	r2
   2d844:	00000a06 	br	2d870 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d848:	e0bfff17 	ldw	r2,-4(fp)
   2d84c:	00c80004 	movi	r3,8192
   2d850:	10c00115 	stw	r3,4(r2)
      return 0;
   2d854:	0005883a 	mov	r2,zero
   2d858:	00000506 	br	2d870 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d85c:	002d7980 	call	2d798 <alt_get_errno>
   2d860:	1007883a 	mov	r3,r2
   2d864:	00801444 	movi	r2,81
   2d868:	18800015 	stw	r2,0(r3)
    return -1;
   2d86c:	00bfffc4 	movi	r2,-1
  }
}
   2d870:	e037883a 	mov	sp,fp
   2d874:	dfc00117 	ldw	ra,4(sp)
   2d878:	df000017 	ldw	fp,0(sp)
   2d87c:	dec00204 	addi	sp,sp,8
   2d880:	f800283a 	ret

0002d884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d884:	defffe04 	addi	sp,sp,-8
   2d888:	dfc00115 	stw	ra,4(sp)
   2d88c:	df000015 	stw	fp,0(sp)
   2d890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d894:	d0a00b17 	ldw	r2,-32724(gp)
   2d898:	10000326 	beq	r2,zero,2d8a8 <alt_get_errno+0x24>
   2d89c:	d0a00b17 	ldw	r2,-32724(gp)
   2d8a0:	103ee83a 	callr	r2
   2d8a4:	00000106 	br	2d8ac <alt_get_errno+0x28>
   2d8a8:	d0a01204 	addi	r2,gp,-32696
}
   2d8ac:	e037883a 	mov	sp,fp
   2d8b0:	dfc00117 	ldw	ra,4(sp)
   2d8b4:	df000017 	ldw	fp,0(sp)
   2d8b8:	dec00204 	addi	sp,sp,8
   2d8bc:	f800283a 	ret

0002d8c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d8c0:	deffed04 	addi	sp,sp,-76
   2d8c4:	dfc01215 	stw	ra,72(sp)
   2d8c8:	df001115 	stw	fp,68(sp)
   2d8cc:	df001104 	addi	fp,sp,68
   2d8d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d8d4:	e0bfff17 	ldw	r2,-4(fp)
   2d8d8:	10000616 	blt	r2,zero,2d8f4 <isatty+0x34>
   2d8dc:	e0bfff17 	ldw	r2,-4(fp)
   2d8e0:	10c00324 	muli	r3,r2,12
   2d8e4:	00810034 	movhi	r2,1024
   2d8e8:	10831a04 	addi	r2,r2,3176
   2d8ec:	1885883a 	add	r2,r3,r2
   2d8f0:	00000106 	br	2d8f8 <isatty+0x38>
   2d8f4:	0005883a 	mov	r2,zero
   2d8f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d8fc:	e0bfef17 	ldw	r2,-68(fp)
   2d900:	10000e26 	beq	r2,zero,2d93c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d904:	e0bfef17 	ldw	r2,-68(fp)
   2d908:	10800017 	ldw	r2,0(r2)
   2d90c:	10800817 	ldw	r2,32(r2)
   2d910:	1000021e 	bne	r2,zero,2d91c <isatty+0x5c>
    {
      return 1;
   2d914:	00800044 	movi	r2,1
   2d918:	00000d06 	br	2d950 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d91c:	e0bff004 	addi	r2,fp,-64
   2d920:	100b883a 	mov	r5,r2
   2d924:	e13fff17 	ldw	r4,-4(fp)
   2d928:	002d7d40 	call	2d7d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d92c:	e0bff117 	ldw	r2,-60(fp)
   2d930:	10880020 	cmpeqi	r2,r2,8192
   2d934:	10803fcc 	andi	r2,r2,255
   2d938:	00000506 	br	2d950 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d93c:	002d8840 	call	2d884 <alt_get_errno>
   2d940:	1007883a 	mov	r3,r2
   2d944:	00801444 	movi	r2,81
   2d948:	18800015 	stw	r2,0(r3)
    return 0;
   2d94c:	0005883a 	mov	r2,zero
  }
}
   2d950:	e037883a 	mov	sp,fp
   2d954:	dfc00117 	ldw	ra,4(sp)
   2d958:	df000017 	ldw	fp,0(sp)
   2d95c:	dec00204 	addi	sp,sp,8
   2d960:	f800283a 	ret

0002d964 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d964:	defffc04 	addi	sp,sp,-16
   2d968:	df000315 	stw	fp,12(sp)
   2d96c:	df000304 	addi	fp,sp,12
   2d970:	e13ffd15 	stw	r4,-12(fp)
   2d974:	e17ffe15 	stw	r5,-8(fp)
   2d978:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d97c:	e0fffe17 	ldw	r3,-8(fp)
   2d980:	e0bffd17 	ldw	r2,-12(fp)
   2d984:	18800c26 	beq	r3,r2,2d9b8 <alt_load_section+0x54>
  {
    while( to != end )
   2d988:	00000806 	br	2d9ac <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d98c:	e0bffe17 	ldw	r2,-8(fp)
   2d990:	10c00104 	addi	r3,r2,4
   2d994:	e0fffe15 	stw	r3,-8(fp)
   2d998:	e0fffd17 	ldw	r3,-12(fp)
   2d99c:	19000104 	addi	r4,r3,4
   2d9a0:	e13ffd15 	stw	r4,-12(fp)
   2d9a4:	18c00017 	ldw	r3,0(r3)
   2d9a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d9ac:	e0fffe17 	ldw	r3,-8(fp)
   2d9b0:	e0bfff17 	ldw	r2,-4(fp)
   2d9b4:	18bff51e 	bne	r3,r2,2d98c <__alt_data_end+0xf802d98c>
    {
      *to++ = *from++;
    }
  }
}
   2d9b8:	0001883a 	nop
   2d9bc:	e037883a 	mov	sp,fp
   2d9c0:	df000017 	ldw	fp,0(sp)
   2d9c4:	dec00104 	addi	sp,sp,4
   2d9c8:	f800283a 	ret

0002d9cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d9cc:	defffe04 	addi	sp,sp,-8
   2d9d0:	dfc00115 	stw	ra,4(sp)
   2d9d4:	df000015 	stw	fp,0(sp)
   2d9d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d9dc:	01810034 	movhi	r6,1024
   2d9e0:	3187e304 	addi	r6,r6,8076
   2d9e4:	01410034 	movhi	r5,1024
   2d9e8:	2940e704 	addi	r5,r5,924
   2d9ec:	010000f4 	movhi	r4,3
   2d9f0:	210b0204 	addi	r4,r4,11272
   2d9f4:	002d9640 	call	2d964 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d9f8:	018000b4 	movhi	r6,2
   2d9fc:	31809104 	addi	r6,r6,580
   2da00:	014000b4 	movhi	r5,2
   2da04:	29400804 	addi	r5,r5,32
   2da08:	010000b4 	movhi	r4,2
   2da0c:	21000804 	addi	r4,r4,32
   2da10:	002d9640 	call	2d964 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2da14:	01810034 	movhi	r6,1024
   2da18:	3180e704 	addi	r6,r6,924
   2da1c:	01410034 	movhi	r5,1024
   2da20:	29400004 	addi	r5,r5,0
   2da24:	010000f4 	movhi	r4,3
   2da28:	210a1b04 	addi	r4,r4,10348
   2da2c:	002d9640 	call	2d964 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2da30:	00315dc0 	call	315dc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2da34:	0031a000 	call	31a00 <alt_icache_flush_all>
}
   2da38:	0001883a 	nop
   2da3c:	e037883a 	mov	sp,fp
   2da40:	dfc00117 	ldw	ra,4(sp)
   2da44:	df000017 	ldw	fp,0(sp)
   2da48:	dec00204 	addi	sp,sp,8
   2da4c:	f800283a 	ret

0002da50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da50:	defffe04 	addi	sp,sp,-8
   2da54:	dfc00115 	stw	ra,4(sp)
   2da58:	df000015 	stw	fp,0(sp)
   2da5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2da60:	d0a00b17 	ldw	r2,-32724(gp)
   2da64:	10000326 	beq	r2,zero,2da74 <alt_get_errno+0x24>
   2da68:	d0a00b17 	ldw	r2,-32724(gp)
   2da6c:	103ee83a 	callr	r2
   2da70:	00000106 	br	2da78 <alt_get_errno+0x28>
   2da74:	d0a01204 	addi	r2,gp,-32696
}
   2da78:	e037883a 	mov	sp,fp
   2da7c:	dfc00117 	ldw	ra,4(sp)
   2da80:	df000017 	ldw	fp,0(sp)
   2da84:	dec00204 	addi	sp,sp,8
   2da88:	f800283a 	ret

0002da8c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2da8c:	defff904 	addi	sp,sp,-28
   2da90:	dfc00615 	stw	ra,24(sp)
   2da94:	df000515 	stw	fp,20(sp)
   2da98:	df000504 	addi	fp,sp,20
   2da9c:	e13ffd15 	stw	r4,-12(fp)
   2daa0:	e17ffe15 	stw	r5,-8(fp)
   2daa4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2daa8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2daac:	e0bffd17 	ldw	r2,-12(fp)
   2dab0:	10000616 	blt	r2,zero,2dacc <lseek+0x40>
   2dab4:	e0bffd17 	ldw	r2,-12(fp)
   2dab8:	10c00324 	muli	r3,r2,12
   2dabc:	00810034 	movhi	r2,1024
   2dac0:	10831a04 	addi	r2,r2,3176
   2dac4:	1885883a 	add	r2,r3,r2
   2dac8:	00000106 	br	2dad0 <lseek+0x44>
   2dacc:	0005883a 	mov	r2,zero
   2dad0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2dad4:	e0bffc17 	ldw	r2,-16(fp)
   2dad8:	10001026 	beq	r2,zero,2db1c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2dadc:	e0bffc17 	ldw	r2,-16(fp)
   2dae0:	10800017 	ldw	r2,0(r2)
   2dae4:	10800717 	ldw	r2,28(r2)
   2dae8:	10000926 	beq	r2,zero,2db10 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2daec:	e0bffc17 	ldw	r2,-16(fp)
   2daf0:	10800017 	ldw	r2,0(r2)
   2daf4:	10800717 	ldw	r2,28(r2)
   2daf8:	e1bfff17 	ldw	r6,-4(fp)
   2dafc:	e17ffe17 	ldw	r5,-8(fp)
   2db00:	e13ffc17 	ldw	r4,-16(fp)
   2db04:	103ee83a 	callr	r2
   2db08:	e0bffb15 	stw	r2,-20(fp)
   2db0c:	00000506 	br	2db24 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2db10:	00bfde84 	movi	r2,-134
   2db14:	e0bffb15 	stw	r2,-20(fp)
   2db18:	00000206 	br	2db24 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2db1c:	00bfebc4 	movi	r2,-81
   2db20:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2db24:	e0bffb17 	ldw	r2,-20(fp)
   2db28:	1000070e 	bge	r2,zero,2db48 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2db2c:	002da500 	call	2da50 <alt_get_errno>
   2db30:	1007883a 	mov	r3,r2
   2db34:	e0bffb17 	ldw	r2,-20(fp)
   2db38:	0085c83a 	sub	r2,zero,r2
   2db3c:	18800015 	stw	r2,0(r3)
    rc = -1;
   2db40:	00bfffc4 	movi	r2,-1
   2db44:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2db48:	e0bffb17 	ldw	r2,-20(fp)
}
   2db4c:	e037883a 	mov	sp,fp
   2db50:	dfc00117 	ldw	ra,4(sp)
   2db54:	df000017 	ldw	fp,0(sp)
   2db58:	dec00204 	addi	sp,sp,8
   2db5c:	f800283a 	ret

0002db60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2db60:	defffd04 	addi	sp,sp,-12
   2db64:	dfc00215 	stw	ra,8(sp)
   2db68:	df000115 	stw	fp,4(sp)
   2db6c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2db70:	0009883a 	mov	r4,zero
   2db74:	002e25c0 	call	2e25c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2db78:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2db7c:	002e2940 	call	2e294 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2db80:	01810034 	movhi	r6,1024
   2db84:	3180d104 	addi	r6,r6,836
   2db88:	01410034 	movhi	r5,1024
   2db8c:	2940d104 	addi	r5,r5,836
   2db90:	01010034 	movhi	r4,1024
   2db94:	2100d104 	addi	r4,r4,836
   2db98:	0031d980 	call	31d98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2db9c:	00317040 	call	31704 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2dba0:	010000f4 	movhi	r4,3
   2dba4:	2105d904 	addi	r4,r4,5988
   2dba8:	00323700 	call	32370 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2dbac:	d0a01917 	ldw	r2,-32668(gp)
   2dbb0:	d0e01a17 	ldw	r3,-32664(gp)
   2dbb4:	d1201b17 	ldw	r4,-32660(gp)
   2dbb8:	200d883a 	mov	r6,r4
   2dbbc:	180b883a 	mov	r5,r3
   2dbc0:	1009883a 	mov	r4,r2
   2dbc4:	00202900 	call	20290 <main>
   2dbc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2dbcc:	01000044 	movi	r4,1
   2dbd0:	002d69c0 	call	2d69c <close>
  exit (result);
   2dbd4:	e13fff17 	ldw	r4,-4(fp)
   2dbd8:	00323840 	call	32384 <exit>

0002dbdc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2dbdc:	defffe04 	addi	sp,sp,-8
   2dbe0:	df000115 	stw	fp,4(sp)
   2dbe4:	df000104 	addi	fp,sp,4
   2dbe8:	e13fff15 	stw	r4,-4(fp)
}
   2dbec:	0001883a 	nop
   2dbf0:	e037883a 	mov	sp,fp
   2dbf4:	df000017 	ldw	fp,0(sp)
   2dbf8:	dec00104 	addi	sp,sp,4
   2dbfc:	f800283a 	ret

0002dc00 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2dc00:	defffe04 	addi	sp,sp,-8
   2dc04:	df000115 	stw	fp,4(sp)
   2dc08:	df000104 	addi	fp,sp,4
   2dc0c:	e13fff15 	stw	r4,-4(fp)
}
   2dc10:	0001883a 	nop
   2dc14:	e037883a 	mov	sp,fp
   2dc18:	df000017 	ldw	fp,0(sp)
   2dc1c:	dec00104 	addi	sp,sp,4
   2dc20:	f800283a 	ret

0002dc24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dc24:	defffe04 	addi	sp,sp,-8
   2dc28:	dfc00115 	stw	ra,4(sp)
   2dc2c:	df000015 	stw	fp,0(sp)
   2dc30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dc34:	d0a00b17 	ldw	r2,-32724(gp)
   2dc38:	10000326 	beq	r2,zero,2dc48 <alt_get_errno+0x24>
   2dc3c:	d0a00b17 	ldw	r2,-32724(gp)
   2dc40:	103ee83a 	callr	r2
   2dc44:	00000106 	br	2dc4c <alt_get_errno+0x28>
   2dc48:	d0a01204 	addi	r2,gp,-32696
}
   2dc4c:	e037883a 	mov	sp,fp
   2dc50:	dfc00117 	ldw	ra,4(sp)
   2dc54:	df000017 	ldw	fp,0(sp)
   2dc58:	dec00204 	addi	sp,sp,8
   2dc5c:	f800283a 	ret

0002dc60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2dc60:	defffd04 	addi	sp,sp,-12
   2dc64:	df000215 	stw	fp,8(sp)
   2dc68:	df000204 	addi	fp,sp,8
   2dc6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2dc70:	e0bfff17 	ldw	r2,-4(fp)
   2dc74:	10800217 	ldw	r2,8(r2)
   2dc78:	10d00034 	orhi	r3,r2,16384
   2dc7c:	e0bfff17 	ldw	r2,-4(fp)
   2dc80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2dc84:	e03ffe15 	stw	zero,-8(fp)
   2dc88:	00001d06 	br	2dd00 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2dc8c:	00810034 	movhi	r2,1024
   2dc90:	10831a04 	addi	r2,r2,3176
   2dc94:	e0fffe17 	ldw	r3,-8(fp)
   2dc98:	18c00324 	muli	r3,r3,12
   2dc9c:	10c5883a 	add	r2,r2,r3
   2dca0:	10c00017 	ldw	r3,0(r2)
   2dca4:	e0bfff17 	ldw	r2,-4(fp)
   2dca8:	10800017 	ldw	r2,0(r2)
   2dcac:	1880111e 	bne	r3,r2,2dcf4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2dcb0:	00810034 	movhi	r2,1024
   2dcb4:	10831a04 	addi	r2,r2,3176
   2dcb8:	e0fffe17 	ldw	r3,-8(fp)
   2dcbc:	18c00324 	muli	r3,r3,12
   2dcc0:	10c5883a 	add	r2,r2,r3
   2dcc4:	10800204 	addi	r2,r2,8
   2dcc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2dccc:	1000090e 	bge	r2,zero,2dcf4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2dcd0:	e0bffe17 	ldw	r2,-8(fp)
   2dcd4:	10c00324 	muli	r3,r2,12
   2dcd8:	00810034 	movhi	r2,1024
   2dcdc:	10831a04 	addi	r2,r2,3176
   2dce0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2dce4:	e0bfff17 	ldw	r2,-4(fp)
   2dce8:	18800226 	beq	r3,r2,2dcf4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2dcec:	00bffcc4 	movi	r2,-13
   2dcf0:	00000806 	br	2dd14 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2dcf4:	e0bffe17 	ldw	r2,-8(fp)
   2dcf8:	10800044 	addi	r2,r2,1
   2dcfc:	e0bffe15 	stw	r2,-8(fp)
   2dd00:	d0a00a17 	ldw	r2,-32728(gp)
   2dd04:	1007883a 	mov	r3,r2
   2dd08:	e0bffe17 	ldw	r2,-8(fp)
   2dd0c:	18bfdf2e 	bgeu	r3,r2,2dc8c <__alt_data_end+0xf802dc8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2dd10:	0005883a 	mov	r2,zero
}
   2dd14:	e037883a 	mov	sp,fp
   2dd18:	df000017 	ldw	fp,0(sp)
   2dd1c:	dec00104 	addi	sp,sp,4
   2dd20:	f800283a 	ret

0002dd24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2dd24:	defff604 	addi	sp,sp,-40
   2dd28:	dfc00915 	stw	ra,36(sp)
   2dd2c:	df000815 	stw	fp,32(sp)
   2dd30:	df000804 	addi	fp,sp,32
   2dd34:	e13ffd15 	stw	r4,-12(fp)
   2dd38:	e17ffe15 	stw	r5,-8(fp)
   2dd3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2dd40:	00bfffc4 	movi	r2,-1
   2dd44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2dd48:	00bffb44 	movi	r2,-19
   2dd4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2dd50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2dd54:	d1600804 	addi	r5,gp,-32736
   2dd58:	e13ffd17 	ldw	r4,-12(fp)
   2dd5c:	00317c40 	call	317c4 <alt_find_dev>
   2dd60:	e0bff815 	stw	r2,-32(fp)
   2dd64:	e0bff817 	ldw	r2,-32(fp)
   2dd68:	1000051e 	bne	r2,zero,2dd80 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2dd6c:	e13ffd17 	ldw	r4,-12(fp)
   2dd70:	00318540 	call	31854 <alt_find_file>
   2dd74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2dd78:	00800044 	movi	r2,1
   2dd7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2dd80:	e0bff817 	ldw	r2,-32(fp)
   2dd84:	10002926 	beq	r2,zero,2de2c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2dd88:	e13ff817 	ldw	r4,-32(fp)
   2dd8c:	003195c0 	call	3195c <alt_get_fd>
   2dd90:	e0bff915 	stw	r2,-28(fp)
   2dd94:	e0bff917 	ldw	r2,-28(fp)
   2dd98:	1000030e 	bge	r2,zero,2dda8 <open+0x84>
    {
      status = index;
   2dd9c:	e0bff917 	ldw	r2,-28(fp)
   2dda0:	e0bffa15 	stw	r2,-24(fp)
   2dda4:	00002306 	br	2de34 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   2dda8:	e0bff917 	ldw	r2,-28(fp)
   2ddac:	10c00324 	muli	r3,r2,12
   2ddb0:	00810034 	movhi	r2,1024
   2ddb4:	10831a04 	addi	r2,r2,3176
   2ddb8:	1885883a 	add	r2,r3,r2
   2ddbc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2ddc0:	e0fffe17 	ldw	r3,-8(fp)
   2ddc4:	00900034 	movhi	r2,16384
   2ddc8:	10bfffc4 	addi	r2,r2,-1
   2ddcc:	1886703a 	and	r3,r3,r2
   2ddd0:	e0bffc17 	ldw	r2,-16(fp)
   2ddd4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2ddd8:	e0bffb17 	ldw	r2,-20(fp)
   2dddc:	1000051e 	bne	r2,zero,2ddf4 <open+0xd0>
   2dde0:	e13ffc17 	ldw	r4,-16(fp)
   2dde4:	002dc600 	call	2dc60 <alt_file_locked>
   2dde8:	e0bffa15 	stw	r2,-24(fp)
   2ddec:	e0bffa17 	ldw	r2,-24(fp)
   2ddf0:	10001016 	blt	r2,zero,2de34 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2ddf4:	e0bff817 	ldw	r2,-32(fp)
   2ddf8:	10800317 	ldw	r2,12(r2)
   2ddfc:	10000826 	beq	r2,zero,2de20 <open+0xfc>
   2de00:	e0bff817 	ldw	r2,-32(fp)
   2de04:	10800317 	ldw	r2,12(r2)
   2de08:	e1ffff17 	ldw	r7,-4(fp)
   2de0c:	e1bffe17 	ldw	r6,-8(fp)
   2de10:	e17ffd17 	ldw	r5,-12(fp)
   2de14:	e13ffc17 	ldw	r4,-16(fp)
   2de18:	103ee83a 	callr	r2
   2de1c:	00000106 	br	2de24 <open+0x100>
   2de20:	0005883a 	mov	r2,zero
   2de24:	e0bffa15 	stw	r2,-24(fp)
   2de28:	00000206 	br	2de34 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2de2c:	00bffb44 	movi	r2,-19
   2de30:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2de34:	e0bffa17 	ldw	r2,-24(fp)
   2de38:	1000090e 	bge	r2,zero,2de60 <open+0x13c>
  {
    alt_release_fd (index);  
   2de3c:	e13ff917 	ldw	r4,-28(fp)
   2de40:	002dfb00 	call	2dfb0 <alt_release_fd>
    ALT_ERRNO = -status;
   2de44:	002dc240 	call	2dc24 <alt_get_errno>
   2de48:	1007883a 	mov	r3,r2
   2de4c:	e0bffa17 	ldw	r2,-24(fp)
   2de50:	0085c83a 	sub	r2,zero,r2
   2de54:	18800015 	stw	r2,0(r3)
    return -1;
   2de58:	00bfffc4 	movi	r2,-1
   2de5c:	00000106 	br	2de64 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2de60:	e0bff917 	ldw	r2,-28(fp)
}
   2de64:	e037883a 	mov	sp,fp
   2de68:	dfc00117 	ldw	ra,4(sp)
   2de6c:	df000017 	ldw	fp,0(sp)
   2de70:	dec00204 	addi	sp,sp,8
   2de74:	f800283a 	ret

0002de78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2de78:	defffe04 	addi	sp,sp,-8
   2de7c:	dfc00115 	stw	ra,4(sp)
   2de80:	df000015 	stw	fp,0(sp)
   2de84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2de88:	d0a00b17 	ldw	r2,-32724(gp)
   2de8c:	10000326 	beq	r2,zero,2de9c <alt_get_errno+0x24>
   2de90:	d0a00b17 	ldw	r2,-32724(gp)
   2de94:	103ee83a 	callr	r2
   2de98:	00000106 	br	2dea0 <alt_get_errno+0x28>
   2de9c:	d0a01204 	addi	r2,gp,-32696
}
   2dea0:	e037883a 	mov	sp,fp
   2dea4:	dfc00117 	ldw	ra,4(sp)
   2dea8:	df000017 	ldw	fp,0(sp)
   2deac:	dec00204 	addi	sp,sp,8
   2deb0:	f800283a 	ret

0002deb4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2deb4:	defff904 	addi	sp,sp,-28
   2deb8:	dfc00615 	stw	ra,24(sp)
   2debc:	df000515 	stw	fp,20(sp)
   2dec0:	df000504 	addi	fp,sp,20
   2dec4:	e13ffd15 	stw	r4,-12(fp)
   2dec8:	e17ffe15 	stw	r5,-8(fp)
   2decc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ded0:	e0bffd17 	ldw	r2,-12(fp)
   2ded4:	10000616 	blt	r2,zero,2def0 <read+0x3c>
   2ded8:	e0bffd17 	ldw	r2,-12(fp)
   2dedc:	10c00324 	muli	r3,r2,12
   2dee0:	00810034 	movhi	r2,1024
   2dee4:	10831a04 	addi	r2,r2,3176
   2dee8:	1885883a 	add	r2,r3,r2
   2deec:	00000106 	br	2def4 <read+0x40>
   2def0:	0005883a 	mov	r2,zero
   2def4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2def8:	e0bffb17 	ldw	r2,-20(fp)
   2defc:	10002226 	beq	r2,zero,2df88 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2df00:	e0bffb17 	ldw	r2,-20(fp)
   2df04:	10800217 	ldw	r2,8(r2)
   2df08:	108000cc 	andi	r2,r2,3
   2df0c:	10800060 	cmpeqi	r2,r2,1
   2df10:	1000181e 	bne	r2,zero,2df74 <read+0xc0>
        (fd->dev->read))
   2df14:	e0bffb17 	ldw	r2,-20(fp)
   2df18:	10800017 	ldw	r2,0(r2)
   2df1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2df20:	10001426 	beq	r2,zero,2df74 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2df24:	e0bffb17 	ldw	r2,-20(fp)
   2df28:	10800017 	ldw	r2,0(r2)
   2df2c:	10800517 	ldw	r2,20(r2)
   2df30:	e0ffff17 	ldw	r3,-4(fp)
   2df34:	180d883a 	mov	r6,r3
   2df38:	e17ffe17 	ldw	r5,-8(fp)
   2df3c:	e13ffb17 	ldw	r4,-20(fp)
   2df40:	103ee83a 	callr	r2
   2df44:	e0bffc15 	stw	r2,-16(fp)
   2df48:	e0bffc17 	ldw	r2,-16(fp)
   2df4c:	1000070e 	bge	r2,zero,2df6c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2df50:	002de780 	call	2de78 <alt_get_errno>
   2df54:	1007883a 	mov	r3,r2
   2df58:	e0bffc17 	ldw	r2,-16(fp)
   2df5c:	0085c83a 	sub	r2,zero,r2
   2df60:	18800015 	stw	r2,0(r3)
          return -1;
   2df64:	00bfffc4 	movi	r2,-1
   2df68:	00000c06 	br	2df9c <read+0xe8>
        }
        return rval;
   2df6c:	e0bffc17 	ldw	r2,-16(fp)
   2df70:	00000a06 	br	2df9c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2df74:	002de780 	call	2de78 <alt_get_errno>
   2df78:	1007883a 	mov	r3,r2
   2df7c:	00800344 	movi	r2,13
   2df80:	18800015 	stw	r2,0(r3)
   2df84:	00000406 	br	2df98 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2df88:	002de780 	call	2de78 <alt_get_errno>
   2df8c:	1007883a 	mov	r3,r2
   2df90:	00801444 	movi	r2,81
   2df94:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2df98:	00bfffc4 	movi	r2,-1
}
   2df9c:	e037883a 	mov	sp,fp
   2dfa0:	dfc00117 	ldw	ra,4(sp)
   2dfa4:	df000017 	ldw	fp,0(sp)
   2dfa8:	dec00204 	addi	sp,sp,8
   2dfac:	f800283a 	ret

0002dfb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2dfb0:	defffe04 	addi	sp,sp,-8
   2dfb4:	df000115 	stw	fp,4(sp)
   2dfb8:	df000104 	addi	fp,sp,4
   2dfbc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2dfc0:	e0bfff17 	ldw	r2,-4(fp)
   2dfc4:	108000d0 	cmplti	r2,r2,3
   2dfc8:	10000d1e 	bne	r2,zero,2e000 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2dfcc:	00810034 	movhi	r2,1024
   2dfd0:	10831a04 	addi	r2,r2,3176
   2dfd4:	e0ffff17 	ldw	r3,-4(fp)
   2dfd8:	18c00324 	muli	r3,r3,12
   2dfdc:	10c5883a 	add	r2,r2,r3
   2dfe0:	10800204 	addi	r2,r2,8
   2dfe4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2dfe8:	00810034 	movhi	r2,1024
   2dfec:	10831a04 	addi	r2,r2,3176
   2dff0:	e0ffff17 	ldw	r3,-4(fp)
   2dff4:	18c00324 	muli	r3,r3,12
   2dff8:	10c5883a 	add	r2,r2,r3
   2dffc:	10000015 	stw	zero,0(r2)
  }
}
   2e000:	0001883a 	nop
   2e004:	e037883a 	mov	sp,fp
   2e008:	df000017 	ldw	fp,0(sp)
   2e00c:	dec00104 	addi	sp,sp,4
   2e010:	f800283a 	ret

0002e014 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2e014:	defff904 	addi	sp,sp,-28
   2e018:	df000615 	stw	fp,24(sp)
   2e01c:	df000604 	addi	fp,sp,24
   2e020:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e024:	0005303a 	rdctl	r2,status
   2e028:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e02c:	e0fffe17 	ldw	r3,-8(fp)
   2e030:	00bfff84 	movi	r2,-2
   2e034:	1884703a 	and	r2,r3,r2
   2e038:	1001703a 	wrctl	status,r2
  
  return context;
   2e03c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2e040:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2e044:	d0a00c17 	ldw	r2,-32720(gp)
   2e048:	10c000c4 	addi	r3,r2,3
   2e04c:	00bfff04 	movi	r2,-4
   2e050:	1884703a 	and	r2,r3,r2
   2e054:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2e058:	d0e00c17 	ldw	r3,-32720(gp)
   2e05c:	e0bfff17 	ldw	r2,-4(fp)
   2e060:	1887883a 	add	r3,r3,r2
   2e064:	00820034 	movhi	r2,2048
   2e068:	10800004 	addi	r2,r2,0
   2e06c:	10c0062e 	bgeu	r2,r3,2e088 <sbrk+0x74>
   2e070:	e0bffb17 	ldw	r2,-20(fp)
   2e074:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e078:	e0bffa17 	ldw	r2,-24(fp)
   2e07c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2e080:	00bfffc4 	movi	r2,-1
   2e084:	00000b06 	br	2e0b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2e088:	d0a00c17 	ldw	r2,-32720(gp)
   2e08c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2e090:	d0e00c17 	ldw	r3,-32720(gp)
   2e094:	e0bfff17 	ldw	r2,-4(fp)
   2e098:	1885883a 	add	r2,r3,r2
   2e09c:	d0a00c15 	stw	r2,-32720(gp)
   2e0a0:	e0bffb17 	ldw	r2,-20(fp)
   2e0a4:	e0bffc15 	stw	r2,-16(fp)
   2e0a8:	e0bffc17 	ldw	r2,-16(fp)
   2e0ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e0b0:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e0b4:	e037883a 	mov	sp,fp
   2e0b8:	df000017 	ldw	fp,0(sp)
   2e0bc:	dec00104 	addi	sp,sp,4
   2e0c0:	f800283a 	ret

0002e0c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   2e0c4:	defffd04 	addi	sp,sp,-12
   2e0c8:	dfc00215 	stw	ra,8(sp)
   2e0cc:	df000115 	stw	fp,4(sp)
   2e0d0:	df000104 	addi	fp,sp,4
   2e0d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2e0d8:	e13fff17 	ldw	r4,-4(fp)
   2e0dc:	00314840 	call	31484 <alt_busy_sleep>
}
   2e0e0:	e037883a 	mov	sp,fp
   2e0e4:	dfc00117 	ldw	ra,4(sp)
   2e0e8:	df000017 	ldw	fp,0(sp)
   2e0ec:	dec00204 	addi	sp,sp,8
   2e0f0:	f800283a 	ret

0002e0f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e0f4:	defffe04 	addi	sp,sp,-8
   2e0f8:	dfc00115 	stw	ra,4(sp)
   2e0fc:	df000015 	stw	fp,0(sp)
   2e100:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e104:	d0a00b17 	ldw	r2,-32724(gp)
   2e108:	10000326 	beq	r2,zero,2e118 <alt_get_errno+0x24>
   2e10c:	d0a00b17 	ldw	r2,-32724(gp)
   2e110:	103ee83a 	callr	r2
   2e114:	00000106 	br	2e11c <alt_get_errno+0x28>
   2e118:	d0a01204 	addi	r2,gp,-32696
}
   2e11c:	e037883a 	mov	sp,fp
   2e120:	dfc00117 	ldw	ra,4(sp)
   2e124:	df000017 	ldw	fp,0(sp)
   2e128:	dec00204 	addi	sp,sp,8
   2e12c:	f800283a 	ret

0002e130 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e130:	defff904 	addi	sp,sp,-28
   2e134:	dfc00615 	stw	ra,24(sp)
   2e138:	df000515 	stw	fp,20(sp)
   2e13c:	df000504 	addi	fp,sp,20
   2e140:	e13ffd15 	stw	r4,-12(fp)
   2e144:	e17ffe15 	stw	r5,-8(fp)
   2e148:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e14c:	e0bffd17 	ldw	r2,-12(fp)
   2e150:	10000616 	blt	r2,zero,2e16c <write+0x3c>
   2e154:	e0bffd17 	ldw	r2,-12(fp)
   2e158:	10c00324 	muli	r3,r2,12
   2e15c:	00810034 	movhi	r2,1024
   2e160:	10831a04 	addi	r2,r2,3176
   2e164:	1885883a 	add	r2,r3,r2
   2e168:	00000106 	br	2e170 <write+0x40>
   2e16c:	0005883a 	mov	r2,zero
   2e170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e174:	e0bffb17 	ldw	r2,-20(fp)
   2e178:	10002126 	beq	r2,zero,2e200 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e17c:	e0bffb17 	ldw	r2,-20(fp)
   2e180:	10800217 	ldw	r2,8(r2)
   2e184:	108000cc 	andi	r2,r2,3
   2e188:	10001826 	beq	r2,zero,2e1ec <write+0xbc>
   2e18c:	e0bffb17 	ldw	r2,-20(fp)
   2e190:	10800017 	ldw	r2,0(r2)
   2e194:	10800617 	ldw	r2,24(r2)
   2e198:	10001426 	beq	r2,zero,2e1ec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e19c:	e0bffb17 	ldw	r2,-20(fp)
   2e1a0:	10800017 	ldw	r2,0(r2)
   2e1a4:	10800617 	ldw	r2,24(r2)
   2e1a8:	e0ffff17 	ldw	r3,-4(fp)
   2e1ac:	180d883a 	mov	r6,r3
   2e1b0:	e17ffe17 	ldw	r5,-8(fp)
   2e1b4:	e13ffb17 	ldw	r4,-20(fp)
   2e1b8:	103ee83a 	callr	r2
   2e1bc:	e0bffc15 	stw	r2,-16(fp)
   2e1c0:	e0bffc17 	ldw	r2,-16(fp)
   2e1c4:	1000070e 	bge	r2,zero,2e1e4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2e1c8:	002e0f40 	call	2e0f4 <alt_get_errno>
   2e1cc:	1007883a 	mov	r3,r2
   2e1d0:	e0bffc17 	ldw	r2,-16(fp)
   2e1d4:	0085c83a 	sub	r2,zero,r2
   2e1d8:	18800015 	stw	r2,0(r3)
        return -1;
   2e1dc:	00bfffc4 	movi	r2,-1
   2e1e0:	00000c06 	br	2e214 <write+0xe4>
      }
      return rval;
   2e1e4:	e0bffc17 	ldw	r2,-16(fp)
   2e1e8:	00000a06 	br	2e214 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e1ec:	002e0f40 	call	2e0f4 <alt_get_errno>
   2e1f0:	1007883a 	mov	r3,r2
   2e1f4:	00800344 	movi	r2,13
   2e1f8:	18800015 	stw	r2,0(r3)
   2e1fc:	00000406 	br	2e210 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e200:	002e0f40 	call	2e0f4 <alt_get_errno>
   2e204:	1007883a 	mov	r3,r2
   2e208:	00801444 	movi	r2,81
   2e20c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e210:	00bfffc4 	movi	r2,-1
}
   2e214:	e037883a 	mov	sp,fp
   2e218:	dfc00117 	ldw	ra,4(sp)
   2e21c:	df000017 	ldw	fp,0(sp)
   2e220:	dec00204 	addi	sp,sp,8
   2e224:	f800283a 	ret

0002e228 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e228:	defffd04 	addi	sp,sp,-12
   2e22c:	dfc00215 	stw	ra,8(sp)
   2e230:	df000115 	stw	fp,4(sp)
   2e234:	df000104 	addi	fp,sp,4
   2e238:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e23c:	d1600804 	addi	r5,gp,-32736
   2e240:	e13fff17 	ldw	r4,-4(fp)
   2e244:	00316600 	call	31660 <alt_dev_llist_insert>
}
   2e248:	e037883a 	mov	sp,fp
   2e24c:	dfc00117 	ldw	ra,4(sp)
   2e250:	df000017 	ldw	fp,0(sp)
   2e254:	dec00204 	addi	sp,sp,8
   2e258:	f800283a 	ret

0002e25c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e25c:	defffd04 	addi	sp,sp,-12
   2e260:	dfc00215 	stw	ra,8(sp)
   2e264:	df000115 	stw	fp,4(sp)
   2e268:	df000104 	addi	fp,sp,4
   2e26c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   2e270:	00322200 	call	32220 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e274:	00800044 	movi	r2,1
   2e278:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e27c:	0001883a 	nop
   2e280:	e037883a 	mov	sp,fp
   2e284:	dfc00117 	ldw	ra,4(sp)
   2e288:	df000017 	ldw	fp,0(sp)
   2e28c:	dec00204 	addi	sp,sp,8
   2e290:	f800283a 	ret

0002e294 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e294:	defffe04 	addi	sp,sp,-8
   2e298:	dfc00115 	stw	ra,4(sp)
   2e29c:	df000015 	stw	fp,0(sp)
   2e2a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   2e2a4:	01c0fa04 	movi	r7,1000
   2e2a8:	018000c4 	movi	r6,3
   2e2ac:	000b883a 	mov	r5,zero
   2e2b0:	01000134 	movhi	r4,4
   2e2b4:	21041004 	addi	r4,r4,4160
   2e2b8:	0030a040 	call	30a04 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   2e2bc:	01010034 	movhi	r4,1024
   2e2c0:	21037a04 	addi	r4,r4,3560
   2e2c4:	002e5740 	call	2e574 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   2e2c8:	01800084 	movi	r6,2
   2e2cc:	000b883a 	mov	r5,zero
   2e2d0:	01010034 	movhi	r4,1024
   2e2d4:	21039204 	addi	r4,r4,3656
   2e2d8:	00300880 	call	30088 <altera_avalon_jtag_uart_init>
   2e2dc:	01010034 	movhi	r4,1024
   2e2e0:	21038804 	addi	r4,r4,3616
   2e2e4:	002e2280 	call	2e228 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   2e2e8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   2e2ec:	01800104 	movi	r6,4
   2e2f0:	000b883a 	mov	r5,zero
   2e2f4:	01010034 	movhi	r4,1024
   2e2f8:	2107aa04 	addi	r4,r4,7848
   2e2fc:	0030b900 	call	30b90 <altera_avalon_uart_init>
   2e300:	01010034 	movhi	r4,1024
   2e304:	2107a004 	addi	r4,r4,7808
   2e308:	002e2280 	call	2e228 <alt_dev_reg>
}
   2e30c:	0001883a 	nop
   2e310:	e037883a 	mov	sp,fp
   2e314:	dfc00117 	ldw	ra,4(sp)
   2e318:	df000017 	ldw	fp,0(sp)
   2e31c:	dec00204 	addi	sp,sp,8
   2e320:	f800283a 	ret

0002e324 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   2e324:	defff904 	addi	sp,sp,-28
   2e328:	dfc00615 	stw	ra,24(sp)
   2e32c:	df000515 	stw	fp,20(sp)
   2e330:	df000504 	addi	fp,sp,20
   2e334:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   2e338:	008000b4 	movhi	r2,2
   2e33c:	10a1a804 	addi	r2,r2,-31072
   2e340:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   2e344:	e0bfff17 	ldw	r2,-4(fp)
   2e348:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   2e34c:	e0bffc17 	ldw	r2,-16(fp)
   2e350:	10800717 	ldw	r2,28(r2)
   2e354:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   2e358:	e0bffd17 	ldw	r2,-12(fp)
   2e35c:	10800217 	ldw	r2,8(r2)
   2e360:	10800098 	cmpnei	r2,r2,2
   2e364:	1000251e 	bne	r2,zero,2e3fc <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   2e368:	e0bffd17 	ldw	r2,-12(fp)
   2e36c:	10c00017 	ldw	r3,0(r2)
   2e370:	e0bffd17 	ldw	r2,-12(fp)
   2e374:	10800117 	ldw	r2,4(r2)
   2e378:	e13ffe04 	addi	r4,fp,-8
   2e37c:	200f883a 	mov	r7,r4
   2e380:	100d883a 	mov	r6,r2
   2e384:	180b883a 	mov	r5,r3
   2e388:	e13ffc17 	ldw	r4,-16(fp)
   2e38c:	002ead40 	call	2ead4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   2e390:	e0bffd17 	ldw	r2,-12(fp)
   2e394:	10c00117 	ldw	r3,4(r2)
   2e398:	e0bffe17 	ldw	r2,-8(fp)
   2e39c:	1887c83a 	sub	r3,r3,r2
   2e3a0:	e0bffd17 	ldw	r2,-12(fp)
   2e3a4:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   2e3a8:	e0bffd17 	ldw	r2,-12(fp)
   2e3ac:	10c00017 	ldw	r3,0(r2)
   2e3b0:	e0bffe17 	ldw	r2,-8(fp)
   2e3b4:	1887883a 	add	r3,r3,r2
   2e3b8:	e0bffd17 	ldw	r2,-12(fp)
   2e3bc:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   2e3c0:	e0bffd17 	ldw	r2,-12(fp)
   2e3c4:	10800117 	ldw	r2,4(r2)
   2e3c8:	10000c26 	beq	r2,zero,2e3fc <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e3cc:	01400704 	movi	r5,28
   2e3d0:	e13ffc17 	ldw	r4,-16(fp)
   2e3d4:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2e3d8:	01400084 	movi	r5,2
   2e3dc:	e13ffc17 	ldw	r4,-16(fp)
   2e3e0:	002fd180 	call	2fd18 <alt_avalon_i2c_int_enable>
   2e3e4:	00000e06 	br	2e420 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   2e3e8:	e0bffb17 	ldw	r2,-20(fp)
   2e3ec:	10bfffc4 	addi	r2,r2,-1
   2e3f0:	e0bffb15 	stw	r2,-20(fp)
   2e3f4:	e0bffb17 	ldw	r2,-20(fp)
   2e3f8:	10000426 	beq	r2,zero,2e40c <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   2e3fc:	e13ffc17 	ldw	r4,-16(fp)
   2e400:	002ea900 	call	2ea90 <alt_avalon_i2c_is_busy>
   2e404:	103ff81e 	bne	r2,zero,2e3e8 <__alt_data_end+0xf802e3e8>
   2e408:	00000106 	br	2e410 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   2e40c:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   2e410:	e13ffc17 	ldw	r4,-16(fp)
   2e414:	002e7380 	call	2e738 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   2e418:	e0bffd17 	ldw	r2,-12(fp)
   2e41c:	10000215 	stw	zero,8(r2)
}
   2e420:	e037883a 	mov	sp,fp
   2e424:	dfc00117 	ldw	ra,4(sp)
   2e428:	df000017 	ldw	fp,0(sp)
   2e42c:	dec00204 	addi	sp,sp,8
   2e430:	f800283a 	ret

0002e434 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   2e434:	defffc04 	addi	sp,sp,-16
   2e438:	dfc00315 	stw	ra,12(sp)
   2e43c:	df000215 	stw	fp,8(sp)
   2e440:	df000204 	addi	fp,sp,8
   2e444:	e13ffe15 	stw	r4,-8(fp)
   2e448:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   2e44c:	e0bfff17 	ldw	r2,-4(fp)
   2e450:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   2e454:	e1ffff17 	ldw	r7,-4(fp)
   2e458:	000d883a 	mov	r6,zero
   2e45c:	014000f4 	movhi	r5,3
   2e460:	2978c904 	addi	r5,r5,-7388
   2e464:	e13ffe17 	ldw	r4,-8(fp)
   2e468:	002e5200 	call	2e520 <alt_avalon_i2c_register_callback>
}
   2e46c:	0001883a 	nop
   2e470:	e037883a 	mov	sp,fp
   2e474:	dfc00117 	ldw	ra,4(sp)
   2e478:	df000017 	ldw	fp,0(sp)
   2e47c:	dec00204 	addi	sp,sp,8
   2e480:	f800283a 	ret

0002e484 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   2e484:	defff904 	addi	sp,sp,-28
   2e488:	dfc00615 	stw	ra,24(sp)
   2e48c:	df000515 	stw	fp,20(sp)
   2e490:	df000504 	addi	fp,sp,20
   2e494:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   2e498:	e0bfff17 	ldw	r2,-4(fp)
   2e49c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2e4a0:	014007c4 	movi	r5,31
   2e4a4:	e13ffb17 	ldw	r4,-20(fp)
   2e4a8:	002fcb00 	call	2fcb0 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e4ac:	01400704 	movi	r5,28
   2e4b0:	e13ffb17 	ldw	r4,-20(fp)
   2e4b4:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   2e4b8:	e0bffb17 	ldw	r2,-20(fp)
   2e4bc:	10800617 	ldw	r2,24(r2)
   2e4c0:	10001126 	beq	r2,zero,2e508 <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e4c4:	0005303a 	rdctl	r2,status
   2e4c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e4cc:	e0fffd17 	ldw	r3,-12(fp)
   2e4d0:	00bfff84 	movi	r2,-2
   2e4d4:	1884703a 	and	r2,r3,r2
   2e4d8:	1001703a 	wrctl	status,r2
  
  return context;
   2e4dc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   2e4e0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   2e4e4:	e0bffb17 	ldw	r2,-20(fp)
   2e4e8:	10800617 	ldw	r2,24(r2)
   2e4ec:	e13ffb17 	ldw	r4,-20(fp)
   2e4f0:	103ee83a 	callr	r2
   2e4f4:	e0bffc17 	ldw	r2,-16(fp)
   2e4f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e4fc:	e0bffe17 	ldw	r2,-8(fp)
   2e500:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   2e504:	0001883a 	nop
   2e508:	0001883a 	nop
}
   2e50c:	e037883a 	mov	sp,fp
   2e510:	dfc00117 	ldw	ra,4(sp)
   2e514:	df000017 	ldw	fp,0(sp)
   2e518:	dec00204 	addi	sp,sp,8
   2e51c:	f800283a 	ret

0002e520 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   2e520:	defffb04 	addi	sp,sp,-20
   2e524:	df000415 	stw	fp,16(sp)
   2e528:	df000404 	addi	fp,sp,16
   2e52c:	e13ffc15 	stw	r4,-16(fp)
   2e530:	e17ffd15 	stw	r5,-12(fp)
   2e534:	e1bffe15 	stw	r6,-8(fp)
   2e538:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   2e53c:	e0bffc17 	ldw	r2,-16(fp)
   2e540:	e0fffd17 	ldw	r3,-12(fp)
   2e544:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   2e548:	e0bffc17 	ldw	r2,-16(fp)
   2e54c:	e0ffff17 	ldw	r3,-4(fp)
   2e550:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   2e554:	e0bffc17 	ldw	r2,-16(fp)
   2e558:	e0fffe17 	ldw	r3,-8(fp)
   2e55c:	10c00815 	stw	r3,32(r2)

    return ;
   2e560:	0001883a 	nop
}
   2e564:	e037883a 	mov	sp,fp
   2e568:	df000017 	ldw	fp,0(sp)
   2e56c:	dec00104 	addi	sp,sp,4
   2e570:	f800283a 	ret

0002e574 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   2e574:	defff704 	addi	sp,sp,-36
   2e578:	dfc00815 	stw	ra,32(sp)
   2e57c:	df000715 	stw	fp,28(sp)
   2e580:	df000704 	addi	fp,sp,28
   2e584:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   2e588:	e13fff17 	ldw	r4,-4(fp)
   2e58c:	002e7380 	call	2e738 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   2e590:	014007c4 	movi	r5,31
   2e594:	e13fff17 	ldw	r4,-4(fp)
   2e598:	002fcb00 	call	2fcb0 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2e59c:	01400704 	movi	r5,28
   2e5a0:	e13fff17 	ldw	r4,-4(fp)
   2e5a4:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   2e5a8:	014000c4 	movi	r5,3
   2e5ac:	e13fff17 	ldw	r4,-4(fp)
   2e5b0:	002febc0 	call	2febc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   2e5b4:	014000c4 	movi	r5,3
   2e5b8:	e13fff17 	ldw	r4,-4(fp)
   2e5bc:	002fe0c0 	call	2fe0c <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   2e5c0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   2e5c4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   2e5c8:	e0bffb04 	addi	r2,fp,-20
   2e5cc:	018000b4 	movhi	r6,2
   2e5d0:	31a1a804 	addi	r6,r6,-31072
   2e5d4:	100b883a 	mov	r5,r2
   2e5d8:	e13fff17 	ldw	r4,-4(fp)
   2e5dc:	002e9940 	call	2e994 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   2e5e0:	e0bffb04 	addi	r2,fp,-20
   2e5e4:	100b883a 	mov	r5,r2
   2e5e8:	e13fff17 	ldw	r4,-4(fp)
   2e5ec:	002e8340 	call	2e834 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   2e5f0:	d1600d04 	addi	r5,gp,-32716
   2e5f4:	e13fff17 	ldw	r4,-4(fp)
   2e5f8:	00316600 	call	31660 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   2e5fc:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   2e600:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   2e604:	e0bffa17 	ldw	r2,-24(fp)
   2e608:	10000c1e 	bne	r2,zero,2e63c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   2e60c:	e0bfff17 	ldw	r2,-4(fp)
   2e610:	10c00417 	ldw	r3,16(r2)
   2e614:	e0bfff17 	ldw	r2,-4(fp)
   2e618:	10800517 	ldw	r2,20(r2)
   2e61c:	d8000015 	stw	zero,0(sp)
   2e620:	e1ffff17 	ldw	r7,-4(fp)
   2e624:	018000f4 	movhi	r6,3
   2e628:	31b92104 	addi	r6,r6,-7036
   2e62c:	100b883a 	mov	r5,r2
   2e630:	1809883a 	mov	r4,r3
   2e634:	0031a340 	call	31a34 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   2e638:	00000406 	br	2e64c <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   2e63c:	01010034 	movhi	r4,1024
   2e640:	2100df04 	addi	r4,r4,892
   2e644:	0031e140 	call	31e14 <alt_printf>
    }

    return;
   2e648:	0001883a 	nop

}
   2e64c:	e037883a 	mov	sp,fp
   2e650:	dfc00117 	ldw	ra,4(sp)
   2e654:	df000017 	ldw	fp,0(sp)
   2e658:	dec00204 	addi	sp,sp,8
   2e65c:	f800283a 	ret

0002e660 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   2e660:	defffc04 	addi	sp,sp,-16
   2e664:	dfc00315 	stw	ra,12(sp)
   2e668:	df000215 	stw	fp,8(sp)
   2e66c:	df000204 	addi	fp,sp,8
   2e670:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   2e674:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   2e678:	d1600d04 	addi	r5,gp,-32716
   2e67c:	e13fff17 	ldw	r4,-4(fp)
   2e680:	00317c40 	call	317c4 <alt_find_dev>
   2e684:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   2e688:	e0bffe17 	ldw	r2,-8(fp)
}
   2e68c:	e037883a 	mov	sp,fp
   2e690:	dfc00117 	ldw	ra,4(sp)
   2e694:	df000017 	ldw	fp,0(sp)
   2e698:	dec00204 	addi	sp,sp,8
   2e69c:	f800283a 	ret

0002e6a0 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e6a0:	defffc04 	addi	sp,sp,-16
   2e6a4:	df000315 	stw	fp,12(sp)
   2e6a8:	df000304 	addi	fp,sp,12
   2e6ac:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2e6b0:	e0bfff17 	ldw	r2,-4(fp)
   2e6b4:	10800717 	ldw	r2,28(r2)
   2e6b8:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   2e6bc:	e0bfff17 	ldw	r2,-4(fp)
   2e6c0:	10800317 	ldw	r2,12(r2)
   2e6c4:	10800204 	addi	r2,r2,8
   2e6c8:	10800037 	ldwio	r2,0(r2)
   2e6cc:	1080004c 	andi	r2,r2,1
   2e6d0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   2e6d4:	e0bffe17 	ldw	r2,-8(fp)
   2e6d8:	10000226 	beq	r2,zero,2e6e4 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   2e6dc:	00bffe44 	movi	r2,-7
   2e6e0:	00001106 	br	2e728 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   2e6e4:	e0bfff17 	ldw	r2,-4(fp)
   2e6e8:	10c00617 	ldw	r3,24(r2)
   2e6ec:	008000f4 	movhi	r2,3
   2e6f0:	10b8c904 	addi	r2,r2,-7388
   2e6f4:	1880021e 	bne	r3,r2,2e700 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   2e6f8:	e0bffd17 	ldw	r2,-12(fp)
   2e6fc:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   2e700:	e0bfff17 	ldw	r2,-4(fp)
   2e704:	10800317 	ldw	r2,12(r2)
   2e708:	10800204 	addi	r2,r2,8
   2e70c:	e0ffff17 	ldw	r3,-4(fp)
   2e710:	18c00317 	ldw	r3,12(r3)
   2e714:	18c00204 	addi	r3,r3,8
   2e718:	18c00037 	ldwio	r3,0(r3)
   2e71c:	18c00054 	ori	r3,r3,1
   2e720:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2e724:	0005883a 	mov	r2,zero
}
   2e728:	e037883a 	mov	sp,fp
   2e72c:	df000017 	ldw	fp,0(sp)
   2e730:	dec00104 	addi	sp,sp,4
   2e734:	f800283a 	ret

0002e738 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2e738:	defffe04 	addi	sp,sp,-8
   2e73c:	df000115 	stw	fp,4(sp)
   2e740:	df000104 	addi	fp,sp,4
   2e744:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   2e748:	e0bfff17 	ldw	r2,-4(fp)
   2e74c:	10800317 	ldw	r2,12(r2)
   2e750:	10800204 	addi	r2,r2,8
   2e754:	e0ffff17 	ldw	r3,-4(fp)
   2e758:	18c00317 	ldw	r3,12(r3)
   2e75c:	18c00204 	addi	r3,r3,8
   2e760:	19000037 	ldwio	r4,0(r3)
   2e764:	00ffff84 	movi	r3,-2
   2e768:	20c6703a 	and	r3,r4,r3
   2e76c:	10c00035 	stwio	r3,0(r2)

}
   2e770:	0001883a 	nop
   2e774:	e037883a 	mov	sp,fp
   2e778:	df000017 	ldw	fp,0(sp)
   2e77c:	dec00104 	addi	sp,sp,4
   2e780:	f800283a 	ret

0002e784 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2e784:	defffd04 	addi	sp,sp,-12
   2e788:	df000215 	stw	fp,8(sp)
   2e78c:	df000204 	addi	fp,sp,8
   2e790:	e13ffe15 	stw	r4,-8(fp)
   2e794:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   2e798:	e0bffe17 	ldw	r2,-8(fp)
   2e79c:	10c00d17 	ldw	r3,52(r2)
   2e7a0:	e0bfff17 	ldw	r2,-4(fp)
   2e7a4:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   2e7a8:	e0bffe17 	ldw	r2,-8(fp)
   2e7ac:	10800317 	ldw	r2,12(r2)
   2e7b0:	10800204 	addi	r2,r2,8
   2e7b4:	10800037 	ldwio	r2,0(r2)
   2e7b8:	1080008c 	andi	r2,r2,2
   2e7bc:	1005d07a 	srai	r2,r2,1
   2e7c0:	1007883a 	mov	r3,r2
   2e7c4:	e0bfff17 	ldw	r2,-4(fp)
   2e7c8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   2e7cc:	e0bffe17 	ldw	r2,-8(fp)
   2e7d0:	10800317 	ldw	r2,12(r2)
   2e7d4:	10800904 	addi	r2,r2,36
   2e7d8:	10800037 	ldwio	r2,0(r2)
   2e7dc:	1007883a 	mov	r3,r2
   2e7e0:	e0bfff17 	ldw	r2,-4(fp)
   2e7e4:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   2e7e8:	e0bffe17 	ldw	r2,-8(fp)
   2e7ec:	10800317 	ldw	r2,12(r2)
   2e7f0:	10800804 	addi	r2,r2,32
   2e7f4:	10800037 	ldwio	r2,0(r2)
   2e7f8:	1007883a 	mov	r3,r2
   2e7fc:	e0bfff17 	ldw	r2,-4(fp)
   2e800:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   2e804:	e0bffe17 	ldw	r2,-8(fp)
   2e808:	10800317 	ldw	r2,12(r2)
   2e80c:	10800a04 	addi	r2,r2,40
   2e810:	10800037 	ldwio	r2,0(r2)
   2e814:	1007883a 	mov	r3,r2
   2e818:	e0bfff17 	ldw	r2,-4(fp)
   2e81c:	10c0030d 	sth	r3,12(r2)
}
   2e820:	0001883a 	nop
   2e824:	e037883a 	mov	sp,fp
   2e828:	df000017 	ldw	fp,0(sp)
   2e82c:	dec00104 	addi	sp,sp,4
   2e830:	f800283a 	ret

0002e834 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   2e834:	defffd04 	addi	sp,sp,-12
   2e838:	df000215 	stw	fp,8(sp)
   2e83c:	df000204 	addi	fp,sp,8
   2e840:	e13ffe15 	stw	r4,-8(fp)
   2e844:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   2e848:	e0bfff17 	ldw	r2,-4(fp)
   2e84c:	10c00017 	ldw	r3,0(r2)
   2e850:	e0bffe17 	ldw	r2,-8(fp)
   2e854:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   2e858:	e0bffe17 	ldw	r2,-8(fp)
   2e85c:	10800317 	ldw	r2,12(r2)
   2e860:	10c00204 	addi	r3,r2,8
   2e864:	e0bffe17 	ldw	r2,-8(fp)
   2e868:	10800317 	ldw	r2,12(r2)
   2e86c:	10800204 	addi	r2,r2,8
   2e870:	10800037 	ldwio	r2,0(r2)
   2e874:	1009883a 	mov	r4,r2
   2e878:	00bfff44 	movi	r2,-3
   2e87c:	2088703a 	and	r4,r4,r2
   2e880:	e0bfff17 	ldw	r2,-4(fp)
   2e884:	10800117 	ldw	r2,4(r2)
   2e888:	1085883a 	add	r2,r2,r2
   2e88c:	1080008c 	andi	r2,r2,2
   2e890:	2084b03a 	or	r2,r4,r2
   2e894:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   2e898:	e0bffe17 	ldw	r2,-8(fp)
   2e89c:	10800317 	ldw	r2,12(r2)
   2e8a0:	10800904 	addi	r2,r2,36
   2e8a4:	e0ffff17 	ldw	r3,-4(fp)
   2e8a8:	18c0020b 	ldhu	r3,8(r3)
   2e8ac:	18ffffcc 	andi	r3,r3,65535
   2e8b0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   2e8b4:	e0bffe17 	ldw	r2,-8(fp)
   2e8b8:	10800317 	ldw	r2,12(r2)
   2e8bc:	10800804 	addi	r2,r2,32
   2e8c0:	e0ffff17 	ldw	r3,-4(fp)
   2e8c4:	18c0028b 	ldhu	r3,10(r3)
   2e8c8:	18ffffcc 	andi	r3,r3,65535
   2e8cc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   2e8d0:	e0bffe17 	ldw	r2,-8(fp)
   2e8d4:	10800317 	ldw	r2,12(r2)
   2e8d8:	10800a04 	addi	r2,r2,40
   2e8dc:	e0ffff17 	ldw	r3,-4(fp)
   2e8e0:	18c0030b 	ldhu	r3,12(r3)
   2e8e4:	18ffffcc 	andi	r3,r3,65535
   2e8e8:	10c00035 	stwio	r3,0(r2)
}
   2e8ec:	0001883a 	nop
   2e8f0:	e037883a 	mov	sp,fp
   2e8f4:	df000017 	ldw	fp,0(sp)
   2e8f8:	dec00104 	addi	sp,sp,4
   2e8fc:	f800283a 	ret

0002e900 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   2e900:	defffb04 	addi	sp,sp,-20
   2e904:	dfc00415 	stw	ra,16(sp)
   2e908:	df000315 	stw	fp,12(sp)
   2e90c:	df000304 	addi	fp,sp,12
   2e910:	e13ffd15 	stw	r4,-12(fp)
   2e914:	e17ffe15 	stw	r5,-8(fp)
   2e918:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   2e91c:	e0bffe17 	ldw	r2,-8(fp)
   2e920:	1080028b 	ldhu	r2,10(r2)
   2e924:	10bfffcc 	andi	r2,r2,65535
   2e928:	10000426 	beq	r2,zero,2e93c <alt_avalon_i2c_master_config_speed_get+0x3c>
   2e92c:	e0bffe17 	ldw	r2,-8(fp)
   2e930:	1080020b 	ldhu	r2,8(r2)
   2e934:	10bfffcc 	andi	r2,r2,65535
   2e938:	1000021e 	bne	r2,zero,2e944 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   2e93c:	00bfff44 	movi	r2,-3
   2e940:	00000f06 	br	2e980 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   2e944:	e0bffd17 	ldw	r2,-12(fp)
   2e948:	11000c17 	ldw	r4,48(r2)
   2e94c:	e0bffe17 	ldw	r2,-8(fp)
   2e950:	1080028b 	ldhu	r2,10(r2)
   2e954:	10ffffcc 	andi	r3,r2,65535
   2e958:	e0bffe17 	ldw	r2,-8(fp)
   2e95c:	1080020b 	ldhu	r2,8(r2)
   2e960:	10bfffcc 	andi	r2,r2,65535
   2e964:	1885883a 	add	r2,r3,r2
   2e968:	100b883a 	mov	r5,r2
   2e96c:	002af3c0 	call	2af3c <__udivsi3>
   2e970:	1007883a 	mov	r3,r2
   2e974:	e0bfff17 	ldw	r2,-4(fp)
   2e978:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   2e97c:	0005883a 	mov	r2,zero
}
   2e980:	e037883a 	mov	sp,fp
   2e984:	dfc00117 	ldw	ra,4(sp)
   2e988:	df000017 	ldw	fp,0(sp)
   2e98c:	dec00204 	addi	sp,sp,8
   2e990:	f800283a 	ret

0002e994 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   2e994:	defff904 	addi	sp,sp,-28
   2e998:	dfc00615 	stw	ra,24(sp)
   2e99c:	df000515 	stw	fp,20(sp)
   2e9a0:	df000504 	addi	fp,sp,20
   2e9a4:	e13ffd15 	stw	r4,-12(fp)
   2e9a8:	e17ffe15 	stw	r5,-8(fp)
   2e9ac:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   2e9b0:	e0ffff17 	ldw	r3,-4(fp)
   2e9b4:	008001b4 	movhi	r2,6
   2e9b8:	1086a004 	addi	r2,r2,6784
   2e9bc:	10c00436 	bltu	r2,r3,2e9d0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   2e9c0:	e0bfff17 	ldw	r2,-4(fp)
   2e9c4:	10000226 	beq	r2,zero,2e9d0 <alt_avalon_i2c_master_config_speed_set+0x3c>
   2e9c8:	e0bfff17 	ldw	r2,-4(fp)
   2e9cc:	1000021e 	bne	r2,zero,2e9d8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   2e9d0:	00bfff04 	movi	r2,-4
   2e9d4:	00002906 	br	2ea7c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   2e9d8:	e0bffd17 	ldw	r2,-12(fp)
   2e9dc:	10c00c17 	ldw	r3,48(r2)
   2e9e0:	e0bfff17 	ldw	r2,-4(fp)
   2e9e4:	1085883a 	add	r2,r2,r2
   2e9e8:	100b883a 	mov	r5,r2
   2e9ec:	1809883a 	mov	r4,r3
   2e9f0:	002af3c0 	call	2af3c <__udivsi3>
   2e9f4:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2e9f8:	e0bffb17 	ldw	r2,-20(fp)
   2e9fc:	10800f04 	addi	r2,r2,60
   2ea00:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   2ea04:	e0bffb17 	ldw	r2,-20(fp)
   2ea08:	10bff104 	addi	r2,r2,-60
   2ea0c:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   2ea10:	e0ffff17 	ldw	r3,-4(fp)
   2ea14:	008000b4 	movhi	r2,2
   2ea18:	10a1a804 	addi	r2,r2,-31072
   2ea1c:	10c0042e 	bgeu	r2,r3,2ea30 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   2ea20:	e0bffe17 	ldw	r2,-8(fp)
   2ea24:	00c00044 	movi	r3,1
   2ea28:	10c00115 	stw	r3,4(r2)
   2ea2c:	00000206 	br	2ea38 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   2ea30:	e0bffe17 	ldw	r2,-8(fp)
   2ea34:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   2ea38:	e0bffb17 	ldw	r2,-20(fp)
   2ea3c:	1007883a 	mov	r3,r2
   2ea40:	e0bffe17 	ldw	r2,-8(fp)
   2ea44:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   2ea48:	e0bffc17 	ldw	r2,-16(fp)
   2ea4c:	1007883a 	mov	r3,r2
   2ea50:	e0bffe17 	ldw	r2,-8(fp)
   2ea54:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   2ea58:	e0bffb17 	ldw	r2,-20(fp)
   2ea5c:	1007883a 	mov	r3,r2
   2ea60:	e0bffb17 	ldw	r2,-20(fp)
   2ea64:	1004d07a 	srli	r2,r2,1
   2ea68:	1885c83a 	sub	r2,r3,r2
   2ea6c:	1007883a 	mov	r3,r2
   2ea70:	e0bffe17 	ldw	r2,-8(fp)
   2ea74:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   2ea78:	0005883a 	mov	r2,zero

}
   2ea7c:	e037883a 	mov	sp,fp
   2ea80:	dfc00117 	ldw	ra,4(sp)
   2ea84:	df000017 	ldw	fp,0(sp)
   2ea88:	dec00204 	addi	sp,sp,8
   2ea8c:	f800283a 	ret

0002ea90 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2ea90:	defffe04 	addi	sp,sp,-8
   2ea94:	df000115 	stw	fp,4(sp)
   2ea98:	df000104 	addi	fp,sp,4
   2ea9c:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   2eaa0:	e0bfff17 	ldw	r2,-4(fp)
   2eaa4:	10800317 	ldw	r2,12(r2)
   2eaa8:	10800504 	addi	r2,r2,20
   2eaac:	10800037 	ldwio	r2,0(r2)
   2eab0:	1080004c 	andi	r2,r2,1
   2eab4:	10000226 	beq	r2,zero,2eac0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   2eab8:	00800044 	movi	r2,1
   2eabc:	00000106 	br	2eac4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   2eac0:	0005883a 	mov	r2,zero
}
   2eac4:	e037883a 	mov	sp,fp
   2eac8:	df000017 	ldw	fp,0(sp)
   2eacc:	dec00104 	addi	sp,sp,4
   2ead0:	f800283a 	ret

0002ead4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   2ead4:	defffb04 	addi	sp,sp,-20
   2ead8:	df000415 	stw	fp,16(sp)
   2eadc:	df000404 	addi	fp,sp,16
   2eae0:	e13ffc15 	stw	r4,-16(fp)
   2eae4:	e17ffd15 	stw	r5,-12(fp)
   2eae8:	e1bffe15 	stw	r6,-8(fp)
   2eaec:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   2eaf0:	e0bfff17 	ldw	r2,-4(fp)
   2eaf4:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2eaf8:	00001406 	br	2eb4c <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2eafc:	e0bfff17 	ldw	r2,-4(fp)
   2eb00:	10800017 	ldw	r2,0(r2)
   2eb04:	e0fffd17 	ldw	r3,-12(fp)
   2eb08:	1885883a 	add	r2,r3,r2
   2eb0c:	e0fffc17 	ldw	r3,-16(fp)
   2eb10:	18c00317 	ldw	r3,12(r3)
   2eb14:	18c00104 	addi	r3,r3,4
   2eb18:	18c00037 	ldwio	r3,0(r3)
   2eb1c:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   2eb20:	e0bfff17 	ldw	r2,-4(fp)
   2eb24:	10800017 	ldw	r2,0(r2)
   2eb28:	10c00044 	addi	r3,r2,1
   2eb2c:	e0bfff17 	ldw	r2,-4(fp)
   2eb30:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2eb34:	e0bfff17 	ldw	r2,-4(fp)
   2eb38:	10c00017 	ldw	r3,0(r2)
   2eb3c:	e0bffe17 	ldw	r2,-8(fp)
   2eb40:	1880021e 	bne	r3,r2,2eb4c <alt_avalon_i2c_rx_read_available+0x78>
   2eb44:	e0bffe17 	ldw	r2,-8(fp)
   2eb48:	1000061e 	bne	r2,zero,2eb64 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   2eb4c:	e0bffc17 	ldw	r2,-16(fp)
   2eb50:	10800317 	ldw	r2,12(r2)
   2eb54:	10800704 	addi	r2,r2,28
   2eb58:	10800037 	ldwio	r2,0(r2)
   2eb5c:	103fe71e 	bne	r2,zero,2eafc <__alt_data_end+0xf802eafc>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   2eb60:	00000106 	br	2eb68 <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   2eb64:	0001883a 	nop
    }
}
   2eb68:	0001883a 	nop
   2eb6c:	e037883a 	mov	sp,fp
   2eb70:	df000017 	ldw	fp,0(sp)
   2eb74:	dec00104 	addi	sp,sp,4
   2eb78:	f800283a 	ret

0002eb7c <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   2eb7c:	defffa04 	addi	sp,sp,-24
   2eb80:	dfc00515 	stw	ra,20(sp)
   2eb84:	df000415 	stw	fp,16(sp)
   2eb88:	df000404 	addi	fp,sp,16
   2eb8c:	e13ffe15 	stw	r4,-8(fp)
   2eb90:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   2eb94:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   2eb98:	008000b4 	movhi	r2,2
   2eb9c:	10a1a804 	addi	r2,r2,-31072
   2eba0:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2eba4:	00000d06 	br	2ebdc <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   2eba8:	e0bffd17 	ldw	r2,-12(fp)
   2ebac:	108002a8 	cmpgeui	r2,r2,10
   2ebb0:	1000021e 	bne	r2,zero,2ebbc <alt_avalon_i2c_rx_read+0x40>
   2ebb4:	0109c404 	movi	r4,10000
   2ebb8:	00314840 	call	31484 <alt_busy_sleep>
      if (--timeout == 0)
   2ebbc:	e0bffd17 	ldw	r2,-12(fp)
   2ebc0:	10bfffc4 	addi	r2,r2,-1
   2ebc4:	e0bffd15 	stw	r2,-12(fp)
   2ebc8:	e0bffd17 	ldw	r2,-12(fp)
   2ebcc:	1000031e 	bne	r2,zero,2ebdc <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   2ebd0:	00bfff84 	movi	r2,-2
   2ebd4:	e0bffc15 	stw	r2,-16(fp)
        break;
   2ebd8:	00000506 	br	2ebf0 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   2ebdc:	e0bffe17 	ldw	r2,-8(fp)
   2ebe0:	10800317 	ldw	r2,12(r2)
   2ebe4:	10800704 	addi	r2,r2,28
   2ebe8:	10800037 	ldwio	r2,0(r2)
   2ebec:	103fee26 	beq	r2,zero,2eba8 <__alt_data_end+0xf802eba8>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   2ebf0:	e0bffe17 	ldw	r2,-8(fp)
   2ebf4:	10800317 	ldw	r2,12(r2)
   2ebf8:	10800104 	addi	r2,r2,4
   2ebfc:	10800037 	ldwio	r2,0(r2)
   2ec00:	1007883a 	mov	r3,r2
   2ec04:	e0bfff17 	ldw	r2,-4(fp)
   2ec08:	10c00005 	stb	r3,0(r2)
        
    return status;
   2ec0c:	e0bffc17 	ldw	r2,-16(fp)
}
   2ec10:	e037883a 	mov	sp,fp
   2ec14:	dfc00117 	ldw	ra,4(sp)
   2ec18:	df000017 	ldw	fp,0(sp)
   2ec1c:	dec00204 	addi	sp,sp,8
   2ec20:	f800283a 	ret

0002ec24 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   2ec24:	defff804 	addi	sp,sp,-32
   2ec28:	dfc00715 	stw	ra,28(sp)
   2ec2c:	df000615 	stw	fp,24(sp)
   2ec30:	df000604 	addi	fp,sp,24
   2ec34:	e13ffc15 	stw	r4,-16(fp)
   2ec38:	2809883a 	mov	r4,r5
   2ec3c:	3007883a 	mov	r3,r6
   2ec40:	3805883a 	mov	r2,r7
   2ec44:	e13ffd05 	stb	r4,-12(fp)
   2ec48:	e0fffe05 	stb	r3,-8(fp)
   2ec4c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   2ec50:	0089c404 	movi	r2,10000
   2ec54:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2ec58:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2ec5c:	00000c06 	br	2ec90 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   2ec60:	e0bffa17 	ldw	r2,-24(fp)
   2ec64:	108002a8 	cmpgeui	r2,r2,10
   2ec68:	1000021e 	bne	r2,zero,2ec74 <alt_avalon_i2c_cmd_write+0x50>
   2ec6c:	0109c404 	movi	r4,10000
   2ec70:	00314840 	call	31484 <alt_busy_sleep>
      if (--timeout == 0)
   2ec74:	e0bffa17 	ldw	r2,-24(fp)
   2ec78:	10bfffc4 	addi	r2,r2,-1
   2ec7c:	e0bffa15 	stw	r2,-24(fp)
   2ec80:	e0bffa17 	ldw	r2,-24(fp)
   2ec84:	1000021e 	bne	r2,zero,2ec90 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   2ec88:	00bfff84 	movi	r2,-2
   2ec8c:	00001906 	br	2ecf4 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   2ec90:	e0bffc17 	ldw	r2,-16(fp)
   2ec94:	10800317 	ldw	r2,12(r2)
   2ec98:	10800404 	addi	r2,r2,16
   2ec9c:	10800037 	ldwio	r2,0(r2)
   2eca0:	1080004c 	andi	r2,r2,1
   2eca4:	103fee26 	beq	r2,zero,2ec60 <__alt_data_end+0xf802ec60>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   2eca8:	e0bffc17 	ldw	r2,-16(fp)
   2ecac:	10800317 	ldw	r2,12(r2)
   2ecb0:	e13ffd03 	ldbu	r4,-12(fp)
   2ecb4:	e0fffe03 	ldbu	r3,-8(fp)
   2ecb8:	1806927a 	slli	r3,r3,9
   2ecbc:	20c8b03a 	or	r4,r4,r3
   2ecc0:	e0ffff03 	ldbu	r3,-4(fp)
   2ecc4:	1806923a 	slli	r3,r3,8
   2ecc8:	20c6b03a 	or	r3,r4,r3
   2eccc:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2ecd0:	e0bffb04 	addi	r2,fp,-20
   2ecd4:	100b883a 	mov	r5,r2
   2ecd8:	e13ffc17 	ldw	r4,-16(fp)
   2ecdc:	002ee640 	call	2ee64 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   2ece0:	e0bffb04 	addi	r2,fp,-20
   2ece4:	100b883a 	mov	r5,r2
   2ece8:	e13ffc17 	ldw	r4,-16(fp)
   2ecec:	002eeb00 	call	2eeb0 <alt_avalon_i2c_check_arblost>
    
    return status;
   2ecf0:	e0bffb17 	ldw	r2,-20(fp)
}
   2ecf4:	e037883a 	mov	sp,fp
   2ecf8:	dfc00117 	ldw	ra,4(sp)
   2ecfc:	df000017 	ldw	fp,0(sp)
   2ed00:	dec00204 	addi	sp,sp,8
   2ed04:	f800283a 	ret

0002ed08 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   2ed08:	defffa04 	addi	sp,sp,-24
   2ed0c:	dfc00515 	stw	ra,20(sp)
   2ed10:	df000415 	stw	fp,16(sp)
   2ed14:	df000404 	addi	fp,sp,16
   2ed18:	e13ffd15 	stw	r4,-12(fp)
   2ed1c:	e17ffe15 	stw	r5,-8(fp)
   2ed20:	3005883a 	mov	r2,r6
   2ed24:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   2ed28:	e0bffd17 	ldw	r2,-12(fp)
   2ed2c:	10800d17 	ldw	r2,52(r2)
   2ed30:	10800058 	cmpnei	r2,r2,1
   2ed34:	10001c1e 	bne	r2,zero,2eda8 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2ed38:	e0bffd17 	ldw	r2,-12(fp)
   2ed3c:	10800917 	ldw	r2,36(r2)
   2ed40:	109e0014 	ori	r2,r2,30720
   2ed44:	1004d1fa 	srli	r2,r2,7
   2ed48:	1007883a 	mov	r3,r2
   2ed4c:	00bfff84 	movi	r2,-2
   2ed50:	1884703a 	and	r2,r3,r2
   2ed54:	1007883a 	mov	r3,r2
   2ed58:	e0bffe17 	ldw	r2,-8(fp)
   2ed5c:	1884b03a 	or	r2,r3,r2
   2ed60:	10803fcc 	andi	r2,r2,255
   2ed64:	e0ffff03 	ldbu	r3,-4(fp)
   2ed68:	000f883a 	mov	r7,zero
   2ed6c:	180d883a 	mov	r6,r3
   2ed70:	100b883a 	mov	r5,r2
   2ed74:	e13ffd17 	ldw	r4,-12(fp)
   2ed78:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2ed7c:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   2ed80:	e0bffd17 	ldw	r2,-12(fp)
   2ed84:	10800917 	ldw	r2,36(r2)
   2ed88:	10803fcc 	andi	r2,r2,255
   2ed8c:	000f883a 	mov	r7,zero
   2ed90:	000d883a 	mov	r6,zero
   2ed94:	100b883a 	mov	r5,r2
   2ed98:	e13ffd17 	ldw	r4,-12(fp)
   2ed9c:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2eda0:	e0bffc15 	stw	r2,-16(fp)
   2eda4:	00000e06 	br	2ede0 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   2eda8:	e0bffd17 	ldw	r2,-12(fp)
   2edac:	10800917 	ldw	r2,36(r2)
   2edb0:	1085883a 	add	r2,r2,r2
   2edb4:	1007883a 	mov	r3,r2
   2edb8:	e0bffe17 	ldw	r2,-8(fp)
   2edbc:	1884b03a 	or	r2,r3,r2
   2edc0:	10803fcc 	andi	r2,r2,255
   2edc4:	e0ffff03 	ldbu	r3,-4(fp)
   2edc8:	000f883a 	mov	r7,zero
   2edcc:	180d883a 	mov	r6,r3
   2edd0:	100b883a 	mov	r5,r2
   2edd4:	e13ffd17 	ldw	r4,-12(fp)
   2edd8:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2eddc:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   2ede0:	e0bffc17 	ldw	r2,-16(fp)
}
   2ede4:	e037883a 	mov	sp,fp
   2ede8:	dfc00117 	ldw	ra,4(sp)
   2edec:	df000017 	ldw	fp,0(sp)
   2edf0:	dec00204 	addi	sp,sp,8
   2edf4:	f800283a 	ret

0002edf8 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   2edf8:	defffd04 	addi	sp,sp,-12
   2edfc:	df000215 	stw	fp,8(sp)
   2ee00:	df000204 	addi	fp,sp,8
   2ee04:	e13ffe15 	stw	r4,-8(fp)
   2ee08:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   2ee0c:	e0bffe17 	ldw	r2,-8(fp)
   2ee10:	10c00917 	ldw	r3,36(r2)
   2ee14:	e0bfff17 	ldw	r2,-4(fp)
   2ee18:	10c00015 	stw	r3,0(r2)
}
   2ee1c:	0001883a 	nop
   2ee20:	e037883a 	mov	sp,fp
   2ee24:	df000017 	ldw	fp,0(sp)
   2ee28:	dec00104 	addi	sp,sp,4
   2ee2c:	f800283a 	ret

0002ee30 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   2ee30:	defffd04 	addi	sp,sp,-12
   2ee34:	df000215 	stw	fp,8(sp)
   2ee38:	df000204 	addi	fp,sp,8
   2ee3c:	e13ffe15 	stw	r4,-8(fp)
   2ee40:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   2ee44:	e0bffe17 	ldw	r2,-8(fp)
   2ee48:	e0ffff17 	ldw	r3,-4(fp)
   2ee4c:	10c00915 	stw	r3,36(r2)
}
   2ee50:	0001883a 	nop
   2ee54:	e037883a 	mov	sp,fp
   2ee58:	df000017 	ldw	fp,0(sp)
   2ee5c:	dec00104 	addi	sp,sp,4
   2ee60:	f800283a 	ret

0002ee64 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   2ee64:	defffd04 	addi	sp,sp,-12
   2ee68:	df000215 	stw	fp,8(sp)
   2ee6c:	df000204 	addi	fp,sp,8
   2ee70:	e13ffe15 	stw	r4,-8(fp)
   2ee74:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   2ee78:	e0bffe17 	ldw	r2,-8(fp)
   2ee7c:	10800317 	ldw	r2,12(r2)
   2ee80:	10800404 	addi	r2,r2,16
   2ee84:	10800037 	ldwio	r2,0(r2)
   2ee88:	1080010c 	andi	r2,r2,4
   2ee8c:	10000326 	beq	r2,zero,2ee9c <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   2ee90:	e0bfff17 	ldw	r2,-4(fp)
   2ee94:	00fffec4 	movi	r3,-5
   2ee98:	10c00015 	stw	r3,0(r2)
    }
}
   2ee9c:	0001883a 	nop
   2eea0:	e037883a 	mov	sp,fp
   2eea4:	df000017 	ldw	fp,0(sp)
   2eea8:	dec00104 	addi	sp,sp,4
   2eeac:	f800283a 	ret

0002eeb0 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   2eeb0:	defffd04 	addi	sp,sp,-12
   2eeb4:	df000215 	stw	fp,8(sp)
   2eeb8:	df000204 	addi	fp,sp,8
   2eebc:	e13ffe15 	stw	r4,-8(fp)
   2eec0:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   2eec4:	e0bffe17 	ldw	r2,-8(fp)
   2eec8:	10800317 	ldw	r2,12(r2)
   2eecc:	10800404 	addi	r2,r2,16
   2eed0:	10800037 	ldwio	r2,0(r2)
   2eed4:	1080020c 	andi	r2,r2,8
   2eed8:	10000326 	beq	r2,zero,2eee8 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   2eedc:	e0bfff17 	ldw	r2,-4(fp)
   2eee0:	00fffe84 	movi	r3,-6
   2eee4:	10c00015 	stw	r3,0(r2)
    }
}
   2eee8:	0001883a 	nop
   2eeec:	e037883a 	mov	sp,fp
   2eef0:	df000017 	ldw	fp,0(sp)
   2eef4:	dec00104 	addi	sp,sp,4
   2eef8:	f800283a 	ret

0002eefc <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   2eefc:	defff804 	addi	sp,sp,-32
   2ef00:	dfc00715 	stw	ra,28(sp)
   2ef04:	df000615 	stw	fp,24(sp)
   2ef08:	df000604 	addi	fp,sp,24
   2ef0c:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2ef10:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   2ef14:	e0bfff17 	ldw	r2,-4(fp)
   2ef18:	10800717 	ldw	r2,28(r2)
   2ef1c:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   2ef20:	e0bffb17 	ldw	r2,-20(fp)
   2ef24:	10800117 	ldw	r2,4(r2)
   2ef28:	10800044 	addi	r2,r2,1
   2ef2c:	1089c424 	muli	r2,r2,10000
   2ef30:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   2ef34:	e0bffd04 	addi	r2,fp,-12
   2ef38:	100b883a 	mov	r5,r2
   2ef3c:	e13fff17 	ldw	r4,-4(fp)
   2ef40:	002fd7c0 	call	2fd7c <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   2ef44:	e0bffd17 	ldw	r2,-12(fp)
   2ef48:	100b883a 	mov	r5,r2
   2ef4c:	e13fff17 	ldw	r4,-4(fp)
   2ef50:	002fcb00 	call	2fcb0 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   2ef54:	e0bffc04 	addi	r2,fp,-16
   2ef58:	100b883a 	mov	r5,r2
   2ef5c:	e13fff17 	ldw	r4,-4(fp)
   2ef60:	002ee640 	call	2ee64 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   2ef64:	e0bffc17 	ldw	r2,-16(fp)
   2ef68:	10002226 	beq	r2,zero,2eff4 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   2ef6c:	e0bffb17 	ldw	r2,-20(fp)
   2ef70:	10800217 	ldw	r2,8(r2)
   2ef74:	10001d26 	beq	r2,zero,2efec <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2ef78:	00000d06 	br	2efb0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   2ef7c:	e0bffa17 	ldw	r2,-24(fp)
   2ef80:	108002a8 	cmpgeui	r2,r2,10
   2ef84:	1000021e 	bne	r2,zero,2ef90 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   2ef88:	0109c404 	movi	r4,10000
   2ef8c:	00314840 	call	31484 <alt_busy_sleep>
              if (--timeout == 0)
   2ef90:	e0bffa17 	ldw	r2,-24(fp)
   2ef94:	10bfffc4 	addi	r2,r2,-1
   2ef98:	e0bffa15 	stw	r2,-24(fp)
   2ef9c:	e0bffa17 	ldw	r2,-24(fp)
   2efa0:	1000031e 	bne	r2,zero,2efb0 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   2efa4:	00bfff84 	movi	r2,-2
   2efa8:	e0bffc15 	stw	r2,-16(fp)
                 break;
   2efac:	00000306 	br	2efbc <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2efb0:	e13fff17 	ldw	r4,-4(fp)
   2efb4:	002ea900 	call	2ea90 <alt_avalon_i2c_is_busy>
   2efb8:	103ff01e 	bne	r2,zero,2ef7c <__alt_data_end+0xf802ef7c>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   2efbc:	e0bffb17 	ldw	r2,-20(fp)
   2efc0:	10800017 	ldw	r2,0(r2)
   2efc4:	e0fffe04 	addi	r3,fp,-8
   2efc8:	180f883a 	mov	r7,r3
   2efcc:	000d883a 	mov	r6,zero
   2efd0:	100b883a 	mov	r5,r2
   2efd4:	e13fff17 	ldw	r4,-4(fp)
   2efd8:	002ead40 	call	2ead4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   2efdc:	e13fff17 	ldw	r4,-4(fp)
   2efe0:	002e7380 	call	2e738 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   2efe4:	e0bffb17 	ldw	r2,-20(fp)
   2efe8:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   2efec:	e0bffc17 	ldw	r2,-16(fp)
   2eff0:	00000a06 	br	2f01c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   2eff4:	e0bffb17 	ldw	r2,-20(fp)
   2eff8:	10800217 	ldw	r2,8(r2)
   2effc:	10000626 	beq	r2,zero,2f018 <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   2f000:	e0bffd17 	ldw	r2,-12(fp)
   2f004:	100b883a 	mov	r5,r2
   2f008:	e13fff17 	ldw	r4,-4(fp)
   2f00c:	002fd180 	call	2fd18 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   2f010:	00bffe44 	movi	r2,-7
   2f014:	00000106 	br	2f01c <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   2f018:	0005883a 	mov	r2,zero
}
   2f01c:	e037883a 	mov	sp,fp
   2f020:	dfc00117 	ldw	ra,4(sp)
   2f024:	df000017 	ldw	fp,0(sp)
   2f028:	dec00204 	addi	sp,sp,8
   2f02c:	f800283a 	ret

0002f030 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2f030:	defff704 	addi	sp,sp,-36
   2f034:	dfc00815 	stw	ra,32(sp)
   2f038:	df000715 	stw	fp,28(sp)
   2f03c:	df000704 	addi	fp,sp,28
   2f040:	e13ffc15 	stw	r4,-16(fp)
   2f044:	e17ffd15 	stw	r5,-12(fp)
   2f048:	e1bffe15 	stw	r6,-8(fp)
   2f04c:	3805883a 	mov	r2,r7
   2f050:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2f054:	0089c404 	movi	r2,10000
   2f058:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   2f05c:	00002206 	br	2f0e8 <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   2f060:	e0bffb17 	ldw	r2,-20(fp)
   2f064:	108002a8 	cmpgeui	r2,r2,10
   2f068:	1000021e 	bne	r2,zero,2f074 <alt_avalon_i2c_master_tx+0x44>
   2f06c:	0109c404 	movi	r4,10000
   2f070:	00314840 	call	31484 <alt_busy_sleep>
      if (use_interrupts)
   2f074:	e0bfff03 	ldbu	r2,-4(fp)
   2f078:	10000926 	beq	r2,zero,2f0a0 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   2f07c:	00800044 	movi	r2,1
   2f080:	d8800015 	stw	r2,0(sp)
   2f084:	000f883a 	mov	r7,zero
   2f088:	e1bffe17 	ldw	r6,-8(fp)
   2f08c:	e17ffd17 	ldw	r5,-12(fp)
   2f090:	e13ffc17 	ldw	r4,-16(fp)
   2f094:	002f5d80 	call	2f5d8 <alt_avalon_i2c_master_transmit_using_interrupts>
   2f098:	e0bffa15 	stw	r2,-24(fp)
   2f09c:	00000806 	br	2f0c0 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   2f0a0:	00800044 	movi	r2,1
   2f0a4:	d8800015 	stw	r2,0(sp)
   2f0a8:	000f883a 	mov	r7,zero
   2f0ac:	e1bffe17 	ldw	r6,-8(fp)
   2f0b0:	e17ffd17 	ldw	r5,-12(fp)
   2f0b4:	e13ffc17 	ldw	r4,-16(fp)
   2f0b8:	002f41c0 	call	2f41c <alt_avalon_i2c_master_transmit>
   2f0bc:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f0c0:	e0bffa17 	ldw	r2,-24(fp)
   2f0c4:	10bffea0 	cmpeqi	r2,r2,-6
   2f0c8:	1000061e 	bne	r2,zero,2f0e4 <alt_avalon_i2c_master_tx+0xb4>
   2f0cc:	e0bffa17 	ldw	r2,-24(fp)
   2f0d0:	10bffee0 	cmpeqi	r2,r2,-5
   2f0d4:	1000031e 	bne	r2,zero,2f0e4 <alt_avalon_i2c_master_tx+0xb4>
   2f0d8:	e0bffa17 	ldw	r2,-24(fp)
   2f0dc:	10bffe58 	cmpnei	r2,r2,-7
   2f0e0:	1000061e 	bne	r2,zero,2f0fc <alt_avalon_i2c_master_tx+0xcc>
   2f0e4:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   2f0e8:	e0bffb17 	ldw	r2,-20(fp)
   2f0ec:	10ffffc4 	addi	r3,r2,-1
   2f0f0:	e0fffb15 	stw	r3,-20(fp)
   2f0f4:	103fda1e 	bne	r2,zero,2f060 <__alt_data_end+0xf802f060>
   2f0f8:	00000106 	br	2f100 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   2f0fc:	0001883a 	nop
    }

    return status;
   2f100:	e0bffa17 	ldw	r2,-24(fp)
}        
   2f104:	e037883a 	mov	sp,fp
   2f108:	dfc00117 	ldw	ra,4(sp)
   2f10c:	df000017 	ldw	fp,0(sp)
   2f110:	dec00204 	addi	sp,sp,8
   2f114:	f800283a 	ret

0002f118 <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   2f118:	defff704 	addi	sp,sp,-36
   2f11c:	dfc00815 	stw	ra,32(sp)
   2f120:	df000715 	stw	fp,28(sp)
   2f124:	df000704 	addi	fp,sp,28
   2f128:	e13ffc15 	stw	r4,-16(fp)
   2f12c:	e17ffd15 	stw	r5,-12(fp)
   2f130:	e1bffe15 	stw	r6,-8(fp)
   2f134:	3805883a 	mov	r2,r7
   2f138:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2f13c:	0089c404 	movi	r2,10000
   2f140:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   2f144:	e0bfff03 	ldbu	r2,-4(fp)
   2f148:	10003426 	beq	r2,zero,2f21c <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   2f14c:	00001706 	br	2f1ac <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f150:	e0bffb17 	ldw	r2,-20(fp)
   2f154:	108002a8 	cmpgeui	r2,r2,10
   2f158:	1000021e 	bne	r2,zero,2f164 <alt_avalon_i2c_master_rx+0x4c>
   2f15c:	0109c404 	movi	r4,10000
   2f160:	00314840 	call	31484 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2f164:	00800044 	movi	r2,1
   2f168:	d8800015 	stw	r2,0(sp)
   2f16c:	000f883a 	mov	r7,zero
   2f170:	e1bffe17 	ldw	r6,-8(fp)
   2f174:	e17ffd17 	ldw	r5,-12(fp)
   2f178:	e13ffc17 	ldw	r4,-16(fp)
   2f17c:	002f9ec0 	call	2f9ec <alt_avalon_i2c_master_receive_using_interrupts>
   2f180:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f184:	e0bffa17 	ldw	r2,-24(fp)
   2f188:	10bffea0 	cmpeqi	r2,r2,-6
   2f18c:	1000061e 	bne	r2,zero,2f1a8 <alt_avalon_i2c_master_rx+0x90>
   2f190:	e0bffa17 	ldw	r2,-24(fp)
   2f194:	10bffee0 	cmpeqi	r2,r2,-5
   2f198:	1000031e 	bne	r2,zero,2f1a8 <alt_avalon_i2c_master_rx+0x90>
   2f19c:	e0bffa17 	ldw	r2,-24(fp)
   2f1a0:	10bffe58 	cmpnei	r2,r2,-7
   2f1a4:	1000221e 	bne	r2,zero,2f230 <alt_avalon_i2c_master_rx+0x118>
   2f1a8:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   2f1ac:	e0bffb17 	ldw	r2,-20(fp)
   2f1b0:	10ffffc4 	addi	r3,r2,-1
   2f1b4:	e0fffb15 	stw	r3,-20(fp)
   2f1b8:	103fe51e 	bne	r2,zero,2f150 <__alt_data_end+0xf802f150>
   2f1bc:	00001f06 	br	2f23c <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f1c0:	e0bffb17 	ldw	r2,-20(fp)
   2f1c4:	108002a8 	cmpgeui	r2,r2,10
   2f1c8:	1000021e 	bne	r2,zero,2f1d4 <alt_avalon_i2c_master_rx+0xbc>
   2f1cc:	0109c404 	movi	r4,10000
   2f1d0:	00314840 	call	31484 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   2f1d4:	00800044 	movi	r2,1
   2f1d8:	d8800015 	stw	r2,0(sp)
   2f1dc:	000f883a 	mov	r7,zero
   2f1e0:	e1bffe17 	ldw	r6,-8(fp)
   2f1e4:	e17ffd17 	ldw	r5,-12(fp)
   2f1e8:	e13ffc17 	ldw	r4,-16(fp)
   2f1ec:	002f7e00 	call	2f7e0 <alt_avalon_i2c_master_receive>
   2f1f0:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f1f4:	e0bffa17 	ldw	r2,-24(fp)
   2f1f8:	10bffea0 	cmpeqi	r2,r2,-6
   2f1fc:	1000061e 	bne	r2,zero,2f218 <alt_avalon_i2c_master_rx+0x100>
   2f200:	e0bffa17 	ldw	r2,-24(fp)
   2f204:	10bffee0 	cmpeqi	r2,r2,-5
   2f208:	1000031e 	bne	r2,zero,2f218 <alt_avalon_i2c_master_rx+0x100>
   2f20c:	e0bffa17 	ldw	r2,-24(fp)
   2f210:	10bffe58 	cmpnei	r2,r2,-7
   2f214:	1000081e 	bne	r2,zero,2f238 <alt_avalon_i2c_master_rx+0x120>
   2f218:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   2f21c:	e0bffb17 	ldw	r2,-20(fp)
   2f220:	10ffffc4 	addi	r3,r2,-1
   2f224:	e0fffb15 	stw	r3,-20(fp)
   2f228:	103fe51e 	bne	r2,zero,2f1c0 <__alt_data_end+0xf802f1c0>
   2f22c:	00000306 	br	2f23c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2f230:	0001883a 	nop
   2f234:	00000106 	br	2f23c <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   2f238:	0001883a 	nop
      }
    }
    
    return status;
   2f23c:	e0bffa17 	ldw	r2,-24(fp)
}        
   2f240:	e037883a 	mov	sp,fp
   2f244:	dfc00117 	ldw	ra,4(sp)
   2f248:	df000017 	ldw	fp,0(sp)
   2f24c:	dec00204 	addi	sp,sp,8
   2f250:	f800283a 	ret

0002f254 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   2f254:	defff604 	addi	sp,sp,-40
   2f258:	dfc00915 	stw	ra,36(sp)
   2f25c:	df000815 	stw	fp,32(sp)
   2f260:	df000804 	addi	fp,sp,32
   2f264:	e13ffb15 	stw	r4,-20(fp)
   2f268:	e17ffc15 	stw	r5,-16(fp)
   2f26c:	e1bffd15 	stw	r6,-12(fp)
   2f270:	e1fffe15 	stw	r7,-8(fp)
   2f274:	e0800317 	ldw	r2,12(fp)
   2f278:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   2f27c:	0089c404 	movi	r2,10000
   2f280:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   2f284:	e0bfff03 	ldbu	r2,-4(fp)
   2f288:	10005626 	beq	r2,zero,2f3e4 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   2f28c:	00002806 	br	2f330 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f290:	e0bffa17 	ldw	r2,-24(fp)
   2f294:	108002a8 	cmpgeui	r2,r2,10
   2f298:	1000021e 	bne	r2,zero,2f2a4 <alt_avalon_i2c_master_tx_rx+0x50>
   2f29c:	0109c404 	movi	r4,10000
   2f2a0:	00314840 	call	31484 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2f2a4:	d8000015 	stw	zero,0(sp)
   2f2a8:	000f883a 	mov	r7,zero
   2f2ac:	e1bffd17 	ldw	r6,-12(fp)
   2f2b0:	e17ffc17 	ldw	r5,-16(fp)
   2f2b4:	e13ffb17 	ldw	r4,-20(fp)
   2f2b8:	002f5d80 	call	2f5d8 <alt_avalon_i2c_master_transmit_using_interrupts>
   2f2bc:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f2c0:	e0bff917 	ldw	r2,-28(fp)
   2f2c4:	10bffea0 	cmpeqi	r2,r2,-6
   2f2c8:	1000191e 	bne	r2,zero,2f330 <alt_avalon_i2c_master_tx_rx+0xdc>
   2f2cc:	e0bff917 	ldw	r2,-28(fp)
   2f2d0:	10bffee0 	cmpeqi	r2,r2,-5
   2f2d4:	1000161e 	bne	r2,zero,2f330 <alt_avalon_i2c_master_tx_rx+0xdc>
   2f2d8:	e0bff917 	ldw	r2,-28(fp)
   2f2dc:	10bffe58 	cmpnei	r2,r2,-7
   2f2e0:	1000011e 	bne	r2,zero,2f2e8 <alt_avalon_i2c_master_tx_rx+0x94>
   2f2e4:	00001206 	br	2f330 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2f2e8:	00800044 	movi	r2,1
   2f2ec:	d8800015 	stw	r2,0(sp)
   2f2f0:	01c00044 	movi	r7,1
   2f2f4:	e1800217 	ldw	r6,8(fp)
   2f2f8:	e17ffe17 	ldw	r5,-8(fp)
   2f2fc:	e13ffb17 	ldw	r4,-20(fp)
   2f300:	002f9ec0 	call	2f9ec <alt_avalon_i2c_master_receive_using_interrupts>
   2f304:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f308:	e0bff917 	ldw	r2,-28(fp)
   2f30c:	10bffea0 	cmpeqi	r2,r2,-6
   2f310:	1000061e 	bne	r2,zero,2f32c <alt_avalon_i2c_master_tx_rx+0xd8>
   2f314:	e0bff917 	ldw	r2,-28(fp)
   2f318:	10bffee0 	cmpeqi	r2,r2,-5
   2f31c:	1000031e 	bne	r2,zero,2f32c <alt_avalon_i2c_master_tx_rx+0xd8>
   2f320:	e0bff917 	ldw	r2,-28(fp)
   2f324:	10bffe58 	cmpnei	r2,r2,-7
   2f328:	1000331e 	bne	r2,zero,2f3f8 <alt_avalon_i2c_master_tx_rx+0x1a4>
   2f32c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   2f330:	e0bffa17 	ldw	r2,-24(fp)
   2f334:	10ffffc4 	addi	r3,r2,-1
   2f338:	e0fffa15 	stw	r3,-24(fp)
   2f33c:	103fd41e 	bne	r2,zero,2f290 <__alt_data_end+0xf802f290>
   2f340:	00003006 	br	2f404 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   2f344:	e0bffa17 	ldw	r2,-24(fp)
   2f348:	108002a8 	cmpgeui	r2,r2,10
   2f34c:	1000021e 	bne	r2,zero,2f358 <alt_avalon_i2c_master_tx_rx+0x104>
   2f350:	0109c404 	movi	r4,10000
   2f354:	00314840 	call	31484 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   2f358:	d8000015 	stw	zero,0(sp)
   2f35c:	000f883a 	mov	r7,zero
   2f360:	e1bffd17 	ldw	r6,-12(fp)
   2f364:	e17ffc17 	ldw	r5,-16(fp)
   2f368:	e13ffb17 	ldw	r4,-20(fp)
   2f36c:	002f41c0 	call	2f41c <alt_avalon_i2c_master_transmit>
   2f370:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f374:	e0bff917 	ldw	r2,-28(fp)
   2f378:	10bffea0 	cmpeqi	r2,r2,-6
   2f37c:	1000191e 	bne	r2,zero,2f3e4 <alt_avalon_i2c_master_tx_rx+0x190>
   2f380:	e0bff917 	ldw	r2,-28(fp)
   2f384:	10bffee0 	cmpeqi	r2,r2,-5
   2f388:	1000161e 	bne	r2,zero,2f3e4 <alt_avalon_i2c_master_tx_rx+0x190>
   2f38c:	e0bff917 	ldw	r2,-28(fp)
   2f390:	10bffe58 	cmpnei	r2,r2,-7
   2f394:	1000011e 	bne	r2,zero,2f39c <alt_avalon_i2c_master_tx_rx+0x148>
   2f398:	00001206 	br	2f3e4 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   2f39c:	00800044 	movi	r2,1
   2f3a0:	d8800015 	stw	r2,0(sp)
   2f3a4:	01c00044 	movi	r7,1
   2f3a8:	e1800217 	ldw	r6,8(fp)
   2f3ac:	e17ffe17 	ldw	r5,-8(fp)
   2f3b0:	e13ffb17 	ldw	r4,-20(fp)
   2f3b4:	002f7e00 	call	2f7e0 <alt_avalon_i2c_master_receive>
   2f3b8:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   2f3bc:	e0bff917 	ldw	r2,-28(fp)
   2f3c0:	10bffea0 	cmpeqi	r2,r2,-6
   2f3c4:	1000061e 	bne	r2,zero,2f3e0 <alt_avalon_i2c_master_tx_rx+0x18c>
   2f3c8:	e0bff917 	ldw	r2,-28(fp)
   2f3cc:	10bffee0 	cmpeqi	r2,r2,-5
   2f3d0:	1000031e 	bne	r2,zero,2f3e0 <alt_avalon_i2c_master_tx_rx+0x18c>
   2f3d4:	e0bff917 	ldw	r2,-28(fp)
   2f3d8:	10bffe58 	cmpnei	r2,r2,-7
   2f3dc:	1000081e 	bne	r2,zero,2f400 <alt_avalon_i2c_master_tx_rx+0x1ac>
   2f3e0:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   2f3e4:	e0bffa17 	ldw	r2,-24(fp)
   2f3e8:	10ffffc4 	addi	r3,r2,-1
   2f3ec:	e0fffa15 	stw	r3,-24(fp)
   2f3f0:	103fd41e 	bne	r2,zero,2f344 <__alt_data_end+0xf802f344>
   2f3f4:	00000306 	br	2f404 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   2f3f8:	0001883a 	nop
   2f3fc:	00000106 	br	2f404 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   2f400:	0001883a 	nop
      }
    }
    
    return status;
   2f404:	e0bff917 	ldw	r2,-28(fp)
}                                       
   2f408:	e037883a 	mov	sp,fp
   2f40c:	dfc00117 	ldw	ra,4(sp)
   2f410:	df000017 	ldw	fp,0(sp)
   2f414:	dec00204 	addi	sp,sp,8
   2f418:	f800283a 	ret

0002f41c <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2f41c:	defff704 	addi	sp,sp,-36
   2f420:	dfc00815 	stw	ra,32(sp)
   2f424:	df000715 	stw	fp,28(sp)
   2f428:	df000704 	addi	fp,sp,28
   2f42c:	e13ffb15 	stw	r4,-20(fp)
   2f430:	e17ffc15 	stw	r5,-16(fp)
   2f434:	e1bffd15 	stw	r6,-12(fp)
   2f438:	3807883a 	mov	r3,r7
   2f43c:	e0800217 	ldw	r2,8(fp)
   2f440:	e0fffe05 	stb	r3,-8(fp)
   2f444:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f448:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   2f44c:	e0bffd17 	ldw	r2,-12(fp)
   2f450:	1089c424 	muli	r2,r2,10000
   2f454:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   2f458:	e0bffd17 	ldw	r2,-12(fp)
   2f45c:	1000021e 	bne	r2,zero,2f468 <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f460:	0005883a 	mov	r2,zero
   2f464:	00005706 	br	2f5c4 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f468:	e0bffe03 	ldbu	r2,-8(fp)
   2f46c:	10000a1e 	bne	r2,zero,2f498 <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f470:	e13ffb17 	ldw	r4,-20(fp)
   2f474:	002e6a00 	call	2e6a0 <alt_avalon_i2c_enable>
   2f478:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f47c:	e0bffa17 	ldw	r2,-24(fp)
   2f480:	10000226 	beq	r2,zero,2f48c <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   2f484:	e0bffa17 	ldw	r2,-24(fp)
   2f488:	00004e06 	br	2f5c4 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f48c:	01400704 	movi	r5,28
   2f490:	e13ffb17 	ldw	r4,-20(fp)
   2f494:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2f498:	e0bffe03 	ldbu	r2,-8(fp)
   2f49c:	100d883a 	mov	r6,r2
   2f4a0:	000b883a 	mov	r5,zero
   2f4a4:	e13ffb17 	ldw	r4,-20(fp)
   2f4a8:	002ed080 	call	2ed08 <alt_avalon_i2c_send_address>
   2f4ac:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   2f4b0:	e0bffa17 	ldw	r2,-24(fp)
   2f4b4:	1000271e 	bne	r2,zero,2f554 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f4b8:	00000f06 	br	2f4f8 <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f4bc:	e0bffc17 	ldw	r2,-16(fp)
   2f4c0:	10800003 	ldbu	r2,0(r2)
   2f4c4:	10803fcc 	andi	r2,r2,255
   2f4c8:	000f883a 	mov	r7,zero
   2f4cc:	000d883a 	mov	r6,zero
   2f4d0:	100b883a 	mov	r5,r2
   2f4d4:	e13ffb17 	ldw	r4,-20(fp)
   2f4d8:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2f4dc:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   2f4e0:	e0bffc17 	ldw	r2,-16(fp)
   2f4e4:	10800044 	addi	r2,r2,1
   2f4e8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f4ec:	e0bffd17 	ldw	r2,-12(fp)
   2f4f0:	10bfffc4 	addi	r2,r2,-1
   2f4f4:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f4f8:	e0bffd17 	ldw	r2,-12(fp)
   2f4fc:	108000b0 	cmpltui	r2,r2,2
   2f500:	1000021e 	bne	r2,zero,2f50c <alt_avalon_i2c_master_transmit+0xf0>
   2f504:	e0bffa17 	ldw	r2,-24(fp)
   2f508:	103fec26 	beq	r2,zero,2f4bc <__alt_data_end+0xf802f4bc>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f50c:	e0bffa17 	ldw	r2,-24(fp)
   2f510:	1000101e 	bne	r2,zero,2f554 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f514:	e0bffc17 	ldw	r2,-16(fp)
   2f518:	10800003 	ldbu	r2,0(r2)
   2f51c:	10803fcc 	andi	r2,r2,255
   2f520:	e0ffff03 	ldbu	r3,-4(fp)
   2f524:	180f883a 	mov	r7,r3
   2f528:	000d883a 	mov	r6,zero
   2f52c:	100b883a 	mov	r5,r2
   2f530:	e13ffb17 	ldw	r4,-20(fp)
   2f534:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2f538:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   2f53c:	e0bffc17 	ldw	r2,-16(fp)
   2f540:	10800044 	addi	r2,r2,1
   2f544:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f548:	e0bffd17 	ldw	r2,-12(fp)
   2f54c:	10bfffc4 	addi	r2,r2,-1
   2f550:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2f554:	e0bfff03 	ldbu	r2,-4(fp)
   2f558:	1000101e 	bne	r2,zero,2f59c <alt_avalon_i2c_master_transmit+0x180>
   2f55c:	e0bffa17 	ldw	r2,-24(fp)
   2f560:	10001726 	beq	r2,zero,2f5c0 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f564:	00000d06 	br	2f59c <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f568:	e0bff917 	ldw	r2,-28(fp)
   2f56c:	108002a8 	cmpgeui	r2,r2,10
   2f570:	1000021e 	bne	r2,zero,2f57c <alt_avalon_i2c_master_transmit+0x160>
   2f574:	0109c404 	movi	r4,10000
   2f578:	00314840 	call	31484 <alt_busy_sleep>
            if (--timeout == 0)
   2f57c:	e0bff917 	ldw	r2,-28(fp)
   2f580:	10bfffc4 	addi	r2,r2,-1
   2f584:	e0bff915 	stw	r2,-28(fp)
   2f588:	e0bff917 	ldw	r2,-28(fp)
   2f58c:	1000031e 	bne	r2,zero,2f59c <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f590:	00bfff84 	movi	r2,-2
   2f594:	e0bffa15 	stw	r2,-24(fp)
               break;
   2f598:	00000306 	br	2f5a8 <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f59c:	e13ffb17 	ldw	r4,-20(fp)
   2f5a0:	002ea900 	call	2ea90 <alt_avalon_i2c_is_busy>
   2f5a4:	103ff01e 	bne	r2,zero,2f568 <__alt_data_end+0xf802f568>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   2f5a8:	e0bffa04 	addi	r2,fp,-24
   2f5ac:	100b883a 	mov	r5,r2
   2f5b0:	e13ffb17 	ldw	r4,-20(fp)
   2f5b4:	002ee640 	call	2ee64 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f5b8:	e13ffb17 	ldw	r4,-20(fp)
   2f5bc:	002e7380 	call	2e738 <alt_avalon_i2c_disable>
    }


    return status;
   2f5c0:	e0bffa17 	ldw	r2,-24(fp)
}
   2f5c4:	e037883a 	mov	sp,fp
   2f5c8:	dfc00117 	ldw	ra,4(sp)
   2f5cc:	df000017 	ldw	fp,0(sp)
   2f5d0:	dec00204 	addi	sp,sp,8
   2f5d4:	f800283a 	ret

0002f5d8 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   2f5d8:	defff604 	addi	sp,sp,-40
   2f5dc:	dfc00915 	stw	ra,36(sp)
   2f5e0:	df000815 	stw	fp,32(sp)
   2f5e4:	df000804 	addi	fp,sp,32
   2f5e8:	e13ffb15 	stw	r4,-20(fp)
   2f5ec:	e17ffc15 	stw	r5,-16(fp)
   2f5f0:	e1bffd15 	stw	r6,-12(fp)
   2f5f4:	3807883a 	mov	r3,r7
   2f5f8:	e0800217 	ldw	r2,8(fp)
   2f5fc:	e0fffe05 	stb	r3,-8(fp)
   2f600:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f604:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   2f608:	e0bffd17 	ldw	r2,-12(fp)
   2f60c:	1089c424 	muli	r2,r2,10000
   2f610:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2f614:	e0bffb17 	ldw	r2,-20(fp)
   2f618:	10800717 	ldw	r2,28(r2)
   2f61c:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   2f620:	e0bffd17 	ldw	r2,-12(fp)
   2f624:	1000021e 	bne	r2,zero,2f630 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f628:	0005883a 	mov	r2,zero
   2f62c:	00006706 	br	2f7cc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2f630:	e0bffb17 	ldw	r2,-20(fp)
   2f634:	10c00617 	ldw	r3,24(r2)
   2f638:	008000f4 	movhi	r2,3
   2f63c:	10b8c904 	addi	r2,r2,-7388
   2f640:	18800226 	beq	r3,r2,2f64c <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2f644:	00bfff44 	movi	r2,-3
   2f648:	00006006 	br	2f7cc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f64c:	e0bffe03 	ldbu	r2,-8(fp)
   2f650:	10000a1e 	bne	r2,zero,2f67c <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f654:	e13ffb17 	ldw	r4,-20(fp)
   2f658:	002e6a00 	call	2e6a0 <alt_avalon_i2c_enable>
   2f65c:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f660:	e0bff817 	ldw	r2,-32(fp)
   2f664:	10000226 	beq	r2,zero,2f670 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   2f668:	e0bff817 	ldw	r2,-32(fp)
   2f66c:	00005706 	br	2f7cc <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f670:	01400704 	movi	r5,28
   2f674:	e13ffb17 	ldw	r4,-20(fp)
   2f678:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   2f67c:	e0bffe03 	ldbu	r2,-8(fp)
   2f680:	100d883a 	mov	r6,r2
   2f684:	000b883a 	mov	r5,zero
   2f688:	e13ffb17 	ldw	r4,-20(fp)
   2f68c:	002ed080 	call	2ed08 <alt_avalon_i2c_send_address>
   2f690:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   2f694:	e0bff817 	ldw	r2,-32(fp)
   2f698:	1000271e 	bne	r2,zero,2f738 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f69c:	00000f06 	br	2f6dc <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f6a0:	e0bffc17 	ldw	r2,-16(fp)
   2f6a4:	10800003 	ldbu	r2,0(r2)
   2f6a8:	10803fcc 	andi	r2,r2,255
   2f6ac:	000f883a 	mov	r7,zero
   2f6b0:	000d883a 	mov	r6,zero
   2f6b4:	100b883a 	mov	r5,r2
   2f6b8:	e13ffb17 	ldw	r4,-20(fp)
   2f6bc:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2f6c0:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   2f6c4:	e0bffc17 	ldw	r2,-16(fp)
   2f6c8:	10800044 	addi	r2,r2,1
   2f6cc:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f6d0:	e0bffd17 	ldw	r2,-12(fp)
   2f6d4:	10bfffc4 	addi	r2,r2,-1
   2f6d8:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   2f6dc:	e0bffd17 	ldw	r2,-12(fp)
   2f6e0:	108000b0 	cmpltui	r2,r2,2
   2f6e4:	1000021e 	bne	r2,zero,2f6f0 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   2f6e8:	e0bff817 	ldw	r2,-32(fp)
   2f6ec:	103fec26 	beq	r2,zero,2f6a0 <__alt_data_end+0xf802f6a0>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f6f0:	e0bff817 	ldw	r2,-32(fp)
   2f6f4:	1000101e 	bne	r2,zero,2f738 <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f6f8:	e0bffc17 	ldw	r2,-16(fp)
   2f6fc:	10800003 	ldbu	r2,0(r2)
   2f700:	10803fcc 	andi	r2,r2,255
   2f704:	e0ffff03 	ldbu	r3,-4(fp)
   2f708:	180f883a 	mov	r7,r3
   2f70c:	000d883a 	mov	r6,zero
   2f710:	100b883a 	mov	r5,r2
   2f714:	e13ffb17 	ldw	r4,-20(fp)
   2f718:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2f71c:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   2f720:	e0bffc17 	ldw	r2,-16(fp)
   2f724:	10800044 	addi	r2,r2,1
   2f728:	e0bffc15 	stw	r2,-16(fp)
            --size;
   2f72c:	e0bffd17 	ldw	r2,-12(fp)
   2f730:	10bfffc4 	addi	r2,r2,-1
   2f734:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2f738:	e0bff817 	ldw	r2,-32(fp)
   2f73c:	10001426 	beq	r2,zero,2f790 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f740:	00000d06 	br	2f778 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   2f744:	e0bff917 	ldw	r2,-28(fp)
   2f748:	108002a8 	cmpgeui	r2,r2,10
   2f74c:	1000021e 	bne	r2,zero,2f758 <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   2f750:	0109c404 	movi	r4,10000
   2f754:	00314840 	call	31484 <alt_busy_sleep>
            if (--timeout == 0)
   2f758:	e0bff917 	ldw	r2,-28(fp)
   2f75c:	10bfffc4 	addi	r2,r2,-1
   2f760:	e0bff915 	stw	r2,-28(fp)
   2f764:	e0bff917 	ldw	r2,-28(fp)
   2f768:	1000031e 	bne	r2,zero,2f778 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f76c:	00bfff84 	movi	r2,-2
   2f770:	e0bff815 	stw	r2,-32(fp)
               break;
   2f774:	00000306 	br	2f784 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f778:	e13ffb17 	ldw	r4,-20(fp)
   2f77c:	002ea900 	call	2ea90 <alt_avalon_i2c_is_busy>
   2f780:	103ff01e 	bne	r2,zero,2f744 <__alt_data_end+0xf802f744>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f784:	e13ffb17 	ldw	r4,-20(fp)
   2f788:	002e7380 	call	2e738 <alt_avalon_i2c_disable>
   2f78c:	00000e06 	br	2f7c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   2f790:	e0bfff03 	ldbu	r2,-4(fp)
   2f794:	10000c26 	beq	r2,zero,2f7c8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f798:	01400704 	movi	r5,28
   2f79c:	e13ffb17 	ldw	r4,-20(fp)
   2f7a0:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   2f7a4:	000b883a 	mov	r5,zero
   2f7a8:	e13ffb17 	ldw	r4,-20(fp)
   2f7ac:	002febc0 	call	2febc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   2f7b0:	e0bffa17 	ldw	r2,-24(fp)
   2f7b4:	00c00044 	movi	r3,1
   2f7b8:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   2f7bc:	01400044 	movi	r5,1
   2f7c0:	e13ffb17 	ldw	r4,-20(fp)
   2f7c4:	002fd180 	call	2fd18 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   2f7c8:	e0bff817 	ldw	r2,-32(fp)
}
   2f7cc:	e037883a 	mov	sp,fp
   2f7d0:	dfc00117 	ldw	ra,4(sp)
   2f7d4:	df000017 	ldw	fp,0(sp)
   2f7d8:	dec00204 	addi	sp,sp,8
   2f7dc:	f800283a 	ret

0002f7e0 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2f7e0:	defff404 	addi	sp,sp,-48
   2f7e4:	dfc00b15 	stw	ra,44(sp)
   2f7e8:	df000a15 	stw	fp,40(sp)
   2f7ec:	df000a04 	addi	fp,sp,40
   2f7f0:	e13ffb15 	stw	r4,-20(fp)
   2f7f4:	e17ffc15 	stw	r5,-16(fp)
   2f7f8:	e1bffd15 	stw	r6,-12(fp)
   2f7fc:	3807883a 	mov	r3,r7
   2f800:	e0800217 	ldw	r2,8(fp)
   2f804:	e0fffe05 	stb	r3,-8(fp)
   2f808:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2f80c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   2f810:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   2f814:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   2f818:	e0bffd17 	ldw	r2,-12(fp)
   2f81c:	1000021e 	bne	r2,zero,2f828 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2f820:	0005883a 	mov	r2,zero
   2f824:	00006c06 	br	2f9d8 <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2f828:	e0bffe03 	ldbu	r2,-8(fp)
   2f82c:	10000a1e 	bne	r2,zero,2f858 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2f830:	e13ffb17 	ldw	r4,-20(fp)
   2f834:	002e6a00 	call	2e6a0 <alt_avalon_i2c_enable>
   2f838:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2f83c:	e0bff917 	ldw	r2,-28(fp)
   2f840:	10000226 	beq	r2,zero,2f84c <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   2f844:	e0bff917 	ldw	r2,-28(fp)
   2f848:	00006306 	br	2f9d8 <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2f84c:	01400704 	movi	r5,28
   2f850:	e13ffb17 	ldw	r4,-20(fp)
   2f854:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2f858:	e0bffe03 	ldbu	r2,-8(fp)
   2f85c:	100d883a 	mov	r6,r2
   2f860:	01400044 	movi	r5,1
   2f864:	e13ffb17 	ldw	r4,-20(fp)
   2f868:	002ed080 	call	2ed08 <alt_avalon_i2c_send_address>
   2f86c:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2f870:	e0bff917 	ldw	r2,-28(fp)
   2f874:	1000341e 	bne	r2,zero,2f948 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f878:	00001906 	br	2f8e0 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2f87c:	000f883a 	mov	r7,zero
   2f880:	000d883a 	mov	r6,zero
   2f884:	000b883a 	mov	r5,zero
   2f888:	e13ffb17 	ldw	r4,-20(fp)
   2f88c:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2f890:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   2f894:	e0bff817 	ldw	r2,-32(fp)
   2f898:	10800044 	addi	r2,r2,1
   2f89c:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   2f8a0:	e0bff917 	ldw	r2,-28(fp)
   2f8a4:	10000e1e 	bne	r2,zero,2f8e0 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   2f8a8:	e0bffa04 	addi	r2,fp,-24
   2f8ac:	100f883a 	mov	r7,r2
   2f8b0:	000d883a 	mov	r6,zero
   2f8b4:	e17ffc17 	ldw	r5,-16(fp)
   2f8b8:	e13ffb17 	ldw	r4,-20(fp)
   2f8bc:	002ead40 	call	2ead4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   2f8c0:	e0bffa17 	ldw	r2,-24(fp)
   2f8c4:	e0fffc17 	ldw	r3,-16(fp)
   2f8c8:	1885883a 	add	r2,r3,r2
   2f8cc:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   2f8d0:	e0bffa17 	ldw	r2,-24(fp)
   2f8d4:	e0fff717 	ldw	r3,-36(fp)
   2f8d8:	1885883a 	add	r2,r3,r2
   2f8dc:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2f8e0:	e0bffd17 	ldw	r2,-12(fp)
   2f8e4:	10bfffc4 	addi	r2,r2,-1
   2f8e8:	e0fff817 	ldw	r3,-32(fp)
   2f8ec:	1880022e 	bgeu	r3,r2,2f8f8 <alt_avalon_i2c_master_receive+0x118>
   2f8f0:	e0bff917 	ldw	r2,-28(fp)
   2f8f4:	103fe126 	beq	r2,zero,2f87c <__alt_data_end+0xf802f87c>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2f8f8:	e0bff917 	ldw	r2,-28(fp)
   2f8fc:	1000121e 	bne	r2,zero,2f948 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2f900:	e0bfff03 	ldbu	r2,-4(fp)
   2f904:	100f883a 	mov	r7,r2
   2f908:	000d883a 	mov	r6,zero
   2f90c:	000b883a 	mov	r5,zero
   2f910:	e13ffb17 	ldw	r4,-20(fp)
   2f914:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2f918:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2f91c:	00000a06 	br	2f948 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   2f920:	e17ffc17 	ldw	r5,-16(fp)
   2f924:	e13ffb17 	ldw	r4,-20(fp)
   2f928:	002eb7c0 	call	2eb7c <alt_avalon_i2c_rx_read>
   2f92c:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   2f930:	e0bffc17 	ldw	r2,-16(fp)
   2f934:	10800044 	addi	r2,r2,1
   2f938:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   2f93c:	e0bff717 	ldw	r2,-36(fp)
   2f940:	10800044 	addi	r2,r2,1
   2f944:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   2f948:	e0fff717 	ldw	r3,-36(fp)
   2f94c:	e0bffd17 	ldw	r2,-12(fp)
   2f950:	1880022e 	bgeu	r3,r2,2f95c <alt_avalon_i2c_master_receive+0x17c>
   2f954:	e0bff917 	ldw	r2,-28(fp)
   2f958:	103ff126 	beq	r2,zero,2f920 <__alt_data_end+0xf802f920>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   2f95c:	e0bfff03 	ldbu	r2,-4(fp)
   2f960:	1000021e 	bne	r2,zero,2f96c <alt_avalon_i2c_master_receive+0x18c>
   2f964:	e0bff917 	ldw	r2,-28(fp)
   2f968:	10001a26 	beq	r2,zero,2f9d4 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   2f96c:	e0bffd17 	ldw	r2,-12(fp)
   2f970:	1089c424 	muli	r2,r2,10000
   2f974:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f978:	00000d06 	br	2f9b0 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2f97c:	e0bff617 	ldw	r2,-40(fp)
   2f980:	108002a8 	cmpgeui	r2,r2,10
   2f984:	1000021e 	bne	r2,zero,2f990 <alt_avalon_i2c_master_receive+0x1b0>
   2f988:	0109c404 	movi	r4,10000
   2f98c:	00314840 	call	31484 <alt_busy_sleep>
            if (--timeout == 0)
   2f990:	e0bff617 	ldw	r2,-40(fp)
   2f994:	10bfffc4 	addi	r2,r2,-1
   2f998:	e0bff615 	stw	r2,-40(fp)
   2f99c:	e0bff617 	ldw	r2,-40(fp)
   2f9a0:	1000031e 	bne	r2,zero,2f9b0 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2f9a4:	00bfff84 	movi	r2,-2
   2f9a8:	e0bff915 	stw	r2,-28(fp)
               break;
   2f9ac:	00000306 	br	2f9bc <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2f9b0:	e13ffb17 	ldw	r4,-20(fp)
   2f9b4:	002ea900 	call	2ea90 <alt_avalon_i2c_is_busy>
   2f9b8:	103ff01e 	bne	r2,zero,2f97c <__alt_data_end+0xf802f97c>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   2f9bc:	e0bff904 	addi	r2,fp,-28
   2f9c0:	100b883a 	mov	r5,r2
   2f9c4:	e13ffb17 	ldw	r4,-20(fp)
   2f9c8:	002ee640 	call	2ee64 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2f9cc:	e13ffb17 	ldw	r4,-20(fp)
   2f9d0:	002e7380 	call	2e738 <alt_avalon_i2c_disable>
    }

    return status;
   2f9d4:	e0bff917 	ldw	r2,-28(fp)
}
   2f9d8:	e037883a 	mov	sp,fp
   2f9dc:	dfc00117 	ldw	ra,4(sp)
   2f9e0:	df000017 	ldw	fp,0(sp)
   2f9e4:	dec00204 	addi	sp,sp,8
   2f9e8:	f800283a 	ret

0002f9ec <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   2f9ec:	defff504 	addi	sp,sp,-44
   2f9f0:	dfc00a15 	stw	ra,40(sp)
   2f9f4:	df000915 	stw	fp,36(sp)
   2f9f8:	df000904 	addi	fp,sp,36
   2f9fc:	e13ffb15 	stw	r4,-20(fp)
   2fa00:	e17ffc15 	stw	r5,-16(fp)
   2fa04:	e1bffd15 	stw	r6,-12(fp)
   2fa08:	3807883a 	mov	r3,r7
   2fa0c:	e0800217 	ldw	r2,8(fp)
   2fa10:	e0fffe05 	stb	r3,-8(fp)
   2fa14:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   2fa18:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   2fa1c:	e0bffb17 	ldw	r2,-20(fp)
   2fa20:	10800717 	ldw	r2,28(r2)
   2fa24:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   2fa28:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   2fa2c:	e0bffd17 	ldw	r2,-12(fp)
   2fa30:	1000021e 	bne	r2,zero,2fa3c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   2fa34:	0005883a 	mov	r2,zero
   2fa38:	00006206 	br	2fbc4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   2fa3c:	e0bffb17 	ldw	r2,-20(fp)
   2fa40:	10c00617 	ldw	r3,24(r2)
   2fa44:	008000f4 	movhi	r2,3
   2fa48:	10b8c904 	addi	r2,r2,-7388
   2fa4c:	18800226 	beq	r3,r2,2fa58 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   2fa50:	00bfff44 	movi	r2,-3
   2fa54:	00005b06 	br	2fbc4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   2fa58:	e0bffe03 	ldbu	r2,-8(fp)
   2fa5c:	10000a1e 	bne	r2,zero,2fa88 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   2fa60:	e13ffb17 	ldw	r4,-20(fp)
   2fa64:	002e6a00 	call	2e6a0 <alt_avalon_i2c_enable>
   2fa68:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   2fa6c:	e0bff717 	ldw	r2,-36(fp)
   2fa70:	10000226 	beq	r2,zero,2fa7c <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   2fa74:	e0bff717 	ldw	r2,-36(fp)
   2fa78:	00005206 	br	2fbc4 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2fa7c:	01400704 	movi	r5,28
   2fa80:	e13ffb17 	ldw	r4,-20(fp)
   2fa84:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   2fa88:	e0bffe03 	ldbu	r2,-8(fp)
   2fa8c:	100d883a 	mov	r6,r2
   2fa90:	01400044 	movi	r5,1
   2fa94:	e13ffb17 	ldw	r4,-20(fp)
   2fa98:	002ed080 	call	2ed08 <alt_avalon_i2c_send_address>
   2fa9c:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   2faa0:	e0bff717 	ldw	r2,-36(fp)
   2faa4:	1000191e 	bne	r2,zero,2fb0c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2faa8:	00000906 	br	2fad0 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   2faac:	000f883a 	mov	r7,zero
   2fab0:	000d883a 	mov	r6,zero
   2fab4:	000b883a 	mov	r5,zero
   2fab8:	e13ffb17 	ldw	r4,-20(fp)
   2fabc:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2fac0:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   2fac4:	e0bff917 	ldw	r2,-28(fp)
   2fac8:	10800044 	addi	r2,r2,1
   2facc:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   2fad0:	e0bffd17 	ldw	r2,-12(fp)
   2fad4:	10bfffc4 	addi	r2,r2,-1
   2fad8:	e0fff917 	ldw	r3,-28(fp)
   2fadc:	1880022e 	bgeu	r3,r2,2fae8 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   2fae0:	e0bff717 	ldw	r2,-36(fp)
   2fae4:	103ff126 	beq	r2,zero,2faac <__alt_data_end+0xf802faac>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   2fae8:	e0bff717 	ldw	r2,-36(fp)
   2faec:	1000071e 	bne	r2,zero,2fb0c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   2faf0:	e0bfff03 	ldbu	r2,-4(fp)
   2faf4:	100f883a 	mov	r7,r2
   2faf8:	000d883a 	mov	r6,zero
   2fafc:	000b883a 	mov	r5,zero
   2fb00:	e13ffb17 	ldw	r4,-20(fp)
   2fb04:	002ec240 	call	2ec24 <alt_avalon_i2c_cmd_write>
   2fb08:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   2fb0c:	e0bff717 	ldw	r2,-36(fp)
   2fb10:	10001726 	beq	r2,zero,2fb70 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   2fb14:	e0bffd17 	ldw	r2,-12(fp)
   2fb18:	1089c424 	muli	r2,r2,10000
   2fb1c:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2fb20:	00000d06 	br	2fb58 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   2fb24:	e0bff817 	ldw	r2,-32(fp)
   2fb28:	108002a8 	cmpgeui	r2,r2,10
   2fb2c:	1000021e 	bne	r2,zero,2fb38 <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   2fb30:	0109c404 	movi	r4,10000
   2fb34:	00314840 	call	31484 <alt_busy_sleep>
            if (--timeout == 0)
   2fb38:	e0bff817 	ldw	r2,-32(fp)
   2fb3c:	10bfffc4 	addi	r2,r2,-1
   2fb40:	e0bff815 	stw	r2,-32(fp)
   2fb44:	e0bff817 	ldw	r2,-32(fp)
   2fb48:	1000031e 	bne	r2,zero,2fb58 <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   2fb4c:	00bfff84 	movi	r2,-2
   2fb50:	e0bff715 	stw	r2,-36(fp)
               break;
   2fb54:	00000306 	br	2fb64 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   2fb58:	e13ffb17 	ldw	r4,-20(fp)
   2fb5c:	002ea900 	call	2ea90 <alt_avalon_i2c_is_busy>
   2fb60:	103ff01e 	bne	r2,zero,2fb24 <__alt_data_end+0xf802fb24>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   2fb64:	e13ffb17 	ldw	r4,-20(fp)
   2fb68:	002e7380 	call	2e738 <alt_avalon_i2c_disable>
   2fb6c:	00001406 	br	2fbc0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   2fb70:	e0bfff03 	ldbu	r2,-4(fp)
   2fb74:	10001226 	beq	r2,zero,2fbc0 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   2fb78:	01400704 	movi	r5,28
   2fb7c:	e13ffb17 	ldw	r4,-20(fp)
   2fb80:	002fc740 	call	2fc74 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   2fb84:	000b883a 	mov	r5,zero
   2fb88:	e13ffb17 	ldw	r4,-20(fp)
   2fb8c:	002fe0c0 	call	2fe0c <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   2fb90:	e0bffa17 	ldw	r2,-24(fp)
   2fb94:	00c00084 	movi	r3,2
   2fb98:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   2fb9c:	e0bffa17 	ldw	r2,-24(fp)
   2fba0:	e0fffc17 	ldw	r3,-16(fp)
   2fba4:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   2fba8:	e0bffa17 	ldw	r2,-24(fp)
   2fbac:	e0fffd17 	ldw	r3,-12(fp)
   2fbb0:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   2fbb4:	01400084 	movi	r5,2
   2fbb8:	e13ffb17 	ldw	r4,-20(fp)
   2fbbc:	002fd180 	call	2fd18 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   2fbc0:	e0bff717 	ldw	r2,-36(fp)
}
   2fbc4:	e037883a 	mov	sp,fp
   2fbc8:	dfc00117 	ldw	ra,4(sp)
   2fbcc:	df000017 	ldw	fp,0(sp)
   2fbd0:	dec00204 	addi	sp,sp,8
   2fbd4:	f800283a 	ret

0002fbd8 <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   2fbd8:	defffd04 	addi	sp,sp,-12
   2fbdc:	df000215 	stw	fp,8(sp)
   2fbe0:	df000204 	addi	fp,sp,8
   2fbe4:	e13ffe15 	stw	r4,-8(fp)
   2fbe8:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   2fbec:	e0bffe17 	ldw	r2,-8(fp)
   2fbf0:	10800317 	ldw	r2,12(r2)
   2fbf4:	10800404 	addi	r2,r2,16
   2fbf8:	10c00037 	ldwio	r3,0(r2)
   2fbfc:	e0bffe17 	ldw	r2,-8(fp)
   2fc00:	10800317 	ldw	r2,12(r2)
   2fc04:	10800304 	addi	r2,r2,12
   2fc08:	10800037 	ldwio	r2,0(r2)
   2fc0c:	1884703a 	and	r2,r3,r2
   2fc10:	1007883a 	mov	r3,r2
   2fc14:	e0bfff17 	ldw	r2,-4(fp)
   2fc18:	10c00015 	stw	r3,0(r2)
}
   2fc1c:	0001883a 	nop
   2fc20:	e037883a 	mov	sp,fp
   2fc24:	df000017 	ldw	fp,0(sp)
   2fc28:	dec00104 	addi	sp,sp,4
   2fc2c:	f800283a 	ret

0002fc30 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   2fc30:	defffd04 	addi	sp,sp,-12
   2fc34:	df000215 	stw	fp,8(sp)
   2fc38:	df000204 	addi	fp,sp,8
   2fc3c:	e13ffe15 	stw	r4,-8(fp)
   2fc40:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   2fc44:	e0bffe17 	ldw	r2,-8(fp)
   2fc48:	10800317 	ldw	r2,12(r2)
   2fc4c:	10800404 	addi	r2,r2,16
   2fc50:	10800037 	ldwio	r2,0(r2)
   2fc54:	1007883a 	mov	r3,r2
   2fc58:	e0bfff17 	ldw	r2,-4(fp)
   2fc5c:	10c00015 	stw	r3,0(r2)
}
   2fc60:	0001883a 	nop
   2fc64:	e037883a 	mov	sp,fp
   2fc68:	df000017 	ldw	fp,0(sp)
   2fc6c:	dec00104 	addi	sp,sp,4
   2fc70:	f800283a 	ret

0002fc74 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fc74:	defffd04 	addi	sp,sp,-12
   2fc78:	df000215 	stw	fp,8(sp)
   2fc7c:	df000204 	addi	fp,sp,8
   2fc80:	e13ffe15 	stw	r4,-8(fp)
   2fc84:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   2fc88:	e0bffe17 	ldw	r2,-8(fp)
   2fc8c:	10800317 	ldw	r2,12(r2)
   2fc90:	10800404 	addi	r2,r2,16
   2fc94:	e0ffff17 	ldw	r3,-4(fp)
   2fc98:	10c00035 	stwio	r3,0(r2)
}
   2fc9c:	0001883a 	nop
   2fca0:	e037883a 	mov	sp,fp
   2fca4:	df000017 	ldw	fp,0(sp)
   2fca8:	dec00104 	addi	sp,sp,4
   2fcac:	f800283a 	ret

0002fcb0 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fcb0:	defffb04 	addi	sp,sp,-20
   2fcb4:	dfc00415 	stw	ra,16(sp)
   2fcb8:	df000315 	stw	fp,12(sp)
   2fcbc:	df000304 	addi	fp,sp,12
   2fcc0:	e13ffe15 	stw	r4,-8(fp)
   2fcc4:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2fcc8:	e17ffd04 	addi	r5,fp,-12
   2fccc:	e13ffe17 	ldw	r4,-8(fp)
   2fcd0:	002fd7c0 	call	2fd7c <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   2fcd4:	e0bfff17 	ldw	r2,-4(fp)
   2fcd8:	0086303a 	nor	r3,zero,r2
   2fcdc:	e0bffd17 	ldw	r2,-12(fp)
   2fce0:	1884703a 	and	r2,r3,r2
   2fce4:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2fce8:	e0bffe17 	ldw	r2,-8(fp)
   2fcec:	10800317 	ldw	r2,12(r2)
   2fcf0:	10800304 	addi	r2,r2,12
   2fcf4:	e0fffd17 	ldw	r3,-12(fp)
   2fcf8:	18c007cc 	andi	r3,r3,31
   2fcfc:	10c00035 	stwio	r3,0(r2)
}
   2fd00:	0001883a 	nop
   2fd04:	e037883a 	mov	sp,fp
   2fd08:	dfc00117 	ldw	ra,4(sp)
   2fd0c:	df000017 	ldw	fp,0(sp)
   2fd10:	dec00204 	addi	sp,sp,8
   2fd14:	f800283a 	ret

0002fd18 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   2fd18:	defffb04 	addi	sp,sp,-20
   2fd1c:	dfc00415 	stw	ra,16(sp)
   2fd20:	df000315 	stw	fp,12(sp)
   2fd24:	df000304 	addi	fp,sp,12
   2fd28:	e13ffe15 	stw	r4,-8(fp)
   2fd2c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   2fd30:	e17ffd04 	addi	r5,fp,-12
   2fd34:	e13ffe17 	ldw	r4,-8(fp)
   2fd38:	002fd7c0 	call	2fd7c <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   2fd3c:	e0fffd17 	ldw	r3,-12(fp)
   2fd40:	e0bfff17 	ldw	r2,-4(fp)
   2fd44:	1884b03a 	or	r2,r3,r2
   2fd48:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   2fd4c:	e0bffe17 	ldw	r2,-8(fp)
   2fd50:	10800317 	ldw	r2,12(r2)
   2fd54:	10800304 	addi	r2,r2,12
   2fd58:	e0fffd17 	ldw	r3,-12(fp)
   2fd5c:	18c007cc 	andi	r3,r3,31
   2fd60:	10c00035 	stwio	r3,0(r2)
}
   2fd64:	0001883a 	nop
   2fd68:	e037883a 	mov	sp,fp
   2fd6c:	dfc00117 	ldw	ra,4(sp)
   2fd70:	df000017 	ldw	fp,0(sp)
   2fd74:	dec00204 	addi	sp,sp,8
   2fd78:	f800283a 	ret

0002fd7c <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   2fd7c:	defffd04 	addi	sp,sp,-12
   2fd80:	df000215 	stw	fp,8(sp)
   2fd84:	df000204 	addi	fp,sp,8
   2fd88:	e13ffe15 	stw	r4,-8(fp)
   2fd8c:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   2fd90:	e0bffe17 	ldw	r2,-8(fp)
   2fd94:	10800317 	ldw	r2,12(r2)
   2fd98:	10800304 	addi	r2,r2,12
   2fd9c:	10800037 	ldwio	r2,0(r2)
   2fda0:	10c007cc 	andi	r3,r2,31
   2fda4:	e0bfff17 	ldw	r2,-4(fp)
   2fda8:	10c00015 	stw	r3,0(r2)
}
   2fdac:	0001883a 	nop
   2fdb0:	e037883a 	mov	sp,fp
   2fdb4:	df000017 	ldw	fp,0(sp)
   2fdb8:	dec00104 	addi	sp,sp,4
   2fdbc:	f800283a 	ret

0002fdc0 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   2fdc0:	defffd04 	addi	sp,sp,-12
   2fdc4:	df000215 	stw	fp,8(sp)
   2fdc8:	df000204 	addi	fp,sp,8
   2fdcc:	e13ffe15 	stw	r4,-8(fp)
   2fdd0:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   2fdd4:	e0bffe17 	ldw	r2,-8(fp)
   2fdd8:	10800317 	ldw	r2,12(r2)
   2fddc:	10800204 	addi	r2,r2,8
   2fde0:	10800037 	ldwio	r2,0(r2)
   2fde4:	10800c0c 	andi	r2,r2,48
   2fde8:	1005d13a 	srai	r2,r2,4
   2fdec:	1007883a 	mov	r3,r2
   2fdf0:	e0bfff17 	ldw	r2,-4(fp)
   2fdf4:	10c00015 	stw	r3,0(r2)
}
   2fdf8:	0001883a 	nop
   2fdfc:	e037883a 	mov	sp,fp
   2fe00:	df000017 	ldw	fp,0(sp)
   2fe04:	dec00104 	addi	sp,sp,4
   2fe08:	f800283a 	ret

0002fe0c <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   2fe0c:	defffd04 	addi	sp,sp,-12
   2fe10:	df000215 	stw	fp,8(sp)
   2fe14:	df000204 	addi	fp,sp,8
   2fe18:	e13ffe15 	stw	r4,-8(fp)
   2fe1c:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   2fe20:	e0bffe17 	ldw	r2,-8(fp)
   2fe24:	10800317 	ldw	r2,12(r2)
   2fe28:	10800204 	addi	r2,r2,8
   2fe2c:	e0fffe17 	ldw	r3,-8(fp)
   2fe30:	18c00317 	ldw	r3,12(r3)
   2fe34:	18c00204 	addi	r3,r3,8
   2fe38:	18c00037 	ldwio	r3,0(r3)
   2fe3c:	1809883a 	mov	r4,r3
   2fe40:	00fff3c4 	movi	r3,-49
   2fe44:	20c8703a 	and	r4,r4,r3
   2fe48:	e0ffff17 	ldw	r3,-4(fp)
   2fe4c:	1806913a 	slli	r3,r3,4
   2fe50:	18c00c0c 	andi	r3,r3,48
   2fe54:	20c6b03a 	or	r3,r4,r3
   2fe58:	10c00035 	stwio	r3,0(r2)
}
   2fe5c:	0001883a 	nop
   2fe60:	e037883a 	mov	sp,fp
   2fe64:	df000017 	ldw	fp,0(sp)
   2fe68:	dec00104 	addi	sp,sp,4
   2fe6c:	f800283a 	ret

0002fe70 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   2fe70:	defffd04 	addi	sp,sp,-12
   2fe74:	df000215 	stw	fp,8(sp)
   2fe78:	df000204 	addi	fp,sp,8
   2fe7c:	e13ffe15 	stw	r4,-8(fp)
   2fe80:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   2fe84:	e0bffe17 	ldw	r2,-8(fp)
   2fe88:	10800317 	ldw	r2,12(r2)
   2fe8c:	10800204 	addi	r2,r2,8
   2fe90:	10800037 	ldwio	r2,0(r2)
   2fe94:	1080030c 	andi	r2,r2,12
   2fe98:	1005d0ba 	srai	r2,r2,2
   2fe9c:	1007883a 	mov	r3,r2
   2fea0:	e0bfff17 	ldw	r2,-4(fp)
   2fea4:	10c00015 	stw	r3,0(r2)
}
   2fea8:	0001883a 	nop
   2feac:	e037883a 	mov	sp,fp
   2feb0:	df000017 	ldw	fp,0(sp)
   2feb4:	dec00104 	addi	sp,sp,4
   2feb8:	f800283a 	ret

0002febc <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   2febc:	defffd04 	addi	sp,sp,-12
   2fec0:	df000215 	stw	fp,8(sp)
   2fec4:	df000204 	addi	fp,sp,8
   2fec8:	e13ffe15 	stw	r4,-8(fp)
   2fecc:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   2fed0:	e0bffe17 	ldw	r2,-8(fp)
   2fed4:	10800317 	ldw	r2,12(r2)
   2fed8:	10c00204 	addi	r3,r2,8
   2fedc:	e0bffe17 	ldw	r2,-8(fp)
   2fee0:	10800317 	ldw	r2,12(r2)
   2fee4:	10800204 	addi	r2,r2,8
   2fee8:	10800037 	ldwio	r2,0(r2)
   2feec:	1009883a 	mov	r4,r2
   2fef0:	00bffcc4 	movi	r2,-13
   2fef4:	2088703a 	and	r4,r4,r2
   2fef8:	e0bfff17 	ldw	r2,-4(fp)
   2fefc:	1085883a 	add	r2,r2,r2
   2ff00:	1085883a 	add	r2,r2,r2
   2ff04:	1080030c 	andi	r2,r2,12
   2ff08:	2084b03a 	or	r2,r4,r2
   2ff0c:	18800035 	stwio	r2,0(r3)
}
   2ff10:	0001883a 	nop
   2ff14:	e037883a 	mov	sp,fp
   2ff18:	df000017 	ldw	fp,0(sp)
   2ff1c:	dec00104 	addi	sp,sp,4
   2ff20:	f800283a 	ret

0002ff24 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2ff24:	defffa04 	addi	sp,sp,-24
   2ff28:	dfc00515 	stw	ra,20(sp)
   2ff2c:	df000415 	stw	fp,16(sp)
   2ff30:	df000404 	addi	fp,sp,16
   2ff34:	e13ffd15 	stw	r4,-12(fp)
   2ff38:	e17ffe15 	stw	r5,-8(fp)
   2ff3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2ff40:	e0bffd17 	ldw	r2,-12(fp)
   2ff44:	10800017 	ldw	r2,0(r2)
   2ff48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2ff4c:	e0bffc17 	ldw	r2,-16(fp)
   2ff50:	10c00a04 	addi	r3,r2,40
   2ff54:	e0bffd17 	ldw	r2,-12(fp)
   2ff58:	10800217 	ldw	r2,8(r2)
   2ff5c:	100f883a 	mov	r7,r2
   2ff60:	e1bfff17 	ldw	r6,-4(fp)
   2ff64:	e17ffe17 	ldw	r5,-8(fp)
   2ff68:	1809883a 	mov	r4,r3
   2ff6c:	003054c0 	call	3054c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2ff70:	e037883a 	mov	sp,fp
   2ff74:	dfc00117 	ldw	ra,4(sp)
   2ff78:	df000017 	ldw	fp,0(sp)
   2ff7c:	dec00204 	addi	sp,sp,8
   2ff80:	f800283a 	ret

0002ff84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2ff84:	defffa04 	addi	sp,sp,-24
   2ff88:	dfc00515 	stw	ra,20(sp)
   2ff8c:	df000415 	stw	fp,16(sp)
   2ff90:	df000404 	addi	fp,sp,16
   2ff94:	e13ffd15 	stw	r4,-12(fp)
   2ff98:	e17ffe15 	stw	r5,-8(fp)
   2ff9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2ffa0:	e0bffd17 	ldw	r2,-12(fp)
   2ffa4:	10800017 	ldw	r2,0(r2)
   2ffa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2ffac:	e0bffc17 	ldw	r2,-16(fp)
   2ffb0:	10c00a04 	addi	r3,r2,40
   2ffb4:	e0bffd17 	ldw	r2,-12(fp)
   2ffb8:	10800217 	ldw	r2,8(r2)
   2ffbc:	100f883a 	mov	r7,r2
   2ffc0:	e1bfff17 	ldw	r6,-4(fp)
   2ffc4:	e17ffe17 	ldw	r5,-8(fp)
   2ffc8:	1809883a 	mov	r4,r3
   2ffcc:	00307680 	call	30768 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2ffd0:	e037883a 	mov	sp,fp
   2ffd4:	dfc00117 	ldw	ra,4(sp)
   2ffd8:	df000017 	ldw	fp,0(sp)
   2ffdc:	dec00204 	addi	sp,sp,8
   2ffe0:	f800283a 	ret

0002ffe4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2ffe4:	defffc04 	addi	sp,sp,-16
   2ffe8:	dfc00315 	stw	ra,12(sp)
   2ffec:	df000215 	stw	fp,8(sp)
   2fff0:	df000204 	addi	fp,sp,8
   2fff4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2fff8:	e0bfff17 	ldw	r2,-4(fp)
   2fffc:	10800017 	ldw	r2,0(r2)
   30000:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   30004:	e0bffe17 	ldw	r2,-8(fp)
   30008:	10c00a04 	addi	r3,r2,40
   3000c:	e0bfff17 	ldw	r2,-4(fp)
   30010:	10800217 	ldw	r2,8(r2)
   30014:	100b883a 	mov	r5,r2
   30018:	1809883a 	mov	r4,r3
   3001c:	00303f40 	call	303f4 <altera_avalon_jtag_uart_close>
}
   30020:	e037883a 	mov	sp,fp
   30024:	dfc00117 	ldw	ra,4(sp)
   30028:	df000017 	ldw	fp,0(sp)
   3002c:	dec00204 	addi	sp,sp,8
   30030:	f800283a 	ret

00030034 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   30034:	defffa04 	addi	sp,sp,-24
   30038:	dfc00515 	stw	ra,20(sp)
   3003c:	df000415 	stw	fp,16(sp)
   30040:	df000404 	addi	fp,sp,16
   30044:	e13ffd15 	stw	r4,-12(fp)
   30048:	e17ffe15 	stw	r5,-8(fp)
   3004c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   30050:	e0bffd17 	ldw	r2,-12(fp)
   30054:	10800017 	ldw	r2,0(r2)
   30058:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3005c:	e0bffc17 	ldw	r2,-16(fp)
   30060:	10800a04 	addi	r2,r2,40
   30064:	e1bfff17 	ldw	r6,-4(fp)
   30068:	e17ffe17 	ldw	r5,-8(fp)
   3006c:	1009883a 	mov	r4,r2
   30070:	003045c0 	call	3045c <altera_avalon_jtag_uart_ioctl>
}
   30074:	e037883a 	mov	sp,fp
   30078:	dfc00117 	ldw	ra,4(sp)
   3007c:	df000017 	ldw	fp,0(sp)
   30080:	dec00204 	addi	sp,sp,8
   30084:	f800283a 	ret

00030088 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   30088:	defffa04 	addi	sp,sp,-24
   3008c:	dfc00515 	stw	ra,20(sp)
   30090:	df000415 	stw	fp,16(sp)
   30094:	df000404 	addi	fp,sp,16
   30098:	e13ffd15 	stw	r4,-12(fp)
   3009c:	e17ffe15 	stw	r5,-8(fp)
   300a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   300a4:	e0bffd17 	ldw	r2,-12(fp)
   300a8:	00c00044 	movi	r3,1
   300ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   300b0:	e0bffd17 	ldw	r2,-12(fp)
   300b4:	10800017 	ldw	r2,0(r2)
   300b8:	10800104 	addi	r2,r2,4
   300bc:	1007883a 	mov	r3,r2
   300c0:	e0bffd17 	ldw	r2,-12(fp)
   300c4:	10800817 	ldw	r2,32(r2)
   300c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   300cc:	e0bffe17 	ldw	r2,-8(fp)
   300d0:	e0ffff17 	ldw	r3,-4(fp)
   300d4:	d8000015 	stw	zero,0(sp)
   300d8:	e1fffd17 	ldw	r7,-12(fp)
   300dc:	018000f4 	movhi	r6,3
   300e0:	31805204 	addi	r6,r6,328
   300e4:	180b883a 	mov	r5,r3
   300e8:	1009883a 	mov	r4,r2
   300ec:	0031a340 	call	31a34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   300f0:	e0bffd17 	ldw	r2,-12(fp)
   300f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   300f8:	e0bffd17 	ldw	r2,-12(fp)
   300fc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   30100:	d0e01d17 	ldw	r3,-32652(gp)
   30104:	e1fffd17 	ldw	r7,-12(fp)
   30108:	018000f4 	movhi	r6,3
   3010c:	3180d504 	addi	r6,r6,852
   30110:	180b883a 	mov	r5,r3
   30114:	1009883a 	mov	r4,r2
   30118:	00313580 	call	31358 <alt_alarm_start>
   3011c:	1000040e 	bge	r2,zero,30130 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   30120:	e0fffd17 	ldw	r3,-12(fp)
   30124:	00a00034 	movhi	r2,32768
   30128:	10bfffc4 	addi	r2,r2,-1
   3012c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   30130:	0001883a 	nop
   30134:	e037883a 	mov	sp,fp
   30138:	dfc00117 	ldw	ra,4(sp)
   3013c:	df000017 	ldw	fp,0(sp)
   30140:	dec00204 	addi	sp,sp,8
   30144:	f800283a 	ret

00030148 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   30148:	defff804 	addi	sp,sp,-32
   3014c:	df000715 	stw	fp,28(sp)
   30150:	df000704 	addi	fp,sp,28
   30154:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   30158:	e0bfff17 	ldw	r2,-4(fp)
   3015c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   30160:	e0bffb17 	ldw	r2,-20(fp)
   30164:	10800017 	ldw	r2,0(r2)
   30168:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3016c:	e0bffc17 	ldw	r2,-16(fp)
   30170:	10800104 	addi	r2,r2,4
   30174:	10800037 	ldwio	r2,0(r2)
   30178:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3017c:	e0bffd17 	ldw	r2,-12(fp)
   30180:	1080c00c 	andi	r2,r2,768
   30184:	10006d26 	beq	r2,zero,3033c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   30188:	e0bffd17 	ldw	r2,-12(fp)
   3018c:	1080400c 	andi	r2,r2,256
   30190:	10003526 	beq	r2,zero,30268 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   30194:	00800074 	movhi	r2,1
   30198:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3019c:	e0bffb17 	ldw	r2,-20(fp)
   301a0:	10800a17 	ldw	r2,40(r2)
   301a4:	10800044 	addi	r2,r2,1
   301a8:	1081ffcc 	andi	r2,r2,2047
   301ac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   301b0:	e0bffb17 	ldw	r2,-20(fp)
   301b4:	10c00b17 	ldw	r3,44(r2)
   301b8:	e0bffe17 	ldw	r2,-8(fp)
   301bc:	18801526 	beq	r3,r2,30214 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   301c0:	e0bffc17 	ldw	r2,-16(fp)
   301c4:	10800037 	ldwio	r2,0(r2)
   301c8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   301cc:	e0bff917 	ldw	r2,-28(fp)
   301d0:	10a0000c 	andi	r2,r2,32768
   301d4:	10001126 	beq	r2,zero,3021c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   301d8:	e0bffb17 	ldw	r2,-20(fp)
   301dc:	10800a17 	ldw	r2,40(r2)
   301e0:	e0fff917 	ldw	r3,-28(fp)
   301e4:	1809883a 	mov	r4,r3
   301e8:	e0fffb17 	ldw	r3,-20(fp)
   301ec:	1885883a 	add	r2,r3,r2
   301f0:	10800e04 	addi	r2,r2,56
   301f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   301f8:	e0bffb17 	ldw	r2,-20(fp)
   301fc:	10800a17 	ldw	r2,40(r2)
   30200:	10800044 	addi	r2,r2,1
   30204:	10c1ffcc 	andi	r3,r2,2047
   30208:	e0bffb17 	ldw	r2,-20(fp)
   3020c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   30210:	003fe206 	br	3019c <__alt_data_end+0xf803019c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   30214:	0001883a 	nop
   30218:	00000106 	br	30220 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   3021c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   30220:	e0bff917 	ldw	r2,-28(fp)
   30224:	10bfffec 	andhi	r2,r2,65535
   30228:	10000f26 	beq	r2,zero,30268 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   3022c:	e0bffb17 	ldw	r2,-20(fp)
   30230:	10c00817 	ldw	r3,32(r2)
   30234:	00bfff84 	movi	r2,-2
   30238:	1886703a 	and	r3,r3,r2
   3023c:	e0bffb17 	ldw	r2,-20(fp)
   30240:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   30244:	e0bffc17 	ldw	r2,-16(fp)
   30248:	10800104 	addi	r2,r2,4
   3024c:	1007883a 	mov	r3,r2
   30250:	e0bffb17 	ldw	r2,-20(fp)
   30254:	10800817 	ldw	r2,32(r2)
   30258:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3025c:	e0bffc17 	ldw	r2,-16(fp)
   30260:	10800104 	addi	r2,r2,4
   30264:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   30268:	e0bffd17 	ldw	r2,-12(fp)
   3026c:	1080800c 	andi	r2,r2,512
   30270:	103fbe26 	beq	r2,zero,3016c <__alt_data_end+0xf803016c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   30274:	e0bffd17 	ldw	r2,-12(fp)
   30278:	1004d43a 	srli	r2,r2,16
   3027c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   30280:	00001406 	br	302d4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   30284:	e0bffc17 	ldw	r2,-16(fp)
   30288:	e0fffb17 	ldw	r3,-20(fp)
   3028c:	18c00d17 	ldw	r3,52(r3)
   30290:	e13ffb17 	ldw	r4,-20(fp)
   30294:	20c7883a 	add	r3,r4,r3
   30298:	18c20e04 	addi	r3,r3,2104
   3029c:	18c00003 	ldbu	r3,0(r3)
   302a0:	18c03fcc 	andi	r3,r3,255
   302a4:	18c0201c 	xori	r3,r3,128
   302a8:	18ffe004 	addi	r3,r3,-128
   302ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   302b0:	e0bffb17 	ldw	r2,-20(fp)
   302b4:	10800d17 	ldw	r2,52(r2)
   302b8:	10800044 	addi	r2,r2,1
   302bc:	10c1ffcc 	andi	r3,r2,2047
   302c0:	e0bffb17 	ldw	r2,-20(fp)
   302c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   302c8:	e0bffa17 	ldw	r2,-24(fp)
   302cc:	10bfffc4 	addi	r2,r2,-1
   302d0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   302d4:	e0bffa17 	ldw	r2,-24(fp)
   302d8:	10000526 	beq	r2,zero,302f0 <altera_avalon_jtag_uart_irq+0x1a8>
   302dc:	e0bffb17 	ldw	r2,-20(fp)
   302e0:	10c00d17 	ldw	r3,52(r2)
   302e4:	e0bffb17 	ldw	r2,-20(fp)
   302e8:	10800c17 	ldw	r2,48(r2)
   302ec:	18bfe51e 	bne	r3,r2,30284 <__alt_data_end+0xf8030284>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   302f0:	e0bffa17 	ldw	r2,-24(fp)
   302f4:	103f9d26 	beq	r2,zero,3016c <__alt_data_end+0xf803016c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   302f8:	e0bffb17 	ldw	r2,-20(fp)
   302fc:	10c00817 	ldw	r3,32(r2)
   30300:	00bfff44 	movi	r2,-3
   30304:	1886703a 	and	r3,r3,r2
   30308:	e0bffb17 	ldw	r2,-20(fp)
   3030c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30310:	e0bffb17 	ldw	r2,-20(fp)
   30314:	10800017 	ldw	r2,0(r2)
   30318:	10800104 	addi	r2,r2,4
   3031c:	1007883a 	mov	r3,r2
   30320:	e0bffb17 	ldw	r2,-20(fp)
   30324:	10800817 	ldw	r2,32(r2)
   30328:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3032c:	e0bffc17 	ldw	r2,-16(fp)
   30330:	10800104 	addi	r2,r2,4
   30334:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   30338:	003f8c06 	br	3016c <__alt_data_end+0xf803016c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   3033c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   30340:	0001883a 	nop
   30344:	e037883a 	mov	sp,fp
   30348:	df000017 	ldw	fp,0(sp)
   3034c:	dec00104 	addi	sp,sp,4
   30350:	f800283a 	ret

00030354 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   30354:	defff804 	addi	sp,sp,-32
   30358:	df000715 	stw	fp,28(sp)
   3035c:	df000704 	addi	fp,sp,28
   30360:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   30364:	e0bffb17 	ldw	r2,-20(fp)
   30368:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3036c:	e0bff917 	ldw	r2,-28(fp)
   30370:	10800017 	ldw	r2,0(r2)
   30374:	10800104 	addi	r2,r2,4
   30378:	10800037 	ldwio	r2,0(r2)
   3037c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   30380:	e0bffa17 	ldw	r2,-24(fp)
   30384:	1081000c 	andi	r2,r2,1024
   30388:	10000b26 	beq	r2,zero,303b8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3038c:	e0bff917 	ldw	r2,-28(fp)
   30390:	10800017 	ldw	r2,0(r2)
   30394:	10800104 	addi	r2,r2,4
   30398:	1007883a 	mov	r3,r2
   3039c:	e0bff917 	ldw	r2,-28(fp)
   303a0:	10800817 	ldw	r2,32(r2)
   303a4:	10810014 	ori	r2,r2,1024
   303a8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   303ac:	e0bff917 	ldw	r2,-28(fp)
   303b0:	10000915 	stw	zero,36(r2)
   303b4:	00000a06 	br	303e0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   303b8:	e0bff917 	ldw	r2,-28(fp)
   303bc:	10c00917 	ldw	r3,36(r2)
   303c0:	00a00034 	movhi	r2,32768
   303c4:	10bfff04 	addi	r2,r2,-4
   303c8:	10c00536 	bltu	r2,r3,303e0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   303cc:	e0bff917 	ldw	r2,-28(fp)
   303d0:	10800917 	ldw	r2,36(r2)
   303d4:	10c00044 	addi	r3,r2,1
   303d8:	e0bff917 	ldw	r2,-28(fp)
   303dc:	10c00915 	stw	r3,36(r2)
   303e0:	d0a01d17 	ldw	r2,-32652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   303e4:	e037883a 	mov	sp,fp
   303e8:	df000017 	ldw	fp,0(sp)
   303ec:	dec00104 	addi	sp,sp,4
   303f0:	f800283a 	ret

000303f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   303f4:	defffd04 	addi	sp,sp,-12
   303f8:	df000215 	stw	fp,8(sp)
   303fc:	df000204 	addi	fp,sp,8
   30400:	e13ffe15 	stw	r4,-8(fp)
   30404:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30408:	00000506 	br	30420 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   3040c:	e0bfff17 	ldw	r2,-4(fp)
   30410:	1090000c 	andi	r2,r2,16384
   30414:	10000226 	beq	r2,zero,30420 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   30418:	00bffd44 	movi	r2,-11
   3041c:	00000b06 	br	3044c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   30420:	e0bffe17 	ldw	r2,-8(fp)
   30424:	10c00d17 	ldw	r3,52(r2)
   30428:	e0bffe17 	ldw	r2,-8(fp)
   3042c:	10800c17 	ldw	r2,48(r2)
   30430:	18800526 	beq	r3,r2,30448 <altera_avalon_jtag_uart_close+0x54>
   30434:	e0bffe17 	ldw	r2,-8(fp)
   30438:	10c00917 	ldw	r3,36(r2)
   3043c:	e0bffe17 	ldw	r2,-8(fp)
   30440:	10800117 	ldw	r2,4(r2)
   30444:	18bff136 	bltu	r3,r2,3040c <__alt_data_end+0xf803040c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30448:	0005883a 	mov	r2,zero
}
   3044c:	e037883a 	mov	sp,fp
   30450:	df000017 	ldw	fp,0(sp)
   30454:	dec00104 	addi	sp,sp,4
   30458:	f800283a 	ret

0003045c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3045c:	defffa04 	addi	sp,sp,-24
   30460:	df000515 	stw	fp,20(sp)
   30464:	df000504 	addi	fp,sp,20
   30468:	e13ffd15 	stw	r4,-12(fp)
   3046c:	e17ffe15 	stw	r5,-8(fp)
   30470:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   30474:	00bff9c4 	movi	r2,-25
   30478:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   3047c:	e0bffe17 	ldw	r2,-8(fp)
   30480:	10da8060 	cmpeqi	r3,r2,27137
   30484:	1800031e 	bne	r3,zero,30494 <altera_avalon_jtag_uart_ioctl+0x38>
   30488:	109a80a0 	cmpeqi	r2,r2,27138
   3048c:	1000181e 	bne	r2,zero,304f0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   30490:	00002906 	br	30538 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   30494:	e0bffd17 	ldw	r2,-12(fp)
   30498:	10c00117 	ldw	r3,4(r2)
   3049c:	00a00034 	movhi	r2,32768
   304a0:	10bfffc4 	addi	r2,r2,-1
   304a4:	18802126 	beq	r3,r2,3052c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   304a8:	e0bfff17 	ldw	r2,-4(fp)
   304ac:	10800017 	ldw	r2,0(r2)
   304b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   304b4:	e0bffc17 	ldw	r2,-16(fp)
   304b8:	10800090 	cmplti	r2,r2,2
   304bc:	1000061e 	bne	r2,zero,304d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   304c0:	e0fffc17 	ldw	r3,-16(fp)
   304c4:	00a00034 	movhi	r2,32768
   304c8:	10bfffc4 	addi	r2,r2,-1
   304cc:	18800226 	beq	r3,r2,304d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   304d0:	e0bffc17 	ldw	r2,-16(fp)
   304d4:	00000206 	br	304e0 <altera_avalon_jtag_uart_ioctl+0x84>
   304d8:	00a00034 	movhi	r2,32768
   304dc:	10bfff84 	addi	r2,r2,-2
   304e0:	e0fffd17 	ldw	r3,-12(fp)
   304e4:	18800115 	stw	r2,4(r3)
      rc = 0;
   304e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   304ec:	00000f06 	br	3052c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   304f0:	e0bffd17 	ldw	r2,-12(fp)
   304f4:	10c00117 	ldw	r3,4(r2)
   304f8:	00a00034 	movhi	r2,32768
   304fc:	10bfffc4 	addi	r2,r2,-1
   30500:	18800c26 	beq	r3,r2,30534 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   30504:	e0bffd17 	ldw	r2,-12(fp)
   30508:	10c00917 	ldw	r3,36(r2)
   3050c:	e0bffd17 	ldw	r2,-12(fp)
   30510:	10800117 	ldw	r2,4(r2)
   30514:	1885803a 	cmpltu	r2,r3,r2
   30518:	10c03fcc 	andi	r3,r2,255
   3051c:	e0bfff17 	ldw	r2,-4(fp)
   30520:	10c00015 	stw	r3,0(r2)
      rc = 0;
   30524:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   30528:	00000206 	br	30534 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   3052c:	0001883a 	nop
   30530:	00000106 	br	30538 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   30534:	0001883a 	nop

  default:
    break;
  }

  return rc;
   30538:	e0bffb17 	ldw	r2,-20(fp)
}
   3053c:	e037883a 	mov	sp,fp
   30540:	df000017 	ldw	fp,0(sp)
   30544:	dec00104 	addi	sp,sp,4
   30548:	f800283a 	ret

0003054c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   3054c:	defff304 	addi	sp,sp,-52
   30550:	dfc00c15 	stw	ra,48(sp)
   30554:	df000b15 	stw	fp,44(sp)
   30558:	df000b04 	addi	fp,sp,44
   3055c:	e13ffc15 	stw	r4,-16(fp)
   30560:	e17ffd15 	stw	r5,-12(fp)
   30564:	e1bffe15 	stw	r6,-8(fp)
   30568:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   3056c:	e0bffd17 	ldw	r2,-12(fp)
   30570:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   30574:	00004706 	br	30694 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   30578:	e0bffc17 	ldw	r2,-16(fp)
   3057c:	10800a17 	ldw	r2,40(r2)
   30580:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   30584:	e0bffc17 	ldw	r2,-16(fp)
   30588:	10800b17 	ldw	r2,44(r2)
   3058c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   30590:	e0fff717 	ldw	r3,-36(fp)
   30594:	e0bff817 	ldw	r2,-32(fp)
   30598:	18800536 	bltu	r3,r2,305b0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   3059c:	e0fff717 	ldw	r3,-36(fp)
   305a0:	e0bff817 	ldw	r2,-32(fp)
   305a4:	1885c83a 	sub	r2,r3,r2
   305a8:	e0bff615 	stw	r2,-40(fp)
   305ac:	00000406 	br	305c0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   305b0:	00c20004 	movi	r3,2048
   305b4:	e0bff817 	ldw	r2,-32(fp)
   305b8:	1885c83a 	sub	r2,r3,r2
   305bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   305c0:	e0bff617 	ldw	r2,-40(fp)
   305c4:	10001e26 	beq	r2,zero,30640 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   305c8:	e0fffe17 	ldw	r3,-8(fp)
   305cc:	e0bff617 	ldw	r2,-40(fp)
   305d0:	1880022e 	bgeu	r3,r2,305dc <altera_avalon_jtag_uart_read+0x90>
        n = space;
   305d4:	e0bffe17 	ldw	r2,-8(fp)
   305d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   305dc:	e0bffc17 	ldw	r2,-16(fp)
   305e0:	10c00e04 	addi	r3,r2,56
   305e4:	e0bff817 	ldw	r2,-32(fp)
   305e8:	1885883a 	add	r2,r3,r2
   305ec:	e1bff617 	ldw	r6,-40(fp)
   305f0:	100b883a 	mov	r5,r2
   305f4:	e13ff517 	ldw	r4,-44(fp)
   305f8:	0026c880 	call	26c88 <memcpy>
      ptr   += n;
   305fc:	e0fff517 	ldw	r3,-44(fp)
   30600:	e0bff617 	ldw	r2,-40(fp)
   30604:	1885883a 	add	r2,r3,r2
   30608:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   3060c:	e0fffe17 	ldw	r3,-8(fp)
   30610:	e0bff617 	ldw	r2,-40(fp)
   30614:	1885c83a 	sub	r2,r3,r2
   30618:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3061c:	e0fff817 	ldw	r3,-32(fp)
   30620:	e0bff617 	ldw	r2,-40(fp)
   30624:	1885883a 	add	r2,r3,r2
   30628:	10c1ffcc 	andi	r3,r2,2047
   3062c:	e0bffc17 	ldw	r2,-16(fp)
   30630:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   30634:	e0bffe17 	ldw	r2,-8(fp)
   30638:	00bfcf16 	blt	zero,r2,30578 <__alt_data_end+0xf8030578>
   3063c:	00000106 	br	30644 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   30640:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   30644:	e0fff517 	ldw	r3,-44(fp)
   30648:	e0bffd17 	ldw	r2,-12(fp)
   3064c:	1880141e 	bne	r3,r2,306a0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   30650:	e0bfff17 	ldw	r2,-4(fp)
   30654:	1090000c 	andi	r2,r2,16384
   30658:	1000131e 	bne	r2,zero,306a8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   3065c:	0001883a 	nop
   30660:	e0bffc17 	ldw	r2,-16(fp)
   30664:	10c00a17 	ldw	r3,40(r2)
   30668:	e0bff717 	ldw	r2,-36(fp)
   3066c:	1880051e 	bne	r3,r2,30684 <altera_avalon_jtag_uart_read+0x138>
   30670:	e0bffc17 	ldw	r2,-16(fp)
   30674:	10c00917 	ldw	r3,36(r2)
   30678:	e0bffc17 	ldw	r2,-16(fp)
   3067c:	10800117 	ldw	r2,4(r2)
   30680:	18bff736 	bltu	r3,r2,30660 <__alt_data_end+0xf8030660>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   30684:	e0bffc17 	ldw	r2,-16(fp)
   30688:	10c00a17 	ldw	r3,40(r2)
   3068c:	e0bff717 	ldw	r2,-36(fp)
   30690:	18800726 	beq	r3,r2,306b0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   30694:	e0bffe17 	ldw	r2,-8(fp)
   30698:	00bfb716 	blt	zero,r2,30578 <__alt_data_end+0xf8030578>
   3069c:	00000506 	br	306b4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   306a0:	0001883a 	nop
   306a4:	00000306 	br	306b4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   306a8:	0001883a 	nop
   306ac:	00000106 	br	306b4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   306b0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   306b4:	e0fff517 	ldw	r3,-44(fp)
   306b8:	e0bffd17 	ldw	r2,-12(fp)
   306bc:	18801826 	beq	r3,r2,30720 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   306c0:	0005303a 	rdctl	r2,status
   306c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   306c8:	e0fffb17 	ldw	r3,-20(fp)
   306cc:	00bfff84 	movi	r2,-2
   306d0:	1884703a 	and	r2,r3,r2
   306d4:	1001703a 	wrctl	status,r2
  
  return context;
   306d8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   306dc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   306e0:	e0bffc17 	ldw	r2,-16(fp)
   306e4:	10800817 	ldw	r2,32(r2)
   306e8:	10c00054 	ori	r3,r2,1
   306ec:	e0bffc17 	ldw	r2,-16(fp)
   306f0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   306f4:	e0bffc17 	ldw	r2,-16(fp)
   306f8:	10800017 	ldw	r2,0(r2)
   306fc:	10800104 	addi	r2,r2,4
   30700:	1007883a 	mov	r3,r2
   30704:	e0bffc17 	ldw	r2,-16(fp)
   30708:	10800817 	ldw	r2,32(r2)
   3070c:	18800035 	stwio	r2,0(r3)
   30710:	e0bffa17 	ldw	r2,-24(fp)
   30714:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30718:	e0bff917 	ldw	r2,-28(fp)
   3071c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   30720:	e0fff517 	ldw	r3,-44(fp)
   30724:	e0bffd17 	ldw	r2,-12(fp)
   30728:	18800426 	beq	r3,r2,3073c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   3072c:	e0fff517 	ldw	r3,-44(fp)
   30730:	e0bffd17 	ldw	r2,-12(fp)
   30734:	1885c83a 	sub	r2,r3,r2
   30738:	00000606 	br	30754 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   3073c:	e0bfff17 	ldw	r2,-4(fp)
   30740:	1090000c 	andi	r2,r2,16384
   30744:	10000226 	beq	r2,zero,30750 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   30748:	00bffd44 	movi	r2,-11
   3074c:	00000106 	br	30754 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   30750:	00bffec4 	movi	r2,-5
}
   30754:	e037883a 	mov	sp,fp
   30758:	dfc00117 	ldw	ra,4(sp)
   3075c:	df000017 	ldw	fp,0(sp)
   30760:	dec00204 	addi	sp,sp,8
   30764:	f800283a 	ret

00030768 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   30768:	defff304 	addi	sp,sp,-52
   3076c:	dfc00c15 	stw	ra,48(sp)
   30770:	df000b15 	stw	fp,44(sp)
   30774:	df000b04 	addi	fp,sp,44
   30778:	e13ffc15 	stw	r4,-16(fp)
   3077c:	e17ffd15 	stw	r5,-12(fp)
   30780:	e1bffe15 	stw	r6,-8(fp)
   30784:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   30788:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   3078c:	e0bffd17 	ldw	r2,-12(fp)
   30790:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   30794:	00003706 	br	30874 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   30798:	e0bffc17 	ldw	r2,-16(fp)
   3079c:	10800c17 	ldw	r2,48(r2)
   307a0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   307a4:	e0bffc17 	ldw	r2,-16(fp)
   307a8:	10800d17 	ldw	r2,52(r2)
   307ac:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   307b0:	e0fff917 	ldw	r3,-28(fp)
   307b4:	e0bff517 	ldw	r2,-44(fp)
   307b8:	1880062e 	bgeu	r3,r2,307d4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   307bc:	e0fff517 	ldw	r3,-44(fp)
   307c0:	e0bff917 	ldw	r2,-28(fp)
   307c4:	1885c83a 	sub	r2,r3,r2
   307c8:	10bfffc4 	addi	r2,r2,-1
   307cc:	e0bff615 	stw	r2,-40(fp)
   307d0:	00000b06 	br	30800 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   307d4:	e0bff517 	ldw	r2,-44(fp)
   307d8:	10000526 	beq	r2,zero,307f0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   307dc:	00c20004 	movi	r3,2048
   307e0:	e0bff917 	ldw	r2,-28(fp)
   307e4:	1885c83a 	sub	r2,r3,r2
   307e8:	e0bff615 	stw	r2,-40(fp)
   307ec:	00000406 	br	30800 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   307f0:	00c1ffc4 	movi	r3,2047
   307f4:	e0bff917 	ldw	r2,-28(fp)
   307f8:	1885c83a 	sub	r2,r3,r2
   307fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   30800:	e0bff617 	ldw	r2,-40(fp)
   30804:	10001e26 	beq	r2,zero,30880 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   30808:	e0fffe17 	ldw	r3,-8(fp)
   3080c:	e0bff617 	ldw	r2,-40(fp)
   30810:	1880022e 	bgeu	r3,r2,3081c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   30814:	e0bffe17 	ldw	r2,-8(fp)
   30818:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   3081c:	e0bffc17 	ldw	r2,-16(fp)
   30820:	10c20e04 	addi	r3,r2,2104
   30824:	e0bff917 	ldw	r2,-28(fp)
   30828:	1885883a 	add	r2,r3,r2
   3082c:	e1bff617 	ldw	r6,-40(fp)
   30830:	e17ffd17 	ldw	r5,-12(fp)
   30834:	1009883a 	mov	r4,r2
   30838:	0026c880 	call	26c88 <memcpy>
      ptr   += n;
   3083c:	e0fffd17 	ldw	r3,-12(fp)
   30840:	e0bff617 	ldw	r2,-40(fp)
   30844:	1885883a 	add	r2,r3,r2
   30848:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   3084c:	e0fffe17 	ldw	r3,-8(fp)
   30850:	e0bff617 	ldw	r2,-40(fp)
   30854:	1885c83a 	sub	r2,r3,r2
   30858:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3085c:	e0fff917 	ldw	r3,-28(fp)
   30860:	e0bff617 	ldw	r2,-40(fp)
   30864:	1885883a 	add	r2,r3,r2
   30868:	10c1ffcc 	andi	r3,r2,2047
   3086c:	e0bffc17 	ldw	r2,-16(fp)
   30870:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   30874:	e0bffe17 	ldw	r2,-8(fp)
   30878:	00bfc716 	blt	zero,r2,30798 <__alt_data_end+0xf8030798>
   3087c:	00000106 	br	30884 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   30880:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30884:	0005303a 	rdctl	r2,status
   30888:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3088c:	e0fffb17 	ldw	r3,-20(fp)
   30890:	00bfff84 	movi	r2,-2
   30894:	1884703a 	and	r2,r3,r2
   30898:	1001703a 	wrctl	status,r2
  
  return context;
   3089c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   308a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   308a4:	e0bffc17 	ldw	r2,-16(fp)
   308a8:	10800817 	ldw	r2,32(r2)
   308ac:	10c00094 	ori	r3,r2,2
   308b0:	e0bffc17 	ldw	r2,-16(fp)
   308b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   308b8:	e0bffc17 	ldw	r2,-16(fp)
   308bc:	10800017 	ldw	r2,0(r2)
   308c0:	10800104 	addi	r2,r2,4
   308c4:	1007883a 	mov	r3,r2
   308c8:	e0bffc17 	ldw	r2,-16(fp)
   308cc:	10800817 	ldw	r2,32(r2)
   308d0:	18800035 	stwio	r2,0(r3)
   308d4:	e0bffa17 	ldw	r2,-24(fp)
   308d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   308dc:	e0bff817 	ldw	r2,-32(fp)
   308e0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   308e4:	e0bffe17 	ldw	r2,-8(fp)
   308e8:	0080100e 	bge	zero,r2,3092c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   308ec:	e0bfff17 	ldw	r2,-4(fp)
   308f0:	1090000c 	andi	r2,r2,16384
   308f4:	1000101e 	bne	r2,zero,30938 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   308f8:	0001883a 	nop
   308fc:	e0bffc17 	ldw	r2,-16(fp)
   30900:	10c00d17 	ldw	r3,52(r2)
   30904:	e0bff517 	ldw	r2,-44(fp)
   30908:	1880051e 	bne	r3,r2,30920 <altera_avalon_jtag_uart_write+0x1b8>
   3090c:	e0bffc17 	ldw	r2,-16(fp)
   30910:	10c00917 	ldw	r3,36(r2)
   30914:	e0bffc17 	ldw	r2,-16(fp)
   30918:	10800117 	ldw	r2,4(r2)
   3091c:	18bff736 	bltu	r3,r2,308fc <__alt_data_end+0xf80308fc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   30920:	e0bffc17 	ldw	r2,-16(fp)
   30924:	10800917 	ldw	r2,36(r2)
   30928:	1000051e 	bne	r2,zero,30940 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   3092c:	e0bffe17 	ldw	r2,-8(fp)
   30930:	00bfd016 	blt	zero,r2,30874 <__alt_data_end+0xf8030874>
   30934:	00000306 	br	30944 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   30938:	0001883a 	nop
   3093c:	00000106 	br	30944 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   30940:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   30944:	e0fffd17 	ldw	r3,-12(fp)
   30948:	e0bff717 	ldw	r2,-36(fp)
   3094c:	18800426 	beq	r3,r2,30960 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   30950:	e0fffd17 	ldw	r3,-12(fp)
   30954:	e0bff717 	ldw	r2,-36(fp)
   30958:	1885c83a 	sub	r2,r3,r2
   3095c:	00000606 	br	30978 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   30960:	e0bfff17 	ldw	r2,-4(fp)
   30964:	1090000c 	andi	r2,r2,16384
   30968:	10000226 	beq	r2,zero,30974 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   3096c:	00bffd44 	movi	r2,-11
   30970:	00000106 	br	30978 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   30974:	00bffec4 	movi	r2,-5
}
   30978:	e037883a 	mov	sp,fp
   3097c:	dfc00117 	ldw	ra,4(sp)
   30980:	df000017 	ldw	fp,0(sp)
   30984:	dec00204 	addi	sp,sp,8
   30988:	f800283a 	ret

0003098c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   3098c:	defffa04 	addi	sp,sp,-24
   30990:	dfc00515 	stw	ra,20(sp)
   30994:	df000415 	stw	fp,16(sp)
   30998:	df000404 	addi	fp,sp,16
   3099c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   309a0:	0007883a 	mov	r3,zero
   309a4:	e0bfff17 	ldw	r2,-4(fp)
   309a8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   309ac:	e0bfff17 	ldw	r2,-4(fp)
   309b0:	10800104 	addi	r2,r2,4
   309b4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   309b8:	0005303a 	rdctl	r2,status
   309bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   309c0:	e0fffd17 	ldw	r3,-12(fp)
   309c4:	00bfff84 	movi	r2,-2
   309c8:	1884703a 	and	r2,r3,r2
   309cc:	1001703a 	wrctl	status,r2
  
  return context;
   309d0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   309d4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   309d8:	00321180 	call	32118 <alt_tick>
   309dc:	e0bffc17 	ldw	r2,-16(fp)
   309e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   309e4:	e0bffe17 	ldw	r2,-8(fp)
   309e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   309ec:	0001883a 	nop
   309f0:	e037883a 	mov	sp,fp
   309f4:	dfc00117 	ldw	ra,4(sp)
   309f8:	df000017 	ldw	fp,0(sp)
   309fc:	dec00204 	addi	sp,sp,8
   30a00:	f800283a 	ret

00030a04 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   30a04:	defff804 	addi	sp,sp,-32
   30a08:	dfc00715 	stw	ra,28(sp)
   30a0c:	df000615 	stw	fp,24(sp)
   30a10:	df000604 	addi	fp,sp,24
   30a14:	e13ffc15 	stw	r4,-16(fp)
   30a18:	e17ffd15 	stw	r5,-12(fp)
   30a1c:	e1bffe15 	stw	r6,-8(fp)
   30a20:	e1ffff15 	stw	r7,-4(fp)
   30a24:	e0bfff17 	ldw	r2,-4(fp)
   30a28:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   30a2c:	d0a01d17 	ldw	r2,-32652(gp)
   30a30:	1000021e 	bne	r2,zero,30a3c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   30a34:	e0bffb17 	ldw	r2,-20(fp)
   30a38:	d0a01d15 	stw	r2,-32652(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   30a3c:	e0bffc17 	ldw	r2,-16(fp)
   30a40:	10800104 	addi	r2,r2,4
   30a44:	00c001c4 	movi	r3,7
   30a48:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   30a4c:	d8000015 	stw	zero,0(sp)
   30a50:	e1fffc17 	ldw	r7,-16(fp)
   30a54:	018000f4 	movhi	r6,3
   30a58:	31826304 	addi	r6,r6,2444
   30a5c:	e17ffe17 	ldw	r5,-8(fp)
   30a60:	e13ffd17 	ldw	r4,-12(fp)
   30a64:	0031a340 	call	31a34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   30a68:	0001883a 	nop
   30a6c:	e037883a 	mov	sp,fp
   30a70:	dfc00117 	ldw	ra,4(sp)
   30a74:	df000017 	ldw	fp,0(sp)
   30a78:	dec00204 	addi	sp,sp,8
   30a7c:	f800283a 	ret

00030a80 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   30a80:	defffa04 	addi	sp,sp,-24
   30a84:	dfc00515 	stw	ra,20(sp)
   30a88:	df000415 	stw	fp,16(sp)
   30a8c:	df000404 	addi	fp,sp,16
   30a90:	e13ffd15 	stw	r4,-12(fp)
   30a94:	e17ffe15 	stw	r5,-8(fp)
   30a98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30a9c:	e0bffd17 	ldw	r2,-12(fp)
   30aa0:	10800017 	ldw	r2,0(r2)
   30aa4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   30aa8:	e0bffc17 	ldw	r2,-16(fp)
   30aac:	10c00a04 	addi	r3,r2,40
   30ab0:	e0bffd17 	ldw	r2,-12(fp)
   30ab4:	10800217 	ldw	r2,8(r2)
   30ab8:	100f883a 	mov	r7,r2
   30abc:	e1bfff17 	ldw	r6,-4(fp)
   30ac0:	e17ffe17 	ldw	r5,-8(fp)
   30ac4:	1809883a 	mov	r4,r3
   30ac8:	0030f940 	call	30f94 <altera_avalon_uart_read>
      fd->fd_flags);
}
   30acc:	e037883a 	mov	sp,fp
   30ad0:	dfc00117 	ldw	ra,4(sp)
   30ad4:	df000017 	ldw	fp,0(sp)
   30ad8:	dec00204 	addi	sp,sp,8
   30adc:	f800283a 	ret

00030ae0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   30ae0:	defffa04 	addi	sp,sp,-24
   30ae4:	dfc00515 	stw	ra,20(sp)
   30ae8:	df000415 	stw	fp,16(sp)
   30aec:	df000404 	addi	fp,sp,16
   30af0:	e13ffd15 	stw	r4,-12(fp)
   30af4:	e17ffe15 	stw	r5,-8(fp)
   30af8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30afc:	e0bffd17 	ldw	r2,-12(fp)
   30b00:	10800017 	ldw	r2,0(r2)
   30b04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   30b08:	e0bffc17 	ldw	r2,-16(fp)
   30b0c:	10c00a04 	addi	r3,r2,40
   30b10:	e0bffd17 	ldw	r2,-12(fp)
   30b14:	10800217 	ldw	r2,8(r2)
   30b18:	100f883a 	mov	r7,r2
   30b1c:	e1bfff17 	ldw	r6,-4(fp)
   30b20:	e17ffe17 	ldw	r5,-8(fp)
   30b24:	1809883a 	mov	r4,r3
   30b28:	00311ac0 	call	311ac <altera_avalon_uart_write>
      fd->fd_flags);
}
   30b2c:	e037883a 	mov	sp,fp
   30b30:	dfc00117 	ldw	ra,4(sp)
   30b34:	df000017 	ldw	fp,0(sp)
   30b38:	dec00204 	addi	sp,sp,8
   30b3c:	f800283a 	ret

00030b40 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   30b40:	defffc04 	addi	sp,sp,-16
   30b44:	dfc00315 	stw	ra,12(sp)
   30b48:	df000215 	stw	fp,8(sp)
   30b4c:	df000204 	addi	fp,sp,8
   30b50:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   30b54:	e0bfff17 	ldw	r2,-4(fp)
   30b58:	10800017 	ldw	r2,0(r2)
   30b5c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   30b60:	e0bffe17 	ldw	r2,-8(fp)
   30b64:	10c00a04 	addi	r3,r2,40
   30b68:	e0bfff17 	ldw	r2,-4(fp)
   30b6c:	10800217 	ldw	r2,8(r2)
   30b70:	100b883a 	mov	r5,r2
   30b74:	1809883a 	mov	r4,r3
   30b78:	0030f040 	call	30f04 <altera_avalon_uart_close>
}
   30b7c:	e037883a 	mov	sp,fp
   30b80:	dfc00117 	ldw	ra,4(sp)
   30b84:	df000017 	ldw	fp,0(sp)
   30b88:	dec00204 	addi	sp,sp,8
   30b8c:	f800283a 	ret

00030b90 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   30b90:	defff804 	addi	sp,sp,-32
   30b94:	dfc00715 	stw	ra,28(sp)
   30b98:	df000615 	stw	fp,24(sp)
   30b9c:	df000604 	addi	fp,sp,24
   30ba0:	e13ffd15 	stw	r4,-12(fp)
   30ba4:	e17ffe15 	stw	r5,-8(fp)
   30ba8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   30bac:	e0bffd17 	ldw	r2,-12(fp)
   30bb0:	10800017 	ldw	r2,0(r2)
   30bb4:	e0bffb15 	stw	r2,-20(fp)
   30bb8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   30bbc:	1000041e 	bne	r2,zero,30bd0 <altera_avalon_uart_init+0x40>
   30bc0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   30bc4:	1000021e 	bne	r2,zero,30bd0 <altera_avalon_uart_init+0x40>
   30bc8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   30bcc:	10000226 	beq	r2,zero,30bd8 <altera_avalon_uart_init+0x48>
   30bd0:	00800044 	movi	r2,1
   30bd4:	00000106 	br	30bdc <altera_avalon_uart_init+0x4c>
   30bd8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   30bdc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   30be0:	e0bffc17 	ldw	r2,-16(fp)
   30be4:	10000f1e 	bne	r2,zero,30c24 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   30be8:	e0bffd17 	ldw	r2,-12(fp)
   30bec:	00c32004 	movi	r3,3200
   30bf0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   30bf4:	e0bffb17 	ldw	r2,-20(fp)
   30bf8:	10800304 	addi	r2,r2,12
   30bfc:	e0fffd17 	ldw	r3,-12(fp)
   30c00:	18c00117 	ldw	r3,4(r3)
   30c04:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   30c08:	d8000015 	stw	zero,0(sp)
   30c0c:	e1fffd17 	ldw	r7,-12(fp)
   30c10:	018000f4 	movhi	r6,3
   30c14:	31830f04 	addi	r6,r6,3132
   30c18:	e17fff17 	ldw	r5,-4(fp)
   30c1c:	e13ffe17 	ldw	r4,-8(fp)
   30c20:	0031a340 	call	31a34 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   30c24:	0001883a 	nop
   30c28:	e037883a 	mov	sp,fp
   30c2c:	dfc00117 	ldw	ra,4(sp)
   30c30:	df000017 	ldw	fp,0(sp)
   30c34:	dec00204 	addi	sp,sp,8
   30c38:	f800283a 	ret

00030c3c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   30c3c:	defffa04 	addi	sp,sp,-24
   30c40:	dfc00515 	stw	ra,20(sp)
   30c44:	df000415 	stw	fp,16(sp)
   30c48:	df000404 	addi	fp,sp,16
   30c4c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   30c50:	e0bfff17 	ldw	r2,-4(fp)
   30c54:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   30c58:	e0bffc17 	ldw	r2,-16(fp)
   30c5c:	10800017 	ldw	r2,0(r2)
   30c60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   30c64:	e0bffd17 	ldw	r2,-12(fp)
   30c68:	10800204 	addi	r2,r2,8
   30c6c:	10800037 	ldwio	r2,0(r2)
   30c70:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   30c74:	e0bffd17 	ldw	r2,-12(fp)
   30c78:	10800204 	addi	r2,r2,8
   30c7c:	0007883a 	mov	r3,zero
   30c80:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   30c84:	e0bffd17 	ldw	r2,-12(fp)
   30c88:	10800204 	addi	r2,r2,8
   30c8c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   30c90:	e0bffe17 	ldw	r2,-8(fp)
   30c94:	1080200c 	andi	r2,r2,128
   30c98:	10000326 	beq	r2,zero,30ca8 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   30c9c:	e17ffe17 	ldw	r5,-8(fp)
   30ca0:	e13ffc17 	ldw	r4,-16(fp)
   30ca4:	0030cd80 	call	30cd8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   30ca8:	e0bffe17 	ldw	r2,-8(fp)
   30cac:	1081100c 	andi	r2,r2,1088
   30cb0:	10000326 	beq	r2,zero,30cc0 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   30cb4:	e17ffe17 	ldw	r5,-8(fp)
   30cb8:	e13ffc17 	ldw	r4,-16(fp)
   30cbc:	0030dbc0 	call	30dbc <altera_avalon_uart_txirq>
  }
  

}
   30cc0:	0001883a 	nop
   30cc4:	e037883a 	mov	sp,fp
   30cc8:	dfc00117 	ldw	ra,4(sp)
   30ccc:	df000017 	ldw	fp,0(sp)
   30cd0:	dec00204 	addi	sp,sp,8
   30cd4:	f800283a 	ret

00030cd8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   30cd8:	defffc04 	addi	sp,sp,-16
   30cdc:	df000315 	stw	fp,12(sp)
   30ce0:	df000304 	addi	fp,sp,12
   30ce4:	e13ffe15 	stw	r4,-8(fp)
   30ce8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   30cec:	e0bfff17 	ldw	r2,-4(fp)
   30cf0:	108000cc 	andi	r2,r2,3
   30cf4:	10002c1e 	bne	r2,zero,30da8 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   30cf8:	e0bffe17 	ldw	r2,-8(fp)
   30cfc:	10800317 	ldw	r2,12(r2)
   30d00:	e0bffe17 	ldw	r2,-8(fp)
   30d04:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30d08:	e0bffe17 	ldw	r2,-8(fp)
   30d0c:	10800317 	ldw	r2,12(r2)
   30d10:	10800044 	addi	r2,r2,1
   30d14:	10800fcc 	andi	r2,r2,63
   30d18:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   30d1c:	e0bffe17 	ldw	r2,-8(fp)
   30d20:	10800317 	ldw	r2,12(r2)
   30d24:	e0fffe17 	ldw	r3,-8(fp)
   30d28:	18c00017 	ldw	r3,0(r3)
   30d2c:	18c00037 	ldwio	r3,0(r3)
   30d30:	1809883a 	mov	r4,r3
   30d34:	e0fffe17 	ldw	r3,-8(fp)
   30d38:	1885883a 	add	r2,r3,r2
   30d3c:	10800704 	addi	r2,r2,28
   30d40:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   30d44:	e0bffe17 	ldw	r2,-8(fp)
   30d48:	e0fffd17 	ldw	r3,-12(fp)
   30d4c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   30d50:	e0bffe17 	ldw	r2,-8(fp)
   30d54:	10800317 	ldw	r2,12(r2)
   30d58:	10800044 	addi	r2,r2,1
   30d5c:	10800fcc 	andi	r2,r2,63
   30d60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   30d64:	e0bffe17 	ldw	r2,-8(fp)
   30d68:	10c00217 	ldw	r3,8(r2)
   30d6c:	e0bffd17 	ldw	r2,-12(fp)
   30d70:	18800e1e 	bne	r3,r2,30dac <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   30d74:	e0bffe17 	ldw	r2,-8(fp)
   30d78:	10c00117 	ldw	r3,4(r2)
   30d7c:	00bfdfc4 	movi	r2,-129
   30d80:	1886703a 	and	r3,r3,r2
   30d84:	e0bffe17 	ldw	r2,-8(fp)
   30d88:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   30d8c:	e0bffe17 	ldw	r2,-8(fp)
   30d90:	10800017 	ldw	r2,0(r2)
   30d94:	10800304 	addi	r2,r2,12
   30d98:	e0fffe17 	ldw	r3,-8(fp)
   30d9c:	18c00117 	ldw	r3,4(r3)
   30da0:	10c00035 	stwio	r3,0(r2)
   30da4:	00000106 	br	30dac <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   30da8:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   30dac:	e037883a 	mov	sp,fp
   30db0:	df000017 	ldw	fp,0(sp)
   30db4:	dec00104 	addi	sp,sp,4
   30db8:	f800283a 	ret

00030dbc <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   30dbc:	defffb04 	addi	sp,sp,-20
   30dc0:	df000415 	stw	fp,16(sp)
   30dc4:	df000404 	addi	fp,sp,16
   30dc8:	e13ffc15 	stw	r4,-16(fp)
   30dcc:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   30dd0:	e0bffc17 	ldw	r2,-16(fp)
   30dd4:	10c00417 	ldw	r3,16(r2)
   30dd8:	e0bffc17 	ldw	r2,-16(fp)
   30ddc:	10800517 	ldw	r2,20(r2)
   30de0:	18803226 	beq	r3,r2,30eac <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30de4:	e0bffc17 	ldw	r2,-16(fp)
   30de8:	10800617 	ldw	r2,24(r2)
   30dec:	1080008c 	andi	r2,r2,2
   30df0:	10000326 	beq	r2,zero,30e00 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30df4:	e0bffd17 	ldw	r2,-12(fp)
   30df8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   30dfc:	10001d26 	beq	r2,zero,30e74 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   30e00:	e0bffc17 	ldw	r2,-16(fp)
   30e04:	10800417 	ldw	r2,16(r2)
   30e08:	e0bffc17 	ldw	r2,-16(fp)
   30e0c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   30e10:	e0bffc17 	ldw	r2,-16(fp)
   30e14:	10800017 	ldw	r2,0(r2)
   30e18:	10800104 	addi	r2,r2,4
   30e1c:	e0fffc17 	ldw	r3,-16(fp)
   30e20:	18c00417 	ldw	r3,16(r3)
   30e24:	e13ffc17 	ldw	r4,-16(fp)
   30e28:	20c7883a 	add	r3,r4,r3
   30e2c:	18c01704 	addi	r3,r3,92
   30e30:	18c00003 	ldbu	r3,0(r3)
   30e34:	18c03fcc 	andi	r3,r3,255
   30e38:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   30e3c:	e0bffc17 	ldw	r2,-16(fp)
   30e40:	10800417 	ldw	r2,16(r2)
   30e44:	10800044 	addi	r2,r2,1
   30e48:	e0fffc17 	ldw	r3,-16(fp)
   30e4c:	18800415 	stw	r2,16(r3)
   30e50:	10c00fcc 	andi	r3,r2,63
   30e54:	e0bffc17 	ldw	r2,-16(fp)
   30e58:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30e5c:	e0bffc17 	ldw	r2,-16(fp)
   30e60:	10800117 	ldw	r2,4(r2)
   30e64:	10c01014 	ori	r3,r2,64
   30e68:	e0bffc17 	ldw	r2,-16(fp)
   30e6c:	10c00115 	stw	r3,4(r2)
   30e70:	00000e06 	br	30eac <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   30e74:	e0bffc17 	ldw	r2,-16(fp)
   30e78:	10800017 	ldw	r2,0(r2)
   30e7c:	10800204 	addi	r2,r2,8
   30e80:	10800037 	ldwio	r2,0(r2)
   30e84:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   30e88:	e0bffd17 	ldw	r2,-12(fp)
   30e8c:	1082000c 	andi	r2,r2,2048
   30e90:	1000061e 	bne	r2,zero,30eac <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   30e94:	e0bffc17 	ldw	r2,-16(fp)
   30e98:	10c00117 	ldw	r3,4(r2)
   30e9c:	00bfefc4 	movi	r2,-65
   30ea0:	1886703a 	and	r3,r3,r2
   30ea4:	e0bffc17 	ldw	r2,-16(fp)
   30ea8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   30eac:	e0bffc17 	ldw	r2,-16(fp)
   30eb0:	10c00417 	ldw	r3,16(r2)
   30eb4:	e0bffc17 	ldw	r2,-16(fp)
   30eb8:	10800517 	ldw	r2,20(r2)
   30ebc:	1880061e 	bne	r3,r2,30ed8 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   30ec0:	e0bffc17 	ldw	r2,-16(fp)
   30ec4:	10c00117 	ldw	r3,4(r2)
   30ec8:	00beefc4 	movi	r2,-1089
   30ecc:	1886703a 	and	r3,r3,r2
   30ed0:	e0bffc17 	ldw	r2,-16(fp)
   30ed4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   30ed8:	e0bffc17 	ldw	r2,-16(fp)
   30edc:	10800017 	ldw	r2,0(r2)
   30ee0:	10800304 	addi	r2,r2,12
   30ee4:	e0fffc17 	ldw	r3,-16(fp)
   30ee8:	18c00117 	ldw	r3,4(r3)
   30eec:	10c00035 	stwio	r3,0(r2)
}
   30ef0:	0001883a 	nop
   30ef4:	e037883a 	mov	sp,fp
   30ef8:	df000017 	ldw	fp,0(sp)
   30efc:	dec00104 	addi	sp,sp,4
   30f00:	f800283a 	ret

00030f04 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   30f04:	defffd04 	addi	sp,sp,-12
   30f08:	df000215 	stw	fp,8(sp)
   30f0c:	df000204 	addi	fp,sp,8
   30f10:	e13ffe15 	stw	r4,-8(fp)
   30f14:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30f18:	00000506 	br	30f30 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   30f1c:	e0bfff17 	ldw	r2,-4(fp)
   30f20:	1090000c 	andi	r2,r2,16384
   30f24:	10000226 	beq	r2,zero,30f30 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   30f28:	00bffd44 	movi	r2,-11
   30f2c:	00000606 	br	30f48 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   30f30:	e0bffe17 	ldw	r2,-8(fp)
   30f34:	10c00417 	ldw	r3,16(r2)
   30f38:	e0bffe17 	ldw	r2,-8(fp)
   30f3c:	10800517 	ldw	r2,20(r2)
   30f40:	18bff61e 	bne	r3,r2,30f1c <__alt_data_end+0xf8030f1c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   30f44:	0005883a 	mov	r2,zero
}
   30f48:	e037883a 	mov	sp,fp
   30f4c:	df000017 	ldw	fp,0(sp)
   30f50:	dec00104 	addi	sp,sp,4
   30f54:	f800283a 	ret

00030f58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30f58:	defffe04 	addi	sp,sp,-8
   30f5c:	dfc00115 	stw	ra,4(sp)
   30f60:	df000015 	stw	fp,0(sp)
   30f64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30f68:	d0a00b17 	ldw	r2,-32724(gp)
   30f6c:	10000326 	beq	r2,zero,30f7c <alt_get_errno+0x24>
   30f70:	d0a00b17 	ldw	r2,-32724(gp)
   30f74:	103ee83a 	callr	r2
   30f78:	00000106 	br	30f80 <alt_get_errno+0x28>
   30f7c:	d0a01204 	addi	r2,gp,-32696
}
   30f80:	e037883a 	mov	sp,fp
   30f84:	dfc00117 	ldw	ra,4(sp)
   30f88:	df000017 	ldw	fp,0(sp)
   30f8c:	dec00204 	addi	sp,sp,8
   30f90:	f800283a 	ret

00030f94 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   30f94:	defff204 	addi	sp,sp,-56
   30f98:	dfc00d15 	stw	ra,52(sp)
   30f9c:	df000c15 	stw	fp,48(sp)
   30fa0:	df000c04 	addi	fp,sp,48
   30fa4:	e13ffc15 	stw	r4,-16(fp)
   30fa8:	e17ffd15 	stw	r5,-12(fp)
   30fac:	e1bffe15 	stw	r6,-8(fp)
   30fb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   30fb4:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   30fb8:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   30fbc:	e0bfff17 	ldw	r2,-4(fp)
   30fc0:	1090000c 	andi	r2,r2,16384
   30fc4:	1005003a 	cmpeq	r2,r2,zero
   30fc8:	10803fcc 	andi	r2,r2,255
   30fcc:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   30fd0:	00001306 	br	31020 <altera_avalon_uart_read+0x8c>
    {
      count++;
   30fd4:	e0bff517 	ldw	r2,-44(fp)
   30fd8:	10800044 	addi	r2,r2,1
   30fdc:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   30fe0:	e0bffd17 	ldw	r2,-12(fp)
   30fe4:	10c00044 	addi	r3,r2,1
   30fe8:	e0fffd15 	stw	r3,-12(fp)
   30fec:	e0fffc17 	ldw	r3,-16(fp)
   30ff0:	18c00217 	ldw	r3,8(r3)
   30ff4:	e13ffc17 	ldw	r4,-16(fp)
   30ff8:	20c7883a 	add	r3,r4,r3
   30ffc:	18c00704 	addi	r3,r3,28
   31000:	18c00003 	ldbu	r3,0(r3)
   31004:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   31008:	e0bffc17 	ldw	r2,-16(fp)
   3100c:	10800217 	ldw	r2,8(r2)
   31010:	10800044 	addi	r2,r2,1
   31014:	10c00fcc 	andi	r3,r2,63
   31018:	e0bffc17 	ldw	r2,-16(fp)
   3101c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   31020:	e0fff517 	ldw	r3,-44(fp)
   31024:	e0bffe17 	ldw	r2,-8(fp)
   31028:	1880050e 	bge	r3,r2,31040 <altera_avalon_uart_read+0xac>
   3102c:	e0bffc17 	ldw	r2,-16(fp)
   31030:	10c00217 	ldw	r3,8(r2)
   31034:	e0bffc17 	ldw	r2,-16(fp)
   31038:	10800317 	ldw	r2,12(r2)
   3103c:	18bfe51e 	bne	r3,r2,30fd4 <__alt_data_end+0xf8030fd4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   31040:	e0bff517 	ldw	r2,-44(fp)
   31044:	1000251e 	bne	r2,zero,310dc <altera_avalon_uart_read+0x148>
   31048:	e0bffc17 	ldw	r2,-16(fp)
   3104c:	10c00217 	ldw	r3,8(r2)
   31050:	e0bffc17 	ldw	r2,-16(fp)
   31054:	10800317 	ldw	r2,12(r2)
   31058:	1880201e 	bne	r3,r2,310dc <altera_avalon_uart_read+0x148>
    {
      if (!block)
   3105c:	e0bff617 	ldw	r2,-40(fp)
   31060:	1000071e 	bne	r2,zero,31080 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   31064:	0030f580 	call	30f58 <alt_get_errno>
   31068:	1007883a 	mov	r3,r2
   3106c:	008002c4 	movi	r2,11
   31070:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   31074:	00800044 	movi	r2,1
   31078:	e0bff405 	stb	r2,-48(fp)
        break;
   3107c:	00001b06 	br	310ec <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31080:	0005303a 	rdctl	r2,status
   31084:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31088:	e0fff917 	ldw	r3,-28(fp)
   3108c:	00bfff84 	movi	r2,-2
   31090:	1884703a 	and	r2,r3,r2
   31094:	1001703a 	wrctl	status,r2
  
  return context;
   31098:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   3109c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   310a0:	e0bffc17 	ldw	r2,-16(fp)
   310a4:	10800117 	ldw	r2,4(r2)
   310a8:	10c02014 	ori	r3,r2,128
   310ac:	e0bffc17 	ldw	r2,-16(fp)
   310b0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   310b4:	e0bffc17 	ldw	r2,-16(fp)
   310b8:	10800017 	ldw	r2,0(r2)
   310bc:	10800304 	addi	r2,r2,12
   310c0:	e0fffc17 	ldw	r3,-16(fp)
   310c4:	18c00117 	ldw	r3,4(r3)
   310c8:	10c00035 	stwio	r3,0(r2)
   310cc:	e0bff817 	ldw	r2,-32(fp)
   310d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   310d4:	e0bffa17 	ldw	r2,-24(fp)
   310d8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   310dc:	e0bff517 	ldw	r2,-44(fp)
   310e0:	1000021e 	bne	r2,zero,310ec <altera_avalon_uart_read+0x158>
   310e4:	e0bffe17 	ldw	r2,-8(fp)
   310e8:	103fcd1e 	bne	r2,zero,31020 <__alt_data_end+0xf8031020>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   310ec:	0005303a 	rdctl	r2,status
   310f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   310f4:	e0fffb17 	ldw	r3,-20(fp)
   310f8:	00bfff84 	movi	r2,-2
   310fc:	1884703a 	and	r2,r3,r2
   31100:	1001703a 	wrctl	status,r2
  
  return context;
   31104:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   31108:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   3110c:	e0bffc17 	ldw	r2,-16(fp)
   31110:	10800117 	ldw	r2,4(r2)
   31114:	10c02014 	ori	r3,r2,128
   31118:	e0bffc17 	ldw	r2,-16(fp)
   3111c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31120:	e0bffc17 	ldw	r2,-16(fp)
   31124:	10800017 	ldw	r2,0(r2)
   31128:	10800304 	addi	r2,r2,12
   3112c:	e0fffc17 	ldw	r3,-16(fp)
   31130:	18c00117 	ldw	r3,4(r3)
   31134:	10c00035 	stwio	r3,0(r2)
   31138:	e0bff817 	ldw	r2,-32(fp)
   3113c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31140:	e0bff717 	ldw	r2,-36(fp)
   31144:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   31148:	e0bff403 	ldbu	r2,-48(fp)
   3114c:	10000226 	beq	r2,zero,31158 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   31150:	00bffd44 	movi	r2,-11
   31154:	00000106 	br	3115c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   31158:	e0bff517 	ldw	r2,-44(fp)
  }
}
   3115c:	e037883a 	mov	sp,fp
   31160:	dfc00117 	ldw	ra,4(sp)
   31164:	df000017 	ldw	fp,0(sp)
   31168:	dec00204 	addi	sp,sp,8
   3116c:	f800283a 	ret

00031170 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31170:	defffe04 	addi	sp,sp,-8
   31174:	dfc00115 	stw	ra,4(sp)
   31178:	df000015 	stw	fp,0(sp)
   3117c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31180:	d0a00b17 	ldw	r2,-32724(gp)
   31184:	10000326 	beq	r2,zero,31194 <alt_get_errno+0x24>
   31188:	d0a00b17 	ldw	r2,-32724(gp)
   3118c:	103ee83a 	callr	r2
   31190:	00000106 	br	31198 <alt_get_errno+0x28>
   31194:	d0a01204 	addi	r2,gp,-32696
}
   31198:	e037883a 	mov	sp,fp
   3119c:	dfc00117 	ldw	ra,4(sp)
   311a0:	df000017 	ldw	fp,0(sp)
   311a4:	dec00204 	addi	sp,sp,8
   311a8:	f800283a 	ret

000311ac <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   311ac:	defff204 	addi	sp,sp,-56
   311b0:	dfc00d15 	stw	ra,52(sp)
   311b4:	df000c15 	stw	fp,48(sp)
   311b8:	df000c04 	addi	fp,sp,48
   311bc:	e13ffc15 	stw	r4,-16(fp)
   311c0:	e17ffd15 	stw	r5,-12(fp)
   311c4:	e1bffe15 	stw	r6,-8(fp)
   311c8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   311cc:	e0bffe17 	ldw	r2,-8(fp)
   311d0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   311d4:	e0bfff17 	ldw	r2,-4(fp)
   311d8:	1090000c 	andi	r2,r2,16384
   311dc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   311e0:	00003c06 	br	312d4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   311e4:	e0bffc17 	ldw	r2,-16(fp)
   311e8:	10800517 	ldw	r2,20(r2)
   311ec:	10800044 	addi	r2,r2,1
   311f0:	10800fcc 	andi	r2,r2,63
   311f4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   311f8:	e0bffc17 	ldw	r2,-16(fp)
   311fc:	10c00417 	ldw	r3,16(r2)
   31200:	e0bff717 	ldw	r2,-36(fp)
   31204:	1880221e 	bne	r3,r2,31290 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   31208:	e0bff517 	ldw	r2,-44(fp)
   3120c:	10000526 	beq	r2,zero,31224 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   31210:	00311700 	call	31170 <alt_get_errno>
   31214:	1007883a 	mov	r3,r2
   31218:	008002c4 	movi	r2,11
   3121c:	18800015 	stw	r2,0(r3)
        break;
   31220:	00002e06 	br	312dc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31224:	0005303a 	rdctl	r2,status
   31228:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3122c:	e0fff917 	ldw	r3,-28(fp)
   31230:	00bfff84 	movi	r2,-2
   31234:	1884703a 	and	r2,r3,r2
   31238:	1001703a 	wrctl	status,r2
  
  return context;
   3123c:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   31240:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31244:	e0bffc17 	ldw	r2,-16(fp)
   31248:	10800117 	ldw	r2,4(r2)
   3124c:	10c11014 	ori	r3,r2,1088
   31250:	e0bffc17 	ldw	r2,-16(fp)
   31254:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31258:	e0bffc17 	ldw	r2,-16(fp)
   3125c:	10800017 	ldw	r2,0(r2)
   31260:	10800304 	addi	r2,r2,12
   31264:	e0fffc17 	ldw	r3,-16(fp)
   31268:	18c00117 	ldw	r3,4(r3)
   3126c:	10c00035 	stwio	r3,0(r2)
   31270:	e0bff817 	ldw	r2,-32(fp)
   31274:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31278:	e0bff617 	ldw	r2,-40(fp)
   3127c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   31280:	e0bffc17 	ldw	r2,-16(fp)
   31284:	10c00417 	ldw	r3,16(r2)
   31288:	e0bff717 	ldw	r2,-36(fp)
   3128c:	18bffc26 	beq	r3,r2,31280 <__alt_data_end+0xf8031280>
      }
    }

    count--;
   31290:	e0bff417 	ldw	r2,-48(fp)
   31294:	10bfffc4 	addi	r2,r2,-1
   31298:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   3129c:	e0bffc17 	ldw	r2,-16(fp)
   312a0:	10c00517 	ldw	r3,20(r2)
   312a4:	e0bffd17 	ldw	r2,-12(fp)
   312a8:	11000044 	addi	r4,r2,1
   312ac:	e13ffd15 	stw	r4,-12(fp)
   312b0:	10800003 	ldbu	r2,0(r2)
   312b4:	1009883a 	mov	r4,r2
   312b8:	e0bffc17 	ldw	r2,-16(fp)
   312bc:	10c5883a 	add	r2,r2,r3
   312c0:	10801704 	addi	r2,r2,92
   312c4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   312c8:	e0bffc17 	ldw	r2,-16(fp)
   312cc:	e0fff717 	ldw	r3,-36(fp)
   312d0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   312d4:	e0bff417 	ldw	r2,-48(fp)
   312d8:	103fc21e 	bne	r2,zero,311e4 <__alt_data_end+0xf80311e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   312dc:	0005303a 	rdctl	r2,status
   312e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   312e4:	e0fffb17 	ldw	r3,-20(fp)
   312e8:	00bfff84 	movi	r2,-2
   312ec:	1884703a 	and	r2,r3,r2
   312f0:	1001703a 	wrctl	status,r2
  
  return context;
   312f4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   312f8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   312fc:	e0bffc17 	ldw	r2,-16(fp)
   31300:	10800117 	ldw	r2,4(r2)
   31304:	10c11014 	ori	r3,r2,1088
   31308:	e0bffc17 	ldw	r2,-16(fp)
   3130c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31310:	e0bffc17 	ldw	r2,-16(fp)
   31314:	10800017 	ldw	r2,0(r2)
   31318:	10800304 	addi	r2,r2,12
   3131c:	e0fffc17 	ldw	r3,-16(fp)
   31320:	18c00117 	ldw	r3,4(r3)
   31324:	10c00035 	stwio	r3,0(r2)
   31328:	e0bff817 	ldw	r2,-32(fp)
   3132c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31330:	e0bffa17 	ldw	r2,-24(fp)
   31334:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   31338:	e0fffe17 	ldw	r3,-8(fp)
   3133c:	e0bff417 	ldw	r2,-48(fp)
   31340:	1885c83a 	sub	r2,r3,r2
}
   31344:	e037883a 	mov	sp,fp
   31348:	dfc00117 	ldw	ra,4(sp)
   3134c:	df000017 	ldw	fp,0(sp)
   31350:	dec00204 	addi	sp,sp,8
   31354:	f800283a 	ret

00031358 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   31358:	defff504 	addi	sp,sp,-44
   3135c:	df000a15 	stw	fp,40(sp)
   31360:	df000a04 	addi	fp,sp,40
   31364:	e13ffc15 	stw	r4,-16(fp)
   31368:	e17ffd15 	stw	r5,-12(fp)
   3136c:	e1bffe15 	stw	r6,-8(fp)
   31370:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   31374:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   31378:	d0a01d17 	ldw	r2,-32652(gp)
  
  if (alt_ticks_per_second ())
   3137c:	10003c26 	beq	r2,zero,31470 <alt_alarm_start+0x118>
  {
    if (alarm)
   31380:	e0bffc17 	ldw	r2,-16(fp)
   31384:	10003826 	beq	r2,zero,31468 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   31388:	e0bffc17 	ldw	r2,-16(fp)
   3138c:	e0fffe17 	ldw	r3,-8(fp)
   31390:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   31394:	e0bffc17 	ldw	r2,-16(fp)
   31398:	e0ffff17 	ldw	r3,-4(fp)
   3139c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   313a0:	0005303a 	rdctl	r2,status
   313a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   313a8:	e0fff917 	ldw	r3,-28(fp)
   313ac:	00bfff84 	movi	r2,-2
   313b0:	1884703a 	and	r2,r3,r2
   313b4:	1001703a 	wrctl	status,r2
  
  return context;
   313b8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   313bc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   313c0:	d0a01e17 	ldw	r2,-32648(gp)
      
      current_nticks = alt_nticks();
   313c4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   313c8:	e0fffd17 	ldw	r3,-12(fp)
   313cc:	e0bff617 	ldw	r2,-40(fp)
   313d0:	1885883a 	add	r2,r3,r2
   313d4:	10c00044 	addi	r3,r2,1
   313d8:	e0bffc17 	ldw	r2,-16(fp)
   313dc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   313e0:	e0bffc17 	ldw	r2,-16(fp)
   313e4:	10c00217 	ldw	r3,8(r2)
   313e8:	e0bff617 	ldw	r2,-40(fp)
   313ec:	1880042e 	bgeu	r3,r2,31400 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   313f0:	e0bffc17 	ldw	r2,-16(fp)
   313f4:	00c00044 	movi	r3,1
   313f8:	10c00405 	stb	r3,16(r2)
   313fc:	00000206 	br	31408 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   31400:	e0bffc17 	ldw	r2,-16(fp)
   31404:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   31408:	e0bffc17 	ldw	r2,-16(fp)
   3140c:	d0e01004 	addi	r3,gp,-32704
   31410:	e0fffa15 	stw	r3,-24(fp)
   31414:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   31418:	e0bffb17 	ldw	r2,-20(fp)
   3141c:	e0fffa17 	ldw	r3,-24(fp)
   31420:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   31424:	e0bffa17 	ldw	r2,-24(fp)
   31428:	10c00017 	ldw	r3,0(r2)
   3142c:	e0bffb17 	ldw	r2,-20(fp)
   31430:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   31434:	e0bffa17 	ldw	r2,-24(fp)
   31438:	10800017 	ldw	r2,0(r2)
   3143c:	e0fffb17 	ldw	r3,-20(fp)
   31440:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   31444:	e0bffa17 	ldw	r2,-24(fp)
   31448:	e0fffb17 	ldw	r3,-20(fp)
   3144c:	10c00015 	stw	r3,0(r2)
   31450:	e0bff817 	ldw	r2,-32(fp)
   31454:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31458:	e0bff717 	ldw	r2,-36(fp)
   3145c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   31460:	0005883a 	mov	r2,zero
   31464:	00000306 	br	31474 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   31468:	00bffa84 	movi	r2,-22
   3146c:	00000106 	br	31474 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   31470:	00bfde84 	movi	r2,-134
  }
}
   31474:	e037883a 	mov	sp,fp
   31478:	df000017 	ldw	fp,0(sp)
   3147c:	dec00104 	addi	sp,sp,4
   31480:	f800283a 	ret

00031484 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   31484:	defffa04 	addi	sp,sp,-24
   31488:	dfc00515 	stw	ra,20(sp)
   3148c:	df000415 	stw	fp,16(sp)
   31490:	df000404 	addi	fp,sp,16
   31494:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   31498:	008000c4 	movi	r2,3
   3149c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   314a0:	e0fffd17 	ldw	r3,-12(fp)
   314a4:	008003f4 	movhi	r2,15
   314a8:	10909004 	addi	r2,r2,16960
   314ac:	1885383a 	mul	r2,r3,r2
   314b0:	100b883a 	mov	r5,r2
   314b4:	01017db4 	movhi	r4,1526
   314b8:	21384004 	addi	r4,r4,-7936
   314bc:	002af3c0 	call	2af3c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   314c0:	100b883a 	mov	r5,r2
   314c4:	01200034 	movhi	r4,32768
   314c8:	213fffc4 	addi	r4,r4,-1
   314cc:	002af3c0 	call	2af3c <__udivsi3>
   314d0:	100b883a 	mov	r5,r2
   314d4:	e13fff17 	ldw	r4,-4(fp)
   314d8:	002af3c0 	call	2af3c <__udivsi3>
   314dc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   314e0:	e0bffe17 	ldw	r2,-8(fp)
   314e4:	10002a26 	beq	r2,zero,31590 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   314e8:	e03ffc15 	stw	zero,-16(fp)
   314ec:	00001706 	br	3154c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   314f0:	00a00034 	movhi	r2,32768
   314f4:	10bfffc4 	addi	r2,r2,-1
   314f8:	10bfffc4 	addi	r2,r2,-1
   314fc:	103ffe1e 	bne	r2,zero,314f8 <__alt_data_end+0xf80314f8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   31500:	e0fffd17 	ldw	r3,-12(fp)
   31504:	008003f4 	movhi	r2,15
   31508:	10909004 	addi	r2,r2,16960
   3150c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   31510:	100b883a 	mov	r5,r2
   31514:	01017db4 	movhi	r4,1526
   31518:	21384004 	addi	r4,r4,-7936
   3151c:	002af3c0 	call	2af3c <__udivsi3>
   31520:	100b883a 	mov	r5,r2
   31524:	01200034 	movhi	r4,32768
   31528:	213fffc4 	addi	r4,r4,-1
   3152c:	002af3c0 	call	2af3c <__udivsi3>
   31530:	1007883a 	mov	r3,r2
   31534:	e0bfff17 	ldw	r2,-4(fp)
   31538:	10c5c83a 	sub	r2,r2,r3
   3153c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   31540:	e0bffc17 	ldw	r2,-16(fp)
   31544:	10800044 	addi	r2,r2,1
   31548:	e0bffc15 	stw	r2,-16(fp)
   3154c:	e0fffc17 	ldw	r3,-16(fp)
   31550:	e0bffe17 	ldw	r2,-8(fp)
   31554:	18bfe616 	blt	r3,r2,314f0 <__alt_data_end+0xf80314f0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31558:	e0fffd17 	ldw	r3,-12(fp)
   3155c:	008003f4 	movhi	r2,15
   31560:	10909004 	addi	r2,r2,16960
   31564:	1885383a 	mul	r2,r3,r2
   31568:	100b883a 	mov	r5,r2
   3156c:	01017db4 	movhi	r4,1526
   31570:	21384004 	addi	r4,r4,-7936
   31574:	002af3c0 	call	2af3c <__udivsi3>
   31578:	1007883a 	mov	r3,r2
   3157c:	e0bfff17 	ldw	r2,-4(fp)
   31580:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   31584:	10bfffc4 	addi	r2,r2,-1
   31588:	103ffe1e 	bne	r2,zero,31584 <__alt_data_end+0xf8031584>
   3158c:	00000d06 	br	315c4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   31590:	e0fffd17 	ldw	r3,-12(fp)
   31594:	008003f4 	movhi	r2,15
   31598:	10909004 	addi	r2,r2,16960
   3159c:	1885383a 	mul	r2,r3,r2
   315a0:	100b883a 	mov	r5,r2
   315a4:	01017db4 	movhi	r4,1526
   315a8:	21384004 	addi	r4,r4,-7936
   315ac:	002af3c0 	call	2af3c <__udivsi3>
   315b0:	1007883a 	mov	r3,r2
   315b4:	e0bfff17 	ldw	r2,-4(fp)
   315b8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   315bc:	10bfffc4 	addi	r2,r2,-1
   315c0:	00bffe16 	blt	zero,r2,315bc <__alt_data_end+0xf80315bc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   315c4:	0005883a 	mov	r2,zero
}
   315c8:	e037883a 	mov	sp,fp
   315cc:	dfc00117 	ldw	ra,4(sp)
   315d0:	df000017 	ldw	fp,0(sp)
   315d4:	dec00204 	addi	sp,sp,8
   315d8:	f800283a 	ret

000315dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   315dc:	defffe04 	addi	sp,sp,-8
   315e0:	df000115 	stw	fp,4(sp)
   315e4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   315e8:	e03fff15 	stw	zero,-4(fp)
   315ec:	00000506 	br	31604 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   315f0:	e0bfff17 	ldw	r2,-4(fp)
   315f4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   315f8:	e0bfff17 	ldw	r2,-4(fp)
   315fc:	10800804 	addi	r2,r2,32
   31600:	e0bfff15 	stw	r2,-4(fp)
   31604:	e0bfff17 	ldw	r2,-4(fp)
   31608:	10820030 	cmpltui	r2,r2,2048
   3160c:	103ff81e 	bne	r2,zero,315f0 <__alt_data_end+0xf80315f0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   31610:	0001883a 	nop
   31614:	e037883a 	mov	sp,fp
   31618:	df000017 	ldw	fp,0(sp)
   3161c:	dec00104 	addi	sp,sp,4
   31620:	f800283a 	ret

00031624 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31624:	defffe04 	addi	sp,sp,-8
   31628:	dfc00115 	stw	ra,4(sp)
   3162c:	df000015 	stw	fp,0(sp)
   31630:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31634:	d0a00b17 	ldw	r2,-32724(gp)
   31638:	10000326 	beq	r2,zero,31648 <alt_get_errno+0x24>
   3163c:	d0a00b17 	ldw	r2,-32724(gp)
   31640:	103ee83a 	callr	r2
   31644:	00000106 	br	3164c <alt_get_errno+0x28>
   31648:	d0a01204 	addi	r2,gp,-32696
}
   3164c:	e037883a 	mov	sp,fp
   31650:	dfc00117 	ldw	ra,4(sp)
   31654:	df000017 	ldw	fp,0(sp)
   31658:	dec00204 	addi	sp,sp,8
   3165c:	f800283a 	ret

00031660 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   31660:	defffa04 	addi	sp,sp,-24
   31664:	dfc00515 	stw	ra,20(sp)
   31668:	df000415 	stw	fp,16(sp)
   3166c:	df000404 	addi	fp,sp,16
   31670:	e13ffe15 	stw	r4,-8(fp)
   31674:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   31678:	e0bffe17 	ldw	r2,-8(fp)
   3167c:	10000326 	beq	r2,zero,3168c <alt_dev_llist_insert+0x2c>
   31680:	e0bffe17 	ldw	r2,-8(fp)
   31684:	10800217 	ldw	r2,8(r2)
   31688:	1000061e 	bne	r2,zero,316a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   3168c:	00316240 	call	31624 <alt_get_errno>
   31690:	1007883a 	mov	r3,r2
   31694:	00800584 	movi	r2,22
   31698:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   3169c:	00bffa84 	movi	r2,-22
   316a0:	00001306 	br	316f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   316a4:	e0bffe17 	ldw	r2,-8(fp)
   316a8:	e0ffff17 	ldw	r3,-4(fp)
   316ac:	e0fffc15 	stw	r3,-16(fp)
   316b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   316b4:	e0bffd17 	ldw	r2,-12(fp)
   316b8:	e0fffc17 	ldw	r3,-16(fp)
   316bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   316c0:	e0bffc17 	ldw	r2,-16(fp)
   316c4:	10c00017 	ldw	r3,0(r2)
   316c8:	e0bffd17 	ldw	r2,-12(fp)
   316cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   316d0:	e0bffc17 	ldw	r2,-16(fp)
   316d4:	10800017 	ldw	r2,0(r2)
   316d8:	e0fffd17 	ldw	r3,-12(fp)
   316dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   316e0:	e0bffc17 	ldw	r2,-16(fp)
   316e4:	e0fffd17 	ldw	r3,-12(fp)
   316e8:	10c00015 	stw	r3,0(r2)

  return 0;  
   316ec:	0005883a 	mov	r2,zero
}
   316f0:	e037883a 	mov	sp,fp
   316f4:	dfc00117 	ldw	ra,4(sp)
   316f8:	df000017 	ldw	fp,0(sp)
   316fc:	dec00204 	addi	sp,sp,8
   31700:	f800283a 	ret

00031704 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   31704:	defffd04 	addi	sp,sp,-12
   31708:	dfc00215 	stw	ra,8(sp)
   3170c:	df000115 	stw	fp,4(sp)
   31710:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31714:	008000f4 	movhi	r2,3
   31718:	108a1a04 	addi	r2,r2,10344
   3171c:	e0bfff15 	stw	r2,-4(fp)
   31720:	00000606 	br	3173c <_do_ctors+0x38>
        (*ctor) (); 
   31724:	e0bfff17 	ldw	r2,-4(fp)
   31728:	10800017 	ldw	r2,0(r2)
   3172c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   31730:	e0bfff17 	ldw	r2,-4(fp)
   31734:	10bfff04 	addi	r2,r2,-4
   31738:	e0bfff15 	stw	r2,-4(fp)
   3173c:	e0ffff17 	ldw	r3,-4(fp)
   31740:	008000f4 	movhi	r2,3
   31744:	108a1b04 	addi	r2,r2,10348
   31748:	18bff62e 	bgeu	r3,r2,31724 <__alt_data_end+0xf8031724>
        (*ctor) (); 
}
   3174c:	0001883a 	nop
   31750:	e037883a 	mov	sp,fp
   31754:	dfc00117 	ldw	ra,4(sp)
   31758:	df000017 	ldw	fp,0(sp)
   3175c:	dec00204 	addi	sp,sp,8
   31760:	f800283a 	ret

00031764 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   31764:	defffd04 	addi	sp,sp,-12
   31768:	dfc00215 	stw	ra,8(sp)
   3176c:	df000115 	stw	fp,4(sp)
   31770:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31774:	008000f4 	movhi	r2,3
   31778:	108a1a04 	addi	r2,r2,10344
   3177c:	e0bfff15 	stw	r2,-4(fp)
   31780:	00000606 	br	3179c <_do_dtors+0x38>
        (*dtor) (); 
   31784:	e0bfff17 	ldw	r2,-4(fp)
   31788:	10800017 	ldw	r2,0(r2)
   3178c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   31790:	e0bfff17 	ldw	r2,-4(fp)
   31794:	10bfff04 	addi	r2,r2,-4
   31798:	e0bfff15 	stw	r2,-4(fp)
   3179c:	e0ffff17 	ldw	r3,-4(fp)
   317a0:	008000f4 	movhi	r2,3
   317a4:	108a1b04 	addi	r2,r2,10348
   317a8:	18bff62e 	bgeu	r3,r2,31784 <__alt_data_end+0xf8031784>
        (*dtor) (); 
}
   317ac:	0001883a 	nop
   317b0:	e037883a 	mov	sp,fp
   317b4:	dfc00117 	ldw	ra,4(sp)
   317b8:	df000017 	ldw	fp,0(sp)
   317bc:	dec00204 	addi	sp,sp,8
   317c0:	f800283a 	ret

000317c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   317c4:	defffa04 	addi	sp,sp,-24
   317c8:	dfc00515 	stw	ra,20(sp)
   317cc:	df000415 	stw	fp,16(sp)
   317d0:	df000404 	addi	fp,sp,16
   317d4:	e13ffe15 	stw	r4,-8(fp)
   317d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   317dc:	e0bfff17 	ldw	r2,-4(fp)
   317e0:	10800017 	ldw	r2,0(r2)
   317e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   317e8:	e13ffe17 	ldw	r4,-8(fp)
   317ec:	0021ab00 	call	21ab0 <strlen>
   317f0:	10800044 	addi	r2,r2,1
   317f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   317f8:	00000d06 	br	31830 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   317fc:	e0bffc17 	ldw	r2,-16(fp)
   31800:	10800217 	ldw	r2,8(r2)
   31804:	e0fffd17 	ldw	r3,-12(fp)
   31808:	180d883a 	mov	r6,r3
   3180c:	e17ffe17 	ldw	r5,-8(fp)
   31810:	1009883a 	mov	r4,r2
   31814:	00323bc0 	call	323bc <memcmp>
   31818:	1000021e 	bne	r2,zero,31824 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   3181c:	e0bffc17 	ldw	r2,-16(fp)
   31820:	00000706 	br	31840 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   31824:	e0bffc17 	ldw	r2,-16(fp)
   31828:	10800017 	ldw	r2,0(r2)
   3182c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   31830:	e0fffc17 	ldw	r3,-16(fp)
   31834:	e0bfff17 	ldw	r2,-4(fp)
   31838:	18bff01e 	bne	r3,r2,317fc <__alt_data_end+0xf80317fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   3183c:	0005883a 	mov	r2,zero
}
   31840:	e037883a 	mov	sp,fp
   31844:	dfc00117 	ldw	ra,4(sp)
   31848:	df000017 	ldw	fp,0(sp)
   3184c:	dec00204 	addi	sp,sp,8
   31850:	f800283a 	ret

00031854 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   31854:	defffb04 	addi	sp,sp,-20
   31858:	dfc00415 	stw	ra,16(sp)
   3185c:	df000315 	stw	fp,12(sp)
   31860:	df000304 	addi	fp,sp,12
   31864:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   31868:	d0a00617 	ldw	r2,-32744(gp)
   3186c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   31870:	00003106 	br	31938 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   31874:	e0bffd17 	ldw	r2,-12(fp)
   31878:	10800217 	ldw	r2,8(r2)
   3187c:	1009883a 	mov	r4,r2
   31880:	0021ab00 	call	21ab0 <strlen>
   31884:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   31888:	e0bffd17 	ldw	r2,-12(fp)
   3188c:	10c00217 	ldw	r3,8(r2)
   31890:	e0bffe17 	ldw	r2,-8(fp)
   31894:	10bfffc4 	addi	r2,r2,-1
   31898:	1885883a 	add	r2,r3,r2
   3189c:	10800003 	ldbu	r2,0(r2)
   318a0:	10803fcc 	andi	r2,r2,255
   318a4:	1080201c 	xori	r2,r2,128
   318a8:	10bfe004 	addi	r2,r2,-128
   318ac:	10800bd8 	cmpnei	r2,r2,47
   318b0:	1000031e 	bne	r2,zero,318c0 <alt_find_file+0x6c>
    {
      len -= 1;
   318b4:	e0bffe17 	ldw	r2,-8(fp)
   318b8:	10bfffc4 	addi	r2,r2,-1
   318bc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   318c0:	e0bffe17 	ldw	r2,-8(fp)
   318c4:	e0ffff17 	ldw	r3,-4(fp)
   318c8:	1885883a 	add	r2,r3,r2
   318cc:	10800003 	ldbu	r2,0(r2)
   318d0:	10803fcc 	andi	r2,r2,255
   318d4:	1080201c 	xori	r2,r2,128
   318d8:	10bfe004 	addi	r2,r2,-128
   318dc:	10800be0 	cmpeqi	r2,r2,47
   318e0:	1000081e 	bne	r2,zero,31904 <alt_find_file+0xb0>
   318e4:	e0bffe17 	ldw	r2,-8(fp)
   318e8:	e0ffff17 	ldw	r3,-4(fp)
   318ec:	1885883a 	add	r2,r3,r2
   318f0:	10800003 	ldbu	r2,0(r2)
   318f4:	10803fcc 	andi	r2,r2,255
   318f8:	1080201c 	xori	r2,r2,128
   318fc:	10bfe004 	addi	r2,r2,-128
   31900:	10000a1e 	bne	r2,zero,3192c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   31904:	e0bffd17 	ldw	r2,-12(fp)
   31908:	10800217 	ldw	r2,8(r2)
   3190c:	e0fffe17 	ldw	r3,-8(fp)
   31910:	180d883a 	mov	r6,r3
   31914:	e17fff17 	ldw	r5,-4(fp)
   31918:	1009883a 	mov	r4,r2
   3191c:	00323bc0 	call	323bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   31920:	1000021e 	bne	r2,zero,3192c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   31924:	e0bffd17 	ldw	r2,-12(fp)
   31928:	00000706 	br	31948 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   3192c:	e0bffd17 	ldw	r2,-12(fp)
   31930:	10800017 	ldw	r2,0(r2)
   31934:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   31938:	e0fffd17 	ldw	r3,-12(fp)
   3193c:	d0a00604 	addi	r2,gp,-32744
   31940:	18bfcc1e 	bne	r3,r2,31874 <__alt_data_end+0xf8031874>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   31944:	0005883a 	mov	r2,zero
}
   31948:	e037883a 	mov	sp,fp
   3194c:	dfc00117 	ldw	ra,4(sp)
   31950:	df000017 	ldw	fp,0(sp)
   31954:	dec00204 	addi	sp,sp,8
   31958:	f800283a 	ret

0003195c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   3195c:	defffc04 	addi	sp,sp,-16
   31960:	df000315 	stw	fp,12(sp)
   31964:	df000304 	addi	fp,sp,12
   31968:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   3196c:	00bffa04 	movi	r2,-24
   31970:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   31974:	e03ffd15 	stw	zero,-12(fp)
   31978:	00001906 	br	319e0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   3197c:	00810034 	movhi	r2,1024
   31980:	10831a04 	addi	r2,r2,3176
   31984:	e0fffd17 	ldw	r3,-12(fp)
   31988:	18c00324 	muli	r3,r3,12
   3198c:	10c5883a 	add	r2,r2,r3
   31990:	10800017 	ldw	r2,0(r2)
   31994:	10000f1e 	bne	r2,zero,319d4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   31998:	00810034 	movhi	r2,1024
   3199c:	10831a04 	addi	r2,r2,3176
   319a0:	e0fffd17 	ldw	r3,-12(fp)
   319a4:	18c00324 	muli	r3,r3,12
   319a8:	10c5883a 	add	r2,r2,r3
   319ac:	e0ffff17 	ldw	r3,-4(fp)
   319b0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   319b4:	d0e00a17 	ldw	r3,-32728(gp)
   319b8:	e0bffd17 	ldw	r2,-12(fp)
   319bc:	1880020e 	bge	r3,r2,319c8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   319c0:	e0bffd17 	ldw	r2,-12(fp)
   319c4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   319c8:	e0bffd17 	ldw	r2,-12(fp)
   319cc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   319d0:	00000606 	br	319ec <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   319d4:	e0bffd17 	ldw	r2,-12(fp)
   319d8:	10800044 	addi	r2,r2,1
   319dc:	e0bffd15 	stw	r2,-12(fp)
   319e0:	e0bffd17 	ldw	r2,-12(fp)
   319e4:	10800810 	cmplti	r2,r2,32
   319e8:	103fe41e 	bne	r2,zero,3197c <__alt_data_end+0xf803197c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   319ec:	e0bffe17 	ldw	r2,-8(fp)
}
   319f0:	e037883a 	mov	sp,fp
   319f4:	df000017 	ldw	fp,0(sp)
   319f8:	dec00104 	addi	sp,sp,4
   319fc:	f800283a 	ret

00031a00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   31a00:	defffe04 	addi	sp,sp,-8
   31a04:	dfc00115 	stw	ra,4(sp)
   31a08:	df000015 	stw	fp,0(sp)
   31a0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   31a10:	01440004 	movi	r5,4096
   31a14:	0009883a 	mov	r4,zero
   31a18:	00322440 	call	32244 <alt_icache_flush>
#endif
}
   31a1c:	0001883a 	nop
   31a20:	e037883a 	mov	sp,fp
   31a24:	dfc00117 	ldw	ra,4(sp)
   31a28:	df000017 	ldw	fp,0(sp)
   31a2c:	dec00204 	addi	sp,sp,8
   31a30:	f800283a 	ret

00031a34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   31a34:	defff904 	addi	sp,sp,-28
   31a38:	dfc00615 	stw	ra,24(sp)
   31a3c:	df000515 	stw	fp,20(sp)
   31a40:	df000504 	addi	fp,sp,20
   31a44:	e13ffc15 	stw	r4,-16(fp)
   31a48:	e17ffd15 	stw	r5,-12(fp)
   31a4c:	e1bffe15 	stw	r6,-8(fp)
   31a50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   31a54:	e0800217 	ldw	r2,8(fp)
   31a58:	d8800015 	stw	r2,0(sp)
   31a5c:	e1ffff17 	ldw	r7,-4(fp)
   31a60:	e1bffe17 	ldw	r6,-8(fp)
   31a64:	e17ffd17 	ldw	r5,-12(fp)
   31a68:	e13ffc17 	ldw	r4,-16(fp)
   31a6c:	0031be40 	call	31be4 <alt_iic_isr_register>
}  
   31a70:	e037883a 	mov	sp,fp
   31a74:	dfc00117 	ldw	ra,4(sp)
   31a78:	df000017 	ldw	fp,0(sp)
   31a7c:	dec00204 	addi	sp,sp,8
   31a80:	f800283a 	ret

00031a84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   31a84:	defff904 	addi	sp,sp,-28
   31a88:	df000615 	stw	fp,24(sp)
   31a8c:	df000604 	addi	fp,sp,24
   31a90:	e13ffe15 	stw	r4,-8(fp)
   31a94:	e17fff15 	stw	r5,-4(fp)
   31a98:	e0bfff17 	ldw	r2,-4(fp)
   31a9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31aa0:	0005303a 	rdctl	r2,status
   31aa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31aa8:	e0fffb17 	ldw	r3,-20(fp)
   31aac:	00bfff84 	movi	r2,-2
   31ab0:	1884703a 	and	r2,r3,r2
   31ab4:	1001703a 	wrctl	status,r2
  
  return context;
   31ab8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   31abc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   31ac0:	00c00044 	movi	r3,1
   31ac4:	e0bffa17 	ldw	r2,-24(fp)
   31ac8:	1884983a 	sll	r2,r3,r2
   31acc:	1007883a 	mov	r3,r2
   31ad0:	d0a01c17 	ldw	r2,-32656(gp)
   31ad4:	1884b03a 	or	r2,r3,r2
   31ad8:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   31adc:	d0a01c17 	ldw	r2,-32656(gp)
   31ae0:	100170fa 	wrctl	ienable,r2
   31ae4:	e0bffc17 	ldw	r2,-16(fp)
   31ae8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31aec:	e0bffd17 	ldw	r2,-12(fp)
   31af0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   31af4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   31af8:	0001883a 	nop
}
   31afc:	e037883a 	mov	sp,fp
   31b00:	df000017 	ldw	fp,0(sp)
   31b04:	dec00104 	addi	sp,sp,4
   31b08:	f800283a 	ret

00031b0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   31b0c:	defff904 	addi	sp,sp,-28
   31b10:	df000615 	stw	fp,24(sp)
   31b14:	df000604 	addi	fp,sp,24
   31b18:	e13ffe15 	stw	r4,-8(fp)
   31b1c:	e17fff15 	stw	r5,-4(fp)
   31b20:	e0bfff17 	ldw	r2,-4(fp)
   31b24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31b28:	0005303a 	rdctl	r2,status
   31b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31b30:	e0fffb17 	ldw	r3,-20(fp)
   31b34:	00bfff84 	movi	r2,-2
   31b38:	1884703a 	and	r2,r3,r2
   31b3c:	1001703a 	wrctl	status,r2
  
  return context;
   31b40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   31b44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   31b48:	00c00044 	movi	r3,1
   31b4c:	e0bffa17 	ldw	r2,-24(fp)
   31b50:	1884983a 	sll	r2,r3,r2
   31b54:	0084303a 	nor	r2,zero,r2
   31b58:	1007883a 	mov	r3,r2
   31b5c:	d0a01c17 	ldw	r2,-32656(gp)
   31b60:	1884703a 	and	r2,r3,r2
   31b64:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   31b68:	d0a01c17 	ldw	r2,-32656(gp)
   31b6c:	100170fa 	wrctl	ienable,r2
   31b70:	e0bffc17 	ldw	r2,-16(fp)
   31b74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31b78:	e0bffd17 	ldw	r2,-12(fp)
   31b7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   31b80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   31b84:	0001883a 	nop
}
   31b88:	e037883a 	mov	sp,fp
   31b8c:	df000017 	ldw	fp,0(sp)
   31b90:	dec00104 	addi	sp,sp,4
   31b94:	f800283a 	ret

00031b98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   31b98:	defffc04 	addi	sp,sp,-16
   31b9c:	df000315 	stw	fp,12(sp)
   31ba0:	df000304 	addi	fp,sp,12
   31ba4:	e13ffe15 	stw	r4,-8(fp)
   31ba8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   31bac:	000530fa 	rdctl	r2,ienable
   31bb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   31bb4:	00c00044 	movi	r3,1
   31bb8:	e0bfff17 	ldw	r2,-4(fp)
   31bbc:	1884983a 	sll	r2,r3,r2
   31bc0:	1007883a 	mov	r3,r2
   31bc4:	e0bffd17 	ldw	r2,-12(fp)
   31bc8:	1884703a 	and	r2,r3,r2
   31bcc:	1004c03a 	cmpne	r2,r2,zero
   31bd0:	10803fcc 	andi	r2,r2,255
}
   31bd4:	e037883a 	mov	sp,fp
   31bd8:	df000017 	ldw	fp,0(sp)
   31bdc:	dec00104 	addi	sp,sp,4
   31be0:	f800283a 	ret

00031be4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   31be4:	defff504 	addi	sp,sp,-44
   31be8:	dfc00a15 	stw	ra,40(sp)
   31bec:	df000915 	stw	fp,36(sp)
   31bf0:	df000904 	addi	fp,sp,36
   31bf4:	e13ffc15 	stw	r4,-16(fp)
   31bf8:	e17ffd15 	stw	r5,-12(fp)
   31bfc:	e1bffe15 	stw	r6,-8(fp)
   31c00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   31c04:	00bffa84 	movi	r2,-22
   31c08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   31c0c:	e0bffd17 	ldw	r2,-12(fp)
   31c10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   31c14:	e0bff817 	ldw	r2,-32(fp)
   31c18:	10800808 	cmpgei	r2,r2,32
   31c1c:	1000271e 	bne	r2,zero,31cbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31c20:	0005303a 	rdctl	r2,status
   31c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31c28:	e0fffb17 	ldw	r3,-20(fp)
   31c2c:	00bfff84 	movi	r2,-2
   31c30:	1884703a 	and	r2,r3,r2
   31c34:	1001703a 	wrctl	status,r2
  
  return context;
   31c38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   31c3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   31c40:	00810034 	movhi	r2,1024
   31c44:	1087fb04 	addi	r2,r2,8172
   31c48:	e0fff817 	ldw	r3,-32(fp)
   31c4c:	180690fa 	slli	r3,r3,3
   31c50:	10c5883a 	add	r2,r2,r3
   31c54:	e0fffe17 	ldw	r3,-8(fp)
   31c58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   31c5c:	00810034 	movhi	r2,1024
   31c60:	1087fb04 	addi	r2,r2,8172
   31c64:	e0fff817 	ldw	r3,-32(fp)
   31c68:	180690fa 	slli	r3,r3,3
   31c6c:	10c5883a 	add	r2,r2,r3
   31c70:	10800104 	addi	r2,r2,4
   31c74:	e0ffff17 	ldw	r3,-4(fp)
   31c78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   31c7c:	e0bffe17 	ldw	r2,-8(fp)
   31c80:	10000526 	beq	r2,zero,31c98 <alt_iic_isr_register+0xb4>
   31c84:	e0bff817 	ldw	r2,-32(fp)
   31c88:	100b883a 	mov	r5,r2
   31c8c:	e13ffc17 	ldw	r4,-16(fp)
   31c90:	0031a840 	call	31a84 <alt_ic_irq_enable>
   31c94:	00000406 	br	31ca8 <alt_iic_isr_register+0xc4>
   31c98:	e0bff817 	ldw	r2,-32(fp)
   31c9c:	100b883a 	mov	r5,r2
   31ca0:	e13ffc17 	ldw	r4,-16(fp)
   31ca4:	0031b0c0 	call	31b0c <alt_ic_irq_disable>
   31ca8:	e0bff715 	stw	r2,-36(fp)
   31cac:	e0bffa17 	ldw	r2,-24(fp)
   31cb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31cb4:	e0bff917 	ldw	r2,-28(fp)
   31cb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   31cbc:	e0bff717 	ldw	r2,-36(fp)
}
   31cc0:	e037883a 	mov	sp,fp
   31cc4:	dfc00117 	ldw	ra,4(sp)
   31cc8:	df000017 	ldw	fp,0(sp)
   31ccc:	dec00204 	addi	sp,sp,8
   31cd0:	f800283a 	ret

00031cd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   31cd4:	defff904 	addi	sp,sp,-28
   31cd8:	dfc00615 	stw	ra,24(sp)
   31cdc:	df000515 	stw	fp,20(sp)
   31ce0:	df000504 	addi	fp,sp,20
   31ce4:	e13ffc15 	stw	r4,-16(fp)
   31ce8:	e17ffd15 	stw	r5,-12(fp)
   31cec:	e1bffe15 	stw	r6,-8(fp)
   31cf0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   31cf4:	e1bfff17 	ldw	r6,-4(fp)
   31cf8:	e17ffe17 	ldw	r5,-8(fp)
   31cfc:	e13ffd17 	ldw	r4,-12(fp)
   31d00:	002dd240 	call	2dd24 <open>
   31d04:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   31d08:	e0bffb17 	ldw	r2,-20(fp)
   31d0c:	10001c16 	blt	r2,zero,31d80 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   31d10:	00810034 	movhi	r2,1024
   31d14:	10831a04 	addi	r2,r2,3176
   31d18:	e0fffb17 	ldw	r3,-20(fp)
   31d1c:	18c00324 	muli	r3,r3,12
   31d20:	10c5883a 	add	r2,r2,r3
   31d24:	10c00017 	ldw	r3,0(r2)
   31d28:	e0bffc17 	ldw	r2,-16(fp)
   31d2c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   31d30:	00810034 	movhi	r2,1024
   31d34:	10831a04 	addi	r2,r2,3176
   31d38:	e0fffb17 	ldw	r3,-20(fp)
   31d3c:	18c00324 	muli	r3,r3,12
   31d40:	10c5883a 	add	r2,r2,r3
   31d44:	10800104 	addi	r2,r2,4
   31d48:	10c00017 	ldw	r3,0(r2)
   31d4c:	e0bffc17 	ldw	r2,-16(fp)
   31d50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   31d54:	00810034 	movhi	r2,1024
   31d58:	10831a04 	addi	r2,r2,3176
   31d5c:	e0fffb17 	ldw	r3,-20(fp)
   31d60:	18c00324 	muli	r3,r3,12
   31d64:	10c5883a 	add	r2,r2,r3
   31d68:	10800204 	addi	r2,r2,8
   31d6c:	10c00017 	ldw	r3,0(r2)
   31d70:	e0bffc17 	ldw	r2,-16(fp)
   31d74:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   31d78:	e13ffb17 	ldw	r4,-20(fp)
   31d7c:	002dfb00 	call	2dfb0 <alt_release_fd>
  }
} 
   31d80:	0001883a 	nop
   31d84:	e037883a 	mov	sp,fp
   31d88:	dfc00117 	ldw	ra,4(sp)
   31d8c:	df000017 	ldw	fp,0(sp)
   31d90:	dec00204 	addi	sp,sp,8
   31d94:	f800283a 	ret

00031d98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   31d98:	defffb04 	addi	sp,sp,-20
   31d9c:	dfc00415 	stw	ra,16(sp)
   31da0:	df000315 	stw	fp,12(sp)
   31da4:	df000304 	addi	fp,sp,12
   31da8:	e13ffd15 	stw	r4,-12(fp)
   31dac:	e17ffe15 	stw	r5,-8(fp)
   31db0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   31db4:	01c07fc4 	movi	r7,511
   31db8:	01800044 	movi	r6,1
   31dbc:	e17ffd17 	ldw	r5,-12(fp)
   31dc0:	01010034 	movhi	r4,1024
   31dc4:	21031d04 	addi	r4,r4,3188
   31dc8:	0031cd40 	call	31cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   31dcc:	01c07fc4 	movi	r7,511
   31dd0:	000d883a 	mov	r6,zero
   31dd4:	e17ffe17 	ldw	r5,-8(fp)
   31dd8:	01010034 	movhi	r4,1024
   31ddc:	21031a04 	addi	r4,r4,3176
   31de0:	0031cd40 	call	31cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   31de4:	01c07fc4 	movi	r7,511
   31de8:	01800044 	movi	r6,1
   31dec:	e17fff17 	ldw	r5,-4(fp)
   31df0:	01010034 	movhi	r4,1024
   31df4:	21032004 	addi	r4,r4,3200
   31df8:	0031cd40 	call	31cd4 <alt_open_fd>
}  
   31dfc:	0001883a 	nop
   31e00:	e037883a 	mov	sp,fp
   31e04:	dfc00117 	ldw	ra,4(sp)
   31e08:	df000017 	ldw	fp,0(sp)
   31e0c:	dec00204 	addi	sp,sp,8
   31e10:	f800283a 	ret

00031e14 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   31e14:	defff204 	addi	sp,sp,-56
   31e18:	dfc00a15 	stw	ra,40(sp)
   31e1c:	df000915 	stw	fp,36(sp)
   31e20:	df000904 	addi	fp,sp,36
   31e24:	e13fff15 	stw	r4,-4(fp)
   31e28:	e1400215 	stw	r5,8(fp)
   31e2c:	e1800315 	stw	r6,12(fp)
   31e30:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   31e34:	e0800204 	addi	r2,fp,8
   31e38:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   31e3c:	e0bfff17 	ldw	r2,-4(fp)
   31e40:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   31e44:	00006f06 	br	32004 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   31e48:	e0bff807 	ldb	r2,-32(fp)
   31e4c:	10800960 	cmpeqi	r2,r2,37
   31e50:	1000041e 	bne	r2,zero,31e64 <alt_printf+0x50>
        {
            alt_putchar(c);
   31e54:	e0bff807 	ldb	r2,-32(fp)
   31e58:	1009883a 	mov	r4,r2
   31e5c:	00320400 	call	32040 <alt_putchar>
   31e60:	00006806 	br	32004 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   31e64:	e0bff717 	ldw	r2,-36(fp)
   31e68:	10c00044 	addi	r3,r2,1
   31e6c:	e0fff715 	stw	r3,-36(fp)
   31e70:	10800003 	ldbu	r2,0(r2)
   31e74:	e0bff805 	stb	r2,-32(fp)
   31e78:	e0bff807 	ldb	r2,-32(fp)
   31e7c:	10006926 	beq	r2,zero,32024 <alt_printf+0x210>
            {
                if (c == '%')
   31e80:	e0bff807 	ldb	r2,-32(fp)
   31e84:	10800958 	cmpnei	r2,r2,37
   31e88:	1000041e 	bne	r2,zero,31e9c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   31e8c:	e0bff807 	ldb	r2,-32(fp)
   31e90:	1009883a 	mov	r4,r2
   31e94:	00320400 	call	32040 <alt_putchar>
   31e98:	00005a06 	br	32004 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   31e9c:	e0bff807 	ldb	r2,-32(fp)
   31ea0:	108018d8 	cmpnei	r2,r2,99
   31ea4:	1000081e 	bne	r2,zero,31ec8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   31ea8:	e0bffe17 	ldw	r2,-8(fp)
   31eac:	10c00104 	addi	r3,r2,4
   31eb0:	e0fffe15 	stw	r3,-8(fp)
   31eb4:	10800017 	ldw	r2,0(r2)
   31eb8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   31ebc:	e13ffd17 	ldw	r4,-12(fp)
   31ec0:	00320400 	call	32040 <alt_putchar>
   31ec4:	00004f06 	br	32004 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   31ec8:	e0bff807 	ldb	r2,-32(fp)
   31ecc:	10801e18 	cmpnei	r2,r2,120
   31ed0:	1000341e 	bne	r2,zero,31fa4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   31ed4:	e0bffe17 	ldw	r2,-8(fp)
   31ed8:	10c00104 	addi	r3,r2,4
   31edc:	e0fffe15 	stw	r3,-8(fp)
   31ee0:	10800017 	ldw	r2,0(r2)
   31ee4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   31ee8:	e0bffb17 	ldw	r2,-20(fp)
   31eec:	1000031e 	bne	r2,zero,31efc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   31ef0:	01000c04 	movi	r4,48
   31ef4:	00320400 	call	32040 <alt_putchar>
                        continue;
   31ef8:	00004206 	br	32004 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   31efc:	00800704 	movi	r2,28
   31f00:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   31f04:	00000306 	br	31f14 <alt_printf+0x100>
                        digit_shift -= 4;
   31f08:	e0bff917 	ldw	r2,-28(fp)
   31f0c:	10bfff04 	addi	r2,r2,-4
   31f10:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   31f14:	00c003c4 	movi	r3,15
   31f18:	e0bff917 	ldw	r2,-28(fp)
   31f1c:	1884983a 	sll	r2,r3,r2
   31f20:	1007883a 	mov	r3,r2
   31f24:	e0bffb17 	ldw	r2,-20(fp)
   31f28:	1884703a 	and	r2,r3,r2
   31f2c:	103ff626 	beq	r2,zero,31f08 <__alt_data_end+0xf8031f08>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   31f30:	00001906 	br	31f98 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   31f34:	00c003c4 	movi	r3,15
   31f38:	e0bff917 	ldw	r2,-28(fp)
   31f3c:	1884983a 	sll	r2,r3,r2
   31f40:	1007883a 	mov	r3,r2
   31f44:	e0bffb17 	ldw	r2,-20(fp)
   31f48:	1886703a 	and	r3,r3,r2
   31f4c:	e0bff917 	ldw	r2,-28(fp)
   31f50:	1884d83a 	srl	r2,r3,r2
   31f54:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   31f58:	e0bffc17 	ldw	r2,-16(fp)
   31f5c:	108002a8 	cmpgeui	r2,r2,10
   31f60:	1000041e 	bne	r2,zero,31f74 <alt_printf+0x160>
                            c = '0' + digit;
   31f64:	e0bffc17 	ldw	r2,-16(fp)
   31f68:	10800c04 	addi	r2,r2,48
   31f6c:	e0bff805 	stb	r2,-32(fp)
   31f70:	00000306 	br	31f80 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   31f74:	e0bffc17 	ldw	r2,-16(fp)
   31f78:	108015c4 	addi	r2,r2,87
   31f7c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   31f80:	e0bff807 	ldb	r2,-32(fp)
   31f84:	1009883a 	mov	r4,r2
   31f88:	00320400 	call	32040 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   31f8c:	e0bff917 	ldw	r2,-28(fp)
   31f90:	10bfff04 	addi	r2,r2,-4
   31f94:	e0bff915 	stw	r2,-28(fp)
   31f98:	e0bff917 	ldw	r2,-28(fp)
   31f9c:	103fe50e 	bge	r2,zero,31f34 <__alt_data_end+0xf8031f34>
   31fa0:	00001806 	br	32004 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   31fa4:	e0bff807 	ldb	r2,-32(fp)
   31fa8:	10801cd8 	cmpnei	r2,r2,115
   31fac:	1000151e 	bne	r2,zero,32004 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   31fb0:	e0bffe17 	ldw	r2,-8(fp)
   31fb4:	10c00104 	addi	r3,r2,4
   31fb8:	e0fffe15 	stw	r3,-8(fp)
   31fbc:	10800017 	ldw	r2,0(r2)
   31fc0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   31fc4:	00000906 	br	31fec <alt_printf+0x1d8>
                      alt_putchar(*s++);
   31fc8:	e0bffa17 	ldw	r2,-24(fp)
   31fcc:	10c00044 	addi	r3,r2,1
   31fd0:	e0fffa15 	stw	r3,-24(fp)
   31fd4:	10800003 	ldbu	r2,0(r2)
   31fd8:	10803fcc 	andi	r2,r2,255
   31fdc:	1080201c 	xori	r2,r2,128
   31fe0:	10bfe004 	addi	r2,r2,-128
   31fe4:	1009883a 	mov	r4,r2
   31fe8:	00320400 	call	32040 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   31fec:	e0bffa17 	ldw	r2,-24(fp)
   31ff0:	10800003 	ldbu	r2,0(r2)
   31ff4:	10803fcc 	andi	r2,r2,255
   31ff8:	1080201c 	xori	r2,r2,128
   31ffc:	10bfe004 	addi	r2,r2,-128
   32000:	103ff11e 	bne	r2,zero,31fc8 <__alt_data_end+0xf8031fc8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   32004:	e0bff717 	ldw	r2,-36(fp)
   32008:	10c00044 	addi	r3,r2,1
   3200c:	e0fff715 	stw	r3,-36(fp)
   32010:	10800003 	ldbu	r2,0(r2)
   32014:	e0bff805 	stb	r2,-32(fp)
   32018:	e0bff807 	ldb	r2,-32(fp)
   3201c:	103f8a1e 	bne	r2,zero,31e48 <__alt_data_end+0xf8031e48>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   32020:	00000106 	br	32028 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   32024:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   32028:	0001883a 	nop
   3202c:	e037883a 	mov	sp,fp
   32030:	dfc00117 	ldw	ra,4(sp)
   32034:	df000017 	ldw	fp,0(sp)
   32038:	dec00504 	addi	sp,sp,20
   3203c:	f800283a 	ret

00032040 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   32040:	defffd04 	addi	sp,sp,-12
   32044:	dfc00215 	stw	ra,8(sp)
   32048:	df000115 	stw	fp,4(sp)
   3204c:	df000104 	addi	fp,sp,4
   32050:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   32054:	d0a00117 	ldw	r2,-32764(gp)
   32058:	10800217 	ldw	r2,8(r2)
   3205c:	100b883a 	mov	r5,r2
   32060:	e13fff17 	ldw	r4,-4(fp)
   32064:	00324d80 	call	324d8 <putc>
#endif
#endif
}
   32068:	e037883a 	mov	sp,fp
   3206c:	dfc00117 	ldw	ra,4(sp)
   32070:	df000017 	ldw	fp,0(sp)
   32074:	dec00204 	addi	sp,sp,8
   32078:	f800283a 	ret

0003207c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3207c:	defffa04 	addi	sp,sp,-24
   32080:	df000515 	stw	fp,20(sp)
   32084:	df000504 	addi	fp,sp,20
   32088:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3208c:	0005303a 	rdctl	r2,status
   32090:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32094:	e0fffc17 	ldw	r3,-16(fp)
   32098:	00bfff84 	movi	r2,-2
   3209c:	1884703a 	and	r2,r3,r2
   320a0:	1001703a 	wrctl	status,r2
  
  return context;
   320a4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   320a8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   320ac:	e0bfff17 	ldw	r2,-4(fp)
   320b0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   320b4:	e0bffd17 	ldw	r2,-12(fp)
   320b8:	10800017 	ldw	r2,0(r2)
   320bc:	e0fffd17 	ldw	r3,-12(fp)
   320c0:	18c00117 	ldw	r3,4(r3)
   320c4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   320c8:	e0bffd17 	ldw	r2,-12(fp)
   320cc:	10800117 	ldw	r2,4(r2)
   320d0:	e0fffd17 	ldw	r3,-12(fp)
   320d4:	18c00017 	ldw	r3,0(r3)
   320d8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   320dc:	e0bffd17 	ldw	r2,-12(fp)
   320e0:	e0fffd17 	ldw	r3,-12(fp)
   320e4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   320e8:	e0bffd17 	ldw	r2,-12(fp)
   320ec:	e0fffd17 	ldw	r3,-12(fp)
   320f0:	10c00015 	stw	r3,0(r2)
   320f4:	e0bffb17 	ldw	r2,-20(fp)
   320f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   320fc:	e0bffe17 	ldw	r2,-8(fp)
   32100:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   32104:	0001883a 	nop
   32108:	e037883a 	mov	sp,fp
   3210c:	df000017 	ldw	fp,0(sp)
   32110:	dec00104 	addi	sp,sp,4
   32114:	f800283a 	ret

00032118 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   32118:	defffb04 	addi	sp,sp,-20
   3211c:	dfc00415 	stw	ra,16(sp)
   32120:	df000315 	stw	fp,12(sp)
   32124:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   32128:	d0a01017 	ldw	r2,-32704(gp)
   3212c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   32130:	d0a01e17 	ldw	r2,-32648(gp)
   32134:	10800044 	addi	r2,r2,1
   32138:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   3213c:	00002e06 	br	321f8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   32140:	e0bffd17 	ldw	r2,-12(fp)
   32144:	10800017 	ldw	r2,0(r2)
   32148:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   3214c:	e0bffd17 	ldw	r2,-12(fp)
   32150:	10800403 	ldbu	r2,16(r2)
   32154:	10803fcc 	andi	r2,r2,255
   32158:	10000426 	beq	r2,zero,3216c <alt_tick+0x54>
   3215c:	d0a01e17 	ldw	r2,-32648(gp)
   32160:	1000021e 	bne	r2,zero,3216c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   32164:	e0bffd17 	ldw	r2,-12(fp)
   32168:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   3216c:	e0bffd17 	ldw	r2,-12(fp)
   32170:	10800217 	ldw	r2,8(r2)
   32174:	d0e01e17 	ldw	r3,-32648(gp)
   32178:	18801d36 	bltu	r3,r2,321f0 <alt_tick+0xd8>
   3217c:	e0bffd17 	ldw	r2,-12(fp)
   32180:	10800403 	ldbu	r2,16(r2)
   32184:	10803fcc 	andi	r2,r2,255
   32188:	1000191e 	bne	r2,zero,321f0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3218c:	e0bffd17 	ldw	r2,-12(fp)
   32190:	10800317 	ldw	r2,12(r2)
   32194:	e0fffd17 	ldw	r3,-12(fp)
   32198:	18c00517 	ldw	r3,20(r3)
   3219c:	1809883a 	mov	r4,r3
   321a0:	103ee83a 	callr	r2
   321a4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   321a8:	e0bfff17 	ldw	r2,-4(fp)
   321ac:	1000031e 	bne	r2,zero,321bc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   321b0:	e13ffd17 	ldw	r4,-12(fp)
   321b4:	003207c0 	call	3207c <alt_alarm_stop>
   321b8:	00000d06 	br	321f0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   321bc:	e0bffd17 	ldw	r2,-12(fp)
   321c0:	10c00217 	ldw	r3,8(r2)
   321c4:	e0bfff17 	ldw	r2,-4(fp)
   321c8:	1887883a 	add	r3,r3,r2
   321cc:	e0bffd17 	ldw	r2,-12(fp)
   321d0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   321d4:	e0bffd17 	ldw	r2,-12(fp)
   321d8:	10c00217 	ldw	r3,8(r2)
   321dc:	d0a01e17 	ldw	r2,-32648(gp)
   321e0:	1880032e 	bgeu	r3,r2,321f0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   321e4:	e0bffd17 	ldw	r2,-12(fp)
   321e8:	00c00044 	movi	r3,1
   321ec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   321f0:	e0bffe17 	ldw	r2,-8(fp)
   321f4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   321f8:	e0fffd17 	ldw	r3,-12(fp)
   321fc:	d0a01004 	addi	r2,gp,-32704
   32200:	18bfcf1e 	bne	r3,r2,32140 <__alt_data_end+0xf8032140>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   32204:	0001883a 	nop
}
   32208:	0001883a 	nop
   3220c:	e037883a 	mov	sp,fp
   32210:	dfc00117 	ldw	ra,4(sp)
   32214:	df000017 	ldw	fp,0(sp)
   32218:	dec00204 	addi	sp,sp,8
   3221c:	f800283a 	ret

00032220 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   32220:	deffff04 	addi	sp,sp,-4
   32224:	df000015 	stw	fp,0(sp)
   32228:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   3222c:	000170fa 	wrctl	ienable,zero
}
   32230:	0001883a 	nop
   32234:	e037883a 	mov	sp,fp
   32238:	df000017 	ldw	fp,0(sp)
   3223c:	dec00104 	addi	sp,sp,4
   32240:	f800283a 	ret

00032244 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   32244:	defffb04 	addi	sp,sp,-20
   32248:	df000415 	stw	fp,16(sp)
   3224c:	df000404 	addi	fp,sp,16
   32250:	e13ffe15 	stw	r4,-8(fp)
   32254:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   32258:	e0bfff17 	ldw	r2,-4(fp)
   3225c:	10840070 	cmpltui	r2,r2,4097
   32260:	1000021e 	bne	r2,zero,3226c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   32264:	00840004 	movi	r2,4096
   32268:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   3226c:	e0fffe17 	ldw	r3,-8(fp)
   32270:	e0bfff17 	ldw	r2,-4(fp)
   32274:	1885883a 	add	r2,r3,r2
   32278:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   3227c:	e0bffe17 	ldw	r2,-8(fp)
   32280:	e0bffc15 	stw	r2,-16(fp)
   32284:	00000506 	br	3229c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   32288:	e0bffc17 	ldw	r2,-16(fp)
   3228c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   32290:	e0bffc17 	ldw	r2,-16(fp)
   32294:	10800804 	addi	r2,r2,32
   32298:	e0bffc15 	stw	r2,-16(fp)
   3229c:	e0fffc17 	ldw	r3,-16(fp)
   322a0:	e0bffd17 	ldw	r2,-12(fp)
   322a4:	18bff836 	bltu	r3,r2,32288 <__alt_data_end+0xf8032288>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   322a8:	e0bffe17 	ldw	r2,-8(fp)
   322ac:	108007cc 	andi	r2,r2,31
   322b0:	10000226 	beq	r2,zero,322bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   322b4:	e0bffc17 	ldw	r2,-16(fp)
   322b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   322bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   322c0:	0001883a 	nop
   322c4:	e037883a 	mov	sp,fp
   322c8:	df000017 	ldw	fp,0(sp)
   322cc:	dec00104 	addi	sp,sp,4
   322d0:	f800283a 	ret

000322d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   322d4:	defffe04 	addi	sp,sp,-8
   322d8:	df000115 	stw	fp,4(sp)
   322dc:	df000104 	addi	fp,sp,4
   322e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   322e4:	e0bfff17 	ldw	r2,-4(fp)
   322e8:	10bffe84 	addi	r2,r2,-6
   322ec:	10c00428 	cmpgeui	r3,r2,16
   322f0:	18001a1e 	bne	r3,zero,3235c <alt_exception_cause_generated_bad_addr+0x88>
   322f4:	100690ba 	slli	r3,r2,2
   322f8:	008000f4 	movhi	r2,3
   322fc:	1088c304 	addi	r2,r2,8972
   32300:	1885883a 	add	r2,r3,r2
   32304:	10800017 	ldw	r2,0(r2)
   32308:	1000683a 	jmp	r2
   3230c:	0003234c 	andi	zero,zero,3213
   32310:	0003234c 	andi	zero,zero,3213
   32314:	0003235c 	xori	zero,zero,3213
   32318:	0003235c 	xori	zero,zero,3213
   3231c:	0003235c 	xori	zero,zero,3213
   32320:	0003234c 	andi	zero,zero,3213
   32324:	00032354 	movui	zero,3213
   32328:	0003235c 	xori	zero,zero,3213
   3232c:	0003234c 	andi	zero,zero,3213
   32330:	0003234c 	andi	zero,zero,3213
   32334:	0003235c 	xori	zero,zero,3213
   32338:	0003234c 	andi	zero,zero,3213
   3233c:	00032354 	movui	zero,3213
   32340:	0003235c 	xori	zero,zero,3213
   32344:	0003235c 	xori	zero,zero,3213
   32348:	0003234c 	andi	zero,zero,3213
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   3234c:	00800044 	movi	r2,1
   32350:	00000306 	br	32360 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   32354:	0005883a 	mov	r2,zero
   32358:	00000106 	br	32360 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   3235c:	0005883a 	mov	r2,zero
  }
}
   32360:	e037883a 	mov	sp,fp
   32364:	df000017 	ldw	fp,0(sp)
   32368:	dec00104 	addi	sp,sp,4
   3236c:	f800283a 	ret

00032370 <atexit>:
   32370:	200b883a 	mov	r5,r4
   32374:	000f883a 	mov	r7,zero
   32378:	000d883a 	mov	r6,zero
   3237c:	0009883a 	mov	r4,zero
   32380:	00325a01 	jmpi	325a0 <__register_exitproc>

00032384 <exit>:
   32384:	defffe04 	addi	sp,sp,-8
   32388:	000b883a 	mov	r5,zero
   3238c:	dc000015 	stw	r16,0(sp)
   32390:	dfc00115 	stw	ra,4(sp)
   32394:	2021883a 	mov	r16,r4
   32398:	00326b80 	call	326b8 <__call_exitprocs>
   3239c:	00810034 	movhi	r2,1024
   323a0:	1087d104 	addi	r2,r2,8004
   323a4:	11000017 	ldw	r4,0(r2)
   323a8:	20800f17 	ldw	r2,60(r4)
   323ac:	10000126 	beq	r2,zero,323b4 <exit+0x30>
   323b0:	103ee83a 	callr	r2
   323b4:	8009883a 	mov	r4,r16
   323b8:	00328380 	call	32838 <_exit>

000323bc <memcmp>:
   323bc:	01c000c4 	movi	r7,3
   323c0:	3980192e 	bgeu	r7,r6,32428 <memcmp+0x6c>
   323c4:	2144b03a 	or	r2,r4,r5
   323c8:	11c4703a 	and	r2,r2,r7
   323cc:	10000f26 	beq	r2,zero,3240c <memcmp+0x50>
   323d0:	20800003 	ldbu	r2,0(r4)
   323d4:	28c00003 	ldbu	r3,0(r5)
   323d8:	10c0151e 	bne	r2,r3,32430 <memcmp+0x74>
   323dc:	31bfff84 	addi	r6,r6,-2
   323e0:	01ffffc4 	movi	r7,-1
   323e4:	00000406 	br	323f8 <memcmp+0x3c>
   323e8:	20800003 	ldbu	r2,0(r4)
   323ec:	28c00003 	ldbu	r3,0(r5)
   323f0:	31bfffc4 	addi	r6,r6,-1
   323f4:	10c00e1e 	bne	r2,r3,32430 <memcmp+0x74>
   323f8:	21000044 	addi	r4,r4,1
   323fc:	29400044 	addi	r5,r5,1
   32400:	31fff91e 	bne	r6,r7,323e8 <__alt_data_end+0xf80323e8>
   32404:	0005883a 	mov	r2,zero
   32408:	f800283a 	ret
   3240c:	20c00017 	ldw	r3,0(r4)
   32410:	28800017 	ldw	r2,0(r5)
   32414:	18bfee1e 	bne	r3,r2,323d0 <__alt_data_end+0xf80323d0>
   32418:	31bfff04 	addi	r6,r6,-4
   3241c:	21000104 	addi	r4,r4,4
   32420:	29400104 	addi	r5,r5,4
   32424:	39bff936 	bltu	r7,r6,3240c <__alt_data_end+0xf803240c>
   32428:	303fe91e 	bne	r6,zero,323d0 <__alt_data_end+0xf80323d0>
   3242c:	003ff506 	br	32404 <__alt_data_end+0xf8032404>
   32430:	10c5c83a 	sub	r2,r2,r3
   32434:	f800283a 	ret

00032438 <_putc_r>:
   32438:	defffc04 	addi	sp,sp,-16
   3243c:	dc000215 	stw	r16,8(sp)
   32440:	dfc00315 	stw	ra,12(sp)
   32444:	2021883a 	mov	r16,r4
   32448:	20000226 	beq	r4,zero,32454 <_putc_r+0x1c>
   3244c:	20800e17 	ldw	r2,56(r4)
   32450:	10001b26 	beq	r2,zero,324c0 <_putc_r+0x88>
   32454:	30800217 	ldw	r2,8(r6)
   32458:	10bfffc4 	addi	r2,r2,-1
   3245c:	30800215 	stw	r2,8(r6)
   32460:	10000a16 	blt	r2,zero,3248c <_putc_r+0x54>
   32464:	30800017 	ldw	r2,0(r6)
   32468:	11400005 	stb	r5,0(r2)
   3246c:	30800017 	ldw	r2,0(r6)
   32470:	10c00044 	addi	r3,r2,1
   32474:	30c00015 	stw	r3,0(r6)
   32478:	10800003 	ldbu	r2,0(r2)
   3247c:	dfc00317 	ldw	ra,12(sp)
   32480:	dc000217 	ldw	r16,8(sp)
   32484:	dec00404 	addi	sp,sp,16
   32488:	f800283a 	ret
   3248c:	30c00617 	ldw	r3,24(r6)
   32490:	10c00616 	blt	r2,r3,324ac <_putc_r+0x74>
   32494:	30800017 	ldw	r2,0(r6)
   32498:	00c00284 	movi	r3,10
   3249c:	11400005 	stb	r5,0(r2)
   324a0:	30800017 	ldw	r2,0(r6)
   324a4:	11400003 	ldbu	r5,0(r2)
   324a8:	28fff11e 	bne	r5,r3,32470 <__alt_data_end+0xf8032470>
   324ac:	8009883a 	mov	r4,r16
   324b0:	dfc00317 	ldw	ra,12(sp)
   324b4:	dc000217 	ldw	r16,8(sp)
   324b8:	dec00404 	addi	sp,sp,16
   324bc:	002a0541 	jmpi	2a054 <__swbuf_r>
   324c0:	d9400015 	stw	r5,0(sp)
   324c4:	d9800115 	stw	r6,4(sp)
   324c8:	0025ea00 	call	25ea0 <__sinit>
   324cc:	d9800117 	ldw	r6,4(sp)
   324d0:	d9400017 	ldw	r5,0(sp)
   324d4:	003fdf06 	br	32454 <__alt_data_end+0xf8032454>

000324d8 <putc>:
   324d8:	00810034 	movhi	r2,1024
   324dc:	defffc04 	addi	sp,sp,-16
   324e0:	1087d204 	addi	r2,r2,8008
   324e4:	dc000115 	stw	r16,4(sp)
   324e8:	14000017 	ldw	r16,0(r2)
   324ec:	dc400215 	stw	r17,8(sp)
   324f0:	dfc00315 	stw	ra,12(sp)
   324f4:	2023883a 	mov	r17,r4
   324f8:	80000226 	beq	r16,zero,32504 <putc+0x2c>
   324fc:	80800e17 	ldw	r2,56(r16)
   32500:	10001a26 	beq	r2,zero,3256c <putc+0x94>
   32504:	28800217 	ldw	r2,8(r5)
   32508:	10bfffc4 	addi	r2,r2,-1
   3250c:	28800215 	stw	r2,8(r5)
   32510:	10000b16 	blt	r2,zero,32540 <putc+0x68>
   32514:	28800017 	ldw	r2,0(r5)
   32518:	14400005 	stb	r17,0(r2)
   3251c:	28800017 	ldw	r2,0(r5)
   32520:	10c00044 	addi	r3,r2,1
   32524:	28c00015 	stw	r3,0(r5)
   32528:	10800003 	ldbu	r2,0(r2)
   3252c:	dfc00317 	ldw	ra,12(sp)
   32530:	dc400217 	ldw	r17,8(sp)
   32534:	dc000117 	ldw	r16,4(sp)
   32538:	dec00404 	addi	sp,sp,16
   3253c:	f800283a 	ret
   32540:	28c00617 	ldw	r3,24(r5)
   32544:	10c00e16 	blt	r2,r3,32580 <putc+0xa8>
   32548:	28800017 	ldw	r2,0(r5)
   3254c:	01000284 	movi	r4,10
   32550:	14400005 	stb	r17,0(r2)
   32554:	28800017 	ldw	r2,0(r5)
   32558:	10c00003 	ldbu	r3,0(r2)
   3255c:	193ff01e 	bne	r3,r4,32520 <__alt_data_end+0xf8032520>
   32560:	280d883a 	mov	r6,r5
   32564:	180b883a 	mov	r5,r3
   32568:	00000706 	br	32588 <putc+0xb0>
   3256c:	8009883a 	mov	r4,r16
   32570:	d9400015 	stw	r5,0(sp)
   32574:	0025ea00 	call	25ea0 <__sinit>
   32578:	d9400017 	ldw	r5,0(sp)
   3257c:	003fe106 	br	32504 <__alt_data_end+0xf8032504>
   32580:	280d883a 	mov	r6,r5
   32584:	880b883a 	mov	r5,r17
   32588:	8009883a 	mov	r4,r16
   3258c:	dfc00317 	ldw	ra,12(sp)
   32590:	dc400217 	ldw	r17,8(sp)
   32594:	dc000117 	ldw	r16,4(sp)
   32598:	dec00404 	addi	sp,sp,16
   3259c:	002a0541 	jmpi	2a054 <__swbuf_r>

000325a0 <__register_exitproc>:
   325a0:	defffa04 	addi	sp,sp,-24
   325a4:	dc000315 	stw	r16,12(sp)
   325a8:	04010034 	movhi	r16,1024
   325ac:	8407d104 	addi	r16,r16,8004
   325b0:	80c00017 	ldw	r3,0(r16)
   325b4:	dc400415 	stw	r17,16(sp)
   325b8:	dfc00515 	stw	ra,20(sp)
   325bc:	18805217 	ldw	r2,328(r3)
   325c0:	2023883a 	mov	r17,r4
   325c4:	10003726 	beq	r2,zero,326a4 <__register_exitproc+0x104>
   325c8:	10c00117 	ldw	r3,4(r2)
   325cc:	010007c4 	movi	r4,31
   325d0:	20c00e16 	blt	r4,r3,3260c <__register_exitproc+0x6c>
   325d4:	1a000044 	addi	r8,r3,1
   325d8:	8800221e 	bne	r17,zero,32664 <__register_exitproc+0xc4>
   325dc:	18c00084 	addi	r3,r3,2
   325e0:	18c7883a 	add	r3,r3,r3
   325e4:	18c7883a 	add	r3,r3,r3
   325e8:	12000115 	stw	r8,4(r2)
   325ec:	10c7883a 	add	r3,r2,r3
   325f0:	19400015 	stw	r5,0(r3)
   325f4:	0005883a 	mov	r2,zero
   325f8:	dfc00517 	ldw	ra,20(sp)
   325fc:	dc400417 	ldw	r17,16(sp)
   32600:	dc000317 	ldw	r16,12(sp)
   32604:	dec00604 	addi	sp,sp,24
   32608:	f800283a 	ret
   3260c:	00800034 	movhi	r2,0
   32610:	10800004 	addi	r2,r2,0
   32614:	10002626 	beq	r2,zero,326b0 <__register_exitproc+0x110>
   32618:	01006404 	movi	r4,400
   3261c:	d9400015 	stw	r5,0(sp)
   32620:	d9800115 	stw	r6,4(sp)
   32624:	d9c00215 	stw	r7,8(sp)
   32628:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   3262c:	d9400017 	ldw	r5,0(sp)
   32630:	d9800117 	ldw	r6,4(sp)
   32634:	d9c00217 	ldw	r7,8(sp)
   32638:	10001d26 	beq	r2,zero,326b0 <__register_exitproc+0x110>
   3263c:	81000017 	ldw	r4,0(r16)
   32640:	10000115 	stw	zero,4(r2)
   32644:	02000044 	movi	r8,1
   32648:	22405217 	ldw	r9,328(r4)
   3264c:	0007883a 	mov	r3,zero
   32650:	12400015 	stw	r9,0(r2)
   32654:	20805215 	stw	r2,328(r4)
   32658:	10006215 	stw	zero,392(r2)
   3265c:	10006315 	stw	zero,396(r2)
   32660:	883fde26 	beq	r17,zero,325dc <__alt_data_end+0xf80325dc>
   32664:	18c9883a 	add	r4,r3,r3
   32668:	2109883a 	add	r4,r4,r4
   3266c:	1109883a 	add	r4,r2,r4
   32670:	21802215 	stw	r6,136(r4)
   32674:	01800044 	movi	r6,1
   32678:	12406217 	ldw	r9,392(r2)
   3267c:	30cc983a 	sll	r6,r6,r3
   32680:	4992b03a 	or	r9,r9,r6
   32684:	12406215 	stw	r9,392(r2)
   32688:	21c04215 	stw	r7,264(r4)
   3268c:	01000084 	movi	r4,2
   32690:	893fd21e 	bne	r17,r4,325dc <__alt_data_end+0xf80325dc>
   32694:	11006317 	ldw	r4,396(r2)
   32698:	218cb03a 	or	r6,r4,r6
   3269c:	11806315 	stw	r6,396(r2)
   326a0:	003fce06 	br	325dc <__alt_data_end+0xf80325dc>
   326a4:	18805304 	addi	r2,r3,332
   326a8:	18805215 	stw	r2,328(r3)
   326ac:	003fc606 	br	325c8 <__alt_data_end+0xf80325c8>
   326b0:	00bfffc4 	movi	r2,-1
   326b4:	003fd006 	br	325f8 <__alt_data_end+0xf80325f8>

000326b8 <__call_exitprocs>:
   326b8:	defff504 	addi	sp,sp,-44
   326bc:	df000915 	stw	fp,36(sp)
   326c0:	dd400615 	stw	r21,24(sp)
   326c4:	dc800315 	stw	r18,12(sp)
   326c8:	dfc00a15 	stw	ra,40(sp)
   326cc:	ddc00815 	stw	r23,32(sp)
   326d0:	dd800715 	stw	r22,28(sp)
   326d4:	dd000515 	stw	r20,20(sp)
   326d8:	dcc00415 	stw	r19,16(sp)
   326dc:	dc400215 	stw	r17,8(sp)
   326e0:	dc000115 	stw	r16,4(sp)
   326e4:	d9000015 	stw	r4,0(sp)
   326e8:	2839883a 	mov	fp,r5
   326ec:	04800044 	movi	r18,1
   326f0:	057fffc4 	movi	r21,-1
   326f4:	00810034 	movhi	r2,1024
   326f8:	1087d104 	addi	r2,r2,8004
   326fc:	12000017 	ldw	r8,0(r2)
   32700:	45005217 	ldw	r20,328(r8)
   32704:	44c05204 	addi	r19,r8,328
   32708:	a0001c26 	beq	r20,zero,3277c <__call_exitprocs+0xc4>
   3270c:	a0800117 	ldw	r2,4(r20)
   32710:	15ffffc4 	addi	r23,r2,-1
   32714:	b8000d16 	blt	r23,zero,3274c <__call_exitprocs+0x94>
   32718:	14000044 	addi	r16,r2,1
   3271c:	8421883a 	add	r16,r16,r16
   32720:	8421883a 	add	r16,r16,r16
   32724:	84402004 	addi	r17,r16,128
   32728:	a463883a 	add	r17,r20,r17
   3272c:	a421883a 	add	r16,r20,r16
   32730:	e0001e26 	beq	fp,zero,327ac <__call_exitprocs+0xf4>
   32734:	80804017 	ldw	r2,256(r16)
   32738:	e0801c26 	beq	fp,r2,327ac <__call_exitprocs+0xf4>
   3273c:	bdffffc4 	addi	r23,r23,-1
   32740:	843fff04 	addi	r16,r16,-4
   32744:	8c7fff04 	addi	r17,r17,-4
   32748:	bd7ff91e 	bne	r23,r21,32730 <__alt_data_end+0xf8032730>
   3274c:	00800034 	movhi	r2,0
   32750:	10800004 	addi	r2,r2,0
   32754:	10000926 	beq	r2,zero,3277c <__call_exitprocs+0xc4>
   32758:	a0800117 	ldw	r2,4(r20)
   3275c:	1000301e 	bne	r2,zero,32820 <__call_exitprocs+0x168>
   32760:	a0800017 	ldw	r2,0(r20)
   32764:	10003226 	beq	r2,zero,32830 <__call_exitprocs+0x178>
   32768:	a009883a 	mov	r4,r20
   3276c:	98800015 	stw	r2,0(r19)
   32770:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   32774:	9d000017 	ldw	r20,0(r19)
   32778:	a03fe41e 	bne	r20,zero,3270c <__alt_data_end+0xf803270c>
   3277c:	dfc00a17 	ldw	ra,40(sp)
   32780:	df000917 	ldw	fp,36(sp)
   32784:	ddc00817 	ldw	r23,32(sp)
   32788:	dd800717 	ldw	r22,28(sp)
   3278c:	dd400617 	ldw	r21,24(sp)
   32790:	dd000517 	ldw	r20,20(sp)
   32794:	dcc00417 	ldw	r19,16(sp)
   32798:	dc800317 	ldw	r18,12(sp)
   3279c:	dc400217 	ldw	r17,8(sp)
   327a0:	dc000117 	ldw	r16,4(sp)
   327a4:	dec00b04 	addi	sp,sp,44
   327a8:	f800283a 	ret
   327ac:	a0800117 	ldw	r2,4(r20)
   327b0:	80c00017 	ldw	r3,0(r16)
   327b4:	10bfffc4 	addi	r2,r2,-1
   327b8:	15c01426 	beq	r2,r23,3280c <__call_exitprocs+0x154>
   327bc:	80000015 	stw	zero,0(r16)
   327c0:	183fde26 	beq	r3,zero,3273c <__alt_data_end+0xf803273c>
   327c4:	95c8983a 	sll	r4,r18,r23
   327c8:	a0806217 	ldw	r2,392(r20)
   327cc:	a5800117 	ldw	r22,4(r20)
   327d0:	2084703a 	and	r2,r4,r2
   327d4:	10000b26 	beq	r2,zero,32804 <__call_exitprocs+0x14c>
   327d8:	a0806317 	ldw	r2,396(r20)
   327dc:	2088703a 	and	r4,r4,r2
   327e0:	20000c1e 	bne	r4,zero,32814 <__call_exitprocs+0x15c>
   327e4:	89400017 	ldw	r5,0(r17)
   327e8:	d9000017 	ldw	r4,0(sp)
   327ec:	183ee83a 	callr	r3
   327f0:	a0800117 	ldw	r2,4(r20)
   327f4:	15bfbf1e 	bne	r2,r22,326f4 <__alt_data_end+0xf80326f4>
   327f8:	98800017 	ldw	r2,0(r19)
   327fc:	153fcf26 	beq	r2,r20,3273c <__alt_data_end+0xf803273c>
   32800:	003fbc06 	br	326f4 <__alt_data_end+0xf80326f4>
   32804:	183ee83a 	callr	r3
   32808:	003ff906 	br	327f0 <__alt_data_end+0xf80327f0>
   3280c:	a5c00115 	stw	r23,4(r20)
   32810:	003feb06 	br	327c0 <__alt_data_end+0xf80327c0>
   32814:	89000017 	ldw	r4,0(r17)
   32818:	183ee83a 	callr	r3
   3281c:	003ff406 	br	327f0 <__alt_data_end+0xf80327f0>
   32820:	a0800017 	ldw	r2,0(r20)
   32824:	a027883a 	mov	r19,r20
   32828:	1029883a 	mov	r20,r2
   3282c:	003fb606 	br	32708 <__alt_data_end+0xf8032708>
   32830:	0005883a 	mov	r2,zero
   32834:	003ffb06 	br	32824 <__alt_data_end+0xf8032824>

00032838 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   32838:	defffd04 	addi	sp,sp,-12
   3283c:	df000215 	stw	fp,8(sp)
   32840:	df000204 	addi	fp,sp,8
   32844:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   32848:	0001883a 	nop
   3284c:	e0bfff17 	ldw	r2,-4(fp)
   32850:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   32854:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   32858:	10000226 	beq	r2,zero,32864 <_exit+0x2c>
    ALT_SIM_FAIL();
   3285c:	002af070 	cmpltui	zero,zero,43969
   32860:	00000106 	br	32868 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   32864:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   32868:	003fff06 	br	32868 <__alt_data_end+0xf8032868>
