
UART_Nios.elf:     file format elf32-littlenios2
UART_Nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000160b0 memsz 0x000160b0 flags r-x
    LOAD off    0x00018000 vaddr 0x04000000 paddr 0x000360d0 align 2**12
         filesz 0x00001fe8 memsz 0x00002148 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015e8c  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f8  04000000  000360d0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf0  040003f8  000364c8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  04001fe8  000380b8  00019fe8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000380b8  000380b8  00019fe8  2**0
                  CONTENTS
  7 .sdram        00000000  04002148  04002148  00019fe8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00019fe8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c8  00000000  00000000  0001a010  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002fb48  00000000  00000000  0001b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bbae  00000000  00000000  0004ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000efdd  00000000  00000000  000568ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002d9c  00000000  00000000  000658ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004872  00000000  00000000  00068648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d63b  00000000  00000000  0006ceba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0008a4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c40  00000000  00000000  0008a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000901aa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  000901ad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000901b7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000901b8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000901b9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000901bd  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000901c1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000901c5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000901ce  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000901d7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  000901e0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000027  00000000  00000000  000901e4  2**0
                  CONTENTS, READONLY
 30 .jdi          00004eb7  00000000  00000000  0009020b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00075e67  00000000  00000000  000950c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
04000000 l    d  .rodata	00000000 .rodata
040003f8 l    d  .rwdata	00000000 .rwdata
04001fe8 l    d  .bss	00000000 .bss
000380b8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
04002148 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../UART_Nios_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
040003f8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00021928 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040000d2 l     O .rodata	00000010 zeroes.4389
040000e2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
040000f2 l     O .rodata	00000010 zeroes.4404
000261b4 l     F .text	000000bc __sbprintf
04000102 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00026478 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00027fa8 l     F .text	00000008 __fp_unlock
00027fbc l     F .text	0000019c __sinit.part.1
00028158 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
04000c44 l     O .rwdata	00000020 lc_ctype_charset
04000c24 l     O .rwdata	00000020 lc_message_charset
04000c64 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04000130 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04000264 l     O .rodata	00000010 blanks.4332
04000254 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
0002bea0 l     F .text	000000fc __sprint_r.part.0
04000284 l     O .rodata	00000010 blanks.4348
04000274 l     O .rodata	00000010 zeroes.4349
0002d42c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00030ec4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00030fd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00030ffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000310e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000311c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000312b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00031488 l     F .text	0000003c alt_get_errno
000314c4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
000316dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04001fd0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00031958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00031a8c l     F .text	00000034 alt_dev_reg
04000e44 l     O .rwdata	00000038 i2c_0
04000e7c l     O .rwdata	00001060 jtag_uart
04001edc l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
00031b88 l     F .text	00000110 optional_irq_callback
00031ce8 l     F .text	0000009c alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000339ac l     F .text	0000020c altera_avalon_jtag_uart_irq
00033bb8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000341f0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000344a0 l     F .text	0000009c altera_avalon_uart_irq
0003453c l     F .text	000000e4 altera_avalon_uart_rxirq
00034620 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000347bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000349d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00034e88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00035538 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400201c g     O .bss	00000004 alt_instruction_exception_handler
0002a208 g     F .text	00000074 _mprec_log10
0002a2f4 g     F .text	0000008c __any_on
00028e6c g     F .text	00000054 _isatty_r
0400013c g     O .rodata	00000028 __mprec_tinytens
000313c4 g     F .text	0000007c alt_main
00021854 g     F .text	000000c0 _puts_r
04002048 g     O .bss	00000100 alt_irq
00028f9c g     F .text	00000060 _lseek_r
000364c8 g       *ABS*	00000000 __flash_rwdata_start
00028348 g     F .text	000000ac __sflags
0002f9f0 g     F .text	00000088 .hidden __eqdf2
04002148 g       *ABS*	00000000 __alt_heap_start
00021818 g     F .text	0000003c printf
0002da10 g     F .text	0000009c _wcrtomb_r
00021ccc g     F .text	0000005c __sseek
000282f8 g     F .text	00000010 __sinit
0002d8b8 g     F .text	00000140 __swbuf_r
00028ec0 g     F .text	0000007c _setlocale_r
00028160 g     F .text	00000068 __sfmoreglue
000323e0 g     F .text	000000a8 alt_avalon_i2c_rx_read
00031464 g     F .text	00000024 __malloc_unlock
000335e0 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
00032164 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
00029228 g     F .text	0000015c memmove
000282e0 g     F .text	00000018 _cleanup
00032e3c g     F .text	00000208 alt_avalon_i2c_master_transmit_using_interrupts
00029384 g     F .text	000000a8 _Balloc
0002fa78 g     F .text	000000dc .hidden __gtdf2
00035a84 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00020a44 g     F .text	0000005c _fstat_r
04001fe8 g     O .bss	00000004 errno
00021b8c g     F .text	00000014 __srget
00021c48 g     F .text	00000008 __seofread
0002ac64 g     F .text	0000123c ___svfiprintf_internal_r
04002008 g     O .bss	00000004 alt_argv
04009fa0 g       *ABS*	00000000 _gp
00031928 g     F .text	00000030 usleep
00033624 g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
000322f4 g     F .text	00000044 alt_avalon_i2c_is_busy
04000cc4 g     O .rwdata	00000180 alt_fd_list
00020ba0 g     F .text	00000070 _getc_r
00020c10 g     F .text	00000088 getc
00032098 g     F .text	000000cc alt_avalon_i2c_master_config_set
00035028 g     F .text	00000090 alt_find_dev
000290e0 g     F .text	00000148 memcpy
00027fb0 g     F .text	0000000c _cleanup_r
00030cdc g     F .text	000000dc .hidden __floatsidf
000355fc g     F .text	0000007c alt_io_redirect
0002fb54 g     F .text	000000f4 .hidden __ltdf2
000360d0 g       *ABS*	00000000 __DTOR_END__
00032c80 g     F .text	000001bc alt_avalon_i2c_master_transmit
00021914 g     F .text	00000014 puts
00035b38 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002a944 g     F .text	00000074 __fpclassifyd
0002a164 g     F .text	000000a4 __ratio
0002d410 g     F .text	0000001c __vfiprintf_internal
00033db0 g     F .text	0000021c altera_avalon_jtag_uart_read
000217e8 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0002e7a0 g     F .text	00000064 .hidden __udivsi3
00031124 g     F .text	000000a4 isatty
0400018c g     O .rodata	000000c8 __mprec_tens
00028f3c g     F .text	0000000c __locale_charset
00035aa8 g     F .text	00000090 alt_icache_flush
00031f04 g     F .text	00000098 alt_avalon_i2c_enable
04001ff4 g     O .bss	00000004 __malloc_top_pad
00033514 g     F .text	00000068 alt_avalon_i2c_int_disable
04001fb0 g     O .rwdata	00000004 __mb_cur_max
00028f6c g     F .text	0000000c _localeconv_r
00029790 g     F .text	0000003c __i2b
00028828 g     F .text	000004bc __sfvwrite_r
00021ba0 g     F .text	00000054 _sbrk_r
0002a380 g     F .text	00000060 _read_r
04001fc8 g     O .rwdata	00000004 alt_max_fd
0002d5ac g     F .text	000000f0 _fclose_r
00027f78 g     F .text	00000030 fflush
04001ff0 g     O .bss	00000004 __malloc_max_sbrked_mem
00033044 g     F .text	0000020c alt_avalon_i2c_master_receive
0002e85c g     F .text	000008ac .hidden __adddf3
00029f0c g     F .text	0000010c __b2d
0002e170 g     F .text	00000538 .hidden __umoddi3
000312f0 g     F .text	000000d4 lseek
0003357c g     F .text	00000064 alt_avalon_i2c_int_enable
04001fa0 g     O .rwdata	00000004 _global_impure_ptr
0002a3e0 g     F .text	00000564 _realloc_r
04002148 g       *ABS*	00000000 __bss_end
00035448 g     F .text	000000f0 alt_iic_isr_register
0003597c g     F .text	00000108 alt_tick
0002dbf8 g     F .text	00000578 .hidden __udivdi3
0003343c g     F .text	00000058 alt_avalon_i2c_int_status_get
0002d814 g     F .text	00000024 _fputwc_r
04000164 g     O .rodata	00000028 __mprec_bigtens
00029574 g     F .text	00000104 __s2b
00030db8 g     F .text	000000a8 .hidden __floatunsidf
00029c4c g     F .text	00000060 __mcmp
000343f4 g     F .text	000000ac altera_avalon_uart_init
00028318 g     F .text	00000018 __fp_lock_all
000353fc g     F .text	0000004c alt_ic_irq_enabled
000358e0 g     F .text	0000009c alt_alarm_stop
00031d84 g     F .text	00000054 alt_avalon_i2c_register_callback
04002010 g     O .bss	00000004 alt_irq_active
00031dd8 g     F .text	000000ec alt_avalon_i2c_init
000205e4 g     F .text	00000444 _fseeko_r
000200fc g     F .exceptions	000000d4 alt_irq_handler
04000c9c g     O .rwdata	00000028 alt_dev_null
00034e40 g     F .text	00000048 alt_dcache_flush_all
00029678 g     F .text	00000068 __hi0bits
00030c5c g     F .text	00000080 .hidden __fixdfsi
04001fe8 g       *ABS*	00000000 __ram_rwdata_end
04001fc0 g     O .rwdata	00000008 alt_dev_list
00031994 g     F .text	000000f8 write
00035c9c g     F .text	000000a0 _putc_r
00032714 g     F .text	0000004c alt_avalon_i2c_check_arblost
000334d8 g     F .text	0000003c alt_avalon_i2c_int_clear
040003f8 g       *ABS*	00000000 __ram_rodata_end
00031038 g     F .text	000000b0 fstat
0002fb54 g     F .text	000000f4 .hidden __ledf2
04001fd4 g     O .rwdata	00000008 alt_avalon_i2c_list
000299c4 g     F .text	00000140 __pow5mult
0002bfb4 g     F .text	0000145c ___vfiprintf_internal_r
04002000 g     O .bss	00000004 __nlocale_changed
0002e804 g     F .text	00000058 .hidden __umodsi3
04002148 g       *ABS*	00000000 end
00020a28 g     F .text	0000001c fseeko
00034a10 g     F .text	000001ac altera_avalon_uart_write
000205c8 g     F .text	0000001c fseek
000338ec g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00031ec4 g     F .text	00000040 alt_avalon_i2c_open
000360d0 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00032894 g     F .text	000000e8 alt_avalon_i2c_master_tx
00034268 g     F .text	0000007c alt_avalon_timer_sc_init
00034344 g     F .text	00000060 altera_avalon_uart_write_fd
00030e60 g     F .text	00000064 .hidden __clzsi2
000343a4 g     F .text	00000050 altera_avalon_uart_close_fd
00033fcc g     F .text	00000224 altera_avalon_jtag_uart_write
000203dc g     F .text	00000064 _asprintf_r
00028308 g     F .text	00000004 __sfp_lock_acquire
00028ffc g     F .text	000000e4 memchr
00023fa0 g     F .text	000021f8 ___vfprintf_internal_r
00028518 g     F .text	00000310 _free_r
00035678 g     F .text	0000022c alt_printf
00028f48 g     F .text	00000010 __locale_mb_cur_max
00035f1c g     F .text	00000180 __call_exitprocs
00021b18 g     F .text	00000074 __srget_r
04001ffc g     O .bss	00000004 __mlocale_changed
00031c98 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
04001fa8 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
04002014 g     O .bss	00000004 _alt_tick_rate
00033250 g     F .text	000001ec alt_avalon_i2c_master_receive_using_interrupts
00033670 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
00029b04 g     F .text	00000148 __lshift
04002018 g     O .bss	00000004 _alt_nticks
00031718 g     F .text	000000fc read
00031af8 g     F .text	00000090 alt_sys_init
0002aa94 g     F .text	000001d0 __ssprint_r
00021788 g     F .text	00000060 _open_r
00035e04 g     F .text	00000118 __register_exitproc
00032ab8 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
000297cc g     F .text	000001f8 __multiply
00033c58 g     F .text	00000068 altera_avalon_jtag_uart_close
040003f8 g       *ABS*	00000000 __ram_rwdata_start
04000000 g       *ABS*	00000000 __ram_rodata_start
04002020 g     O .bss	00000028 __malloc_current_mallinfo
0002a018 g     F .text	0000014c __d2b
00033788 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000351c0 g     F .text	000000a4 alt_get_fd
00034ce8 g     F .text	00000158 alt_busy_sleep
00026424 g     F .text	00000054 _close_r
00035c20 g     F .text	0000007c memcmp
00032338 g     F .text	000000a8 alt_avalon_i2c_rx_read_available
00033848 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04002148 g       *ABS*	00000000 __alt_stack_base
00033898 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00020aa0 g     F .text	000000cc _fwrite_r
000262d0 g     F .text	00000154 __swsetup_r
0002f108 g     F .text	000008e8 .hidden __divdf3
000281c8 g     F .text	00000118 __sfp
0002a27c g     F .text	00000078 __copybits
0400081c g     O .rwdata	00000408 __malloc_av_
00028314 g     F .text	00000004 __sinit_lock_release
0002fc48 g     F .text	00000718 .hidden __muldf3
00021bf4 g     F .text	00000054 __sread
000350b8 g     F .text	00000108 alt_find_file
00034ec4 g     F .text	000000a4 alt_dev_llist_insert
00031440 g     F .text	00000024 __malloc_lock
00031878 g     F .text	000000b0 sbrk
00021dc8 g     F .text	000021d8 ___svfprintf_internal_r
00032760 g     F .text	00000134 alt_avalon_i2c_interrupt_transaction_status
000326c8 g     F .text	0000004c alt_avalon_i2c_check_nack
00027f1c g     F .text	0000005c _fflush_r
0002d4e8 g     F .text	000000c4 _calloc_r
000205ac g     F .text	00000018 fopen
04001fe8 g       *ABS*	00000000 __bss_start
00021660 g     F .text	00000128 memset
00020290 g     F .text	0000014c main
00032694 g     F .text	00000034 alt_avalon_i2c_master_target_set
0400200c g     O .bss	00000004 alt_envp
04001fec g     O .bss	00000004 __malloc_max_total_mem
000337e8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002d9f8 g     F .text	00000018 __swbuf
00033494 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
00021d28 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0002d69c g     F .text	00000014 fclose
00026678 g     F .text	00001688 _dtoa_r
00020e54 g     F .text	0000080c _malloc_r
0002db6c g     F .text	00000030 __ascii_wctomb
04001fcc g     O .rwdata	00000004 alt_errno
00028ce4 g     F .text	000000c4 _fwalk
00035d3c g     F .text	000000c8 putc
0002e6a8 g     F .text	00000084 .hidden __divsi3
000283f4 g     F .text	00000124 _malloc_trim_r
000360d0 g       *ABS*	00000000 __CTOR_END__
0002a9b8 g     F .text	000000dc strcmp
000360d0 g       *ABS*	00000000 __flash_rodata_start
000360d0 g       *ABS*	00000000 __DTOR_LIST__
0002f9f0 g     F .text	00000088 .hidden __nedf2
00031ac0 g     F .text	00000038 alt_irq_init
00031814 g     F .text	00000064 alt_release_fd
04000294 g     O .rodata	00000100 .hidden __clz_tab
00020440 g     F .text	00000078 asprintf
04001ff8 g     O .bss	00000004 _PathLocale
00035bd4 g     F .text	00000014 atexit
00026270 g     F .text	00000060 _write_r
00028f78 g     F .text	00000018 setlocale
04001fa4 g     O .rwdata	00000004 _impure_ptr
04002004 g     O .bss	00000004 alt_argc
00027d00 g     F .text	0000021c __sflush_r
00034fc8 g     F .text	00000060 _do_dtors
00028f64 g     F .text	00000008 __locale_cjk_lang
0003265c g     F .text	00000038 alt_avalon_i2c_master_target_get
000205c4 g     F .text	00000004 _fseek_r
0003256c g     F .text	000000f0 alt_avalon_i2c_send_address
00021944 g     F .text	000001d4 __srefill_r
00020020 g       .exceptions	00000000 alt_irq_entry
00029ea8 g     F .text	00000064 __ulp
00028330 g     F .text	00000018 __fp_unlock_all
04001fb8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00028f90 g     F .text	0000000c localeconv
00033720 g     F .text	00000068 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
00035298 g     F .text	00000050 alt_ic_isr_register
00031f9c g     F .text	0000004c alt_avalon_i2c_disable
00020b6c g     F .text	00000034 fwrite
04001fe8 g       *ABS*	00000000 _edata
000342e4 g     F .text	00000060 altera_avalon_uart_read_fd
04002148 g       *ABS*	00000000 _end
0002d6b0 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
00033cc0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00031fe8 g     F .text	000000b0 alt_avalon_i2c_master_config_get
00035370 g     F .text	0000008c alt_ic_irq_disable
00021c50 g     F .text	0000007c __swrite
04001fac g     O .rwdata	00000004 __malloc_trim_threshold
00028f58 g     F .text	0000000c __locale_msgcharset
00035be8 g     F .text	00000038 exit
00028da8 g     F .text	000000c4 _fwalk_reent
00029cac g     F .text	000001fc __mdiff
0002e72c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002830c g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
000321f8 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
00032488 g     F .text	000000e4 alt_avalon_i2c_cmd_write
00034768 g     F .text	00000054 altera_avalon_uart_close
000204b8 g     F .text	000000f4 _fopen_r
0003609c g     F .text	00000034 _exit
00034bbc g     F .text	0000012c alt_alarm_start
00020c98 g     F .text	000001bc __smakebuf_r
00021d30 g     F .text	00000098 strlen
00031588 g     F .text	00000154 open
0002fa78 g     F .text	000000dc .hidden __gedf2
000358a4 g     F .text	0000003c alt_putchar
04001fb4 g     O .rwdata	00000004 __wctomb
0002bf9c g     F .text	00000018 __sprint_r
00035264 g     F .text	00000034 alt_icache_flush_all
04001fdc g     O .rwdata	00000004 alt_priority_mask
000352e8 g     F .text	00000088 alt_ic_irq_enable
00026198 g     F .text	0000001c __vfprintf_internal
000347f8 g     F .text	000001dc altera_avalon_uart_read
0002db9c g     F .text	0000005c _wctomb_r
00030360 g     F .text	000008fc .hidden __subdf3
000296e0 g     F .text	000000b0 __lo0bits
04001fe0 g     O .rwdata	00000008 alt_alarm_list
00034f68 g     F .text	00000060 _do_ctors
0002daac g     F .text	000000c0 wcrtomb
00030f00 g     F .text	000000d0 close
000336d4 g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
00031230 g     F .text	00000084 alt_load
0003297c g     F .text	0000013c alt_avalon_i2c_master_rx
0002d838 g     F .text	00000080 fputwc
00028310 g     F .text	00000004 __sinit_lock_acquire
00029454 g     F .text	00000120 __multadd
0002942c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xf8020004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00810034 	movhi	r2,1024
   20140:	10881204 	addi	r2,r2,8264
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00810034 	movhi	r2,1024
   20158:	10881204 	addi	r2,r2,8264
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xf802012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xf8020120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a01f17 	ldw	r2,-32644(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a01f17 	ldw	r2,-32644(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xf8020248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
   20260:	d6a7e814 	ori	gp,gp,40864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
   20268:	1087fa14 	ori	r2,r2,8168

    movhi r3, %hi(__bss_end)
   2026c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
   20270:	18c85214 	ori	r3,r3,8520

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xf8020278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00312300 	call	31230 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00313c40 	call	313c4 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xf802028c>

00020290 <main>:
#include <stdio.h>
#include <string.h>
int main ()
{
   20290:	deffe704 	addi	sp,sp,-100
   20294:	dfc01815 	stw	ra,96(sp)
   20298:	df001715 	stw	fp,92(sp)
   2029c:	dc001615 	stw	r16,88(sp)
   202a0:	df001704 	addi	fp,sp,92
	char* msg = "Hello message from the FPGA!";
   202a4:	00810034 	movhi	r2,1024
   202a8:	10800004 	addi	r2,r2,0
   202ac:	e0bfec15 	stw	r2,-80(fp)
	FILE* fp;
	char prompt = 0;
   202b0:	e03fe905 	stb	zero,-92(fp)
	int messageCounter = 0;
   202b4:	e03fea15 	stw	zero,-88(fp)
	fp = fopen ("/dev/uart_0", "r+");
   202b8:	01410034 	movhi	r5,1024
   202bc:	29400804 	addi	r5,r5,32
   202c0:	01010034 	movhi	r4,1024
   202c4:	21000904 	addi	r4,r4,36
   202c8:	00205ac0 	call	205ac <fopen>
   202cc:	e0bfed15 	stw	r2,-76(fp)
	if (fp) {
   202d0:	e0bfed17 	ldw	r2,-76(fp)
   202d4:	10003726 	beq	r2,zero,203b4 <main+0x124>
		printf("UART detected.\n");
   202d8:	01010034 	movhi	r4,1024
   202dc:	21000c04 	addi	r4,r4,48
   202e0:	00219140 	call	21914 <puts>
		while (1) {
			char *msgToSend;
			asprintf(&msgToSend, "%s, message id: %d\n", msg, messageCounter);
   202e4:	e0bfee04 	addi	r2,fp,-72
   202e8:	e1ffea17 	ldw	r7,-88(fp)
   202ec:	e1bfec17 	ldw	r6,-80(fp)
   202f0:	01410034 	movhi	r5,1024
   202f4:	29401004 	addi	r5,r5,64
   202f8:	1009883a 	mov	r4,r2
   202fc:	00204400 	call	20440 <asprintf>
			printf("FPGA sending\n");
   20300:	01010034 	movhi	r4,1024
   20304:	21001504 	addi	r4,r4,84
   20308:	00219140 	call	21914 <puts>
			char response_buffer[64];
			int index = 0;
   2030c:	e03feb15 	stw	zero,-84(fp)
			fwrite (msgToSend, strlen(msgToSend), 1, fp);
   20310:	e43fee17 	ldw	r16,-72(fp)
   20314:	e0bfee17 	ldw	r2,-72(fp)
   20318:	1009883a 	mov	r4,r2
   2031c:	0021d300 	call	21d30 <strlen>
   20320:	e1ffed17 	ldw	r7,-76(fp)
   20324:	01800044 	movi	r6,1
   20328:	100b883a 	mov	r5,r2
   2032c:	8009883a 	mov	r4,r16
   20330:	0020b6c0 	call	20b6c <fwrite>
			prompt = getc(fp);
   20334:	e13fed17 	ldw	r4,-76(fp)
   20338:	0020c100 	call	20c10 <getc>
   2033c:	e0bfe905 	stb	r2,-92(fp)
			while(prompt != '\n' && prompt != 0) {
   20340:	00000b06 	br	20370 <main+0xe0>
				response_buffer[index] = prompt;
   20344:	e0ffef04 	addi	r3,fp,-68
   20348:	e0bfeb17 	ldw	r2,-84(fp)
   2034c:	1885883a 	add	r2,r3,r2
   20350:	e0ffe903 	ldbu	r3,-92(fp)
   20354:	10c00005 	stb	r3,0(r2)
				prompt = getc(fp);
   20358:	e13fed17 	ldw	r4,-76(fp)
   2035c:	0020c100 	call	20c10 <getc>
   20360:	e0bfe905 	stb	r2,-92(fp)
				index++;
   20364:	e0bfeb17 	ldw	r2,-84(fp)
   20368:	10800044 	addi	r2,r2,1
   2036c:	e0bfeb15 	stw	r2,-84(fp)
			printf("FPGA sending\n");
			char response_buffer[64];
			int index = 0;
			fwrite (msgToSend, strlen(msgToSend), 1, fp);
			prompt = getc(fp);
			while(prompt != '\n' && prompt != 0) {
   20370:	e0bfe907 	ldb	r2,-92(fp)
   20374:	108002a0 	cmpeqi	r2,r2,10
   20378:	1000021e 	bne	r2,zero,20384 <main+0xf4>
   2037c:	e0bfe907 	ldb	r2,-92(fp)
   20380:	103ff01e 	bne	r2,zero,20344 <__alt_data_end+0xf8020344>
				response_buffer[index] = prompt;
				prompt = getc(fp);
				index++;
			}
			printf("Received: %s\n", response_buffer);
   20384:	e0bfef04 	addi	r2,fp,-68
   20388:	100b883a 	mov	r5,r2
   2038c:	01010034 	movhi	r4,1024
   20390:	21001904 	addi	r4,r4,100
   20394:	00218180 	call	21818 <printf>
			messageCounter++;
   20398:	e0bfea17 	ldw	r2,-88(fp)
   2039c:	10800044 	addi	r2,r2,1
   203a0:	e0bfea15 	stw	r2,-88(fp)
			usleep(100000);
   203a4:	010000b4 	movhi	r4,2
   203a8:	2121a804 	addi	r4,r4,-31072
   203ac:	00319280 	call	31928 <usleep>
		}
   203b0:	003fcc06 	br	202e4 <__alt_data_end+0xf80202e4>
		fclose (fp);
	} else {
		printf("UART not detected.");
   203b4:	01010034 	movhi	r4,1024
   203b8:	21001d04 	addi	r4,r4,116
   203bc:	00218180 	call	21818 <printf>
	}
 	return 0;
   203c0:	0005883a 	mov	r2,zero
}
   203c4:	e6ffff04 	addi	sp,fp,-4
   203c8:	dfc00217 	ldw	ra,8(sp)
   203cc:	df000117 	ldw	fp,4(sp)
   203d0:	dc000017 	ldw	r16,0(sp)
   203d4:	dec00304 	addi	sp,sp,12
   203d8:	f800283a 	ret

000203dc <_asprintf_r>:
   203dc:	deffe304 	addi	sp,sp,-116
   203e0:	dc001a15 	stw	r16,104(sp)
   203e4:	2821883a 	mov	r16,r5
   203e8:	dfc01b15 	stw	ra,108(sp)
   203ec:	d9c01c15 	stw	r7,112(sp)
   203f0:	0080a204 	movi	r2,648
   203f4:	d880030d 	sth	r2,12(sp)
   203f8:	d9c01c04 	addi	r7,sp,112
   203fc:	00bfffc4 	movi	r2,-1
   20400:	d80b883a 	mov	r5,sp
   20404:	d8000015 	stw	zero,0(sp)
   20408:	d8000415 	stw	zero,16(sp)
   2040c:	d8000215 	stw	zero,8(sp)
   20410:	d8000515 	stw	zero,20(sp)
   20414:	d880038d 	sth	r2,14(sp)
   20418:	0021dc80 	call	21dc8 <___svfprintf_internal_r>
   2041c:	10000416 	blt	r2,zero,20430 <_asprintf_r+0x54>
   20420:	d8c00017 	ldw	r3,0(sp)
   20424:	18000005 	stb	zero,0(r3)
   20428:	d8c00417 	ldw	r3,16(sp)
   2042c:	80c00015 	stw	r3,0(r16)
   20430:	dfc01b17 	ldw	ra,108(sp)
   20434:	dc001a17 	ldw	r16,104(sp)
   20438:	dec01d04 	addi	sp,sp,116
   2043c:	f800283a 	ret

00020440 <asprintf>:
   20440:	deffe204 	addi	sp,sp,-120
   20444:	dc001a15 	stw	r16,104(sp)
   20448:	2021883a 	mov	r16,r4
   2044c:	dfc01b15 	stw	ra,108(sp)
   20450:	d9801c15 	stw	r6,112(sp)
   20454:	d9c01d15 	stw	r7,116(sp)
   20458:	00810034 	movhi	r2,1024
   2045c:	1087e904 	addi	r2,r2,8100
   20460:	11000017 	ldw	r4,0(r2)
   20464:	0080a204 	movi	r2,648
   20468:	280d883a 	mov	r6,r5
   2046c:	d880030d 	sth	r2,12(sp)
   20470:	d9c01c04 	addi	r7,sp,112
   20474:	00bfffc4 	movi	r2,-1
   20478:	d80b883a 	mov	r5,sp
   2047c:	d8000015 	stw	zero,0(sp)
   20480:	d8000415 	stw	zero,16(sp)
   20484:	d8000215 	stw	zero,8(sp)
   20488:	d8000515 	stw	zero,20(sp)
   2048c:	d880038d 	sth	r2,14(sp)
   20490:	0021dc80 	call	21dc8 <___svfprintf_internal_r>
   20494:	10000416 	blt	r2,zero,204a8 <asprintf+0x68>
   20498:	d8c00017 	ldw	r3,0(sp)
   2049c:	18000005 	stb	zero,0(r3)
   204a0:	d8c00417 	ldw	r3,16(sp)
   204a4:	80c00015 	stw	r3,0(r16)
   204a8:	dfc01b17 	ldw	ra,108(sp)
   204ac:	dc001a17 	ldw	r16,104(sp)
   204b0:	dec01e04 	addi	sp,sp,120
   204b4:	f800283a 	ret

000204b8 <_fopen_r>:
   204b8:	defffa04 	addi	sp,sp,-24
   204bc:	3005883a 	mov	r2,r6
   204c0:	dcc00415 	stw	r19,16(sp)
   204c4:	d80d883a 	mov	r6,sp
   204c8:	2827883a 	mov	r19,r5
   204cc:	100b883a 	mov	r5,r2
   204d0:	dc800315 	stw	r18,12(sp)
   204d4:	dfc00515 	stw	ra,20(sp)
   204d8:	dc400215 	stw	r17,8(sp)
   204dc:	dc000115 	stw	r16,4(sp)
   204e0:	2025883a 	mov	r18,r4
   204e4:	00283480 	call	28348 <__sflags>
   204e8:	10002726 	beq	r2,zero,20588 <_fopen_r+0xd0>
   204ec:	9009883a 	mov	r4,r18
   204f0:	1023883a 	mov	r17,r2
   204f4:	00281c80 	call	281c8 <__sfp>
   204f8:	1021883a 	mov	r16,r2
   204fc:	10002226 	beq	r2,zero,20588 <_fopen_r+0xd0>
   20500:	d9800017 	ldw	r6,0(sp)
   20504:	01c06d84 	movi	r7,438
   20508:	980b883a 	mov	r5,r19
   2050c:	9009883a 	mov	r4,r18
   20510:	00217880 	call	21788 <_open_r>
   20514:	10001916 	blt	r2,zero,2057c <_fopen_r+0xc4>
   20518:	8080038d 	sth	r2,14(r16)
   2051c:	008000b4 	movhi	r2,2
   20520:	1086fd04 	addi	r2,r2,7156
   20524:	80800815 	stw	r2,32(r16)
   20528:	008000b4 	movhi	r2,2
   2052c:	10871404 	addi	r2,r2,7248
   20530:	80800915 	stw	r2,36(r16)
   20534:	008000b4 	movhi	r2,2
   20538:	10873304 	addi	r2,r2,7372
   2053c:	80800a15 	stw	r2,40(r16)
   20540:	008000b4 	movhi	r2,2
   20544:	10874a04 	addi	r2,r2,7464
   20548:	8440030d 	sth	r17,12(r16)
   2054c:	84000715 	stw	r16,28(r16)
   20550:	80800b15 	stw	r2,44(r16)
   20554:	8c40400c 	andi	r17,r17,256
   20558:	88000d1e 	bne	r17,zero,20590 <_fopen_r+0xd8>
   2055c:	8005883a 	mov	r2,r16
   20560:	dfc00517 	ldw	ra,20(sp)
   20564:	dcc00417 	ldw	r19,16(sp)
   20568:	dc800317 	ldw	r18,12(sp)
   2056c:	dc400217 	ldw	r17,8(sp)
   20570:	dc000117 	ldw	r16,4(sp)
   20574:	dec00604 	addi	sp,sp,24
   20578:	f800283a 	ret
   2057c:	00283080 	call	28308 <__sfp_lock_acquire>
   20580:	8000030d 	sth	zero,12(r16)
   20584:	002830c0 	call	2830c <__sfp_lock_release>
   20588:	0005883a 	mov	r2,zero
   2058c:	003ff406 	br	20560 <__alt_data_end+0xf8020560>
   20590:	01c00084 	movi	r7,2
   20594:	000d883a 	mov	r6,zero
   20598:	800b883a 	mov	r5,r16
   2059c:	9009883a 	mov	r4,r18
   205a0:	00205c40 	call	205c4 <_fseek_r>
   205a4:	8005883a 	mov	r2,r16
   205a8:	003fed06 	br	20560 <__alt_data_end+0xf8020560>

000205ac <fopen>:
   205ac:	00810034 	movhi	r2,1024
   205b0:	1087e904 	addi	r2,r2,8100
   205b4:	280d883a 	mov	r6,r5
   205b8:	200b883a 	mov	r5,r4
   205bc:	11000017 	ldw	r4,0(r2)
   205c0:	00204b81 	jmpi	204b8 <_fopen_r>

000205c4 <_fseek_r>:
   205c4:	00205e41 	jmpi	205e4 <_fseeko_r>

000205c8 <fseek>:
   205c8:	00810034 	movhi	r2,1024
   205cc:	1087e904 	addi	r2,r2,8100
   205d0:	300f883a 	mov	r7,r6
   205d4:	280d883a 	mov	r6,r5
   205d8:	200b883a 	mov	r5,r4
   205dc:	11000017 	ldw	r4,0(r2)
   205e0:	00205e41 	jmpi	205e4 <_fseeko_r>

000205e4 <_fseeko_r>:
   205e4:	deffe804 	addi	sp,sp,-96
   205e8:	dd401415 	stw	r21,80(sp)
   205ec:	dc801115 	stw	r18,68(sp)
   205f0:	dc401015 	stw	r17,64(sp)
   205f4:	dc000f15 	stw	r16,60(sp)
   205f8:	dfc01715 	stw	ra,92(sp)
   205fc:	ddc01615 	stw	r23,88(sp)
   20600:	dd801515 	stw	r22,84(sp)
   20604:	dd001315 	stw	r20,76(sp)
   20608:	dcc01215 	stw	r19,72(sp)
   2060c:	2023883a 	mov	r17,r4
   20610:	2821883a 	mov	r16,r5
   20614:	302b883a 	mov	r21,r6
   20618:	3825883a 	mov	r18,r7
   2061c:	20000226 	beq	r4,zero,20628 <_fseeko_r+0x44>
   20620:	20800e17 	ldw	r2,56(r4)
   20624:	10005a26 	beq	r2,zero,20790 <_fseeko_r+0x1ac>
   20628:	8080030b 	ldhu	r2,12(r16)
   2062c:	00c04204 	movi	r3,264
   20630:	1080420c 	andi	r2,r2,264
   20634:	10c05b26 	beq	r2,r3,207a4 <_fseeko_r+0x1c0>
   20638:	85000a17 	ldw	r20,40(r16)
   2063c:	a000f626 	beq	r20,zero,20a18 <_fseeko_r+0x434>
   20640:	00800044 	movi	r2,1
   20644:	90803e26 	beq	r18,r2,20740 <_fseeko_r+0x15c>
   20648:	00800084 	movi	r2,2
   2064c:	90801026 	beq	r18,r2,20690 <_fseeko_r+0xac>
   20650:	90000f26 	beq	r18,zero,20690 <_fseeko_r+0xac>
   20654:	00800584 	movi	r2,22
   20658:	88800015 	stw	r2,0(r17)
   2065c:	04ffffc4 	movi	r19,-1
   20660:	9805883a 	mov	r2,r19
   20664:	dfc01717 	ldw	ra,92(sp)
   20668:	ddc01617 	ldw	r23,88(sp)
   2066c:	dd801517 	ldw	r22,84(sp)
   20670:	dd401417 	ldw	r21,80(sp)
   20674:	dd001317 	ldw	r20,76(sp)
   20678:	dcc01217 	ldw	r19,72(sp)
   2067c:	dc801117 	ldw	r18,68(sp)
   20680:	dc401017 	ldw	r17,64(sp)
   20684:	dc000f17 	ldw	r16,60(sp)
   20688:	dec01804 	addi	sp,sp,96
   2068c:	f800283a 	ret
   20690:	80800417 	ldw	r2,16(r16)
   20694:	002f883a 	mov	r23,zero
   20698:	0027883a 	mov	r19,zero
   2069c:	1000cb26 	beq	r2,zero,209cc <_fseeko_r+0x3e8>
   206a0:	8080030b 	ldhu	r2,12(r16)
   206a4:	10c2068c 	andi	r3,r2,2074
   206a8:	1800071e 	bne	r3,zero,206c8 <_fseeko_r+0xe4>
   206ac:	10c1000c 	andi	r3,r2,1024
   206b0:	1800451e 	bne	r3,zero,207c8 <_fseeko_r+0x1e4>
   206b4:	00c000b4 	movhi	r3,2
   206b8:	18c73304 	addi	r3,r3,7372
   206bc:	a0c0b726 	beq	r20,r3,2099c <_fseeko_r+0x3b8>
   206c0:	10820014 	ori	r2,r2,2048
   206c4:	8080030d 	sth	r2,12(r16)
   206c8:	800b883a 	mov	r5,r16
   206cc:	8809883a 	mov	r4,r17
   206d0:	0027f1c0 	call	27f1c <_fflush_r>
   206d4:	1027883a 	mov	r19,r2
   206d8:	103fe01e 	bne	r2,zero,2065c <__alt_data_end+0xf802065c>
   206dc:	81400717 	ldw	r5,28(r16)
   206e0:	900f883a 	mov	r7,r18
   206e4:	a80d883a 	mov	r6,r21
   206e8:	8809883a 	mov	r4,r17
   206ec:	a03ee83a 	callr	r20
   206f0:	00ffffc4 	movi	r3,-1
   206f4:	10ffd926 	beq	r2,r3,2065c <__alt_data_end+0xf802065c>
   206f8:	81400c17 	ldw	r5,48(r16)
   206fc:	28000526 	beq	r5,zero,20714 <_fseeko_r+0x130>
   20700:	80801004 	addi	r2,r16,64
   20704:	28800226 	beq	r5,r2,20710 <_fseeko_r+0x12c>
   20708:	8809883a 	mov	r4,r17
   2070c:	00285180 	call	28518 <_free_r>
   20710:	80000c15 	stw	zero,48(r16)
   20714:	8080030b 	ldhu	r2,12(r16)
   20718:	80c00417 	ldw	r3,16(r16)
   2071c:	80000115 	stw	zero,4(r16)
   20720:	10bdf7cc 	andi	r2,r2,63455
   20724:	80c00015 	stw	r3,0(r16)
   20728:	8080030d 	sth	r2,12(r16)
   2072c:	01800204 	movi	r6,8
   20730:	000b883a 	mov	r5,zero
   20734:	81001704 	addi	r4,r16,92
   20738:	00216600 	call	21660 <memset>
   2073c:	003fc806 	br	20660 <__alt_data_end+0xf8020660>
   20740:	800b883a 	mov	r5,r16
   20744:	8809883a 	mov	r4,r17
   20748:	0027f1c0 	call	27f1c <_fflush_r>
   2074c:	8080030b 	ldhu	r2,12(r16)
   20750:	10c4000c 	andi	r3,r2,4096
   20754:	18008726 	beq	r3,zero,20974 <_fseeko_r+0x390>
   20758:	84c01417 	ldw	r19,80(r16)
   2075c:	10c0010c 	andi	r3,r2,4
   20760:	1800431e 	bne	r3,zero,20870 <_fseeko_r+0x28c>
   20764:	1080020c 	andi	r2,r2,8
   20768:	10008026 	beq	r2,zero,2096c <_fseeko_r+0x388>
   2076c:	80c00017 	ldw	r3,0(r16)
   20770:	80800417 	ldw	r2,16(r16)
   20774:	18000226 	beq	r3,zero,20780 <_fseeko_r+0x19c>
   20778:	1887c83a 	sub	r3,r3,r2
   2077c:	98e7883a 	add	r19,r19,r3
   20780:	aceb883a 	add	r21,r21,r19
   20784:	05c00044 	movi	r23,1
   20788:	0025883a 	mov	r18,zero
   2078c:	003fc306 	br	2069c <__alt_data_end+0xf802069c>
   20790:	00282f80 	call	282f8 <__sinit>
   20794:	8080030b 	ldhu	r2,12(r16)
   20798:	00c04204 	movi	r3,264
   2079c:	1080420c 	andi	r2,r2,264
   207a0:	10ffa51e 	bne	r2,r3,20638 <__alt_data_end+0xf8020638>
   207a4:	800b883a 	mov	r5,r16
   207a8:	8809883a 	mov	r4,r17
   207ac:	0027f1c0 	call	27f1c <_fflush_r>
   207b0:	003fa106 	br	20638 <__alt_data_end+0xf8020638>
   207b4:	8080030b 	ldhu	r2,12(r16)
   207b8:	00c10004 	movi	r3,1024
   207bc:	80c01315 	stw	r3,76(r16)
   207c0:	10c4b03a 	or	r2,r2,r3
   207c4:	8080030d 	sth	r2,12(r16)
   207c8:	9000311e 	bne	r18,zero,20890 <_fseeko_r+0x2ac>
   207cc:	a82d883a 	mov	r22,r21
   207d0:	b800371e 	bne	r23,zero,208b0 <_fseeko_r+0x2cc>
   207d4:	8080030b 	ldhu	r2,12(r16)
   207d8:	1084000c 	andi	r2,r2,4096
   207dc:	10007f26 	beq	r2,zero,209dc <_fseeko_r+0x3f8>
   207e0:	80801417 	ldw	r2,80(r16)
   207e4:	81800117 	ldw	r6,4(r16)
   207e8:	81400c17 	ldw	r5,48(r16)
   207ec:	11a7c83a 	sub	r19,r2,r6
   207f0:	28008226 	beq	r5,zero,209fc <_fseeko_r+0x418>
   207f4:	81c00f17 	ldw	r7,60(r16)
   207f8:	99e7c83a 	sub	r19,r19,r7
   207fc:	81000e17 	ldw	r4,56(r16)
   20800:	80800417 	ldw	r2,16(r16)
   20804:	99a7883a 	add	r19,r19,r6
   20808:	2087c83a 	sub	r3,r4,r2
   2080c:	98e7c83a 	sub	r19,r19,r3
   20810:	38c7883a 	add	r3,r7,r3
   20814:	b4c02b16 	blt	r22,r19,208c4 <_fseeko_r+0x2e0>
   20818:	98c9883a 	add	r4,r19,r3
   2081c:	b100292e 	bgeu	r22,r4,208c4 <_fseeko_r+0x2e0>
   20820:	b4e7c83a 	sub	r19,r22,r19
   20824:	14c5883a 	add	r2,r2,r19
   20828:	1ce7c83a 	sub	r19,r3,r19
   2082c:	80800015 	stw	r2,0(r16)
   20830:	84c00115 	stw	r19,4(r16)
   20834:	28000526 	beq	r5,zero,2084c <_fseeko_r+0x268>
   20838:	80801004 	addi	r2,r16,64
   2083c:	28800226 	beq	r5,r2,20848 <_fseeko_r+0x264>
   20840:	8809883a 	mov	r4,r17
   20844:	00285180 	call	28518 <_free_r>
   20848:	80000c15 	stw	zero,48(r16)
   2084c:	8080030b 	ldhu	r2,12(r16)
   20850:	01800204 	movi	r6,8
   20854:	000b883a 	mov	r5,zero
   20858:	10bff7cc 	andi	r2,r2,65503
   2085c:	8080030d 	sth	r2,12(r16)
   20860:	81001704 	addi	r4,r16,92
   20864:	00216600 	call	21660 <memset>
   20868:	0027883a 	mov	r19,zero
   2086c:	003f7c06 	br	20660 <__alt_data_end+0xf8020660>
   20870:	80c00117 	ldw	r3,4(r16)
   20874:	80800c17 	ldw	r2,48(r16)
   20878:	98e7c83a 	sub	r19,r19,r3
   2087c:	10003b26 	beq	r2,zero,2096c <_fseeko_r+0x388>
   20880:	80c00f17 	ldw	r3,60(r16)
   20884:	80800417 	ldw	r2,16(r16)
   20888:	98e7c83a 	sub	r19,r19,r3
   2088c:	003fbc06 	br	20780 <__alt_data_end+0xf8020780>
   20890:	8140038f 	ldh	r5,14(r16)
   20894:	d80d883a 	mov	r6,sp
   20898:	8809883a 	mov	r4,r17
   2089c:	0020a440 	call	20a44 <_fstat_r>
   208a0:	103f891e 	bne	r2,zero,206c8 <__alt_data_end+0xf80206c8>
   208a4:	dd800417 	ldw	r22,16(sp)
   208a8:	adad883a 	add	r22,r21,r22
   208ac:	b83fc926 	beq	r23,zero,207d4 <__alt_data_end+0xf80207d4>
   208b0:	81400c17 	ldw	r5,48(r16)
   208b4:	81800117 	ldw	r6,4(r16)
   208b8:	28005026 	beq	r5,zero,209fc <_fseeko_r+0x418>
   208bc:	81c00f17 	ldw	r7,60(r16)
   208c0:	003fce06 	br	207fc <__alt_data_end+0xf80207fc>
   208c4:	84c01317 	ldw	r19,76(r16)
   208c8:	81400717 	ldw	r5,28(r16)
   208cc:	000f883a 	mov	r7,zero
   208d0:	04e7c83a 	sub	r19,zero,r19
   208d4:	9da6703a 	and	r19,r19,r22
   208d8:	980d883a 	mov	r6,r19
   208dc:	8809883a 	mov	r4,r17
   208e0:	a03ee83a 	callr	r20
   208e4:	00ffffc4 	movi	r3,-1
   208e8:	10ff7726 	beq	r2,r3,206c8 <__alt_data_end+0xf80206c8>
   208ec:	80800417 	ldw	r2,16(r16)
   208f0:	81400c17 	ldw	r5,48(r16)
   208f4:	80000115 	stw	zero,4(r16)
   208f8:	80800015 	stw	r2,0(r16)
   208fc:	28000526 	beq	r5,zero,20914 <_fseeko_r+0x330>
   20900:	80801004 	addi	r2,r16,64
   20904:	28800226 	beq	r5,r2,20910 <_fseeko_r+0x32c>
   20908:	8809883a 	mov	r4,r17
   2090c:	00285180 	call	28518 <_free_r>
   20910:	80000c15 	stw	zero,48(r16)
   20914:	8080030b 	ldhu	r2,12(r16)
   20918:	b4e7c83a 	sub	r19,r22,r19
   2091c:	10bff7cc 	andi	r2,r2,65503
   20920:	8080030d 	sth	r2,12(r16)
   20924:	98000b26 	beq	r19,zero,20954 <_fseeko_r+0x370>
   20928:	800b883a 	mov	r5,r16
   2092c:	8809883a 	mov	r4,r17
   20930:	00219440 	call	21944 <__srefill_r>
   20934:	103f641e 	bne	r2,zero,206c8 <__alt_data_end+0xf80206c8>
   20938:	80800117 	ldw	r2,4(r16)
   2093c:	14ff6236 	bltu	r2,r19,206c8 <__alt_data_end+0xf80206c8>
   20940:	80c00017 	ldw	r3,0(r16)
   20944:	14c5c83a 	sub	r2,r2,r19
   20948:	80800115 	stw	r2,4(r16)
   2094c:	1ce7883a 	add	r19,r3,r19
   20950:	84c00015 	stw	r19,0(r16)
   20954:	01800204 	movi	r6,8
   20958:	000b883a 	mov	r5,zero
   2095c:	81001704 	addi	r4,r16,92
   20960:	00216600 	call	21660 <memset>
   20964:	0027883a 	mov	r19,zero
   20968:	003f3d06 	br	20660 <__alt_data_end+0xf8020660>
   2096c:	80800417 	ldw	r2,16(r16)
   20970:	003f8306 	br	20780 <__alt_data_end+0xf8020780>
   20974:	81400717 	ldw	r5,28(r16)
   20978:	900f883a 	mov	r7,r18
   2097c:	000d883a 	mov	r6,zero
   20980:	8809883a 	mov	r4,r17
   20984:	a03ee83a 	callr	r20
   20988:	1027883a 	mov	r19,r2
   2098c:	00bfffc4 	movi	r2,-1
   20990:	98bf3226 	beq	r19,r2,2065c <__alt_data_end+0xf802065c>
   20994:	8080030b 	ldhu	r2,12(r16)
   20998:	003f7006 	br	2075c <__alt_data_end+0xf802075c>
   2099c:	8140038f 	ldh	r5,14(r16)
   209a0:	283f4716 	blt	r5,zero,206c0 <__alt_data_end+0xf80206c0>
   209a4:	d80d883a 	mov	r6,sp
   209a8:	8809883a 	mov	r4,r17
   209ac:	0020a440 	call	20a44 <_fstat_r>
   209b0:	1000041e 	bne	r2,zero,209c4 <_fseeko_r+0x3e0>
   209b4:	d8800117 	ldw	r2,4(sp)
   209b8:	00e00014 	movui	r3,32768
   209bc:	10bc000c 	andi	r2,r2,61440
   209c0:	10ff7c26 	beq	r2,r3,207b4 <__alt_data_end+0xf80207b4>
   209c4:	8080030b 	ldhu	r2,12(r16)
   209c8:	003f3d06 	br	206c0 <__alt_data_end+0xf80206c0>
   209cc:	800b883a 	mov	r5,r16
   209d0:	8809883a 	mov	r4,r17
   209d4:	0020c980 	call	20c98 <__smakebuf_r>
   209d8:	003f3106 	br	206a0 <__alt_data_end+0xf80206a0>
   209dc:	81400717 	ldw	r5,28(r16)
   209e0:	01c00044 	movi	r7,1
   209e4:	000d883a 	mov	r6,zero
   209e8:	8809883a 	mov	r4,r17
   209ec:	a03ee83a 	callr	r20
   209f0:	00ffffc4 	movi	r3,-1
   209f4:	10ff7b1e 	bne	r2,r3,207e4 <__alt_data_end+0xf80207e4>
   209f8:	003f3306 	br	206c8 <__alt_data_end+0xf80206c8>
   209fc:	80c00017 	ldw	r3,0(r16)
   20a00:	80800417 	ldw	r2,16(r16)
   20a04:	000b883a 	mov	r5,zero
   20a08:	1887c83a 	sub	r3,r3,r2
   20a0c:	98e7c83a 	sub	r19,r19,r3
   20a10:	30c7883a 	add	r3,r6,r3
   20a14:	003f7f06 	br	20814 <__alt_data_end+0xf8020814>
   20a18:	00800744 	movi	r2,29
   20a1c:	88800015 	stw	r2,0(r17)
   20a20:	04ffffc4 	movi	r19,-1
   20a24:	003f0e06 	br	20660 <__alt_data_end+0xf8020660>

00020a28 <fseeko>:
   20a28:	00810034 	movhi	r2,1024
   20a2c:	1087e904 	addi	r2,r2,8100
   20a30:	300f883a 	mov	r7,r6
   20a34:	280d883a 	mov	r6,r5
   20a38:	200b883a 	mov	r5,r4
   20a3c:	11000017 	ldw	r4,0(r2)
   20a40:	00205e41 	jmpi	205e4 <_fseeko_r>

00020a44 <_fstat_r>:
   20a44:	defffd04 	addi	sp,sp,-12
   20a48:	2805883a 	mov	r2,r5
   20a4c:	dc000015 	stw	r16,0(sp)
   20a50:	04010034 	movhi	r16,1024
   20a54:	dc400115 	stw	r17,4(sp)
   20a58:	8407fa04 	addi	r16,r16,8168
   20a5c:	2023883a 	mov	r17,r4
   20a60:	300b883a 	mov	r5,r6
   20a64:	1009883a 	mov	r4,r2
   20a68:	dfc00215 	stw	ra,8(sp)
   20a6c:	80000015 	stw	zero,0(r16)
   20a70:	00310380 	call	31038 <fstat>
   20a74:	00ffffc4 	movi	r3,-1
   20a78:	10c00526 	beq	r2,r3,20a90 <_fstat_r+0x4c>
   20a7c:	dfc00217 	ldw	ra,8(sp)
   20a80:	dc400117 	ldw	r17,4(sp)
   20a84:	dc000017 	ldw	r16,0(sp)
   20a88:	dec00304 	addi	sp,sp,12
   20a8c:	f800283a 	ret
   20a90:	80c00017 	ldw	r3,0(r16)
   20a94:	183ff926 	beq	r3,zero,20a7c <__alt_data_end+0xf8020a7c>
   20a98:	88c00015 	stw	r3,0(r17)
   20a9c:	003ff706 	br	20a7c <__alt_data_end+0xf8020a7c>

00020aa0 <_fwrite_r>:
   20aa0:	defff504 	addi	sp,sp,-44
   20aa4:	dc800815 	stw	r18,32(sp)
   20aa8:	39a5383a 	mul	r18,r7,r6
   20aac:	d8800304 	addi	r2,sp,12
   20ab0:	d8800015 	stw	r2,0(sp)
   20ab4:	00800044 	movi	r2,1
   20ab8:	dcc00915 	stw	r19,36(sp)
   20abc:	dc400715 	stw	r17,28(sp)
   20ac0:	dc000615 	stw	r16,24(sp)
   20ac4:	d9400315 	stw	r5,12(sp)
   20ac8:	dfc00a15 	stw	ra,40(sp)
   20acc:	dc800415 	stw	r18,16(sp)
   20ad0:	dc800215 	stw	r18,8(sp)
   20ad4:	d8800115 	stw	r2,4(sp)
   20ad8:	3027883a 	mov	r19,r6
   20adc:	3821883a 	mov	r16,r7
   20ae0:	2023883a 	mov	r17,r4
   20ae4:	d9400b17 	ldw	r5,44(sp)
   20ae8:	20000226 	beq	r4,zero,20af4 <_fwrite_r+0x54>
   20aec:	20800e17 	ldw	r2,56(r4)
   20af0:	10001a26 	beq	r2,zero,20b5c <_fwrite_r+0xbc>
   20af4:	2880030b 	ldhu	r2,12(r5)
   20af8:	10c8000c 	andi	r3,r2,8192
   20afc:	1800061e 	bne	r3,zero,20b18 <_fwrite_r+0x78>
   20b00:	29001917 	ldw	r4,100(r5)
   20b04:	00f7ffc4 	movi	r3,-8193
   20b08:	10880014 	ori	r2,r2,8192
   20b0c:	20c6703a 	and	r3,r4,r3
   20b10:	2880030d 	sth	r2,12(r5)
   20b14:	28c01915 	stw	r3,100(r5)
   20b18:	d80d883a 	mov	r6,sp
   20b1c:	8809883a 	mov	r4,r17
   20b20:	00288280 	call	28828 <__sfvwrite_r>
   20b24:	10000b26 	beq	r2,zero,20b54 <_fwrite_r+0xb4>
   20b28:	d9000217 	ldw	r4,8(sp)
   20b2c:	980b883a 	mov	r5,r19
   20b30:	9109c83a 	sub	r4,r18,r4
   20b34:	002e7a00 	call	2e7a0 <__udivsi3>
   20b38:	dfc00a17 	ldw	ra,40(sp)
   20b3c:	dcc00917 	ldw	r19,36(sp)
   20b40:	dc800817 	ldw	r18,32(sp)
   20b44:	dc400717 	ldw	r17,28(sp)
   20b48:	dc000617 	ldw	r16,24(sp)
   20b4c:	dec00b04 	addi	sp,sp,44
   20b50:	f800283a 	ret
   20b54:	8005883a 	mov	r2,r16
   20b58:	003ff706 	br	20b38 <__alt_data_end+0xf8020b38>
   20b5c:	d9400515 	stw	r5,20(sp)
   20b60:	00282f80 	call	282f8 <__sinit>
   20b64:	d9400517 	ldw	r5,20(sp)
   20b68:	003fe206 	br	20af4 <__alt_data_end+0xf8020af4>

00020b6c <fwrite>:
   20b6c:	defffe04 	addi	sp,sp,-8
   20b70:	00810034 	movhi	r2,1024
   20b74:	d9c00015 	stw	r7,0(sp)
   20b78:	1087e904 	addi	r2,r2,8100
   20b7c:	300f883a 	mov	r7,r6
   20b80:	280d883a 	mov	r6,r5
   20b84:	200b883a 	mov	r5,r4
   20b88:	11000017 	ldw	r4,0(r2)
   20b8c:	dfc00115 	stw	ra,4(sp)
   20b90:	0020aa00 	call	20aa0 <_fwrite_r>
   20b94:	dfc00117 	ldw	ra,4(sp)
   20b98:	dec00204 	addi	sp,sp,8
   20b9c:	f800283a 	ret

00020ba0 <_getc_r>:
   20ba0:	defffd04 	addi	sp,sp,-12
   20ba4:	dc000115 	stw	r16,4(sp)
   20ba8:	dfc00215 	stw	ra,8(sp)
   20bac:	2021883a 	mov	r16,r4
   20bb0:	20000226 	beq	r4,zero,20bbc <_getc_r+0x1c>
   20bb4:	20800e17 	ldw	r2,56(r4)
   20bb8:	10000c26 	beq	r2,zero,20bec <_getc_r+0x4c>
   20bbc:	28800117 	ldw	r2,4(r5)
   20bc0:	10bfffc4 	addi	r2,r2,-1
   20bc4:	28800115 	stw	r2,4(r5)
   20bc8:	10000c16 	blt	r2,zero,20bfc <_getc_r+0x5c>
   20bcc:	28800017 	ldw	r2,0(r5)
   20bd0:	10c00044 	addi	r3,r2,1
   20bd4:	28c00015 	stw	r3,0(r5)
   20bd8:	10800003 	ldbu	r2,0(r2)
   20bdc:	dfc00217 	ldw	ra,8(sp)
   20be0:	dc000117 	ldw	r16,4(sp)
   20be4:	dec00304 	addi	sp,sp,12
   20be8:	f800283a 	ret
   20bec:	d9400015 	stw	r5,0(sp)
   20bf0:	00282f80 	call	282f8 <__sinit>
   20bf4:	d9400017 	ldw	r5,0(sp)
   20bf8:	003ff006 	br	20bbc <__alt_data_end+0xf8020bbc>
   20bfc:	8009883a 	mov	r4,r16
   20c00:	dfc00217 	ldw	ra,8(sp)
   20c04:	dc000117 	ldw	r16,4(sp)
   20c08:	dec00304 	addi	sp,sp,12
   20c0c:	0021b181 	jmpi	21b18 <__srget_r>

00020c10 <getc>:
   20c10:	00810034 	movhi	r2,1024
   20c14:	defffd04 	addi	sp,sp,-12
   20c18:	1087e904 	addi	r2,r2,8100
   20c1c:	dc400115 	stw	r17,4(sp)
   20c20:	14400017 	ldw	r17,0(r2)
   20c24:	dc000015 	stw	r16,0(sp)
   20c28:	dfc00215 	stw	ra,8(sp)
   20c2c:	2021883a 	mov	r16,r4
   20c30:	88000226 	beq	r17,zero,20c3c <getc+0x2c>
   20c34:	88800e17 	ldw	r2,56(r17)
   20c38:	10000d26 	beq	r2,zero,20c70 <getc+0x60>
   20c3c:	80800117 	ldw	r2,4(r16)
   20c40:	10bfffc4 	addi	r2,r2,-1
   20c44:	80800115 	stw	r2,4(r16)
   20c48:	10000c16 	blt	r2,zero,20c7c <getc+0x6c>
   20c4c:	80800017 	ldw	r2,0(r16)
   20c50:	10c00044 	addi	r3,r2,1
   20c54:	80c00015 	stw	r3,0(r16)
   20c58:	10800003 	ldbu	r2,0(r2)
   20c5c:	dfc00217 	ldw	ra,8(sp)
   20c60:	dc400117 	ldw	r17,4(sp)
   20c64:	dc000017 	ldw	r16,0(sp)
   20c68:	dec00304 	addi	sp,sp,12
   20c6c:	f800283a 	ret
   20c70:	8809883a 	mov	r4,r17
   20c74:	00282f80 	call	282f8 <__sinit>
   20c78:	003ff006 	br	20c3c <__alt_data_end+0xf8020c3c>
   20c7c:	800b883a 	mov	r5,r16
   20c80:	8809883a 	mov	r4,r17
   20c84:	dfc00217 	ldw	ra,8(sp)
   20c88:	dc400117 	ldw	r17,4(sp)
   20c8c:	dc000017 	ldw	r16,0(sp)
   20c90:	dec00304 	addi	sp,sp,12
   20c94:	0021b181 	jmpi	21b18 <__srget_r>

00020c98 <__smakebuf_r>:
   20c98:	2880030b 	ldhu	r2,12(r5)
   20c9c:	10c0008c 	andi	r3,r2,2
   20ca0:	1800411e 	bne	r3,zero,20da8 <__smakebuf_r+0x110>
   20ca4:	deffec04 	addi	sp,sp,-80
   20ca8:	dc000f15 	stw	r16,60(sp)
   20cac:	2821883a 	mov	r16,r5
   20cb0:	2940038f 	ldh	r5,14(r5)
   20cb4:	dc401015 	stw	r17,64(sp)
   20cb8:	dfc01315 	stw	ra,76(sp)
   20cbc:	dcc01215 	stw	r19,72(sp)
   20cc0:	dc801115 	stw	r18,68(sp)
   20cc4:	2023883a 	mov	r17,r4
   20cc8:	28001c16 	blt	r5,zero,20d3c <__smakebuf_r+0xa4>
   20ccc:	d80d883a 	mov	r6,sp
   20cd0:	0020a440 	call	20a44 <_fstat_r>
   20cd4:	10001816 	blt	r2,zero,20d38 <__smakebuf_r+0xa0>
   20cd8:	d8800117 	ldw	r2,4(sp)
   20cdc:	00e00014 	movui	r3,32768
   20ce0:	10bc000c 	andi	r2,r2,61440
   20ce4:	14c80020 	cmpeqi	r19,r2,8192
   20ce8:	10c03726 	beq	r2,r3,20dc8 <__smakebuf_r+0x130>
   20cec:	80c0030b 	ldhu	r3,12(r16)
   20cf0:	18c20014 	ori	r3,r3,2048
   20cf4:	80c0030d 	sth	r3,12(r16)
   20cf8:	00c80004 	movi	r3,8192
   20cfc:	10c0521e 	bne	r2,r3,20e48 <__smakebuf_r+0x1b0>
   20d00:	8140038f 	ldh	r5,14(r16)
   20d04:	8809883a 	mov	r4,r17
   20d08:	0028e6c0 	call	28e6c <_isatty_r>
   20d0c:	10004c26 	beq	r2,zero,20e40 <__smakebuf_r+0x1a8>
   20d10:	8080030b 	ldhu	r2,12(r16)
   20d14:	80c010c4 	addi	r3,r16,67
   20d18:	80c00015 	stw	r3,0(r16)
   20d1c:	10800054 	ori	r2,r2,1
   20d20:	8080030d 	sth	r2,12(r16)
   20d24:	00800044 	movi	r2,1
   20d28:	80c00415 	stw	r3,16(r16)
   20d2c:	80800515 	stw	r2,20(r16)
   20d30:	04810004 	movi	r18,1024
   20d34:	00000706 	br	20d54 <__smakebuf_r+0xbc>
   20d38:	8080030b 	ldhu	r2,12(r16)
   20d3c:	10c0200c 	andi	r3,r2,128
   20d40:	18001f1e 	bne	r3,zero,20dc0 <__smakebuf_r+0x128>
   20d44:	04810004 	movi	r18,1024
   20d48:	10820014 	ori	r2,r2,2048
   20d4c:	8080030d 	sth	r2,12(r16)
   20d50:	0027883a 	mov	r19,zero
   20d54:	900b883a 	mov	r5,r18
   20d58:	8809883a 	mov	r4,r17
   20d5c:	0020e540 	call	20e54 <_malloc_r>
   20d60:	10002c26 	beq	r2,zero,20e14 <__smakebuf_r+0x17c>
   20d64:	80c0030b 	ldhu	r3,12(r16)
   20d68:	010000b4 	movhi	r4,2
   20d6c:	211fec04 	addi	r4,r4,32688
   20d70:	89000f15 	stw	r4,60(r17)
   20d74:	18c02014 	ori	r3,r3,128
   20d78:	80c0030d 	sth	r3,12(r16)
   20d7c:	80800015 	stw	r2,0(r16)
   20d80:	80800415 	stw	r2,16(r16)
   20d84:	84800515 	stw	r18,20(r16)
   20d88:	98001a1e 	bne	r19,zero,20df4 <__smakebuf_r+0x15c>
   20d8c:	dfc01317 	ldw	ra,76(sp)
   20d90:	dcc01217 	ldw	r19,72(sp)
   20d94:	dc801117 	ldw	r18,68(sp)
   20d98:	dc401017 	ldw	r17,64(sp)
   20d9c:	dc000f17 	ldw	r16,60(sp)
   20da0:	dec01404 	addi	sp,sp,80
   20da4:	f800283a 	ret
   20da8:	288010c4 	addi	r2,r5,67
   20dac:	28800015 	stw	r2,0(r5)
   20db0:	28800415 	stw	r2,16(r5)
   20db4:	00800044 	movi	r2,1
   20db8:	28800515 	stw	r2,20(r5)
   20dbc:	f800283a 	ret
   20dc0:	04801004 	movi	r18,64
   20dc4:	003fe006 	br	20d48 <__alt_data_end+0xf8020d48>
   20dc8:	81000a17 	ldw	r4,40(r16)
   20dcc:	00c000b4 	movhi	r3,2
   20dd0:	18c73304 	addi	r3,r3,7372
   20dd4:	20ffc51e 	bne	r4,r3,20cec <__alt_data_end+0xf8020cec>
   20dd8:	8080030b 	ldhu	r2,12(r16)
   20ddc:	04810004 	movi	r18,1024
   20de0:	84801315 	stw	r18,76(r16)
   20de4:	1484b03a 	or	r2,r2,r18
   20de8:	8080030d 	sth	r2,12(r16)
   20dec:	0027883a 	mov	r19,zero
   20df0:	003fd806 	br	20d54 <__alt_data_end+0xf8020d54>
   20df4:	8140038f 	ldh	r5,14(r16)
   20df8:	8809883a 	mov	r4,r17
   20dfc:	0028e6c0 	call	28e6c <_isatty_r>
   20e00:	103fe226 	beq	r2,zero,20d8c <__alt_data_end+0xf8020d8c>
   20e04:	8080030b 	ldhu	r2,12(r16)
   20e08:	10800054 	ori	r2,r2,1
   20e0c:	8080030d 	sth	r2,12(r16)
   20e10:	003fde06 	br	20d8c <__alt_data_end+0xf8020d8c>
   20e14:	8080030b 	ldhu	r2,12(r16)
   20e18:	10c0800c 	andi	r3,r2,512
   20e1c:	183fdb1e 	bne	r3,zero,20d8c <__alt_data_end+0xf8020d8c>
   20e20:	10800094 	ori	r2,r2,2
   20e24:	80c010c4 	addi	r3,r16,67
   20e28:	8080030d 	sth	r2,12(r16)
   20e2c:	00800044 	movi	r2,1
   20e30:	80c00015 	stw	r3,0(r16)
   20e34:	80c00415 	stw	r3,16(r16)
   20e38:	80800515 	stw	r2,20(r16)
   20e3c:	003fd306 	br	20d8c <__alt_data_end+0xf8020d8c>
   20e40:	04810004 	movi	r18,1024
   20e44:	003fc306 	br	20d54 <__alt_data_end+0xf8020d54>
   20e48:	0027883a 	mov	r19,zero
   20e4c:	04810004 	movi	r18,1024
   20e50:	003fc006 	br	20d54 <__alt_data_end+0xf8020d54>

00020e54 <_malloc_r>:
   20e54:	defff504 	addi	sp,sp,-44
   20e58:	dc800315 	stw	r18,12(sp)
   20e5c:	dfc00a15 	stw	ra,40(sp)
   20e60:	df000915 	stw	fp,36(sp)
   20e64:	ddc00815 	stw	r23,32(sp)
   20e68:	dd800715 	stw	r22,28(sp)
   20e6c:	dd400615 	stw	r21,24(sp)
   20e70:	dd000515 	stw	r20,20(sp)
   20e74:	dcc00415 	stw	r19,16(sp)
   20e78:	dc400215 	stw	r17,8(sp)
   20e7c:	dc000115 	stw	r16,4(sp)
   20e80:	288002c4 	addi	r2,r5,11
   20e84:	00c00584 	movi	r3,22
   20e88:	2025883a 	mov	r18,r4
   20e8c:	18807f2e 	bgeu	r3,r2,2108c <_malloc_r+0x238>
   20e90:	047ffe04 	movi	r17,-8
   20e94:	1462703a 	and	r17,r2,r17
   20e98:	8800a316 	blt	r17,zero,21128 <_malloc_r+0x2d4>
   20e9c:	8940a236 	bltu	r17,r5,21128 <_malloc_r+0x2d4>
   20ea0:	00314400 	call	31440 <__malloc_lock>
   20ea4:	00807dc4 	movi	r2,503
   20ea8:	1441e92e 	bgeu	r2,r17,21650 <_malloc_r+0x7fc>
   20eac:	8804d27a 	srli	r2,r17,9
   20eb0:	1000a126 	beq	r2,zero,21138 <_malloc_r+0x2e4>
   20eb4:	00c00104 	movi	r3,4
   20eb8:	18811e36 	bltu	r3,r2,21334 <_malloc_r+0x4e0>
   20ebc:	8804d1ba 	srli	r2,r17,6
   20ec0:	12000e44 	addi	r8,r2,57
   20ec4:	11c00e04 	addi	r7,r2,56
   20ec8:	4209883a 	add	r4,r8,r8
   20ecc:	04c10034 	movhi	r19,1024
   20ed0:	2109883a 	add	r4,r4,r4
   20ed4:	9cc20704 	addi	r19,r19,2076
   20ed8:	2109883a 	add	r4,r4,r4
   20edc:	9909883a 	add	r4,r19,r4
   20ee0:	24000117 	ldw	r16,4(r4)
   20ee4:	213ffe04 	addi	r4,r4,-8
   20ee8:	24009726 	beq	r4,r16,21148 <_malloc_r+0x2f4>
   20eec:	80800117 	ldw	r2,4(r16)
   20ef0:	01bfff04 	movi	r6,-4
   20ef4:	014003c4 	movi	r5,15
   20ef8:	1184703a 	and	r2,r2,r6
   20efc:	1447c83a 	sub	r3,r2,r17
   20f00:	28c00716 	blt	r5,r3,20f20 <_malloc_r+0xcc>
   20f04:	1800920e 	bge	r3,zero,21150 <_malloc_r+0x2fc>
   20f08:	84000317 	ldw	r16,12(r16)
   20f0c:	24008e26 	beq	r4,r16,21148 <_malloc_r+0x2f4>
   20f10:	80800117 	ldw	r2,4(r16)
   20f14:	1184703a 	and	r2,r2,r6
   20f18:	1447c83a 	sub	r3,r2,r17
   20f1c:	28fff90e 	bge	r5,r3,20f04 <__alt_data_end+0xf8020f04>
   20f20:	3809883a 	mov	r4,r7
   20f24:	01810034 	movhi	r6,1024
   20f28:	9c000417 	ldw	r16,16(r19)
   20f2c:	31820704 	addi	r6,r6,2076
   20f30:	32000204 	addi	r8,r6,8
   20f34:	82013426 	beq	r16,r8,21408 <_malloc_r+0x5b4>
   20f38:	80c00117 	ldw	r3,4(r16)
   20f3c:	00bfff04 	movi	r2,-4
   20f40:	188e703a 	and	r7,r3,r2
   20f44:	3c45c83a 	sub	r2,r7,r17
   20f48:	00c003c4 	movi	r3,15
   20f4c:	18811f16 	blt	r3,r2,213cc <_malloc_r+0x578>
   20f50:	32000515 	stw	r8,20(r6)
   20f54:	32000415 	stw	r8,16(r6)
   20f58:	10007f0e 	bge	r2,zero,21158 <_malloc_r+0x304>
   20f5c:	00807fc4 	movi	r2,511
   20f60:	11c0fd36 	bltu	r2,r7,21358 <_malloc_r+0x504>
   20f64:	3806d0fa 	srli	r3,r7,3
   20f68:	01c00044 	movi	r7,1
   20f6c:	30800117 	ldw	r2,4(r6)
   20f70:	19400044 	addi	r5,r3,1
   20f74:	294b883a 	add	r5,r5,r5
   20f78:	1807d0ba 	srai	r3,r3,2
   20f7c:	294b883a 	add	r5,r5,r5
   20f80:	294b883a 	add	r5,r5,r5
   20f84:	298b883a 	add	r5,r5,r6
   20f88:	38c6983a 	sll	r3,r7,r3
   20f8c:	29c00017 	ldw	r7,0(r5)
   20f90:	2a7ffe04 	addi	r9,r5,-8
   20f94:	1886b03a 	or	r3,r3,r2
   20f98:	82400315 	stw	r9,12(r16)
   20f9c:	81c00215 	stw	r7,8(r16)
   20fa0:	30c00115 	stw	r3,4(r6)
   20fa4:	2c000015 	stw	r16,0(r5)
   20fa8:	3c000315 	stw	r16,12(r7)
   20fac:	2005d0ba 	srai	r2,r4,2
   20fb0:	01400044 	movi	r5,1
   20fb4:	288a983a 	sll	r5,r5,r2
   20fb8:	19406f36 	bltu	r3,r5,21178 <_malloc_r+0x324>
   20fbc:	28c4703a 	and	r2,r5,r3
   20fc0:	10000a1e 	bne	r2,zero,20fec <_malloc_r+0x198>
   20fc4:	00bfff04 	movi	r2,-4
   20fc8:	294b883a 	add	r5,r5,r5
   20fcc:	2088703a 	and	r4,r4,r2
   20fd0:	28c4703a 	and	r2,r5,r3
   20fd4:	21000104 	addi	r4,r4,4
   20fd8:	1000041e 	bne	r2,zero,20fec <_malloc_r+0x198>
   20fdc:	294b883a 	add	r5,r5,r5
   20fe0:	28c4703a 	and	r2,r5,r3
   20fe4:	21000104 	addi	r4,r4,4
   20fe8:	103ffc26 	beq	r2,zero,20fdc <__alt_data_end+0xf8020fdc>
   20fec:	02bfff04 	movi	r10,-4
   20ff0:	024003c4 	movi	r9,15
   20ff4:	21800044 	addi	r6,r4,1
   20ff8:	318d883a 	add	r6,r6,r6
   20ffc:	318d883a 	add	r6,r6,r6
   21000:	318d883a 	add	r6,r6,r6
   21004:	998d883a 	add	r6,r19,r6
   21008:	333ffe04 	addi	r12,r6,-8
   2100c:	2017883a 	mov	r11,r4
   21010:	31800104 	addi	r6,r6,4
   21014:	34000017 	ldw	r16,0(r6)
   21018:	31fffd04 	addi	r7,r6,-12
   2101c:	81c0041e 	bne	r16,r7,21030 <_malloc_r+0x1dc>
   21020:	0000fb06 	br	21410 <_malloc_r+0x5bc>
   21024:	1801030e 	bge	r3,zero,21434 <_malloc_r+0x5e0>
   21028:	84000317 	ldw	r16,12(r16)
   2102c:	81c0f826 	beq	r16,r7,21410 <_malloc_r+0x5bc>
   21030:	80800117 	ldw	r2,4(r16)
   21034:	1284703a 	and	r2,r2,r10
   21038:	1447c83a 	sub	r3,r2,r17
   2103c:	48fff90e 	bge	r9,r3,21024 <__alt_data_end+0xf8021024>
   21040:	80800317 	ldw	r2,12(r16)
   21044:	81000217 	ldw	r4,8(r16)
   21048:	89400054 	ori	r5,r17,1
   2104c:	81400115 	stw	r5,4(r16)
   21050:	20800315 	stw	r2,12(r4)
   21054:	11000215 	stw	r4,8(r2)
   21058:	8463883a 	add	r17,r16,r17
   2105c:	9c400515 	stw	r17,20(r19)
   21060:	9c400415 	stw	r17,16(r19)
   21064:	18800054 	ori	r2,r3,1
   21068:	88800115 	stw	r2,4(r17)
   2106c:	8a000315 	stw	r8,12(r17)
   21070:	8a000215 	stw	r8,8(r17)
   21074:	88e3883a 	add	r17,r17,r3
   21078:	88c00015 	stw	r3,0(r17)
   2107c:	9009883a 	mov	r4,r18
   21080:	00314640 	call	31464 <__malloc_unlock>
   21084:	80800204 	addi	r2,r16,8
   21088:	00001b06 	br	210f8 <_malloc_r+0x2a4>
   2108c:	04400404 	movi	r17,16
   21090:	89402536 	bltu	r17,r5,21128 <_malloc_r+0x2d4>
   21094:	00314400 	call	31440 <__malloc_lock>
   21098:	00800184 	movi	r2,6
   2109c:	01000084 	movi	r4,2
   210a0:	04c10034 	movhi	r19,1024
   210a4:	1085883a 	add	r2,r2,r2
   210a8:	9cc20704 	addi	r19,r19,2076
   210ac:	1085883a 	add	r2,r2,r2
   210b0:	9885883a 	add	r2,r19,r2
   210b4:	14000117 	ldw	r16,4(r2)
   210b8:	10fffe04 	addi	r3,r2,-8
   210bc:	80c0d926 	beq	r16,r3,21424 <_malloc_r+0x5d0>
   210c0:	80c00117 	ldw	r3,4(r16)
   210c4:	81000317 	ldw	r4,12(r16)
   210c8:	00bfff04 	movi	r2,-4
   210cc:	1884703a 	and	r2,r3,r2
   210d0:	81400217 	ldw	r5,8(r16)
   210d4:	8085883a 	add	r2,r16,r2
   210d8:	10c00117 	ldw	r3,4(r2)
   210dc:	29000315 	stw	r4,12(r5)
   210e0:	21400215 	stw	r5,8(r4)
   210e4:	18c00054 	ori	r3,r3,1
   210e8:	10c00115 	stw	r3,4(r2)
   210ec:	9009883a 	mov	r4,r18
   210f0:	00314640 	call	31464 <__malloc_unlock>
   210f4:	80800204 	addi	r2,r16,8
   210f8:	dfc00a17 	ldw	ra,40(sp)
   210fc:	df000917 	ldw	fp,36(sp)
   21100:	ddc00817 	ldw	r23,32(sp)
   21104:	dd800717 	ldw	r22,28(sp)
   21108:	dd400617 	ldw	r21,24(sp)
   2110c:	dd000517 	ldw	r20,20(sp)
   21110:	dcc00417 	ldw	r19,16(sp)
   21114:	dc800317 	ldw	r18,12(sp)
   21118:	dc400217 	ldw	r17,8(sp)
   2111c:	dc000117 	ldw	r16,4(sp)
   21120:	dec00b04 	addi	sp,sp,44
   21124:	f800283a 	ret
   21128:	00800304 	movi	r2,12
   2112c:	90800015 	stw	r2,0(r18)
   21130:	0005883a 	mov	r2,zero
   21134:	003ff006 	br	210f8 <__alt_data_end+0xf80210f8>
   21138:	01002004 	movi	r4,128
   2113c:	02001004 	movi	r8,64
   21140:	01c00fc4 	movi	r7,63
   21144:	003f6106 	br	20ecc <__alt_data_end+0xf8020ecc>
   21148:	4009883a 	mov	r4,r8
   2114c:	003f7506 	br	20f24 <__alt_data_end+0xf8020f24>
   21150:	81000317 	ldw	r4,12(r16)
   21154:	003fde06 	br	210d0 <__alt_data_end+0xf80210d0>
   21158:	81c5883a 	add	r2,r16,r7
   2115c:	11400117 	ldw	r5,4(r2)
   21160:	9009883a 	mov	r4,r18
   21164:	29400054 	ori	r5,r5,1
   21168:	11400115 	stw	r5,4(r2)
   2116c:	00314640 	call	31464 <__malloc_unlock>
   21170:	80800204 	addi	r2,r16,8
   21174:	003fe006 	br	210f8 <__alt_data_end+0xf80210f8>
   21178:	9c000217 	ldw	r16,8(r19)
   2117c:	00bfff04 	movi	r2,-4
   21180:	85800117 	ldw	r22,4(r16)
   21184:	b0ac703a 	and	r22,r22,r2
   21188:	b4400336 	bltu	r22,r17,21198 <_malloc_r+0x344>
   2118c:	b445c83a 	sub	r2,r22,r17
   21190:	00c003c4 	movi	r3,15
   21194:	18805d16 	blt	r3,r2,2130c <_malloc_r+0x4b8>
   21198:	05c10034 	movhi	r23,1024
   2119c:	00810034 	movhi	r2,1024
   211a0:	1087fd04 	addi	r2,r2,8180
   211a4:	bdc7ea04 	addi	r23,r23,8104
   211a8:	15400017 	ldw	r21,0(r2)
   211ac:	b8c00017 	ldw	r3,0(r23)
   211b0:	00bfffc4 	movi	r2,-1
   211b4:	858d883a 	add	r6,r16,r22
   211b8:	8d6b883a 	add	r21,r17,r21
   211bc:	1880ea26 	beq	r3,r2,21568 <_malloc_r+0x714>
   211c0:	ad4403c4 	addi	r21,r21,4111
   211c4:	00bc0004 	movi	r2,-4096
   211c8:	a8aa703a 	and	r21,r21,r2
   211cc:	a80b883a 	mov	r5,r21
   211d0:	9009883a 	mov	r4,r18
   211d4:	d9800015 	stw	r6,0(sp)
   211d8:	0021ba00 	call	21ba0 <_sbrk_r>
   211dc:	1029883a 	mov	r20,r2
   211e0:	00bfffc4 	movi	r2,-1
   211e4:	d9800017 	ldw	r6,0(sp)
   211e8:	a080e826 	beq	r20,r2,2158c <_malloc_r+0x738>
   211ec:	a180a636 	bltu	r20,r6,21488 <_malloc_r+0x634>
   211f0:	07010034 	movhi	fp,1024
   211f4:	e7080804 	addi	fp,fp,8224
   211f8:	e0800017 	ldw	r2,0(fp)
   211fc:	a887883a 	add	r3,r21,r2
   21200:	e0c00015 	stw	r3,0(fp)
   21204:	3500e626 	beq	r6,r20,215a0 <_malloc_r+0x74c>
   21208:	b9000017 	ldw	r4,0(r23)
   2120c:	00bfffc4 	movi	r2,-1
   21210:	2080ee26 	beq	r4,r2,215cc <_malloc_r+0x778>
   21214:	a185c83a 	sub	r2,r20,r6
   21218:	10c5883a 	add	r2,r2,r3
   2121c:	e0800015 	stw	r2,0(fp)
   21220:	a0c001cc 	andi	r3,r20,7
   21224:	1800bc26 	beq	r3,zero,21518 <_malloc_r+0x6c4>
   21228:	a0e9c83a 	sub	r20,r20,r3
   2122c:	00840204 	movi	r2,4104
   21230:	a5000204 	addi	r20,r20,8
   21234:	10c7c83a 	sub	r3,r2,r3
   21238:	a545883a 	add	r2,r20,r21
   2123c:	1083ffcc 	andi	r2,r2,4095
   21240:	18abc83a 	sub	r21,r3,r2
   21244:	a80b883a 	mov	r5,r21
   21248:	9009883a 	mov	r4,r18
   2124c:	0021ba00 	call	21ba0 <_sbrk_r>
   21250:	00ffffc4 	movi	r3,-1
   21254:	10c0e126 	beq	r2,r3,215dc <_malloc_r+0x788>
   21258:	1505c83a 	sub	r2,r2,r20
   2125c:	1545883a 	add	r2,r2,r21
   21260:	10800054 	ori	r2,r2,1
   21264:	e0c00017 	ldw	r3,0(fp)
   21268:	9d000215 	stw	r20,8(r19)
   2126c:	a0800115 	stw	r2,4(r20)
   21270:	a8c7883a 	add	r3,r21,r3
   21274:	e0c00015 	stw	r3,0(fp)
   21278:	84c00e26 	beq	r16,r19,212b4 <_malloc_r+0x460>
   2127c:	018003c4 	movi	r6,15
   21280:	3580a72e 	bgeu	r6,r22,21520 <_malloc_r+0x6cc>
   21284:	81400117 	ldw	r5,4(r16)
   21288:	013ffe04 	movi	r4,-8
   2128c:	b0bffd04 	addi	r2,r22,-12
   21290:	1104703a 	and	r2,r2,r4
   21294:	2900004c 	andi	r4,r5,1
   21298:	2088b03a 	or	r4,r4,r2
   2129c:	81000115 	stw	r4,4(r16)
   212a0:	01400144 	movi	r5,5
   212a4:	8089883a 	add	r4,r16,r2
   212a8:	21400115 	stw	r5,4(r4)
   212ac:	21400215 	stw	r5,8(r4)
   212b0:	3080cd36 	bltu	r6,r2,215e8 <_malloc_r+0x794>
   212b4:	00810034 	movhi	r2,1024
   212b8:	1087fc04 	addi	r2,r2,8176
   212bc:	11000017 	ldw	r4,0(r2)
   212c0:	20c0012e 	bgeu	r4,r3,212c8 <_malloc_r+0x474>
   212c4:	10c00015 	stw	r3,0(r2)
   212c8:	00810034 	movhi	r2,1024
   212cc:	1087fb04 	addi	r2,r2,8172
   212d0:	11000017 	ldw	r4,0(r2)
   212d4:	9c000217 	ldw	r16,8(r19)
   212d8:	20c0012e 	bgeu	r4,r3,212e0 <_malloc_r+0x48c>
   212dc:	10c00015 	stw	r3,0(r2)
   212e0:	80c00117 	ldw	r3,4(r16)
   212e4:	00bfff04 	movi	r2,-4
   212e8:	1886703a 	and	r3,r3,r2
   212ec:	1c45c83a 	sub	r2,r3,r17
   212f0:	1c400236 	bltu	r3,r17,212fc <_malloc_r+0x4a8>
   212f4:	00c003c4 	movi	r3,15
   212f8:	18800416 	blt	r3,r2,2130c <_malloc_r+0x4b8>
   212fc:	9009883a 	mov	r4,r18
   21300:	00314640 	call	31464 <__malloc_unlock>
   21304:	0005883a 	mov	r2,zero
   21308:	003f7b06 	br	210f8 <__alt_data_end+0xf80210f8>
   2130c:	88c00054 	ori	r3,r17,1
   21310:	80c00115 	stw	r3,4(r16)
   21314:	8463883a 	add	r17,r16,r17
   21318:	10800054 	ori	r2,r2,1
   2131c:	9c400215 	stw	r17,8(r19)
   21320:	88800115 	stw	r2,4(r17)
   21324:	9009883a 	mov	r4,r18
   21328:	00314640 	call	31464 <__malloc_unlock>
   2132c:	80800204 	addi	r2,r16,8
   21330:	003f7106 	br	210f8 <__alt_data_end+0xf80210f8>
   21334:	00c00504 	movi	r3,20
   21338:	18804a2e 	bgeu	r3,r2,21464 <_malloc_r+0x610>
   2133c:	00c01504 	movi	r3,84
   21340:	18806e36 	bltu	r3,r2,214fc <_malloc_r+0x6a8>
   21344:	8804d33a 	srli	r2,r17,12
   21348:	12001bc4 	addi	r8,r2,111
   2134c:	11c01b84 	addi	r7,r2,110
   21350:	4209883a 	add	r4,r8,r8
   21354:	003edd06 	br	20ecc <__alt_data_end+0xf8020ecc>
   21358:	3804d27a 	srli	r2,r7,9
   2135c:	00c00104 	movi	r3,4
   21360:	1880442e 	bgeu	r3,r2,21474 <_malloc_r+0x620>
   21364:	00c00504 	movi	r3,20
   21368:	18808136 	bltu	r3,r2,21570 <_malloc_r+0x71c>
   2136c:	11401704 	addi	r5,r2,92
   21370:	10c016c4 	addi	r3,r2,91
   21374:	294b883a 	add	r5,r5,r5
   21378:	294b883a 	add	r5,r5,r5
   2137c:	294b883a 	add	r5,r5,r5
   21380:	994b883a 	add	r5,r19,r5
   21384:	28800017 	ldw	r2,0(r5)
   21388:	01810034 	movhi	r6,1024
   2138c:	297ffe04 	addi	r5,r5,-8
   21390:	31820704 	addi	r6,r6,2076
   21394:	28806526 	beq	r5,r2,2152c <_malloc_r+0x6d8>
   21398:	01bfff04 	movi	r6,-4
   2139c:	10c00117 	ldw	r3,4(r2)
   213a0:	1986703a 	and	r3,r3,r6
   213a4:	38c0022e 	bgeu	r7,r3,213b0 <_malloc_r+0x55c>
   213a8:	10800217 	ldw	r2,8(r2)
   213ac:	28bffb1e 	bne	r5,r2,2139c <__alt_data_end+0xf802139c>
   213b0:	11400317 	ldw	r5,12(r2)
   213b4:	98c00117 	ldw	r3,4(r19)
   213b8:	81400315 	stw	r5,12(r16)
   213bc:	80800215 	stw	r2,8(r16)
   213c0:	2c000215 	stw	r16,8(r5)
   213c4:	14000315 	stw	r16,12(r2)
   213c8:	003ef806 	br	20fac <__alt_data_end+0xf8020fac>
   213cc:	88c00054 	ori	r3,r17,1
   213d0:	80c00115 	stw	r3,4(r16)
   213d4:	8463883a 	add	r17,r16,r17
   213d8:	34400515 	stw	r17,20(r6)
   213dc:	34400415 	stw	r17,16(r6)
   213e0:	10c00054 	ori	r3,r2,1
   213e4:	8a000315 	stw	r8,12(r17)
   213e8:	8a000215 	stw	r8,8(r17)
   213ec:	88c00115 	stw	r3,4(r17)
   213f0:	88a3883a 	add	r17,r17,r2
   213f4:	88800015 	stw	r2,0(r17)
   213f8:	9009883a 	mov	r4,r18
   213fc:	00314640 	call	31464 <__malloc_unlock>
   21400:	80800204 	addi	r2,r16,8
   21404:	003f3c06 	br	210f8 <__alt_data_end+0xf80210f8>
   21408:	30c00117 	ldw	r3,4(r6)
   2140c:	003ee706 	br	20fac <__alt_data_end+0xf8020fac>
   21410:	5ac00044 	addi	r11,r11,1
   21414:	588000cc 	andi	r2,r11,3
   21418:	31800204 	addi	r6,r6,8
   2141c:	103efd1e 	bne	r2,zero,21014 <__alt_data_end+0xf8021014>
   21420:	00002406 	br	214b4 <_malloc_r+0x660>
   21424:	14000317 	ldw	r16,12(r2)
   21428:	143f251e 	bne	r2,r16,210c0 <__alt_data_end+0xf80210c0>
   2142c:	21000084 	addi	r4,r4,2
   21430:	003ebc06 	br	20f24 <__alt_data_end+0xf8020f24>
   21434:	8085883a 	add	r2,r16,r2
   21438:	10c00117 	ldw	r3,4(r2)
   2143c:	81000317 	ldw	r4,12(r16)
   21440:	81400217 	ldw	r5,8(r16)
   21444:	18c00054 	ori	r3,r3,1
   21448:	10c00115 	stw	r3,4(r2)
   2144c:	29000315 	stw	r4,12(r5)
   21450:	21400215 	stw	r5,8(r4)
   21454:	9009883a 	mov	r4,r18
   21458:	00314640 	call	31464 <__malloc_unlock>
   2145c:	80800204 	addi	r2,r16,8
   21460:	003f2506 	br	210f8 <__alt_data_end+0xf80210f8>
   21464:	12001704 	addi	r8,r2,92
   21468:	11c016c4 	addi	r7,r2,91
   2146c:	4209883a 	add	r4,r8,r8
   21470:	003e9606 	br	20ecc <__alt_data_end+0xf8020ecc>
   21474:	3804d1ba 	srli	r2,r7,6
   21478:	11400e44 	addi	r5,r2,57
   2147c:	10c00e04 	addi	r3,r2,56
   21480:	294b883a 	add	r5,r5,r5
   21484:	003fbc06 	br	21378 <__alt_data_end+0xf8021378>
   21488:	84ff5926 	beq	r16,r19,211f0 <__alt_data_end+0xf80211f0>
   2148c:	00810034 	movhi	r2,1024
   21490:	10820704 	addi	r2,r2,2076
   21494:	14000217 	ldw	r16,8(r2)
   21498:	00bfff04 	movi	r2,-4
   2149c:	80c00117 	ldw	r3,4(r16)
   214a0:	1886703a 	and	r3,r3,r2
   214a4:	003f9106 	br	212ec <__alt_data_end+0xf80212ec>
   214a8:	60800217 	ldw	r2,8(r12)
   214ac:	213fffc4 	addi	r4,r4,-1
   214b0:	1300651e 	bne	r2,r12,21648 <_malloc_r+0x7f4>
   214b4:	208000cc 	andi	r2,r4,3
   214b8:	633ffe04 	addi	r12,r12,-8
   214bc:	103ffa1e 	bne	r2,zero,214a8 <__alt_data_end+0xf80214a8>
   214c0:	98800117 	ldw	r2,4(r19)
   214c4:	0146303a 	nor	r3,zero,r5
   214c8:	1884703a 	and	r2,r3,r2
   214cc:	98800115 	stw	r2,4(r19)
   214d0:	294b883a 	add	r5,r5,r5
   214d4:	117f2836 	bltu	r2,r5,21178 <__alt_data_end+0xf8021178>
   214d8:	283f2726 	beq	r5,zero,21178 <__alt_data_end+0xf8021178>
   214dc:	2886703a 	and	r3,r5,r2
   214e0:	5809883a 	mov	r4,r11
   214e4:	183ec31e 	bne	r3,zero,20ff4 <__alt_data_end+0xf8020ff4>
   214e8:	294b883a 	add	r5,r5,r5
   214ec:	2886703a 	and	r3,r5,r2
   214f0:	21000104 	addi	r4,r4,4
   214f4:	183ffc26 	beq	r3,zero,214e8 <__alt_data_end+0xf80214e8>
   214f8:	003ebe06 	br	20ff4 <__alt_data_end+0xf8020ff4>
   214fc:	00c05504 	movi	r3,340
   21500:	18801236 	bltu	r3,r2,2154c <_malloc_r+0x6f8>
   21504:	8804d3fa 	srli	r2,r17,15
   21508:	12001e04 	addi	r8,r2,120
   2150c:	11c01dc4 	addi	r7,r2,119
   21510:	4209883a 	add	r4,r8,r8
   21514:	003e6d06 	br	20ecc <__alt_data_end+0xf8020ecc>
   21518:	00c40004 	movi	r3,4096
   2151c:	003f4606 	br	21238 <__alt_data_end+0xf8021238>
   21520:	00800044 	movi	r2,1
   21524:	a0800115 	stw	r2,4(r20)
   21528:	003f7406 	br	212fc <__alt_data_end+0xf80212fc>
   2152c:	1805d0ba 	srai	r2,r3,2
   21530:	01c00044 	movi	r7,1
   21534:	30c00117 	ldw	r3,4(r6)
   21538:	388e983a 	sll	r7,r7,r2
   2153c:	2805883a 	mov	r2,r5
   21540:	38c6b03a 	or	r3,r7,r3
   21544:	30c00115 	stw	r3,4(r6)
   21548:	003f9b06 	br	213b8 <__alt_data_end+0xf80213b8>
   2154c:	00c15504 	movi	r3,1364
   21550:	18801a36 	bltu	r3,r2,215bc <_malloc_r+0x768>
   21554:	8804d4ba 	srli	r2,r17,18
   21558:	12001f44 	addi	r8,r2,125
   2155c:	11c01f04 	addi	r7,r2,124
   21560:	4209883a 	add	r4,r8,r8
   21564:	003e5906 	br	20ecc <__alt_data_end+0xf8020ecc>
   21568:	ad400404 	addi	r21,r21,16
   2156c:	003f1706 	br	211cc <__alt_data_end+0xf80211cc>
   21570:	00c01504 	movi	r3,84
   21574:	18802336 	bltu	r3,r2,21604 <_malloc_r+0x7b0>
   21578:	3804d33a 	srli	r2,r7,12
   2157c:	11401bc4 	addi	r5,r2,111
   21580:	10c01b84 	addi	r3,r2,110
   21584:	294b883a 	add	r5,r5,r5
   21588:	003f7b06 	br	21378 <__alt_data_end+0xf8021378>
   2158c:	9c000217 	ldw	r16,8(r19)
   21590:	00bfff04 	movi	r2,-4
   21594:	80c00117 	ldw	r3,4(r16)
   21598:	1886703a 	and	r3,r3,r2
   2159c:	003f5306 	br	212ec <__alt_data_end+0xf80212ec>
   215a0:	3083ffcc 	andi	r2,r6,4095
   215a4:	103f181e 	bne	r2,zero,21208 <__alt_data_end+0xf8021208>
   215a8:	99000217 	ldw	r4,8(r19)
   215ac:	b545883a 	add	r2,r22,r21
   215b0:	10800054 	ori	r2,r2,1
   215b4:	20800115 	stw	r2,4(r4)
   215b8:	003f3e06 	br	212b4 <__alt_data_end+0xf80212b4>
   215bc:	01003f84 	movi	r4,254
   215c0:	02001fc4 	movi	r8,127
   215c4:	01c01f84 	movi	r7,126
   215c8:	003e4006 	br	20ecc <__alt_data_end+0xf8020ecc>
   215cc:	00810034 	movhi	r2,1024
   215d0:	1087ea04 	addi	r2,r2,8104
   215d4:	15000015 	stw	r20,0(r2)
   215d8:	003f1106 	br	21220 <__alt_data_end+0xf8021220>
   215dc:	00800044 	movi	r2,1
   215e0:	002b883a 	mov	r21,zero
   215e4:	003f1f06 	br	21264 <__alt_data_end+0xf8021264>
   215e8:	81400204 	addi	r5,r16,8
   215ec:	9009883a 	mov	r4,r18
   215f0:	00285180 	call	28518 <_free_r>
   215f4:	00810034 	movhi	r2,1024
   215f8:	10880804 	addi	r2,r2,8224
   215fc:	10c00017 	ldw	r3,0(r2)
   21600:	003f2c06 	br	212b4 <__alt_data_end+0xf80212b4>
   21604:	00c05504 	movi	r3,340
   21608:	18800536 	bltu	r3,r2,21620 <_malloc_r+0x7cc>
   2160c:	3804d3fa 	srli	r2,r7,15
   21610:	11401e04 	addi	r5,r2,120
   21614:	10c01dc4 	addi	r3,r2,119
   21618:	294b883a 	add	r5,r5,r5
   2161c:	003f5606 	br	21378 <__alt_data_end+0xf8021378>
   21620:	00c15504 	movi	r3,1364
   21624:	18800536 	bltu	r3,r2,2163c <_malloc_r+0x7e8>
   21628:	3804d4ba 	srli	r2,r7,18
   2162c:	11401f44 	addi	r5,r2,125
   21630:	10c01f04 	addi	r3,r2,124
   21634:	294b883a 	add	r5,r5,r5
   21638:	003f4f06 	br	21378 <__alt_data_end+0xf8021378>
   2163c:	01403f84 	movi	r5,254
   21640:	00c01f84 	movi	r3,126
   21644:	003f4c06 	br	21378 <__alt_data_end+0xf8021378>
   21648:	98800117 	ldw	r2,4(r19)
   2164c:	003fa006 	br	214d0 <__alt_data_end+0xf80214d0>
   21650:	8808d0fa 	srli	r4,r17,3
   21654:	20800044 	addi	r2,r4,1
   21658:	1085883a 	add	r2,r2,r2
   2165c:	003e9006 	br	210a0 <__alt_data_end+0xf80210a0>

00021660 <memset>:
   21660:	20c000cc 	andi	r3,r4,3
   21664:	2005883a 	mov	r2,r4
   21668:	18004426 	beq	r3,zero,2177c <memset+0x11c>
   2166c:	31ffffc4 	addi	r7,r6,-1
   21670:	30004026 	beq	r6,zero,21774 <memset+0x114>
   21674:	2813883a 	mov	r9,r5
   21678:	200d883a 	mov	r6,r4
   2167c:	2007883a 	mov	r3,r4
   21680:	00000406 	br	21694 <memset+0x34>
   21684:	3a3fffc4 	addi	r8,r7,-1
   21688:	31800044 	addi	r6,r6,1
   2168c:	38003926 	beq	r7,zero,21774 <memset+0x114>
   21690:	400f883a 	mov	r7,r8
   21694:	18c00044 	addi	r3,r3,1
   21698:	32400005 	stb	r9,0(r6)
   2169c:	1a0000cc 	andi	r8,r3,3
   216a0:	403ff81e 	bne	r8,zero,21684 <__alt_data_end+0xf8021684>
   216a4:	010000c4 	movi	r4,3
   216a8:	21c02d2e 	bgeu	r4,r7,21760 <memset+0x100>
   216ac:	29003fcc 	andi	r4,r5,255
   216b0:	200c923a 	slli	r6,r4,8
   216b4:	3108b03a 	or	r4,r6,r4
   216b8:	200c943a 	slli	r6,r4,16
   216bc:	218cb03a 	or	r6,r4,r6
   216c0:	010003c4 	movi	r4,15
   216c4:	21c0182e 	bgeu	r4,r7,21728 <memset+0xc8>
   216c8:	3b3ffc04 	addi	r12,r7,-16
   216cc:	6018d13a 	srli	r12,r12,4
   216d0:	1a000104 	addi	r8,r3,4
   216d4:	1ac00204 	addi	r11,r3,8
   216d8:	6008913a 	slli	r4,r12,4
   216dc:	1a800304 	addi	r10,r3,12
   216e0:	1813883a 	mov	r9,r3
   216e4:	21000504 	addi	r4,r4,20
   216e8:	1909883a 	add	r4,r3,r4
   216ec:	49800015 	stw	r6,0(r9)
   216f0:	41800015 	stw	r6,0(r8)
   216f4:	59800015 	stw	r6,0(r11)
   216f8:	51800015 	stw	r6,0(r10)
   216fc:	42000404 	addi	r8,r8,16
   21700:	4a400404 	addi	r9,r9,16
   21704:	5ac00404 	addi	r11,r11,16
   21708:	52800404 	addi	r10,r10,16
   2170c:	413ff71e 	bne	r8,r4,216ec <__alt_data_end+0xf80216ec>
   21710:	63000044 	addi	r12,r12,1
   21714:	6018913a 	slli	r12,r12,4
   21718:	39c003cc 	andi	r7,r7,15
   2171c:	010000c4 	movi	r4,3
   21720:	1b07883a 	add	r3,r3,r12
   21724:	21c00e2e 	bgeu	r4,r7,21760 <memset+0x100>
   21728:	1813883a 	mov	r9,r3
   2172c:	3811883a 	mov	r8,r7
   21730:	010000c4 	movi	r4,3
   21734:	49800015 	stw	r6,0(r9)
   21738:	423fff04 	addi	r8,r8,-4
   2173c:	4a400104 	addi	r9,r9,4
   21740:	223ffc36 	bltu	r4,r8,21734 <__alt_data_end+0xf8021734>
   21744:	393fff04 	addi	r4,r7,-4
   21748:	2008d0ba 	srli	r4,r4,2
   2174c:	39c000cc 	andi	r7,r7,3
   21750:	21000044 	addi	r4,r4,1
   21754:	2109883a 	add	r4,r4,r4
   21758:	2109883a 	add	r4,r4,r4
   2175c:	1907883a 	add	r3,r3,r4
   21760:	38000526 	beq	r7,zero,21778 <memset+0x118>
   21764:	19cf883a 	add	r7,r3,r7
   21768:	19400005 	stb	r5,0(r3)
   2176c:	18c00044 	addi	r3,r3,1
   21770:	38fffd1e 	bne	r7,r3,21768 <__alt_data_end+0xf8021768>
   21774:	f800283a 	ret
   21778:	f800283a 	ret
   2177c:	2007883a 	mov	r3,r4
   21780:	300f883a 	mov	r7,r6
   21784:	003fc706 	br	216a4 <__alt_data_end+0xf80216a4>

00021788 <_open_r>:
   21788:	defffd04 	addi	sp,sp,-12
   2178c:	2805883a 	mov	r2,r5
   21790:	dc000015 	stw	r16,0(sp)
   21794:	04010034 	movhi	r16,1024
   21798:	dc400115 	stw	r17,4(sp)
   2179c:	300b883a 	mov	r5,r6
   217a0:	8407fa04 	addi	r16,r16,8168
   217a4:	2023883a 	mov	r17,r4
   217a8:	380d883a 	mov	r6,r7
   217ac:	1009883a 	mov	r4,r2
   217b0:	dfc00215 	stw	ra,8(sp)
   217b4:	80000015 	stw	zero,0(r16)
   217b8:	00315880 	call	31588 <open>
   217bc:	00ffffc4 	movi	r3,-1
   217c0:	10c00526 	beq	r2,r3,217d8 <_open_r+0x50>
   217c4:	dfc00217 	ldw	ra,8(sp)
   217c8:	dc400117 	ldw	r17,4(sp)
   217cc:	dc000017 	ldw	r16,0(sp)
   217d0:	dec00304 	addi	sp,sp,12
   217d4:	f800283a 	ret
   217d8:	80c00017 	ldw	r3,0(r16)
   217dc:	183ff926 	beq	r3,zero,217c4 <__alt_data_end+0xf80217c4>
   217e0:	88c00015 	stw	r3,0(r17)
   217e4:	003ff706 	br	217c4 <__alt_data_end+0xf80217c4>

000217e8 <_printf_r>:
   217e8:	defffd04 	addi	sp,sp,-12
   217ec:	2805883a 	mov	r2,r5
   217f0:	dfc00015 	stw	ra,0(sp)
   217f4:	d9800115 	stw	r6,4(sp)
   217f8:	d9c00215 	stw	r7,8(sp)
   217fc:	21400217 	ldw	r5,8(r4)
   21800:	d9c00104 	addi	r7,sp,4
   21804:	100d883a 	mov	r6,r2
   21808:	0023fa00 	call	23fa0 <___vfprintf_internal_r>
   2180c:	dfc00017 	ldw	ra,0(sp)
   21810:	dec00304 	addi	sp,sp,12
   21814:	f800283a 	ret

00021818 <printf>:
   21818:	defffc04 	addi	sp,sp,-16
   2181c:	dfc00015 	stw	ra,0(sp)
   21820:	d9400115 	stw	r5,4(sp)
   21824:	d9800215 	stw	r6,8(sp)
   21828:	d9c00315 	stw	r7,12(sp)
   2182c:	00810034 	movhi	r2,1024
   21830:	1087e904 	addi	r2,r2,8100
   21834:	10800017 	ldw	r2,0(r2)
   21838:	200b883a 	mov	r5,r4
   2183c:	d9800104 	addi	r6,sp,4
   21840:	11000217 	ldw	r4,8(r2)
   21844:	00261980 	call	26198 <__vfprintf_internal>
   21848:	dfc00017 	ldw	ra,0(sp)
   2184c:	dec00404 	addi	sp,sp,16
   21850:	f800283a 	ret

00021854 <_puts_r>:
   21854:	defff604 	addi	sp,sp,-40
   21858:	dc000715 	stw	r16,28(sp)
   2185c:	2021883a 	mov	r16,r4
   21860:	2809883a 	mov	r4,r5
   21864:	dc400815 	stw	r17,32(sp)
   21868:	dfc00915 	stw	ra,36(sp)
   2186c:	2823883a 	mov	r17,r5
   21870:	0021d300 	call	21d30 <strlen>
   21874:	10c00044 	addi	r3,r2,1
   21878:	d8800115 	stw	r2,4(sp)
   2187c:	00810034 	movhi	r2,1024
   21880:	10802304 	addi	r2,r2,140
   21884:	d8800215 	stw	r2,8(sp)
   21888:	00800044 	movi	r2,1
   2188c:	d8800315 	stw	r2,12(sp)
   21890:	00800084 	movi	r2,2
   21894:	dc400015 	stw	r17,0(sp)
   21898:	d8c00615 	stw	r3,24(sp)
   2189c:	dec00415 	stw	sp,16(sp)
   218a0:	d8800515 	stw	r2,20(sp)
   218a4:	80000226 	beq	r16,zero,218b0 <_puts_r+0x5c>
   218a8:	80800e17 	ldw	r2,56(r16)
   218ac:	10001426 	beq	r2,zero,21900 <_puts_r+0xac>
   218b0:	81400217 	ldw	r5,8(r16)
   218b4:	2880030b 	ldhu	r2,12(r5)
   218b8:	10c8000c 	andi	r3,r2,8192
   218bc:	1800061e 	bne	r3,zero,218d8 <_puts_r+0x84>
   218c0:	29001917 	ldw	r4,100(r5)
   218c4:	00f7ffc4 	movi	r3,-8193
   218c8:	10880014 	ori	r2,r2,8192
   218cc:	20c6703a 	and	r3,r4,r3
   218d0:	2880030d 	sth	r2,12(r5)
   218d4:	28c01915 	stw	r3,100(r5)
   218d8:	d9800404 	addi	r6,sp,16
   218dc:	8009883a 	mov	r4,r16
   218e0:	00288280 	call	28828 <__sfvwrite_r>
   218e4:	1000091e 	bne	r2,zero,2190c <_puts_r+0xb8>
   218e8:	00800284 	movi	r2,10
   218ec:	dfc00917 	ldw	ra,36(sp)
   218f0:	dc400817 	ldw	r17,32(sp)
   218f4:	dc000717 	ldw	r16,28(sp)
   218f8:	dec00a04 	addi	sp,sp,40
   218fc:	f800283a 	ret
   21900:	8009883a 	mov	r4,r16
   21904:	00282f80 	call	282f8 <__sinit>
   21908:	003fe906 	br	218b0 <__alt_data_end+0xf80218b0>
   2190c:	00bfffc4 	movi	r2,-1
   21910:	003ff606 	br	218ec <__alt_data_end+0xf80218ec>

00021914 <puts>:
   21914:	00810034 	movhi	r2,1024
   21918:	1087e904 	addi	r2,r2,8100
   2191c:	200b883a 	mov	r5,r4
   21920:	11000017 	ldw	r4,0(r2)
   21924:	00218541 	jmpi	21854 <_puts_r>

00021928 <lflush>:
   21928:	2080030b 	ldhu	r2,12(r4)
   2192c:	00c00244 	movi	r3,9
   21930:	1080024c 	andi	r2,r2,9
   21934:	10c00226 	beq	r2,r3,21940 <lflush+0x18>
   21938:	0005883a 	mov	r2,zero
   2193c:	f800283a 	ret
   21940:	0027f781 	jmpi	27f78 <fflush>

00021944 <__srefill_r>:
   21944:	defffc04 	addi	sp,sp,-16
   21948:	dc400115 	stw	r17,4(sp)
   2194c:	dc000015 	stw	r16,0(sp)
   21950:	dfc00315 	stw	ra,12(sp)
   21954:	dc800215 	stw	r18,8(sp)
   21958:	2023883a 	mov	r17,r4
   2195c:	2821883a 	mov	r16,r5
   21960:	20000226 	beq	r4,zero,2196c <__srefill_r+0x28>
   21964:	20800e17 	ldw	r2,56(r4)
   21968:	10003c26 	beq	r2,zero,21a5c <__srefill_r+0x118>
   2196c:	80c0030b 	ldhu	r3,12(r16)
   21970:	1908000c 	andi	r4,r3,8192
   21974:	1805883a 	mov	r2,r3
   21978:	2000071e 	bne	r4,zero,21998 <__srefill_r+0x54>
   2197c:	81001917 	ldw	r4,100(r16)
   21980:	18880014 	ori	r2,r3,8192
   21984:	00f7ffc4 	movi	r3,-8193
   21988:	20c8703a 	and	r4,r4,r3
   2198c:	8080030d 	sth	r2,12(r16)
   21990:	1007883a 	mov	r3,r2
   21994:	81001915 	stw	r4,100(r16)
   21998:	80000115 	stw	zero,4(r16)
   2199c:	1100080c 	andi	r4,r2,32
   219a0:	2000571e 	bne	r4,zero,21b00 <__srefill_r+0x1bc>
   219a4:	1100010c 	andi	r4,r2,4
   219a8:	20001f26 	beq	r4,zero,21a28 <__srefill_r+0xe4>
   219ac:	81400c17 	ldw	r5,48(r16)
   219b0:	28000826 	beq	r5,zero,219d4 <__srefill_r+0x90>
   219b4:	80801004 	addi	r2,r16,64
   219b8:	28800226 	beq	r5,r2,219c4 <__srefill_r+0x80>
   219bc:	8809883a 	mov	r4,r17
   219c0:	00285180 	call	28518 <_free_r>
   219c4:	80800f17 	ldw	r2,60(r16)
   219c8:	80000c15 	stw	zero,48(r16)
   219cc:	80800115 	stw	r2,4(r16)
   219d0:	1000391e 	bne	r2,zero,21ab8 <__srefill_r+0x174>
   219d4:	80800417 	ldw	r2,16(r16)
   219d8:	10004b26 	beq	r2,zero,21b08 <__srefill_r+0x1c4>
   219dc:	8480030b 	ldhu	r18,12(r16)
   219e0:	908000cc 	andi	r2,r18,3
   219e4:	10001f1e 	bne	r2,zero,21a64 <__srefill_r+0x120>
   219e8:	81800417 	ldw	r6,16(r16)
   219ec:	80800817 	ldw	r2,32(r16)
   219f0:	81c00517 	ldw	r7,20(r16)
   219f4:	81400717 	ldw	r5,28(r16)
   219f8:	81800015 	stw	r6,0(r16)
   219fc:	8809883a 	mov	r4,r17
   21a00:	103ee83a 	callr	r2
   21a04:	80800115 	stw	r2,4(r16)
   21a08:	00800e0e 	bge	zero,r2,21a44 <__srefill_r+0x100>
   21a0c:	0005883a 	mov	r2,zero
   21a10:	dfc00317 	ldw	ra,12(sp)
   21a14:	dc800217 	ldw	r18,8(sp)
   21a18:	dc400117 	ldw	r17,4(sp)
   21a1c:	dc000017 	ldw	r16,0(sp)
   21a20:	dec00404 	addi	sp,sp,16
   21a24:	f800283a 	ret
   21a28:	1100040c 	andi	r4,r2,16
   21a2c:	20003026 	beq	r4,zero,21af0 <__srefill_r+0x1ac>
   21a30:	1080020c 	andi	r2,r2,8
   21a34:	1000241e 	bne	r2,zero,21ac8 <__srefill_r+0x184>
   21a38:	18c00114 	ori	r3,r3,4
   21a3c:	80c0030d 	sth	r3,12(r16)
   21a40:	003fe406 	br	219d4 <__alt_data_end+0xf80219d4>
   21a44:	80c0030b 	ldhu	r3,12(r16)
   21a48:	1000161e 	bne	r2,zero,21aa4 <__srefill_r+0x160>
   21a4c:	18c00814 	ori	r3,r3,32
   21a50:	00bfffc4 	movi	r2,-1
   21a54:	80c0030d 	sth	r3,12(r16)
   21a58:	003fed06 	br	21a10 <__alt_data_end+0xf8021a10>
   21a5c:	00282f80 	call	282f8 <__sinit>
   21a60:	003fc206 	br	2196c <__alt_data_end+0xf802196c>
   21a64:	00810034 	movhi	r2,1024
   21a68:	1087e804 	addi	r2,r2,8096
   21a6c:	11000017 	ldw	r4,0(r2)
   21a70:	014000b4 	movhi	r5,2
   21a74:	00800044 	movi	r2,1
   21a78:	29464a04 	addi	r5,r5,6440
   21a7c:	8080030d 	sth	r2,12(r16)
   21a80:	0028ce40 	call	28ce4 <_fwalk>
   21a84:	00800244 	movi	r2,9
   21a88:	8480030d 	sth	r18,12(r16)
   21a8c:	9480024c 	andi	r18,r18,9
   21a90:	90bfd51e 	bne	r18,r2,219e8 <__alt_data_end+0xf80219e8>
   21a94:	800b883a 	mov	r5,r16
   21a98:	8809883a 	mov	r4,r17
   21a9c:	0027d000 	call	27d00 <__sflush_r>
   21aa0:	003fd106 	br	219e8 <__alt_data_end+0xf80219e8>
   21aa4:	18c01014 	ori	r3,r3,64
   21aa8:	80000115 	stw	zero,4(r16)
   21aac:	00bfffc4 	movi	r2,-1
   21ab0:	80c0030d 	sth	r3,12(r16)
   21ab4:	003fd606 	br	21a10 <__alt_data_end+0xf8021a10>
   21ab8:	80c00e17 	ldw	r3,56(r16)
   21abc:	0005883a 	mov	r2,zero
   21ac0:	80c00015 	stw	r3,0(r16)
   21ac4:	003fd206 	br	21a10 <__alt_data_end+0xf8021a10>
   21ac8:	800b883a 	mov	r5,r16
   21acc:	8809883a 	mov	r4,r17
   21ad0:	0027f1c0 	call	27f1c <_fflush_r>
   21ad4:	10000a1e 	bne	r2,zero,21b00 <__srefill_r+0x1bc>
   21ad8:	8080030b 	ldhu	r2,12(r16)
   21adc:	00fffdc4 	movi	r3,-9
   21ae0:	80000215 	stw	zero,8(r16)
   21ae4:	1886703a 	and	r3,r3,r2
   21ae8:	80000615 	stw	zero,24(r16)
   21aec:	003fd206 	br	21a38 <__alt_data_end+0xf8021a38>
   21af0:	00800244 	movi	r2,9
   21af4:	88800015 	stw	r2,0(r17)
   21af8:	18c01014 	ori	r3,r3,64
   21afc:	80c0030d 	sth	r3,12(r16)
   21b00:	00bfffc4 	movi	r2,-1
   21b04:	003fc206 	br	21a10 <__alt_data_end+0xf8021a10>
   21b08:	800b883a 	mov	r5,r16
   21b0c:	8809883a 	mov	r4,r17
   21b10:	0020c980 	call	20c98 <__smakebuf_r>
   21b14:	003fb106 	br	219dc <__alt_data_end+0xf80219dc>

00021b18 <__srget_r>:
   21b18:	defffd04 	addi	sp,sp,-12
   21b1c:	dc400115 	stw	r17,4(sp)
   21b20:	dc000015 	stw	r16,0(sp)
   21b24:	dfc00215 	stw	ra,8(sp)
   21b28:	2023883a 	mov	r17,r4
   21b2c:	2821883a 	mov	r16,r5
   21b30:	20000226 	beq	r4,zero,21b3c <__srget_r+0x24>
   21b34:	20800e17 	ldw	r2,56(r4)
   21b38:	10001026 	beq	r2,zero,21b7c <__srget_r+0x64>
   21b3c:	800b883a 	mov	r5,r16
   21b40:	8809883a 	mov	r4,r17
   21b44:	00219440 	call	21944 <__srefill_r>
   21b48:	10000e1e 	bne	r2,zero,21b84 <__srget_r+0x6c>
   21b4c:	80c00017 	ldw	r3,0(r16)
   21b50:	80800117 	ldw	r2,4(r16)
   21b54:	19000044 	addi	r4,r3,1
   21b58:	10bfffc4 	addi	r2,r2,-1
   21b5c:	80800115 	stw	r2,4(r16)
   21b60:	81000015 	stw	r4,0(r16)
   21b64:	18800003 	ldbu	r2,0(r3)
   21b68:	dfc00217 	ldw	ra,8(sp)
   21b6c:	dc400117 	ldw	r17,4(sp)
   21b70:	dc000017 	ldw	r16,0(sp)
   21b74:	dec00304 	addi	sp,sp,12
   21b78:	f800283a 	ret
   21b7c:	00282f80 	call	282f8 <__sinit>
   21b80:	003fee06 	br	21b3c <__alt_data_end+0xf8021b3c>
   21b84:	00bfffc4 	movi	r2,-1
   21b88:	003ff706 	br	21b68 <__alt_data_end+0xf8021b68>

00021b8c <__srget>:
   21b8c:	00810034 	movhi	r2,1024
   21b90:	1087e904 	addi	r2,r2,8100
   21b94:	200b883a 	mov	r5,r4
   21b98:	11000017 	ldw	r4,0(r2)
   21b9c:	0021b181 	jmpi	21b18 <__srget_r>

00021ba0 <_sbrk_r>:
   21ba0:	defffd04 	addi	sp,sp,-12
   21ba4:	dc000015 	stw	r16,0(sp)
   21ba8:	04010034 	movhi	r16,1024
   21bac:	dc400115 	stw	r17,4(sp)
   21bb0:	8407fa04 	addi	r16,r16,8168
   21bb4:	2023883a 	mov	r17,r4
   21bb8:	2809883a 	mov	r4,r5
   21bbc:	dfc00215 	stw	ra,8(sp)
   21bc0:	80000015 	stw	zero,0(r16)
   21bc4:	00318780 	call	31878 <sbrk>
   21bc8:	00ffffc4 	movi	r3,-1
   21bcc:	10c00526 	beq	r2,r3,21be4 <_sbrk_r+0x44>
   21bd0:	dfc00217 	ldw	ra,8(sp)
   21bd4:	dc400117 	ldw	r17,4(sp)
   21bd8:	dc000017 	ldw	r16,0(sp)
   21bdc:	dec00304 	addi	sp,sp,12
   21be0:	f800283a 	ret
   21be4:	80c00017 	ldw	r3,0(r16)
   21be8:	183ff926 	beq	r3,zero,21bd0 <__alt_data_end+0xf8021bd0>
   21bec:	88c00015 	stw	r3,0(r17)
   21bf0:	003ff706 	br	21bd0 <__alt_data_end+0xf8021bd0>

00021bf4 <__sread>:
   21bf4:	defffe04 	addi	sp,sp,-8
   21bf8:	dc000015 	stw	r16,0(sp)
   21bfc:	2821883a 	mov	r16,r5
   21c00:	2940038f 	ldh	r5,14(r5)
   21c04:	dfc00115 	stw	ra,4(sp)
   21c08:	002a3800 	call	2a380 <_read_r>
   21c0c:	10000716 	blt	r2,zero,21c2c <__sread+0x38>
   21c10:	80c01417 	ldw	r3,80(r16)
   21c14:	1887883a 	add	r3,r3,r2
   21c18:	80c01415 	stw	r3,80(r16)
   21c1c:	dfc00117 	ldw	ra,4(sp)
   21c20:	dc000017 	ldw	r16,0(sp)
   21c24:	dec00204 	addi	sp,sp,8
   21c28:	f800283a 	ret
   21c2c:	80c0030b 	ldhu	r3,12(r16)
   21c30:	18fbffcc 	andi	r3,r3,61439
   21c34:	80c0030d 	sth	r3,12(r16)
   21c38:	dfc00117 	ldw	ra,4(sp)
   21c3c:	dc000017 	ldw	r16,0(sp)
   21c40:	dec00204 	addi	sp,sp,8
   21c44:	f800283a 	ret

00021c48 <__seofread>:
   21c48:	0005883a 	mov	r2,zero
   21c4c:	f800283a 	ret

00021c50 <__swrite>:
   21c50:	2880030b 	ldhu	r2,12(r5)
   21c54:	defffb04 	addi	sp,sp,-20
   21c58:	dcc00315 	stw	r19,12(sp)
   21c5c:	dc800215 	stw	r18,8(sp)
   21c60:	dc400115 	stw	r17,4(sp)
   21c64:	dc000015 	stw	r16,0(sp)
   21c68:	dfc00415 	stw	ra,16(sp)
   21c6c:	10c0400c 	andi	r3,r2,256
   21c70:	2821883a 	mov	r16,r5
   21c74:	2023883a 	mov	r17,r4
   21c78:	3025883a 	mov	r18,r6
   21c7c:	3827883a 	mov	r19,r7
   21c80:	18000526 	beq	r3,zero,21c98 <__swrite+0x48>
   21c84:	2940038f 	ldh	r5,14(r5)
   21c88:	01c00084 	movi	r7,2
   21c8c:	000d883a 	mov	r6,zero
   21c90:	0028f9c0 	call	28f9c <_lseek_r>
   21c94:	8080030b 	ldhu	r2,12(r16)
   21c98:	8140038f 	ldh	r5,14(r16)
   21c9c:	10bbffcc 	andi	r2,r2,61439
   21ca0:	980f883a 	mov	r7,r19
   21ca4:	900d883a 	mov	r6,r18
   21ca8:	8809883a 	mov	r4,r17
   21cac:	8080030d 	sth	r2,12(r16)
   21cb0:	dfc00417 	ldw	ra,16(sp)
   21cb4:	dcc00317 	ldw	r19,12(sp)
   21cb8:	dc800217 	ldw	r18,8(sp)
   21cbc:	dc400117 	ldw	r17,4(sp)
   21cc0:	dc000017 	ldw	r16,0(sp)
   21cc4:	dec00504 	addi	sp,sp,20
   21cc8:	00262701 	jmpi	26270 <_write_r>

00021ccc <__sseek>:
   21ccc:	defffe04 	addi	sp,sp,-8
   21cd0:	dc000015 	stw	r16,0(sp)
   21cd4:	2821883a 	mov	r16,r5
   21cd8:	2940038f 	ldh	r5,14(r5)
   21cdc:	dfc00115 	stw	ra,4(sp)
   21ce0:	0028f9c0 	call	28f9c <_lseek_r>
   21ce4:	00ffffc4 	movi	r3,-1
   21ce8:	10c00826 	beq	r2,r3,21d0c <__sseek+0x40>
   21cec:	80c0030b 	ldhu	r3,12(r16)
   21cf0:	80801415 	stw	r2,80(r16)
   21cf4:	18c40014 	ori	r3,r3,4096
   21cf8:	80c0030d 	sth	r3,12(r16)
   21cfc:	dfc00117 	ldw	ra,4(sp)
   21d00:	dc000017 	ldw	r16,0(sp)
   21d04:	dec00204 	addi	sp,sp,8
   21d08:	f800283a 	ret
   21d0c:	80c0030b 	ldhu	r3,12(r16)
   21d10:	18fbffcc 	andi	r3,r3,61439
   21d14:	80c0030d 	sth	r3,12(r16)
   21d18:	dfc00117 	ldw	ra,4(sp)
   21d1c:	dc000017 	ldw	r16,0(sp)
   21d20:	dec00204 	addi	sp,sp,8
   21d24:	f800283a 	ret

00021d28 <__sclose>:
   21d28:	2940038f 	ldh	r5,14(r5)
   21d2c:	00264241 	jmpi	26424 <_close_r>

00021d30 <strlen>:
   21d30:	208000cc 	andi	r2,r4,3
   21d34:	10002026 	beq	r2,zero,21db8 <strlen+0x88>
   21d38:	20800007 	ldb	r2,0(r4)
   21d3c:	10002026 	beq	r2,zero,21dc0 <strlen+0x90>
   21d40:	2005883a 	mov	r2,r4
   21d44:	00000206 	br	21d50 <strlen+0x20>
   21d48:	10c00007 	ldb	r3,0(r2)
   21d4c:	18001826 	beq	r3,zero,21db0 <strlen+0x80>
   21d50:	10800044 	addi	r2,r2,1
   21d54:	10c000cc 	andi	r3,r2,3
   21d58:	183ffb1e 	bne	r3,zero,21d48 <__alt_data_end+0xf8021d48>
   21d5c:	10c00017 	ldw	r3,0(r2)
   21d60:	01ffbff4 	movhi	r7,65279
   21d64:	39ffbfc4 	addi	r7,r7,-257
   21d68:	00ca303a 	nor	r5,zero,r3
   21d6c:	01a02074 	movhi	r6,32897
   21d70:	19c7883a 	add	r3,r3,r7
   21d74:	31a02004 	addi	r6,r6,-32640
   21d78:	1946703a 	and	r3,r3,r5
   21d7c:	1986703a 	and	r3,r3,r6
   21d80:	1800091e 	bne	r3,zero,21da8 <strlen+0x78>
   21d84:	10800104 	addi	r2,r2,4
   21d88:	10c00017 	ldw	r3,0(r2)
   21d8c:	19cb883a 	add	r5,r3,r7
   21d90:	00c6303a 	nor	r3,zero,r3
   21d94:	28c6703a 	and	r3,r5,r3
   21d98:	1986703a 	and	r3,r3,r6
   21d9c:	183ff926 	beq	r3,zero,21d84 <__alt_data_end+0xf8021d84>
   21da0:	00000106 	br	21da8 <strlen+0x78>
   21da4:	10800044 	addi	r2,r2,1
   21da8:	10c00007 	ldb	r3,0(r2)
   21dac:	183ffd1e 	bne	r3,zero,21da4 <__alt_data_end+0xf8021da4>
   21db0:	1105c83a 	sub	r2,r2,r4
   21db4:	f800283a 	ret
   21db8:	2005883a 	mov	r2,r4
   21dbc:	003fe706 	br	21d5c <__alt_data_end+0xf8021d5c>
   21dc0:	0005883a 	mov	r2,zero
   21dc4:	f800283a 	ret

00021dc8 <___svfprintf_internal_r>:
   21dc8:	deffb704 	addi	sp,sp,-292
   21dcc:	dfc04815 	stw	ra,288(sp)
   21dd0:	ddc04615 	stw	r23,280(sp)
   21dd4:	d9402c15 	stw	r5,176(sp)
   21dd8:	d9003915 	stw	r4,228(sp)
   21ddc:	302f883a 	mov	r23,r6
   21de0:	d9c02d15 	stw	r7,180(sp)
   21de4:	df004715 	stw	fp,284(sp)
   21de8:	dd804515 	stw	r22,276(sp)
   21dec:	dd404415 	stw	r21,272(sp)
   21df0:	dd004315 	stw	r20,268(sp)
   21df4:	dcc04215 	stw	r19,264(sp)
   21df8:	dc804115 	stw	r18,260(sp)
   21dfc:	dc404015 	stw	r17,256(sp)
   21e00:	dc003f15 	stw	r16,252(sp)
   21e04:	0028f6c0 	call	28f6c <_localeconv_r>
   21e08:	10800017 	ldw	r2,0(r2)
   21e0c:	1009883a 	mov	r4,r2
   21e10:	d8803415 	stw	r2,208(sp)
   21e14:	0021d300 	call	21d30 <strlen>
   21e18:	d8c02c17 	ldw	r3,176(sp)
   21e1c:	d8803815 	stw	r2,224(sp)
   21e20:	1880030b 	ldhu	r2,12(r3)
   21e24:	1080200c 	andi	r2,r2,128
   21e28:	10000226 	beq	r2,zero,21e34 <___svfprintf_internal_r+0x6c>
   21e2c:	18800417 	ldw	r2,16(r3)
   21e30:	10067f26 	beq	r2,zero,23830 <___svfprintf_internal_r+0x1a68>
   21e34:	dcc03917 	ldw	r19,228(sp)
   21e38:	d8c00404 	addi	r3,sp,16
   21e3c:	05410034 	movhi	r21,1024
   21e40:	d9001e04 	addi	r4,sp,120
   21e44:	ad403484 	addi	r21,r21,210
   21e48:	d8c01e15 	stw	r3,120(sp)
   21e4c:	d8002015 	stw	zero,128(sp)
   21e50:	d8001f15 	stw	zero,124(sp)
   21e54:	d8003315 	stw	zero,204(sp)
   21e58:	d8003615 	stw	zero,216(sp)
   21e5c:	d8003715 	stw	zero,220(sp)
   21e60:	1811883a 	mov	r8,r3
   21e64:	d8003a15 	stw	zero,232(sp)
   21e68:	d8003b15 	stw	zero,236(sp)
   21e6c:	d8002f15 	stw	zero,188(sp)
   21e70:	d9002815 	stw	r4,160(sp)
   21e74:	b8800007 	ldb	r2,0(r23)
   21e78:	10026726 	beq	r2,zero,22818 <___svfprintf_internal_r+0xa50>
   21e7c:	00c00944 	movi	r3,37
   21e80:	b821883a 	mov	r16,r23
   21e84:	10c0021e 	bne	r2,r3,21e90 <___svfprintf_internal_r+0xc8>
   21e88:	00001406 	br	21edc <___svfprintf_internal_r+0x114>
   21e8c:	10c00326 	beq	r2,r3,21e9c <___svfprintf_internal_r+0xd4>
   21e90:	84000044 	addi	r16,r16,1
   21e94:	80800007 	ldb	r2,0(r16)
   21e98:	103ffc1e 	bne	r2,zero,21e8c <__alt_data_end+0xf8021e8c>
   21e9c:	85e3c83a 	sub	r17,r16,r23
   21ea0:	88000e26 	beq	r17,zero,21edc <___svfprintf_internal_r+0x114>
   21ea4:	d8c02017 	ldw	r3,128(sp)
   21ea8:	d8801f17 	ldw	r2,124(sp)
   21eac:	45c00015 	stw	r23,0(r8)
   21eb0:	1c47883a 	add	r3,r3,r17
   21eb4:	10800044 	addi	r2,r2,1
   21eb8:	d8c02015 	stw	r3,128(sp)
   21ebc:	44400115 	stw	r17,4(r8)
   21ec0:	d8801f15 	stw	r2,124(sp)
   21ec4:	00c001c4 	movi	r3,7
   21ec8:	18809716 	blt	r3,r2,22128 <___svfprintf_internal_r+0x360>
   21ecc:	42000204 	addi	r8,r8,8
   21ed0:	d9402f17 	ldw	r5,188(sp)
   21ed4:	2c4b883a 	add	r5,r5,r17
   21ed8:	d9402f15 	stw	r5,188(sp)
   21edc:	80800007 	ldb	r2,0(r16)
   21ee0:	10009826 	beq	r2,zero,22144 <___svfprintf_internal_r+0x37c>
   21ee4:	84400047 	ldb	r17,1(r16)
   21ee8:	00bfffc4 	movi	r2,-1
   21eec:	85c00044 	addi	r23,r16,1
   21ef0:	d8002785 	stb	zero,158(sp)
   21ef4:	0007883a 	mov	r3,zero
   21ef8:	000f883a 	mov	r7,zero
   21efc:	d8802915 	stw	r2,164(sp)
   21f00:	d8003115 	stw	zero,196(sp)
   21f04:	0025883a 	mov	r18,zero
   21f08:	01401604 	movi	r5,88
   21f0c:	01800244 	movi	r6,9
   21f10:	02800a84 	movi	r10,42
   21f14:	02401b04 	movi	r9,108
   21f18:	bdc00044 	addi	r23,r23,1
   21f1c:	88bff804 	addi	r2,r17,-32
   21f20:	2882f036 	bltu	r5,r2,22ae4 <___svfprintf_internal_r+0xd1c>
   21f24:	100490ba 	slli	r2,r2,2
   21f28:	010000b4 	movhi	r4,2
   21f2c:	2107cf04 	addi	r4,r4,7996
   21f30:	1105883a 	add	r2,r2,r4
   21f34:	10800017 	ldw	r2,0(r2)
   21f38:	1000683a 	jmp	r2
   21f3c:	00022a4c 	andi	zero,zero,2217
   21f40:	00022ae4 	muli	zero,zero,2219
   21f44:	00022ae4 	muli	zero,zero,2219
   21f48:	00022a40 	call	22a4 <__alt_mem_onchip_memory2_0-0x1dd5c>
   21f4c:	00022ae4 	muli	zero,zero,2219
   21f50:	00022ae4 	muli	zero,zero,2219
   21f54:	00022ae4 	muli	zero,zero,2219
   21f58:	00022ae4 	muli	zero,zero,2219
   21f5c:	00022ae4 	muli	zero,zero,2219
   21f60:	00022ae4 	muli	zero,zero,2219
   21f64:	000221a0 	cmpeqi	zero,zero,2182
   21f68:	0002297c 	xorhi	zero,zero,2213
   21f6c:	00022ae4 	muli	zero,zero,2219
   21f70:	000220b0 	cmpltui	zero,zero,2178
   21f74:	000221c8 	cmpgei	zero,zero,2183
   21f78:	00022ae4 	muli	zero,zero,2219
   21f7c:	0002223c 	xorhi	zero,zero,2184
   21f80:	00022208 	cmpgei	zero,zero,2184
   21f84:	00022208 	cmpgei	zero,zero,2184
   21f88:	00022208 	cmpgei	zero,zero,2184
   21f8c:	00022208 	cmpgei	zero,zero,2184
   21f90:	00022208 	cmpgei	zero,zero,2184
   21f94:	00022208 	cmpgei	zero,zero,2184
   21f98:	00022208 	cmpgei	zero,zero,2184
   21f9c:	00022208 	cmpgei	zero,zero,2184
   21fa0:	00022208 	cmpgei	zero,zero,2184
   21fa4:	00022ae4 	muli	zero,zero,2219
   21fa8:	00022ae4 	muli	zero,zero,2219
   21fac:	00022ae4 	muli	zero,zero,2219
   21fb0:	00022ae4 	muli	zero,zero,2219
   21fb4:	00022ae4 	muli	zero,zero,2219
   21fb8:	00022ae4 	muli	zero,zero,2219
   21fbc:	00022ae4 	muli	zero,zero,2219
   21fc0:	00022ae4 	muli	zero,zero,2219
   21fc4:	00022ae4 	muli	zero,zero,2219
   21fc8:	00022ae4 	muli	zero,zero,2219
   21fcc:	000222f4 	movhi	zero,2187
   21fd0:	00022248 	cmpgei	zero,zero,2185
   21fd4:	00022ae4 	muli	zero,zero,2219
   21fd8:	00022248 	cmpgei	zero,zero,2185
   21fdc:	00022ae4 	muli	zero,zero,2219
   21fe0:	00022ae4 	muli	zero,zero,2219
   21fe4:	00022ae4 	muli	zero,zero,2219
   21fe8:	00022ae4 	muli	zero,zero,2219
   21fec:	000222e8 	cmpgeui	zero,zero,2187
   21ff0:	00022ae4 	muli	zero,zero,2219
   21ff4:	00022ae4 	muli	zero,zero,2219
   21ff8:	000223b0 	cmpltui	zero,zero,2190
   21ffc:	00022ae4 	muli	zero,zero,2219
   22000:	00022ae4 	muli	zero,zero,2219
   22004:	00022ae4 	muli	zero,zero,2219
   22008:	00022ae4 	muli	zero,zero,2219
   2200c:	00022ae4 	muli	zero,zero,2219
   22010:	00022820 	cmpeqi	zero,zero,2208
   22014:	00022ae4 	muli	zero,zero,2219
   22018:	00022ae4 	muli	zero,zero,2219
   2201c:	00022880 	call	2288 <__alt_mem_onchip_memory2_0-0x1dd78>
   22020:	00022ae4 	muli	zero,zero,2219
   22024:	00022ae4 	muli	zero,zero,2219
   22028:	00022ae4 	muli	zero,zero,2219
   2202c:	00022ae4 	muli	zero,zero,2219
   22030:	00022ae4 	muli	zero,zero,2219
   22034:	00022ae4 	muli	zero,zero,2219
   22038:	00022ae4 	muli	zero,zero,2219
   2203c:	00022ae4 	muli	zero,zero,2219
   22040:	00022ae4 	muli	zero,zero,2219
   22044:	00022ae4 	muli	zero,zero,2219
   22048:	00022930 	cmpltui	zero,zero,2212
   2204c:	00022a6c 	andhi	zero,zero,2217
   22050:	00022248 	cmpgei	zero,zero,2185
   22054:	00022248 	cmpgei	zero,zero,2185
   22058:	00022248 	cmpgei	zero,zero,2185
   2205c:	00022ac0 	call	22ac <__alt_mem_onchip_memory2_0-0x1dd54>
   22060:	00022a6c 	andhi	zero,zero,2217
   22064:	00022ae4 	muli	zero,zero,2219
   22068:	00022ae4 	muli	zero,zero,2219
   2206c:	00022a7c 	xorhi	zero,zero,2217
   22070:	00022ae4 	muli	zero,zero,2219
   22074:	00022a8c 	andi	zero,zero,2218
   22078:	0002296c 	andhi	zero,zero,2213
   2207c:	000220bc 	xorhi	zero,zero,2178
   22080:	0002298c 	andi	zero,zero,2214
   22084:	00022ae4 	muli	zero,zero,2219
   22088:	00022998 	cmpnei	zero,zero,2214
   2208c:	00022ae4 	muli	zero,zero,2219
   22090:	000229f4 	movhi	zero,2215
   22094:	00022ae4 	muli	zero,zero,2219
   22098:	00022ae4 	muli	zero,zero,2219
   2209c:	00022a04 	movi	zero,2216
   220a0:	d9003117 	ldw	r4,196(sp)
   220a4:	d8802d15 	stw	r2,180(sp)
   220a8:	0109c83a 	sub	r4,zero,r4
   220ac:	d9003115 	stw	r4,196(sp)
   220b0:	94800114 	ori	r18,r18,4
   220b4:	bc400007 	ldb	r17,0(r23)
   220b8:	003f9706 	br	21f18 <__alt_data_end+0xf8021f18>
   220bc:	00800c04 	movi	r2,48
   220c0:	d9002d17 	ldw	r4,180(sp)
   220c4:	d9402917 	ldw	r5,164(sp)
   220c8:	d8802705 	stb	r2,156(sp)
   220cc:	00801e04 	movi	r2,120
   220d0:	d8802745 	stb	r2,157(sp)
   220d4:	d8002785 	stb	zero,158(sp)
   220d8:	20c00104 	addi	r3,r4,4
   220dc:	25000017 	ldw	r20,0(r4)
   220e0:	002d883a 	mov	r22,zero
   220e4:	90800094 	ori	r2,r18,2
   220e8:	28028616 	blt	r5,zero,22b04 <___svfprintf_internal_r+0xd3c>
   220ec:	00bfdfc4 	movi	r2,-129
   220f0:	90a4703a 	and	r18,r18,r2
   220f4:	d8c02d15 	stw	r3,180(sp)
   220f8:	94800094 	ori	r18,r18,2
   220fc:	a002731e 	bne	r20,zero,22acc <___svfprintf_internal_r+0xd04>
   22100:	00810034 	movhi	r2,1024
   22104:	10802d04 	addi	r2,r2,180
   22108:	d8803a15 	stw	r2,232(sp)
   2210c:	04401e04 	movi	r17,120
   22110:	d8c02917 	ldw	r3,164(sp)
   22114:	0039883a 	mov	fp,zero
   22118:	1801d526 	beq	r3,zero,22870 <___svfprintf_internal_r+0xaa8>
   2211c:	0029883a 	mov	r20,zero
   22120:	002d883a 	mov	r22,zero
   22124:	0001f106 	br	228ec <___svfprintf_internal_r+0xb24>
   22128:	d9402c17 	ldw	r5,176(sp)
   2212c:	d9801e04 	addi	r6,sp,120
   22130:	9809883a 	mov	r4,r19
   22134:	002aa940 	call	2aa94 <__ssprint_r>
   22138:	1000081e 	bne	r2,zero,2215c <___svfprintf_internal_r+0x394>
   2213c:	da000404 	addi	r8,sp,16
   22140:	003f6306 	br	21ed0 <__alt_data_end+0xf8021ed0>
   22144:	d8802017 	ldw	r2,128(sp)
   22148:	10000426 	beq	r2,zero,2215c <___svfprintf_internal_r+0x394>
   2214c:	d9402c17 	ldw	r5,176(sp)
   22150:	d9003917 	ldw	r4,228(sp)
   22154:	d9801e04 	addi	r6,sp,120
   22158:	002aa940 	call	2aa94 <__ssprint_r>
   2215c:	d8802c17 	ldw	r2,176(sp)
   22160:	10c0030b 	ldhu	r3,12(r2)
   22164:	d8802f17 	ldw	r2,188(sp)
   22168:	18c0100c 	andi	r3,r3,64
   2216c:	1805f51e 	bne	r3,zero,23944 <___svfprintf_internal_r+0x1b7c>
   22170:	dfc04817 	ldw	ra,288(sp)
   22174:	df004717 	ldw	fp,284(sp)
   22178:	ddc04617 	ldw	r23,280(sp)
   2217c:	dd804517 	ldw	r22,276(sp)
   22180:	dd404417 	ldw	r21,272(sp)
   22184:	dd004317 	ldw	r20,268(sp)
   22188:	dcc04217 	ldw	r19,264(sp)
   2218c:	dc804117 	ldw	r18,260(sp)
   22190:	dc404017 	ldw	r17,256(sp)
   22194:	dc003f17 	ldw	r16,252(sp)
   22198:	dec04904 	addi	sp,sp,292
   2219c:	f800283a 	ret
   221a0:	d8802d17 	ldw	r2,180(sp)
   221a4:	d9002d17 	ldw	r4,180(sp)
   221a8:	10800017 	ldw	r2,0(r2)
   221ac:	d8803115 	stw	r2,196(sp)
   221b0:	20800104 	addi	r2,r4,4
   221b4:	d9003117 	ldw	r4,196(sp)
   221b8:	203fb916 	blt	r4,zero,220a0 <__alt_data_end+0xf80220a0>
   221bc:	d8802d15 	stw	r2,180(sp)
   221c0:	bc400007 	ldb	r17,0(r23)
   221c4:	003f5406 	br	21f18 <__alt_data_end+0xf8021f18>
   221c8:	bc400007 	ldb	r17,0(r23)
   221cc:	bac00044 	addi	r11,r23,1
   221d0:	8a873926 	beq	r17,r10,23eb8 <___svfprintf_internal_r+0x20f0>
   221d4:	88bff404 	addi	r2,r17,-48
   221d8:	0009883a 	mov	r4,zero
   221dc:	30868836 	bltu	r6,r2,23c00 <___svfprintf_internal_r+0x1e38>
   221e0:	5c400007 	ldb	r17,0(r11)
   221e4:	210002a4 	muli	r4,r4,10
   221e8:	5dc00044 	addi	r23,r11,1
   221ec:	b817883a 	mov	r11,r23
   221f0:	2089883a 	add	r4,r4,r2
   221f4:	88bff404 	addi	r2,r17,-48
   221f8:	30bff92e 	bgeu	r6,r2,221e0 <__alt_data_end+0xf80221e0>
   221fc:	2005d716 	blt	r4,zero,2395c <___svfprintf_internal_r+0x1b94>
   22200:	d9002915 	stw	r4,164(sp)
   22204:	003f4506 	br	21f1c <__alt_data_end+0xf8021f1c>
   22208:	b809883a 	mov	r4,r23
   2220c:	d8003115 	stw	zero,196(sp)
   22210:	88bff404 	addi	r2,r17,-48
   22214:	0017883a 	mov	r11,zero
   22218:	24400007 	ldb	r17,0(r4)
   2221c:	5ac002a4 	muli	r11,r11,10
   22220:	bdc00044 	addi	r23,r23,1
   22224:	b809883a 	mov	r4,r23
   22228:	12d7883a 	add	r11,r2,r11
   2222c:	88bff404 	addi	r2,r17,-48
   22230:	30bff92e 	bgeu	r6,r2,22218 <__alt_data_end+0xf8022218>
   22234:	dac03115 	stw	r11,196(sp)
   22238:	003f3806 	br	21f1c <__alt_data_end+0xf8021f1c>
   2223c:	94802014 	ori	r18,r18,128
   22240:	bc400007 	ldb	r17,0(r23)
   22244:	003f3406 	br	21f18 <__alt_data_end+0xf8021f18>
   22248:	18c03fcc 	andi	r3,r3,255
   2224c:	1807471e 	bne	r3,zero,23f6c <___svfprintf_internal_r+0x21a4>
   22250:	9080020c 	andi	r2,r18,8
   22254:	10047d26 	beq	r2,zero,2344c <___svfprintf_internal_r+0x1684>
   22258:	d8c02d17 	ldw	r3,180(sp)
   2225c:	d9002d17 	ldw	r4,180(sp)
   22260:	d9402d17 	ldw	r5,180(sp)
   22264:	18c00017 	ldw	r3,0(r3)
   22268:	21000117 	ldw	r4,4(r4)
   2226c:	29400204 	addi	r5,r5,8
   22270:	d8c03615 	stw	r3,216(sp)
   22274:	d9003715 	stw	r4,220(sp)
   22278:	d9402d15 	stw	r5,180(sp)
   2227c:	d9003617 	ldw	r4,216(sp)
   22280:	d9403717 	ldw	r5,220(sp)
   22284:	da003e15 	stw	r8,248(sp)
   22288:	04000044 	movi	r16,1
   2228c:	002a9440 	call	2a944 <__fpclassifyd>
   22290:	da003e17 	ldw	r8,248(sp)
   22294:	14044b1e 	bne	r2,r16,233c4 <___svfprintf_internal_r+0x15fc>
   22298:	d9003617 	ldw	r4,216(sp)
   2229c:	d9403717 	ldw	r5,220(sp)
   222a0:	000d883a 	mov	r6,zero
   222a4:	000f883a 	mov	r7,zero
   222a8:	002fb540 	call	2fb54 <__ledf2>
   222ac:	da003e17 	ldw	r8,248(sp)
   222b0:	1005f316 	blt	r2,zero,23a80 <___svfprintf_internal_r+0x1cb8>
   222b4:	df002783 	ldbu	fp,158(sp)
   222b8:	008011c4 	movi	r2,71
   222bc:	1445590e 	bge	r2,r17,23824 <___svfprintf_internal_r+0x1a5c>
   222c0:	04010034 	movhi	r16,1024
   222c4:	84002504 	addi	r16,r16,148
   222c8:	00c000c4 	movi	r3,3
   222cc:	00bfdfc4 	movi	r2,-129
   222d0:	d8c02a15 	stw	r3,168(sp)
   222d4:	90a4703a 	and	r18,r18,r2
   222d8:	d8c02e15 	stw	r3,184(sp)
   222dc:	d8002915 	stw	zero,164(sp)
   222e0:	d8003215 	stw	zero,200(sp)
   222e4:	00006606 	br	22480 <___svfprintf_internal_r+0x6b8>
   222e8:	94800214 	ori	r18,r18,8
   222ec:	bc400007 	ldb	r17,0(r23)
   222f0:	003f0906 	br	21f18 <__alt_data_end+0xf8021f18>
   222f4:	18c03fcc 	andi	r3,r3,255
   222f8:	1807181e 	bne	r3,zero,23f5c <___svfprintf_internal_r+0x2194>
   222fc:	94800414 	ori	r18,r18,16
   22300:	9080080c 	andi	r2,r18,32
   22304:	10039626 	beq	r2,zero,23160 <___svfprintf_internal_r+0x1398>
   22308:	d9402d17 	ldw	r5,180(sp)
   2230c:	28800117 	ldw	r2,4(r5)
   22310:	2d000017 	ldw	r20,0(r5)
   22314:	29400204 	addi	r5,r5,8
   22318:	d9402d15 	stw	r5,180(sp)
   2231c:	102d883a 	mov	r22,r2
   22320:	10039816 	blt	r2,zero,23184 <___svfprintf_internal_r+0x13bc>
   22324:	d9402917 	ldw	r5,164(sp)
   22328:	df002783 	ldbu	fp,158(sp)
   2232c:	2803ab16 	blt	r5,zero,231dc <___svfprintf_internal_r+0x1414>
   22330:	00ffdfc4 	movi	r3,-129
   22334:	a584b03a 	or	r2,r20,r22
   22338:	90e4703a 	and	r18,r18,r3
   2233c:	10014a26 	beq	r2,zero,22868 <___svfprintf_internal_r+0xaa0>
   22340:	b0034b26 	beq	r22,zero,23070 <___svfprintf_internal_r+0x12a8>
   22344:	dc402a15 	stw	r17,168(sp)
   22348:	dc001e04 	addi	r16,sp,120
   2234c:	b023883a 	mov	r17,r22
   22350:	402d883a 	mov	r22,r8
   22354:	a009883a 	mov	r4,r20
   22358:	880b883a 	mov	r5,r17
   2235c:	01800284 	movi	r6,10
   22360:	000f883a 	mov	r7,zero
   22364:	002e1700 	call	2e170 <__umoddi3>
   22368:	10800c04 	addi	r2,r2,48
   2236c:	843fffc4 	addi	r16,r16,-1
   22370:	a009883a 	mov	r4,r20
   22374:	880b883a 	mov	r5,r17
   22378:	80800005 	stb	r2,0(r16)
   2237c:	01800284 	movi	r6,10
   22380:	000f883a 	mov	r7,zero
   22384:	002dbf80 	call	2dbf8 <__udivdi3>
   22388:	1029883a 	mov	r20,r2
   2238c:	10c4b03a 	or	r2,r2,r3
   22390:	1823883a 	mov	r17,r3
   22394:	103fef1e 	bne	r2,zero,22354 <__alt_data_end+0xf8022354>
   22398:	d8c02817 	ldw	r3,160(sp)
   2239c:	dc402a17 	ldw	r17,168(sp)
   223a0:	b011883a 	mov	r8,r22
   223a4:	1c07c83a 	sub	r3,r3,r16
   223a8:	d8c02e15 	stw	r3,184(sp)
   223ac:	00002e06 	br	22468 <___svfprintf_internal_r+0x6a0>
   223b0:	18c03fcc 	andi	r3,r3,255
   223b4:	1806e71e 	bne	r3,zero,23f54 <___svfprintf_internal_r+0x218c>
   223b8:	94800414 	ori	r18,r18,16
   223bc:	9080080c 	andi	r2,r18,32
   223c0:	1002d426 	beq	r2,zero,22f14 <___svfprintf_internal_r+0x114c>
   223c4:	d9402d17 	ldw	r5,180(sp)
   223c8:	d8c02917 	ldw	r3,164(sp)
   223cc:	d8002785 	stb	zero,158(sp)
   223d0:	28800204 	addi	r2,r5,8
   223d4:	2d000017 	ldw	r20,0(r5)
   223d8:	2d800117 	ldw	r22,4(r5)
   223dc:	18041516 	blt	r3,zero,23434 <___svfprintf_internal_r+0x166c>
   223e0:	013fdfc4 	movi	r4,-129
   223e4:	a586b03a 	or	r3,r20,r22
   223e8:	d8802d15 	stw	r2,180(sp)
   223ec:	9124703a 	and	r18,r18,r4
   223f0:	1802d51e 	bne	r3,zero,22f48 <___svfprintf_internal_r+0x1180>
   223f4:	d9402917 	ldw	r5,164(sp)
   223f8:	0039883a 	mov	fp,zero
   223fc:	2806be26 	beq	r5,zero,23ef8 <___svfprintf_internal_r+0x2130>
   22400:	0029883a 	mov	r20,zero
   22404:	002d883a 	mov	r22,zero
   22408:	dc001e04 	addi	r16,sp,120
   2240c:	a006d0fa 	srli	r3,r20,3
   22410:	b008977a 	slli	r4,r22,29
   22414:	b02cd0fa 	srli	r22,r22,3
   22418:	a50001cc 	andi	r20,r20,7
   2241c:	a0800c04 	addi	r2,r20,48
   22420:	843fffc4 	addi	r16,r16,-1
   22424:	20e8b03a 	or	r20,r4,r3
   22428:	80800005 	stb	r2,0(r16)
   2242c:	a586b03a 	or	r3,r20,r22
   22430:	183ff61e 	bne	r3,zero,2240c <__alt_data_end+0xf802240c>
   22434:	90c0004c 	andi	r3,r18,1
   22438:	18013926 	beq	r3,zero,22920 <___svfprintf_internal_r+0xb58>
   2243c:	10803fcc 	andi	r2,r2,255
   22440:	1080201c 	xori	r2,r2,128
   22444:	10bfe004 	addi	r2,r2,-128
   22448:	00c00c04 	movi	r3,48
   2244c:	10c13426 	beq	r2,r3,22920 <___svfprintf_internal_r+0xb58>
   22450:	80ffffc5 	stb	r3,-1(r16)
   22454:	d8c02817 	ldw	r3,160(sp)
   22458:	80bfffc4 	addi	r2,r16,-1
   2245c:	1021883a 	mov	r16,r2
   22460:	1887c83a 	sub	r3,r3,r2
   22464:	d8c02e15 	stw	r3,184(sp)
   22468:	d8802e17 	ldw	r2,184(sp)
   2246c:	d9002917 	ldw	r4,164(sp)
   22470:	1100010e 	bge	r2,r4,22478 <___svfprintf_internal_r+0x6b0>
   22474:	2005883a 	mov	r2,r4
   22478:	d8802a15 	stw	r2,168(sp)
   2247c:	d8003215 	stw	zero,200(sp)
   22480:	e7003fcc 	andi	fp,fp,255
   22484:	e700201c 	xori	fp,fp,128
   22488:	e73fe004 	addi	fp,fp,-128
   2248c:	e0000326 	beq	fp,zero,2249c <___svfprintf_internal_r+0x6d4>
   22490:	d8c02a17 	ldw	r3,168(sp)
   22494:	18c00044 	addi	r3,r3,1
   22498:	d8c02a15 	stw	r3,168(sp)
   2249c:	90c0008c 	andi	r3,r18,2
   224a0:	d8c02b15 	stw	r3,172(sp)
   224a4:	18000326 	beq	r3,zero,224b4 <___svfprintf_internal_r+0x6ec>
   224a8:	d8c02a17 	ldw	r3,168(sp)
   224ac:	18c00084 	addi	r3,r3,2
   224b0:	d8c02a15 	stw	r3,168(sp)
   224b4:	90c0210c 	andi	r3,r18,132
   224b8:	d8c03015 	stw	r3,192(sp)
   224bc:	1801a11e 	bne	r3,zero,22b44 <___svfprintf_internal_r+0xd7c>
   224c0:	d9003117 	ldw	r4,196(sp)
   224c4:	d8c02a17 	ldw	r3,168(sp)
   224c8:	20e9c83a 	sub	r20,r4,r3
   224cc:	05019d0e 	bge	zero,r20,22b44 <___svfprintf_internal_r+0xd7c>
   224d0:	02400404 	movi	r9,16
   224d4:	d8c02017 	ldw	r3,128(sp)
   224d8:	d8801f17 	ldw	r2,124(sp)
   224dc:	4d051b0e 	bge	r9,r20,2394c <___svfprintf_internal_r+0x1b84>
   224e0:	01410034 	movhi	r5,1024
   224e4:	29403884 	addi	r5,r5,226
   224e8:	dc403c15 	stw	r17,240(sp)
   224ec:	d9403515 	stw	r5,212(sp)
   224f0:	a023883a 	mov	r17,r20
   224f4:	482d883a 	mov	r22,r9
   224f8:	9029883a 	mov	r20,r18
   224fc:	070001c4 	movi	fp,7
   22500:	8025883a 	mov	r18,r16
   22504:	dc002c17 	ldw	r16,176(sp)
   22508:	00000306 	br	22518 <___svfprintf_internal_r+0x750>
   2250c:	8c7ffc04 	addi	r17,r17,-16
   22510:	42000204 	addi	r8,r8,8
   22514:	b440130e 	bge	r22,r17,22564 <___svfprintf_internal_r+0x79c>
   22518:	01010034 	movhi	r4,1024
   2251c:	18c00404 	addi	r3,r3,16
   22520:	10800044 	addi	r2,r2,1
   22524:	21003884 	addi	r4,r4,226
   22528:	41000015 	stw	r4,0(r8)
   2252c:	45800115 	stw	r22,4(r8)
   22530:	d8c02015 	stw	r3,128(sp)
   22534:	d8801f15 	stw	r2,124(sp)
   22538:	e0bff40e 	bge	fp,r2,2250c <__alt_data_end+0xf802250c>
   2253c:	d9801e04 	addi	r6,sp,120
   22540:	800b883a 	mov	r5,r16
   22544:	9809883a 	mov	r4,r19
   22548:	002aa940 	call	2aa94 <__ssprint_r>
   2254c:	103f031e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22550:	8c7ffc04 	addi	r17,r17,-16
   22554:	d8c02017 	ldw	r3,128(sp)
   22558:	d8801f17 	ldw	r2,124(sp)
   2255c:	da000404 	addi	r8,sp,16
   22560:	b47fed16 	blt	r22,r17,22518 <__alt_data_end+0xf8022518>
   22564:	9021883a 	mov	r16,r18
   22568:	a025883a 	mov	r18,r20
   2256c:	8829883a 	mov	r20,r17
   22570:	dc403c17 	ldw	r17,240(sp)
   22574:	d9403517 	ldw	r5,212(sp)
   22578:	a0c7883a 	add	r3,r20,r3
   2257c:	10800044 	addi	r2,r2,1
   22580:	41400015 	stw	r5,0(r8)
   22584:	45000115 	stw	r20,4(r8)
   22588:	d8c02015 	stw	r3,128(sp)
   2258c:	d8801f15 	stw	r2,124(sp)
   22590:	010001c4 	movi	r4,7
   22594:	20829f16 	blt	r4,r2,23014 <___svfprintf_internal_r+0x124c>
   22598:	df002787 	ldb	fp,158(sp)
   2259c:	42000204 	addi	r8,r8,8
   225a0:	e0000c26 	beq	fp,zero,225d4 <___svfprintf_internal_r+0x80c>
   225a4:	d8801f17 	ldw	r2,124(sp)
   225a8:	d9002784 	addi	r4,sp,158
   225ac:	18c00044 	addi	r3,r3,1
   225b0:	10800044 	addi	r2,r2,1
   225b4:	41000015 	stw	r4,0(r8)
   225b8:	01000044 	movi	r4,1
   225bc:	41000115 	stw	r4,4(r8)
   225c0:	d8c02015 	stw	r3,128(sp)
   225c4:	d8801f15 	stw	r2,124(sp)
   225c8:	010001c4 	movi	r4,7
   225cc:	20823816 	blt	r4,r2,22eb0 <___svfprintf_internal_r+0x10e8>
   225d0:	42000204 	addi	r8,r8,8
   225d4:	d8802b17 	ldw	r2,172(sp)
   225d8:	10000c26 	beq	r2,zero,2260c <___svfprintf_internal_r+0x844>
   225dc:	d8801f17 	ldw	r2,124(sp)
   225e0:	d9002704 	addi	r4,sp,156
   225e4:	18c00084 	addi	r3,r3,2
   225e8:	10800044 	addi	r2,r2,1
   225ec:	41000015 	stw	r4,0(r8)
   225f0:	01000084 	movi	r4,2
   225f4:	41000115 	stw	r4,4(r8)
   225f8:	d8c02015 	stw	r3,128(sp)
   225fc:	d8801f15 	stw	r2,124(sp)
   22600:	010001c4 	movi	r4,7
   22604:	20823216 	blt	r4,r2,22ed0 <___svfprintf_internal_r+0x1108>
   22608:	42000204 	addi	r8,r8,8
   2260c:	d9003017 	ldw	r4,192(sp)
   22610:	00802004 	movi	r2,128
   22614:	20819726 	beq	r4,r2,22c74 <___svfprintf_internal_r+0xeac>
   22618:	d9402917 	ldw	r5,164(sp)
   2261c:	d8802e17 	ldw	r2,184(sp)
   22620:	28adc83a 	sub	r22,r5,r2
   22624:	05802f0e 	bge	zero,r22,226e4 <___svfprintf_internal_r+0x91c>
   22628:	07000404 	movi	fp,16
   2262c:	d8801f17 	ldw	r2,124(sp)
   22630:	e583c00e 	bge	fp,r22,23534 <___svfprintf_internal_r+0x176c>
   22634:	01410034 	movhi	r5,1024
   22638:	29403484 	addi	r5,r5,210
   2263c:	dc402915 	stw	r17,164(sp)
   22640:	d9402b15 	stw	r5,172(sp)
   22644:	b023883a 	mov	r17,r22
   22648:	050001c4 	movi	r20,7
   2264c:	902d883a 	mov	r22,r18
   22650:	8025883a 	mov	r18,r16
   22654:	dc002c17 	ldw	r16,176(sp)
   22658:	00000306 	br	22668 <___svfprintf_internal_r+0x8a0>
   2265c:	8c7ffc04 	addi	r17,r17,-16
   22660:	42000204 	addi	r8,r8,8
   22664:	e440110e 	bge	fp,r17,226ac <___svfprintf_internal_r+0x8e4>
   22668:	18c00404 	addi	r3,r3,16
   2266c:	10800044 	addi	r2,r2,1
   22670:	45400015 	stw	r21,0(r8)
   22674:	47000115 	stw	fp,4(r8)
   22678:	d8c02015 	stw	r3,128(sp)
   2267c:	d8801f15 	stw	r2,124(sp)
   22680:	a0bff60e 	bge	r20,r2,2265c <__alt_data_end+0xf802265c>
   22684:	d9801e04 	addi	r6,sp,120
   22688:	800b883a 	mov	r5,r16
   2268c:	9809883a 	mov	r4,r19
   22690:	002aa940 	call	2aa94 <__ssprint_r>
   22694:	103eb11e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22698:	8c7ffc04 	addi	r17,r17,-16
   2269c:	d8c02017 	ldw	r3,128(sp)
   226a0:	d8801f17 	ldw	r2,124(sp)
   226a4:	da000404 	addi	r8,sp,16
   226a8:	e47fef16 	blt	fp,r17,22668 <__alt_data_end+0xf8022668>
   226ac:	9021883a 	mov	r16,r18
   226b0:	b025883a 	mov	r18,r22
   226b4:	882d883a 	mov	r22,r17
   226b8:	dc402917 	ldw	r17,164(sp)
   226bc:	d9002b17 	ldw	r4,172(sp)
   226c0:	1d87883a 	add	r3,r3,r22
   226c4:	10800044 	addi	r2,r2,1
   226c8:	41000015 	stw	r4,0(r8)
   226cc:	45800115 	stw	r22,4(r8)
   226d0:	d8c02015 	stw	r3,128(sp)
   226d4:	d8801f15 	stw	r2,124(sp)
   226d8:	010001c4 	movi	r4,7
   226dc:	2081ec16 	blt	r4,r2,22e90 <___svfprintf_internal_r+0x10c8>
   226e0:	42000204 	addi	r8,r8,8
   226e4:	9080400c 	andi	r2,r18,256
   226e8:	1001181e 	bne	r2,zero,22b4c <___svfprintf_internal_r+0xd84>
   226ec:	d9402e17 	ldw	r5,184(sp)
   226f0:	d8801f17 	ldw	r2,124(sp)
   226f4:	44000015 	stw	r16,0(r8)
   226f8:	1947883a 	add	r3,r3,r5
   226fc:	10800044 	addi	r2,r2,1
   22700:	41400115 	stw	r5,4(r8)
   22704:	d8c02015 	stw	r3,128(sp)
   22708:	d8801f15 	stw	r2,124(sp)
   2270c:	010001c4 	movi	r4,7
   22710:	2081d116 	blt	r4,r2,22e58 <___svfprintf_internal_r+0x1090>
   22714:	42000204 	addi	r8,r8,8
   22718:	9480010c 	andi	r18,r18,4
   2271c:	90003226 	beq	r18,zero,227e8 <___svfprintf_internal_r+0xa20>
   22720:	d9403117 	ldw	r5,196(sp)
   22724:	d8802a17 	ldw	r2,168(sp)
   22728:	28a1c83a 	sub	r16,r5,r2
   2272c:	04002e0e 	bge	zero,r16,227e8 <___svfprintf_internal_r+0xa20>
   22730:	04400404 	movi	r17,16
   22734:	d8801f17 	ldw	r2,124(sp)
   22738:	8c04b90e 	bge	r17,r16,23a20 <___svfprintf_internal_r+0x1c58>
   2273c:	01410034 	movhi	r5,1024
   22740:	29403884 	addi	r5,r5,226
   22744:	d9403515 	stw	r5,212(sp)
   22748:	048001c4 	movi	r18,7
   2274c:	dd002c17 	ldw	r20,176(sp)
   22750:	00000306 	br	22760 <___svfprintf_internal_r+0x998>
   22754:	843ffc04 	addi	r16,r16,-16
   22758:	42000204 	addi	r8,r8,8
   2275c:	8c00130e 	bge	r17,r16,227ac <___svfprintf_internal_r+0x9e4>
   22760:	01010034 	movhi	r4,1024
   22764:	18c00404 	addi	r3,r3,16
   22768:	10800044 	addi	r2,r2,1
   2276c:	21003884 	addi	r4,r4,226
   22770:	41000015 	stw	r4,0(r8)
   22774:	44400115 	stw	r17,4(r8)
   22778:	d8c02015 	stw	r3,128(sp)
   2277c:	d8801f15 	stw	r2,124(sp)
   22780:	90bff40e 	bge	r18,r2,22754 <__alt_data_end+0xf8022754>
   22784:	d9801e04 	addi	r6,sp,120
   22788:	a00b883a 	mov	r5,r20
   2278c:	9809883a 	mov	r4,r19
   22790:	002aa940 	call	2aa94 <__ssprint_r>
   22794:	103e711e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22798:	843ffc04 	addi	r16,r16,-16
   2279c:	d8c02017 	ldw	r3,128(sp)
   227a0:	d8801f17 	ldw	r2,124(sp)
   227a4:	da000404 	addi	r8,sp,16
   227a8:	8c3fed16 	blt	r17,r16,22760 <__alt_data_end+0xf8022760>
   227ac:	d9403517 	ldw	r5,212(sp)
   227b0:	1c07883a 	add	r3,r3,r16
   227b4:	10800044 	addi	r2,r2,1
   227b8:	41400015 	stw	r5,0(r8)
   227bc:	44000115 	stw	r16,4(r8)
   227c0:	d8c02015 	stw	r3,128(sp)
   227c4:	d8801f15 	stw	r2,124(sp)
   227c8:	010001c4 	movi	r4,7
   227cc:	2080060e 	bge	r4,r2,227e8 <___svfprintf_internal_r+0xa20>
   227d0:	d9402c17 	ldw	r5,176(sp)
   227d4:	d9801e04 	addi	r6,sp,120
   227d8:	9809883a 	mov	r4,r19
   227dc:	002aa940 	call	2aa94 <__ssprint_r>
   227e0:	103e5e1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   227e4:	d8c02017 	ldw	r3,128(sp)
   227e8:	d8803117 	ldw	r2,196(sp)
   227ec:	d9002a17 	ldw	r4,168(sp)
   227f0:	1100010e 	bge	r2,r4,227f8 <___svfprintf_internal_r+0xa30>
   227f4:	2005883a 	mov	r2,r4
   227f8:	d9402f17 	ldw	r5,188(sp)
   227fc:	288b883a 	add	r5,r5,r2
   22800:	d9402f15 	stw	r5,188(sp)
   22804:	18019c1e 	bne	r3,zero,22e78 <___svfprintf_internal_r+0x10b0>
   22808:	b8800007 	ldb	r2,0(r23)
   2280c:	d8001f15 	stw	zero,124(sp)
   22810:	da000404 	addi	r8,sp,16
   22814:	103d991e 	bne	r2,zero,21e7c <__alt_data_end+0xf8021e7c>
   22818:	b821883a 	mov	r16,r23
   2281c:	003daf06 	br	21edc <__alt_data_end+0xf8021edc>
   22820:	18c03fcc 	andi	r3,r3,255
   22824:	1805c71e 	bne	r3,zero,23f44 <___svfprintf_internal_r+0x217c>
   22828:	94800414 	ori	r18,r18,16
   2282c:	9080080c 	andi	r2,r18,32
   22830:	10020126 	beq	r2,zero,23038 <___svfprintf_internal_r+0x1270>
   22834:	d8802d17 	ldw	r2,180(sp)
   22838:	d9002917 	ldw	r4,164(sp)
   2283c:	d8002785 	stb	zero,158(sp)
   22840:	10c00204 	addi	r3,r2,8
   22844:	15000017 	ldw	r20,0(r2)
   22848:	15800117 	ldw	r22,4(r2)
   2284c:	20038e16 	blt	r4,zero,23688 <___svfprintf_internal_r+0x18c0>
   22850:	013fdfc4 	movi	r4,-129
   22854:	a584b03a 	or	r2,r20,r22
   22858:	d8c02d15 	stw	r3,180(sp)
   2285c:	9124703a 	and	r18,r18,r4
   22860:	0039883a 	mov	fp,zero
   22864:	103eb61e 	bne	r2,zero,22340 <__alt_data_end+0xf8022340>
   22868:	d8802917 	ldw	r2,164(sp)
   2286c:	1002c81e 	bne	r2,zero,23390 <___svfprintf_internal_r+0x15c8>
   22870:	d8002915 	stw	zero,164(sp)
   22874:	d8002e15 	stw	zero,184(sp)
   22878:	dc001e04 	addi	r16,sp,120
   2287c:	003efa06 	br	22468 <__alt_data_end+0xf8022468>
   22880:	18c03fcc 	andi	r3,r3,255
   22884:	1805ad1e 	bne	r3,zero,23f3c <___svfprintf_internal_r+0x2174>
   22888:	01410034 	movhi	r5,1024
   2288c:	29402804 	addi	r5,r5,160
   22890:	d9403a15 	stw	r5,232(sp)
   22894:	9080080c 	andi	r2,r18,32
   22898:	10006126 	beq	r2,zero,22a20 <___svfprintf_internal_r+0xc58>
   2289c:	d8802d17 	ldw	r2,180(sp)
   228a0:	15000017 	ldw	r20,0(r2)
   228a4:	15800117 	ldw	r22,4(r2)
   228a8:	10800204 	addi	r2,r2,8
   228ac:	d8802d15 	stw	r2,180(sp)
   228b0:	9080004c 	andi	r2,r18,1
   228b4:	10018e26 	beq	r2,zero,22ef0 <___svfprintf_internal_r+0x1128>
   228b8:	a584b03a 	or	r2,r20,r22
   228bc:	10030926 	beq	r2,zero,234e4 <___svfprintf_internal_r+0x171c>
   228c0:	d8c02917 	ldw	r3,164(sp)
   228c4:	00800c04 	movi	r2,48
   228c8:	d8802705 	stb	r2,156(sp)
   228cc:	dc402745 	stb	r17,157(sp)
   228d0:	d8002785 	stb	zero,158(sp)
   228d4:	90800094 	ori	r2,r18,2
   228d8:	18048716 	blt	r3,zero,23af8 <___svfprintf_internal_r+0x1d30>
   228dc:	00bfdfc4 	movi	r2,-129
   228e0:	90a4703a 	and	r18,r18,r2
   228e4:	94800094 	ori	r18,r18,2
   228e8:	0039883a 	mov	fp,zero
   228ec:	d9003a17 	ldw	r4,232(sp)
   228f0:	dc001e04 	addi	r16,sp,120
   228f4:	a08003cc 	andi	r2,r20,15
   228f8:	b006973a 	slli	r3,r22,28
   228fc:	2085883a 	add	r2,r4,r2
   22900:	a028d13a 	srli	r20,r20,4
   22904:	10800003 	ldbu	r2,0(r2)
   22908:	b02cd13a 	srli	r22,r22,4
   2290c:	843fffc4 	addi	r16,r16,-1
   22910:	1d28b03a 	or	r20,r3,r20
   22914:	80800005 	stb	r2,0(r16)
   22918:	a584b03a 	or	r2,r20,r22
   2291c:	103ff51e 	bne	r2,zero,228f4 <__alt_data_end+0xf80228f4>
   22920:	d8c02817 	ldw	r3,160(sp)
   22924:	1c07c83a 	sub	r3,r3,r16
   22928:	d8c02e15 	stw	r3,184(sp)
   2292c:	003ece06 	br	22468 <__alt_data_end+0xf8022468>
   22930:	d8c02d17 	ldw	r3,180(sp)
   22934:	d9002d17 	ldw	r4,180(sp)
   22938:	d8002785 	stb	zero,158(sp)
   2293c:	18800017 	ldw	r2,0(r3)
   22940:	21000104 	addi	r4,r4,4
   22944:	00c00044 	movi	r3,1
   22948:	d8c02a15 	stw	r3,168(sp)
   2294c:	d8801405 	stb	r2,80(sp)
   22950:	d9002d15 	stw	r4,180(sp)
   22954:	d8c02e15 	stw	r3,184(sp)
   22958:	d8002915 	stw	zero,164(sp)
   2295c:	d8003215 	stw	zero,200(sp)
   22960:	dc001404 	addi	r16,sp,80
   22964:	0039883a 	mov	fp,zero
   22968:	003ecc06 	br	2249c <__alt_data_end+0xf802249c>
   2296c:	18c03fcc 	andi	r3,r3,255
   22970:	183e9226 	beq	r3,zero,223bc <__alt_data_end+0xf80223bc>
   22974:	d9c02785 	stb	r7,158(sp)
   22978:	003e9006 	br	223bc <__alt_data_end+0xf80223bc>
   2297c:	00c00044 	movi	r3,1
   22980:	01c00ac4 	movi	r7,43
   22984:	bc400007 	ldb	r17,0(r23)
   22988:	003d6306 	br	21f18 <__alt_data_end+0xf8021f18>
   2298c:	94800814 	ori	r18,r18,32
   22990:	bc400007 	ldb	r17,0(r23)
   22994:	003d6006 	br	21f18 <__alt_data_end+0xf8021f18>
   22998:	d8c02d17 	ldw	r3,180(sp)
   2299c:	d8002785 	stb	zero,158(sp)
   229a0:	1c000017 	ldw	r16,0(r3)
   229a4:	1d000104 	addi	r20,r3,4
   229a8:	80040f26 	beq	r16,zero,239e8 <___svfprintf_internal_r+0x1c20>
   229ac:	d9002917 	ldw	r4,164(sp)
   229b0:	2003dc16 	blt	r4,zero,23924 <___svfprintf_internal_r+0x1b5c>
   229b4:	200d883a 	mov	r6,r4
   229b8:	000b883a 	mov	r5,zero
   229bc:	8009883a 	mov	r4,r16
   229c0:	da003e15 	stw	r8,248(sp)
   229c4:	0028ffc0 	call	28ffc <memchr>
   229c8:	da003e17 	ldw	r8,248(sp)
   229cc:	10045826 	beq	r2,zero,23b30 <___svfprintf_internal_r+0x1d68>
   229d0:	1405c83a 	sub	r2,r2,r16
   229d4:	d8802e15 	stw	r2,184(sp)
   229d8:	1003d816 	blt	r2,zero,2393c <___svfprintf_internal_r+0x1b74>
   229dc:	df002783 	ldbu	fp,158(sp)
   229e0:	d8802a15 	stw	r2,168(sp)
   229e4:	dd002d15 	stw	r20,180(sp)
   229e8:	d8002915 	stw	zero,164(sp)
   229ec:	d8003215 	stw	zero,200(sp)
   229f0:	003ea306 	br	22480 <__alt_data_end+0xf8022480>
   229f4:	18c03fcc 	andi	r3,r3,255
   229f8:	183f8c26 	beq	r3,zero,2282c <__alt_data_end+0xf802282c>
   229fc:	d9c02785 	stb	r7,158(sp)
   22a00:	003f8a06 	br	2282c <__alt_data_end+0xf802282c>
   22a04:	18c03fcc 	andi	r3,r3,255
   22a08:	1805631e 	bne	r3,zero,23f98 <___svfprintf_internal_r+0x21d0>
   22a0c:	01410034 	movhi	r5,1024
   22a10:	29402d04 	addi	r5,r5,180
   22a14:	d9403a15 	stw	r5,232(sp)
   22a18:	9080080c 	andi	r2,r18,32
   22a1c:	103f9f1e 	bne	r2,zero,2289c <__alt_data_end+0xf802289c>
   22a20:	9080040c 	andi	r2,r18,16
   22a24:	10029c26 	beq	r2,zero,23498 <___svfprintf_internal_r+0x16d0>
   22a28:	d8c02d17 	ldw	r3,180(sp)
   22a2c:	002d883a 	mov	r22,zero
   22a30:	1d000017 	ldw	r20,0(r3)
   22a34:	18c00104 	addi	r3,r3,4
   22a38:	d8c02d15 	stw	r3,180(sp)
   22a3c:	003f9c06 	br	228b0 <__alt_data_end+0xf80228b0>
   22a40:	94800054 	ori	r18,r18,1
   22a44:	bc400007 	ldb	r17,0(r23)
   22a48:	003d3306 	br	21f18 <__alt_data_end+0xf8021f18>
   22a4c:	38803fcc 	andi	r2,r7,255
   22a50:	1080201c 	xori	r2,r2,128
   22a54:	10bfe004 	addi	r2,r2,-128
   22a58:	1002971e 	bne	r2,zero,234b8 <___svfprintf_internal_r+0x16f0>
   22a5c:	00c00044 	movi	r3,1
   22a60:	01c00804 	movi	r7,32
   22a64:	bc400007 	ldb	r17,0(r23)
   22a68:	003d2b06 	br	21f18 <__alt_data_end+0xf8021f18>
   22a6c:	18c03fcc 	andi	r3,r3,255
   22a70:	183e2326 	beq	r3,zero,22300 <__alt_data_end+0xf8022300>
   22a74:	d9c02785 	stb	r7,158(sp)
   22a78:	003e2106 	br	22300 <__alt_data_end+0xf8022300>
   22a7c:	bc400007 	ldb	r17,0(r23)
   22a80:	8a430426 	beq	r17,r9,23694 <___svfprintf_internal_r+0x18cc>
   22a84:	94800414 	ori	r18,r18,16
   22a88:	003d2306 	br	21f18 <__alt_data_end+0xf8021f18>
   22a8c:	18c03fcc 	andi	r3,r3,255
   22a90:	18053f1e 	bne	r3,zero,23f90 <___svfprintf_internal_r+0x21c8>
   22a94:	9080080c 	andi	r2,r18,32
   22a98:	10028926 	beq	r2,zero,234c0 <___svfprintf_internal_r+0x16f8>
   22a9c:	d9402d17 	ldw	r5,180(sp)
   22aa0:	d9002f17 	ldw	r4,188(sp)
   22aa4:	28800017 	ldw	r2,0(r5)
   22aa8:	2007d7fa 	srai	r3,r4,31
   22aac:	29400104 	addi	r5,r5,4
   22ab0:	d9402d15 	stw	r5,180(sp)
   22ab4:	11000015 	stw	r4,0(r2)
   22ab8:	10c00115 	stw	r3,4(r2)
   22abc:	003ced06 	br	21e74 <__alt_data_end+0xf8021e74>
   22ac0:	94801014 	ori	r18,r18,64
   22ac4:	bc400007 	ldb	r17,0(r23)
   22ac8:	003d1306 	br	21f18 <__alt_data_end+0xf8021f18>
   22acc:	01010034 	movhi	r4,1024
   22ad0:	21002d04 	addi	r4,r4,180
   22ad4:	0039883a 	mov	fp,zero
   22ad8:	d9003a15 	stw	r4,232(sp)
   22adc:	04401e04 	movi	r17,120
   22ae0:	003f8206 	br	228ec <__alt_data_end+0xf80228ec>
   22ae4:	18c03fcc 	andi	r3,r3,255
   22ae8:	1805221e 	bne	r3,zero,23f74 <___svfprintf_internal_r+0x21ac>
   22aec:	883d9526 	beq	r17,zero,22144 <__alt_data_end+0xf8022144>
   22af0:	00c00044 	movi	r3,1
   22af4:	d8c02a15 	stw	r3,168(sp)
   22af8:	dc401405 	stb	r17,80(sp)
   22afc:	d8002785 	stb	zero,158(sp)
   22b00:	003f9406 	br	22954 <__alt_data_end+0xf8022954>
   22b04:	01010034 	movhi	r4,1024
   22b08:	21002d04 	addi	r4,r4,180
   22b0c:	d9003a15 	stw	r4,232(sp)
   22b10:	d8c02d15 	stw	r3,180(sp)
   22b14:	1025883a 	mov	r18,r2
   22b18:	04401e04 	movi	r17,120
   22b1c:	a584b03a 	or	r2,r20,r22
   22b20:	1000fa1e 	bne	r2,zero,22f0c <___svfprintf_internal_r+0x1144>
   22b24:	0039883a 	mov	fp,zero
   22b28:	00800084 	movi	r2,2
   22b2c:	10803fcc 	andi	r2,r2,255
   22b30:	00c00044 	movi	r3,1
   22b34:	10c21626 	beq	r2,r3,23390 <___svfprintf_internal_r+0x15c8>
   22b38:	00c00084 	movi	r3,2
   22b3c:	10fe301e 	bne	r2,r3,22400 <__alt_data_end+0xf8022400>
   22b40:	003d7606 	br	2211c <__alt_data_end+0xf802211c>
   22b44:	d8c02017 	ldw	r3,128(sp)
   22b48:	003e9506 	br	225a0 <__alt_data_end+0xf80225a0>
   22b4c:	00801944 	movi	r2,101
   22b50:	14407c0e 	bge	r2,r17,22d44 <___svfprintf_internal_r+0xf7c>
   22b54:	d9003617 	ldw	r4,216(sp)
   22b58:	d9403717 	ldw	r5,220(sp)
   22b5c:	000d883a 	mov	r6,zero
   22b60:	000f883a 	mov	r7,zero
   22b64:	d8c03d15 	stw	r3,244(sp)
   22b68:	da003e15 	stw	r8,248(sp)
   22b6c:	002f9f00 	call	2f9f0 <__eqdf2>
   22b70:	d8c03d17 	ldw	r3,244(sp)
   22b74:	da003e17 	ldw	r8,248(sp)
   22b78:	1000f51e 	bne	r2,zero,22f50 <___svfprintf_internal_r+0x1188>
   22b7c:	d8801f17 	ldw	r2,124(sp)
   22b80:	01010034 	movhi	r4,1024
   22b84:	21003404 	addi	r4,r4,208
   22b88:	18c00044 	addi	r3,r3,1
   22b8c:	10800044 	addi	r2,r2,1
   22b90:	41000015 	stw	r4,0(r8)
   22b94:	01000044 	movi	r4,1
   22b98:	41000115 	stw	r4,4(r8)
   22b9c:	d8c02015 	stw	r3,128(sp)
   22ba0:	d8801f15 	stw	r2,124(sp)
   22ba4:	010001c4 	movi	r4,7
   22ba8:	20826616 	blt	r4,r2,23544 <___svfprintf_internal_r+0x177c>
   22bac:	42000204 	addi	r8,r8,8
   22bb0:	d8802617 	ldw	r2,152(sp)
   22bb4:	d9403317 	ldw	r5,204(sp)
   22bb8:	11400216 	blt	r2,r5,22bc4 <___svfprintf_internal_r+0xdfc>
   22bbc:	9080004c 	andi	r2,r18,1
   22bc0:	103ed526 	beq	r2,zero,22718 <__alt_data_end+0xf8022718>
   22bc4:	d8803817 	ldw	r2,224(sp)
   22bc8:	d9003417 	ldw	r4,208(sp)
   22bcc:	d9403817 	ldw	r5,224(sp)
   22bd0:	1887883a 	add	r3,r3,r2
   22bd4:	d8801f17 	ldw	r2,124(sp)
   22bd8:	41000015 	stw	r4,0(r8)
   22bdc:	41400115 	stw	r5,4(r8)
   22be0:	10800044 	addi	r2,r2,1
   22be4:	d8c02015 	stw	r3,128(sp)
   22be8:	d8801f15 	stw	r2,124(sp)
   22bec:	010001c4 	movi	r4,7
   22bf0:	2082af16 	blt	r4,r2,236b0 <___svfprintf_internal_r+0x18e8>
   22bf4:	42000204 	addi	r8,r8,8
   22bf8:	d8803317 	ldw	r2,204(sp)
   22bfc:	143fffc4 	addi	r16,r2,-1
   22c00:	043ec50e 	bge	zero,r16,22718 <__alt_data_end+0xf8022718>
   22c04:	04400404 	movi	r17,16
   22c08:	d8801f17 	ldw	r2,124(sp)
   22c0c:	8c00860e 	bge	r17,r16,22e28 <___svfprintf_internal_r+0x1060>
   22c10:	01410034 	movhi	r5,1024
   22c14:	29403484 	addi	r5,r5,210
   22c18:	d9402b15 	stw	r5,172(sp)
   22c1c:	058001c4 	movi	r22,7
   22c20:	dd002c17 	ldw	r20,176(sp)
   22c24:	00000306 	br	22c34 <___svfprintf_internal_r+0xe6c>
   22c28:	42000204 	addi	r8,r8,8
   22c2c:	843ffc04 	addi	r16,r16,-16
   22c30:	8c00800e 	bge	r17,r16,22e34 <___svfprintf_internal_r+0x106c>
   22c34:	18c00404 	addi	r3,r3,16
   22c38:	10800044 	addi	r2,r2,1
   22c3c:	45400015 	stw	r21,0(r8)
   22c40:	44400115 	stw	r17,4(r8)
   22c44:	d8c02015 	stw	r3,128(sp)
   22c48:	d8801f15 	stw	r2,124(sp)
   22c4c:	b0bff60e 	bge	r22,r2,22c28 <__alt_data_end+0xf8022c28>
   22c50:	d9801e04 	addi	r6,sp,120
   22c54:	a00b883a 	mov	r5,r20
   22c58:	9809883a 	mov	r4,r19
   22c5c:	002aa940 	call	2aa94 <__ssprint_r>
   22c60:	103d3e1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22c64:	d8c02017 	ldw	r3,128(sp)
   22c68:	d8801f17 	ldw	r2,124(sp)
   22c6c:	da000404 	addi	r8,sp,16
   22c70:	003fee06 	br	22c2c <__alt_data_end+0xf8022c2c>
   22c74:	d9403117 	ldw	r5,196(sp)
   22c78:	d8802a17 	ldw	r2,168(sp)
   22c7c:	28adc83a 	sub	r22,r5,r2
   22c80:	05be650e 	bge	zero,r22,22618 <__alt_data_end+0xf8022618>
   22c84:	07000404 	movi	fp,16
   22c88:	d8801f17 	ldw	r2,124(sp)
   22c8c:	e583a20e 	bge	fp,r22,23b18 <___svfprintf_internal_r+0x1d50>
   22c90:	01410034 	movhi	r5,1024
   22c94:	29403484 	addi	r5,r5,210
   22c98:	dc403015 	stw	r17,192(sp)
   22c9c:	d9402b15 	stw	r5,172(sp)
   22ca0:	b023883a 	mov	r17,r22
   22ca4:	050001c4 	movi	r20,7
   22ca8:	902d883a 	mov	r22,r18
   22cac:	8025883a 	mov	r18,r16
   22cb0:	dc002c17 	ldw	r16,176(sp)
   22cb4:	00000306 	br	22cc4 <___svfprintf_internal_r+0xefc>
   22cb8:	8c7ffc04 	addi	r17,r17,-16
   22cbc:	42000204 	addi	r8,r8,8
   22cc0:	e440110e 	bge	fp,r17,22d08 <___svfprintf_internal_r+0xf40>
   22cc4:	18c00404 	addi	r3,r3,16
   22cc8:	10800044 	addi	r2,r2,1
   22ccc:	45400015 	stw	r21,0(r8)
   22cd0:	47000115 	stw	fp,4(r8)
   22cd4:	d8c02015 	stw	r3,128(sp)
   22cd8:	d8801f15 	stw	r2,124(sp)
   22cdc:	a0bff60e 	bge	r20,r2,22cb8 <__alt_data_end+0xf8022cb8>
   22ce0:	d9801e04 	addi	r6,sp,120
   22ce4:	800b883a 	mov	r5,r16
   22ce8:	9809883a 	mov	r4,r19
   22cec:	002aa940 	call	2aa94 <__ssprint_r>
   22cf0:	103d1a1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22cf4:	8c7ffc04 	addi	r17,r17,-16
   22cf8:	d8c02017 	ldw	r3,128(sp)
   22cfc:	d8801f17 	ldw	r2,124(sp)
   22d00:	da000404 	addi	r8,sp,16
   22d04:	e47fef16 	blt	fp,r17,22cc4 <__alt_data_end+0xf8022cc4>
   22d08:	9021883a 	mov	r16,r18
   22d0c:	b025883a 	mov	r18,r22
   22d10:	882d883a 	mov	r22,r17
   22d14:	dc403017 	ldw	r17,192(sp)
   22d18:	d9002b17 	ldw	r4,172(sp)
   22d1c:	1d87883a 	add	r3,r3,r22
   22d20:	10800044 	addi	r2,r2,1
   22d24:	41000015 	stw	r4,0(r8)
   22d28:	45800115 	stw	r22,4(r8)
   22d2c:	d8c02015 	stw	r3,128(sp)
   22d30:	d8801f15 	stw	r2,124(sp)
   22d34:	010001c4 	movi	r4,7
   22d38:	20819a16 	blt	r4,r2,233a4 <___svfprintf_internal_r+0x15dc>
   22d3c:	42000204 	addi	r8,r8,8
   22d40:	003e3506 	br	22618 <__alt_data_end+0xf8022618>
   22d44:	d9403317 	ldw	r5,204(sp)
   22d48:	00800044 	movi	r2,1
   22d4c:	18c00044 	addi	r3,r3,1
   22d50:	1141710e 	bge	r2,r5,23318 <___svfprintf_internal_r+0x1550>
   22d54:	dc401f17 	ldw	r17,124(sp)
   22d58:	00800044 	movi	r2,1
   22d5c:	40800115 	stw	r2,4(r8)
   22d60:	8c400044 	addi	r17,r17,1
   22d64:	44000015 	stw	r16,0(r8)
   22d68:	d8c02015 	stw	r3,128(sp)
   22d6c:	dc401f15 	stw	r17,124(sp)
   22d70:	008001c4 	movi	r2,7
   22d74:	14417416 	blt	r2,r17,23348 <___svfprintf_internal_r+0x1580>
   22d78:	42000204 	addi	r8,r8,8
   22d7c:	d8803817 	ldw	r2,224(sp)
   22d80:	d9003417 	ldw	r4,208(sp)
   22d84:	8c400044 	addi	r17,r17,1
   22d88:	10c7883a 	add	r3,r2,r3
   22d8c:	40800115 	stw	r2,4(r8)
   22d90:	41000015 	stw	r4,0(r8)
   22d94:	d8c02015 	stw	r3,128(sp)
   22d98:	dc401f15 	stw	r17,124(sp)
   22d9c:	008001c4 	movi	r2,7
   22da0:	14417216 	blt	r2,r17,2336c <___svfprintf_internal_r+0x15a4>
   22da4:	45800204 	addi	r22,r8,8
   22da8:	d9003617 	ldw	r4,216(sp)
   22dac:	d9403717 	ldw	r5,220(sp)
   22db0:	000d883a 	mov	r6,zero
   22db4:	000f883a 	mov	r7,zero
   22db8:	d8c03d15 	stw	r3,244(sp)
   22dbc:	002f9f00 	call	2f9f0 <__eqdf2>
   22dc0:	d8c03d17 	ldw	r3,244(sp)
   22dc4:	1000b326 	beq	r2,zero,23094 <___svfprintf_internal_r+0x12cc>
   22dc8:	d9403317 	ldw	r5,204(sp)
   22dcc:	84000044 	addi	r16,r16,1
   22dd0:	8c400044 	addi	r17,r17,1
   22dd4:	28bfffc4 	addi	r2,r5,-1
   22dd8:	1887883a 	add	r3,r3,r2
   22ddc:	b0800115 	stw	r2,4(r22)
   22de0:	b4000015 	stw	r16,0(r22)
   22de4:	d8c02015 	stw	r3,128(sp)
   22de8:	dc401f15 	stw	r17,124(sp)
   22dec:	008001c4 	movi	r2,7
   22df0:	1440d216 	blt	r2,r17,2313c <___svfprintf_internal_r+0x1374>
   22df4:	b5800204 	addi	r22,r22,8
   22df8:	d9003b17 	ldw	r4,236(sp)
   22dfc:	df0022c4 	addi	fp,sp,139
   22e00:	8c400044 	addi	r17,r17,1
   22e04:	20c7883a 	add	r3,r4,r3
   22e08:	b7000015 	stw	fp,0(r22)
   22e0c:	b1000115 	stw	r4,4(r22)
   22e10:	d8c02015 	stw	r3,128(sp)
   22e14:	dc401f15 	stw	r17,124(sp)
   22e18:	008001c4 	movi	r2,7
   22e1c:	14400e16 	blt	r2,r17,22e58 <___svfprintf_internal_r+0x1090>
   22e20:	b2000204 	addi	r8,r22,8
   22e24:	003e3c06 	br	22718 <__alt_data_end+0xf8022718>
   22e28:	01010034 	movhi	r4,1024
   22e2c:	21003484 	addi	r4,r4,210
   22e30:	d9002b15 	stw	r4,172(sp)
   22e34:	d9002b17 	ldw	r4,172(sp)
   22e38:	1c07883a 	add	r3,r3,r16
   22e3c:	44000115 	stw	r16,4(r8)
   22e40:	41000015 	stw	r4,0(r8)
   22e44:	10800044 	addi	r2,r2,1
   22e48:	d8c02015 	stw	r3,128(sp)
   22e4c:	d8801f15 	stw	r2,124(sp)
   22e50:	010001c4 	movi	r4,7
   22e54:	20be2f0e 	bge	r4,r2,22714 <__alt_data_end+0xf8022714>
   22e58:	d9402c17 	ldw	r5,176(sp)
   22e5c:	d9801e04 	addi	r6,sp,120
   22e60:	9809883a 	mov	r4,r19
   22e64:	002aa940 	call	2aa94 <__ssprint_r>
   22e68:	103cbc1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22e6c:	d8c02017 	ldw	r3,128(sp)
   22e70:	da000404 	addi	r8,sp,16
   22e74:	003e2806 	br	22718 <__alt_data_end+0xf8022718>
   22e78:	d9402c17 	ldw	r5,176(sp)
   22e7c:	d9801e04 	addi	r6,sp,120
   22e80:	9809883a 	mov	r4,r19
   22e84:	002aa940 	call	2aa94 <__ssprint_r>
   22e88:	103e5f26 	beq	r2,zero,22808 <__alt_data_end+0xf8022808>
   22e8c:	003cb306 	br	2215c <__alt_data_end+0xf802215c>
   22e90:	d9402c17 	ldw	r5,176(sp)
   22e94:	d9801e04 	addi	r6,sp,120
   22e98:	9809883a 	mov	r4,r19
   22e9c:	002aa940 	call	2aa94 <__ssprint_r>
   22ea0:	103cae1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22ea4:	d8c02017 	ldw	r3,128(sp)
   22ea8:	da000404 	addi	r8,sp,16
   22eac:	003e0d06 	br	226e4 <__alt_data_end+0xf80226e4>
   22eb0:	d9402c17 	ldw	r5,176(sp)
   22eb4:	d9801e04 	addi	r6,sp,120
   22eb8:	9809883a 	mov	r4,r19
   22ebc:	002aa940 	call	2aa94 <__ssprint_r>
   22ec0:	103ca61e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22ec4:	d8c02017 	ldw	r3,128(sp)
   22ec8:	da000404 	addi	r8,sp,16
   22ecc:	003dc106 	br	225d4 <__alt_data_end+0xf80225d4>
   22ed0:	d9402c17 	ldw	r5,176(sp)
   22ed4:	d9801e04 	addi	r6,sp,120
   22ed8:	9809883a 	mov	r4,r19
   22edc:	002aa940 	call	2aa94 <__ssprint_r>
   22ee0:	103c9e1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   22ee4:	d8c02017 	ldw	r3,128(sp)
   22ee8:	da000404 	addi	r8,sp,16
   22eec:	003dc706 	br	2260c <__alt_data_end+0xf802260c>
   22ef0:	d8802917 	ldw	r2,164(sp)
   22ef4:	d8002785 	stb	zero,158(sp)
   22ef8:	103f0816 	blt	r2,zero,22b1c <__alt_data_end+0xf8022b1c>
   22efc:	00ffdfc4 	movi	r3,-129
   22f00:	a584b03a 	or	r2,r20,r22
   22f04:	90e4703a 	and	r18,r18,r3
   22f08:	103c8126 	beq	r2,zero,22110 <__alt_data_end+0xf8022110>
   22f0c:	0039883a 	mov	fp,zero
   22f10:	003e7606 	br	228ec <__alt_data_end+0xf80228ec>
   22f14:	9080040c 	andi	r2,r18,16
   22f18:	10013d26 	beq	r2,zero,23410 <___svfprintf_internal_r+0x1648>
   22f1c:	d9002d17 	ldw	r4,180(sp)
   22f20:	d9402917 	ldw	r5,164(sp)
   22f24:	d8002785 	stb	zero,158(sp)
   22f28:	20800104 	addi	r2,r4,4
   22f2c:	25000017 	ldw	r20,0(r4)
   22f30:	002d883a 	mov	r22,zero
   22f34:	28013f16 	blt	r5,zero,23434 <___svfprintf_internal_r+0x166c>
   22f38:	00ffdfc4 	movi	r3,-129
   22f3c:	d8802d15 	stw	r2,180(sp)
   22f40:	90e4703a 	and	r18,r18,r3
   22f44:	a03d2b26 	beq	r20,zero,223f4 <__alt_data_end+0xf80223f4>
   22f48:	0039883a 	mov	fp,zero
   22f4c:	003d2e06 	br	22408 <__alt_data_end+0xf8022408>
   22f50:	dc402617 	ldw	r17,152(sp)
   22f54:	0441830e 	bge	zero,r17,23564 <___svfprintf_internal_r+0x179c>
   22f58:	dc403217 	ldw	r17,200(sp)
   22f5c:	d8803317 	ldw	r2,204(sp)
   22f60:	1440010e 	bge	r2,r17,22f68 <___svfprintf_internal_r+0x11a0>
   22f64:	1023883a 	mov	r17,r2
   22f68:	04400a0e 	bge	zero,r17,22f94 <___svfprintf_internal_r+0x11cc>
   22f6c:	d8801f17 	ldw	r2,124(sp)
   22f70:	1c47883a 	add	r3,r3,r17
   22f74:	44000015 	stw	r16,0(r8)
   22f78:	10800044 	addi	r2,r2,1
   22f7c:	44400115 	stw	r17,4(r8)
   22f80:	d8c02015 	stw	r3,128(sp)
   22f84:	d8801f15 	stw	r2,124(sp)
   22f88:	010001c4 	movi	r4,7
   22f8c:	20827516 	blt	r4,r2,23964 <___svfprintf_internal_r+0x1b9c>
   22f90:	42000204 	addi	r8,r8,8
   22f94:	88027b16 	blt	r17,zero,23984 <___svfprintf_internal_r+0x1bbc>
   22f98:	d9003217 	ldw	r4,200(sp)
   22f9c:	2463c83a 	sub	r17,r4,r17
   22fa0:	0440990e 	bge	zero,r17,23208 <___svfprintf_internal_r+0x1440>
   22fa4:	05800404 	movi	r22,16
   22fa8:	d8801f17 	ldw	r2,124(sp)
   22fac:	b441530e 	bge	r22,r17,234fc <___svfprintf_internal_r+0x1734>
   22fb0:	01010034 	movhi	r4,1024
   22fb4:	21003484 	addi	r4,r4,210
   22fb8:	d9002b15 	stw	r4,172(sp)
   22fbc:	070001c4 	movi	fp,7
   22fc0:	dd002c17 	ldw	r20,176(sp)
   22fc4:	00000306 	br	22fd4 <___svfprintf_internal_r+0x120c>
   22fc8:	42000204 	addi	r8,r8,8
   22fcc:	8c7ffc04 	addi	r17,r17,-16
   22fd0:	b4414d0e 	bge	r22,r17,23508 <___svfprintf_internal_r+0x1740>
   22fd4:	18c00404 	addi	r3,r3,16
   22fd8:	10800044 	addi	r2,r2,1
   22fdc:	45400015 	stw	r21,0(r8)
   22fe0:	45800115 	stw	r22,4(r8)
   22fe4:	d8c02015 	stw	r3,128(sp)
   22fe8:	d8801f15 	stw	r2,124(sp)
   22fec:	e0bff60e 	bge	fp,r2,22fc8 <__alt_data_end+0xf8022fc8>
   22ff0:	d9801e04 	addi	r6,sp,120
   22ff4:	a00b883a 	mov	r5,r20
   22ff8:	9809883a 	mov	r4,r19
   22ffc:	002aa940 	call	2aa94 <__ssprint_r>
   23000:	103c561e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23004:	d8c02017 	ldw	r3,128(sp)
   23008:	d8801f17 	ldw	r2,124(sp)
   2300c:	da000404 	addi	r8,sp,16
   23010:	003fee06 	br	22fcc <__alt_data_end+0xf8022fcc>
   23014:	d9402c17 	ldw	r5,176(sp)
   23018:	d9801e04 	addi	r6,sp,120
   2301c:	9809883a 	mov	r4,r19
   23020:	002aa940 	call	2aa94 <__ssprint_r>
   23024:	103c4d1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23028:	d8c02017 	ldw	r3,128(sp)
   2302c:	df002787 	ldb	fp,158(sp)
   23030:	da000404 	addi	r8,sp,16
   23034:	003d5a06 	br	225a0 <__alt_data_end+0xf80225a0>
   23038:	9080040c 	andi	r2,r18,16
   2303c:	10005c26 	beq	r2,zero,231b0 <___svfprintf_internal_r+0x13e8>
   23040:	d9402d17 	ldw	r5,180(sp)
   23044:	d8c02917 	ldw	r3,164(sp)
   23048:	d8002785 	stb	zero,158(sp)
   2304c:	28800104 	addi	r2,r5,4
   23050:	2d000017 	ldw	r20,0(r5)
   23054:	002d883a 	mov	r22,zero
   23058:	18005e16 	blt	r3,zero,231d4 <___svfprintf_internal_r+0x140c>
   2305c:	00ffdfc4 	movi	r3,-129
   23060:	d8802d15 	stw	r2,180(sp)
   23064:	90e4703a 	and	r18,r18,r3
   23068:	0039883a 	mov	fp,zero
   2306c:	a03dfe26 	beq	r20,zero,22868 <__alt_data_end+0xf8022868>
   23070:	00800244 	movi	r2,9
   23074:	153cb336 	bltu	r2,r20,22344 <__alt_data_end+0xf8022344>
   23078:	a5000c04 	addi	r20,r20,48
   2307c:	dc001dc4 	addi	r16,sp,119
   23080:	dd001dc5 	stb	r20,119(sp)
   23084:	d8c02817 	ldw	r3,160(sp)
   23088:	1c07c83a 	sub	r3,r3,r16
   2308c:	d8c02e15 	stw	r3,184(sp)
   23090:	003cf506 	br	22468 <__alt_data_end+0xf8022468>
   23094:	d8803317 	ldw	r2,204(sp)
   23098:	143fffc4 	addi	r16,r2,-1
   2309c:	043f560e 	bge	zero,r16,22df8 <__alt_data_end+0xf8022df8>
   230a0:	07000404 	movi	fp,16
   230a4:	e403530e 	bge	fp,r16,23df4 <___svfprintf_internal_r+0x202c>
   230a8:	01410034 	movhi	r5,1024
   230ac:	29403484 	addi	r5,r5,210
   230b0:	d9402b15 	stw	r5,172(sp)
   230b4:	01c001c4 	movi	r7,7
   230b8:	dd002c17 	ldw	r20,176(sp)
   230bc:	00000306 	br	230cc <___svfprintf_internal_r+0x1304>
   230c0:	843ffc04 	addi	r16,r16,-16
   230c4:	b5800204 	addi	r22,r22,8
   230c8:	e400130e 	bge	fp,r16,23118 <___svfprintf_internal_r+0x1350>
   230cc:	18c00404 	addi	r3,r3,16
   230d0:	8c400044 	addi	r17,r17,1
   230d4:	b5400015 	stw	r21,0(r22)
   230d8:	b7000115 	stw	fp,4(r22)
   230dc:	d8c02015 	stw	r3,128(sp)
   230e0:	dc401f15 	stw	r17,124(sp)
   230e4:	3c7ff60e 	bge	r7,r17,230c0 <__alt_data_end+0xf80230c0>
   230e8:	d9801e04 	addi	r6,sp,120
   230ec:	a00b883a 	mov	r5,r20
   230f0:	9809883a 	mov	r4,r19
   230f4:	d9c03d15 	stw	r7,244(sp)
   230f8:	002aa940 	call	2aa94 <__ssprint_r>
   230fc:	d9c03d17 	ldw	r7,244(sp)
   23100:	103c161e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23104:	843ffc04 	addi	r16,r16,-16
   23108:	d8c02017 	ldw	r3,128(sp)
   2310c:	dc401f17 	ldw	r17,124(sp)
   23110:	dd800404 	addi	r22,sp,16
   23114:	e43fed16 	blt	fp,r16,230cc <__alt_data_end+0xf80230cc>
   23118:	d8802b17 	ldw	r2,172(sp)
   2311c:	1c07883a 	add	r3,r3,r16
   23120:	8c400044 	addi	r17,r17,1
   23124:	b0800015 	stw	r2,0(r22)
   23128:	b4000115 	stw	r16,4(r22)
   2312c:	d8c02015 	stw	r3,128(sp)
   23130:	dc401f15 	stw	r17,124(sp)
   23134:	008001c4 	movi	r2,7
   23138:	147f2e0e 	bge	r2,r17,22df4 <__alt_data_end+0xf8022df4>
   2313c:	d9402c17 	ldw	r5,176(sp)
   23140:	d9801e04 	addi	r6,sp,120
   23144:	9809883a 	mov	r4,r19
   23148:	002aa940 	call	2aa94 <__ssprint_r>
   2314c:	103c031e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23150:	d8c02017 	ldw	r3,128(sp)
   23154:	dc401f17 	ldw	r17,124(sp)
   23158:	dd800404 	addi	r22,sp,16
   2315c:	003f2606 	br	22df8 <__alt_data_end+0xf8022df8>
   23160:	9080040c 	andi	r2,r18,16
   23164:	1000c326 	beq	r2,zero,23474 <___svfprintf_internal_r+0x16ac>
   23168:	d8802d17 	ldw	r2,180(sp)
   2316c:	15000017 	ldw	r20,0(r2)
   23170:	10800104 	addi	r2,r2,4
   23174:	d8802d15 	stw	r2,180(sp)
   23178:	a02dd7fa 	srai	r22,r20,31
   2317c:	b005883a 	mov	r2,r22
   23180:	103c680e 	bge	r2,zero,22324 <__alt_data_end+0xf8022324>
   23184:	0529c83a 	sub	r20,zero,r20
   23188:	a004c03a 	cmpne	r2,r20,zero
   2318c:	05adc83a 	sub	r22,zero,r22
   23190:	b0adc83a 	sub	r22,r22,r2
   23194:	d8802917 	ldw	r2,164(sp)
   23198:	07000b44 	movi	fp,45
   2319c:	df002785 	stb	fp,158(sp)
   231a0:	10022e16 	blt	r2,zero,23a5c <___svfprintf_internal_r+0x1c94>
   231a4:	00bfdfc4 	movi	r2,-129
   231a8:	90a4703a 	and	r18,r18,r2
   231ac:	003c6406 	br	22340 <__alt_data_end+0xf8022340>
   231b0:	9080100c 	andi	r2,r18,64
   231b4:	d8002785 	stb	zero,158(sp)
   231b8:	10012526 	beq	r2,zero,23650 <___svfprintf_internal_r+0x1888>
   231bc:	d9002d17 	ldw	r4,180(sp)
   231c0:	d9402917 	ldw	r5,164(sp)
   231c4:	002d883a 	mov	r22,zero
   231c8:	20800104 	addi	r2,r4,4
   231cc:	2500000b 	ldhu	r20,0(r4)
   231d0:	283fa20e 	bge	r5,zero,2305c <__alt_data_end+0xf802305c>
   231d4:	d8802d15 	stw	r2,180(sp)
   231d8:	0039883a 	mov	fp,zero
   231dc:	a584b03a 	or	r2,r20,r22
   231e0:	103c571e 	bne	r2,zero,22340 <__alt_data_end+0xf8022340>
   231e4:	00800044 	movi	r2,1
   231e8:	003e5006 	br	22b2c <__alt_data_end+0xf8022b2c>
   231ec:	d9402c17 	ldw	r5,176(sp)
   231f0:	d9801e04 	addi	r6,sp,120
   231f4:	9809883a 	mov	r4,r19
   231f8:	002aa940 	call	2aa94 <__ssprint_r>
   231fc:	103bd71e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23200:	d8c02017 	ldw	r3,128(sp)
   23204:	da000404 	addi	r8,sp,16
   23208:	d9003217 	ldw	r4,200(sp)
   2320c:	d8802617 	ldw	r2,152(sp)
   23210:	d9403317 	ldw	r5,204(sp)
   23214:	8123883a 	add	r17,r16,r4
   23218:	11400216 	blt	r2,r5,23224 <___svfprintf_internal_r+0x145c>
   2321c:	9100004c 	andi	r4,r18,1
   23220:	20000d26 	beq	r4,zero,23258 <___svfprintf_internal_r+0x1490>
   23224:	d9003817 	ldw	r4,224(sp)
   23228:	d9403417 	ldw	r5,208(sp)
   2322c:	1907883a 	add	r3,r3,r4
   23230:	d9001f17 	ldw	r4,124(sp)
   23234:	41400015 	stw	r5,0(r8)
   23238:	d9403817 	ldw	r5,224(sp)
   2323c:	21000044 	addi	r4,r4,1
   23240:	d8c02015 	stw	r3,128(sp)
   23244:	41400115 	stw	r5,4(r8)
   23248:	d9001f15 	stw	r4,124(sp)
   2324c:	014001c4 	movi	r5,7
   23250:	2901dc16 	blt	r5,r4,239c4 <___svfprintf_internal_r+0x1bfc>
   23254:	42000204 	addi	r8,r8,8
   23258:	d9003317 	ldw	r4,204(sp)
   2325c:	8121883a 	add	r16,r16,r4
   23260:	2085c83a 	sub	r2,r4,r2
   23264:	8461c83a 	sub	r16,r16,r17
   23268:	1400010e 	bge	r2,r16,23270 <___svfprintf_internal_r+0x14a8>
   2326c:	1021883a 	mov	r16,r2
   23270:	04000a0e 	bge	zero,r16,2329c <___svfprintf_internal_r+0x14d4>
   23274:	d9001f17 	ldw	r4,124(sp)
   23278:	1c07883a 	add	r3,r3,r16
   2327c:	44400015 	stw	r17,0(r8)
   23280:	21000044 	addi	r4,r4,1
   23284:	44000115 	stw	r16,4(r8)
   23288:	d8c02015 	stw	r3,128(sp)
   2328c:	d9001f15 	stw	r4,124(sp)
   23290:	014001c4 	movi	r5,7
   23294:	2901e616 	blt	r5,r4,23a30 <___svfprintf_internal_r+0x1c68>
   23298:	42000204 	addi	r8,r8,8
   2329c:	8001f616 	blt	r16,zero,23a78 <___svfprintf_internal_r+0x1cb0>
   232a0:	1421c83a 	sub	r16,r2,r16
   232a4:	043d1c0e 	bge	zero,r16,22718 <__alt_data_end+0xf8022718>
   232a8:	04400404 	movi	r17,16
   232ac:	d8801f17 	ldw	r2,124(sp)
   232b0:	8c3edd0e 	bge	r17,r16,22e28 <__alt_data_end+0xf8022e28>
   232b4:	01410034 	movhi	r5,1024
   232b8:	29403484 	addi	r5,r5,210
   232bc:	d9402b15 	stw	r5,172(sp)
   232c0:	058001c4 	movi	r22,7
   232c4:	dd002c17 	ldw	r20,176(sp)
   232c8:	00000306 	br	232d8 <___svfprintf_internal_r+0x1510>
   232cc:	42000204 	addi	r8,r8,8
   232d0:	843ffc04 	addi	r16,r16,-16
   232d4:	8c3ed70e 	bge	r17,r16,22e34 <__alt_data_end+0xf8022e34>
   232d8:	18c00404 	addi	r3,r3,16
   232dc:	10800044 	addi	r2,r2,1
   232e0:	45400015 	stw	r21,0(r8)
   232e4:	44400115 	stw	r17,4(r8)
   232e8:	d8c02015 	stw	r3,128(sp)
   232ec:	d8801f15 	stw	r2,124(sp)
   232f0:	b0bff60e 	bge	r22,r2,232cc <__alt_data_end+0xf80232cc>
   232f4:	d9801e04 	addi	r6,sp,120
   232f8:	a00b883a 	mov	r5,r20
   232fc:	9809883a 	mov	r4,r19
   23300:	002aa940 	call	2aa94 <__ssprint_r>
   23304:	103b951e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23308:	d8c02017 	ldw	r3,128(sp)
   2330c:	d8801f17 	ldw	r2,124(sp)
   23310:	da000404 	addi	r8,sp,16
   23314:	003fee06 	br	232d0 <__alt_data_end+0xf80232d0>
   23318:	9088703a 	and	r4,r18,r2
   2331c:	203e8d1e 	bne	r4,zero,22d54 <__alt_data_end+0xf8022d54>
   23320:	dc401f17 	ldw	r17,124(sp)
   23324:	40800115 	stw	r2,4(r8)
   23328:	44000015 	stw	r16,0(r8)
   2332c:	8c400044 	addi	r17,r17,1
   23330:	d8c02015 	stw	r3,128(sp)
   23334:	dc401f15 	stw	r17,124(sp)
   23338:	008001c4 	movi	r2,7
   2333c:	147f7f16 	blt	r2,r17,2313c <__alt_data_end+0xf802313c>
   23340:	45800204 	addi	r22,r8,8
   23344:	003eac06 	br	22df8 <__alt_data_end+0xf8022df8>
   23348:	d9402c17 	ldw	r5,176(sp)
   2334c:	d9801e04 	addi	r6,sp,120
   23350:	9809883a 	mov	r4,r19
   23354:	002aa940 	call	2aa94 <__ssprint_r>
   23358:	103b801e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   2335c:	d8c02017 	ldw	r3,128(sp)
   23360:	dc401f17 	ldw	r17,124(sp)
   23364:	da000404 	addi	r8,sp,16
   23368:	003e8406 	br	22d7c <__alt_data_end+0xf8022d7c>
   2336c:	d9402c17 	ldw	r5,176(sp)
   23370:	d9801e04 	addi	r6,sp,120
   23374:	9809883a 	mov	r4,r19
   23378:	002aa940 	call	2aa94 <__ssprint_r>
   2337c:	103b771e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23380:	d8c02017 	ldw	r3,128(sp)
   23384:	dc401f17 	ldw	r17,124(sp)
   23388:	dd800404 	addi	r22,sp,16
   2338c:	003e8606 	br	22da8 <__alt_data_end+0xf8022da8>
   23390:	0029883a 	mov	r20,zero
   23394:	a5000c04 	addi	r20,r20,48
   23398:	dc001dc4 	addi	r16,sp,119
   2339c:	dd001dc5 	stb	r20,119(sp)
   233a0:	003f3806 	br	23084 <__alt_data_end+0xf8023084>
   233a4:	d9402c17 	ldw	r5,176(sp)
   233a8:	d9801e04 	addi	r6,sp,120
   233ac:	9809883a 	mov	r4,r19
   233b0:	002aa940 	call	2aa94 <__ssprint_r>
   233b4:	103b691e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   233b8:	d8c02017 	ldw	r3,128(sp)
   233bc:	da000404 	addi	r8,sp,16
   233c0:	003c9506 	br	22618 <__alt_data_end+0xf8022618>
   233c4:	d9003617 	ldw	r4,216(sp)
   233c8:	d9403717 	ldw	r5,220(sp)
   233cc:	da003e15 	stw	r8,248(sp)
   233d0:	002a9440 	call	2a944 <__fpclassifyd>
   233d4:	da003e17 	ldw	r8,248(sp)
   233d8:	1000bd1e 	bne	r2,zero,236d0 <___svfprintf_internal_r+0x1908>
   233dc:	008011c4 	movi	r2,71
   233e0:	14411e0e 	bge	r2,r17,2385c <___svfprintf_internal_r+0x1a94>
   233e4:	04010034 	movhi	r16,1024
   233e8:	84002704 	addi	r16,r16,156
   233ec:	00c000c4 	movi	r3,3
   233f0:	00bfdfc4 	movi	r2,-129
   233f4:	d8c02a15 	stw	r3,168(sp)
   233f8:	90a4703a 	and	r18,r18,r2
   233fc:	df002783 	ldbu	fp,158(sp)
   23400:	d8c02e15 	stw	r3,184(sp)
   23404:	d8002915 	stw	zero,164(sp)
   23408:	d8003215 	stw	zero,200(sp)
   2340c:	003c1c06 	br	22480 <__alt_data_end+0xf8022480>
   23410:	9080100c 	andi	r2,r18,64
   23414:	d8002785 	stb	zero,158(sp)
   23418:	10009426 	beq	r2,zero,2366c <___svfprintf_internal_r+0x18a4>
   2341c:	d8c02d17 	ldw	r3,180(sp)
   23420:	d9002917 	ldw	r4,164(sp)
   23424:	002d883a 	mov	r22,zero
   23428:	18800104 	addi	r2,r3,4
   2342c:	1d00000b 	ldhu	r20,0(r3)
   23430:	203ec10e 	bge	r4,zero,22f38 <__alt_data_end+0xf8022f38>
   23434:	a586b03a 	or	r3,r20,r22
   23438:	d8802d15 	stw	r2,180(sp)
   2343c:	183ec21e 	bne	r3,zero,22f48 <__alt_data_end+0xf8022f48>
   23440:	0039883a 	mov	fp,zero
   23444:	0005883a 	mov	r2,zero
   23448:	003db806 	br	22b2c <__alt_data_end+0xf8022b2c>
   2344c:	d8802d17 	ldw	r2,180(sp)
   23450:	d8c02d17 	ldw	r3,180(sp)
   23454:	d9002d17 	ldw	r4,180(sp)
   23458:	10800017 	ldw	r2,0(r2)
   2345c:	18c00117 	ldw	r3,4(r3)
   23460:	21000204 	addi	r4,r4,8
   23464:	d8803615 	stw	r2,216(sp)
   23468:	d8c03715 	stw	r3,220(sp)
   2346c:	d9002d15 	stw	r4,180(sp)
   23470:	003b8206 	br	2227c <__alt_data_end+0xf802227c>
   23474:	9080100c 	andi	r2,r18,64
   23478:	10010726 	beq	r2,zero,23898 <___svfprintf_internal_r+0x1ad0>
   2347c:	d8c02d17 	ldw	r3,180(sp)
   23480:	1d00000f 	ldh	r20,0(r3)
   23484:	18c00104 	addi	r3,r3,4
   23488:	d8c02d15 	stw	r3,180(sp)
   2348c:	a02dd7fa 	srai	r22,r20,31
   23490:	b005883a 	mov	r2,r22
   23494:	003ba206 	br	22320 <__alt_data_end+0xf8022320>
   23498:	9080100c 	andi	r2,r18,64
   2349c:	10010526 	beq	r2,zero,238b4 <___svfprintf_internal_r+0x1aec>
   234a0:	d9002d17 	ldw	r4,180(sp)
   234a4:	002d883a 	mov	r22,zero
   234a8:	2500000b 	ldhu	r20,0(r4)
   234ac:	21000104 	addi	r4,r4,4
   234b0:	d9002d15 	stw	r4,180(sp)
   234b4:	003cfe06 	br	228b0 <__alt_data_end+0xf80228b0>
   234b8:	bc400007 	ldb	r17,0(r23)
   234bc:	003a9606 	br	21f18 <__alt_data_end+0xf8021f18>
   234c0:	9080040c 	andi	r2,r18,16
   234c4:	10010126 	beq	r2,zero,238cc <___svfprintf_internal_r+0x1b04>
   234c8:	d9402d17 	ldw	r5,180(sp)
   234cc:	d8c02f17 	ldw	r3,188(sp)
   234d0:	28800017 	ldw	r2,0(r5)
   234d4:	29400104 	addi	r5,r5,4
   234d8:	d9402d15 	stw	r5,180(sp)
   234dc:	10c00015 	stw	r3,0(r2)
   234e0:	003a6406 	br	21e74 <__alt_data_end+0xf8021e74>
   234e4:	d9002917 	ldw	r4,164(sp)
   234e8:	d8002785 	stb	zero,158(sp)
   234ec:	203d8d16 	blt	r4,zero,22b24 <__alt_data_end+0xf8022b24>
   234f0:	00bfdfc4 	movi	r2,-129
   234f4:	90a4703a 	and	r18,r18,r2
   234f8:	003b0506 	br	22110 <__alt_data_end+0xf8022110>
   234fc:	01410034 	movhi	r5,1024
   23500:	29403484 	addi	r5,r5,210
   23504:	d9402b15 	stw	r5,172(sp)
   23508:	d9402b17 	ldw	r5,172(sp)
   2350c:	1c47883a 	add	r3,r3,r17
   23510:	10800044 	addi	r2,r2,1
   23514:	41400015 	stw	r5,0(r8)
   23518:	44400115 	stw	r17,4(r8)
   2351c:	d8c02015 	stw	r3,128(sp)
   23520:	d8801f15 	stw	r2,124(sp)
   23524:	010001c4 	movi	r4,7
   23528:	20bf3016 	blt	r4,r2,231ec <__alt_data_end+0xf80231ec>
   2352c:	42000204 	addi	r8,r8,8
   23530:	003f3506 	br	23208 <__alt_data_end+0xf8023208>
   23534:	01010034 	movhi	r4,1024
   23538:	21003484 	addi	r4,r4,210
   2353c:	d9002b15 	stw	r4,172(sp)
   23540:	003c5e06 	br	226bc <__alt_data_end+0xf80226bc>
   23544:	d9402c17 	ldw	r5,176(sp)
   23548:	d9801e04 	addi	r6,sp,120
   2354c:	9809883a 	mov	r4,r19
   23550:	002aa940 	call	2aa94 <__ssprint_r>
   23554:	103b011e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23558:	d8c02017 	ldw	r3,128(sp)
   2355c:	da000404 	addi	r8,sp,16
   23560:	003d9306 	br	22bb0 <__alt_data_end+0xf8022bb0>
   23564:	d8801f17 	ldw	r2,124(sp)
   23568:	01410034 	movhi	r5,1024
   2356c:	01000044 	movi	r4,1
   23570:	18c00044 	addi	r3,r3,1
   23574:	10800044 	addi	r2,r2,1
   23578:	29403404 	addi	r5,r5,208
   2357c:	41000115 	stw	r4,4(r8)
   23580:	41400015 	stw	r5,0(r8)
   23584:	d8c02015 	stw	r3,128(sp)
   23588:	d8801f15 	stw	r2,124(sp)
   2358c:	010001c4 	movi	r4,7
   23590:	2080b516 	blt	r4,r2,23868 <___svfprintf_internal_r+0x1aa0>
   23594:	42000204 	addi	r8,r8,8
   23598:	8800041e 	bne	r17,zero,235ac <___svfprintf_internal_r+0x17e4>
   2359c:	d8803317 	ldw	r2,204(sp)
   235a0:	1000021e 	bne	r2,zero,235ac <___svfprintf_internal_r+0x17e4>
   235a4:	9080004c 	andi	r2,r18,1
   235a8:	103c5b26 	beq	r2,zero,22718 <__alt_data_end+0xf8022718>
   235ac:	d9003817 	ldw	r4,224(sp)
   235b0:	d8801f17 	ldw	r2,124(sp)
   235b4:	d9403417 	ldw	r5,208(sp)
   235b8:	20c7883a 	add	r3,r4,r3
   235bc:	10800044 	addi	r2,r2,1
   235c0:	41000115 	stw	r4,4(r8)
   235c4:	41400015 	stw	r5,0(r8)
   235c8:	d8c02015 	stw	r3,128(sp)
   235cc:	d8801f15 	stw	r2,124(sp)
   235d0:	010001c4 	movi	r4,7
   235d4:	20818016 	blt	r4,r2,23bd8 <___svfprintf_internal_r+0x1e10>
   235d8:	42000204 	addi	r8,r8,8
   235dc:	0463c83a 	sub	r17,zero,r17
   235e0:	0440cb0e 	bge	zero,r17,23910 <___svfprintf_internal_r+0x1b48>
   235e4:	05800404 	movi	r22,16
   235e8:	b440e80e 	bge	r22,r17,2398c <___svfprintf_internal_r+0x1bc4>
   235ec:	01410034 	movhi	r5,1024
   235f0:	29403484 	addi	r5,r5,210
   235f4:	d9402b15 	stw	r5,172(sp)
   235f8:	070001c4 	movi	fp,7
   235fc:	dd002c17 	ldw	r20,176(sp)
   23600:	00000306 	br	23610 <___svfprintf_internal_r+0x1848>
   23604:	42000204 	addi	r8,r8,8
   23608:	8c7ffc04 	addi	r17,r17,-16
   2360c:	b440e20e 	bge	r22,r17,23998 <___svfprintf_internal_r+0x1bd0>
   23610:	18c00404 	addi	r3,r3,16
   23614:	10800044 	addi	r2,r2,1
   23618:	45400015 	stw	r21,0(r8)
   2361c:	45800115 	stw	r22,4(r8)
   23620:	d8c02015 	stw	r3,128(sp)
   23624:	d8801f15 	stw	r2,124(sp)
   23628:	e0bff60e 	bge	fp,r2,23604 <__alt_data_end+0xf8023604>
   2362c:	d9801e04 	addi	r6,sp,120
   23630:	a00b883a 	mov	r5,r20
   23634:	9809883a 	mov	r4,r19
   23638:	002aa940 	call	2aa94 <__ssprint_r>
   2363c:	103ac71e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23640:	d8c02017 	ldw	r3,128(sp)
   23644:	d8801f17 	ldw	r2,124(sp)
   23648:	da000404 	addi	r8,sp,16
   2364c:	003fee06 	br	23608 <__alt_data_end+0xf8023608>
   23650:	d8c02d17 	ldw	r3,180(sp)
   23654:	d9002917 	ldw	r4,164(sp)
   23658:	002d883a 	mov	r22,zero
   2365c:	18800104 	addi	r2,r3,4
   23660:	1d000017 	ldw	r20,0(r3)
   23664:	203e7d0e 	bge	r4,zero,2305c <__alt_data_end+0xf802305c>
   23668:	003eda06 	br	231d4 <__alt_data_end+0xf80231d4>
   2366c:	d9402d17 	ldw	r5,180(sp)
   23670:	d8c02917 	ldw	r3,164(sp)
   23674:	002d883a 	mov	r22,zero
   23678:	28800104 	addi	r2,r5,4
   2367c:	2d000017 	ldw	r20,0(r5)
   23680:	183e2d0e 	bge	r3,zero,22f38 <__alt_data_end+0xf8022f38>
   23684:	003f6b06 	br	23434 <__alt_data_end+0xf8023434>
   23688:	d8c02d15 	stw	r3,180(sp)
   2368c:	0039883a 	mov	fp,zero
   23690:	003ed206 	br	231dc <__alt_data_end+0xf80231dc>
   23694:	bc400043 	ldbu	r17,1(r23)
   23698:	94800814 	ori	r18,r18,32
   2369c:	bdc00044 	addi	r23,r23,1
   236a0:	8c403fcc 	andi	r17,r17,255
   236a4:	8c40201c 	xori	r17,r17,128
   236a8:	8c7fe004 	addi	r17,r17,-128
   236ac:	003a1a06 	br	21f18 <__alt_data_end+0xf8021f18>
   236b0:	d9402c17 	ldw	r5,176(sp)
   236b4:	d9801e04 	addi	r6,sp,120
   236b8:	9809883a 	mov	r4,r19
   236bc:	002aa940 	call	2aa94 <__ssprint_r>
   236c0:	103aa61e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   236c4:	d8c02017 	ldw	r3,128(sp)
   236c8:	da000404 	addi	r8,sp,16
   236cc:	003d4a06 	br	22bf8 <__alt_data_end+0xf8022bf8>
   236d0:	d9002917 	ldw	r4,164(sp)
   236d4:	05bff7c4 	movi	r22,-33
   236d8:	00bfffc4 	movi	r2,-1
   236dc:	8dac703a 	and	r22,r17,r22
   236e0:	20806a26 	beq	r4,r2,2388c <___svfprintf_internal_r+0x1ac4>
   236e4:	008011c4 	movi	r2,71
   236e8:	b0813726 	beq	r22,r2,23bc8 <___svfprintf_internal_r+0x1e00>
   236ec:	d9003717 	ldw	r4,220(sp)
   236f0:	90c04014 	ori	r3,r18,256
   236f4:	d8c02b15 	stw	r3,172(sp)
   236f8:	20015d16 	blt	r4,zero,23c70 <___svfprintf_internal_r+0x1ea8>
   236fc:	dd003717 	ldw	r20,220(sp)
   23700:	d8002a05 	stb	zero,168(sp)
   23704:	00801984 	movi	r2,102
   23708:	88814026 	beq	r17,r2,23c0c <___svfprintf_internal_r+0x1e44>
   2370c:	00801184 	movi	r2,70
   23710:	88817126 	beq	r17,r2,23cd8 <___svfprintf_internal_r+0x1f10>
   23714:	00801144 	movi	r2,69
   23718:	b0816226 	beq	r22,r2,23ca4 <___svfprintf_internal_r+0x1edc>
   2371c:	d8c02917 	ldw	r3,164(sp)
   23720:	d8802104 	addi	r2,sp,132
   23724:	d8800315 	stw	r2,12(sp)
   23728:	d9403617 	ldw	r5,216(sp)
   2372c:	d8802504 	addi	r2,sp,148
   23730:	d8800215 	stw	r2,8(sp)
   23734:	d8802604 	addi	r2,sp,152
   23738:	d8c00015 	stw	r3,0(sp)
   2373c:	d8800115 	stw	r2,4(sp)
   23740:	01c00084 	movi	r7,2
   23744:	a00d883a 	mov	r6,r20
   23748:	9809883a 	mov	r4,r19
   2374c:	d8c03d15 	stw	r3,244(sp)
   23750:	da003e15 	stw	r8,248(sp)
   23754:	00266780 	call	26678 <_dtoa_r>
   23758:	1021883a 	mov	r16,r2
   2375c:	008019c4 	movi	r2,103
   23760:	d8c03d17 	ldw	r3,244(sp)
   23764:	da003e17 	ldw	r8,248(sp)
   23768:	8880e726 	beq	r17,r2,23b08 <___svfprintf_internal_r+0x1d40>
   2376c:	008011c4 	movi	r2,71
   23770:	8880d426 	beq	r17,r2,23ac4 <___svfprintf_internal_r+0x1cfc>
   23774:	80f9883a 	add	fp,r16,r3
   23778:	d9003617 	ldw	r4,216(sp)
   2377c:	000d883a 	mov	r6,zero
   23780:	000f883a 	mov	r7,zero
   23784:	a00b883a 	mov	r5,r20
   23788:	da003e15 	stw	r8,248(sp)
   2378c:	002f9f00 	call	2f9f0 <__eqdf2>
   23790:	da003e17 	ldw	r8,248(sp)
   23794:	1000e426 	beq	r2,zero,23b28 <___svfprintf_internal_r+0x1d60>
   23798:	d8802117 	ldw	r2,132(sp)
   2379c:	1700062e 	bgeu	r2,fp,237b8 <___svfprintf_internal_r+0x19f0>
   237a0:	01000c04 	movi	r4,48
   237a4:	10c00044 	addi	r3,r2,1
   237a8:	d8c02115 	stw	r3,132(sp)
   237ac:	11000005 	stb	r4,0(r2)
   237b0:	d8802117 	ldw	r2,132(sp)
   237b4:	173ffb36 	bltu	r2,fp,237a4 <__alt_data_end+0xf80237a4>
   237b8:	1405c83a 	sub	r2,r2,r16
   237bc:	d8803315 	stw	r2,204(sp)
   237c0:	008011c4 	movi	r2,71
   237c4:	b080c526 	beq	r22,r2,23adc <___svfprintf_internal_r+0x1d14>
   237c8:	00801944 	movi	r2,101
   237cc:	1441d90e 	bge	r2,r17,23f34 <___svfprintf_internal_r+0x216c>
   237d0:	d8c02617 	ldw	r3,152(sp)
   237d4:	00801984 	movi	r2,102
   237d8:	d8c03215 	stw	r3,200(sp)
   237dc:	88813426 	beq	r17,r2,23cb0 <___svfprintf_internal_r+0x1ee8>
   237e0:	d8c03217 	ldw	r3,200(sp)
   237e4:	d9003317 	ldw	r4,204(sp)
   237e8:	19012516 	blt	r3,r4,23c80 <___svfprintf_internal_r+0x1eb8>
   237ec:	9480004c 	andi	r18,r18,1
   237f0:	9001841e 	bne	r18,zero,23e04 <___svfprintf_internal_r+0x203c>
   237f4:	1805883a 	mov	r2,r3
   237f8:	1801cc16 	blt	r3,zero,23f2c <___svfprintf_internal_r+0x2164>
   237fc:	d8c03217 	ldw	r3,200(sp)
   23800:	044019c4 	movi	r17,103
   23804:	d8c02e15 	stw	r3,184(sp)
   23808:	df002a07 	ldb	fp,168(sp)
   2380c:	e000a61e 	bne	fp,zero,23aa8 <___svfprintf_internal_r+0x1ce0>
   23810:	df002783 	ldbu	fp,158(sp)
   23814:	d8802a15 	stw	r2,168(sp)
   23818:	dc802b17 	ldw	r18,172(sp)
   2381c:	d8002915 	stw	zero,164(sp)
   23820:	003b1706 	br	22480 <__alt_data_end+0xf8022480>
   23824:	04010034 	movhi	r16,1024
   23828:	84002404 	addi	r16,r16,144
   2382c:	003aa606 	br	222c8 <__alt_data_end+0xf80222c8>
   23830:	d9003917 	ldw	r4,228(sp)
   23834:	04001004 	movi	r16,64
   23838:	800b883a 	mov	r5,r16
   2383c:	0020e540 	call	20e54 <_malloc_r>
   23840:	d9002c17 	ldw	r4,176(sp)
   23844:	20800015 	stw	r2,0(r4)
   23848:	20800415 	stw	r2,16(r4)
   2384c:	1001cb26 	beq	r2,zero,23f7c <___svfprintf_internal_r+0x21b4>
   23850:	d8802c17 	ldw	r2,176(sp)
   23854:	14000515 	stw	r16,20(r2)
   23858:	00397606 	br	21e34 <__alt_data_end+0xf8021e34>
   2385c:	04010034 	movhi	r16,1024
   23860:	84002604 	addi	r16,r16,152
   23864:	003ee106 	br	233ec <__alt_data_end+0xf80233ec>
   23868:	d9402c17 	ldw	r5,176(sp)
   2386c:	d9801e04 	addi	r6,sp,120
   23870:	9809883a 	mov	r4,r19
   23874:	002aa940 	call	2aa94 <__ssprint_r>
   23878:	103a381e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   2387c:	dc402617 	ldw	r17,152(sp)
   23880:	d8c02017 	ldw	r3,128(sp)
   23884:	da000404 	addi	r8,sp,16
   23888:	003f4306 	br	23598 <__alt_data_end+0xf8023598>
   2388c:	01400184 	movi	r5,6
   23890:	d9402915 	stw	r5,164(sp)
   23894:	003f9506 	br	236ec <__alt_data_end+0xf80236ec>
   23898:	d9002d17 	ldw	r4,180(sp)
   2389c:	25000017 	ldw	r20,0(r4)
   238a0:	21000104 	addi	r4,r4,4
   238a4:	d9002d15 	stw	r4,180(sp)
   238a8:	a02dd7fa 	srai	r22,r20,31
   238ac:	b005883a 	mov	r2,r22
   238b0:	003a9b06 	br	22320 <__alt_data_end+0xf8022320>
   238b4:	d9402d17 	ldw	r5,180(sp)
   238b8:	002d883a 	mov	r22,zero
   238bc:	2d000017 	ldw	r20,0(r5)
   238c0:	29400104 	addi	r5,r5,4
   238c4:	d9402d15 	stw	r5,180(sp)
   238c8:	003bf906 	br	228b0 <__alt_data_end+0xf80228b0>
   238cc:	9480100c 	andi	r18,r18,64
   238d0:	90006e26 	beq	r18,zero,23a8c <___svfprintf_internal_r+0x1cc4>
   238d4:	d9002d17 	ldw	r4,180(sp)
   238d8:	d9402f17 	ldw	r5,188(sp)
   238dc:	20800017 	ldw	r2,0(r4)
   238e0:	21000104 	addi	r4,r4,4
   238e4:	d9002d15 	stw	r4,180(sp)
   238e8:	1140000d 	sth	r5,0(r2)
   238ec:	00396106 	br	21e74 <__alt_data_end+0xf8021e74>
   238f0:	d9402c17 	ldw	r5,176(sp)
   238f4:	d9801e04 	addi	r6,sp,120
   238f8:	9809883a 	mov	r4,r19
   238fc:	002aa940 	call	2aa94 <__ssprint_r>
   23900:	103a161e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23904:	d8c02017 	ldw	r3,128(sp)
   23908:	d8801f17 	ldw	r2,124(sp)
   2390c:	da000404 	addi	r8,sp,16
   23910:	d9403317 	ldw	r5,204(sp)
   23914:	10800044 	addi	r2,r2,1
   23918:	44000015 	stw	r16,0(r8)
   2391c:	28c7883a 	add	r3,r5,r3
   23920:	003b7706 	br	22700 <__alt_data_end+0xf8022700>
   23924:	8009883a 	mov	r4,r16
   23928:	da003e15 	stw	r8,248(sp)
   2392c:	0021d300 	call	21d30 <strlen>
   23930:	d8802e15 	stw	r2,184(sp)
   23934:	da003e17 	ldw	r8,248(sp)
   23938:	103c280e 	bge	r2,zero,229dc <__alt_data_end+0xf80229dc>
   2393c:	0005883a 	mov	r2,zero
   23940:	003c2606 	br	229dc <__alt_data_end+0xf80229dc>
   23944:	00bfffc4 	movi	r2,-1
   23948:	003a0906 	br	22170 <__alt_data_end+0xf8022170>
   2394c:	01010034 	movhi	r4,1024
   23950:	21003884 	addi	r4,r4,226
   23954:	d9003515 	stw	r4,212(sp)
   23958:	003b0606 	br	22574 <__alt_data_end+0xf8022574>
   2395c:	013fffc4 	movi	r4,-1
   23960:	003a2706 	br	22200 <__alt_data_end+0xf8022200>
   23964:	d9402c17 	ldw	r5,176(sp)
   23968:	d9801e04 	addi	r6,sp,120
   2396c:	9809883a 	mov	r4,r19
   23970:	002aa940 	call	2aa94 <__ssprint_r>
   23974:	1039f91e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23978:	d8c02017 	ldw	r3,128(sp)
   2397c:	da000404 	addi	r8,sp,16
   23980:	003d8406 	br	22f94 <__alt_data_end+0xf8022f94>
   23984:	0023883a 	mov	r17,zero
   23988:	003d8306 	br	22f98 <__alt_data_end+0xf8022f98>
   2398c:	01010034 	movhi	r4,1024
   23990:	21003484 	addi	r4,r4,210
   23994:	d9002b15 	stw	r4,172(sp)
   23998:	d9002b17 	ldw	r4,172(sp)
   2399c:	1c47883a 	add	r3,r3,r17
   239a0:	10800044 	addi	r2,r2,1
   239a4:	41000015 	stw	r4,0(r8)
   239a8:	44400115 	stw	r17,4(r8)
   239ac:	d8c02015 	stw	r3,128(sp)
   239b0:	d8801f15 	stw	r2,124(sp)
   239b4:	010001c4 	movi	r4,7
   239b8:	20bfcd16 	blt	r4,r2,238f0 <__alt_data_end+0xf80238f0>
   239bc:	42000204 	addi	r8,r8,8
   239c0:	003fd306 	br	23910 <__alt_data_end+0xf8023910>
   239c4:	d9402c17 	ldw	r5,176(sp)
   239c8:	d9801e04 	addi	r6,sp,120
   239cc:	9809883a 	mov	r4,r19
   239d0:	002aa940 	call	2aa94 <__ssprint_r>
   239d4:	1039e11e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   239d8:	d8802617 	ldw	r2,152(sp)
   239dc:	d8c02017 	ldw	r3,128(sp)
   239e0:	da000404 	addi	r8,sp,16
   239e4:	003e1c06 	br	23258 <__alt_data_end+0xf8023258>
   239e8:	d8802917 	ldw	r2,164(sp)
   239ec:	00c00184 	movi	r3,6
   239f0:	1880012e 	bgeu	r3,r2,239f8 <___svfprintf_internal_r+0x1c30>
   239f4:	1805883a 	mov	r2,r3
   239f8:	d8802e15 	stw	r2,184(sp)
   239fc:	1000f316 	blt	r2,zero,23dcc <___svfprintf_internal_r+0x2004>
   23a00:	04010034 	movhi	r16,1024
   23a04:	d8802a15 	stw	r2,168(sp)
   23a08:	dd002d15 	stw	r20,180(sp)
   23a0c:	d8002915 	stw	zero,164(sp)
   23a10:	d8003215 	stw	zero,200(sp)
   23a14:	84003204 	addi	r16,r16,200
   23a18:	0039883a 	mov	fp,zero
   23a1c:	003a9f06 	br	2249c <__alt_data_end+0xf802249c>
   23a20:	01010034 	movhi	r4,1024
   23a24:	21003884 	addi	r4,r4,226
   23a28:	d9003515 	stw	r4,212(sp)
   23a2c:	003b5f06 	br	227ac <__alt_data_end+0xf80227ac>
   23a30:	d9402c17 	ldw	r5,176(sp)
   23a34:	d9801e04 	addi	r6,sp,120
   23a38:	9809883a 	mov	r4,r19
   23a3c:	002aa940 	call	2aa94 <__ssprint_r>
   23a40:	1039c61e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23a44:	d8802617 	ldw	r2,152(sp)
   23a48:	d9403317 	ldw	r5,204(sp)
   23a4c:	d8c02017 	ldw	r3,128(sp)
   23a50:	da000404 	addi	r8,sp,16
   23a54:	2885c83a 	sub	r2,r5,r2
   23a58:	003e1006 	br	2329c <__alt_data_end+0xf802329c>
   23a5c:	00800044 	movi	r2,1
   23a60:	10803fcc 	andi	r2,r2,255
   23a64:	00c00044 	movi	r3,1
   23a68:	10fa3526 	beq	r2,r3,22340 <__alt_data_end+0xf8022340>
   23a6c:	00c00084 	movi	r3,2
   23a70:	10fb9e26 	beq	r2,r3,228ec <__alt_data_end+0xf80228ec>
   23a74:	003a6406 	br	22408 <__alt_data_end+0xf8022408>
   23a78:	0021883a 	mov	r16,zero
   23a7c:	003e0806 	br	232a0 <__alt_data_end+0xf80232a0>
   23a80:	07000b44 	movi	fp,45
   23a84:	df002785 	stb	fp,158(sp)
   23a88:	003a0b06 	br	222b8 <__alt_data_end+0xf80222b8>
   23a8c:	d8c02d17 	ldw	r3,180(sp)
   23a90:	d9002f17 	ldw	r4,188(sp)
   23a94:	18800017 	ldw	r2,0(r3)
   23a98:	18c00104 	addi	r3,r3,4
   23a9c:	d8c02d15 	stw	r3,180(sp)
   23aa0:	11000015 	stw	r4,0(r2)
   23aa4:	0038f306 	br	21e74 <__alt_data_end+0xf8021e74>
   23aa8:	00c00b44 	movi	r3,45
   23aac:	d8c02785 	stb	r3,158(sp)
   23ab0:	d8802a15 	stw	r2,168(sp)
   23ab4:	dc802b17 	ldw	r18,172(sp)
   23ab8:	d8002915 	stw	zero,164(sp)
   23abc:	07000b44 	movi	fp,45
   23ac0:	003a7306 	br	22490 <__alt_data_end+0xf8022490>
   23ac4:	9080004c 	andi	r2,r18,1
   23ac8:	1000941e 	bne	r2,zero,23d1c <___svfprintf_internal_r+0x1f54>
   23acc:	d8802117 	ldw	r2,132(sp)
   23ad0:	1405c83a 	sub	r2,r2,r16
   23ad4:	d8803315 	stw	r2,204(sp)
   23ad8:	b441161e 	bne	r22,r17,23f34 <___svfprintf_internal_r+0x216c>
   23adc:	dd802617 	ldw	r22,152(sp)
   23ae0:	00bfff44 	movi	r2,-3
   23ae4:	b0801a16 	blt	r22,r2,23b50 <___svfprintf_internal_r+0x1d88>
   23ae8:	d9402917 	ldw	r5,164(sp)
   23aec:	2d801816 	blt	r5,r22,23b50 <___svfprintf_internal_r+0x1d88>
   23af0:	dd803215 	stw	r22,200(sp)
   23af4:	003f3a06 	br	237e0 <__alt_data_end+0xf80237e0>
   23af8:	1025883a 	mov	r18,r2
   23afc:	0039883a 	mov	fp,zero
   23b00:	00800084 	movi	r2,2
   23b04:	003fd606 	br	23a60 <__alt_data_end+0xf8023a60>
   23b08:	9080004c 	andi	r2,r18,1
   23b0c:	103f191e 	bne	r2,zero,23774 <__alt_data_end+0xf8023774>
   23b10:	d8802117 	ldw	r2,132(sp)
   23b14:	003f2806 	br	237b8 <__alt_data_end+0xf80237b8>
   23b18:	01010034 	movhi	r4,1024
   23b1c:	21003484 	addi	r4,r4,210
   23b20:	d9002b15 	stw	r4,172(sp)
   23b24:	003c7c06 	br	22d18 <__alt_data_end+0xf8022d18>
   23b28:	e005883a 	mov	r2,fp
   23b2c:	003f2206 	br	237b8 <__alt_data_end+0xf80237b8>
   23b30:	d9402917 	ldw	r5,164(sp)
   23b34:	df002783 	ldbu	fp,158(sp)
   23b38:	dd002d15 	stw	r20,180(sp)
   23b3c:	d9402a15 	stw	r5,168(sp)
   23b40:	d9402e15 	stw	r5,184(sp)
   23b44:	d8002915 	stw	zero,164(sp)
   23b48:	d8003215 	stw	zero,200(sp)
   23b4c:	003a4c06 	br	22480 <__alt_data_end+0xf8022480>
   23b50:	8c7fff84 	addi	r17,r17,-2
   23b54:	b5bfffc4 	addi	r22,r22,-1
   23b58:	dd802615 	stw	r22,152(sp)
   23b5c:	dc4022c5 	stb	r17,139(sp)
   23b60:	b000c316 	blt	r22,zero,23e70 <___svfprintf_internal_r+0x20a8>
   23b64:	00800ac4 	movi	r2,43
   23b68:	d8802305 	stb	r2,140(sp)
   23b6c:	00800244 	movi	r2,9
   23b70:	15806e16 	blt	r2,r22,23d2c <___svfprintf_internal_r+0x1f64>
   23b74:	00800c04 	movi	r2,48
   23b78:	b5800c04 	addi	r22,r22,48
   23b7c:	d8802345 	stb	r2,141(sp)
   23b80:	dd802385 	stb	r22,142(sp)
   23b84:	d88023c4 	addi	r2,sp,143
   23b88:	df0022c4 	addi	fp,sp,139
   23b8c:	d8c03317 	ldw	r3,204(sp)
   23b90:	1739c83a 	sub	fp,r2,fp
   23b94:	d9003317 	ldw	r4,204(sp)
   23b98:	e0c7883a 	add	r3,fp,r3
   23b9c:	df003b15 	stw	fp,236(sp)
   23ba0:	d8c02e15 	stw	r3,184(sp)
   23ba4:	00800044 	movi	r2,1
   23ba8:	1100b70e 	bge	r2,r4,23e88 <___svfprintf_internal_r+0x20c0>
   23bac:	d8c02e17 	ldw	r3,184(sp)
   23bb0:	18c00044 	addi	r3,r3,1
   23bb4:	d8c02e15 	stw	r3,184(sp)
   23bb8:	1805883a 	mov	r2,r3
   23bbc:	1800b016 	blt	r3,zero,23e80 <___svfprintf_internal_r+0x20b8>
   23bc0:	d8003215 	stw	zero,200(sp)
   23bc4:	003f1006 	br	23808 <__alt_data_end+0xf8023808>
   23bc8:	d8802917 	ldw	r2,164(sp)
   23bcc:	103ec71e 	bne	r2,zero,236ec <__alt_data_end+0xf80236ec>
   23bd0:	dc002915 	stw	r16,164(sp)
   23bd4:	003ec506 	br	236ec <__alt_data_end+0xf80236ec>
   23bd8:	d9402c17 	ldw	r5,176(sp)
   23bdc:	d9801e04 	addi	r6,sp,120
   23be0:	9809883a 	mov	r4,r19
   23be4:	002aa940 	call	2aa94 <__ssprint_r>
   23be8:	10395c1e 	bne	r2,zero,2215c <__alt_data_end+0xf802215c>
   23bec:	dc402617 	ldw	r17,152(sp)
   23bf0:	d8c02017 	ldw	r3,128(sp)
   23bf4:	d8801f17 	ldw	r2,124(sp)
   23bf8:	da000404 	addi	r8,sp,16
   23bfc:	003e7706 	br	235dc <__alt_data_end+0xf80235dc>
   23c00:	582f883a 	mov	r23,r11
   23c04:	d8002915 	stw	zero,164(sp)
   23c08:	0038c406 	br	21f1c <__alt_data_end+0xf8021f1c>
   23c0c:	d8c02917 	ldw	r3,164(sp)
   23c10:	d8802104 	addi	r2,sp,132
   23c14:	d8800315 	stw	r2,12(sp)
   23c18:	d9403617 	ldw	r5,216(sp)
   23c1c:	d8802504 	addi	r2,sp,148
   23c20:	d8800215 	stw	r2,8(sp)
   23c24:	d8802604 	addi	r2,sp,152
   23c28:	d8c00015 	stw	r3,0(sp)
   23c2c:	9809883a 	mov	r4,r19
   23c30:	d8800115 	stw	r2,4(sp)
   23c34:	01c000c4 	movi	r7,3
   23c38:	a00d883a 	mov	r6,r20
   23c3c:	da003e15 	stw	r8,248(sp)
   23c40:	00266780 	call	26678 <_dtoa_r>
   23c44:	d9002917 	ldw	r4,164(sp)
   23c48:	da003e17 	ldw	r8,248(sp)
   23c4c:	1021883a 	mov	r16,r2
   23c50:	1139883a 	add	fp,r2,r4
   23c54:	2007883a 	mov	r3,r4
   23c58:	81000007 	ldb	r4,0(r16)
   23c5c:	00800c04 	movi	r2,48
   23c60:	20806f26 	beq	r4,r2,23e20 <___svfprintf_internal_r+0x2058>
   23c64:	d8c02617 	ldw	r3,152(sp)
   23c68:	e0f9883a 	add	fp,fp,r3
   23c6c:	003ec206 	br	23778 <__alt_data_end+0xf8023778>
   23c70:	00c00b44 	movi	r3,45
   23c74:	2520003c 	xorhi	r20,r4,32768
   23c78:	d8c02a05 	stb	r3,168(sp)
   23c7c:	003ea106 	br	23704 <__alt_data_end+0xf8023704>
   23c80:	d8c03217 	ldw	r3,200(sp)
   23c84:	00c0890e 	bge	zero,r3,23eac <___svfprintf_internal_r+0x20e4>
   23c88:	00800044 	movi	r2,1
   23c8c:	d9003317 	ldw	r4,204(sp)
   23c90:	1105883a 	add	r2,r2,r4
   23c94:	d8802e15 	stw	r2,184(sp)
   23c98:	10005f16 	blt	r2,zero,23e18 <___svfprintf_internal_r+0x2050>
   23c9c:	044019c4 	movi	r17,103
   23ca0:	003ed906 	br	23808 <__alt_data_end+0xf8023808>
   23ca4:	d9002917 	ldw	r4,164(sp)
   23ca8:	20c00044 	addi	r3,r4,1
   23cac:	003e9c06 	br	23720 <__alt_data_end+0xf8023720>
   23cb0:	d9002917 	ldw	r4,164(sp)
   23cb4:	00c0680e 	bge	zero,r3,23e58 <___svfprintf_internal_r+0x2090>
   23cb8:	2000461e 	bne	r4,zero,23dd4 <___svfprintf_internal_r+0x200c>
   23cbc:	9480004c 	andi	r18,r18,1
   23cc0:	9000441e 	bne	r18,zero,23dd4 <___svfprintf_internal_r+0x200c>
   23cc4:	1805883a 	mov	r2,r3
   23cc8:	1800a016 	blt	r3,zero,23f4c <___svfprintf_internal_r+0x2184>
   23ccc:	d8c03217 	ldw	r3,200(sp)
   23cd0:	d8c02e15 	stw	r3,184(sp)
   23cd4:	003ecc06 	br	23808 <__alt_data_end+0xf8023808>
   23cd8:	d9402917 	ldw	r5,164(sp)
   23cdc:	d8802104 	addi	r2,sp,132
   23ce0:	d8800315 	stw	r2,12(sp)
   23ce4:	d9400015 	stw	r5,0(sp)
   23ce8:	d8802504 	addi	r2,sp,148
   23cec:	d9403617 	ldw	r5,216(sp)
   23cf0:	d8800215 	stw	r2,8(sp)
   23cf4:	d8802604 	addi	r2,sp,152
   23cf8:	d8800115 	stw	r2,4(sp)
   23cfc:	01c000c4 	movi	r7,3
   23d00:	a00d883a 	mov	r6,r20
   23d04:	9809883a 	mov	r4,r19
   23d08:	da003e15 	stw	r8,248(sp)
   23d0c:	00266780 	call	26678 <_dtoa_r>
   23d10:	d8c02917 	ldw	r3,164(sp)
   23d14:	da003e17 	ldw	r8,248(sp)
   23d18:	1021883a 	mov	r16,r2
   23d1c:	00801184 	movi	r2,70
   23d20:	80f9883a 	add	fp,r16,r3
   23d24:	88bfcc26 	beq	r17,r2,23c58 <__alt_data_end+0xf8023c58>
   23d28:	003e9306 	br	23778 <__alt_data_end+0xf8023778>
   23d2c:	df0022c4 	addi	fp,sp,139
   23d30:	dc002915 	stw	r16,164(sp)
   23d34:	9829883a 	mov	r20,r19
   23d38:	e021883a 	mov	r16,fp
   23d3c:	4027883a 	mov	r19,r8
   23d40:	b009883a 	mov	r4,r22
   23d44:	01400284 	movi	r5,10
   23d48:	002e72c0 	call	2e72c <__modsi3>
   23d4c:	10800c04 	addi	r2,r2,48
   23d50:	843fffc4 	addi	r16,r16,-1
   23d54:	b009883a 	mov	r4,r22
   23d58:	01400284 	movi	r5,10
   23d5c:	80800005 	stb	r2,0(r16)
   23d60:	002e6a80 	call	2e6a8 <__divsi3>
   23d64:	102d883a 	mov	r22,r2
   23d68:	00800244 	movi	r2,9
   23d6c:	15bff416 	blt	r2,r22,23d40 <__alt_data_end+0xf8023d40>
   23d70:	9811883a 	mov	r8,r19
   23d74:	b0800c04 	addi	r2,r22,48
   23d78:	a027883a 	mov	r19,r20
   23d7c:	8029883a 	mov	r20,r16
   23d80:	a17fffc4 	addi	r5,r20,-1
   23d84:	a0bfffc5 	stb	r2,-1(r20)
   23d88:	dc002917 	ldw	r16,164(sp)
   23d8c:	2f00752e 	bgeu	r5,fp,23f64 <___svfprintf_internal_r+0x219c>
   23d90:	d9c02384 	addi	r7,sp,142
   23d94:	3d0fc83a 	sub	r7,r7,r20
   23d98:	d9002344 	addi	r4,sp,141
   23d9c:	e1cf883a 	add	r7,fp,r7
   23da0:	00000106 	br	23da8 <___svfprintf_internal_r+0x1fe0>
   23da4:	28800003 	ldbu	r2,0(r5)
   23da8:	20800005 	stb	r2,0(r4)
   23dac:	21000044 	addi	r4,r4,1
   23db0:	29400044 	addi	r5,r5,1
   23db4:	21fffb1e 	bne	r4,r7,23da4 <__alt_data_end+0xf8023da4>
   23db8:	d8802304 	addi	r2,sp,140
   23dbc:	1505c83a 	sub	r2,r2,r20
   23dc0:	d8c02344 	addi	r3,sp,141
   23dc4:	1885883a 	add	r2,r3,r2
   23dc8:	003f7006 	br	23b8c <__alt_data_end+0xf8023b8c>
   23dcc:	0005883a 	mov	r2,zero
   23dd0:	003f0b06 	br	23a00 <__alt_data_end+0xf8023a00>
   23dd4:	d9002917 	ldw	r4,164(sp)
   23dd8:	d8c03217 	ldw	r3,200(sp)
   23ddc:	20800044 	addi	r2,r4,1
   23de0:	1885883a 	add	r2,r3,r2
   23de4:	d8802e15 	stw	r2,184(sp)
   23de8:	103e870e 	bge	r2,zero,23808 <__alt_data_end+0xf8023808>
   23dec:	0005883a 	mov	r2,zero
   23df0:	003e8506 	br	23808 <__alt_data_end+0xf8023808>
   23df4:	01010034 	movhi	r4,1024
   23df8:	21003484 	addi	r4,r4,210
   23dfc:	d9002b15 	stw	r4,172(sp)
   23e00:	003cc506 	br	23118 <__alt_data_end+0xf8023118>
   23e04:	d8c03217 	ldw	r3,200(sp)
   23e08:	18c00044 	addi	r3,r3,1
   23e0c:	d8c02e15 	stw	r3,184(sp)
   23e10:	1805883a 	mov	r2,r3
   23e14:	183fa10e 	bge	r3,zero,23c9c <__alt_data_end+0xf8023c9c>
   23e18:	0005883a 	mov	r2,zero
   23e1c:	003f9f06 	br	23c9c <__alt_data_end+0xf8023c9c>
   23e20:	d9003617 	ldw	r4,216(sp)
   23e24:	000d883a 	mov	r6,zero
   23e28:	000f883a 	mov	r7,zero
   23e2c:	a00b883a 	mov	r5,r20
   23e30:	d8c03d15 	stw	r3,244(sp)
   23e34:	da003e15 	stw	r8,248(sp)
   23e38:	002f9f00 	call	2f9f0 <__eqdf2>
   23e3c:	d8c03d17 	ldw	r3,244(sp)
   23e40:	da003e17 	ldw	r8,248(sp)
   23e44:	103f8726 	beq	r2,zero,23c64 <__alt_data_end+0xf8023c64>
   23e48:	00800044 	movi	r2,1
   23e4c:	10c7c83a 	sub	r3,r2,r3
   23e50:	d8c02615 	stw	r3,152(sp)
   23e54:	003f8406 	br	23c68 <__alt_data_end+0xf8023c68>
   23e58:	20000e1e 	bne	r4,zero,23e94 <___svfprintf_internal_r+0x20cc>
   23e5c:	9480004c 	andi	r18,r18,1
   23e60:	90000c1e 	bne	r18,zero,23e94 <___svfprintf_internal_r+0x20cc>
   23e64:	00800044 	movi	r2,1
   23e68:	d8802e15 	stw	r2,184(sp)
   23e6c:	003e6606 	br	23808 <__alt_data_end+0xf8023808>
   23e70:	00800b44 	movi	r2,45
   23e74:	05adc83a 	sub	r22,zero,r22
   23e78:	d8802305 	stb	r2,140(sp)
   23e7c:	003f3b06 	br	23b6c <__alt_data_end+0xf8023b6c>
   23e80:	0005883a 	mov	r2,zero
   23e84:	003f4e06 	br	23bc0 <__alt_data_end+0xf8023bc0>
   23e88:	90a4703a 	and	r18,r18,r2
   23e8c:	903f4a26 	beq	r18,zero,23bb8 <__alt_data_end+0xf8023bb8>
   23e90:	003f4606 	br	23bac <__alt_data_end+0xf8023bac>
   23e94:	d8c02917 	ldw	r3,164(sp)
   23e98:	18c00084 	addi	r3,r3,2
   23e9c:	d8c02e15 	stw	r3,184(sp)
   23ea0:	1805883a 	mov	r2,r3
   23ea4:	183e580e 	bge	r3,zero,23808 <__alt_data_end+0xf8023808>
   23ea8:	003fd006 	br	23dec <__alt_data_end+0xf8023dec>
   23eac:	00800084 	movi	r2,2
   23eb0:	10c5c83a 	sub	r2,r2,r3
   23eb4:	003f7506 	br	23c8c <__alt_data_end+0xf8023c8c>
   23eb8:	d8802d17 	ldw	r2,180(sp)
   23ebc:	d9002d17 	ldw	r4,180(sp)
   23ec0:	bc400043 	ldbu	r17,1(r23)
   23ec4:	10800017 	ldw	r2,0(r2)
   23ec8:	582f883a 	mov	r23,r11
   23ecc:	d8802915 	stw	r2,164(sp)
   23ed0:	20800104 	addi	r2,r4,4
   23ed4:	d9002917 	ldw	r4,164(sp)
   23ed8:	d8802d15 	stw	r2,180(sp)
   23edc:	203df00e 	bge	r4,zero,236a0 <__alt_data_end+0xf80236a0>
   23ee0:	8c403fcc 	andi	r17,r17,255
   23ee4:	00bfffc4 	movi	r2,-1
   23ee8:	8c40201c 	xori	r17,r17,128
   23eec:	d8802915 	stw	r2,164(sp)
   23ef0:	8c7fe004 	addi	r17,r17,-128
   23ef4:	00380806 	br	21f18 <__alt_data_end+0xf8021f18>
   23ef8:	9080004c 	andi	r2,r18,1
   23efc:	0039883a 	mov	fp,zero
   23f00:	10000726 	beq	r2,zero,23f20 <___svfprintf_internal_r+0x2158>
   23f04:	d8c02817 	ldw	r3,160(sp)
   23f08:	dc001dc4 	addi	r16,sp,119
   23f0c:	00800c04 	movi	r2,48
   23f10:	1c07c83a 	sub	r3,r3,r16
   23f14:	d8801dc5 	stb	r2,119(sp)
   23f18:	d8c02e15 	stw	r3,184(sp)
   23f1c:	00395206 	br	22468 <__alt_data_end+0xf8022468>
   23f20:	d8002e15 	stw	zero,184(sp)
   23f24:	dc001e04 	addi	r16,sp,120
   23f28:	00394f06 	br	22468 <__alt_data_end+0xf8022468>
   23f2c:	0005883a 	mov	r2,zero
   23f30:	003e3206 	br	237fc <__alt_data_end+0xf80237fc>
   23f34:	dd802617 	ldw	r22,152(sp)
   23f38:	003f0606 	br	23b54 <__alt_data_end+0xf8023b54>
   23f3c:	d9c02785 	stb	r7,158(sp)
   23f40:	003a5106 	br	22888 <__alt_data_end+0xf8022888>
   23f44:	d9c02785 	stb	r7,158(sp)
   23f48:	003a3706 	br	22828 <__alt_data_end+0xf8022828>
   23f4c:	0005883a 	mov	r2,zero
   23f50:	003f5e06 	br	23ccc <__alt_data_end+0xf8023ccc>
   23f54:	d9c02785 	stb	r7,158(sp)
   23f58:	00391706 	br	223b8 <__alt_data_end+0xf80223b8>
   23f5c:	d9c02785 	stb	r7,158(sp)
   23f60:	0038e606 	br	222fc <__alt_data_end+0xf80222fc>
   23f64:	d8802344 	addi	r2,sp,141
   23f68:	003f0806 	br	23b8c <__alt_data_end+0xf8023b8c>
   23f6c:	d9c02785 	stb	r7,158(sp)
   23f70:	0038b706 	br	22250 <__alt_data_end+0xf8022250>
   23f74:	d9c02785 	stb	r7,158(sp)
   23f78:	003adc06 	br	22aec <__alt_data_end+0xf8022aec>
   23f7c:	d9403917 	ldw	r5,228(sp)
   23f80:	00800304 	movi	r2,12
   23f84:	28800015 	stw	r2,0(r5)
   23f88:	00bfffc4 	movi	r2,-1
   23f8c:	00387806 	br	22170 <__alt_data_end+0xf8022170>
   23f90:	d9c02785 	stb	r7,158(sp)
   23f94:	003abf06 	br	22a94 <__alt_data_end+0xf8022a94>
   23f98:	d9c02785 	stb	r7,158(sp)
   23f9c:	003a9b06 	br	22a0c <__alt_data_end+0xf8022a0c>

00023fa0 <___vfprintf_internal_r>:
   23fa0:	deffb804 	addi	sp,sp,-288
   23fa4:	dfc04715 	stw	ra,284(sp)
   23fa8:	ddc04515 	stw	r23,276(sp)
   23fac:	dd404315 	stw	r21,268(sp)
   23fb0:	d9002c15 	stw	r4,176(sp)
   23fb4:	282f883a 	mov	r23,r5
   23fb8:	302b883a 	mov	r21,r6
   23fbc:	d9c02d15 	stw	r7,180(sp)
   23fc0:	df004615 	stw	fp,280(sp)
   23fc4:	dd804415 	stw	r22,272(sp)
   23fc8:	dd004215 	stw	r20,264(sp)
   23fcc:	dcc04115 	stw	r19,260(sp)
   23fd0:	dc804015 	stw	r18,256(sp)
   23fd4:	dc403f15 	stw	r17,252(sp)
   23fd8:	dc003e15 	stw	r16,248(sp)
   23fdc:	0028f6c0 	call	28f6c <_localeconv_r>
   23fe0:	10800017 	ldw	r2,0(r2)
   23fe4:	1009883a 	mov	r4,r2
   23fe8:	d8803415 	stw	r2,208(sp)
   23fec:	0021d300 	call	21d30 <strlen>
   23ff0:	d8803715 	stw	r2,220(sp)
   23ff4:	d8802c17 	ldw	r2,176(sp)
   23ff8:	10000226 	beq	r2,zero,24004 <___vfprintf_internal_r+0x64>
   23ffc:	10800e17 	ldw	r2,56(r2)
   24000:	1000f926 	beq	r2,zero,243e8 <___vfprintf_internal_r+0x448>
   24004:	b880030b 	ldhu	r2,12(r23)
   24008:	10c8000c 	andi	r3,r2,8192
   2400c:	1800061e 	bne	r3,zero,24028 <___vfprintf_internal_r+0x88>
   24010:	b9001917 	ldw	r4,100(r23)
   24014:	00f7ffc4 	movi	r3,-8193
   24018:	10880014 	ori	r2,r2,8192
   2401c:	20c6703a 	and	r3,r4,r3
   24020:	b880030d 	sth	r2,12(r23)
   24024:	b8c01915 	stw	r3,100(r23)
   24028:	10c0020c 	andi	r3,r2,8
   2402c:	1800c126 	beq	r3,zero,24334 <___vfprintf_internal_r+0x394>
   24030:	b8c00417 	ldw	r3,16(r23)
   24034:	1800bf26 	beq	r3,zero,24334 <___vfprintf_internal_r+0x394>
   24038:	1080068c 	andi	r2,r2,26
   2403c:	00c00284 	movi	r3,10
   24040:	10c0c426 	beq	r2,r3,24354 <___vfprintf_internal_r+0x3b4>
   24044:	d8c00404 	addi	r3,sp,16
   24048:	05010034 	movhi	r20,1024
   2404c:	d9001e04 	addi	r4,sp,120
   24050:	a5003c84 	addi	r20,r20,242
   24054:	d8c01e15 	stw	r3,120(sp)
   24058:	d8002015 	stw	zero,128(sp)
   2405c:	d8001f15 	stw	zero,124(sp)
   24060:	d8003315 	stw	zero,204(sp)
   24064:	d8003615 	stw	zero,216(sp)
   24068:	d8003815 	stw	zero,224(sp)
   2406c:	1811883a 	mov	r8,r3
   24070:	d8003915 	stw	zero,228(sp)
   24074:	d8003a15 	stw	zero,232(sp)
   24078:	d8002f15 	stw	zero,188(sp)
   2407c:	d9002815 	stw	r4,160(sp)
   24080:	a8800007 	ldb	r2,0(r21)
   24084:	10027b26 	beq	r2,zero,24a74 <___vfprintf_internal_r+0xad4>
   24088:	00c00944 	movi	r3,37
   2408c:	a821883a 	mov	r16,r21
   24090:	10c0021e 	bne	r2,r3,2409c <___vfprintf_internal_r+0xfc>
   24094:	00001406 	br	240e8 <___vfprintf_internal_r+0x148>
   24098:	10c00326 	beq	r2,r3,240a8 <___vfprintf_internal_r+0x108>
   2409c:	84000044 	addi	r16,r16,1
   240a0:	80800007 	ldb	r2,0(r16)
   240a4:	103ffc1e 	bne	r2,zero,24098 <__alt_data_end+0xf8024098>
   240a8:	8563c83a 	sub	r17,r16,r21
   240ac:	88000e26 	beq	r17,zero,240e8 <___vfprintf_internal_r+0x148>
   240b0:	d8c02017 	ldw	r3,128(sp)
   240b4:	d8801f17 	ldw	r2,124(sp)
   240b8:	45400015 	stw	r21,0(r8)
   240bc:	1c47883a 	add	r3,r3,r17
   240c0:	10800044 	addi	r2,r2,1
   240c4:	d8c02015 	stw	r3,128(sp)
   240c8:	44400115 	stw	r17,4(r8)
   240cc:	d8801f15 	stw	r2,124(sp)
   240d0:	00c001c4 	movi	r3,7
   240d4:	1880a716 	blt	r3,r2,24374 <___vfprintf_internal_r+0x3d4>
   240d8:	42000204 	addi	r8,r8,8
   240dc:	d9402f17 	ldw	r5,188(sp)
   240e0:	2c4b883a 	add	r5,r5,r17
   240e4:	d9402f15 	stw	r5,188(sp)
   240e8:	80800007 	ldb	r2,0(r16)
   240ec:	1000a826 	beq	r2,zero,24390 <___vfprintf_internal_r+0x3f0>
   240f0:	84400047 	ldb	r17,1(r16)
   240f4:	00bfffc4 	movi	r2,-1
   240f8:	85400044 	addi	r21,r16,1
   240fc:	d8002785 	stb	zero,158(sp)
   24100:	0007883a 	mov	r3,zero
   24104:	000f883a 	mov	r7,zero
   24108:	d8802915 	stw	r2,164(sp)
   2410c:	d8003115 	stw	zero,196(sp)
   24110:	0025883a 	mov	r18,zero
   24114:	01401604 	movi	r5,88
   24118:	01800244 	movi	r6,9
   2411c:	02800a84 	movi	r10,42
   24120:	02401b04 	movi	r9,108
   24124:	ad400044 	addi	r21,r21,1
   24128:	88bff804 	addi	r2,r17,-32
   2412c:	28830436 	bltu	r5,r2,24d40 <___vfprintf_internal_r+0xda0>
   24130:	100490ba 	slli	r2,r2,2
   24134:	010000b4 	movhi	r4,2
   24138:	21105204 	addi	r4,r4,16712
   2413c:	1105883a 	add	r2,r2,r4
   24140:	10800017 	ldw	r2,0(r2)
   24144:	1000683a 	jmp	r2
   24148:	00024c60 	cmpeqi	zero,zero,2353
   2414c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24150:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24154:	00024c80 	call	24c8 <__alt_mem_onchip_memory2_0-0x1db38>
   24158:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2415c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24160:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24164:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24168:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2416c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24170:	000243f4 	movhi	zero,2319
   24174:	00024b9c 	xori	zero,zero,2350
   24178:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2417c:	000242bc 	xorhi	zero,zero,2314
   24180:	0002441c 	xori	zero,zero,2320
   24184:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24188:	0002445c 	xori	zero,zero,2321
   2418c:	00024468 	cmpgeui	zero,zero,2321
   24190:	00024468 	cmpgeui	zero,zero,2321
   24194:	00024468 	cmpgeui	zero,zero,2321
   24198:	00024468 	cmpgeui	zero,zero,2321
   2419c:	00024468 	cmpgeui	zero,zero,2321
   241a0:	00024468 	cmpgeui	zero,zero,2321
   241a4:	00024468 	cmpgeui	zero,zero,2321
   241a8:	00024468 	cmpgeui	zero,zero,2321
   241ac:	00024468 	cmpgeui	zero,zero,2321
   241b0:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241b4:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241b8:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241bc:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241c0:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241c4:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241c8:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241cc:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241d0:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241d4:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241d8:	0002449c 	xori	zero,zero,2322
   241dc:	00024558 	cmpnei	zero,zero,2325
   241e0:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241e4:	00024558 	cmpnei	zero,zero,2325
   241e8:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241ec:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241f0:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241f4:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   241f8:	000245f8 	rdprs	zero,zero,2327
   241fc:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24200:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24204:	00024604 	movi	zero,2328
   24208:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2420c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24210:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24214:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24218:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2421c:	00024a7c 	xorhi	zero,zero,2345
   24220:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24224:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24228:	00024adc 	xori	zero,zero,2347
   2422c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24230:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24234:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24238:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2423c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24240:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24244:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24248:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2424c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24250:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24254:	00024cec 	andhi	zero,zero,2355
   24258:	00024c8c 	andi	zero,zero,2354
   2425c:	00024558 	cmpnei	zero,zero,2325
   24260:	00024558 	cmpnei	zero,zero,2325
   24264:	00024558 	cmpnei	zero,zero,2325
   24268:	00024c9c 	xori	zero,zero,2354
   2426c:	00024c8c 	andi	zero,zero,2354
   24270:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24274:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24278:	00024ca8 	cmpgeui	zero,zero,2354
   2427c:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24280:	00024cb8 	rdprs	zero,zero,2354
   24284:	00024b8c 	andi	zero,zero,2350
   24288:	000242c8 	cmpgei	zero,zero,2315
   2428c:	00024bac 	andhi	zero,zero,2350
   24290:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   24294:	00024bb8 	rdprs	zero,zero,2350
   24298:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   2429c:	00024c14 	movui	zero,2352
   242a0:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   242a4:	00024d40 	call	24d4 <__alt_mem_onchip_memory2_0-0x1db2c>
   242a8:	00024c24 	muli	zero,zero,2352
   242ac:	d9003117 	ldw	r4,196(sp)
   242b0:	d8802d15 	stw	r2,180(sp)
   242b4:	0109c83a 	sub	r4,zero,r4
   242b8:	d9003115 	stw	r4,196(sp)
   242bc:	94800114 	ori	r18,r18,4
   242c0:	ac400007 	ldb	r17,0(r21)
   242c4:	003f9706 	br	24124 <__alt_data_end+0xf8024124>
   242c8:	00800c04 	movi	r2,48
   242cc:	d9002d17 	ldw	r4,180(sp)
   242d0:	d9402917 	ldw	r5,164(sp)
   242d4:	d8802705 	stb	r2,156(sp)
   242d8:	00801e04 	movi	r2,120
   242dc:	d8802745 	stb	r2,157(sp)
   242e0:	d8002785 	stb	zero,158(sp)
   242e4:	20c00104 	addi	r3,r4,4
   242e8:	24c00017 	ldw	r19,0(r4)
   242ec:	002d883a 	mov	r22,zero
   242f0:	90800094 	ori	r2,r18,2
   242f4:	28029a16 	blt	r5,zero,24d60 <___vfprintf_internal_r+0xdc0>
   242f8:	00bfdfc4 	movi	r2,-129
   242fc:	90a4703a 	and	r18,r18,r2
   24300:	d8c02d15 	stw	r3,180(sp)
   24304:	94800094 	ori	r18,r18,2
   24308:	9802871e 	bne	r19,zero,24d28 <___vfprintf_internal_r+0xd88>
   2430c:	00810034 	movhi	r2,1024
   24310:	10802d04 	addi	r2,r2,180
   24314:	d8803915 	stw	r2,228(sp)
   24318:	04401e04 	movi	r17,120
   2431c:	d8802917 	ldw	r2,164(sp)
   24320:	0039883a 	mov	fp,zero
   24324:	1001e926 	beq	r2,zero,24acc <___vfprintf_internal_r+0xb2c>
   24328:	0027883a 	mov	r19,zero
   2432c:	002d883a 	mov	r22,zero
   24330:	00020506 	br	24b48 <___vfprintf_internal_r+0xba8>
   24334:	d9002c17 	ldw	r4,176(sp)
   24338:	b80b883a 	mov	r5,r23
   2433c:	00262d00 	call	262d0 <__swsetup_r>
   24340:	1005ac1e 	bne	r2,zero,259f4 <___vfprintf_internal_r+0x1a54>
   24344:	b880030b 	ldhu	r2,12(r23)
   24348:	00c00284 	movi	r3,10
   2434c:	1080068c 	andi	r2,r2,26
   24350:	10ff3c1e 	bne	r2,r3,24044 <__alt_data_end+0xf8024044>
   24354:	b880038f 	ldh	r2,14(r23)
   24358:	103f3a16 	blt	r2,zero,24044 <__alt_data_end+0xf8024044>
   2435c:	d9c02d17 	ldw	r7,180(sp)
   24360:	d9002c17 	ldw	r4,176(sp)
   24364:	a80d883a 	mov	r6,r21
   24368:	b80b883a 	mov	r5,r23
   2436c:	00261b40 	call	261b4 <__sbprintf>
   24370:	00001106 	br	243b8 <___vfprintf_internal_r+0x418>
   24374:	d9002c17 	ldw	r4,176(sp)
   24378:	d9801e04 	addi	r6,sp,120
   2437c:	b80b883a 	mov	r5,r23
   24380:	002bf9c0 	call	2bf9c <__sprint_r>
   24384:	1000081e 	bne	r2,zero,243a8 <___vfprintf_internal_r+0x408>
   24388:	da000404 	addi	r8,sp,16
   2438c:	003f5306 	br	240dc <__alt_data_end+0xf80240dc>
   24390:	d8802017 	ldw	r2,128(sp)
   24394:	10000426 	beq	r2,zero,243a8 <___vfprintf_internal_r+0x408>
   24398:	d9002c17 	ldw	r4,176(sp)
   2439c:	d9801e04 	addi	r6,sp,120
   243a0:	b80b883a 	mov	r5,r23
   243a4:	002bf9c0 	call	2bf9c <__sprint_r>
   243a8:	b880030b 	ldhu	r2,12(r23)
   243ac:	1080100c 	andi	r2,r2,64
   243b0:	1005901e 	bne	r2,zero,259f4 <___vfprintf_internal_r+0x1a54>
   243b4:	d8802f17 	ldw	r2,188(sp)
   243b8:	dfc04717 	ldw	ra,284(sp)
   243bc:	df004617 	ldw	fp,280(sp)
   243c0:	ddc04517 	ldw	r23,276(sp)
   243c4:	dd804417 	ldw	r22,272(sp)
   243c8:	dd404317 	ldw	r21,268(sp)
   243cc:	dd004217 	ldw	r20,264(sp)
   243d0:	dcc04117 	ldw	r19,260(sp)
   243d4:	dc804017 	ldw	r18,256(sp)
   243d8:	dc403f17 	ldw	r17,252(sp)
   243dc:	dc003e17 	ldw	r16,248(sp)
   243e0:	dec04804 	addi	sp,sp,288
   243e4:	f800283a 	ret
   243e8:	d9002c17 	ldw	r4,176(sp)
   243ec:	00282f80 	call	282f8 <__sinit>
   243f0:	003f0406 	br	24004 <__alt_data_end+0xf8024004>
   243f4:	d8802d17 	ldw	r2,180(sp)
   243f8:	d9002d17 	ldw	r4,180(sp)
   243fc:	10800017 	ldw	r2,0(r2)
   24400:	d8803115 	stw	r2,196(sp)
   24404:	20800104 	addi	r2,r4,4
   24408:	d9003117 	ldw	r4,196(sp)
   2440c:	203fa716 	blt	r4,zero,242ac <__alt_data_end+0xf80242ac>
   24410:	d8802d15 	stw	r2,180(sp)
   24414:	ac400007 	ldb	r17,0(r21)
   24418:	003f4206 	br	24124 <__alt_data_end+0xf8024124>
   2441c:	ac400007 	ldb	r17,0(r21)
   24420:	aac00044 	addi	r11,r21,1
   24424:	8a872826 	beq	r17,r10,260c8 <___vfprintf_internal_r+0x2128>
   24428:	88bff404 	addi	r2,r17,-48
   2442c:	0009883a 	mov	r4,zero
   24430:	30867d36 	bltu	r6,r2,25e28 <___vfprintf_internal_r+0x1e88>
   24434:	5c400007 	ldb	r17,0(r11)
   24438:	210002a4 	muli	r4,r4,10
   2443c:	5d400044 	addi	r21,r11,1
   24440:	a817883a 	mov	r11,r21
   24444:	2089883a 	add	r4,r4,r2
   24448:	88bff404 	addi	r2,r17,-48
   2444c:	30bff92e 	bgeu	r6,r2,24434 <__alt_data_end+0xf8024434>
   24450:	2005c916 	blt	r4,zero,25b78 <___vfprintf_internal_r+0x1bd8>
   24454:	d9002915 	stw	r4,164(sp)
   24458:	003f3306 	br	24128 <__alt_data_end+0xf8024128>
   2445c:	94802014 	ori	r18,r18,128
   24460:	ac400007 	ldb	r17,0(r21)
   24464:	003f2f06 	br	24124 <__alt_data_end+0xf8024124>
   24468:	a809883a 	mov	r4,r21
   2446c:	d8003115 	stw	zero,196(sp)
   24470:	88bff404 	addi	r2,r17,-48
   24474:	0017883a 	mov	r11,zero
   24478:	24400007 	ldb	r17,0(r4)
   2447c:	5ac002a4 	muli	r11,r11,10
   24480:	ad400044 	addi	r21,r21,1
   24484:	a809883a 	mov	r4,r21
   24488:	12d7883a 	add	r11,r2,r11
   2448c:	88bff404 	addi	r2,r17,-48
   24490:	30bff92e 	bgeu	r6,r2,24478 <__alt_data_end+0xf8024478>
   24494:	dac03115 	stw	r11,196(sp)
   24498:	003f2306 	br	24128 <__alt_data_end+0xf8024128>
   2449c:	18c03fcc 	andi	r3,r3,255
   244a0:	18072b1e 	bne	r3,zero,26150 <___vfprintf_internal_r+0x21b0>
   244a4:	94800414 	ori	r18,r18,16
   244a8:	9080080c 	andi	r2,r18,32
   244ac:	10037b26 	beq	r2,zero,2529c <___vfprintf_internal_r+0x12fc>
   244b0:	d9402d17 	ldw	r5,180(sp)
   244b4:	28800117 	ldw	r2,4(r5)
   244b8:	2cc00017 	ldw	r19,0(r5)
   244bc:	29400204 	addi	r5,r5,8
   244c0:	d9402d15 	stw	r5,180(sp)
   244c4:	102d883a 	mov	r22,r2
   244c8:	10044b16 	blt	r2,zero,255f8 <___vfprintf_internal_r+0x1658>
   244cc:	d9402917 	ldw	r5,164(sp)
   244d0:	df002783 	ldbu	fp,158(sp)
   244d4:	2803bc16 	blt	r5,zero,253c8 <___vfprintf_internal_r+0x1428>
   244d8:	00ffdfc4 	movi	r3,-129
   244dc:	9d84b03a 	or	r2,r19,r22
   244e0:	90e4703a 	and	r18,r18,r3
   244e4:	10017726 	beq	r2,zero,24ac4 <___vfprintf_internal_r+0xb24>
   244e8:	b0038326 	beq	r22,zero,252f8 <___vfprintf_internal_r+0x1358>
   244ec:	dc402a15 	stw	r17,168(sp)
   244f0:	dc001e04 	addi	r16,sp,120
   244f4:	b023883a 	mov	r17,r22
   244f8:	402d883a 	mov	r22,r8
   244fc:	9809883a 	mov	r4,r19
   24500:	880b883a 	mov	r5,r17
   24504:	01800284 	movi	r6,10
   24508:	000f883a 	mov	r7,zero
   2450c:	002e1700 	call	2e170 <__umoddi3>
   24510:	10800c04 	addi	r2,r2,48
   24514:	843fffc4 	addi	r16,r16,-1
   24518:	9809883a 	mov	r4,r19
   2451c:	880b883a 	mov	r5,r17
   24520:	80800005 	stb	r2,0(r16)
   24524:	01800284 	movi	r6,10
   24528:	000f883a 	mov	r7,zero
   2452c:	002dbf80 	call	2dbf8 <__udivdi3>
   24530:	1027883a 	mov	r19,r2
   24534:	10c4b03a 	or	r2,r2,r3
   24538:	1823883a 	mov	r17,r3
   2453c:	103fef1e 	bne	r2,zero,244fc <__alt_data_end+0xf80244fc>
   24540:	d8c02817 	ldw	r3,160(sp)
   24544:	dc402a17 	ldw	r17,168(sp)
   24548:	b011883a 	mov	r8,r22
   2454c:	1c07c83a 	sub	r3,r3,r16
   24550:	d8c02e15 	stw	r3,184(sp)
   24554:	00005906 	br	246bc <___vfprintf_internal_r+0x71c>
   24558:	18c03fcc 	andi	r3,r3,255
   2455c:	1806fa1e 	bne	r3,zero,26148 <___vfprintf_internal_r+0x21a8>
   24560:	9080020c 	andi	r2,r18,8
   24564:	10048a26 	beq	r2,zero,25790 <___vfprintf_internal_r+0x17f0>
   24568:	d8c02d17 	ldw	r3,180(sp)
   2456c:	d9002d17 	ldw	r4,180(sp)
   24570:	d9402d17 	ldw	r5,180(sp)
   24574:	18c00017 	ldw	r3,0(r3)
   24578:	21000117 	ldw	r4,4(r4)
   2457c:	29400204 	addi	r5,r5,8
   24580:	d8c03615 	stw	r3,216(sp)
   24584:	d9003815 	stw	r4,224(sp)
   24588:	d9402d15 	stw	r5,180(sp)
   2458c:	d9003617 	ldw	r4,216(sp)
   24590:	d9403817 	ldw	r5,224(sp)
   24594:	da003d15 	stw	r8,244(sp)
   24598:	04000044 	movi	r16,1
   2459c:	002a9440 	call	2a944 <__fpclassifyd>
   245a0:	da003d17 	ldw	r8,244(sp)
   245a4:	14041f1e 	bne	r2,r16,25624 <___vfprintf_internal_r+0x1684>
   245a8:	d9003617 	ldw	r4,216(sp)
   245ac:	d9403817 	ldw	r5,224(sp)
   245b0:	000d883a 	mov	r6,zero
   245b4:	000f883a 	mov	r7,zero
   245b8:	002fb540 	call	2fb54 <__ledf2>
   245bc:	da003d17 	ldw	r8,244(sp)
   245c0:	1005be16 	blt	r2,zero,25cbc <___vfprintf_internal_r+0x1d1c>
   245c4:	df002783 	ldbu	fp,158(sp)
   245c8:	008011c4 	movi	r2,71
   245cc:	1445330e 	bge	r2,r17,25a9c <___vfprintf_internal_r+0x1afc>
   245d0:	04010034 	movhi	r16,1024
   245d4:	84002504 	addi	r16,r16,148
   245d8:	00c000c4 	movi	r3,3
   245dc:	00bfdfc4 	movi	r2,-129
   245e0:	d8c02a15 	stw	r3,168(sp)
   245e4:	90a4703a 	and	r18,r18,r2
   245e8:	d8c02e15 	stw	r3,184(sp)
   245ec:	d8002915 	stw	zero,164(sp)
   245f0:	d8003215 	stw	zero,200(sp)
   245f4:	00003706 	br	246d4 <___vfprintf_internal_r+0x734>
   245f8:	94800214 	ori	r18,r18,8
   245fc:	ac400007 	ldb	r17,0(r21)
   24600:	003ec806 	br	24124 <__alt_data_end+0xf8024124>
   24604:	18c03fcc 	andi	r3,r3,255
   24608:	1806db1e 	bne	r3,zero,26178 <___vfprintf_internal_r+0x21d8>
   2460c:	94800414 	ori	r18,r18,16
   24610:	9080080c 	andi	r2,r18,32
   24614:	1002d826 	beq	r2,zero,25178 <___vfprintf_internal_r+0x11d8>
   24618:	d9402d17 	ldw	r5,180(sp)
   2461c:	d8c02917 	ldw	r3,164(sp)
   24620:	d8002785 	stb	zero,158(sp)
   24624:	28800204 	addi	r2,r5,8
   24628:	2cc00017 	ldw	r19,0(r5)
   2462c:	2d800117 	ldw	r22,4(r5)
   24630:	18048f16 	blt	r3,zero,25870 <___vfprintf_internal_r+0x18d0>
   24634:	013fdfc4 	movi	r4,-129
   24638:	9d86b03a 	or	r3,r19,r22
   2463c:	d8802d15 	stw	r2,180(sp)
   24640:	9124703a 	and	r18,r18,r4
   24644:	1802d91e 	bne	r3,zero,251ac <___vfprintf_internal_r+0x120c>
   24648:	d8c02917 	ldw	r3,164(sp)
   2464c:	0039883a 	mov	fp,zero
   24650:	1805c326 	beq	r3,zero,25d60 <___vfprintf_internal_r+0x1dc0>
   24654:	0027883a 	mov	r19,zero
   24658:	002d883a 	mov	r22,zero
   2465c:	dc001e04 	addi	r16,sp,120
   24660:	9806d0fa 	srli	r3,r19,3
   24664:	b008977a 	slli	r4,r22,29
   24668:	b02cd0fa 	srli	r22,r22,3
   2466c:	9cc001cc 	andi	r19,r19,7
   24670:	98800c04 	addi	r2,r19,48
   24674:	843fffc4 	addi	r16,r16,-1
   24678:	20e6b03a 	or	r19,r4,r3
   2467c:	80800005 	stb	r2,0(r16)
   24680:	9d86b03a 	or	r3,r19,r22
   24684:	183ff61e 	bne	r3,zero,24660 <__alt_data_end+0xf8024660>
   24688:	90c0004c 	andi	r3,r18,1
   2468c:	18013b26 	beq	r3,zero,24b7c <___vfprintf_internal_r+0xbdc>
   24690:	10803fcc 	andi	r2,r2,255
   24694:	1080201c 	xori	r2,r2,128
   24698:	10bfe004 	addi	r2,r2,-128
   2469c:	00c00c04 	movi	r3,48
   246a0:	10c13626 	beq	r2,r3,24b7c <___vfprintf_internal_r+0xbdc>
   246a4:	80ffffc5 	stb	r3,-1(r16)
   246a8:	d8c02817 	ldw	r3,160(sp)
   246ac:	80bfffc4 	addi	r2,r16,-1
   246b0:	1021883a 	mov	r16,r2
   246b4:	1887c83a 	sub	r3,r3,r2
   246b8:	d8c02e15 	stw	r3,184(sp)
   246bc:	d8802e17 	ldw	r2,184(sp)
   246c0:	d9002917 	ldw	r4,164(sp)
   246c4:	1100010e 	bge	r2,r4,246cc <___vfprintf_internal_r+0x72c>
   246c8:	2005883a 	mov	r2,r4
   246cc:	d8802a15 	stw	r2,168(sp)
   246d0:	d8003215 	stw	zero,200(sp)
   246d4:	e7003fcc 	andi	fp,fp,255
   246d8:	e700201c 	xori	fp,fp,128
   246dc:	e73fe004 	addi	fp,fp,-128
   246e0:	e0000326 	beq	fp,zero,246f0 <___vfprintf_internal_r+0x750>
   246e4:	d8c02a17 	ldw	r3,168(sp)
   246e8:	18c00044 	addi	r3,r3,1
   246ec:	d8c02a15 	stw	r3,168(sp)
   246f0:	90c0008c 	andi	r3,r18,2
   246f4:	d8c02b15 	stw	r3,172(sp)
   246f8:	18000326 	beq	r3,zero,24708 <___vfprintf_internal_r+0x768>
   246fc:	d8c02a17 	ldw	r3,168(sp)
   24700:	18c00084 	addi	r3,r3,2
   24704:	d8c02a15 	stw	r3,168(sp)
   24708:	90c0210c 	andi	r3,r18,132
   2470c:	d8c03015 	stw	r3,192(sp)
   24710:	1801a31e 	bne	r3,zero,24da0 <___vfprintf_internal_r+0xe00>
   24714:	d9003117 	ldw	r4,196(sp)
   24718:	d8c02a17 	ldw	r3,168(sp)
   2471c:	20e7c83a 	sub	r19,r4,r3
   24720:	04c19f0e 	bge	zero,r19,24da0 <___vfprintf_internal_r+0xe00>
   24724:	02400404 	movi	r9,16
   24728:	d8c02017 	ldw	r3,128(sp)
   2472c:	d8801f17 	ldw	r2,124(sp)
   24730:	4cc50d0e 	bge	r9,r19,25b68 <___vfprintf_internal_r+0x1bc8>
   24734:	01410034 	movhi	r5,1024
   24738:	29404084 	addi	r5,r5,258
   2473c:	dc403b15 	stw	r17,236(sp)
   24740:	d9403515 	stw	r5,212(sp)
   24744:	9823883a 	mov	r17,r19
   24748:	482d883a 	mov	r22,r9
   2474c:	9027883a 	mov	r19,r18
   24750:	070001c4 	movi	fp,7
   24754:	8025883a 	mov	r18,r16
   24758:	dc002c17 	ldw	r16,176(sp)
   2475c:	00000306 	br	2476c <___vfprintf_internal_r+0x7cc>
   24760:	8c7ffc04 	addi	r17,r17,-16
   24764:	42000204 	addi	r8,r8,8
   24768:	b440130e 	bge	r22,r17,247b8 <___vfprintf_internal_r+0x818>
   2476c:	01010034 	movhi	r4,1024
   24770:	18c00404 	addi	r3,r3,16
   24774:	10800044 	addi	r2,r2,1
   24778:	21004084 	addi	r4,r4,258
   2477c:	41000015 	stw	r4,0(r8)
   24780:	45800115 	stw	r22,4(r8)
   24784:	d8c02015 	stw	r3,128(sp)
   24788:	d8801f15 	stw	r2,124(sp)
   2478c:	e0bff40e 	bge	fp,r2,24760 <__alt_data_end+0xf8024760>
   24790:	d9801e04 	addi	r6,sp,120
   24794:	b80b883a 	mov	r5,r23
   24798:	8009883a 	mov	r4,r16
   2479c:	002bf9c0 	call	2bf9c <__sprint_r>
   247a0:	103f011e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   247a4:	8c7ffc04 	addi	r17,r17,-16
   247a8:	d8c02017 	ldw	r3,128(sp)
   247ac:	d8801f17 	ldw	r2,124(sp)
   247b0:	da000404 	addi	r8,sp,16
   247b4:	b47fed16 	blt	r22,r17,2476c <__alt_data_end+0xf802476c>
   247b8:	9021883a 	mov	r16,r18
   247bc:	9825883a 	mov	r18,r19
   247c0:	8827883a 	mov	r19,r17
   247c4:	dc403b17 	ldw	r17,236(sp)
   247c8:	d9403517 	ldw	r5,212(sp)
   247cc:	98c7883a 	add	r3,r19,r3
   247d0:	10800044 	addi	r2,r2,1
   247d4:	41400015 	stw	r5,0(r8)
   247d8:	44c00115 	stw	r19,4(r8)
   247dc:	d8c02015 	stw	r3,128(sp)
   247e0:	d8801f15 	stw	r2,124(sp)
   247e4:	010001c4 	movi	r4,7
   247e8:	2082a316 	blt	r4,r2,25278 <___vfprintf_internal_r+0x12d8>
   247ec:	df002787 	ldb	fp,158(sp)
   247f0:	42000204 	addi	r8,r8,8
   247f4:	e0000c26 	beq	fp,zero,24828 <___vfprintf_internal_r+0x888>
   247f8:	d8801f17 	ldw	r2,124(sp)
   247fc:	d9002784 	addi	r4,sp,158
   24800:	18c00044 	addi	r3,r3,1
   24804:	10800044 	addi	r2,r2,1
   24808:	41000015 	stw	r4,0(r8)
   2480c:	01000044 	movi	r4,1
   24810:	41000115 	stw	r4,4(r8)
   24814:	d8c02015 	stw	r3,128(sp)
   24818:	d8801f15 	stw	r2,124(sp)
   2481c:	010001c4 	movi	r4,7
   24820:	20823c16 	blt	r4,r2,25114 <___vfprintf_internal_r+0x1174>
   24824:	42000204 	addi	r8,r8,8
   24828:	d8802b17 	ldw	r2,172(sp)
   2482c:	10000c26 	beq	r2,zero,24860 <___vfprintf_internal_r+0x8c0>
   24830:	d8801f17 	ldw	r2,124(sp)
   24834:	d9002704 	addi	r4,sp,156
   24838:	18c00084 	addi	r3,r3,2
   2483c:	10800044 	addi	r2,r2,1
   24840:	41000015 	stw	r4,0(r8)
   24844:	01000084 	movi	r4,2
   24848:	41000115 	stw	r4,4(r8)
   2484c:	d8c02015 	stw	r3,128(sp)
   24850:	d8801f15 	stw	r2,124(sp)
   24854:	010001c4 	movi	r4,7
   24858:	20823616 	blt	r4,r2,25134 <___vfprintf_internal_r+0x1194>
   2485c:	42000204 	addi	r8,r8,8
   24860:	d9003017 	ldw	r4,192(sp)
   24864:	00802004 	movi	r2,128
   24868:	20819926 	beq	r4,r2,24ed0 <___vfprintf_internal_r+0xf30>
   2486c:	d9402917 	ldw	r5,164(sp)
   24870:	d8802e17 	ldw	r2,184(sp)
   24874:	28adc83a 	sub	r22,r5,r2
   24878:	0580310e 	bge	zero,r22,24940 <___vfprintf_internal_r+0x9a0>
   2487c:	07000404 	movi	fp,16
   24880:	d8801f17 	ldw	r2,124(sp)
   24884:	e584140e 	bge	fp,r22,258d8 <___vfprintf_internal_r+0x1938>
   24888:	01410034 	movhi	r5,1024
   2488c:	29403c84 	addi	r5,r5,242
   24890:	dc402915 	stw	r17,164(sp)
   24894:	d9402b15 	stw	r5,172(sp)
   24898:	b023883a 	mov	r17,r22
   2489c:	04c001c4 	movi	r19,7
   248a0:	a82d883a 	mov	r22,r21
   248a4:	902b883a 	mov	r21,r18
   248a8:	8025883a 	mov	r18,r16
   248ac:	dc002c17 	ldw	r16,176(sp)
   248b0:	00000306 	br	248c0 <___vfprintf_internal_r+0x920>
   248b4:	8c7ffc04 	addi	r17,r17,-16
   248b8:	42000204 	addi	r8,r8,8
   248bc:	e440110e 	bge	fp,r17,24904 <___vfprintf_internal_r+0x964>
   248c0:	18c00404 	addi	r3,r3,16
   248c4:	10800044 	addi	r2,r2,1
   248c8:	45000015 	stw	r20,0(r8)
   248cc:	47000115 	stw	fp,4(r8)
   248d0:	d8c02015 	stw	r3,128(sp)
   248d4:	d8801f15 	stw	r2,124(sp)
   248d8:	98bff60e 	bge	r19,r2,248b4 <__alt_data_end+0xf80248b4>
   248dc:	d9801e04 	addi	r6,sp,120
   248e0:	b80b883a 	mov	r5,r23
   248e4:	8009883a 	mov	r4,r16
   248e8:	002bf9c0 	call	2bf9c <__sprint_r>
   248ec:	103eae1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   248f0:	8c7ffc04 	addi	r17,r17,-16
   248f4:	d8c02017 	ldw	r3,128(sp)
   248f8:	d8801f17 	ldw	r2,124(sp)
   248fc:	da000404 	addi	r8,sp,16
   24900:	e47fef16 	blt	fp,r17,248c0 <__alt_data_end+0xf80248c0>
   24904:	9021883a 	mov	r16,r18
   24908:	a825883a 	mov	r18,r21
   2490c:	b02b883a 	mov	r21,r22
   24910:	882d883a 	mov	r22,r17
   24914:	dc402917 	ldw	r17,164(sp)
   24918:	d9002b17 	ldw	r4,172(sp)
   2491c:	1d87883a 	add	r3,r3,r22
   24920:	10800044 	addi	r2,r2,1
   24924:	41000015 	stw	r4,0(r8)
   24928:	45800115 	stw	r22,4(r8)
   2492c:	d8c02015 	stw	r3,128(sp)
   24930:	d8801f15 	stw	r2,124(sp)
   24934:	010001c4 	movi	r4,7
   24938:	2081ee16 	blt	r4,r2,250f4 <___vfprintf_internal_r+0x1154>
   2493c:	42000204 	addi	r8,r8,8
   24940:	9080400c 	andi	r2,r18,256
   24944:	1001181e 	bne	r2,zero,24da8 <___vfprintf_internal_r+0xe08>
   24948:	d9402e17 	ldw	r5,184(sp)
   2494c:	d8801f17 	ldw	r2,124(sp)
   24950:	44000015 	stw	r16,0(r8)
   24954:	1947883a 	add	r3,r3,r5
   24958:	10800044 	addi	r2,r2,1
   2495c:	41400115 	stw	r5,4(r8)
   24960:	d8c02015 	stw	r3,128(sp)
   24964:	d8801f15 	stw	r2,124(sp)
   24968:	010001c4 	movi	r4,7
   2496c:	2081d316 	blt	r4,r2,250bc <___vfprintf_internal_r+0x111c>
   24970:	42000204 	addi	r8,r8,8
   24974:	9480010c 	andi	r18,r18,4
   24978:	90003226 	beq	r18,zero,24a44 <___vfprintf_internal_r+0xaa4>
   2497c:	d9403117 	ldw	r5,196(sp)
   24980:	d8802a17 	ldw	r2,168(sp)
   24984:	28a1c83a 	sub	r16,r5,r2
   24988:	04002e0e 	bge	zero,r16,24a44 <___vfprintf_internal_r+0xaa4>
   2498c:	04400404 	movi	r17,16
   24990:	d8801f17 	ldw	r2,124(sp)
   24994:	8c04a20e 	bge	r17,r16,25c20 <___vfprintf_internal_r+0x1c80>
   24998:	01410034 	movhi	r5,1024
   2499c:	29404084 	addi	r5,r5,258
   249a0:	d9403515 	stw	r5,212(sp)
   249a4:	048001c4 	movi	r18,7
   249a8:	dcc02c17 	ldw	r19,176(sp)
   249ac:	00000306 	br	249bc <___vfprintf_internal_r+0xa1c>
   249b0:	843ffc04 	addi	r16,r16,-16
   249b4:	42000204 	addi	r8,r8,8
   249b8:	8c00130e 	bge	r17,r16,24a08 <___vfprintf_internal_r+0xa68>
   249bc:	01010034 	movhi	r4,1024
   249c0:	18c00404 	addi	r3,r3,16
   249c4:	10800044 	addi	r2,r2,1
   249c8:	21004084 	addi	r4,r4,258
   249cc:	41000015 	stw	r4,0(r8)
   249d0:	44400115 	stw	r17,4(r8)
   249d4:	d8c02015 	stw	r3,128(sp)
   249d8:	d8801f15 	stw	r2,124(sp)
   249dc:	90bff40e 	bge	r18,r2,249b0 <__alt_data_end+0xf80249b0>
   249e0:	d9801e04 	addi	r6,sp,120
   249e4:	b80b883a 	mov	r5,r23
   249e8:	9809883a 	mov	r4,r19
   249ec:	002bf9c0 	call	2bf9c <__sprint_r>
   249f0:	103e6d1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   249f4:	843ffc04 	addi	r16,r16,-16
   249f8:	d8c02017 	ldw	r3,128(sp)
   249fc:	d8801f17 	ldw	r2,124(sp)
   24a00:	da000404 	addi	r8,sp,16
   24a04:	8c3fed16 	blt	r17,r16,249bc <__alt_data_end+0xf80249bc>
   24a08:	d9403517 	ldw	r5,212(sp)
   24a0c:	1c07883a 	add	r3,r3,r16
   24a10:	10800044 	addi	r2,r2,1
   24a14:	41400015 	stw	r5,0(r8)
   24a18:	44000115 	stw	r16,4(r8)
   24a1c:	d8c02015 	stw	r3,128(sp)
   24a20:	d8801f15 	stw	r2,124(sp)
   24a24:	010001c4 	movi	r4,7
   24a28:	2080060e 	bge	r4,r2,24a44 <___vfprintf_internal_r+0xaa4>
   24a2c:	d9002c17 	ldw	r4,176(sp)
   24a30:	d9801e04 	addi	r6,sp,120
   24a34:	b80b883a 	mov	r5,r23
   24a38:	002bf9c0 	call	2bf9c <__sprint_r>
   24a3c:	103e5a1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   24a40:	d8c02017 	ldw	r3,128(sp)
   24a44:	d8803117 	ldw	r2,196(sp)
   24a48:	d9002a17 	ldw	r4,168(sp)
   24a4c:	1100010e 	bge	r2,r4,24a54 <___vfprintf_internal_r+0xab4>
   24a50:	2005883a 	mov	r2,r4
   24a54:	d9402f17 	ldw	r5,188(sp)
   24a58:	288b883a 	add	r5,r5,r2
   24a5c:	d9402f15 	stw	r5,188(sp)
   24a60:	18019e1e 	bne	r3,zero,250dc <___vfprintf_internal_r+0x113c>
   24a64:	a8800007 	ldb	r2,0(r21)
   24a68:	d8001f15 	stw	zero,124(sp)
   24a6c:	da000404 	addi	r8,sp,16
   24a70:	103d851e 	bne	r2,zero,24088 <__alt_data_end+0xf8024088>
   24a74:	a821883a 	mov	r16,r21
   24a78:	003d9b06 	br	240e8 <__alt_data_end+0xf80240e8>
   24a7c:	18c03fcc 	andi	r3,r3,255
   24a80:	1805c11e 	bne	r3,zero,26188 <___vfprintf_internal_r+0x21e8>
   24a84:	94800414 	ori	r18,r18,16
   24a88:	9080080c 	andi	r2,r18,32
   24a8c:	10020c26 	beq	r2,zero,252c0 <___vfprintf_internal_r+0x1320>
   24a90:	d8802d17 	ldw	r2,180(sp)
   24a94:	d9002917 	ldw	r4,164(sp)
   24a98:	d8002785 	stb	zero,158(sp)
   24a9c:	10c00204 	addi	r3,r2,8
   24aa0:	14c00017 	ldw	r19,0(r2)
   24aa4:	15800117 	ldw	r22,4(r2)
   24aa8:	20040f16 	blt	r4,zero,25ae8 <___vfprintf_internal_r+0x1b48>
   24aac:	013fdfc4 	movi	r4,-129
   24ab0:	9d84b03a 	or	r2,r19,r22
   24ab4:	d8c02d15 	stw	r3,180(sp)
   24ab8:	9124703a 	and	r18,r18,r4
   24abc:	0039883a 	mov	fp,zero
   24ac0:	103e891e 	bne	r2,zero,244e8 <__alt_data_end+0xf80244e8>
   24ac4:	d9002917 	ldw	r4,164(sp)
   24ac8:	2002c11e 	bne	r4,zero,255d0 <___vfprintf_internal_r+0x1630>
   24acc:	d8002915 	stw	zero,164(sp)
   24ad0:	d8002e15 	stw	zero,184(sp)
   24ad4:	dc001e04 	addi	r16,sp,120
   24ad8:	003ef806 	br	246bc <__alt_data_end+0xf80246bc>
   24adc:	18c03fcc 	andi	r3,r3,255
   24ae0:	18059d1e 	bne	r3,zero,26158 <___vfprintf_internal_r+0x21b8>
   24ae4:	01410034 	movhi	r5,1024
   24ae8:	29402804 	addi	r5,r5,160
   24aec:	d9403915 	stw	r5,228(sp)
   24af0:	9080080c 	andi	r2,r18,32
   24af4:	10005226 	beq	r2,zero,24c40 <___vfprintf_internal_r+0xca0>
   24af8:	d8802d17 	ldw	r2,180(sp)
   24afc:	14c00017 	ldw	r19,0(r2)
   24b00:	15800117 	ldw	r22,4(r2)
   24b04:	10800204 	addi	r2,r2,8
   24b08:	d8802d15 	stw	r2,180(sp)
   24b0c:	9080004c 	andi	r2,r18,1
   24b10:	10019026 	beq	r2,zero,25154 <___vfprintf_internal_r+0x11b4>
   24b14:	9d84b03a 	or	r2,r19,r22
   24b18:	10036926 	beq	r2,zero,258c0 <___vfprintf_internal_r+0x1920>
   24b1c:	d8c02917 	ldw	r3,164(sp)
   24b20:	00800c04 	movi	r2,48
   24b24:	d8802705 	stb	r2,156(sp)
   24b28:	dc402745 	stb	r17,157(sp)
   24b2c:	d8002785 	stb	zero,158(sp)
   24b30:	90800094 	ori	r2,r18,2
   24b34:	18045d16 	blt	r3,zero,25cac <___vfprintf_internal_r+0x1d0c>
   24b38:	00bfdfc4 	movi	r2,-129
   24b3c:	90a4703a 	and	r18,r18,r2
   24b40:	94800094 	ori	r18,r18,2
   24b44:	0039883a 	mov	fp,zero
   24b48:	d9003917 	ldw	r4,228(sp)
   24b4c:	dc001e04 	addi	r16,sp,120
   24b50:	988003cc 	andi	r2,r19,15
   24b54:	b006973a 	slli	r3,r22,28
   24b58:	2085883a 	add	r2,r4,r2
   24b5c:	9826d13a 	srli	r19,r19,4
   24b60:	10800003 	ldbu	r2,0(r2)
   24b64:	b02cd13a 	srli	r22,r22,4
   24b68:	843fffc4 	addi	r16,r16,-1
   24b6c:	1ce6b03a 	or	r19,r3,r19
   24b70:	80800005 	stb	r2,0(r16)
   24b74:	9d84b03a 	or	r2,r19,r22
   24b78:	103ff51e 	bne	r2,zero,24b50 <__alt_data_end+0xf8024b50>
   24b7c:	d8c02817 	ldw	r3,160(sp)
   24b80:	1c07c83a 	sub	r3,r3,r16
   24b84:	d8c02e15 	stw	r3,184(sp)
   24b88:	003ecc06 	br	246bc <__alt_data_end+0xf80246bc>
   24b8c:	18c03fcc 	andi	r3,r3,255
   24b90:	183e9f26 	beq	r3,zero,24610 <__alt_data_end+0xf8024610>
   24b94:	d9c02785 	stb	r7,158(sp)
   24b98:	003e9d06 	br	24610 <__alt_data_end+0xf8024610>
   24b9c:	00c00044 	movi	r3,1
   24ba0:	01c00ac4 	movi	r7,43
   24ba4:	ac400007 	ldb	r17,0(r21)
   24ba8:	003d5e06 	br	24124 <__alt_data_end+0xf8024124>
   24bac:	94800814 	ori	r18,r18,32
   24bb0:	ac400007 	ldb	r17,0(r21)
   24bb4:	003d5b06 	br	24124 <__alt_data_end+0xf8024124>
   24bb8:	d8c02d17 	ldw	r3,180(sp)
   24bbc:	d8002785 	stb	zero,158(sp)
   24bc0:	1c000017 	ldw	r16,0(r3)
   24bc4:	1cc00104 	addi	r19,r3,4
   24bc8:	80041926 	beq	r16,zero,25c30 <___vfprintf_internal_r+0x1c90>
   24bcc:	d9002917 	ldw	r4,164(sp)
   24bd0:	2003d016 	blt	r4,zero,25b14 <___vfprintf_internal_r+0x1b74>
   24bd4:	200d883a 	mov	r6,r4
   24bd8:	000b883a 	mov	r5,zero
   24bdc:	8009883a 	mov	r4,r16
   24be0:	da003d15 	stw	r8,244(sp)
   24be4:	0028ffc0 	call	28ffc <memchr>
   24be8:	da003d17 	ldw	r8,244(sp)
   24bec:	10045426 	beq	r2,zero,25d40 <___vfprintf_internal_r+0x1da0>
   24bf0:	1405c83a 	sub	r2,r2,r16
   24bf4:	d8802e15 	stw	r2,184(sp)
   24bf8:	1003cc16 	blt	r2,zero,25b2c <___vfprintf_internal_r+0x1b8c>
   24bfc:	df002783 	ldbu	fp,158(sp)
   24c00:	d8802a15 	stw	r2,168(sp)
   24c04:	dcc02d15 	stw	r19,180(sp)
   24c08:	d8002915 	stw	zero,164(sp)
   24c0c:	d8003215 	stw	zero,200(sp)
   24c10:	003eb006 	br	246d4 <__alt_data_end+0xf80246d4>
   24c14:	18c03fcc 	andi	r3,r3,255
   24c18:	183f9b26 	beq	r3,zero,24a88 <__alt_data_end+0xf8024a88>
   24c1c:	d9c02785 	stb	r7,158(sp)
   24c20:	003f9906 	br	24a88 <__alt_data_end+0xf8024a88>
   24c24:	18c03fcc 	andi	r3,r3,255
   24c28:	1805551e 	bne	r3,zero,26180 <___vfprintf_internal_r+0x21e0>
   24c2c:	01410034 	movhi	r5,1024
   24c30:	29402d04 	addi	r5,r5,180
   24c34:	d9403915 	stw	r5,228(sp)
   24c38:	9080080c 	andi	r2,r18,32
   24c3c:	103fae1e 	bne	r2,zero,24af8 <__alt_data_end+0xf8024af8>
   24c40:	9080040c 	andi	r2,r18,16
   24c44:	1002de26 	beq	r2,zero,257c0 <___vfprintf_internal_r+0x1820>
   24c48:	d8c02d17 	ldw	r3,180(sp)
   24c4c:	002d883a 	mov	r22,zero
   24c50:	1cc00017 	ldw	r19,0(r3)
   24c54:	18c00104 	addi	r3,r3,4
   24c58:	d8c02d15 	stw	r3,180(sp)
   24c5c:	003fab06 	br	24b0c <__alt_data_end+0xf8024b0c>
   24c60:	38803fcc 	andi	r2,r7,255
   24c64:	1080201c 	xori	r2,r2,128
   24c68:	10bfe004 	addi	r2,r2,-128
   24c6c:	1002d21e 	bne	r2,zero,257b8 <___vfprintf_internal_r+0x1818>
   24c70:	00c00044 	movi	r3,1
   24c74:	01c00804 	movi	r7,32
   24c78:	ac400007 	ldb	r17,0(r21)
   24c7c:	003d2906 	br	24124 <__alt_data_end+0xf8024124>
   24c80:	94800054 	ori	r18,r18,1
   24c84:	ac400007 	ldb	r17,0(r21)
   24c88:	003d2606 	br	24124 <__alt_data_end+0xf8024124>
   24c8c:	18c03fcc 	andi	r3,r3,255
   24c90:	183e0526 	beq	r3,zero,244a8 <__alt_data_end+0xf80244a8>
   24c94:	d9c02785 	stb	r7,158(sp)
   24c98:	003e0306 	br	244a8 <__alt_data_end+0xf80244a8>
   24c9c:	94801014 	ori	r18,r18,64
   24ca0:	ac400007 	ldb	r17,0(r21)
   24ca4:	003d1f06 	br	24124 <__alt_data_end+0xf8024124>
   24ca8:	ac400007 	ldb	r17,0(r21)
   24cac:	8a438726 	beq	r17,r9,25acc <___vfprintf_internal_r+0x1b2c>
   24cb0:	94800414 	ori	r18,r18,16
   24cb4:	003d1b06 	br	24124 <__alt_data_end+0xf8024124>
   24cb8:	18c03fcc 	andi	r3,r3,255
   24cbc:	1805341e 	bne	r3,zero,26190 <___vfprintf_internal_r+0x21f0>
   24cc0:	9080080c 	andi	r2,r18,32
   24cc4:	1002cd26 	beq	r2,zero,257fc <___vfprintf_internal_r+0x185c>
   24cc8:	d9402d17 	ldw	r5,180(sp)
   24ccc:	d9002f17 	ldw	r4,188(sp)
   24cd0:	28800017 	ldw	r2,0(r5)
   24cd4:	2007d7fa 	srai	r3,r4,31
   24cd8:	29400104 	addi	r5,r5,4
   24cdc:	d9402d15 	stw	r5,180(sp)
   24ce0:	11000015 	stw	r4,0(r2)
   24ce4:	10c00115 	stw	r3,4(r2)
   24ce8:	003ce506 	br	24080 <__alt_data_end+0xf8024080>
   24cec:	d8c02d17 	ldw	r3,180(sp)
   24cf0:	d9002d17 	ldw	r4,180(sp)
   24cf4:	d8002785 	stb	zero,158(sp)
   24cf8:	18800017 	ldw	r2,0(r3)
   24cfc:	21000104 	addi	r4,r4,4
   24d00:	00c00044 	movi	r3,1
   24d04:	d8c02a15 	stw	r3,168(sp)
   24d08:	d8801405 	stb	r2,80(sp)
   24d0c:	d9002d15 	stw	r4,180(sp)
   24d10:	d8c02e15 	stw	r3,184(sp)
   24d14:	d8002915 	stw	zero,164(sp)
   24d18:	d8003215 	stw	zero,200(sp)
   24d1c:	dc001404 	addi	r16,sp,80
   24d20:	0039883a 	mov	fp,zero
   24d24:	003e7206 	br	246f0 <__alt_data_end+0xf80246f0>
   24d28:	01010034 	movhi	r4,1024
   24d2c:	21002d04 	addi	r4,r4,180
   24d30:	0039883a 	mov	fp,zero
   24d34:	d9003915 	stw	r4,228(sp)
   24d38:	04401e04 	movi	r17,120
   24d3c:	003f8206 	br	24b48 <__alt_data_end+0xf8024b48>
   24d40:	18c03fcc 	andi	r3,r3,255
   24d44:	1805061e 	bne	r3,zero,26160 <___vfprintf_internal_r+0x21c0>
   24d48:	883d9126 	beq	r17,zero,24390 <__alt_data_end+0xf8024390>
   24d4c:	00c00044 	movi	r3,1
   24d50:	d8c02a15 	stw	r3,168(sp)
   24d54:	dc401405 	stb	r17,80(sp)
   24d58:	d8002785 	stb	zero,158(sp)
   24d5c:	003fec06 	br	24d10 <__alt_data_end+0xf8024d10>
   24d60:	01410034 	movhi	r5,1024
   24d64:	29402d04 	addi	r5,r5,180
   24d68:	d9403915 	stw	r5,228(sp)
   24d6c:	d8c02d15 	stw	r3,180(sp)
   24d70:	1025883a 	mov	r18,r2
   24d74:	04401e04 	movi	r17,120
   24d78:	9d84b03a 	or	r2,r19,r22
   24d7c:	1000fc1e 	bne	r2,zero,25170 <___vfprintf_internal_r+0x11d0>
   24d80:	0039883a 	mov	fp,zero
   24d84:	00800084 	movi	r2,2
   24d88:	10803fcc 	andi	r2,r2,255
   24d8c:	00c00044 	movi	r3,1
   24d90:	10c20f26 	beq	r2,r3,255d0 <___vfprintf_internal_r+0x1630>
   24d94:	00c00084 	movi	r3,2
   24d98:	10fd6326 	beq	r2,r3,24328 <__alt_data_end+0xf8024328>
   24d9c:	003e2d06 	br	24654 <__alt_data_end+0xf8024654>
   24da0:	d8c02017 	ldw	r3,128(sp)
   24da4:	003e9306 	br	247f4 <__alt_data_end+0xf80247f4>
   24da8:	00801944 	movi	r2,101
   24dac:	14407e0e 	bge	r2,r17,24fa8 <___vfprintf_internal_r+0x1008>
   24db0:	d9003617 	ldw	r4,216(sp)
   24db4:	d9403817 	ldw	r5,224(sp)
   24db8:	000d883a 	mov	r6,zero
   24dbc:	000f883a 	mov	r7,zero
   24dc0:	d8c03c15 	stw	r3,240(sp)
   24dc4:	da003d15 	stw	r8,244(sp)
   24dc8:	002f9f00 	call	2f9f0 <__eqdf2>
   24dcc:	d8c03c17 	ldw	r3,240(sp)
   24dd0:	da003d17 	ldw	r8,244(sp)
   24dd4:	1000f71e 	bne	r2,zero,251b4 <___vfprintf_internal_r+0x1214>
   24dd8:	d8801f17 	ldw	r2,124(sp)
   24ddc:	01010034 	movhi	r4,1024
   24de0:	21003404 	addi	r4,r4,208
   24de4:	18c00044 	addi	r3,r3,1
   24de8:	10800044 	addi	r2,r2,1
   24dec:	41000015 	stw	r4,0(r8)
   24df0:	01000044 	movi	r4,1
   24df4:	41000115 	stw	r4,4(r8)
   24df8:	d8c02015 	stw	r3,128(sp)
   24dfc:	d8801f15 	stw	r2,124(sp)
   24e00:	010001c4 	movi	r4,7
   24e04:	2082b816 	blt	r4,r2,258e8 <___vfprintf_internal_r+0x1948>
   24e08:	42000204 	addi	r8,r8,8
   24e0c:	d8802617 	ldw	r2,152(sp)
   24e10:	d9403317 	ldw	r5,204(sp)
   24e14:	11400216 	blt	r2,r5,24e20 <___vfprintf_internal_r+0xe80>
   24e18:	9080004c 	andi	r2,r18,1
   24e1c:	103ed526 	beq	r2,zero,24974 <__alt_data_end+0xf8024974>
   24e20:	d8803717 	ldw	r2,220(sp)
   24e24:	d9003417 	ldw	r4,208(sp)
   24e28:	d9403717 	ldw	r5,220(sp)
   24e2c:	1887883a 	add	r3,r3,r2
   24e30:	d8801f17 	ldw	r2,124(sp)
   24e34:	41000015 	stw	r4,0(r8)
   24e38:	41400115 	stw	r5,4(r8)
   24e3c:	10800044 	addi	r2,r2,1
   24e40:	d8c02015 	stw	r3,128(sp)
   24e44:	d8801f15 	stw	r2,124(sp)
   24e48:	010001c4 	movi	r4,7
   24e4c:	20832916 	blt	r4,r2,25af4 <___vfprintf_internal_r+0x1b54>
   24e50:	42000204 	addi	r8,r8,8
   24e54:	d8803317 	ldw	r2,204(sp)
   24e58:	143fffc4 	addi	r16,r2,-1
   24e5c:	043ec50e 	bge	zero,r16,24974 <__alt_data_end+0xf8024974>
   24e60:	04400404 	movi	r17,16
   24e64:	d8801f17 	ldw	r2,124(sp)
   24e68:	8c00880e 	bge	r17,r16,2508c <___vfprintf_internal_r+0x10ec>
   24e6c:	01410034 	movhi	r5,1024
   24e70:	29403c84 	addi	r5,r5,242
   24e74:	d9402b15 	stw	r5,172(sp)
   24e78:	058001c4 	movi	r22,7
   24e7c:	dcc02c17 	ldw	r19,176(sp)
   24e80:	00000306 	br	24e90 <___vfprintf_internal_r+0xef0>
   24e84:	42000204 	addi	r8,r8,8
   24e88:	843ffc04 	addi	r16,r16,-16
   24e8c:	8c00820e 	bge	r17,r16,25098 <___vfprintf_internal_r+0x10f8>
   24e90:	18c00404 	addi	r3,r3,16
   24e94:	10800044 	addi	r2,r2,1
   24e98:	45000015 	stw	r20,0(r8)
   24e9c:	44400115 	stw	r17,4(r8)
   24ea0:	d8c02015 	stw	r3,128(sp)
   24ea4:	d8801f15 	stw	r2,124(sp)
   24ea8:	b0bff60e 	bge	r22,r2,24e84 <__alt_data_end+0xf8024e84>
   24eac:	d9801e04 	addi	r6,sp,120
   24eb0:	b80b883a 	mov	r5,r23
   24eb4:	9809883a 	mov	r4,r19
   24eb8:	002bf9c0 	call	2bf9c <__sprint_r>
   24ebc:	103d3a1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   24ec0:	d8c02017 	ldw	r3,128(sp)
   24ec4:	d8801f17 	ldw	r2,124(sp)
   24ec8:	da000404 	addi	r8,sp,16
   24ecc:	003fee06 	br	24e88 <__alt_data_end+0xf8024e88>
   24ed0:	d9403117 	ldw	r5,196(sp)
   24ed4:	d8802a17 	ldw	r2,168(sp)
   24ed8:	28adc83a 	sub	r22,r5,r2
   24edc:	05be630e 	bge	zero,r22,2486c <__alt_data_end+0xf802486c>
   24ee0:	07000404 	movi	fp,16
   24ee4:	d8801f17 	ldw	r2,124(sp)
   24ee8:	e5838f0e 	bge	fp,r22,25d28 <___vfprintf_internal_r+0x1d88>
   24eec:	01410034 	movhi	r5,1024
   24ef0:	29403c84 	addi	r5,r5,242
   24ef4:	dc403015 	stw	r17,192(sp)
   24ef8:	d9402b15 	stw	r5,172(sp)
   24efc:	b023883a 	mov	r17,r22
   24f00:	04c001c4 	movi	r19,7
   24f04:	a82d883a 	mov	r22,r21
   24f08:	902b883a 	mov	r21,r18
   24f0c:	8025883a 	mov	r18,r16
   24f10:	dc002c17 	ldw	r16,176(sp)
   24f14:	00000306 	br	24f24 <___vfprintf_internal_r+0xf84>
   24f18:	8c7ffc04 	addi	r17,r17,-16
   24f1c:	42000204 	addi	r8,r8,8
   24f20:	e440110e 	bge	fp,r17,24f68 <___vfprintf_internal_r+0xfc8>
   24f24:	18c00404 	addi	r3,r3,16
   24f28:	10800044 	addi	r2,r2,1
   24f2c:	45000015 	stw	r20,0(r8)
   24f30:	47000115 	stw	fp,4(r8)
   24f34:	d8c02015 	stw	r3,128(sp)
   24f38:	d8801f15 	stw	r2,124(sp)
   24f3c:	98bff60e 	bge	r19,r2,24f18 <__alt_data_end+0xf8024f18>
   24f40:	d9801e04 	addi	r6,sp,120
   24f44:	b80b883a 	mov	r5,r23
   24f48:	8009883a 	mov	r4,r16
   24f4c:	002bf9c0 	call	2bf9c <__sprint_r>
   24f50:	103d151e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   24f54:	8c7ffc04 	addi	r17,r17,-16
   24f58:	d8c02017 	ldw	r3,128(sp)
   24f5c:	d8801f17 	ldw	r2,124(sp)
   24f60:	da000404 	addi	r8,sp,16
   24f64:	e47fef16 	blt	fp,r17,24f24 <__alt_data_end+0xf8024f24>
   24f68:	9021883a 	mov	r16,r18
   24f6c:	a825883a 	mov	r18,r21
   24f70:	b02b883a 	mov	r21,r22
   24f74:	882d883a 	mov	r22,r17
   24f78:	dc403017 	ldw	r17,192(sp)
   24f7c:	d9002b17 	ldw	r4,172(sp)
   24f80:	1d87883a 	add	r3,r3,r22
   24f84:	10800044 	addi	r2,r2,1
   24f88:	41000015 	stw	r4,0(r8)
   24f8c:	45800115 	stw	r22,4(r8)
   24f90:	d8c02015 	stw	r3,128(sp)
   24f94:	d8801f15 	stw	r2,124(sp)
   24f98:	010001c4 	movi	r4,7
   24f9c:	20818e16 	blt	r4,r2,255d8 <___vfprintf_internal_r+0x1638>
   24fa0:	42000204 	addi	r8,r8,8
   24fa4:	003e3106 	br	2486c <__alt_data_end+0xf802486c>
   24fa8:	d9403317 	ldw	r5,204(sp)
   24fac:	00800044 	movi	r2,1
   24fb0:	18c00044 	addi	r3,r3,1
   24fb4:	1141530e 	bge	r2,r5,25504 <___vfprintf_internal_r+0x1564>
   24fb8:	dc401f17 	ldw	r17,124(sp)
   24fbc:	00800044 	movi	r2,1
   24fc0:	40800115 	stw	r2,4(r8)
   24fc4:	8c400044 	addi	r17,r17,1
   24fc8:	44000015 	stw	r16,0(r8)
   24fcc:	d8c02015 	stw	r3,128(sp)
   24fd0:	dc401f15 	stw	r17,124(sp)
   24fd4:	008001c4 	movi	r2,7
   24fd8:	14416b16 	blt	r2,r17,25588 <___vfprintf_internal_r+0x15e8>
   24fdc:	42000204 	addi	r8,r8,8
   24fe0:	d8803717 	ldw	r2,220(sp)
   24fe4:	d9003417 	ldw	r4,208(sp)
   24fe8:	8c400044 	addi	r17,r17,1
   24fec:	10c7883a 	add	r3,r2,r3
   24ff0:	40800115 	stw	r2,4(r8)
   24ff4:	41000015 	stw	r4,0(r8)
   24ff8:	d8c02015 	stw	r3,128(sp)
   24ffc:	dc401f15 	stw	r17,124(sp)
   25000:	008001c4 	movi	r2,7
   25004:	14416916 	blt	r2,r17,255ac <___vfprintf_internal_r+0x160c>
   25008:	45800204 	addi	r22,r8,8
   2500c:	d9003617 	ldw	r4,216(sp)
   25010:	d9403817 	ldw	r5,224(sp)
   25014:	000d883a 	mov	r6,zero
   25018:	000f883a 	mov	r7,zero
   2501c:	d8c03c15 	stw	r3,240(sp)
   25020:	002f9f00 	call	2f9f0 <__eqdf2>
   25024:	d8c03c17 	ldw	r3,240(sp)
   25028:	1000bc26 	beq	r2,zero,2531c <___vfprintf_internal_r+0x137c>
   2502c:	d9403317 	ldw	r5,204(sp)
   25030:	84000044 	addi	r16,r16,1
   25034:	8c400044 	addi	r17,r17,1
   25038:	28bfffc4 	addi	r2,r5,-1
   2503c:	1887883a 	add	r3,r3,r2
   25040:	b0800115 	stw	r2,4(r22)
   25044:	b4000015 	stw	r16,0(r22)
   25048:	d8c02015 	stw	r3,128(sp)
   2504c:	dc401f15 	stw	r17,124(sp)
   25050:	008001c4 	movi	r2,7
   25054:	14414316 	blt	r2,r17,25564 <___vfprintf_internal_r+0x15c4>
   25058:	b5800204 	addi	r22,r22,8
   2505c:	d9003a17 	ldw	r4,232(sp)
   25060:	df0022c4 	addi	fp,sp,139
   25064:	8c400044 	addi	r17,r17,1
   25068:	20c7883a 	add	r3,r4,r3
   2506c:	b7000015 	stw	fp,0(r22)
   25070:	b1000115 	stw	r4,4(r22)
   25074:	d8c02015 	stw	r3,128(sp)
   25078:	dc401f15 	stw	r17,124(sp)
   2507c:	008001c4 	movi	r2,7
   25080:	14400e16 	blt	r2,r17,250bc <___vfprintf_internal_r+0x111c>
   25084:	b2000204 	addi	r8,r22,8
   25088:	003e3a06 	br	24974 <__alt_data_end+0xf8024974>
   2508c:	01010034 	movhi	r4,1024
   25090:	21003c84 	addi	r4,r4,242
   25094:	d9002b15 	stw	r4,172(sp)
   25098:	d9002b17 	ldw	r4,172(sp)
   2509c:	1c07883a 	add	r3,r3,r16
   250a0:	44000115 	stw	r16,4(r8)
   250a4:	41000015 	stw	r4,0(r8)
   250a8:	10800044 	addi	r2,r2,1
   250ac:	d8c02015 	stw	r3,128(sp)
   250b0:	d8801f15 	stw	r2,124(sp)
   250b4:	010001c4 	movi	r4,7
   250b8:	20be2d0e 	bge	r4,r2,24970 <__alt_data_end+0xf8024970>
   250bc:	d9002c17 	ldw	r4,176(sp)
   250c0:	d9801e04 	addi	r6,sp,120
   250c4:	b80b883a 	mov	r5,r23
   250c8:	002bf9c0 	call	2bf9c <__sprint_r>
   250cc:	103cb61e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   250d0:	d8c02017 	ldw	r3,128(sp)
   250d4:	da000404 	addi	r8,sp,16
   250d8:	003e2606 	br	24974 <__alt_data_end+0xf8024974>
   250dc:	d9002c17 	ldw	r4,176(sp)
   250e0:	d9801e04 	addi	r6,sp,120
   250e4:	b80b883a 	mov	r5,r23
   250e8:	002bf9c0 	call	2bf9c <__sprint_r>
   250ec:	103e5d26 	beq	r2,zero,24a64 <__alt_data_end+0xf8024a64>
   250f0:	003cad06 	br	243a8 <__alt_data_end+0xf80243a8>
   250f4:	d9002c17 	ldw	r4,176(sp)
   250f8:	d9801e04 	addi	r6,sp,120
   250fc:	b80b883a 	mov	r5,r23
   25100:	002bf9c0 	call	2bf9c <__sprint_r>
   25104:	103ca81e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25108:	d8c02017 	ldw	r3,128(sp)
   2510c:	da000404 	addi	r8,sp,16
   25110:	003e0b06 	br	24940 <__alt_data_end+0xf8024940>
   25114:	d9002c17 	ldw	r4,176(sp)
   25118:	d9801e04 	addi	r6,sp,120
   2511c:	b80b883a 	mov	r5,r23
   25120:	002bf9c0 	call	2bf9c <__sprint_r>
   25124:	103ca01e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25128:	d8c02017 	ldw	r3,128(sp)
   2512c:	da000404 	addi	r8,sp,16
   25130:	003dbd06 	br	24828 <__alt_data_end+0xf8024828>
   25134:	d9002c17 	ldw	r4,176(sp)
   25138:	d9801e04 	addi	r6,sp,120
   2513c:	b80b883a 	mov	r5,r23
   25140:	002bf9c0 	call	2bf9c <__sprint_r>
   25144:	103c981e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25148:	d8c02017 	ldw	r3,128(sp)
   2514c:	da000404 	addi	r8,sp,16
   25150:	003dc306 	br	24860 <__alt_data_end+0xf8024860>
   25154:	d8802917 	ldw	r2,164(sp)
   25158:	d8002785 	stb	zero,158(sp)
   2515c:	103f0616 	blt	r2,zero,24d78 <__alt_data_end+0xf8024d78>
   25160:	00ffdfc4 	movi	r3,-129
   25164:	9d84b03a 	or	r2,r19,r22
   25168:	90e4703a 	and	r18,r18,r3
   2516c:	103c6b26 	beq	r2,zero,2431c <__alt_data_end+0xf802431c>
   25170:	0039883a 	mov	fp,zero
   25174:	003e7406 	br	24b48 <__alt_data_end+0xf8024b48>
   25178:	9080040c 	andi	r2,r18,16
   2517c:	1001b326 	beq	r2,zero,2584c <___vfprintf_internal_r+0x18ac>
   25180:	d9002d17 	ldw	r4,180(sp)
   25184:	d9402917 	ldw	r5,164(sp)
   25188:	d8002785 	stb	zero,158(sp)
   2518c:	20800104 	addi	r2,r4,4
   25190:	24c00017 	ldw	r19,0(r4)
   25194:	002d883a 	mov	r22,zero
   25198:	2801b516 	blt	r5,zero,25870 <___vfprintf_internal_r+0x18d0>
   2519c:	00ffdfc4 	movi	r3,-129
   251a0:	d8802d15 	stw	r2,180(sp)
   251a4:	90e4703a 	and	r18,r18,r3
   251a8:	983d2726 	beq	r19,zero,24648 <__alt_data_end+0xf8024648>
   251ac:	0039883a 	mov	fp,zero
   251b0:	003d2a06 	br	2465c <__alt_data_end+0xf802465c>
   251b4:	dc402617 	ldw	r17,152(sp)
   251b8:	0441d30e 	bge	zero,r17,25908 <___vfprintf_internal_r+0x1968>
   251bc:	dc403217 	ldw	r17,200(sp)
   251c0:	d8803317 	ldw	r2,204(sp)
   251c4:	1440010e 	bge	r2,r17,251cc <___vfprintf_internal_r+0x122c>
   251c8:	1023883a 	mov	r17,r2
   251cc:	04400a0e 	bge	zero,r17,251f8 <___vfprintf_internal_r+0x1258>
   251d0:	d8801f17 	ldw	r2,124(sp)
   251d4:	1c47883a 	add	r3,r3,r17
   251d8:	44000015 	stw	r16,0(r8)
   251dc:	10800044 	addi	r2,r2,1
   251e0:	44400115 	stw	r17,4(r8)
   251e4:	d8c02015 	stw	r3,128(sp)
   251e8:	d8801f15 	stw	r2,124(sp)
   251ec:	010001c4 	movi	r4,7
   251f0:	20826516 	blt	r4,r2,25b88 <___vfprintf_internal_r+0x1be8>
   251f4:	42000204 	addi	r8,r8,8
   251f8:	88026116 	blt	r17,zero,25b80 <___vfprintf_internal_r+0x1be0>
   251fc:	d9003217 	ldw	r4,200(sp)
   25200:	2463c83a 	sub	r17,r4,r17
   25204:	04407b0e 	bge	zero,r17,253f4 <___vfprintf_internal_r+0x1454>
   25208:	05800404 	movi	r22,16
   2520c:	d8801f17 	ldw	r2,124(sp)
   25210:	b4419d0e 	bge	r22,r17,25888 <___vfprintf_internal_r+0x18e8>
   25214:	01010034 	movhi	r4,1024
   25218:	21003c84 	addi	r4,r4,242
   2521c:	d9002b15 	stw	r4,172(sp)
   25220:	070001c4 	movi	fp,7
   25224:	dcc02c17 	ldw	r19,176(sp)
   25228:	00000306 	br	25238 <___vfprintf_internal_r+0x1298>
   2522c:	42000204 	addi	r8,r8,8
   25230:	8c7ffc04 	addi	r17,r17,-16
   25234:	b441970e 	bge	r22,r17,25894 <___vfprintf_internal_r+0x18f4>
   25238:	18c00404 	addi	r3,r3,16
   2523c:	10800044 	addi	r2,r2,1
   25240:	45000015 	stw	r20,0(r8)
   25244:	45800115 	stw	r22,4(r8)
   25248:	d8c02015 	stw	r3,128(sp)
   2524c:	d8801f15 	stw	r2,124(sp)
   25250:	e0bff60e 	bge	fp,r2,2522c <__alt_data_end+0xf802522c>
   25254:	d9801e04 	addi	r6,sp,120
   25258:	b80b883a 	mov	r5,r23
   2525c:	9809883a 	mov	r4,r19
   25260:	002bf9c0 	call	2bf9c <__sprint_r>
   25264:	103c501e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25268:	d8c02017 	ldw	r3,128(sp)
   2526c:	d8801f17 	ldw	r2,124(sp)
   25270:	da000404 	addi	r8,sp,16
   25274:	003fee06 	br	25230 <__alt_data_end+0xf8025230>
   25278:	d9002c17 	ldw	r4,176(sp)
   2527c:	d9801e04 	addi	r6,sp,120
   25280:	b80b883a 	mov	r5,r23
   25284:	002bf9c0 	call	2bf9c <__sprint_r>
   25288:	103c471e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   2528c:	d8c02017 	ldw	r3,128(sp)
   25290:	df002787 	ldb	fp,158(sp)
   25294:	da000404 	addi	r8,sp,16
   25298:	003d5606 	br	247f4 <__alt_data_end+0xf80247f4>
   2529c:	9080040c 	andi	r2,r18,16
   252a0:	10016126 	beq	r2,zero,25828 <___vfprintf_internal_r+0x1888>
   252a4:	d8802d17 	ldw	r2,180(sp)
   252a8:	14c00017 	ldw	r19,0(r2)
   252ac:	10800104 	addi	r2,r2,4
   252b0:	d8802d15 	stw	r2,180(sp)
   252b4:	982dd7fa 	srai	r22,r19,31
   252b8:	b005883a 	mov	r2,r22
   252bc:	003c8206 	br	244c8 <__alt_data_end+0xf80244c8>
   252c0:	9080040c 	andi	r2,r18,16
   252c4:	10003526 	beq	r2,zero,2539c <___vfprintf_internal_r+0x13fc>
   252c8:	d9402d17 	ldw	r5,180(sp)
   252cc:	d8c02917 	ldw	r3,164(sp)
   252d0:	d8002785 	stb	zero,158(sp)
   252d4:	28800104 	addi	r2,r5,4
   252d8:	2cc00017 	ldw	r19,0(r5)
   252dc:	002d883a 	mov	r22,zero
   252e0:	18003716 	blt	r3,zero,253c0 <___vfprintf_internal_r+0x1420>
   252e4:	00ffdfc4 	movi	r3,-129
   252e8:	d8802d15 	stw	r2,180(sp)
   252ec:	90e4703a 	and	r18,r18,r3
   252f0:	0039883a 	mov	fp,zero
   252f4:	983df326 	beq	r19,zero,24ac4 <__alt_data_end+0xf8024ac4>
   252f8:	00800244 	movi	r2,9
   252fc:	14fc7b36 	bltu	r2,r19,244ec <__alt_data_end+0xf80244ec>
   25300:	d8c02817 	ldw	r3,160(sp)
   25304:	dc001dc4 	addi	r16,sp,119
   25308:	9cc00c04 	addi	r19,r19,48
   2530c:	1c07c83a 	sub	r3,r3,r16
   25310:	dcc01dc5 	stb	r19,119(sp)
   25314:	d8c02e15 	stw	r3,184(sp)
   25318:	003ce806 	br	246bc <__alt_data_end+0xf80246bc>
   2531c:	d8803317 	ldw	r2,204(sp)
   25320:	143fffc4 	addi	r16,r2,-1
   25324:	043f4d0e 	bge	zero,r16,2505c <__alt_data_end+0xf802505c>
   25328:	07000404 	movi	fp,16
   2532c:	e400810e 	bge	fp,r16,25534 <___vfprintf_internal_r+0x1594>
   25330:	01410034 	movhi	r5,1024
   25334:	29403c84 	addi	r5,r5,242
   25338:	d9402b15 	stw	r5,172(sp)
   2533c:	01c001c4 	movi	r7,7
   25340:	dcc02c17 	ldw	r19,176(sp)
   25344:	00000306 	br	25354 <___vfprintf_internal_r+0x13b4>
   25348:	b5800204 	addi	r22,r22,8
   2534c:	843ffc04 	addi	r16,r16,-16
   25350:	e4007b0e 	bge	fp,r16,25540 <___vfprintf_internal_r+0x15a0>
   25354:	18c00404 	addi	r3,r3,16
   25358:	8c400044 	addi	r17,r17,1
   2535c:	b5000015 	stw	r20,0(r22)
   25360:	b7000115 	stw	fp,4(r22)
   25364:	d8c02015 	stw	r3,128(sp)
   25368:	dc401f15 	stw	r17,124(sp)
   2536c:	3c7ff60e 	bge	r7,r17,25348 <__alt_data_end+0xf8025348>
   25370:	d9801e04 	addi	r6,sp,120
   25374:	b80b883a 	mov	r5,r23
   25378:	9809883a 	mov	r4,r19
   2537c:	d9c03c15 	stw	r7,240(sp)
   25380:	002bf9c0 	call	2bf9c <__sprint_r>
   25384:	d9c03c17 	ldw	r7,240(sp)
   25388:	103c071e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   2538c:	d8c02017 	ldw	r3,128(sp)
   25390:	dc401f17 	ldw	r17,124(sp)
   25394:	dd800404 	addi	r22,sp,16
   25398:	003fec06 	br	2534c <__alt_data_end+0xf802534c>
   2539c:	9080100c 	andi	r2,r18,64
   253a0:	d8002785 	stb	zero,158(sp)
   253a4:	10010e26 	beq	r2,zero,257e0 <___vfprintf_internal_r+0x1840>
   253a8:	d9002d17 	ldw	r4,180(sp)
   253ac:	d9402917 	ldw	r5,164(sp)
   253b0:	002d883a 	mov	r22,zero
   253b4:	20800104 	addi	r2,r4,4
   253b8:	24c0000b 	ldhu	r19,0(r4)
   253bc:	283fc90e 	bge	r5,zero,252e4 <__alt_data_end+0xf80252e4>
   253c0:	d8802d15 	stw	r2,180(sp)
   253c4:	0039883a 	mov	fp,zero
   253c8:	9d84b03a 	or	r2,r19,r22
   253cc:	103c461e 	bne	r2,zero,244e8 <__alt_data_end+0xf80244e8>
   253d0:	00800044 	movi	r2,1
   253d4:	003e6c06 	br	24d88 <__alt_data_end+0xf8024d88>
   253d8:	d9002c17 	ldw	r4,176(sp)
   253dc:	d9801e04 	addi	r6,sp,120
   253e0:	b80b883a 	mov	r5,r23
   253e4:	002bf9c0 	call	2bf9c <__sprint_r>
   253e8:	103bef1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   253ec:	d8c02017 	ldw	r3,128(sp)
   253f0:	da000404 	addi	r8,sp,16
   253f4:	d9003217 	ldw	r4,200(sp)
   253f8:	d8802617 	ldw	r2,152(sp)
   253fc:	d9403317 	ldw	r5,204(sp)
   25400:	8123883a 	add	r17,r16,r4
   25404:	11400216 	blt	r2,r5,25410 <___vfprintf_internal_r+0x1470>
   25408:	9100004c 	andi	r4,r18,1
   2540c:	20000d26 	beq	r4,zero,25444 <___vfprintf_internal_r+0x14a4>
   25410:	d9003717 	ldw	r4,220(sp)
   25414:	d9403417 	ldw	r5,208(sp)
   25418:	1907883a 	add	r3,r3,r4
   2541c:	d9001f17 	ldw	r4,124(sp)
   25420:	41400015 	stw	r5,0(r8)
   25424:	d9403717 	ldw	r5,220(sp)
   25428:	21000044 	addi	r4,r4,1
   2542c:	d8c02015 	stw	r3,128(sp)
   25430:	41400115 	stw	r5,4(r8)
   25434:	d9001f15 	stw	r4,124(sp)
   25438:	014001c4 	movi	r5,7
   2543c:	2901e816 	blt	r5,r4,25be0 <___vfprintf_internal_r+0x1c40>
   25440:	42000204 	addi	r8,r8,8
   25444:	d9003317 	ldw	r4,204(sp)
   25448:	8121883a 	add	r16,r16,r4
   2544c:	2085c83a 	sub	r2,r4,r2
   25450:	8461c83a 	sub	r16,r16,r17
   25454:	1400010e 	bge	r2,r16,2545c <___vfprintf_internal_r+0x14bc>
   25458:	1021883a 	mov	r16,r2
   2545c:	04000a0e 	bge	zero,r16,25488 <___vfprintf_internal_r+0x14e8>
   25460:	d9001f17 	ldw	r4,124(sp)
   25464:	1c07883a 	add	r3,r3,r16
   25468:	44400015 	stw	r17,0(r8)
   2546c:	21000044 	addi	r4,r4,1
   25470:	44000115 	stw	r16,4(r8)
   25474:	d8c02015 	stw	r3,128(sp)
   25478:	d9001f15 	stw	r4,124(sp)
   2547c:	014001c4 	movi	r5,7
   25480:	2901fb16 	blt	r5,r4,25c70 <___vfprintf_internal_r+0x1cd0>
   25484:	42000204 	addi	r8,r8,8
   25488:	8001f716 	blt	r16,zero,25c68 <___vfprintf_internal_r+0x1cc8>
   2548c:	1421c83a 	sub	r16,r2,r16
   25490:	043d380e 	bge	zero,r16,24974 <__alt_data_end+0xf8024974>
   25494:	04400404 	movi	r17,16
   25498:	d8801f17 	ldw	r2,124(sp)
   2549c:	8c3efb0e 	bge	r17,r16,2508c <__alt_data_end+0xf802508c>
   254a0:	01410034 	movhi	r5,1024
   254a4:	29403c84 	addi	r5,r5,242
   254a8:	d9402b15 	stw	r5,172(sp)
   254ac:	058001c4 	movi	r22,7
   254b0:	dcc02c17 	ldw	r19,176(sp)
   254b4:	00000306 	br	254c4 <___vfprintf_internal_r+0x1524>
   254b8:	42000204 	addi	r8,r8,8
   254bc:	843ffc04 	addi	r16,r16,-16
   254c0:	8c3ef50e 	bge	r17,r16,25098 <__alt_data_end+0xf8025098>
   254c4:	18c00404 	addi	r3,r3,16
   254c8:	10800044 	addi	r2,r2,1
   254cc:	45000015 	stw	r20,0(r8)
   254d0:	44400115 	stw	r17,4(r8)
   254d4:	d8c02015 	stw	r3,128(sp)
   254d8:	d8801f15 	stw	r2,124(sp)
   254dc:	b0bff60e 	bge	r22,r2,254b8 <__alt_data_end+0xf80254b8>
   254e0:	d9801e04 	addi	r6,sp,120
   254e4:	b80b883a 	mov	r5,r23
   254e8:	9809883a 	mov	r4,r19
   254ec:	002bf9c0 	call	2bf9c <__sprint_r>
   254f0:	103bad1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   254f4:	d8c02017 	ldw	r3,128(sp)
   254f8:	d8801f17 	ldw	r2,124(sp)
   254fc:	da000404 	addi	r8,sp,16
   25500:	003fee06 	br	254bc <__alt_data_end+0xf80254bc>
   25504:	9088703a 	and	r4,r18,r2
   25508:	203eab1e 	bne	r4,zero,24fb8 <__alt_data_end+0xf8024fb8>
   2550c:	dc401f17 	ldw	r17,124(sp)
   25510:	40800115 	stw	r2,4(r8)
   25514:	44000015 	stw	r16,0(r8)
   25518:	8c400044 	addi	r17,r17,1
   2551c:	d8c02015 	stw	r3,128(sp)
   25520:	dc401f15 	stw	r17,124(sp)
   25524:	008001c4 	movi	r2,7
   25528:	14400e16 	blt	r2,r17,25564 <___vfprintf_internal_r+0x15c4>
   2552c:	45800204 	addi	r22,r8,8
   25530:	003eca06 	br	2505c <__alt_data_end+0xf802505c>
   25534:	01010034 	movhi	r4,1024
   25538:	21003c84 	addi	r4,r4,242
   2553c:	d9002b15 	stw	r4,172(sp)
   25540:	d8802b17 	ldw	r2,172(sp)
   25544:	1c07883a 	add	r3,r3,r16
   25548:	8c400044 	addi	r17,r17,1
   2554c:	b0800015 	stw	r2,0(r22)
   25550:	b4000115 	stw	r16,4(r22)
   25554:	d8c02015 	stw	r3,128(sp)
   25558:	dc401f15 	stw	r17,124(sp)
   2555c:	008001c4 	movi	r2,7
   25560:	147ebd0e 	bge	r2,r17,25058 <__alt_data_end+0xf8025058>
   25564:	d9002c17 	ldw	r4,176(sp)
   25568:	d9801e04 	addi	r6,sp,120
   2556c:	b80b883a 	mov	r5,r23
   25570:	002bf9c0 	call	2bf9c <__sprint_r>
   25574:	103b8c1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25578:	d8c02017 	ldw	r3,128(sp)
   2557c:	dc401f17 	ldw	r17,124(sp)
   25580:	dd800404 	addi	r22,sp,16
   25584:	003eb506 	br	2505c <__alt_data_end+0xf802505c>
   25588:	d9002c17 	ldw	r4,176(sp)
   2558c:	d9801e04 	addi	r6,sp,120
   25590:	b80b883a 	mov	r5,r23
   25594:	002bf9c0 	call	2bf9c <__sprint_r>
   25598:	103b831e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   2559c:	d8c02017 	ldw	r3,128(sp)
   255a0:	dc401f17 	ldw	r17,124(sp)
   255a4:	da000404 	addi	r8,sp,16
   255a8:	003e8d06 	br	24fe0 <__alt_data_end+0xf8024fe0>
   255ac:	d9002c17 	ldw	r4,176(sp)
   255b0:	d9801e04 	addi	r6,sp,120
   255b4:	b80b883a 	mov	r5,r23
   255b8:	002bf9c0 	call	2bf9c <__sprint_r>
   255bc:	103b7a1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   255c0:	d8c02017 	ldw	r3,128(sp)
   255c4:	dc401f17 	ldw	r17,124(sp)
   255c8:	dd800404 	addi	r22,sp,16
   255cc:	003e8f06 	br	2500c <__alt_data_end+0xf802500c>
   255d0:	0027883a 	mov	r19,zero
   255d4:	003f4a06 	br	25300 <__alt_data_end+0xf8025300>
   255d8:	d9002c17 	ldw	r4,176(sp)
   255dc:	d9801e04 	addi	r6,sp,120
   255e0:	b80b883a 	mov	r5,r23
   255e4:	002bf9c0 	call	2bf9c <__sprint_r>
   255e8:	103b6f1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   255ec:	d8c02017 	ldw	r3,128(sp)
   255f0:	da000404 	addi	r8,sp,16
   255f4:	003c9d06 	br	2486c <__alt_data_end+0xf802486c>
   255f8:	04e7c83a 	sub	r19,zero,r19
   255fc:	9804c03a 	cmpne	r2,r19,zero
   25600:	05adc83a 	sub	r22,zero,r22
   25604:	b0adc83a 	sub	r22,r22,r2
   25608:	d8802917 	ldw	r2,164(sp)
   2560c:	07000b44 	movi	fp,45
   25610:	df002785 	stb	fp,158(sp)
   25614:	10017b16 	blt	r2,zero,25c04 <___vfprintf_internal_r+0x1c64>
   25618:	00bfdfc4 	movi	r2,-129
   2561c:	90a4703a 	and	r18,r18,r2
   25620:	003bb106 	br	244e8 <__alt_data_end+0xf80244e8>
   25624:	d9003617 	ldw	r4,216(sp)
   25628:	d9403817 	ldw	r5,224(sp)
   2562c:	da003d15 	stw	r8,244(sp)
   25630:	002a9440 	call	2a944 <__fpclassifyd>
   25634:	da003d17 	ldw	r8,244(sp)
   25638:	1000f026 	beq	r2,zero,259fc <___vfprintf_internal_r+0x1a5c>
   2563c:	d9002917 	ldw	r4,164(sp)
   25640:	05bff7c4 	movi	r22,-33
   25644:	00bfffc4 	movi	r2,-1
   25648:	8dac703a 	and	r22,r17,r22
   2564c:	20820026 	beq	r4,r2,25e50 <___vfprintf_internal_r+0x1eb0>
   25650:	008011c4 	movi	r2,71
   25654:	b081f726 	beq	r22,r2,25e34 <___vfprintf_internal_r+0x1e94>
   25658:	d9003817 	ldw	r4,224(sp)
   2565c:	90c04014 	ori	r3,r18,256
   25660:	d8c02b15 	stw	r3,172(sp)
   25664:	20021516 	blt	r4,zero,25ebc <___vfprintf_internal_r+0x1f1c>
   25668:	dcc03817 	ldw	r19,224(sp)
   2566c:	d8002a05 	stb	zero,168(sp)
   25670:	00801984 	movi	r2,102
   25674:	8881f926 	beq	r17,r2,25e5c <___vfprintf_internal_r+0x1ebc>
   25678:	00801184 	movi	r2,70
   2567c:	88821c26 	beq	r17,r2,25ef0 <___vfprintf_internal_r+0x1f50>
   25680:	00801144 	movi	r2,69
   25684:	b081ef26 	beq	r22,r2,25e44 <___vfprintf_internal_r+0x1ea4>
   25688:	d8c02917 	ldw	r3,164(sp)
   2568c:	d8802104 	addi	r2,sp,132
   25690:	d8800315 	stw	r2,12(sp)
   25694:	d9403617 	ldw	r5,216(sp)
   25698:	d8802504 	addi	r2,sp,148
   2569c:	d9002c17 	ldw	r4,176(sp)
   256a0:	d8800215 	stw	r2,8(sp)
   256a4:	d8802604 	addi	r2,sp,152
   256a8:	d8c00015 	stw	r3,0(sp)
   256ac:	d8800115 	stw	r2,4(sp)
   256b0:	01c00084 	movi	r7,2
   256b4:	980d883a 	mov	r6,r19
   256b8:	d8c03c15 	stw	r3,240(sp)
   256bc:	da003d15 	stw	r8,244(sp)
   256c0:	00266780 	call	26678 <_dtoa_r>
   256c4:	1021883a 	mov	r16,r2
   256c8:	008019c4 	movi	r2,103
   256cc:	d8c03c17 	ldw	r3,240(sp)
   256d0:	da003d17 	ldw	r8,244(sp)
   256d4:	88817126 	beq	r17,r2,25c9c <___vfprintf_internal_r+0x1cfc>
   256d8:	008011c4 	movi	r2,71
   256dc:	88829226 	beq	r17,r2,26128 <___vfprintf_internal_r+0x2188>
   256e0:	80f9883a 	add	fp,r16,r3
   256e4:	d9003617 	ldw	r4,216(sp)
   256e8:	000d883a 	mov	r6,zero
   256ec:	000f883a 	mov	r7,zero
   256f0:	980b883a 	mov	r5,r19
   256f4:	da003d15 	stw	r8,244(sp)
   256f8:	002f9f00 	call	2f9f0 <__eqdf2>
   256fc:	da003d17 	ldw	r8,244(sp)
   25700:	10018d26 	beq	r2,zero,25d38 <___vfprintf_internal_r+0x1d98>
   25704:	d8802117 	ldw	r2,132(sp)
   25708:	1700062e 	bgeu	r2,fp,25724 <___vfprintf_internal_r+0x1784>
   2570c:	01000c04 	movi	r4,48
   25710:	10c00044 	addi	r3,r2,1
   25714:	d8c02115 	stw	r3,132(sp)
   25718:	11000005 	stb	r4,0(r2)
   2571c:	d8802117 	ldw	r2,132(sp)
   25720:	173ffb36 	bltu	r2,fp,25710 <__alt_data_end+0xf8025710>
   25724:	1405c83a 	sub	r2,r2,r16
   25728:	d8803315 	stw	r2,204(sp)
   2572c:	008011c4 	movi	r2,71
   25730:	b0817626 	beq	r22,r2,25d0c <___vfprintf_internal_r+0x1d6c>
   25734:	00801944 	movi	r2,101
   25738:	1442810e 	bge	r2,r17,26140 <___vfprintf_internal_r+0x21a0>
   2573c:	d8c02617 	ldw	r3,152(sp)
   25740:	00801984 	movi	r2,102
   25744:	d8c03215 	stw	r3,200(sp)
   25748:	8881fe26 	beq	r17,r2,25f44 <___vfprintf_internal_r+0x1fa4>
   2574c:	d8c03217 	ldw	r3,200(sp)
   25750:	d9003317 	ldw	r4,204(sp)
   25754:	1901dd16 	blt	r3,r4,25ecc <___vfprintf_internal_r+0x1f2c>
   25758:	9480004c 	andi	r18,r18,1
   2575c:	90022b1e 	bne	r18,zero,2600c <___vfprintf_internal_r+0x206c>
   25760:	1805883a 	mov	r2,r3
   25764:	18028016 	blt	r3,zero,26168 <___vfprintf_internal_r+0x21c8>
   25768:	d8c03217 	ldw	r3,200(sp)
   2576c:	044019c4 	movi	r17,103
   25770:	d8c02e15 	stw	r3,184(sp)
   25774:	df002a07 	ldb	fp,168(sp)
   25778:	e001531e 	bne	fp,zero,25cc8 <___vfprintf_internal_r+0x1d28>
   2577c:	df002783 	ldbu	fp,158(sp)
   25780:	d8802a15 	stw	r2,168(sp)
   25784:	dc802b17 	ldw	r18,172(sp)
   25788:	d8002915 	stw	zero,164(sp)
   2578c:	003bd106 	br	246d4 <__alt_data_end+0xf80246d4>
   25790:	d8802d17 	ldw	r2,180(sp)
   25794:	d8c02d17 	ldw	r3,180(sp)
   25798:	d9002d17 	ldw	r4,180(sp)
   2579c:	10800017 	ldw	r2,0(r2)
   257a0:	18c00117 	ldw	r3,4(r3)
   257a4:	21000204 	addi	r4,r4,8
   257a8:	d8803615 	stw	r2,216(sp)
   257ac:	d8c03815 	stw	r3,224(sp)
   257b0:	d9002d15 	stw	r4,180(sp)
   257b4:	003b7506 	br	2458c <__alt_data_end+0xf802458c>
   257b8:	ac400007 	ldb	r17,0(r21)
   257bc:	003a5906 	br	24124 <__alt_data_end+0xf8024124>
   257c0:	9080100c 	andi	r2,r18,64
   257c4:	1000a826 	beq	r2,zero,25a68 <___vfprintf_internal_r+0x1ac8>
   257c8:	d9002d17 	ldw	r4,180(sp)
   257cc:	002d883a 	mov	r22,zero
   257d0:	24c0000b 	ldhu	r19,0(r4)
   257d4:	21000104 	addi	r4,r4,4
   257d8:	d9002d15 	stw	r4,180(sp)
   257dc:	003ccb06 	br	24b0c <__alt_data_end+0xf8024b0c>
   257e0:	d8c02d17 	ldw	r3,180(sp)
   257e4:	d9002917 	ldw	r4,164(sp)
   257e8:	002d883a 	mov	r22,zero
   257ec:	18800104 	addi	r2,r3,4
   257f0:	1cc00017 	ldw	r19,0(r3)
   257f4:	203ebb0e 	bge	r4,zero,252e4 <__alt_data_end+0xf80252e4>
   257f8:	003ef106 	br	253c0 <__alt_data_end+0xf80253c0>
   257fc:	9080040c 	andi	r2,r18,16
   25800:	1000921e 	bne	r2,zero,25a4c <___vfprintf_internal_r+0x1aac>
   25804:	9480100c 	andi	r18,r18,64
   25808:	90013926 	beq	r18,zero,25cf0 <___vfprintf_internal_r+0x1d50>
   2580c:	d9002d17 	ldw	r4,180(sp)
   25810:	d9402f17 	ldw	r5,188(sp)
   25814:	20800017 	ldw	r2,0(r4)
   25818:	21000104 	addi	r4,r4,4
   2581c:	d9002d15 	stw	r4,180(sp)
   25820:	1140000d 	sth	r5,0(r2)
   25824:	003a1606 	br	24080 <__alt_data_end+0xf8024080>
   25828:	9080100c 	andi	r2,r18,64
   2582c:	10008026 	beq	r2,zero,25a30 <___vfprintf_internal_r+0x1a90>
   25830:	d8c02d17 	ldw	r3,180(sp)
   25834:	1cc0000f 	ldh	r19,0(r3)
   25838:	18c00104 	addi	r3,r3,4
   2583c:	d8c02d15 	stw	r3,180(sp)
   25840:	982dd7fa 	srai	r22,r19,31
   25844:	b005883a 	mov	r2,r22
   25848:	003b1f06 	br	244c8 <__alt_data_end+0xf80244c8>
   2584c:	9080100c 	andi	r2,r18,64
   25850:	d8002785 	stb	zero,158(sp)
   25854:	10008a1e 	bne	r2,zero,25a80 <___vfprintf_internal_r+0x1ae0>
   25858:	d9402d17 	ldw	r5,180(sp)
   2585c:	d8c02917 	ldw	r3,164(sp)
   25860:	002d883a 	mov	r22,zero
   25864:	28800104 	addi	r2,r5,4
   25868:	2cc00017 	ldw	r19,0(r5)
   2586c:	183e4b0e 	bge	r3,zero,2519c <__alt_data_end+0xf802519c>
   25870:	9d86b03a 	or	r3,r19,r22
   25874:	d8802d15 	stw	r2,180(sp)
   25878:	183e4c1e 	bne	r3,zero,251ac <__alt_data_end+0xf80251ac>
   2587c:	0039883a 	mov	fp,zero
   25880:	0005883a 	mov	r2,zero
   25884:	003d4006 	br	24d88 <__alt_data_end+0xf8024d88>
   25888:	01410034 	movhi	r5,1024
   2588c:	29403c84 	addi	r5,r5,242
   25890:	d9402b15 	stw	r5,172(sp)
   25894:	d9402b17 	ldw	r5,172(sp)
   25898:	1c47883a 	add	r3,r3,r17
   2589c:	10800044 	addi	r2,r2,1
   258a0:	41400015 	stw	r5,0(r8)
   258a4:	44400115 	stw	r17,4(r8)
   258a8:	d8c02015 	stw	r3,128(sp)
   258ac:	d8801f15 	stw	r2,124(sp)
   258b0:	010001c4 	movi	r4,7
   258b4:	20bec816 	blt	r4,r2,253d8 <__alt_data_end+0xf80253d8>
   258b8:	42000204 	addi	r8,r8,8
   258bc:	003ecd06 	br	253f4 <__alt_data_end+0xf80253f4>
   258c0:	d9002917 	ldw	r4,164(sp)
   258c4:	d8002785 	stb	zero,158(sp)
   258c8:	203d2d16 	blt	r4,zero,24d80 <__alt_data_end+0xf8024d80>
   258cc:	00bfdfc4 	movi	r2,-129
   258d0:	90a4703a 	and	r18,r18,r2
   258d4:	003a9106 	br	2431c <__alt_data_end+0xf802431c>
   258d8:	01010034 	movhi	r4,1024
   258dc:	21003c84 	addi	r4,r4,242
   258e0:	d9002b15 	stw	r4,172(sp)
   258e4:	003c0c06 	br	24918 <__alt_data_end+0xf8024918>
   258e8:	d9002c17 	ldw	r4,176(sp)
   258ec:	d9801e04 	addi	r6,sp,120
   258f0:	b80b883a 	mov	r5,r23
   258f4:	002bf9c0 	call	2bf9c <__sprint_r>
   258f8:	103aab1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   258fc:	d8c02017 	ldw	r3,128(sp)
   25900:	da000404 	addi	r8,sp,16
   25904:	003d4106 	br	24e0c <__alt_data_end+0xf8024e0c>
   25908:	d8801f17 	ldw	r2,124(sp)
   2590c:	01410034 	movhi	r5,1024
   25910:	01000044 	movi	r4,1
   25914:	18c00044 	addi	r3,r3,1
   25918:	10800044 	addi	r2,r2,1
   2591c:	29403404 	addi	r5,r5,208
   25920:	41000115 	stw	r4,4(r8)
   25924:	41400015 	stw	r5,0(r8)
   25928:	d8c02015 	stw	r3,128(sp)
   2592c:	d8801f15 	stw	r2,124(sp)
   25930:	010001c4 	movi	r4,7
   25934:	20805c16 	blt	r4,r2,25aa8 <___vfprintf_internal_r+0x1b08>
   25938:	42000204 	addi	r8,r8,8
   2593c:	8800041e 	bne	r17,zero,25950 <___vfprintf_internal_r+0x19b0>
   25940:	d8803317 	ldw	r2,204(sp)
   25944:	1000021e 	bne	r2,zero,25950 <___vfprintf_internal_r+0x19b0>
   25948:	9080004c 	andi	r2,r18,1
   2594c:	103c0926 	beq	r2,zero,24974 <__alt_data_end+0xf8024974>
   25950:	d9003717 	ldw	r4,220(sp)
   25954:	d8801f17 	ldw	r2,124(sp)
   25958:	d9403417 	ldw	r5,208(sp)
   2595c:	20c7883a 	add	r3,r4,r3
   25960:	10800044 	addi	r2,r2,1
   25964:	41000115 	stw	r4,4(r8)
   25968:	41400015 	stw	r5,0(r8)
   2596c:	d8c02015 	stw	r3,128(sp)
   25970:	d8801f15 	stw	r2,124(sp)
   25974:	010001c4 	movi	r4,7
   25978:	20812116 	blt	r4,r2,25e00 <___vfprintf_internal_r+0x1e60>
   2597c:	42000204 	addi	r8,r8,8
   25980:	0463c83a 	sub	r17,zero,r17
   25984:	0440730e 	bge	zero,r17,25b54 <___vfprintf_internal_r+0x1bb4>
   25988:	05800404 	movi	r22,16
   2598c:	b440860e 	bge	r22,r17,25ba8 <___vfprintf_internal_r+0x1c08>
   25990:	01410034 	movhi	r5,1024
   25994:	29403c84 	addi	r5,r5,242
   25998:	d9402b15 	stw	r5,172(sp)
   2599c:	070001c4 	movi	fp,7
   259a0:	dcc02c17 	ldw	r19,176(sp)
   259a4:	00000306 	br	259b4 <___vfprintf_internal_r+0x1a14>
   259a8:	42000204 	addi	r8,r8,8
   259ac:	8c7ffc04 	addi	r17,r17,-16
   259b0:	b440800e 	bge	r22,r17,25bb4 <___vfprintf_internal_r+0x1c14>
   259b4:	18c00404 	addi	r3,r3,16
   259b8:	10800044 	addi	r2,r2,1
   259bc:	45000015 	stw	r20,0(r8)
   259c0:	45800115 	stw	r22,4(r8)
   259c4:	d8c02015 	stw	r3,128(sp)
   259c8:	d8801f15 	stw	r2,124(sp)
   259cc:	e0bff60e 	bge	fp,r2,259a8 <__alt_data_end+0xf80259a8>
   259d0:	d9801e04 	addi	r6,sp,120
   259d4:	b80b883a 	mov	r5,r23
   259d8:	9809883a 	mov	r4,r19
   259dc:	002bf9c0 	call	2bf9c <__sprint_r>
   259e0:	103a711e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   259e4:	d8c02017 	ldw	r3,128(sp)
   259e8:	d8801f17 	ldw	r2,124(sp)
   259ec:	da000404 	addi	r8,sp,16
   259f0:	003fee06 	br	259ac <__alt_data_end+0xf80259ac>
   259f4:	00bfffc4 	movi	r2,-1
   259f8:	003a6f06 	br	243b8 <__alt_data_end+0xf80243b8>
   259fc:	008011c4 	movi	r2,71
   25a00:	1440b816 	blt	r2,r17,25ce4 <___vfprintf_internal_r+0x1d44>
   25a04:	04010034 	movhi	r16,1024
   25a08:	84002604 	addi	r16,r16,152
   25a0c:	00c000c4 	movi	r3,3
   25a10:	00bfdfc4 	movi	r2,-129
   25a14:	d8c02a15 	stw	r3,168(sp)
   25a18:	90a4703a 	and	r18,r18,r2
   25a1c:	df002783 	ldbu	fp,158(sp)
   25a20:	d8c02e15 	stw	r3,184(sp)
   25a24:	d8002915 	stw	zero,164(sp)
   25a28:	d8003215 	stw	zero,200(sp)
   25a2c:	003b2906 	br	246d4 <__alt_data_end+0xf80246d4>
   25a30:	d9002d17 	ldw	r4,180(sp)
   25a34:	24c00017 	ldw	r19,0(r4)
   25a38:	21000104 	addi	r4,r4,4
   25a3c:	d9002d15 	stw	r4,180(sp)
   25a40:	982dd7fa 	srai	r22,r19,31
   25a44:	b005883a 	mov	r2,r22
   25a48:	003a9f06 	br	244c8 <__alt_data_end+0xf80244c8>
   25a4c:	d9402d17 	ldw	r5,180(sp)
   25a50:	d8c02f17 	ldw	r3,188(sp)
   25a54:	28800017 	ldw	r2,0(r5)
   25a58:	29400104 	addi	r5,r5,4
   25a5c:	d9402d15 	stw	r5,180(sp)
   25a60:	10c00015 	stw	r3,0(r2)
   25a64:	00398606 	br	24080 <__alt_data_end+0xf8024080>
   25a68:	d9402d17 	ldw	r5,180(sp)
   25a6c:	002d883a 	mov	r22,zero
   25a70:	2cc00017 	ldw	r19,0(r5)
   25a74:	29400104 	addi	r5,r5,4
   25a78:	d9402d15 	stw	r5,180(sp)
   25a7c:	003c2306 	br	24b0c <__alt_data_end+0xf8024b0c>
   25a80:	d8c02d17 	ldw	r3,180(sp)
   25a84:	d9002917 	ldw	r4,164(sp)
   25a88:	002d883a 	mov	r22,zero
   25a8c:	18800104 	addi	r2,r3,4
   25a90:	1cc0000b 	ldhu	r19,0(r3)
   25a94:	203dc10e 	bge	r4,zero,2519c <__alt_data_end+0xf802519c>
   25a98:	003f7506 	br	25870 <__alt_data_end+0xf8025870>
   25a9c:	04010034 	movhi	r16,1024
   25aa0:	84002404 	addi	r16,r16,144
   25aa4:	003acc06 	br	245d8 <__alt_data_end+0xf80245d8>
   25aa8:	d9002c17 	ldw	r4,176(sp)
   25aac:	d9801e04 	addi	r6,sp,120
   25ab0:	b80b883a 	mov	r5,r23
   25ab4:	002bf9c0 	call	2bf9c <__sprint_r>
   25ab8:	103a3b1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25abc:	dc402617 	ldw	r17,152(sp)
   25ac0:	d8c02017 	ldw	r3,128(sp)
   25ac4:	da000404 	addi	r8,sp,16
   25ac8:	003f9c06 	br	2593c <__alt_data_end+0xf802593c>
   25acc:	ac400043 	ldbu	r17,1(r21)
   25ad0:	94800814 	ori	r18,r18,32
   25ad4:	ad400044 	addi	r21,r21,1
   25ad8:	8c403fcc 	andi	r17,r17,255
   25adc:	8c40201c 	xori	r17,r17,128
   25ae0:	8c7fe004 	addi	r17,r17,-128
   25ae4:	00398f06 	br	24124 <__alt_data_end+0xf8024124>
   25ae8:	d8c02d15 	stw	r3,180(sp)
   25aec:	0039883a 	mov	fp,zero
   25af0:	003e3506 	br	253c8 <__alt_data_end+0xf80253c8>
   25af4:	d9002c17 	ldw	r4,176(sp)
   25af8:	d9801e04 	addi	r6,sp,120
   25afc:	b80b883a 	mov	r5,r23
   25b00:	002bf9c0 	call	2bf9c <__sprint_r>
   25b04:	103a281e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25b08:	d8c02017 	ldw	r3,128(sp)
   25b0c:	da000404 	addi	r8,sp,16
   25b10:	003cd006 	br	24e54 <__alt_data_end+0xf8024e54>
   25b14:	8009883a 	mov	r4,r16
   25b18:	da003d15 	stw	r8,244(sp)
   25b1c:	0021d300 	call	21d30 <strlen>
   25b20:	d8802e15 	stw	r2,184(sp)
   25b24:	da003d17 	ldw	r8,244(sp)
   25b28:	103c340e 	bge	r2,zero,24bfc <__alt_data_end+0xf8024bfc>
   25b2c:	0005883a 	mov	r2,zero
   25b30:	003c3206 	br	24bfc <__alt_data_end+0xf8024bfc>
   25b34:	d9002c17 	ldw	r4,176(sp)
   25b38:	d9801e04 	addi	r6,sp,120
   25b3c:	b80b883a 	mov	r5,r23
   25b40:	002bf9c0 	call	2bf9c <__sprint_r>
   25b44:	103a181e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25b48:	d8c02017 	ldw	r3,128(sp)
   25b4c:	d8801f17 	ldw	r2,124(sp)
   25b50:	da000404 	addi	r8,sp,16
   25b54:	d9403317 	ldw	r5,204(sp)
   25b58:	10800044 	addi	r2,r2,1
   25b5c:	44000015 	stw	r16,0(r8)
   25b60:	28c7883a 	add	r3,r5,r3
   25b64:	003b7d06 	br	2495c <__alt_data_end+0xf802495c>
   25b68:	01010034 	movhi	r4,1024
   25b6c:	21004084 	addi	r4,r4,258
   25b70:	d9003515 	stw	r4,212(sp)
   25b74:	003b1406 	br	247c8 <__alt_data_end+0xf80247c8>
   25b78:	013fffc4 	movi	r4,-1
   25b7c:	003a3506 	br	24454 <__alt_data_end+0xf8024454>
   25b80:	0023883a 	mov	r17,zero
   25b84:	003d9d06 	br	251fc <__alt_data_end+0xf80251fc>
   25b88:	d9002c17 	ldw	r4,176(sp)
   25b8c:	d9801e04 	addi	r6,sp,120
   25b90:	b80b883a 	mov	r5,r23
   25b94:	002bf9c0 	call	2bf9c <__sprint_r>
   25b98:	103a031e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25b9c:	d8c02017 	ldw	r3,128(sp)
   25ba0:	da000404 	addi	r8,sp,16
   25ba4:	003d9406 	br	251f8 <__alt_data_end+0xf80251f8>
   25ba8:	01010034 	movhi	r4,1024
   25bac:	21003c84 	addi	r4,r4,242
   25bb0:	d9002b15 	stw	r4,172(sp)
   25bb4:	d9002b17 	ldw	r4,172(sp)
   25bb8:	1c47883a 	add	r3,r3,r17
   25bbc:	10800044 	addi	r2,r2,1
   25bc0:	41000015 	stw	r4,0(r8)
   25bc4:	44400115 	stw	r17,4(r8)
   25bc8:	d8c02015 	stw	r3,128(sp)
   25bcc:	d8801f15 	stw	r2,124(sp)
   25bd0:	010001c4 	movi	r4,7
   25bd4:	20bfd716 	blt	r4,r2,25b34 <__alt_data_end+0xf8025b34>
   25bd8:	42000204 	addi	r8,r8,8
   25bdc:	003fdd06 	br	25b54 <__alt_data_end+0xf8025b54>
   25be0:	d9002c17 	ldw	r4,176(sp)
   25be4:	d9801e04 	addi	r6,sp,120
   25be8:	b80b883a 	mov	r5,r23
   25bec:	002bf9c0 	call	2bf9c <__sprint_r>
   25bf0:	1039ed1e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25bf4:	d8802617 	ldw	r2,152(sp)
   25bf8:	d8c02017 	ldw	r3,128(sp)
   25bfc:	da000404 	addi	r8,sp,16
   25c00:	003e1006 	br	25444 <__alt_data_end+0xf8025444>
   25c04:	00800044 	movi	r2,1
   25c08:	10803fcc 	andi	r2,r2,255
   25c0c:	00c00044 	movi	r3,1
   25c10:	10fa3526 	beq	r2,r3,244e8 <__alt_data_end+0xf80244e8>
   25c14:	00c00084 	movi	r3,2
   25c18:	10fbcb26 	beq	r2,r3,24b48 <__alt_data_end+0xf8024b48>
   25c1c:	003a8f06 	br	2465c <__alt_data_end+0xf802465c>
   25c20:	01010034 	movhi	r4,1024
   25c24:	21004084 	addi	r4,r4,258
   25c28:	d9003515 	stw	r4,212(sp)
   25c2c:	003b7606 	br	24a08 <__alt_data_end+0xf8024a08>
   25c30:	d8802917 	ldw	r2,164(sp)
   25c34:	00c00184 	movi	r3,6
   25c38:	1880012e 	bgeu	r3,r2,25c40 <___vfprintf_internal_r+0x1ca0>
   25c3c:	1805883a 	mov	r2,r3
   25c40:	d8802e15 	stw	r2,184(sp)
   25c44:	1000ef16 	blt	r2,zero,26004 <___vfprintf_internal_r+0x2064>
   25c48:	04010034 	movhi	r16,1024
   25c4c:	d8802a15 	stw	r2,168(sp)
   25c50:	dcc02d15 	stw	r19,180(sp)
   25c54:	d8002915 	stw	zero,164(sp)
   25c58:	d8003215 	stw	zero,200(sp)
   25c5c:	84003204 	addi	r16,r16,200
   25c60:	0039883a 	mov	fp,zero
   25c64:	003aa206 	br	246f0 <__alt_data_end+0xf80246f0>
   25c68:	0021883a 	mov	r16,zero
   25c6c:	003e0706 	br	2548c <__alt_data_end+0xf802548c>
   25c70:	d9002c17 	ldw	r4,176(sp)
   25c74:	d9801e04 	addi	r6,sp,120
   25c78:	b80b883a 	mov	r5,r23
   25c7c:	002bf9c0 	call	2bf9c <__sprint_r>
   25c80:	1039c91e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25c84:	d8802617 	ldw	r2,152(sp)
   25c88:	d9403317 	ldw	r5,204(sp)
   25c8c:	d8c02017 	ldw	r3,128(sp)
   25c90:	da000404 	addi	r8,sp,16
   25c94:	2885c83a 	sub	r2,r5,r2
   25c98:	003dfb06 	br	25488 <__alt_data_end+0xf8025488>
   25c9c:	9080004c 	andi	r2,r18,1
   25ca0:	103e8f1e 	bne	r2,zero,256e0 <__alt_data_end+0xf80256e0>
   25ca4:	d8802117 	ldw	r2,132(sp)
   25ca8:	003e9e06 	br	25724 <__alt_data_end+0xf8025724>
   25cac:	1025883a 	mov	r18,r2
   25cb0:	0039883a 	mov	fp,zero
   25cb4:	00800084 	movi	r2,2
   25cb8:	003fd306 	br	25c08 <__alt_data_end+0xf8025c08>
   25cbc:	07000b44 	movi	fp,45
   25cc0:	df002785 	stb	fp,158(sp)
   25cc4:	003a4006 	br	245c8 <__alt_data_end+0xf80245c8>
   25cc8:	00c00b44 	movi	r3,45
   25ccc:	d8c02785 	stb	r3,158(sp)
   25cd0:	d8802a15 	stw	r2,168(sp)
   25cd4:	dc802b17 	ldw	r18,172(sp)
   25cd8:	d8002915 	stw	zero,164(sp)
   25cdc:	07000b44 	movi	fp,45
   25ce0:	003a8006 	br	246e4 <__alt_data_end+0xf80246e4>
   25ce4:	04010034 	movhi	r16,1024
   25ce8:	84002704 	addi	r16,r16,156
   25cec:	003f4706 	br	25a0c <__alt_data_end+0xf8025a0c>
   25cf0:	d8c02d17 	ldw	r3,180(sp)
   25cf4:	d9002f17 	ldw	r4,188(sp)
   25cf8:	18800017 	ldw	r2,0(r3)
   25cfc:	18c00104 	addi	r3,r3,4
   25d00:	d8c02d15 	stw	r3,180(sp)
   25d04:	11000015 	stw	r4,0(r2)
   25d08:	0038dd06 	br	24080 <__alt_data_end+0xf8024080>
   25d0c:	dd802617 	ldw	r22,152(sp)
   25d10:	00bfff44 	movi	r2,-3
   25d14:	b0801c16 	blt	r22,r2,25d88 <___vfprintf_internal_r+0x1de8>
   25d18:	d9402917 	ldw	r5,164(sp)
   25d1c:	2d801a16 	blt	r5,r22,25d88 <___vfprintf_internal_r+0x1de8>
   25d20:	dd803215 	stw	r22,200(sp)
   25d24:	003e8906 	br	2574c <__alt_data_end+0xf802574c>
   25d28:	01010034 	movhi	r4,1024
   25d2c:	21003c84 	addi	r4,r4,242
   25d30:	d9002b15 	stw	r4,172(sp)
   25d34:	003c9106 	br	24f7c <__alt_data_end+0xf8024f7c>
   25d38:	e005883a 	mov	r2,fp
   25d3c:	003e7906 	br	25724 <__alt_data_end+0xf8025724>
   25d40:	d9402917 	ldw	r5,164(sp)
   25d44:	df002783 	ldbu	fp,158(sp)
   25d48:	dcc02d15 	stw	r19,180(sp)
   25d4c:	d9402a15 	stw	r5,168(sp)
   25d50:	d9402e15 	stw	r5,184(sp)
   25d54:	d8002915 	stw	zero,164(sp)
   25d58:	d8003215 	stw	zero,200(sp)
   25d5c:	003a5d06 	br	246d4 <__alt_data_end+0xf80246d4>
   25d60:	9080004c 	andi	r2,r18,1
   25d64:	0039883a 	mov	fp,zero
   25d68:	10000426 	beq	r2,zero,25d7c <___vfprintf_internal_r+0x1ddc>
   25d6c:	00800c04 	movi	r2,48
   25d70:	dc001dc4 	addi	r16,sp,119
   25d74:	d8801dc5 	stb	r2,119(sp)
   25d78:	003b8006 	br	24b7c <__alt_data_end+0xf8024b7c>
   25d7c:	d8002e15 	stw	zero,184(sp)
   25d80:	dc001e04 	addi	r16,sp,120
   25d84:	003a4d06 	br	246bc <__alt_data_end+0xf80246bc>
   25d88:	8c7fff84 	addi	r17,r17,-2
   25d8c:	b5bfffc4 	addi	r22,r22,-1
   25d90:	dd802615 	stw	r22,152(sp)
   25d94:	dc4022c5 	stb	r17,139(sp)
   25d98:	b000bf16 	blt	r22,zero,26098 <___vfprintf_internal_r+0x20f8>
   25d9c:	00800ac4 	movi	r2,43
   25da0:	d8802305 	stb	r2,140(sp)
   25da4:	00800244 	movi	r2,9
   25da8:	15807016 	blt	r2,r22,25f6c <___vfprintf_internal_r+0x1fcc>
   25dac:	00800c04 	movi	r2,48
   25db0:	b5800c04 	addi	r22,r22,48
   25db4:	d8802345 	stb	r2,141(sp)
   25db8:	dd802385 	stb	r22,142(sp)
   25dbc:	d88023c4 	addi	r2,sp,143
   25dc0:	df0022c4 	addi	fp,sp,139
   25dc4:	d8c03317 	ldw	r3,204(sp)
   25dc8:	1739c83a 	sub	fp,r2,fp
   25dcc:	d9003317 	ldw	r4,204(sp)
   25dd0:	e0c7883a 	add	r3,fp,r3
   25dd4:	df003a15 	stw	fp,232(sp)
   25dd8:	d8c02e15 	stw	r3,184(sp)
   25ddc:	00800044 	movi	r2,1
   25de0:	1100b30e 	bge	r2,r4,260b0 <___vfprintf_internal_r+0x2110>
   25de4:	d8c02e17 	ldw	r3,184(sp)
   25de8:	18c00044 	addi	r3,r3,1
   25dec:	d8c02e15 	stw	r3,184(sp)
   25df0:	1805883a 	mov	r2,r3
   25df4:	1800ac16 	blt	r3,zero,260a8 <___vfprintf_internal_r+0x2108>
   25df8:	d8003215 	stw	zero,200(sp)
   25dfc:	003e5d06 	br	25774 <__alt_data_end+0xf8025774>
   25e00:	d9002c17 	ldw	r4,176(sp)
   25e04:	d9801e04 	addi	r6,sp,120
   25e08:	b80b883a 	mov	r5,r23
   25e0c:	002bf9c0 	call	2bf9c <__sprint_r>
   25e10:	1039651e 	bne	r2,zero,243a8 <__alt_data_end+0xf80243a8>
   25e14:	dc402617 	ldw	r17,152(sp)
   25e18:	d8c02017 	ldw	r3,128(sp)
   25e1c:	d8801f17 	ldw	r2,124(sp)
   25e20:	da000404 	addi	r8,sp,16
   25e24:	003ed606 	br	25980 <__alt_data_end+0xf8025980>
   25e28:	582b883a 	mov	r21,r11
   25e2c:	d8002915 	stw	zero,164(sp)
   25e30:	0038bd06 	br	24128 <__alt_data_end+0xf8024128>
   25e34:	d8802917 	ldw	r2,164(sp)
   25e38:	103e071e 	bne	r2,zero,25658 <__alt_data_end+0xf8025658>
   25e3c:	dc002915 	stw	r16,164(sp)
   25e40:	003e0506 	br	25658 <__alt_data_end+0xf8025658>
   25e44:	d9002917 	ldw	r4,164(sp)
   25e48:	20c00044 	addi	r3,r4,1
   25e4c:	003e0f06 	br	2568c <__alt_data_end+0xf802568c>
   25e50:	01400184 	movi	r5,6
   25e54:	d9402915 	stw	r5,164(sp)
   25e58:	003dff06 	br	25658 <__alt_data_end+0xf8025658>
   25e5c:	d8802104 	addi	r2,sp,132
   25e60:	d8800315 	stw	r2,12(sp)
   25e64:	d8802504 	addi	r2,sp,148
   25e68:	d8800215 	stw	r2,8(sp)
   25e6c:	d8802604 	addi	r2,sp,152
   25e70:	d8800115 	stw	r2,4(sp)
   25e74:	d8802917 	ldw	r2,164(sp)
   25e78:	d9403617 	ldw	r5,216(sp)
   25e7c:	d9002c17 	ldw	r4,176(sp)
   25e80:	d8800015 	stw	r2,0(sp)
   25e84:	01c000c4 	movi	r7,3
   25e88:	980d883a 	mov	r6,r19
   25e8c:	da003d15 	stw	r8,244(sp)
   25e90:	00266780 	call	26678 <_dtoa_r>
   25e94:	d8c02917 	ldw	r3,164(sp)
   25e98:	da003d17 	ldw	r8,244(sp)
   25e9c:	1021883a 	mov	r16,r2
   25ea0:	10f9883a 	add	fp,r2,r3
   25ea4:	81000007 	ldb	r4,0(r16)
   25ea8:	00800c04 	movi	r2,48
   25eac:	20805e26 	beq	r4,r2,26028 <___vfprintf_internal_r+0x2088>
   25eb0:	d8c02617 	ldw	r3,152(sp)
   25eb4:	e0f9883a 	add	fp,fp,r3
   25eb8:	003e0a06 	br	256e4 <__alt_data_end+0xf80256e4>
   25ebc:	00c00b44 	movi	r3,45
   25ec0:	24e0003c 	xorhi	r19,r4,32768
   25ec4:	d8c02a05 	stb	r3,168(sp)
   25ec8:	003de906 	br	25670 <__alt_data_end+0xf8025670>
   25ecc:	d8c03217 	ldw	r3,200(sp)
   25ed0:	00c07a0e 	bge	zero,r3,260bc <___vfprintf_internal_r+0x211c>
   25ed4:	00800044 	movi	r2,1
   25ed8:	d9003317 	ldw	r4,204(sp)
   25edc:	1105883a 	add	r2,r2,r4
   25ee0:	d8802e15 	stw	r2,184(sp)
   25ee4:	10004e16 	blt	r2,zero,26020 <___vfprintf_internal_r+0x2080>
   25ee8:	044019c4 	movi	r17,103
   25eec:	003e2106 	br	25774 <__alt_data_end+0xf8025774>
   25ef0:	d9002917 	ldw	r4,164(sp)
   25ef4:	d8802104 	addi	r2,sp,132
   25ef8:	d8800315 	stw	r2,12(sp)
   25efc:	d9000015 	stw	r4,0(sp)
   25f00:	d8802504 	addi	r2,sp,148
   25f04:	d9403617 	ldw	r5,216(sp)
   25f08:	d9002c17 	ldw	r4,176(sp)
   25f0c:	d8800215 	stw	r2,8(sp)
   25f10:	d8802604 	addi	r2,sp,152
   25f14:	d8800115 	stw	r2,4(sp)
   25f18:	01c000c4 	movi	r7,3
   25f1c:	980d883a 	mov	r6,r19
   25f20:	da003d15 	stw	r8,244(sp)
   25f24:	00266780 	call	26678 <_dtoa_r>
   25f28:	d8c02917 	ldw	r3,164(sp)
   25f2c:	da003d17 	ldw	r8,244(sp)
   25f30:	1021883a 	mov	r16,r2
   25f34:	00801184 	movi	r2,70
   25f38:	80f9883a 	add	fp,r16,r3
   25f3c:	88bfd926 	beq	r17,r2,25ea4 <__alt_data_end+0xf8025ea4>
   25f40:	003de806 	br	256e4 <__alt_data_end+0xf80256e4>
   25f44:	d9002917 	ldw	r4,164(sp)
   25f48:	00c04d0e 	bge	zero,r3,26080 <___vfprintf_internal_r+0x20e0>
   25f4c:	2000441e 	bne	r4,zero,26060 <___vfprintf_internal_r+0x20c0>
   25f50:	9480004c 	andi	r18,r18,1
   25f54:	9000421e 	bne	r18,zero,26060 <___vfprintf_internal_r+0x20c0>
   25f58:	1805883a 	mov	r2,r3
   25f5c:	18007016 	blt	r3,zero,26120 <___vfprintf_internal_r+0x2180>
   25f60:	d8c03217 	ldw	r3,200(sp)
   25f64:	d8c02e15 	stw	r3,184(sp)
   25f68:	003e0206 	br	25774 <__alt_data_end+0xf8025774>
   25f6c:	df0022c4 	addi	fp,sp,139
   25f70:	dc002915 	stw	r16,164(sp)
   25f74:	4027883a 	mov	r19,r8
   25f78:	e021883a 	mov	r16,fp
   25f7c:	b009883a 	mov	r4,r22
   25f80:	01400284 	movi	r5,10
   25f84:	002e72c0 	call	2e72c <__modsi3>
   25f88:	10800c04 	addi	r2,r2,48
   25f8c:	843fffc4 	addi	r16,r16,-1
   25f90:	b009883a 	mov	r4,r22
   25f94:	01400284 	movi	r5,10
   25f98:	80800005 	stb	r2,0(r16)
   25f9c:	002e6a80 	call	2e6a8 <__divsi3>
   25fa0:	102d883a 	mov	r22,r2
   25fa4:	00800244 	movi	r2,9
   25fa8:	15bff416 	blt	r2,r22,25f7c <__alt_data_end+0xf8025f7c>
   25fac:	9811883a 	mov	r8,r19
   25fb0:	b0800c04 	addi	r2,r22,48
   25fb4:	8027883a 	mov	r19,r16
   25fb8:	997fffc4 	addi	r5,r19,-1
   25fbc:	98bfffc5 	stb	r2,-1(r19)
   25fc0:	dc002917 	ldw	r16,164(sp)
   25fc4:	2f006a2e 	bgeu	r5,fp,26170 <___vfprintf_internal_r+0x21d0>
   25fc8:	d9c02384 	addi	r7,sp,142
   25fcc:	3ccfc83a 	sub	r7,r7,r19
   25fd0:	d9002344 	addi	r4,sp,141
   25fd4:	e1cf883a 	add	r7,fp,r7
   25fd8:	00000106 	br	25fe0 <___vfprintf_internal_r+0x2040>
   25fdc:	28800003 	ldbu	r2,0(r5)
   25fe0:	20800005 	stb	r2,0(r4)
   25fe4:	21000044 	addi	r4,r4,1
   25fe8:	29400044 	addi	r5,r5,1
   25fec:	393ffb1e 	bne	r7,r4,25fdc <__alt_data_end+0xf8025fdc>
   25ff0:	d8802304 	addi	r2,sp,140
   25ff4:	14c5c83a 	sub	r2,r2,r19
   25ff8:	d8c02344 	addi	r3,sp,141
   25ffc:	1885883a 	add	r2,r3,r2
   26000:	003f7006 	br	25dc4 <__alt_data_end+0xf8025dc4>
   26004:	0005883a 	mov	r2,zero
   26008:	003f0f06 	br	25c48 <__alt_data_end+0xf8025c48>
   2600c:	d8c03217 	ldw	r3,200(sp)
   26010:	18c00044 	addi	r3,r3,1
   26014:	d8c02e15 	stw	r3,184(sp)
   26018:	1805883a 	mov	r2,r3
   2601c:	183fb20e 	bge	r3,zero,25ee8 <__alt_data_end+0xf8025ee8>
   26020:	0005883a 	mov	r2,zero
   26024:	003fb006 	br	25ee8 <__alt_data_end+0xf8025ee8>
   26028:	d9003617 	ldw	r4,216(sp)
   2602c:	000d883a 	mov	r6,zero
   26030:	000f883a 	mov	r7,zero
   26034:	980b883a 	mov	r5,r19
   26038:	d8c03c15 	stw	r3,240(sp)
   2603c:	da003d15 	stw	r8,244(sp)
   26040:	002f9f00 	call	2f9f0 <__eqdf2>
   26044:	d8c03c17 	ldw	r3,240(sp)
   26048:	da003d17 	ldw	r8,244(sp)
   2604c:	103f9826 	beq	r2,zero,25eb0 <__alt_data_end+0xf8025eb0>
   26050:	00800044 	movi	r2,1
   26054:	10c7c83a 	sub	r3,r2,r3
   26058:	d8c02615 	stw	r3,152(sp)
   2605c:	003f9506 	br	25eb4 <__alt_data_end+0xf8025eb4>
   26060:	d9002917 	ldw	r4,164(sp)
   26064:	d8c03217 	ldw	r3,200(sp)
   26068:	20800044 	addi	r2,r4,1
   2606c:	1885883a 	add	r2,r3,r2
   26070:	d8802e15 	stw	r2,184(sp)
   26074:	103dbf0e 	bge	r2,zero,25774 <__alt_data_end+0xf8025774>
   26078:	0005883a 	mov	r2,zero
   2607c:	003dbd06 	br	25774 <__alt_data_end+0xf8025774>
   26080:	2000211e 	bne	r4,zero,26108 <___vfprintf_internal_r+0x2168>
   26084:	9480004c 	andi	r18,r18,1
   26088:	90001f1e 	bne	r18,zero,26108 <___vfprintf_internal_r+0x2168>
   2608c:	00800044 	movi	r2,1
   26090:	d8802e15 	stw	r2,184(sp)
   26094:	003db706 	br	25774 <__alt_data_end+0xf8025774>
   26098:	00800b44 	movi	r2,45
   2609c:	05adc83a 	sub	r22,zero,r22
   260a0:	d8802305 	stb	r2,140(sp)
   260a4:	003f3f06 	br	25da4 <__alt_data_end+0xf8025da4>
   260a8:	0005883a 	mov	r2,zero
   260ac:	003f5206 	br	25df8 <__alt_data_end+0xf8025df8>
   260b0:	90a4703a 	and	r18,r18,r2
   260b4:	903f4e26 	beq	r18,zero,25df0 <__alt_data_end+0xf8025df0>
   260b8:	003f4a06 	br	25de4 <__alt_data_end+0xf8025de4>
   260bc:	00800084 	movi	r2,2
   260c0:	10c5c83a 	sub	r2,r2,r3
   260c4:	003f8406 	br	25ed8 <__alt_data_end+0xf8025ed8>
   260c8:	d8802d17 	ldw	r2,180(sp)
   260cc:	d9002d17 	ldw	r4,180(sp)
   260d0:	ac400043 	ldbu	r17,1(r21)
   260d4:	10800017 	ldw	r2,0(r2)
   260d8:	582b883a 	mov	r21,r11
   260dc:	d8802915 	stw	r2,164(sp)
   260e0:	20800104 	addi	r2,r4,4
   260e4:	d9002917 	ldw	r4,164(sp)
   260e8:	d8802d15 	stw	r2,180(sp)
   260ec:	203e7a0e 	bge	r4,zero,25ad8 <__alt_data_end+0xf8025ad8>
   260f0:	8c403fcc 	andi	r17,r17,255
   260f4:	00bfffc4 	movi	r2,-1
   260f8:	8c40201c 	xori	r17,r17,128
   260fc:	d8802915 	stw	r2,164(sp)
   26100:	8c7fe004 	addi	r17,r17,-128
   26104:	00380706 	br	24124 <__alt_data_end+0xf8024124>
   26108:	d8c02917 	ldw	r3,164(sp)
   2610c:	18c00084 	addi	r3,r3,2
   26110:	d8c02e15 	stw	r3,184(sp)
   26114:	1805883a 	mov	r2,r3
   26118:	183d960e 	bge	r3,zero,25774 <__alt_data_end+0xf8025774>
   2611c:	003fd606 	br	26078 <__alt_data_end+0xf8026078>
   26120:	0005883a 	mov	r2,zero
   26124:	003f8e06 	br	25f60 <__alt_data_end+0xf8025f60>
   26128:	9080004c 	andi	r2,r18,1
   2612c:	103f811e 	bne	r2,zero,25f34 <__alt_data_end+0xf8025f34>
   26130:	d8802117 	ldw	r2,132(sp)
   26134:	1405c83a 	sub	r2,r2,r16
   26138:	d8803315 	stw	r2,204(sp)
   2613c:	b47ef326 	beq	r22,r17,25d0c <__alt_data_end+0xf8025d0c>
   26140:	dd802617 	ldw	r22,152(sp)
   26144:	003f1106 	br	25d8c <__alt_data_end+0xf8025d8c>
   26148:	d9c02785 	stb	r7,158(sp)
   2614c:	00390406 	br	24560 <__alt_data_end+0xf8024560>
   26150:	d9c02785 	stb	r7,158(sp)
   26154:	0038d306 	br	244a4 <__alt_data_end+0xf80244a4>
   26158:	d9c02785 	stb	r7,158(sp)
   2615c:	003a6106 	br	24ae4 <__alt_data_end+0xf8024ae4>
   26160:	d9c02785 	stb	r7,158(sp)
   26164:	003af806 	br	24d48 <__alt_data_end+0xf8024d48>
   26168:	0005883a 	mov	r2,zero
   2616c:	003d7e06 	br	25768 <__alt_data_end+0xf8025768>
   26170:	d8802344 	addi	r2,sp,141
   26174:	003f1306 	br	25dc4 <__alt_data_end+0xf8025dc4>
   26178:	d9c02785 	stb	r7,158(sp)
   2617c:	00392306 	br	2460c <__alt_data_end+0xf802460c>
   26180:	d9c02785 	stb	r7,158(sp)
   26184:	003aa906 	br	24c2c <__alt_data_end+0xf8024c2c>
   26188:	d9c02785 	stb	r7,158(sp)
   2618c:	003a3d06 	br	24a84 <__alt_data_end+0xf8024a84>
   26190:	d9c02785 	stb	r7,158(sp)
   26194:	003aca06 	br	24cc0 <__alt_data_end+0xf8024cc0>

00026198 <__vfprintf_internal>:
   26198:	00810034 	movhi	r2,1024
   2619c:	1087e904 	addi	r2,r2,8100
   261a0:	300f883a 	mov	r7,r6
   261a4:	280d883a 	mov	r6,r5
   261a8:	200b883a 	mov	r5,r4
   261ac:	11000017 	ldw	r4,0(r2)
   261b0:	0023fa01 	jmpi	23fa0 <___vfprintf_internal_r>

000261b4 <__sbprintf>:
   261b4:	2880030b 	ldhu	r2,12(r5)
   261b8:	2ac01917 	ldw	r11,100(r5)
   261bc:	2a80038b 	ldhu	r10,14(r5)
   261c0:	2a400717 	ldw	r9,28(r5)
   261c4:	2a000917 	ldw	r8,36(r5)
   261c8:	defee204 	addi	sp,sp,-1144
   261cc:	00c10004 	movi	r3,1024
   261d0:	dc011a15 	stw	r16,1128(sp)
   261d4:	10bfff4c 	andi	r2,r2,65533
   261d8:	2821883a 	mov	r16,r5
   261dc:	d8cb883a 	add	r5,sp,r3
   261e0:	dc811c15 	stw	r18,1136(sp)
   261e4:	dc411b15 	stw	r17,1132(sp)
   261e8:	dfc11d15 	stw	ra,1140(sp)
   261ec:	2025883a 	mov	r18,r4
   261f0:	d881030d 	sth	r2,1036(sp)
   261f4:	dac11915 	stw	r11,1124(sp)
   261f8:	da81038d 	sth	r10,1038(sp)
   261fc:	da410715 	stw	r9,1052(sp)
   26200:	da010915 	stw	r8,1060(sp)
   26204:	dec10015 	stw	sp,1024(sp)
   26208:	dec10415 	stw	sp,1040(sp)
   2620c:	d8c10215 	stw	r3,1032(sp)
   26210:	d8c10515 	stw	r3,1044(sp)
   26214:	d8010615 	stw	zero,1048(sp)
   26218:	0023fa00 	call	23fa0 <___vfprintf_internal_r>
   2621c:	1023883a 	mov	r17,r2
   26220:	10000416 	blt	r2,zero,26234 <__sbprintf+0x80>
   26224:	d9410004 	addi	r5,sp,1024
   26228:	9009883a 	mov	r4,r18
   2622c:	0027f1c0 	call	27f1c <_fflush_r>
   26230:	10000d1e 	bne	r2,zero,26268 <__sbprintf+0xb4>
   26234:	d881030b 	ldhu	r2,1036(sp)
   26238:	1080100c 	andi	r2,r2,64
   2623c:	10000326 	beq	r2,zero,2624c <__sbprintf+0x98>
   26240:	8080030b 	ldhu	r2,12(r16)
   26244:	10801014 	ori	r2,r2,64
   26248:	8080030d 	sth	r2,12(r16)
   2624c:	8805883a 	mov	r2,r17
   26250:	dfc11d17 	ldw	ra,1140(sp)
   26254:	dc811c17 	ldw	r18,1136(sp)
   26258:	dc411b17 	ldw	r17,1132(sp)
   2625c:	dc011a17 	ldw	r16,1128(sp)
   26260:	dec11e04 	addi	sp,sp,1144
   26264:	f800283a 	ret
   26268:	047fffc4 	movi	r17,-1
   2626c:	003ff106 	br	26234 <__alt_data_end+0xf8026234>

00026270 <_write_r>:
   26270:	defffd04 	addi	sp,sp,-12
   26274:	2805883a 	mov	r2,r5
   26278:	dc000015 	stw	r16,0(sp)
   2627c:	04010034 	movhi	r16,1024
   26280:	dc400115 	stw	r17,4(sp)
   26284:	300b883a 	mov	r5,r6
   26288:	8407fa04 	addi	r16,r16,8168
   2628c:	2023883a 	mov	r17,r4
   26290:	380d883a 	mov	r6,r7
   26294:	1009883a 	mov	r4,r2
   26298:	dfc00215 	stw	ra,8(sp)
   2629c:	80000015 	stw	zero,0(r16)
   262a0:	00319940 	call	31994 <write>
   262a4:	00ffffc4 	movi	r3,-1
   262a8:	10c00526 	beq	r2,r3,262c0 <_write_r+0x50>
   262ac:	dfc00217 	ldw	ra,8(sp)
   262b0:	dc400117 	ldw	r17,4(sp)
   262b4:	dc000017 	ldw	r16,0(sp)
   262b8:	dec00304 	addi	sp,sp,12
   262bc:	f800283a 	ret
   262c0:	80c00017 	ldw	r3,0(r16)
   262c4:	183ff926 	beq	r3,zero,262ac <__alt_data_end+0xf80262ac>
   262c8:	88c00015 	stw	r3,0(r17)
   262cc:	003ff706 	br	262ac <__alt_data_end+0xf80262ac>

000262d0 <__swsetup_r>:
   262d0:	00810034 	movhi	r2,1024
   262d4:	defffd04 	addi	sp,sp,-12
   262d8:	1087e904 	addi	r2,r2,8100
   262dc:	dc400115 	stw	r17,4(sp)
   262e0:	2023883a 	mov	r17,r4
   262e4:	11000017 	ldw	r4,0(r2)
   262e8:	dc000015 	stw	r16,0(sp)
   262ec:	dfc00215 	stw	ra,8(sp)
   262f0:	2821883a 	mov	r16,r5
   262f4:	20000226 	beq	r4,zero,26300 <__swsetup_r+0x30>
   262f8:	20800e17 	ldw	r2,56(r4)
   262fc:	10003126 	beq	r2,zero,263c4 <__swsetup_r+0xf4>
   26300:	8080030b 	ldhu	r2,12(r16)
   26304:	10c0020c 	andi	r3,r2,8
   26308:	1009883a 	mov	r4,r2
   2630c:	18000f26 	beq	r3,zero,2634c <__swsetup_r+0x7c>
   26310:	80c00417 	ldw	r3,16(r16)
   26314:	18001526 	beq	r3,zero,2636c <__swsetup_r+0x9c>
   26318:	1100004c 	andi	r4,r2,1
   2631c:	20001c1e 	bne	r4,zero,26390 <__swsetup_r+0xc0>
   26320:	1080008c 	andi	r2,r2,2
   26324:	1000291e 	bne	r2,zero,263cc <__swsetup_r+0xfc>
   26328:	80800517 	ldw	r2,20(r16)
   2632c:	80800215 	stw	r2,8(r16)
   26330:	18001c26 	beq	r3,zero,263a4 <__swsetup_r+0xd4>
   26334:	0005883a 	mov	r2,zero
   26338:	dfc00217 	ldw	ra,8(sp)
   2633c:	dc400117 	ldw	r17,4(sp)
   26340:	dc000017 	ldw	r16,0(sp)
   26344:	dec00304 	addi	sp,sp,12
   26348:	f800283a 	ret
   2634c:	2080040c 	andi	r2,r4,16
   26350:	10002e26 	beq	r2,zero,2640c <__swsetup_r+0x13c>
   26354:	2080010c 	andi	r2,r4,4
   26358:	10001e1e 	bne	r2,zero,263d4 <__swsetup_r+0x104>
   2635c:	80c00417 	ldw	r3,16(r16)
   26360:	20800214 	ori	r2,r4,8
   26364:	8080030d 	sth	r2,12(r16)
   26368:	183feb1e 	bne	r3,zero,26318 <__alt_data_end+0xf8026318>
   2636c:	1100a00c 	andi	r4,r2,640
   26370:	01408004 	movi	r5,512
   26374:	217fe826 	beq	r4,r5,26318 <__alt_data_end+0xf8026318>
   26378:	800b883a 	mov	r5,r16
   2637c:	8809883a 	mov	r4,r17
   26380:	0020c980 	call	20c98 <__smakebuf_r>
   26384:	8080030b 	ldhu	r2,12(r16)
   26388:	80c00417 	ldw	r3,16(r16)
   2638c:	003fe206 	br	26318 <__alt_data_end+0xf8026318>
   26390:	80800517 	ldw	r2,20(r16)
   26394:	80000215 	stw	zero,8(r16)
   26398:	0085c83a 	sub	r2,zero,r2
   2639c:	80800615 	stw	r2,24(r16)
   263a0:	183fe41e 	bne	r3,zero,26334 <__alt_data_end+0xf8026334>
   263a4:	80c0030b 	ldhu	r3,12(r16)
   263a8:	0005883a 	mov	r2,zero
   263ac:	1900200c 	andi	r4,r3,128
   263b0:	203fe126 	beq	r4,zero,26338 <__alt_data_end+0xf8026338>
   263b4:	18c01014 	ori	r3,r3,64
   263b8:	80c0030d 	sth	r3,12(r16)
   263bc:	00bfffc4 	movi	r2,-1
   263c0:	003fdd06 	br	26338 <__alt_data_end+0xf8026338>
   263c4:	00282f80 	call	282f8 <__sinit>
   263c8:	003fcd06 	br	26300 <__alt_data_end+0xf8026300>
   263cc:	0005883a 	mov	r2,zero
   263d0:	003fd606 	br	2632c <__alt_data_end+0xf802632c>
   263d4:	81400c17 	ldw	r5,48(r16)
   263d8:	28000626 	beq	r5,zero,263f4 <__swsetup_r+0x124>
   263dc:	80801004 	addi	r2,r16,64
   263e0:	28800326 	beq	r5,r2,263f0 <__swsetup_r+0x120>
   263e4:	8809883a 	mov	r4,r17
   263e8:	00285180 	call	28518 <_free_r>
   263ec:	8100030b 	ldhu	r4,12(r16)
   263f0:	80000c15 	stw	zero,48(r16)
   263f4:	80c00417 	ldw	r3,16(r16)
   263f8:	00bff6c4 	movi	r2,-37
   263fc:	1108703a 	and	r4,r2,r4
   26400:	80000115 	stw	zero,4(r16)
   26404:	80c00015 	stw	r3,0(r16)
   26408:	003fd506 	br	26360 <__alt_data_end+0xf8026360>
   2640c:	00800244 	movi	r2,9
   26410:	88800015 	stw	r2,0(r17)
   26414:	20801014 	ori	r2,r4,64
   26418:	8080030d 	sth	r2,12(r16)
   2641c:	00bfffc4 	movi	r2,-1
   26420:	003fc506 	br	26338 <__alt_data_end+0xf8026338>

00026424 <_close_r>:
   26424:	defffd04 	addi	sp,sp,-12
   26428:	dc000015 	stw	r16,0(sp)
   2642c:	04010034 	movhi	r16,1024
   26430:	dc400115 	stw	r17,4(sp)
   26434:	8407fa04 	addi	r16,r16,8168
   26438:	2023883a 	mov	r17,r4
   2643c:	2809883a 	mov	r4,r5
   26440:	dfc00215 	stw	ra,8(sp)
   26444:	80000015 	stw	zero,0(r16)
   26448:	0030f000 	call	30f00 <close>
   2644c:	00ffffc4 	movi	r3,-1
   26450:	10c00526 	beq	r2,r3,26468 <_close_r+0x44>
   26454:	dfc00217 	ldw	ra,8(sp)
   26458:	dc400117 	ldw	r17,4(sp)
   2645c:	dc000017 	ldw	r16,0(sp)
   26460:	dec00304 	addi	sp,sp,12
   26464:	f800283a 	ret
   26468:	80c00017 	ldw	r3,0(r16)
   2646c:	183ff926 	beq	r3,zero,26454 <__alt_data_end+0xf8026454>
   26470:	88c00015 	stw	r3,0(r17)
   26474:	003ff706 	br	26454 <__alt_data_end+0xf8026454>

00026478 <quorem>:
   26478:	defff704 	addi	sp,sp,-36
   2647c:	dc800215 	stw	r18,8(sp)
   26480:	20800417 	ldw	r2,16(r4)
   26484:	2c800417 	ldw	r18,16(r5)
   26488:	dfc00815 	stw	ra,32(sp)
   2648c:	ddc00715 	stw	r23,28(sp)
   26490:	dd800615 	stw	r22,24(sp)
   26494:	dd400515 	stw	r21,20(sp)
   26498:	dd000415 	stw	r20,16(sp)
   2649c:	dcc00315 	stw	r19,12(sp)
   264a0:	dc400115 	stw	r17,4(sp)
   264a4:	dc000015 	stw	r16,0(sp)
   264a8:	14807116 	blt	r2,r18,26670 <quorem+0x1f8>
   264ac:	94bfffc4 	addi	r18,r18,-1
   264b0:	94ad883a 	add	r22,r18,r18
   264b4:	b5ad883a 	add	r22,r22,r22
   264b8:	2c400504 	addi	r17,r5,20
   264bc:	8da9883a 	add	r20,r17,r22
   264c0:	25400504 	addi	r21,r4,20
   264c4:	282f883a 	mov	r23,r5
   264c8:	adad883a 	add	r22,r21,r22
   264cc:	a1400017 	ldw	r5,0(r20)
   264d0:	2021883a 	mov	r16,r4
   264d4:	b1000017 	ldw	r4,0(r22)
   264d8:	29400044 	addi	r5,r5,1
   264dc:	002e7a00 	call	2e7a0 <__udivsi3>
   264e0:	1027883a 	mov	r19,r2
   264e4:	10002c26 	beq	r2,zero,26598 <quorem+0x120>
   264e8:	a813883a 	mov	r9,r21
   264ec:	880b883a 	mov	r5,r17
   264f0:	0009883a 	mov	r4,zero
   264f4:	000d883a 	mov	r6,zero
   264f8:	2a000017 	ldw	r8,0(r5)
   264fc:	49c00017 	ldw	r7,0(r9)
   26500:	29400104 	addi	r5,r5,4
   26504:	40bfffcc 	andi	r2,r8,65535
   26508:	14c5383a 	mul	r2,r2,r19
   2650c:	4010d43a 	srli	r8,r8,16
   26510:	38ffffcc 	andi	r3,r7,65535
   26514:	1105883a 	add	r2,r2,r4
   26518:	1008d43a 	srli	r4,r2,16
   2651c:	44d1383a 	mul	r8,r8,r19
   26520:	198d883a 	add	r6,r3,r6
   26524:	10ffffcc 	andi	r3,r2,65535
   26528:	30c7c83a 	sub	r3,r6,r3
   2652c:	380ed43a 	srli	r7,r7,16
   26530:	4105883a 	add	r2,r8,r4
   26534:	180dd43a 	srai	r6,r3,16
   26538:	113fffcc 	andi	r4,r2,65535
   2653c:	390fc83a 	sub	r7,r7,r4
   26540:	398d883a 	add	r6,r7,r6
   26544:	300e943a 	slli	r7,r6,16
   26548:	18ffffcc 	andi	r3,r3,65535
   2654c:	1008d43a 	srli	r4,r2,16
   26550:	38ceb03a 	or	r7,r7,r3
   26554:	49c00015 	stw	r7,0(r9)
   26558:	300dd43a 	srai	r6,r6,16
   2655c:	4a400104 	addi	r9,r9,4
   26560:	a17fe52e 	bgeu	r20,r5,264f8 <__alt_data_end+0xf80264f8>
   26564:	b0800017 	ldw	r2,0(r22)
   26568:	10000b1e 	bne	r2,zero,26598 <quorem+0x120>
   2656c:	b0bfff04 	addi	r2,r22,-4
   26570:	a880082e 	bgeu	r21,r2,26594 <quorem+0x11c>
   26574:	b0ffff17 	ldw	r3,-4(r22)
   26578:	18000326 	beq	r3,zero,26588 <quorem+0x110>
   2657c:	00000506 	br	26594 <quorem+0x11c>
   26580:	10c00017 	ldw	r3,0(r2)
   26584:	1800031e 	bne	r3,zero,26594 <quorem+0x11c>
   26588:	10bfff04 	addi	r2,r2,-4
   2658c:	94bfffc4 	addi	r18,r18,-1
   26590:	a8bffb36 	bltu	r21,r2,26580 <__alt_data_end+0xf8026580>
   26594:	84800415 	stw	r18,16(r16)
   26598:	b80b883a 	mov	r5,r23
   2659c:	8009883a 	mov	r4,r16
   265a0:	0029c4c0 	call	29c4c <__mcmp>
   265a4:	10002616 	blt	r2,zero,26640 <quorem+0x1c8>
   265a8:	9cc00044 	addi	r19,r19,1
   265ac:	a805883a 	mov	r2,r21
   265b0:	000b883a 	mov	r5,zero
   265b4:	11000017 	ldw	r4,0(r2)
   265b8:	89800017 	ldw	r6,0(r17)
   265bc:	10800104 	addi	r2,r2,4
   265c0:	20ffffcc 	andi	r3,r4,65535
   265c4:	194b883a 	add	r5,r3,r5
   265c8:	30ffffcc 	andi	r3,r6,65535
   265cc:	28c7c83a 	sub	r3,r5,r3
   265d0:	300cd43a 	srli	r6,r6,16
   265d4:	2008d43a 	srli	r4,r4,16
   265d8:	180bd43a 	srai	r5,r3,16
   265dc:	18ffffcc 	andi	r3,r3,65535
   265e0:	2189c83a 	sub	r4,r4,r6
   265e4:	2149883a 	add	r4,r4,r5
   265e8:	200c943a 	slli	r6,r4,16
   265ec:	8c400104 	addi	r17,r17,4
   265f0:	200bd43a 	srai	r5,r4,16
   265f4:	30c6b03a 	or	r3,r6,r3
   265f8:	10ffff15 	stw	r3,-4(r2)
   265fc:	a47fed2e 	bgeu	r20,r17,265b4 <__alt_data_end+0xf80265b4>
   26600:	9485883a 	add	r2,r18,r18
   26604:	1085883a 	add	r2,r2,r2
   26608:	a887883a 	add	r3,r21,r2
   2660c:	18800017 	ldw	r2,0(r3)
   26610:	10000b1e 	bne	r2,zero,26640 <quorem+0x1c8>
   26614:	18bfff04 	addi	r2,r3,-4
   26618:	a880082e 	bgeu	r21,r2,2663c <quorem+0x1c4>
   2661c:	18ffff17 	ldw	r3,-4(r3)
   26620:	18000326 	beq	r3,zero,26630 <quorem+0x1b8>
   26624:	00000506 	br	2663c <quorem+0x1c4>
   26628:	10c00017 	ldw	r3,0(r2)
   2662c:	1800031e 	bne	r3,zero,2663c <quorem+0x1c4>
   26630:	10bfff04 	addi	r2,r2,-4
   26634:	94bfffc4 	addi	r18,r18,-1
   26638:	a8bffb36 	bltu	r21,r2,26628 <__alt_data_end+0xf8026628>
   2663c:	84800415 	stw	r18,16(r16)
   26640:	9805883a 	mov	r2,r19
   26644:	dfc00817 	ldw	ra,32(sp)
   26648:	ddc00717 	ldw	r23,28(sp)
   2664c:	dd800617 	ldw	r22,24(sp)
   26650:	dd400517 	ldw	r21,20(sp)
   26654:	dd000417 	ldw	r20,16(sp)
   26658:	dcc00317 	ldw	r19,12(sp)
   2665c:	dc800217 	ldw	r18,8(sp)
   26660:	dc400117 	ldw	r17,4(sp)
   26664:	dc000017 	ldw	r16,0(sp)
   26668:	dec00904 	addi	sp,sp,36
   2666c:	f800283a 	ret
   26670:	0005883a 	mov	r2,zero
   26674:	003ff306 	br	26644 <__alt_data_end+0xf8026644>

00026678 <_dtoa_r>:
   26678:	20801017 	ldw	r2,64(r4)
   2667c:	deffde04 	addi	sp,sp,-136
   26680:	df002015 	stw	fp,128(sp)
   26684:	dcc01b15 	stw	r19,108(sp)
   26688:	dc801a15 	stw	r18,104(sp)
   2668c:	dc401915 	stw	r17,100(sp)
   26690:	dc001815 	stw	r16,96(sp)
   26694:	dfc02115 	stw	ra,132(sp)
   26698:	ddc01f15 	stw	r23,124(sp)
   2669c:	dd801e15 	stw	r22,120(sp)
   266a0:	dd401d15 	stw	r21,116(sp)
   266a4:	dd001c15 	stw	r20,112(sp)
   266a8:	d9c00315 	stw	r7,12(sp)
   266ac:	2039883a 	mov	fp,r4
   266b0:	3023883a 	mov	r17,r6
   266b4:	2825883a 	mov	r18,r5
   266b8:	dc002417 	ldw	r16,144(sp)
   266bc:	3027883a 	mov	r19,r6
   266c0:	10000826 	beq	r2,zero,266e4 <_dtoa_r+0x6c>
   266c4:	21801117 	ldw	r6,68(r4)
   266c8:	00c00044 	movi	r3,1
   266cc:	100b883a 	mov	r5,r2
   266d0:	1986983a 	sll	r3,r3,r6
   266d4:	11800115 	stw	r6,4(r2)
   266d8:	10c00215 	stw	r3,8(r2)
   266dc:	002942c0 	call	2942c <_Bfree>
   266e0:	e0001015 	stw	zero,64(fp)
   266e4:	88002e16 	blt	r17,zero,267a0 <_dtoa_r+0x128>
   266e8:	80000015 	stw	zero,0(r16)
   266ec:	889ffc2c 	andhi	r2,r17,32752
   266f0:	00dffc34 	movhi	r3,32752
   266f4:	10c01c26 	beq	r2,r3,26768 <_dtoa_r+0xf0>
   266f8:	000d883a 	mov	r6,zero
   266fc:	000f883a 	mov	r7,zero
   26700:	9009883a 	mov	r4,r18
   26704:	980b883a 	mov	r5,r19
   26708:	002f9f00 	call	2f9f0 <__eqdf2>
   2670c:	10002b1e 	bne	r2,zero,267bc <_dtoa_r+0x144>
   26710:	d9c02317 	ldw	r7,140(sp)
   26714:	00800044 	movi	r2,1
   26718:	38800015 	stw	r2,0(r7)
   2671c:	d8802517 	ldw	r2,148(sp)
   26720:	10019e26 	beq	r2,zero,26d9c <_dtoa_r+0x724>
   26724:	d8c02517 	ldw	r3,148(sp)
   26728:	00810034 	movhi	r2,1024
   2672c:	10803444 	addi	r2,r2,209
   26730:	18800015 	stw	r2,0(r3)
   26734:	10bfffc4 	addi	r2,r2,-1
   26738:	dfc02117 	ldw	ra,132(sp)
   2673c:	df002017 	ldw	fp,128(sp)
   26740:	ddc01f17 	ldw	r23,124(sp)
   26744:	dd801e17 	ldw	r22,120(sp)
   26748:	dd401d17 	ldw	r21,116(sp)
   2674c:	dd001c17 	ldw	r20,112(sp)
   26750:	dcc01b17 	ldw	r19,108(sp)
   26754:	dc801a17 	ldw	r18,104(sp)
   26758:	dc401917 	ldw	r17,100(sp)
   2675c:	dc001817 	ldw	r16,96(sp)
   26760:	dec02204 	addi	sp,sp,136
   26764:	f800283a 	ret
   26768:	d8c02317 	ldw	r3,140(sp)
   2676c:	0089c3c4 	movi	r2,9999
   26770:	18800015 	stw	r2,0(r3)
   26774:	90017726 	beq	r18,zero,26d54 <_dtoa_r+0x6dc>
   26778:	00810034 	movhi	r2,1024
   2677c:	10804804 	addi	r2,r2,288
   26780:	d9002517 	ldw	r4,148(sp)
   26784:	203fec26 	beq	r4,zero,26738 <__alt_data_end+0xf8026738>
   26788:	10c000c7 	ldb	r3,3(r2)
   2678c:	1801781e 	bne	r3,zero,26d70 <_dtoa_r+0x6f8>
   26790:	10c000c4 	addi	r3,r2,3
   26794:	d9802517 	ldw	r6,148(sp)
   26798:	30c00015 	stw	r3,0(r6)
   2679c:	003fe606 	br	26738 <__alt_data_end+0xf8026738>
   267a0:	04e00034 	movhi	r19,32768
   267a4:	9cffffc4 	addi	r19,r19,-1
   267a8:	00800044 	movi	r2,1
   267ac:	8ce6703a 	and	r19,r17,r19
   267b0:	80800015 	stw	r2,0(r16)
   267b4:	9823883a 	mov	r17,r19
   267b8:	003fcc06 	br	266ec <__alt_data_end+0xf80266ec>
   267bc:	d8800204 	addi	r2,sp,8
   267c0:	d8800015 	stw	r2,0(sp)
   267c4:	d9c00104 	addi	r7,sp,4
   267c8:	900b883a 	mov	r5,r18
   267cc:	980d883a 	mov	r6,r19
   267d0:	e009883a 	mov	r4,fp
   267d4:	8820d53a 	srli	r16,r17,20
   267d8:	002a0180 	call	2a018 <__d2b>
   267dc:	d8800915 	stw	r2,36(sp)
   267e0:	8001651e 	bne	r16,zero,26d78 <_dtoa_r+0x700>
   267e4:	dd800217 	ldw	r22,8(sp)
   267e8:	dc000117 	ldw	r16,4(sp)
   267ec:	00800804 	movi	r2,32
   267f0:	b421883a 	add	r16,r22,r16
   267f4:	80c10c84 	addi	r3,r16,1074
   267f8:	10c2d10e 	bge	r2,r3,27340 <_dtoa_r+0xcc8>
   267fc:	00801004 	movi	r2,64
   26800:	81010484 	addi	r4,r16,1042
   26804:	10c7c83a 	sub	r3,r2,r3
   26808:	9108d83a 	srl	r4,r18,r4
   2680c:	88e2983a 	sll	r17,r17,r3
   26810:	2448b03a 	or	r4,r4,r17
   26814:	0030db80 	call	30db8 <__floatunsidf>
   26818:	017f8434 	movhi	r5,65040
   2681c:	01800044 	movi	r6,1
   26820:	1009883a 	mov	r4,r2
   26824:	194b883a 	add	r5,r3,r5
   26828:	843fffc4 	addi	r16,r16,-1
   2682c:	d9801115 	stw	r6,68(sp)
   26830:	000d883a 	mov	r6,zero
   26834:	01cffe34 	movhi	r7,16376
   26838:	00303600 	call	30360 <__subdf3>
   2683c:	0198dbf4 	movhi	r6,25455
   26840:	01cff4f4 	movhi	r7,16339
   26844:	3190d844 	addi	r6,r6,17249
   26848:	39e1e9c4 	addi	r7,r7,-30809
   2684c:	1009883a 	mov	r4,r2
   26850:	180b883a 	mov	r5,r3
   26854:	002fc480 	call	2fc48 <__muldf3>
   26858:	01a2d874 	movhi	r6,35681
   2685c:	01cff1f4 	movhi	r7,16327
   26860:	31b22cc4 	addi	r6,r6,-14157
   26864:	39e28a04 	addi	r7,r7,-30168
   26868:	180b883a 	mov	r5,r3
   2686c:	1009883a 	mov	r4,r2
   26870:	002e85c0 	call	2e85c <__adddf3>
   26874:	8009883a 	mov	r4,r16
   26878:	1029883a 	mov	r20,r2
   2687c:	1823883a 	mov	r17,r3
   26880:	0030cdc0 	call	30cdc <__floatsidf>
   26884:	019427f4 	movhi	r6,20639
   26888:	01cff4f4 	movhi	r7,16339
   2688c:	319e7ec4 	addi	r6,r6,31227
   26890:	39d104c4 	addi	r7,r7,17427
   26894:	1009883a 	mov	r4,r2
   26898:	180b883a 	mov	r5,r3
   2689c:	002fc480 	call	2fc48 <__muldf3>
   268a0:	100d883a 	mov	r6,r2
   268a4:	180f883a 	mov	r7,r3
   268a8:	a009883a 	mov	r4,r20
   268ac:	880b883a 	mov	r5,r17
   268b0:	002e85c0 	call	2e85c <__adddf3>
   268b4:	1009883a 	mov	r4,r2
   268b8:	180b883a 	mov	r5,r3
   268bc:	1029883a 	mov	r20,r2
   268c0:	1823883a 	mov	r17,r3
   268c4:	0030c5c0 	call	30c5c <__fixdfsi>
   268c8:	000d883a 	mov	r6,zero
   268cc:	000f883a 	mov	r7,zero
   268d0:	a009883a 	mov	r4,r20
   268d4:	880b883a 	mov	r5,r17
   268d8:	d8800515 	stw	r2,20(sp)
   268dc:	002fb540 	call	2fb54 <__ledf2>
   268e0:	10028716 	blt	r2,zero,27300 <_dtoa_r+0xc88>
   268e4:	d8c00517 	ldw	r3,20(sp)
   268e8:	00800584 	movi	r2,22
   268ec:	10c27536 	bltu	r2,r3,272c4 <_dtoa_r+0xc4c>
   268f0:	180490fa 	slli	r2,r3,3
   268f4:	00c10034 	movhi	r3,1024
   268f8:	18c06304 	addi	r3,r3,396
   268fc:	1885883a 	add	r2,r3,r2
   26900:	11000017 	ldw	r4,0(r2)
   26904:	11400117 	ldw	r5,4(r2)
   26908:	900d883a 	mov	r6,r18
   2690c:	980f883a 	mov	r7,r19
   26910:	002fa780 	call	2fa78 <__gedf2>
   26914:	00828d0e 	bge	zero,r2,2734c <_dtoa_r+0xcd4>
   26918:	d9000517 	ldw	r4,20(sp)
   2691c:	d8000e15 	stw	zero,56(sp)
   26920:	213fffc4 	addi	r4,r4,-1
   26924:	d9000515 	stw	r4,20(sp)
   26928:	b42dc83a 	sub	r22,r22,r16
   2692c:	b5bfffc4 	addi	r22,r22,-1
   26930:	b0026f16 	blt	r22,zero,272f0 <_dtoa_r+0xc78>
   26934:	d8000815 	stw	zero,32(sp)
   26938:	d9c00517 	ldw	r7,20(sp)
   2693c:	38026416 	blt	r7,zero,272d0 <_dtoa_r+0xc58>
   26940:	b1ed883a 	add	r22,r22,r7
   26944:	d9c00d15 	stw	r7,52(sp)
   26948:	d8000a15 	stw	zero,40(sp)
   2694c:	d9800317 	ldw	r6,12(sp)
   26950:	00800244 	movi	r2,9
   26954:	11811436 	bltu	r2,r6,26da8 <_dtoa_r+0x730>
   26958:	00800144 	movi	r2,5
   2695c:	1184e10e 	bge	r2,r6,27ce4 <_dtoa_r+0x166c>
   26960:	31bfff04 	addi	r6,r6,-4
   26964:	d9800315 	stw	r6,12(sp)
   26968:	0023883a 	mov	r17,zero
   2696c:	d9800317 	ldw	r6,12(sp)
   26970:	008000c4 	movi	r2,3
   26974:	30836726 	beq	r6,r2,27714 <_dtoa_r+0x109c>
   26978:	1183410e 	bge	r2,r6,27680 <_dtoa_r+0x1008>
   2697c:	d9c00317 	ldw	r7,12(sp)
   26980:	00800104 	movi	r2,4
   26984:	38827c26 	beq	r7,r2,27378 <_dtoa_r+0xd00>
   26988:	00800144 	movi	r2,5
   2698c:	3884c41e 	bne	r7,r2,27ca0 <_dtoa_r+0x1628>
   26990:	00800044 	movi	r2,1
   26994:	d8800b15 	stw	r2,44(sp)
   26998:	d8c00517 	ldw	r3,20(sp)
   2699c:	d9002217 	ldw	r4,136(sp)
   269a0:	1907883a 	add	r3,r3,r4
   269a4:	19800044 	addi	r6,r3,1
   269a8:	d8c00c15 	stw	r3,48(sp)
   269ac:	d9800615 	stw	r6,24(sp)
   269b0:	0183a40e 	bge	zero,r6,27844 <_dtoa_r+0x11cc>
   269b4:	d9800617 	ldw	r6,24(sp)
   269b8:	3021883a 	mov	r16,r6
   269bc:	e0001115 	stw	zero,68(fp)
   269c0:	008005c4 	movi	r2,23
   269c4:	1184c92e 	bgeu	r2,r6,27cec <_dtoa_r+0x1674>
   269c8:	00c00044 	movi	r3,1
   269cc:	00800104 	movi	r2,4
   269d0:	1085883a 	add	r2,r2,r2
   269d4:	11000504 	addi	r4,r2,20
   269d8:	180b883a 	mov	r5,r3
   269dc:	18c00044 	addi	r3,r3,1
   269e0:	313ffb2e 	bgeu	r6,r4,269d0 <__alt_data_end+0xf80269d0>
   269e4:	e1401115 	stw	r5,68(fp)
   269e8:	e009883a 	mov	r4,fp
   269ec:	00293840 	call	29384 <_Balloc>
   269f0:	d8800715 	stw	r2,28(sp)
   269f4:	e0801015 	stw	r2,64(fp)
   269f8:	00800384 	movi	r2,14
   269fc:	1400f736 	bltu	r2,r16,26ddc <_dtoa_r+0x764>
   26a00:	8800f626 	beq	r17,zero,26ddc <_dtoa_r+0x764>
   26a04:	d9c00517 	ldw	r7,20(sp)
   26a08:	01c39a0e 	bge	zero,r7,27874 <_dtoa_r+0x11fc>
   26a0c:	388003cc 	andi	r2,r7,15
   26a10:	100490fa 	slli	r2,r2,3
   26a14:	382bd13a 	srai	r21,r7,4
   26a18:	00c10034 	movhi	r3,1024
   26a1c:	18c06304 	addi	r3,r3,396
   26a20:	1885883a 	add	r2,r3,r2
   26a24:	a8c0040c 	andi	r3,r21,16
   26a28:	12400017 	ldw	r9,0(r2)
   26a2c:	12000117 	ldw	r8,4(r2)
   26a30:	18037926 	beq	r3,zero,27818 <_dtoa_r+0x11a0>
   26a34:	00810034 	movhi	r2,1024
   26a38:	10805904 	addi	r2,r2,356
   26a3c:	11800817 	ldw	r6,32(r2)
   26a40:	11c00917 	ldw	r7,36(r2)
   26a44:	9009883a 	mov	r4,r18
   26a48:	980b883a 	mov	r5,r19
   26a4c:	da001715 	stw	r8,92(sp)
   26a50:	da401615 	stw	r9,88(sp)
   26a54:	002f1080 	call	2f108 <__divdf3>
   26a58:	da001717 	ldw	r8,92(sp)
   26a5c:	da401617 	ldw	r9,88(sp)
   26a60:	ad4003cc 	andi	r21,r21,15
   26a64:	040000c4 	movi	r16,3
   26a68:	1023883a 	mov	r17,r2
   26a6c:	1829883a 	mov	r20,r3
   26a70:	a8001126 	beq	r21,zero,26ab8 <_dtoa_r+0x440>
   26a74:	05c10034 	movhi	r23,1024
   26a78:	bdc05904 	addi	r23,r23,356
   26a7c:	4805883a 	mov	r2,r9
   26a80:	4007883a 	mov	r3,r8
   26a84:	a980004c 	andi	r6,r21,1
   26a88:	1009883a 	mov	r4,r2
   26a8c:	a82bd07a 	srai	r21,r21,1
   26a90:	180b883a 	mov	r5,r3
   26a94:	30000426 	beq	r6,zero,26aa8 <_dtoa_r+0x430>
   26a98:	b9800017 	ldw	r6,0(r23)
   26a9c:	b9c00117 	ldw	r7,4(r23)
   26aa0:	84000044 	addi	r16,r16,1
   26aa4:	002fc480 	call	2fc48 <__muldf3>
   26aa8:	bdc00204 	addi	r23,r23,8
   26aac:	a83ff51e 	bne	r21,zero,26a84 <__alt_data_end+0xf8026a84>
   26ab0:	1013883a 	mov	r9,r2
   26ab4:	1811883a 	mov	r8,r3
   26ab8:	480d883a 	mov	r6,r9
   26abc:	400f883a 	mov	r7,r8
   26ac0:	8809883a 	mov	r4,r17
   26ac4:	a00b883a 	mov	r5,r20
   26ac8:	002f1080 	call	2f108 <__divdf3>
   26acc:	d8800f15 	stw	r2,60(sp)
   26ad0:	d8c01015 	stw	r3,64(sp)
   26ad4:	d8c00e17 	ldw	r3,56(sp)
   26ad8:	18000626 	beq	r3,zero,26af4 <_dtoa_r+0x47c>
   26adc:	d9000f17 	ldw	r4,60(sp)
   26ae0:	d9401017 	ldw	r5,64(sp)
   26ae4:	000d883a 	mov	r6,zero
   26ae8:	01cffc34 	movhi	r7,16368
   26aec:	002fb540 	call	2fb54 <__ledf2>
   26af0:	10040b16 	blt	r2,zero,27b20 <_dtoa_r+0x14a8>
   26af4:	8009883a 	mov	r4,r16
   26af8:	0030cdc0 	call	30cdc <__floatsidf>
   26afc:	d9800f17 	ldw	r6,60(sp)
   26b00:	d9c01017 	ldw	r7,64(sp)
   26b04:	1009883a 	mov	r4,r2
   26b08:	180b883a 	mov	r5,r3
   26b0c:	002fc480 	call	2fc48 <__muldf3>
   26b10:	000d883a 	mov	r6,zero
   26b14:	01d00734 	movhi	r7,16412
   26b18:	1009883a 	mov	r4,r2
   26b1c:	180b883a 	mov	r5,r3
   26b20:	002e85c0 	call	2e85c <__adddf3>
   26b24:	1021883a 	mov	r16,r2
   26b28:	d8800617 	ldw	r2,24(sp)
   26b2c:	047f3034 	movhi	r17,64704
   26b30:	1c63883a 	add	r17,r3,r17
   26b34:	10031826 	beq	r2,zero,27798 <_dtoa_r+0x1120>
   26b38:	d8c00517 	ldw	r3,20(sp)
   26b3c:	db000617 	ldw	r12,24(sp)
   26b40:	d8c01315 	stw	r3,76(sp)
   26b44:	d9000b17 	ldw	r4,44(sp)
   26b48:	20038f26 	beq	r4,zero,27988 <_dtoa_r+0x1310>
   26b4c:	60bfffc4 	addi	r2,r12,-1
   26b50:	100490fa 	slli	r2,r2,3
   26b54:	00c10034 	movhi	r3,1024
   26b58:	18c06304 	addi	r3,r3,396
   26b5c:	1885883a 	add	r2,r3,r2
   26b60:	11800017 	ldw	r6,0(r2)
   26b64:	11c00117 	ldw	r7,4(r2)
   26b68:	d8800717 	ldw	r2,28(sp)
   26b6c:	0009883a 	mov	r4,zero
   26b70:	014ff834 	movhi	r5,16352
   26b74:	db001615 	stw	r12,88(sp)
   26b78:	15c00044 	addi	r23,r2,1
   26b7c:	002f1080 	call	2f108 <__divdf3>
   26b80:	800d883a 	mov	r6,r16
   26b84:	880f883a 	mov	r7,r17
   26b88:	1009883a 	mov	r4,r2
   26b8c:	180b883a 	mov	r5,r3
   26b90:	00303600 	call	30360 <__subdf3>
   26b94:	d9401017 	ldw	r5,64(sp)
   26b98:	d9000f17 	ldw	r4,60(sp)
   26b9c:	102b883a 	mov	r21,r2
   26ba0:	d8c01215 	stw	r3,72(sp)
   26ba4:	0030c5c0 	call	30c5c <__fixdfsi>
   26ba8:	1009883a 	mov	r4,r2
   26bac:	1029883a 	mov	r20,r2
   26bb0:	0030cdc0 	call	30cdc <__floatsidf>
   26bb4:	d9000f17 	ldw	r4,60(sp)
   26bb8:	d9401017 	ldw	r5,64(sp)
   26bbc:	100d883a 	mov	r6,r2
   26bc0:	180f883a 	mov	r7,r3
   26bc4:	00303600 	call	30360 <__subdf3>
   26bc8:	1823883a 	mov	r17,r3
   26bcc:	d8c00717 	ldw	r3,28(sp)
   26bd0:	d9401217 	ldw	r5,72(sp)
   26bd4:	a2000c04 	addi	r8,r20,48
   26bd8:	1021883a 	mov	r16,r2
   26bdc:	1a000005 	stb	r8,0(r3)
   26be0:	800d883a 	mov	r6,r16
   26be4:	880f883a 	mov	r7,r17
   26be8:	a809883a 	mov	r4,r21
   26bec:	4029883a 	mov	r20,r8
   26bf0:	002fa780 	call	2fa78 <__gedf2>
   26bf4:	00841d16 	blt	zero,r2,27c6c <_dtoa_r+0x15f4>
   26bf8:	800d883a 	mov	r6,r16
   26bfc:	880f883a 	mov	r7,r17
   26c00:	0009883a 	mov	r4,zero
   26c04:	014ffc34 	movhi	r5,16368
   26c08:	00303600 	call	30360 <__subdf3>
   26c0c:	d9401217 	ldw	r5,72(sp)
   26c10:	100d883a 	mov	r6,r2
   26c14:	180f883a 	mov	r7,r3
   26c18:	a809883a 	mov	r4,r21
   26c1c:	002fa780 	call	2fa78 <__gedf2>
   26c20:	db001617 	ldw	r12,88(sp)
   26c24:	00840e16 	blt	zero,r2,27c60 <_dtoa_r+0x15e8>
   26c28:	00800044 	movi	r2,1
   26c2c:	13006b0e 	bge	r2,r12,26ddc <_dtoa_r+0x764>
   26c30:	d9000717 	ldw	r4,28(sp)
   26c34:	dd800f15 	stw	r22,60(sp)
   26c38:	dcc01015 	stw	r19,64(sp)
   26c3c:	2319883a 	add	r12,r4,r12
   26c40:	dcc01217 	ldw	r19,72(sp)
   26c44:	602d883a 	mov	r22,r12
   26c48:	dc801215 	stw	r18,72(sp)
   26c4c:	b825883a 	mov	r18,r23
   26c50:	00000906 	br	26c78 <_dtoa_r+0x600>
   26c54:	00303600 	call	30360 <__subdf3>
   26c58:	a80d883a 	mov	r6,r21
   26c5c:	980f883a 	mov	r7,r19
   26c60:	1009883a 	mov	r4,r2
   26c64:	180b883a 	mov	r5,r3
   26c68:	002fb540 	call	2fb54 <__ledf2>
   26c6c:	1003e816 	blt	r2,zero,27c10 <_dtoa_r+0x1598>
   26c70:	b825883a 	mov	r18,r23
   26c74:	bd83e926 	beq	r23,r22,27c1c <_dtoa_r+0x15a4>
   26c78:	a809883a 	mov	r4,r21
   26c7c:	980b883a 	mov	r5,r19
   26c80:	000d883a 	mov	r6,zero
   26c84:	01d00934 	movhi	r7,16420
   26c88:	002fc480 	call	2fc48 <__muldf3>
   26c8c:	000d883a 	mov	r6,zero
   26c90:	01d00934 	movhi	r7,16420
   26c94:	8009883a 	mov	r4,r16
   26c98:	880b883a 	mov	r5,r17
   26c9c:	102b883a 	mov	r21,r2
   26ca0:	1827883a 	mov	r19,r3
   26ca4:	002fc480 	call	2fc48 <__muldf3>
   26ca8:	180b883a 	mov	r5,r3
   26cac:	1009883a 	mov	r4,r2
   26cb0:	1821883a 	mov	r16,r3
   26cb4:	1023883a 	mov	r17,r2
   26cb8:	0030c5c0 	call	30c5c <__fixdfsi>
   26cbc:	1009883a 	mov	r4,r2
   26cc0:	1029883a 	mov	r20,r2
   26cc4:	0030cdc0 	call	30cdc <__floatsidf>
   26cc8:	8809883a 	mov	r4,r17
   26ccc:	800b883a 	mov	r5,r16
   26cd0:	100d883a 	mov	r6,r2
   26cd4:	180f883a 	mov	r7,r3
   26cd8:	00303600 	call	30360 <__subdf3>
   26cdc:	a5000c04 	addi	r20,r20,48
   26ce0:	a80d883a 	mov	r6,r21
   26ce4:	980f883a 	mov	r7,r19
   26ce8:	1009883a 	mov	r4,r2
   26cec:	180b883a 	mov	r5,r3
   26cf0:	95000005 	stb	r20,0(r18)
   26cf4:	1021883a 	mov	r16,r2
   26cf8:	1823883a 	mov	r17,r3
   26cfc:	002fb540 	call	2fb54 <__ledf2>
   26d00:	bdc00044 	addi	r23,r23,1
   26d04:	800d883a 	mov	r6,r16
   26d08:	880f883a 	mov	r7,r17
   26d0c:	0009883a 	mov	r4,zero
   26d10:	014ffc34 	movhi	r5,16368
   26d14:	103fcf0e 	bge	r2,zero,26c54 <__alt_data_end+0xf8026c54>
   26d18:	d8c01317 	ldw	r3,76(sp)
   26d1c:	d8c00515 	stw	r3,20(sp)
   26d20:	d9400917 	ldw	r5,36(sp)
   26d24:	e009883a 	mov	r4,fp
   26d28:	002942c0 	call	2942c <_Bfree>
   26d2c:	d9000517 	ldw	r4,20(sp)
   26d30:	d9802317 	ldw	r6,140(sp)
   26d34:	d9c02517 	ldw	r7,148(sp)
   26d38:	b8000005 	stb	zero,0(r23)
   26d3c:	20800044 	addi	r2,r4,1
   26d40:	30800015 	stw	r2,0(r6)
   26d44:	3802aa26 	beq	r7,zero,277f0 <_dtoa_r+0x1178>
   26d48:	3dc00015 	stw	r23,0(r7)
   26d4c:	d8800717 	ldw	r2,28(sp)
   26d50:	003e7906 	br	26738 <__alt_data_end+0xf8026738>
   26d54:	00800434 	movhi	r2,16
   26d58:	10bfffc4 	addi	r2,r2,-1
   26d5c:	88a2703a 	and	r17,r17,r2
   26d60:	883e851e 	bne	r17,zero,26778 <__alt_data_end+0xf8026778>
   26d64:	00810034 	movhi	r2,1024
   26d68:	10804504 	addi	r2,r2,276
   26d6c:	003e8406 	br	26780 <__alt_data_end+0xf8026780>
   26d70:	10c00204 	addi	r3,r2,8
   26d74:	003e8706 	br	26794 <__alt_data_end+0xf8026794>
   26d78:	01400434 	movhi	r5,16
   26d7c:	297fffc4 	addi	r5,r5,-1
   26d80:	994a703a 	and	r5,r19,r5
   26d84:	9009883a 	mov	r4,r18
   26d88:	843f0044 	addi	r16,r16,-1023
   26d8c:	294ffc34 	orhi	r5,r5,16368
   26d90:	dd800217 	ldw	r22,8(sp)
   26d94:	d8001115 	stw	zero,68(sp)
   26d98:	003ea506 	br	26830 <__alt_data_end+0xf8026830>
   26d9c:	00810034 	movhi	r2,1024
   26da0:	10803404 	addi	r2,r2,208
   26da4:	003e6406 	br	26738 <__alt_data_end+0xf8026738>
   26da8:	e0001115 	stw	zero,68(fp)
   26dac:	000b883a 	mov	r5,zero
   26db0:	e009883a 	mov	r4,fp
   26db4:	00293840 	call	29384 <_Balloc>
   26db8:	01bfffc4 	movi	r6,-1
   26dbc:	01c00044 	movi	r7,1
   26dc0:	d8800715 	stw	r2,28(sp)
   26dc4:	d9800c15 	stw	r6,48(sp)
   26dc8:	e0801015 	stw	r2,64(fp)
   26dcc:	d8000315 	stw	zero,12(sp)
   26dd0:	d9c00b15 	stw	r7,44(sp)
   26dd4:	d9800615 	stw	r6,24(sp)
   26dd8:	d8002215 	stw	zero,136(sp)
   26ddc:	d8800117 	ldw	r2,4(sp)
   26de0:	10008916 	blt	r2,zero,27008 <_dtoa_r+0x990>
   26de4:	d9000517 	ldw	r4,20(sp)
   26de8:	00c00384 	movi	r3,14
   26dec:	19008616 	blt	r3,r4,27008 <_dtoa_r+0x990>
   26df0:	200490fa 	slli	r2,r4,3
   26df4:	00c10034 	movhi	r3,1024
   26df8:	d9802217 	ldw	r6,136(sp)
   26dfc:	18c06304 	addi	r3,r3,396
   26e00:	1885883a 	add	r2,r3,r2
   26e04:	14000017 	ldw	r16,0(r2)
   26e08:	14400117 	ldw	r17,4(r2)
   26e0c:	30016316 	blt	r6,zero,2739c <_dtoa_r+0xd24>
   26e10:	800d883a 	mov	r6,r16
   26e14:	880f883a 	mov	r7,r17
   26e18:	9009883a 	mov	r4,r18
   26e1c:	980b883a 	mov	r5,r19
   26e20:	002f1080 	call	2f108 <__divdf3>
   26e24:	180b883a 	mov	r5,r3
   26e28:	1009883a 	mov	r4,r2
   26e2c:	0030c5c0 	call	30c5c <__fixdfsi>
   26e30:	1009883a 	mov	r4,r2
   26e34:	102b883a 	mov	r21,r2
   26e38:	0030cdc0 	call	30cdc <__floatsidf>
   26e3c:	800d883a 	mov	r6,r16
   26e40:	880f883a 	mov	r7,r17
   26e44:	1009883a 	mov	r4,r2
   26e48:	180b883a 	mov	r5,r3
   26e4c:	002fc480 	call	2fc48 <__muldf3>
   26e50:	100d883a 	mov	r6,r2
   26e54:	180f883a 	mov	r7,r3
   26e58:	9009883a 	mov	r4,r18
   26e5c:	980b883a 	mov	r5,r19
   26e60:	00303600 	call	30360 <__subdf3>
   26e64:	d9c00717 	ldw	r7,28(sp)
   26e68:	1009883a 	mov	r4,r2
   26e6c:	a8800c04 	addi	r2,r21,48
   26e70:	38800005 	stb	r2,0(r7)
   26e74:	3dc00044 	addi	r23,r7,1
   26e78:	d9c00617 	ldw	r7,24(sp)
   26e7c:	01800044 	movi	r6,1
   26e80:	180b883a 	mov	r5,r3
   26e84:	2005883a 	mov	r2,r4
   26e88:	39803826 	beq	r7,r6,26f6c <_dtoa_r+0x8f4>
   26e8c:	000d883a 	mov	r6,zero
   26e90:	01d00934 	movhi	r7,16420
   26e94:	002fc480 	call	2fc48 <__muldf3>
   26e98:	000d883a 	mov	r6,zero
   26e9c:	000f883a 	mov	r7,zero
   26ea0:	1009883a 	mov	r4,r2
   26ea4:	180b883a 	mov	r5,r3
   26ea8:	1025883a 	mov	r18,r2
   26eac:	1827883a 	mov	r19,r3
   26eb0:	002f9f00 	call	2f9f0 <__eqdf2>
   26eb4:	103f9a26 	beq	r2,zero,26d20 <__alt_data_end+0xf8026d20>
   26eb8:	d9c00617 	ldw	r7,24(sp)
   26ebc:	d8c00717 	ldw	r3,28(sp)
   26ec0:	b829883a 	mov	r20,r23
   26ec4:	38bfffc4 	addi	r2,r7,-1
   26ec8:	18ad883a 	add	r22,r3,r2
   26ecc:	00000a06 	br	26ef8 <_dtoa_r+0x880>
   26ed0:	002fc480 	call	2fc48 <__muldf3>
   26ed4:	000d883a 	mov	r6,zero
   26ed8:	000f883a 	mov	r7,zero
   26edc:	1009883a 	mov	r4,r2
   26ee0:	180b883a 	mov	r5,r3
   26ee4:	1025883a 	mov	r18,r2
   26ee8:	1827883a 	mov	r19,r3
   26eec:	b829883a 	mov	r20,r23
   26ef0:	002f9f00 	call	2f9f0 <__eqdf2>
   26ef4:	103f8a26 	beq	r2,zero,26d20 <__alt_data_end+0xf8026d20>
   26ef8:	800d883a 	mov	r6,r16
   26efc:	880f883a 	mov	r7,r17
   26f00:	9009883a 	mov	r4,r18
   26f04:	980b883a 	mov	r5,r19
   26f08:	002f1080 	call	2f108 <__divdf3>
   26f0c:	180b883a 	mov	r5,r3
   26f10:	1009883a 	mov	r4,r2
   26f14:	0030c5c0 	call	30c5c <__fixdfsi>
   26f18:	1009883a 	mov	r4,r2
   26f1c:	102b883a 	mov	r21,r2
   26f20:	0030cdc0 	call	30cdc <__floatsidf>
   26f24:	800d883a 	mov	r6,r16
   26f28:	880f883a 	mov	r7,r17
   26f2c:	1009883a 	mov	r4,r2
   26f30:	180b883a 	mov	r5,r3
   26f34:	002fc480 	call	2fc48 <__muldf3>
   26f38:	100d883a 	mov	r6,r2
   26f3c:	180f883a 	mov	r7,r3
   26f40:	9009883a 	mov	r4,r18
   26f44:	980b883a 	mov	r5,r19
   26f48:	00303600 	call	30360 <__subdf3>
   26f4c:	aa000c04 	addi	r8,r21,48
   26f50:	a2000005 	stb	r8,0(r20)
   26f54:	000d883a 	mov	r6,zero
   26f58:	01d00934 	movhi	r7,16420
   26f5c:	1009883a 	mov	r4,r2
   26f60:	180b883a 	mov	r5,r3
   26f64:	a5c00044 	addi	r23,r20,1
   26f68:	b53fd91e 	bne	r22,r20,26ed0 <__alt_data_end+0xf8026ed0>
   26f6c:	100d883a 	mov	r6,r2
   26f70:	180f883a 	mov	r7,r3
   26f74:	1009883a 	mov	r4,r2
   26f78:	180b883a 	mov	r5,r3
   26f7c:	002e85c0 	call	2e85c <__adddf3>
   26f80:	100d883a 	mov	r6,r2
   26f84:	180f883a 	mov	r7,r3
   26f88:	8009883a 	mov	r4,r16
   26f8c:	880b883a 	mov	r5,r17
   26f90:	1027883a 	mov	r19,r2
   26f94:	1825883a 	mov	r18,r3
   26f98:	002fb540 	call	2fb54 <__ledf2>
   26f9c:	10000816 	blt	r2,zero,26fc0 <_dtoa_r+0x948>
   26fa0:	980d883a 	mov	r6,r19
   26fa4:	900f883a 	mov	r7,r18
   26fa8:	8009883a 	mov	r4,r16
   26fac:	880b883a 	mov	r5,r17
   26fb0:	002f9f00 	call	2f9f0 <__eqdf2>
   26fb4:	103f5a1e 	bne	r2,zero,26d20 <__alt_data_end+0xf8026d20>
   26fb8:	ad40004c 	andi	r21,r21,1
   26fbc:	a83f5826 	beq	r21,zero,26d20 <__alt_data_end+0xf8026d20>
   26fc0:	bd3fffc3 	ldbu	r20,-1(r23)
   26fc4:	b8bfffc4 	addi	r2,r23,-1
   26fc8:	1007883a 	mov	r3,r2
   26fcc:	01400e44 	movi	r5,57
   26fd0:	d9800717 	ldw	r6,28(sp)
   26fd4:	00000506 	br	26fec <_dtoa_r+0x974>
   26fd8:	18ffffc4 	addi	r3,r3,-1
   26fdc:	11824726 	beq	r2,r6,278fc <_dtoa_r+0x1284>
   26fe0:	1d000003 	ldbu	r20,0(r3)
   26fe4:	102f883a 	mov	r23,r2
   26fe8:	10bfffc4 	addi	r2,r2,-1
   26fec:	a1003fcc 	andi	r4,r20,255
   26ff0:	2100201c 	xori	r4,r4,128
   26ff4:	213fe004 	addi	r4,r4,-128
   26ff8:	217ff726 	beq	r4,r5,26fd8 <__alt_data_end+0xf8026fd8>
   26ffc:	a2000044 	addi	r8,r20,1
   27000:	12000005 	stb	r8,0(r2)
   27004:	003f4606 	br	26d20 <__alt_data_end+0xf8026d20>
   27008:	d9000b17 	ldw	r4,44(sp)
   2700c:	2000c826 	beq	r4,zero,27330 <_dtoa_r+0xcb8>
   27010:	d9800317 	ldw	r6,12(sp)
   27014:	00c00044 	movi	r3,1
   27018:	1980f90e 	bge	r3,r6,27400 <_dtoa_r+0xd88>
   2701c:	d8800617 	ldw	r2,24(sp)
   27020:	d8c00a17 	ldw	r3,40(sp)
   27024:	157fffc4 	addi	r21,r2,-1
   27028:	1d41f316 	blt	r3,r21,277f8 <_dtoa_r+0x1180>
   2702c:	1d6bc83a 	sub	r21,r3,r21
   27030:	d9c00617 	ldw	r7,24(sp)
   27034:	3802aa16 	blt	r7,zero,27ae0 <_dtoa_r+0x1468>
   27038:	dd000817 	ldw	r20,32(sp)
   2703c:	d8800617 	ldw	r2,24(sp)
   27040:	d8c00817 	ldw	r3,32(sp)
   27044:	01400044 	movi	r5,1
   27048:	e009883a 	mov	r4,fp
   2704c:	1887883a 	add	r3,r3,r2
   27050:	d8c00815 	stw	r3,32(sp)
   27054:	b0ad883a 	add	r22,r22,r2
   27058:	00297900 	call	29790 <__i2b>
   2705c:	1023883a 	mov	r17,r2
   27060:	a0000826 	beq	r20,zero,27084 <_dtoa_r+0xa0c>
   27064:	0580070e 	bge	zero,r22,27084 <_dtoa_r+0xa0c>
   27068:	a005883a 	mov	r2,r20
   2706c:	b500b916 	blt	r22,r20,27354 <_dtoa_r+0xcdc>
   27070:	d9000817 	ldw	r4,32(sp)
   27074:	a0a9c83a 	sub	r20,r20,r2
   27078:	b0adc83a 	sub	r22,r22,r2
   2707c:	2089c83a 	sub	r4,r4,r2
   27080:	d9000815 	stw	r4,32(sp)
   27084:	d9800a17 	ldw	r6,40(sp)
   27088:	0181810e 	bge	zero,r6,27690 <_dtoa_r+0x1018>
   2708c:	d9c00b17 	ldw	r7,44(sp)
   27090:	3800b326 	beq	r7,zero,27360 <_dtoa_r+0xce8>
   27094:	a800b226 	beq	r21,zero,27360 <_dtoa_r+0xce8>
   27098:	880b883a 	mov	r5,r17
   2709c:	a80d883a 	mov	r6,r21
   270a0:	e009883a 	mov	r4,fp
   270a4:	00299c40 	call	299c4 <__pow5mult>
   270a8:	d9800917 	ldw	r6,36(sp)
   270ac:	100b883a 	mov	r5,r2
   270b0:	e009883a 	mov	r4,fp
   270b4:	1023883a 	mov	r17,r2
   270b8:	00297cc0 	call	297cc <__multiply>
   270bc:	1021883a 	mov	r16,r2
   270c0:	d8800a17 	ldw	r2,40(sp)
   270c4:	d9400917 	ldw	r5,36(sp)
   270c8:	e009883a 	mov	r4,fp
   270cc:	1545c83a 	sub	r2,r2,r21
   270d0:	d8800a15 	stw	r2,40(sp)
   270d4:	002942c0 	call	2942c <_Bfree>
   270d8:	d8c00a17 	ldw	r3,40(sp)
   270dc:	18009f1e 	bne	r3,zero,2735c <_dtoa_r+0xce4>
   270e0:	05c00044 	movi	r23,1
   270e4:	e009883a 	mov	r4,fp
   270e8:	b80b883a 	mov	r5,r23
   270ec:	00297900 	call	29790 <__i2b>
   270f0:	d9000d17 	ldw	r4,52(sp)
   270f4:	102b883a 	mov	r21,r2
   270f8:	2000ce26 	beq	r4,zero,27434 <_dtoa_r+0xdbc>
   270fc:	200d883a 	mov	r6,r4
   27100:	100b883a 	mov	r5,r2
   27104:	e009883a 	mov	r4,fp
   27108:	00299c40 	call	299c4 <__pow5mult>
   2710c:	d9800317 	ldw	r6,12(sp)
   27110:	102b883a 	mov	r21,r2
   27114:	b981810e 	bge	r23,r6,2771c <_dtoa_r+0x10a4>
   27118:	0027883a 	mov	r19,zero
   2711c:	a8800417 	ldw	r2,16(r21)
   27120:	05c00804 	movi	r23,32
   27124:	10800104 	addi	r2,r2,4
   27128:	1085883a 	add	r2,r2,r2
   2712c:	1085883a 	add	r2,r2,r2
   27130:	a885883a 	add	r2,r21,r2
   27134:	11000017 	ldw	r4,0(r2)
   27138:	00296780 	call	29678 <__hi0bits>
   2713c:	b885c83a 	sub	r2,r23,r2
   27140:	1585883a 	add	r2,r2,r22
   27144:	108007cc 	andi	r2,r2,31
   27148:	1000b326 	beq	r2,zero,27418 <_dtoa_r+0xda0>
   2714c:	00c00804 	movi	r3,32
   27150:	1887c83a 	sub	r3,r3,r2
   27154:	01000104 	movi	r4,4
   27158:	20c2cd0e 	bge	r4,r3,27c90 <_dtoa_r+0x1618>
   2715c:	00c00704 	movi	r3,28
   27160:	1885c83a 	sub	r2,r3,r2
   27164:	d8c00817 	ldw	r3,32(sp)
   27168:	a0a9883a 	add	r20,r20,r2
   2716c:	b0ad883a 	add	r22,r22,r2
   27170:	1887883a 	add	r3,r3,r2
   27174:	d8c00815 	stw	r3,32(sp)
   27178:	d9800817 	ldw	r6,32(sp)
   2717c:	0180040e 	bge	zero,r6,27190 <_dtoa_r+0xb18>
   27180:	800b883a 	mov	r5,r16
   27184:	e009883a 	mov	r4,fp
   27188:	0029b040 	call	29b04 <__lshift>
   2718c:	1021883a 	mov	r16,r2
   27190:	0580050e 	bge	zero,r22,271a8 <_dtoa_r+0xb30>
   27194:	a80b883a 	mov	r5,r21
   27198:	b00d883a 	mov	r6,r22
   2719c:	e009883a 	mov	r4,fp
   271a0:	0029b040 	call	29b04 <__lshift>
   271a4:	102b883a 	mov	r21,r2
   271a8:	d9c00e17 	ldw	r7,56(sp)
   271ac:	3801211e 	bne	r7,zero,27634 <_dtoa_r+0xfbc>
   271b0:	d9800617 	ldw	r6,24(sp)
   271b4:	0181380e 	bge	zero,r6,27698 <_dtoa_r+0x1020>
   271b8:	d8c00b17 	ldw	r3,44(sp)
   271bc:	1800ab1e 	bne	r3,zero,2746c <_dtoa_r+0xdf4>
   271c0:	dc800717 	ldw	r18,28(sp)
   271c4:	dcc00617 	ldw	r19,24(sp)
   271c8:	9029883a 	mov	r20,r18
   271cc:	00000206 	br	271d8 <_dtoa_r+0xb60>
   271d0:	00294540 	call	29454 <__multadd>
   271d4:	1021883a 	mov	r16,r2
   271d8:	a80b883a 	mov	r5,r21
   271dc:	8009883a 	mov	r4,r16
   271e0:	00264780 	call	26478 <quorem>
   271e4:	10800c04 	addi	r2,r2,48
   271e8:	90800005 	stb	r2,0(r18)
   271ec:	94800044 	addi	r18,r18,1
   271f0:	9507c83a 	sub	r3,r18,r20
   271f4:	000f883a 	mov	r7,zero
   271f8:	01800284 	movi	r6,10
   271fc:	800b883a 	mov	r5,r16
   27200:	e009883a 	mov	r4,fp
   27204:	1cfff216 	blt	r3,r19,271d0 <__alt_data_end+0xf80271d0>
   27208:	1011883a 	mov	r8,r2
   2720c:	d8800617 	ldw	r2,24(sp)
   27210:	0082370e 	bge	zero,r2,27af0 <_dtoa_r+0x1478>
   27214:	d9000717 	ldw	r4,28(sp)
   27218:	0025883a 	mov	r18,zero
   2721c:	20af883a 	add	r23,r4,r2
   27220:	01800044 	movi	r6,1
   27224:	800b883a 	mov	r5,r16
   27228:	e009883a 	mov	r4,fp
   2722c:	da001715 	stw	r8,92(sp)
   27230:	0029b040 	call	29b04 <__lshift>
   27234:	a80b883a 	mov	r5,r21
   27238:	1009883a 	mov	r4,r2
   2723c:	d8800915 	stw	r2,36(sp)
   27240:	0029c4c0 	call	29c4c <__mcmp>
   27244:	da001717 	ldw	r8,92(sp)
   27248:	0081800e 	bge	zero,r2,2784c <_dtoa_r+0x11d4>
   2724c:	b93fffc3 	ldbu	r4,-1(r23)
   27250:	b8bfffc4 	addi	r2,r23,-1
   27254:	1007883a 	mov	r3,r2
   27258:	01800e44 	movi	r6,57
   2725c:	d9c00717 	ldw	r7,28(sp)
   27260:	00000506 	br	27278 <_dtoa_r+0xc00>
   27264:	18ffffc4 	addi	r3,r3,-1
   27268:	11c12326 	beq	r2,r7,276f8 <_dtoa_r+0x1080>
   2726c:	19000003 	ldbu	r4,0(r3)
   27270:	102f883a 	mov	r23,r2
   27274:	10bfffc4 	addi	r2,r2,-1
   27278:	21403fcc 	andi	r5,r4,255
   2727c:	2940201c 	xori	r5,r5,128
   27280:	297fe004 	addi	r5,r5,-128
   27284:	29bff726 	beq	r5,r6,27264 <__alt_data_end+0xf8027264>
   27288:	21000044 	addi	r4,r4,1
   2728c:	11000005 	stb	r4,0(r2)
   27290:	a80b883a 	mov	r5,r21
   27294:	e009883a 	mov	r4,fp
   27298:	002942c0 	call	2942c <_Bfree>
   2729c:	883ea026 	beq	r17,zero,26d20 <__alt_data_end+0xf8026d20>
   272a0:	90000426 	beq	r18,zero,272b4 <_dtoa_r+0xc3c>
   272a4:	94400326 	beq	r18,r17,272b4 <_dtoa_r+0xc3c>
   272a8:	900b883a 	mov	r5,r18
   272ac:	e009883a 	mov	r4,fp
   272b0:	002942c0 	call	2942c <_Bfree>
   272b4:	880b883a 	mov	r5,r17
   272b8:	e009883a 	mov	r4,fp
   272bc:	002942c0 	call	2942c <_Bfree>
   272c0:	003e9706 	br	26d20 <__alt_data_end+0xf8026d20>
   272c4:	01800044 	movi	r6,1
   272c8:	d9800e15 	stw	r6,56(sp)
   272cc:	003d9606 	br	26928 <__alt_data_end+0xf8026928>
   272d0:	d8800817 	ldw	r2,32(sp)
   272d4:	d8c00517 	ldw	r3,20(sp)
   272d8:	d8000d15 	stw	zero,52(sp)
   272dc:	10c5c83a 	sub	r2,r2,r3
   272e0:	00c9c83a 	sub	r4,zero,r3
   272e4:	d8800815 	stw	r2,32(sp)
   272e8:	d9000a15 	stw	r4,40(sp)
   272ec:	003d9706 	br	2694c <__alt_data_end+0xf802694c>
   272f0:	05adc83a 	sub	r22,zero,r22
   272f4:	dd800815 	stw	r22,32(sp)
   272f8:	002d883a 	mov	r22,zero
   272fc:	003d8e06 	br	26938 <__alt_data_end+0xf8026938>
   27300:	d9000517 	ldw	r4,20(sp)
   27304:	0030cdc0 	call	30cdc <__floatsidf>
   27308:	100d883a 	mov	r6,r2
   2730c:	180f883a 	mov	r7,r3
   27310:	a009883a 	mov	r4,r20
   27314:	880b883a 	mov	r5,r17
   27318:	002f9f00 	call	2f9f0 <__eqdf2>
   2731c:	103d7126 	beq	r2,zero,268e4 <__alt_data_end+0xf80268e4>
   27320:	d9c00517 	ldw	r7,20(sp)
   27324:	39ffffc4 	addi	r7,r7,-1
   27328:	d9c00515 	stw	r7,20(sp)
   2732c:	003d6d06 	br	268e4 <__alt_data_end+0xf80268e4>
   27330:	dd400a17 	ldw	r21,40(sp)
   27334:	dd000817 	ldw	r20,32(sp)
   27338:	0023883a 	mov	r17,zero
   2733c:	003f4806 	br	27060 <__alt_data_end+0xf8027060>
   27340:	10e3c83a 	sub	r17,r2,r3
   27344:	9448983a 	sll	r4,r18,r17
   27348:	003d3206 	br	26814 <__alt_data_end+0xf8026814>
   2734c:	d8000e15 	stw	zero,56(sp)
   27350:	003d7506 	br	26928 <__alt_data_end+0xf8026928>
   27354:	b005883a 	mov	r2,r22
   27358:	003f4506 	br	27070 <__alt_data_end+0xf8027070>
   2735c:	dc000915 	stw	r16,36(sp)
   27360:	d9800a17 	ldw	r6,40(sp)
   27364:	d9400917 	ldw	r5,36(sp)
   27368:	e009883a 	mov	r4,fp
   2736c:	00299c40 	call	299c4 <__pow5mult>
   27370:	1021883a 	mov	r16,r2
   27374:	003f5a06 	br	270e0 <__alt_data_end+0xf80270e0>
   27378:	01c00044 	movi	r7,1
   2737c:	d9c00b15 	stw	r7,44(sp)
   27380:	d8802217 	ldw	r2,136(sp)
   27384:	0081280e 	bge	zero,r2,27828 <_dtoa_r+0x11b0>
   27388:	100d883a 	mov	r6,r2
   2738c:	1021883a 	mov	r16,r2
   27390:	d8800c15 	stw	r2,48(sp)
   27394:	d8800615 	stw	r2,24(sp)
   27398:	003d8806 	br	269bc <__alt_data_end+0xf80269bc>
   2739c:	d8800617 	ldw	r2,24(sp)
   273a0:	00be9b16 	blt	zero,r2,26e10 <__alt_data_end+0xf8026e10>
   273a4:	10010f1e 	bne	r2,zero,277e4 <_dtoa_r+0x116c>
   273a8:	880b883a 	mov	r5,r17
   273ac:	000d883a 	mov	r6,zero
   273b0:	01d00534 	movhi	r7,16404
   273b4:	8009883a 	mov	r4,r16
   273b8:	002fc480 	call	2fc48 <__muldf3>
   273bc:	900d883a 	mov	r6,r18
   273c0:	980f883a 	mov	r7,r19
   273c4:	1009883a 	mov	r4,r2
   273c8:	180b883a 	mov	r5,r3
   273cc:	002fa780 	call	2fa78 <__gedf2>
   273d0:	002b883a 	mov	r21,zero
   273d4:	0023883a 	mov	r17,zero
   273d8:	1000bf16 	blt	r2,zero,276d8 <_dtoa_r+0x1060>
   273dc:	d9802217 	ldw	r6,136(sp)
   273e0:	ddc00717 	ldw	r23,28(sp)
   273e4:	018c303a 	nor	r6,zero,r6
   273e8:	d9800515 	stw	r6,20(sp)
   273ec:	a80b883a 	mov	r5,r21
   273f0:	e009883a 	mov	r4,fp
   273f4:	002942c0 	call	2942c <_Bfree>
   273f8:	883e4926 	beq	r17,zero,26d20 <__alt_data_end+0xf8026d20>
   273fc:	003fad06 	br	272b4 <__alt_data_end+0xf80272b4>
   27400:	d9c01117 	ldw	r7,68(sp)
   27404:	3801bc26 	beq	r7,zero,27af8 <_dtoa_r+0x1480>
   27408:	10810cc4 	addi	r2,r2,1075
   2740c:	dd400a17 	ldw	r21,40(sp)
   27410:	dd000817 	ldw	r20,32(sp)
   27414:	003f0a06 	br	27040 <__alt_data_end+0xf8027040>
   27418:	00800704 	movi	r2,28
   2741c:	d9000817 	ldw	r4,32(sp)
   27420:	a0a9883a 	add	r20,r20,r2
   27424:	b0ad883a 	add	r22,r22,r2
   27428:	2089883a 	add	r4,r4,r2
   2742c:	d9000815 	stw	r4,32(sp)
   27430:	003f5106 	br	27178 <__alt_data_end+0xf8027178>
   27434:	d8c00317 	ldw	r3,12(sp)
   27438:	b8c1fc0e 	bge	r23,r3,27c2c <_dtoa_r+0x15b4>
   2743c:	0027883a 	mov	r19,zero
   27440:	b805883a 	mov	r2,r23
   27444:	003f3e06 	br	27140 <__alt_data_end+0xf8027140>
   27448:	880b883a 	mov	r5,r17
   2744c:	e009883a 	mov	r4,fp
   27450:	000f883a 	mov	r7,zero
   27454:	01800284 	movi	r6,10
   27458:	00294540 	call	29454 <__multadd>
   2745c:	d9000c17 	ldw	r4,48(sp)
   27460:	1023883a 	mov	r17,r2
   27464:	0102040e 	bge	zero,r4,27c78 <_dtoa_r+0x1600>
   27468:	d9000615 	stw	r4,24(sp)
   2746c:	0500050e 	bge	zero,r20,27484 <_dtoa_r+0xe0c>
   27470:	880b883a 	mov	r5,r17
   27474:	a00d883a 	mov	r6,r20
   27478:	e009883a 	mov	r4,fp
   2747c:	0029b040 	call	29b04 <__lshift>
   27480:	1023883a 	mov	r17,r2
   27484:	9801241e 	bne	r19,zero,27918 <_dtoa_r+0x12a0>
   27488:	8829883a 	mov	r20,r17
   2748c:	d9000617 	ldw	r4,24(sp)
   27490:	dcc00717 	ldw	r19,28(sp)
   27494:	9480004c 	andi	r18,r18,1
   27498:	20bfffc4 	addi	r2,r4,-1
   2749c:	9885883a 	add	r2,r19,r2
   274a0:	d8800415 	stw	r2,16(sp)
   274a4:	dc800615 	stw	r18,24(sp)
   274a8:	a80b883a 	mov	r5,r21
   274ac:	8009883a 	mov	r4,r16
   274b0:	00264780 	call	26478 <quorem>
   274b4:	880b883a 	mov	r5,r17
   274b8:	8009883a 	mov	r4,r16
   274bc:	102f883a 	mov	r23,r2
   274c0:	0029c4c0 	call	29c4c <__mcmp>
   274c4:	a80b883a 	mov	r5,r21
   274c8:	a00d883a 	mov	r6,r20
   274cc:	e009883a 	mov	r4,fp
   274d0:	102d883a 	mov	r22,r2
   274d4:	0029cac0 	call	29cac <__mdiff>
   274d8:	1007883a 	mov	r3,r2
   274dc:	10800317 	ldw	r2,12(r2)
   274e0:	bc800c04 	addi	r18,r23,48
   274e4:	180b883a 	mov	r5,r3
   274e8:	10004e1e 	bne	r2,zero,27624 <_dtoa_r+0xfac>
   274ec:	8009883a 	mov	r4,r16
   274f0:	d8c01615 	stw	r3,88(sp)
   274f4:	0029c4c0 	call	29c4c <__mcmp>
   274f8:	d8c01617 	ldw	r3,88(sp)
   274fc:	e009883a 	mov	r4,fp
   27500:	d8801615 	stw	r2,88(sp)
   27504:	180b883a 	mov	r5,r3
   27508:	002942c0 	call	2942c <_Bfree>
   2750c:	d8801617 	ldw	r2,88(sp)
   27510:	1000041e 	bne	r2,zero,27524 <_dtoa_r+0xeac>
   27514:	d9800317 	ldw	r6,12(sp)
   27518:	3000021e 	bne	r6,zero,27524 <_dtoa_r+0xeac>
   2751c:	d8c00617 	ldw	r3,24(sp)
   27520:	18003726 	beq	r3,zero,27600 <_dtoa_r+0xf88>
   27524:	b0002016 	blt	r22,zero,275a8 <_dtoa_r+0xf30>
   27528:	b000041e 	bne	r22,zero,2753c <_dtoa_r+0xec4>
   2752c:	d9000317 	ldw	r4,12(sp)
   27530:	2000021e 	bne	r4,zero,2753c <_dtoa_r+0xec4>
   27534:	d8c00617 	ldw	r3,24(sp)
   27538:	18001b26 	beq	r3,zero,275a8 <_dtoa_r+0xf30>
   2753c:	00810716 	blt	zero,r2,2795c <_dtoa_r+0x12e4>
   27540:	d8c00417 	ldw	r3,16(sp)
   27544:	9d800044 	addi	r22,r19,1
   27548:	9c800005 	stb	r18,0(r19)
   2754c:	b02f883a 	mov	r23,r22
   27550:	98c10626 	beq	r19,r3,2796c <_dtoa_r+0x12f4>
   27554:	800b883a 	mov	r5,r16
   27558:	000f883a 	mov	r7,zero
   2755c:	01800284 	movi	r6,10
   27560:	e009883a 	mov	r4,fp
   27564:	00294540 	call	29454 <__multadd>
   27568:	1021883a 	mov	r16,r2
   2756c:	000f883a 	mov	r7,zero
   27570:	01800284 	movi	r6,10
   27574:	880b883a 	mov	r5,r17
   27578:	e009883a 	mov	r4,fp
   2757c:	8d002526 	beq	r17,r20,27614 <_dtoa_r+0xf9c>
   27580:	00294540 	call	29454 <__multadd>
   27584:	a00b883a 	mov	r5,r20
   27588:	000f883a 	mov	r7,zero
   2758c:	01800284 	movi	r6,10
   27590:	e009883a 	mov	r4,fp
   27594:	1023883a 	mov	r17,r2
   27598:	00294540 	call	29454 <__multadd>
   2759c:	1029883a 	mov	r20,r2
   275a0:	b027883a 	mov	r19,r22
   275a4:	003fc006 	br	274a8 <__alt_data_end+0xf80274a8>
   275a8:	9011883a 	mov	r8,r18
   275ac:	00800e0e 	bge	zero,r2,275e8 <_dtoa_r+0xf70>
   275b0:	800b883a 	mov	r5,r16
   275b4:	01800044 	movi	r6,1
   275b8:	e009883a 	mov	r4,fp
   275bc:	da001715 	stw	r8,92(sp)
   275c0:	0029b040 	call	29b04 <__lshift>
   275c4:	a80b883a 	mov	r5,r21
   275c8:	1009883a 	mov	r4,r2
   275cc:	1021883a 	mov	r16,r2
   275d0:	0029c4c0 	call	29c4c <__mcmp>
   275d4:	da001717 	ldw	r8,92(sp)
   275d8:	0081960e 	bge	zero,r2,27c34 <_dtoa_r+0x15bc>
   275dc:	00800e44 	movi	r2,57
   275e0:	40817026 	beq	r8,r2,27ba4 <_dtoa_r+0x152c>
   275e4:	ba000c44 	addi	r8,r23,49
   275e8:	8825883a 	mov	r18,r17
   275ec:	9dc00044 	addi	r23,r19,1
   275f0:	9a000005 	stb	r8,0(r19)
   275f4:	a023883a 	mov	r17,r20
   275f8:	dc000915 	stw	r16,36(sp)
   275fc:	003f2406 	br	27290 <__alt_data_end+0xf8027290>
   27600:	00800e44 	movi	r2,57
   27604:	9011883a 	mov	r8,r18
   27608:	90816626 	beq	r18,r2,27ba4 <_dtoa_r+0x152c>
   2760c:	05bff516 	blt	zero,r22,275e4 <__alt_data_end+0xf80275e4>
   27610:	003ff506 	br	275e8 <__alt_data_end+0xf80275e8>
   27614:	00294540 	call	29454 <__multadd>
   27618:	1023883a 	mov	r17,r2
   2761c:	1029883a 	mov	r20,r2
   27620:	003fdf06 	br	275a0 <__alt_data_end+0xf80275a0>
   27624:	e009883a 	mov	r4,fp
   27628:	002942c0 	call	2942c <_Bfree>
   2762c:	00800044 	movi	r2,1
   27630:	003fbc06 	br	27524 <__alt_data_end+0xf8027524>
   27634:	a80b883a 	mov	r5,r21
   27638:	8009883a 	mov	r4,r16
   2763c:	0029c4c0 	call	29c4c <__mcmp>
   27640:	103edb0e 	bge	r2,zero,271b0 <__alt_data_end+0xf80271b0>
   27644:	800b883a 	mov	r5,r16
   27648:	000f883a 	mov	r7,zero
   2764c:	01800284 	movi	r6,10
   27650:	e009883a 	mov	r4,fp
   27654:	00294540 	call	29454 <__multadd>
   27658:	1021883a 	mov	r16,r2
   2765c:	d8800517 	ldw	r2,20(sp)
   27660:	d8c00b17 	ldw	r3,44(sp)
   27664:	10bfffc4 	addi	r2,r2,-1
   27668:	d8800515 	stw	r2,20(sp)
   2766c:	183f761e 	bne	r3,zero,27448 <__alt_data_end+0xf8027448>
   27670:	d9000c17 	ldw	r4,48(sp)
   27674:	0101730e 	bge	zero,r4,27c44 <_dtoa_r+0x15cc>
   27678:	d9000615 	stw	r4,24(sp)
   2767c:	003ed006 	br	271c0 <__alt_data_end+0xf80271c0>
   27680:	00800084 	movi	r2,2
   27684:	3081861e 	bne	r6,r2,27ca0 <_dtoa_r+0x1628>
   27688:	d8000b15 	stw	zero,44(sp)
   2768c:	003f3c06 	br	27380 <__alt_data_end+0xf8027380>
   27690:	dc000917 	ldw	r16,36(sp)
   27694:	003e9206 	br	270e0 <__alt_data_end+0xf80270e0>
   27698:	d9c00317 	ldw	r7,12(sp)
   2769c:	00800084 	movi	r2,2
   276a0:	11fec50e 	bge	r2,r7,271b8 <__alt_data_end+0xf80271b8>
   276a4:	d9000617 	ldw	r4,24(sp)
   276a8:	20013c1e 	bne	r4,zero,27b9c <_dtoa_r+0x1524>
   276ac:	a80b883a 	mov	r5,r21
   276b0:	000f883a 	mov	r7,zero
   276b4:	01800144 	movi	r6,5
   276b8:	e009883a 	mov	r4,fp
   276bc:	00294540 	call	29454 <__multadd>
   276c0:	100b883a 	mov	r5,r2
   276c4:	8009883a 	mov	r4,r16
   276c8:	102b883a 	mov	r21,r2
   276cc:	0029c4c0 	call	29c4c <__mcmp>
   276d0:	dc000915 	stw	r16,36(sp)
   276d4:	00bf410e 	bge	zero,r2,273dc <__alt_data_end+0xf80273dc>
   276d8:	d9c00717 	ldw	r7,28(sp)
   276dc:	00800c44 	movi	r2,49
   276e0:	38800005 	stb	r2,0(r7)
   276e4:	d8800517 	ldw	r2,20(sp)
   276e8:	3dc00044 	addi	r23,r7,1
   276ec:	10800044 	addi	r2,r2,1
   276f0:	d8800515 	stw	r2,20(sp)
   276f4:	003f3d06 	br	273ec <__alt_data_end+0xf80273ec>
   276f8:	d9800517 	ldw	r6,20(sp)
   276fc:	d9c00717 	ldw	r7,28(sp)
   27700:	00800c44 	movi	r2,49
   27704:	31800044 	addi	r6,r6,1
   27708:	d9800515 	stw	r6,20(sp)
   2770c:	38800005 	stb	r2,0(r7)
   27710:	003edf06 	br	27290 <__alt_data_end+0xf8027290>
   27714:	d8000b15 	stw	zero,44(sp)
   27718:	003c9f06 	br	26998 <__alt_data_end+0xf8026998>
   2771c:	903e7e1e 	bne	r18,zero,27118 <__alt_data_end+0xf8027118>
   27720:	00800434 	movhi	r2,16
   27724:	10bfffc4 	addi	r2,r2,-1
   27728:	9884703a 	and	r2,r19,r2
   2772c:	1000ea1e 	bne	r2,zero,27ad8 <_dtoa_r+0x1460>
   27730:	9cdffc2c 	andhi	r19,r19,32752
   27734:	9800e826 	beq	r19,zero,27ad8 <_dtoa_r+0x1460>
   27738:	d9c00817 	ldw	r7,32(sp)
   2773c:	b5800044 	addi	r22,r22,1
   27740:	04c00044 	movi	r19,1
   27744:	39c00044 	addi	r7,r7,1
   27748:	d9c00815 	stw	r7,32(sp)
   2774c:	d8800d17 	ldw	r2,52(sp)
   27750:	103e721e 	bne	r2,zero,2711c <__alt_data_end+0xf802711c>
   27754:	00800044 	movi	r2,1
   27758:	003e7906 	br	27140 <__alt_data_end+0xf8027140>
   2775c:	8009883a 	mov	r4,r16
   27760:	0030cdc0 	call	30cdc <__floatsidf>
   27764:	d9800f17 	ldw	r6,60(sp)
   27768:	d9c01017 	ldw	r7,64(sp)
   2776c:	1009883a 	mov	r4,r2
   27770:	180b883a 	mov	r5,r3
   27774:	002fc480 	call	2fc48 <__muldf3>
   27778:	000d883a 	mov	r6,zero
   2777c:	01d00734 	movhi	r7,16412
   27780:	1009883a 	mov	r4,r2
   27784:	180b883a 	mov	r5,r3
   27788:	002e85c0 	call	2e85c <__adddf3>
   2778c:	047f3034 	movhi	r17,64704
   27790:	1021883a 	mov	r16,r2
   27794:	1c63883a 	add	r17,r3,r17
   27798:	d9000f17 	ldw	r4,60(sp)
   2779c:	d9401017 	ldw	r5,64(sp)
   277a0:	000d883a 	mov	r6,zero
   277a4:	01d00534 	movhi	r7,16404
   277a8:	00303600 	call	30360 <__subdf3>
   277ac:	800d883a 	mov	r6,r16
   277b0:	880f883a 	mov	r7,r17
   277b4:	1009883a 	mov	r4,r2
   277b8:	180b883a 	mov	r5,r3
   277bc:	102b883a 	mov	r21,r2
   277c0:	1829883a 	mov	r20,r3
   277c4:	002fa780 	call	2fa78 <__gedf2>
   277c8:	00806c16 	blt	zero,r2,2797c <_dtoa_r+0x1304>
   277cc:	89e0003c 	xorhi	r7,r17,32768
   277d0:	800d883a 	mov	r6,r16
   277d4:	a809883a 	mov	r4,r21
   277d8:	a00b883a 	mov	r5,r20
   277dc:	002fb540 	call	2fb54 <__ledf2>
   277e0:	103d7e0e 	bge	r2,zero,26ddc <__alt_data_end+0xf8026ddc>
   277e4:	002b883a 	mov	r21,zero
   277e8:	0023883a 	mov	r17,zero
   277ec:	003efb06 	br	273dc <__alt_data_end+0xf80273dc>
   277f0:	d8800717 	ldw	r2,28(sp)
   277f4:	003bd006 	br	26738 <__alt_data_end+0xf8026738>
   277f8:	d9000a17 	ldw	r4,40(sp)
   277fc:	d9800d17 	ldw	r6,52(sp)
   27800:	dd400a15 	stw	r21,40(sp)
   27804:	a905c83a 	sub	r2,r21,r4
   27808:	308d883a 	add	r6,r6,r2
   2780c:	d9800d15 	stw	r6,52(sp)
   27810:	002b883a 	mov	r21,zero
   27814:	003e0606 	br	27030 <__alt_data_end+0xf8027030>
   27818:	9023883a 	mov	r17,r18
   2781c:	9829883a 	mov	r20,r19
   27820:	04000084 	movi	r16,2
   27824:	003c9206 	br	26a70 <__alt_data_end+0xf8026a70>
   27828:	04000044 	movi	r16,1
   2782c:	dc000c15 	stw	r16,48(sp)
   27830:	dc000615 	stw	r16,24(sp)
   27834:	dc002215 	stw	r16,136(sp)
   27838:	e0001115 	stw	zero,68(fp)
   2783c:	000b883a 	mov	r5,zero
   27840:	003c6906 	br	269e8 <__alt_data_end+0xf80269e8>
   27844:	3021883a 	mov	r16,r6
   27848:	003ffb06 	br	27838 <__alt_data_end+0xf8027838>
   2784c:	1000021e 	bne	r2,zero,27858 <_dtoa_r+0x11e0>
   27850:	4200004c 	andi	r8,r8,1
   27854:	403e7d1e 	bne	r8,zero,2724c <__alt_data_end+0xf802724c>
   27858:	01000c04 	movi	r4,48
   2785c:	00000106 	br	27864 <_dtoa_r+0x11ec>
   27860:	102f883a 	mov	r23,r2
   27864:	b8bfffc4 	addi	r2,r23,-1
   27868:	10c00007 	ldb	r3,0(r2)
   2786c:	193ffc26 	beq	r3,r4,27860 <__alt_data_end+0xf8027860>
   27870:	003e8706 	br	27290 <__alt_data_end+0xf8027290>
   27874:	d8800517 	ldw	r2,20(sp)
   27878:	00a3c83a 	sub	r17,zero,r2
   2787c:	8800a426 	beq	r17,zero,27b10 <_dtoa_r+0x1498>
   27880:	888003cc 	andi	r2,r17,15
   27884:	100490fa 	slli	r2,r2,3
   27888:	00c10034 	movhi	r3,1024
   2788c:	18c06304 	addi	r3,r3,396
   27890:	1885883a 	add	r2,r3,r2
   27894:	11800017 	ldw	r6,0(r2)
   27898:	11c00117 	ldw	r7,4(r2)
   2789c:	9009883a 	mov	r4,r18
   278a0:	980b883a 	mov	r5,r19
   278a4:	8823d13a 	srai	r17,r17,4
   278a8:	002fc480 	call	2fc48 <__muldf3>
   278ac:	d8800f15 	stw	r2,60(sp)
   278b0:	d8c01015 	stw	r3,64(sp)
   278b4:	8800e826 	beq	r17,zero,27c58 <_dtoa_r+0x15e0>
   278b8:	05010034 	movhi	r20,1024
   278bc:	a5005904 	addi	r20,r20,356
   278c0:	04000084 	movi	r16,2
   278c4:	8980004c 	andi	r6,r17,1
   278c8:	1009883a 	mov	r4,r2
   278cc:	8823d07a 	srai	r17,r17,1
   278d0:	180b883a 	mov	r5,r3
   278d4:	30000426 	beq	r6,zero,278e8 <_dtoa_r+0x1270>
   278d8:	a1800017 	ldw	r6,0(r20)
   278dc:	a1c00117 	ldw	r7,4(r20)
   278e0:	84000044 	addi	r16,r16,1
   278e4:	002fc480 	call	2fc48 <__muldf3>
   278e8:	a5000204 	addi	r20,r20,8
   278ec:	883ff51e 	bne	r17,zero,278c4 <__alt_data_end+0xf80278c4>
   278f0:	d8800f15 	stw	r2,60(sp)
   278f4:	d8c01015 	stw	r3,64(sp)
   278f8:	003c7606 	br	26ad4 <__alt_data_end+0xf8026ad4>
   278fc:	00c00c04 	movi	r3,48
   27900:	10c00005 	stb	r3,0(r2)
   27904:	d8c00517 	ldw	r3,20(sp)
   27908:	bd3fffc3 	ldbu	r20,-1(r23)
   2790c:	18c00044 	addi	r3,r3,1
   27910:	d8c00515 	stw	r3,20(sp)
   27914:	003db906 	br	26ffc <__alt_data_end+0xf8026ffc>
   27918:	89400117 	ldw	r5,4(r17)
   2791c:	e009883a 	mov	r4,fp
   27920:	00293840 	call	29384 <_Balloc>
   27924:	89800417 	ldw	r6,16(r17)
   27928:	89400304 	addi	r5,r17,12
   2792c:	11000304 	addi	r4,r2,12
   27930:	31800084 	addi	r6,r6,2
   27934:	318d883a 	add	r6,r6,r6
   27938:	318d883a 	add	r6,r6,r6
   2793c:	1027883a 	mov	r19,r2
   27940:	00290e00 	call	290e0 <memcpy>
   27944:	01800044 	movi	r6,1
   27948:	980b883a 	mov	r5,r19
   2794c:	e009883a 	mov	r4,fp
   27950:	0029b040 	call	29b04 <__lshift>
   27954:	1029883a 	mov	r20,r2
   27958:	003ecc06 	br	2748c <__alt_data_end+0xf802748c>
   2795c:	00800e44 	movi	r2,57
   27960:	90809026 	beq	r18,r2,27ba4 <_dtoa_r+0x152c>
   27964:	92000044 	addi	r8,r18,1
   27968:	003f1f06 	br	275e8 <__alt_data_end+0xf80275e8>
   2796c:	9011883a 	mov	r8,r18
   27970:	8825883a 	mov	r18,r17
   27974:	a023883a 	mov	r17,r20
   27978:	003e2906 	br	27220 <__alt_data_end+0xf8027220>
   2797c:	002b883a 	mov	r21,zero
   27980:	0023883a 	mov	r17,zero
   27984:	003f5406 	br	276d8 <__alt_data_end+0xf80276d8>
   27988:	61bfffc4 	addi	r6,r12,-1
   2798c:	300490fa 	slli	r2,r6,3
   27990:	00c10034 	movhi	r3,1024
   27994:	18c06304 	addi	r3,r3,396
   27998:	1885883a 	add	r2,r3,r2
   2799c:	11000017 	ldw	r4,0(r2)
   279a0:	11400117 	ldw	r5,4(r2)
   279a4:	d8800717 	ldw	r2,28(sp)
   279a8:	880f883a 	mov	r7,r17
   279ac:	d9801215 	stw	r6,72(sp)
   279b0:	800d883a 	mov	r6,r16
   279b4:	db001615 	stw	r12,88(sp)
   279b8:	15c00044 	addi	r23,r2,1
   279bc:	002fc480 	call	2fc48 <__muldf3>
   279c0:	d9401017 	ldw	r5,64(sp)
   279c4:	d9000f17 	ldw	r4,60(sp)
   279c8:	d8c01515 	stw	r3,84(sp)
   279cc:	d8801415 	stw	r2,80(sp)
   279d0:	0030c5c0 	call	30c5c <__fixdfsi>
   279d4:	1009883a 	mov	r4,r2
   279d8:	1021883a 	mov	r16,r2
   279dc:	0030cdc0 	call	30cdc <__floatsidf>
   279e0:	d9000f17 	ldw	r4,60(sp)
   279e4:	d9401017 	ldw	r5,64(sp)
   279e8:	100d883a 	mov	r6,r2
   279ec:	180f883a 	mov	r7,r3
   279f0:	00303600 	call	30360 <__subdf3>
   279f4:	1829883a 	mov	r20,r3
   279f8:	d8c00717 	ldw	r3,28(sp)
   279fc:	84000c04 	addi	r16,r16,48
   27a00:	1023883a 	mov	r17,r2
   27a04:	1c000005 	stb	r16,0(r3)
   27a08:	db001617 	ldw	r12,88(sp)
   27a0c:	00800044 	movi	r2,1
   27a10:	60802226 	beq	r12,r2,27a9c <_dtoa_r+0x1424>
   27a14:	d9c00717 	ldw	r7,28(sp)
   27a18:	8805883a 	mov	r2,r17
   27a1c:	b82b883a 	mov	r21,r23
   27a20:	3b19883a 	add	r12,r7,r12
   27a24:	6023883a 	mov	r17,r12
   27a28:	a007883a 	mov	r3,r20
   27a2c:	dc800f15 	stw	r18,60(sp)
   27a30:	000d883a 	mov	r6,zero
   27a34:	01d00934 	movhi	r7,16420
   27a38:	1009883a 	mov	r4,r2
   27a3c:	180b883a 	mov	r5,r3
   27a40:	002fc480 	call	2fc48 <__muldf3>
   27a44:	180b883a 	mov	r5,r3
   27a48:	1009883a 	mov	r4,r2
   27a4c:	1829883a 	mov	r20,r3
   27a50:	1025883a 	mov	r18,r2
   27a54:	0030c5c0 	call	30c5c <__fixdfsi>
   27a58:	1009883a 	mov	r4,r2
   27a5c:	1021883a 	mov	r16,r2
   27a60:	0030cdc0 	call	30cdc <__floatsidf>
   27a64:	100d883a 	mov	r6,r2
   27a68:	180f883a 	mov	r7,r3
   27a6c:	9009883a 	mov	r4,r18
   27a70:	a00b883a 	mov	r5,r20
   27a74:	84000c04 	addi	r16,r16,48
   27a78:	00303600 	call	30360 <__subdf3>
   27a7c:	ad400044 	addi	r21,r21,1
   27a80:	ac3fffc5 	stb	r16,-1(r21)
   27a84:	ac7fea1e 	bne	r21,r17,27a30 <__alt_data_end+0xf8027a30>
   27a88:	1023883a 	mov	r17,r2
   27a8c:	d8801217 	ldw	r2,72(sp)
   27a90:	dc800f17 	ldw	r18,60(sp)
   27a94:	1829883a 	mov	r20,r3
   27a98:	b8af883a 	add	r23,r23,r2
   27a9c:	d9001417 	ldw	r4,80(sp)
   27aa0:	d9401517 	ldw	r5,84(sp)
   27aa4:	000d883a 	mov	r6,zero
   27aa8:	01cff834 	movhi	r7,16352
   27aac:	002e85c0 	call	2e85c <__adddf3>
   27ab0:	880d883a 	mov	r6,r17
   27ab4:	a00f883a 	mov	r7,r20
   27ab8:	1009883a 	mov	r4,r2
   27abc:	180b883a 	mov	r5,r3
   27ac0:	002fb540 	call	2fb54 <__ledf2>
   27ac4:	10003e0e 	bge	r2,zero,27bc0 <_dtoa_r+0x1548>
   27ac8:	d9001317 	ldw	r4,76(sp)
   27acc:	bd3fffc3 	ldbu	r20,-1(r23)
   27ad0:	d9000515 	stw	r4,20(sp)
   27ad4:	003d3b06 	br	26fc4 <__alt_data_end+0xf8026fc4>
   27ad8:	0027883a 	mov	r19,zero
   27adc:	003f1b06 	br	2774c <__alt_data_end+0xf802774c>
   27ae0:	d8800817 	ldw	r2,32(sp)
   27ae4:	11e9c83a 	sub	r20,r2,r7
   27ae8:	0005883a 	mov	r2,zero
   27aec:	003d5406 	br	27040 <__alt_data_end+0xf8027040>
   27af0:	00800044 	movi	r2,1
   27af4:	003dc706 	br	27214 <__alt_data_end+0xf8027214>
   27af8:	d8c00217 	ldw	r3,8(sp)
   27afc:	00800d84 	movi	r2,54
   27b00:	dd400a17 	ldw	r21,40(sp)
   27b04:	10c5c83a 	sub	r2,r2,r3
   27b08:	dd000817 	ldw	r20,32(sp)
   27b0c:	003d4c06 	br	27040 <__alt_data_end+0xf8027040>
   27b10:	dc800f15 	stw	r18,60(sp)
   27b14:	dcc01015 	stw	r19,64(sp)
   27b18:	04000084 	movi	r16,2
   27b1c:	003bed06 	br	26ad4 <__alt_data_end+0xf8026ad4>
   27b20:	d9000617 	ldw	r4,24(sp)
   27b24:	203f0d26 	beq	r4,zero,2775c <__alt_data_end+0xf802775c>
   27b28:	d9800c17 	ldw	r6,48(sp)
   27b2c:	01bcab0e 	bge	zero,r6,26ddc <__alt_data_end+0xf8026ddc>
   27b30:	d9401017 	ldw	r5,64(sp)
   27b34:	d9000f17 	ldw	r4,60(sp)
   27b38:	000d883a 	mov	r6,zero
   27b3c:	01d00934 	movhi	r7,16420
   27b40:	002fc480 	call	2fc48 <__muldf3>
   27b44:	81000044 	addi	r4,r16,1
   27b48:	d8800f15 	stw	r2,60(sp)
   27b4c:	d8c01015 	stw	r3,64(sp)
   27b50:	0030cdc0 	call	30cdc <__floatsidf>
   27b54:	d9800f17 	ldw	r6,60(sp)
   27b58:	d9c01017 	ldw	r7,64(sp)
   27b5c:	1009883a 	mov	r4,r2
   27b60:	180b883a 	mov	r5,r3
   27b64:	002fc480 	call	2fc48 <__muldf3>
   27b68:	01d00734 	movhi	r7,16412
   27b6c:	000d883a 	mov	r6,zero
   27b70:	1009883a 	mov	r4,r2
   27b74:	180b883a 	mov	r5,r3
   27b78:	002e85c0 	call	2e85c <__adddf3>
   27b7c:	d9c00517 	ldw	r7,20(sp)
   27b80:	047f3034 	movhi	r17,64704
   27b84:	1021883a 	mov	r16,r2
   27b88:	39ffffc4 	addi	r7,r7,-1
   27b8c:	d9c01315 	stw	r7,76(sp)
   27b90:	1c63883a 	add	r17,r3,r17
   27b94:	db000c17 	ldw	r12,48(sp)
   27b98:	003bea06 	br	26b44 <__alt_data_end+0xf8026b44>
   27b9c:	dc000915 	stw	r16,36(sp)
   27ba0:	003e0e06 	br	273dc <__alt_data_end+0xf80273dc>
   27ba4:	01000e44 	movi	r4,57
   27ba8:	8825883a 	mov	r18,r17
   27bac:	9dc00044 	addi	r23,r19,1
   27bb0:	99000005 	stb	r4,0(r19)
   27bb4:	a023883a 	mov	r17,r20
   27bb8:	dc000915 	stw	r16,36(sp)
   27bbc:	003da406 	br	27250 <__alt_data_end+0xf8027250>
   27bc0:	d9801417 	ldw	r6,80(sp)
   27bc4:	d9c01517 	ldw	r7,84(sp)
   27bc8:	0009883a 	mov	r4,zero
   27bcc:	014ff834 	movhi	r5,16352
   27bd0:	00303600 	call	30360 <__subdf3>
   27bd4:	880d883a 	mov	r6,r17
   27bd8:	a00f883a 	mov	r7,r20
   27bdc:	1009883a 	mov	r4,r2
   27be0:	180b883a 	mov	r5,r3
   27be4:	002fa780 	call	2fa78 <__gedf2>
   27be8:	00bc7c0e 	bge	zero,r2,26ddc <__alt_data_end+0xf8026ddc>
   27bec:	01000c04 	movi	r4,48
   27bf0:	00000106 	br	27bf8 <_dtoa_r+0x1580>
   27bf4:	102f883a 	mov	r23,r2
   27bf8:	b8bfffc4 	addi	r2,r23,-1
   27bfc:	10c00007 	ldb	r3,0(r2)
   27c00:	193ffc26 	beq	r3,r4,27bf4 <__alt_data_end+0xf8027bf4>
   27c04:	d9801317 	ldw	r6,76(sp)
   27c08:	d9800515 	stw	r6,20(sp)
   27c0c:	003c4406 	br	26d20 <__alt_data_end+0xf8026d20>
   27c10:	d9801317 	ldw	r6,76(sp)
   27c14:	d9800515 	stw	r6,20(sp)
   27c18:	003cea06 	br	26fc4 <__alt_data_end+0xf8026fc4>
   27c1c:	dd800f17 	ldw	r22,60(sp)
   27c20:	dcc01017 	ldw	r19,64(sp)
   27c24:	dc801217 	ldw	r18,72(sp)
   27c28:	003c6c06 	br	26ddc <__alt_data_end+0xf8026ddc>
   27c2c:	903e031e 	bne	r18,zero,2743c <__alt_data_end+0xf802743c>
   27c30:	003ebb06 	br	27720 <__alt_data_end+0xf8027720>
   27c34:	103e6c1e 	bne	r2,zero,275e8 <__alt_data_end+0xf80275e8>
   27c38:	4080004c 	andi	r2,r8,1
   27c3c:	103e6a26 	beq	r2,zero,275e8 <__alt_data_end+0xf80275e8>
   27c40:	003e6606 	br	275dc <__alt_data_end+0xf80275dc>
   27c44:	d8c00317 	ldw	r3,12(sp)
   27c48:	00800084 	movi	r2,2
   27c4c:	10c02916 	blt	r2,r3,27cf4 <_dtoa_r+0x167c>
   27c50:	d9000c17 	ldw	r4,48(sp)
   27c54:	003e8806 	br	27678 <__alt_data_end+0xf8027678>
   27c58:	04000084 	movi	r16,2
   27c5c:	003b9d06 	br	26ad4 <__alt_data_end+0xf8026ad4>
   27c60:	d9001317 	ldw	r4,76(sp)
   27c64:	d9000515 	stw	r4,20(sp)
   27c68:	003cd606 	br	26fc4 <__alt_data_end+0xf8026fc4>
   27c6c:	d8801317 	ldw	r2,76(sp)
   27c70:	d8800515 	stw	r2,20(sp)
   27c74:	003c2a06 	br	26d20 <__alt_data_end+0xf8026d20>
   27c78:	d9800317 	ldw	r6,12(sp)
   27c7c:	00800084 	movi	r2,2
   27c80:	11801516 	blt	r2,r6,27cd8 <_dtoa_r+0x1660>
   27c84:	d9c00c17 	ldw	r7,48(sp)
   27c88:	d9c00615 	stw	r7,24(sp)
   27c8c:	003df706 	br	2746c <__alt_data_end+0xf802746c>
   27c90:	193d3926 	beq	r3,r4,27178 <__alt_data_end+0xf8027178>
   27c94:	00c00f04 	movi	r3,60
   27c98:	1885c83a 	sub	r2,r3,r2
   27c9c:	003ddf06 	br	2741c <__alt_data_end+0xf802741c>
   27ca0:	e009883a 	mov	r4,fp
   27ca4:	e0001115 	stw	zero,68(fp)
   27ca8:	000b883a 	mov	r5,zero
   27cac:	00293840 	call	29384 <_Balloc>
   27cb0:	d8800715 	stw	r2,28(sp)
   27cb4:	d8c00717 	ldw	r3,28(sp)
   27cb8:	00bfffc4 	movi	r2,-1
   27cbc:	01000044 	movi	r4,1
   27cc0:	d8800c15 	stw	r2,48(sp)
   27cc4:	e0c01015 	stw	r3,64(fp)
   27cc8:	d9000b15 	stw	r4,44(sp)
   27ccc:	d8800615 	stw	r2,24(sp)
   27cd0:	d8002215 	stw	zero,136(sp)
   27cd4:	003c4106 	br	26ddc <__alt_data_end+0xf8026ddc>
   27cd8:	d8c00c17 	ldw	r3,48(sp)
   27cdc:	d8c00615 	stw	r3,24(sp)
   27ce0:	003e7006 	br	276a4 <__alt_data_end+0xf80276a4>
   27ce4:	04400044 	movi	r17,1
   27ce8:	003b2006 	br	2696c <__alt_data_end+0xf802696c>
   27cec:	000b883a 	mov	r5,zero
   27cf0:	003b3d06 	br	269e8 <__alt_data_end+0xf80269e8>
   27cf4:	d8800c17 	ldw	r2,48(sp)
   27cf8:	d8800615 	stw	r2,24(sp)
   27cfc:	003e6906 	br	276a4 <__alt_data_end+0xf80276a4>

00027d00 <__sflush_r>:
   27d00:	2880030b 	ldhu	r2,12(r5)
   27d04:	defffb04 	addi	sp,sp,-20
   27d08:	dcc00315 	stw	r19,12(sp)
   27d0c:	dc400115 	stw	r17,4(sp)
   27d10:	dfc00415 	stw	ra,16(sp)
   27d14:	dc800215 	stw	r18,8(sp)
   27d18:	dc000015 	stw	r16,0(sp)
   27d1c:	10c0020c 	andi	r3,r2,8
   27d20:	2823883a 	mov	r17,r5
   27d24:	2027883a 	mov	r19,r4
   27d28:	1800311e 	bne	r3,zero,27df0 <__sflush_r+0xf0>
   27d2c:	28c00117 	ldw	r3,4(r5)
   27d30:	10820014 	ori	r2,r2,2048
   27d34:	2880030d 	sth	r2,12(r5)
   27d38:	00c04b0e 	bge	zero,r3,27e68 <__sflush_r+0x168>
   27d3c:	8a000a17 	ldw	r8,40(r17)
   27d40:	40002326 	beq	r8,zero,27dd0 <__sflush_r+0xd0>
   27d44:	9c000017 	ldw	r16,0(r19)
   27d48:	10c4000c 	andi	r3,r2,4096
   27d4c:	98000015 	stw	zero,0(r19)
   27d50:	18004826 	beq	r3,zero,27e74 <__sflush_r+0x174>
   27d54:	89801417 	ldw	r6,80(r17)
   27d58:	10c0010c 	andi	r3,r2,4
   27d5c:	18000626 	beq	r3,zero,27d78 <__sflush_r+0x78>
   27d60:	88c00117 	ldw	r3,4(r17)
   27d64:	88800c17 	ldw	r2,48(r17)
   27d68:	30cdc83a 	sub	r6,r6,r3
   27d6c:	10000226 	beq	r2,zero,27d78 <__sflush_r+0x78>
   27d70:	88800f17 	ldw	r2,60(r17)
   27d74:	308dc83a 	sub	r6,r6,r2
   27d78:	89400717 	ldw	r5,28(r17)
   27d7c:	000f883a 	mov	r7,zero
   27d80:	9809883a 	mov	r4,r19
   27d84:	403ee83a 	callr	r8
   27d88:	00ffffc4 	movi	r3,-1
   27d8c:	10c04426 	beq	r2,r3,27ea0 <__sflush_r+0x1a0>
   27d90:	88c0030b 	ldhu	r3,12(r17)
   27d94:	89000417 	ldw	r4,16(r17)
   27d98:	88000115 	stw	zero,4(r17)
   27d9c:	197dffcc 	andi	r5,r3,63487
   27da0:	8940030d 	sth	r5,12(r17)
   27da4:	89000015 	stw	r4,0(r17)
   27da8:	18c4000c 	andi	r3,r3,4096
   27dac:	18002c1e 	bne	r3,zero,27e60 <__sflush_r+0x160>
   27db0:	89400c17 	ldw	r5,48(r17)
   27db4:	9c000015 	stw	r16,0(r19)
   27db8:	28000526 	beq	r5,zero,27dd0 <__sflush_r+0xd0>
   27dbc:	88801004 	addi	r2,r17,64
   27dc0:	28800226 	beq	r5,r2,27dcc <__sflush_r+0xcc>
   27dc4:	9809883a 	mov	r4,r19
   27dc8:	00285180 	call	28518 <_free_r>
   27dcc:	88000c15 	stw	zero,48(r17)
   27dd0:	0005883a 	mov	r2,zero
   27dd4:	dfc00417 	ldw	ra,16(sp)
   27dd8:	dcc00317 	ldw	r19,12(sp)
   27ddc:	dc800217 	ldw	r18,8(sp)
   27de0:	dc400117 	ldw	r17,4(sp)
   27de4:	dc000017 	ldw	r16,0(sp)
   27de8:	dec00504 	addi	sp,sp,20
   27dec:	f800283a 	ret
   27df0:	2c800417 	ldw	r18,16(r5)
   27df4:	903ff626 	beq	r18,zero,27dd0 <__alt_data_end+0xf8027dd0>
   27df8:	2c000017 	ldw	r16,0(r5)
   27dfc:	108000cc 	andi	r2,r2,3
   27e00:	2c800015 	stw	r18,0(r5)
   27e04:	84a1c83a 	sub	r16,r16,r18
   27e08:	1000131e 	bne	r2,zero,27e58 <__sflush_r+0x158>
   27e0c:	28800517 	ldw	r2,20(r5)
   27e10:	88800215 	stw	r2,8(r17)
   27e14:	04000316 	blt	zero,r16,27e24 <__sflush_r+0x124>
   27e18:	003fed06 	br	27dd0 <__alt_data_end+0xf8027dd0>
   27e1c:	90a5883a 	add	r18,r18,r2
   27e20:	043feb0e 	bge	zero,r16,27dd0 <__alt_data_end+0xf8027dd0>
   27e24:	88800917 	ldw	r2,36(r17)
   27e28:	89400717 	ldw	r5,28(r17)
   27e2c:	800f883a 	mov	r7,r16
   27e30:	900d883a 	mov	r6,r18
   27e34:	9809883a 	mov	r4,r19
   27e38:	103ee83a 	callr	r2
   27e3c:	80a1c83a 	sub	r16,r16,r2
   27e40:	00bff616 	blt	zero,r2,27e1c <__alt_data_end+0xf8027e1c>
   27e44:	88c0030b 	ldhu	r3,12(r17)
   27e48:	00bfffc4 	movi	r2,-1
   27e4c:	18c01014 	ori	r3,r3,64
   27e50:	88c0030d 	sth	r3,12(r17)
   27e54:	003fdf06 	br	27dd4 <__alt_data_end+0xf8027dd4>
   27e58:	0005883a 	mov	r2,zero
   27e5c:	003fec06 	br	27e10 <__alt_data_end+0xf8027e10>
   27e60:	88801415 	stw	r2,80(r17)
   27e64:	003fd206 	br	27db0 <__alt_data_end+0xf8027db0>
   27e68:	28c00f17 	ldw	r3,60(r5)
   27e6c:	00ffb316 	blt	zero,r3,27d3c <__alt_data_end+0xf8027d3c>
   27e70:	003fd706 	br	27dd0 <__alt_data_end+0xf8027dd0>
   27e74:	89400717 	ldw	r5,28(r17)
   27e78:	000d883a 	mov	r6,zero
   27e7c:	01c00044 	movi	r7,1
   27e80:	9809883a 	mov	r4,r19
   27e84:	403ee83a 	callr	r8
   27e88:	100d883a 	mov	r6,r2
   27e8c:	00bfffc4 	movi	r2,-1
   27e90:	30801426 	beq	r6,r2,27ee4 <__sflush_r+0x1e4>
   27e94:	8880030b 	ldhu	r2,12(r17)
   27e98:	8a000a17 	ldw	r8,40(r17)
   27e9c:	003fae06 	br	27d58 <__alt_data_end+0xf8027d58>
   27ea0:	98c00017 	ldw	r3,0(r19)
   27ea4:	183fba26 	beq	r3,zero,27d90 <__alt_data_end+0xf8027d90>
   27ea8:	01000744 	movi	r4,29
   27eac:	19000626 	beq	r3,r4,27ec8 <__sflush_r+0x1c8>
   27eb0:	01000584 	movi	r4,22
   27eb4:	19000426 	beq	r3,r4,27ec8 <__sflush_r+0x1c8>
   27eb8:	88c0030b 	ldhu	r3,12(r17)
   27ebc:	18c01014 	ori	r3,r3,64
   27ec0:	88c0030d 	sth	r3,12(r17)
   27ec4:	003fc306 	br	27dd4 <__alt_data_end+0xf8027dd4>
   27ec8:	8880030b 	ldhu	r2,12(r17)
   27ecc:	88c00417 	ldw	r3,16(r17)
   27ed0:	88000115 	stw	zero,4(r17)
   27ed4:	10bdffcc 	andi	r2,r2,63487
   27ed8:	8880030d 	sth	r2,12(r17)
   27edc:	88c00015 	stw	r3,0(r17)
   27ee0:	003fb306 	br	27db0 <__alt_data_end+0xf8027db0>
   27ee4:	98800017 	ldw	r2,0(r19)
   27ee8:	103fea26 	beq	r2,zero,27e94 <__alt_data_end+0xf8027e94>
   27eec:	00c00744 	movi	r3,29
   27ef0:	10c00226 	beq	r2,r3,27efc <__sflush_r+0x1fc>
   27ef4:	00c00584 	movi	r3,22
   27ef8:	10c0031e 	bne	r2,r3,27f08 <__sflush_r+0x208>
   27efc:	9c000015 	stw	r16,0(r19)
   27f00:	0005883a 	mov	r2,zero
   27f04:	003fb306 	br	27dd4 <__alt_data_end+0xf8027dd4>
   27f08:	88c0030b 	ldhu	r3,12(r17)
   27f0c:	3005883a 	mov	r2,r6
   27f10:	18c01014 	ori	r3,r3,64
   27f14:	88c0030d 	sth	r3,12(r17)
   27f18:	003fae06 	br	27dd4 <__alt_data_end+0xf8027dd4>

00027f1c <_fflush_r>:
   27f1c:	defffd04 	addi	sp,sp,-12
   27f20:	dc000115 	stw	r16,4(sp)
   27f24:	dfc00215 	stw	ra,8(sp)
   27f28:	2021883a 	mov	r16,r4
   27f2c:	20000226 	beq	r4,zero,27f38 <_fflush_r+0x1c>
   27f30:	20800e17 	ldw	r2,56(r4)
   27f34:	10000c26 	beq	r2,zero,27f68 <_fflush_r+0x4c>
   27f38:	2880030f 	ldh	r2,12(r5)
   27f3c:	1000051e 	bne	r2,zero,27f54 <_fflush_r+0x38>
   27f40:	0005883a 	mov	r2,zero
   27f44:	dfc00217 	ldw	ra,8(sp)
   27f48:	dc000117 	ldw	r16,4(sp)
   27f4c:	dec00304 	addi	sp,sp,12
   27f50:	f800283a 	ret
   27f54:	8009883a 	mov	r4,r16
   27f58:	dfc00217 	ldw	ra,8(sp)
   27f5c:	dc000117 	ldw	r16,4(sp)
   27f60:	dec00304 	addi	sp,sp,12
   27f64:	0027d001 	jmpi	27d00 <__sflush_r>
   27f68:	d9400015 	stw	r5,0(sp)
   27f6c:	00282f80 	call	282f8 <__sinit>
   27f70:	d9400017 	ldw	r5,0(sp)
   27f74:	003ff006 	br	27f38 <__alt_data_end+0xf8027f38>

00027f78 <fflush>:
   27f78:	20000526 	beq	r4,zero,27f90 <fflush+0x18>
   27f7c:	00810034 	movhi	r2,1024
   27f80:	1087e904 	addi	r2,r2,8100
   27f84:	200b883a 	mov	r5,r4
   27f88:	11000017 	ldw	r4,0(r2)
   27f8c:	0027f1c1 	jmpi	27f1c <_fflush_r>
   27f90:	00810034 	movhi	r2,1024
   27f94:	1087e804 	addi	r2,r2,8096
   27f98:	11000017 	ldw	r4,0(r2)
   27f9c:	014000b4 	movhi	r5,2
   27fa0:	295fc704 	addi	r5,r5,32540
   27fa4:	0028da81 	jmpi	28da8 <_fwalk_reent>

00027fa8 <__fp_unlock>:
   27fa8:	0005883a 	mov	r2,zero
   27fac:	f800283a 	ret

00027fb0 <_cleanup_r>:
   27fb0:	014000f4 	movhi	r5,3
   27fb4:	29756b04 	addi	r5,r5,-10836
   27fb8:	0028da81 	jmpi	28da8 <_fwalk_reent>

00027fbc <__sinit.part.1>:
   27fbc:	defff704 	addi	sp,sp,-36
   27fc0:	00c000b4 	movhi	r3,2
   27fc4:	dfc00815 	stw	ra,32(sp)
   27fc8:	ddc00715 	stw	r23,28(sp)
   27fcc:	dd800615 	stw	r22,24(sp)
   27fd0:	dd400515 	stw	r21,20(sp)
   27fd4:	dd000415 	stw	r20,16(sp)
   27fd8:	dcc00315 	stw	r19,12(sp)
   27fdc:	dc800215 	stw	r18,8(sp)
   27fe0:	dc400115 	stw	r17,4(sp)
   27fe4:	dc000015 	stw	r16,0(sp)
   27fe8:	18dfec04 	addi	r3,r3,32688
   27fec:	24000117 	ldw	r16,4(r4)
   27ff0:	20c00f15 	stw	r3,60(r4)
   27ff4:	2080bb04 	addi	r2,r4,748
   27ff8:	00c000c4 	movi	r3,3
   27ffc:	20c0b915 	stw	r3,740(r4)
   28000:	2080ba15 	stw	r2,744(r4)
   28004:	2000b815 	stw	zero,736(r4)
   28008:	05c00204 	movi	r23,8
   2800c:	00800104 	movi	r2,4
   28010:	2025883a 	mov	r18,r4
   28014:	b80d883a 	mov	r6,r23
   28018:	81001704 	addi	r4,r16,92
   2801c:	000b883a 	mov	r5,zero
   28020:	80000015 	stw	zero,0(r16)
   28024:	80000115 	stw	zero,4(r16)
   28028:	80000215 	stw	zero,8(r16)
   2802c:	8080030d 	sth	r2,12(r16)
   28030:	80001915 	stw	zero,100(r16)
   28034:	8000038d 	sth	zero,14(r16)
   28038:	80000415 	stw	zero,16(r16)
   2803c:	80000515 	stw	zero,20(r16)
   28040:	80000615 	stw	zero,24(r16)
   28044:	00216600 	call	21660 <memset>
   28048:	058000b4 	movhi	r22,2
   2804c:	94400217 	ldw	r17,8(r18)
   28050:	054000b4 	movhi	r21,2
   28054:	050000b4 	movhi	r20,2
   28058:	04c000b4 	movhi	r19,2
   2805c:	b586fd04 	addi	r22,r22,7156
   28060:	ad471404 	addi	r21,r21,7248
   28064:	a5073304 	addi	r20,r20,7372
   28068:	9cc74a04 	addi	r19,r19,7464
   2806c:	85800815 	stw	r22,32(r16)
   28070:	85400915 	stw	r21,36(r16)
   28074:	85000a15 	stw	r20,40(r16)
   28078:	84c00b15 	stw	r19,44(r16)
   2807c:	84000715 	stw	r16,28(r16)
   28080:	00800284 	movi	r2,10
   28084:	8880030d 	sth	r2,12(r17)
   28088:	00800044 	movi	r2,1
   2808c:	b80d883a 	mov	r6,r23
   28090:	89001704 	addi	r4,r17,92
   28094:	000b883a 	mov	r5,zero
   28098:	88000015 	stw	zero,0(r17)
   2809c:	88000115 	stw	zero,4(r17)
   280a0:	88000215 	stw	zero,8(r17)
   280a4:	88001915 	stw	zero,100(r17)
   280a8:	8880038d 	sth	r2,14(r17)
   280ac:	88000415 	stw	zero,16(r17)
   280b0:	88000515 	stw	zero,20(r17)
   280b4:	88000615 	stw	zero,24(r17)
   280b8:	00216600 	call	21660 <memset>
   280bc:	94000317 	ldw	r16,12(r18)
   280c0:	00800484 	movi	r2,18
   280c4:	8c400715 	stw	r17,28(r17)
   280c8:	8d800815 	stw	r22,32(r17)
   280cc:	8d400915 	stw	r21,36(r17)
   280d0:	8d000a15 	stw	r20,40(r17)
   280d4:	8cc00b15 	stw	r19,44(r17)
   280d8:	8080030d 	sth	r2,12(r16)
   280dc:	00800084 	movi	r2,2
   280e0:	80000015 	stw	zero,0(r16)
   280e4:	80000115 	stw	zero,4(r16)
   280e8:	80000215 	stw	zero,8(r16)
   280ec:	80001915 	stw	zero,100(r16)
   280f0:	8080038d 	sth	r2,14(r16)
   280f4:	80000415 	stw	zero,16(r16)
   280f8:	80000515 	stw	zero,20(r16)
   280fc:	80000615 	stw	zero,24(r16)
   28100:	b80d883a 	mov	r6,r23
   28104:	000b883a 	mov	r5,zero
   28108:	81001704 	addi	r4,r16,92
   2810c:	00216600 	call	21660 <memset>
   28110:	00800044 	movi	r2,1
   28114:	84000715 	stw	r16,28(r16)
   28118:	85800815 	stw	r22,32(r16)
   2811c:	85400915 	stw	r21,36(r16)
   28120:	85000a15 	stw	r20,40(r16)
   28124:	84c00b15 	stw	r19,44(r16)
   28128:	90800e15 	stw	r2,56(r18)
   2812c:	dfc00817 	ldw	ra,32(sp)
   28130:	ddc00717 	ldw	r23,28(sp)
   28134:	dd800617 	ldw	r22,24(sp)
   28138:	dd400517 	ldw	r21,20(sp)
   2813c:	dd000417 	ldw	r20,16(sp)
   28140:	dcc00317 	ldw	r19,12(sp)
   28144:	dc800217 	ldw	r18,8(sp)
   28148:	dc400117 	ldw	r17,4(sp)
   2814c:	dc000017 	ldw	r16,0(sp)
   28150:	dec00904 	addi	sp,sp,36
   28154:	f800283a 	ret

00028158 <__fp_lock>:
   28158:	0005883a 	mov	r2,zero
   2815c:	f800283a 	ret

00028160 <__sfmoreglue>:
   28160:	defffc04 	addi	sp,sp,-16
   28164:	dc400115 	stw	r17,4(sp)
   28168:	2c7fffc4 	addi	r17,r5,-1
   2816c:	8c401a24 	muli	r17,r17,104
   28170:	dc800215 	stw	r18,8(sp)
   28174:	2825883a 	mov	r18,r5
   28178:	89401d04 	addi	r5,r17,116
   2817c:	dc000015 	stw	r16,0(sp)
   28180:	dfc00315 	stw	ra,12(sp)
   28184:	0020e540 	call	20e54 <_malloc_r>
   28188:	1021883a 	mov	r16,r2
   2818c:	10000726 	beq	r2,zero,281ac <__sfmoreglue+0x4c>
   28190:	11000304 	addi	r4,r2,12
   28194:	10000015 	stw	zero,0(r2)
   28198:	14800115 	stw	r18,4(r2)
   2819c:	11000215 	stw	r4,8(r2)
   281a0:	89801a04 	addi	r6,r17,104
   281a4:	000b883a 	mov	r5,zero
   281a8:	00216600 	call	21660 <memset>
   281ac:	8005883a 	mov	r2,r16
   281b0:	dfc00317 	ldw	ra,12(sp)
   281b4:	dc800217 	ldw	r18,8(sp)
   281b8:	dc400117 	ldw	r17,4(sp)
   281bc:	dc000017 	ldw	r16,0(sp)
   281c0:	dec00404 	addi	sp,sp,16
   281c4:	f800283a 	ret

000281c8 <__sfp>:
   281c8:	defffb04 	addi	sp,sp,-20
   281cc:	dc000015 	stw	r16,0(sp)
   281d0:	04010034 	movhi	r16,1024
   281d4:	8407e804 	addi	r16,r16,8096
   281d8:	dcc00315 	stw	r19,12(sp)
   281dc:	2027883a 	mov	r19,r4
   281e0:	81000017 	ldw	r4,0(r16)
   281e4:	dfc00415 	stw	ra,16(sp)
   281e8:	dc800215 	stw	r18,8(sp)
   281ec:	20800e17 	ldw	r2,56(r4)
   281f0:	dc400115 	stw	r17,4(sp)
   281f4:	1000021e 	bne	r2,zero,28200 <__sfp+0x38>
   281f8:	0027fbc0 	call	27fbc <__sinit.part.1>
   281fc:	81000017 	ldw	r4,0(r16)
   28200:	2480b804 	addi	r18,r4,736
   28204:	047fffc4 	movi	r17,-1
   28208:	91000117 	ldw	r4,4(r18)
   2820c:	94000217 	ldw	r16,8(r18)
   28210:	213fffc4 	addi	r4,r4,-1
   28214:	20000a16 	blt	r4,zero,28240 <__sfp+0x78>
   28218:	8080030f 	ldh	r2,12(r16)
   2821c:	10000c26 	beq	r2,zero,28250 <__sfp+0x88>
   28220:	80c01d04 	addi	r3,r16,116
   28224:	00000206 	br	28230 <__sfp+0x68>
   28228:	18bfe60f 	ldh	r2,-104(r3)
   2822c:	10000826 	beq	r2,zero,28250 <__sfp+0x88>
   28230:	213fffc4 	addi	r4,r4,-1
   28234:	1c3ffd04 	addi	r16,r3,-12
   28238:	18c01a04 	addi	r3,r3,104
   2823c:	247ffa1e 	bne	r4,r17,28228 <__alt_data_end+0xf8028228>
   28240:	90800017 	ldw	r2,0(r18)
   28244:	10001d26 	beq	r2,zero,282bc <__sfp+0xf4>
   28248:	1025883a 	mov	r18,r2
   2824c:	003fee06 	br	28208 <__alt_data_end+0xf8028208>
   28250:	00bfffc4 	movi	r2,-1
   28254:	8080038d 	sth	r2,14(r16)
   28258:	00800044 	movi	r2,1
   2825c:	8080030d 	sth	r2,12(r16)
   28260:	80001915 	stw	zero,100(r16)
   28264:	80000015 	stw	zero,0(r16)
   28268:	80000215 	stw	zero,8(r16)
   2826c:	80000115 	stw	zero,4(r16)
   28270:	80000415 	stw	zero,16(r16)
   28274:	80000515 	stw	zero,20(r16)
   28278:	80000615 	stw	zero,24(r16)
   2827c:	01800204 	movi	r6,8
   28280:	000b883a 	mov	r5,zero
   28284:	81001704 	addi	r4,r16,92
   28288:	00216600 	call	21660 <memset>
   2828c:	8005883a 	mov	r2,r16
   28290:	80000c15 	stw	zero,48(r16)
   28294:	80000d15 	stw	zero,52(r16)
   28298:	80001115 	stw	zero,68(r16)
   2829c:	80001215 	stw	zero,72(r16)
   282a0:	dfc00417 	ldw	ra,16(sp)
   282a4:	dcc00317 	ldw	r19,12(sp)
   282a8:	dc800217 	ldw	r18,8(sp)
   282ac:	dc400117 	ldw	r17,4(sp)
   282b0:	dc000017 	ldw	r16,0(sp)
   282b4:	dec00504 	addi	sp,sp,20
   282b8:	f800283a 	ret
   282bc:	01400104 	movi	r5,4
   282c0:	9809883a 	mov	r4,r19
   282c4:	00281600 	call	28160 <__sfmoreglue>
   282c8:	90800015 	stw	r2,0(r18)
   282cc:	103fde1e 	bne	r2,zero,28248 <__alt_data_end+0xf8028248>
   282d0:	00800304 	movi	r2,12
   282d4:	98800015 	stw	r2,0(r19)
   282d8:	0005883a 	mov	r2,zero
   282dc:	003ff006 	br	282a0 <__alt_data_end+0xf80282a0>

000282e0 <_cleanup>:
   282e0:	00810034 	movhi	r2,1024
   282e4:	1087e804 	addi	r2,r2,8096
   282e8:	11000017 	ldw	r4,0(r2)
   282ec:	014000f4 	movhi	r5,3
   282f0:	29756b04 	addi	r5,r5,-10836
   282f4:	0028da81 	jmpi	28da8 <_fwalk_reent>

000282f8 <__sinit>:
   282f8:	20800e17 	ldw	r2,56(r4)
   282fc:	10000126 	beq	r2,zero,28304 <__sinit+0xc>
   28300:	f800283a 	ret
   28304:	0027fbc1 	jmpi	27fbc <__sinit.part.1>

00028308 <__sfp_lock_acquire>:
   28308:	f800283a 	ret

0002830c <__sfp_lock_release>:
   2830c:	f800283a 	ret

00028310 <__sinit_lock_acquire>:
   28310:	f800283a 	ret

00028314 <__sinit_lock_release>:
   28314:	f800283a 	ret

00028318 <__fp_lock_all>:
   28318:	00810034 	movhi	r2,1024
   2831c:	1087e904 	addi	r2,r2,8100
   28320:	11000017 	ldw	r4,0(r2)
   28324:	014000f4 	movhi	r5,3
   28328:	29605604 	addi	r5,r5,-32424
   2832c:	0028ce41 	jmpi	28ce4 <_fwalk>

00028330 <__fp_unlock_all>:
   28330:	00810034 	movhi	r2,1024
   28334:	1087e904 	addi	r2,r2,8100
   28338:	11000017 	ldw	r4,0(r2)
   2833c:	014000b4 	movhi	r5,2
   28340:	295fea04 	addi	r5,r5,32680
   28344:	0028ce41 	jmpi	28ce4 <_fwalk>

00028348 <__sflags>:
   28348:	28800007 	ldb	r2,0(r5)
   2834c:	00c01c84 	movi	r3,114
   28350:	10c02426 	beq	r2,r3,283e4 <__sflags+0x9c>
   28354:	00c01dc4 	movi	r3,119
   28358:	10c01e26 	beq	r2,r3,283d4 <__sflags+0x8c>
   2835c:	00c01844 	movi	r3,97
   28360:	10c00426 	beq	r2,r3,28374 <__sflags+0x2c>
   28364:	00800584 	movi	r2,22
   28368:	20800015 	stw	r2,0(r4)
   2836c:	0005883a 	mov	r2,zero
   28370:	f800283a 	ret
   28374:	02c08204 	movi	r11,520
   28378:	01000044 	movi	r4,1
   2837c:	00804204 	movi	r2,264
   28380:	01c00ac4 	movi	r7,43
   28384:	02bff8c4 	movi	r10,-29
   28388:	027fff04 	movi	r9,-4
   2838c:	02001e04 	movi	r8,120
   28390:	29400044 	addi	r5,r5,1
   28394:	28c00007 	ldb	r3,0(r5)
   28398:	18000626 	beq	r3,zero,283b4 <__sflags+0x6c>
   2839c:	19c00826 	beq	r3,r7,283c0 <__sflags+0x78>
   283a0:	1a3ffb1e 	bne	r3,r8,28390 <__alt_data_end+0xf8028390>
   283a4:	29400044 	addi	r5,r5,1
   283a8:	28c00007 	ldb	r3,0(r5)
   283ac:	21020014 	ori	r4,r4,2048
   283b0:	183ffa1e 	bne	r3,zero,2839c <__alt_data_end+0xf802839c>
   283b4:	22c8b03a 	or	r4,r4,r11
   283b8:	31000015 	stw	r4,0(r6)
   283bc:	f800283a 	ret
   283c0:	1284703a 	and	r2,r2,r10
   283c4:	2248703a 	and	r4,r4,r9
   283c8:	10800414 	ori	r2,r2,16
   283cc:	21000094 	ori	r4,r4,2
   283d0:	003fef06 	br	28390 <__alt_data_end+0xf8028390>
   283d4:	02c18004 	movi	r11,1536
   283d8:	01000044 	movi	r4,1
   283dc:	00800204 	movi	r2,8
   283e0:	003fe706 	br	28380 <__alt_data_end+0xf8028380>
   283e4:	0017883a 	mov	r11,zero
   283e8:	0009883a 	mov	r4,zero
   283ec:	00800104 	movi	r2,4
   283f0:	003fe306 	br	28380 <__alt_data_end+0xf8028380>

000283f4 <_malloc_trim_r>:
   283f4:	defffb04 	addi	sp,sp,-20
   283f8:	dcc00315 	stw	r19,12(sp)
   283fc:	04c10034 	movhi	r19,1024
   28400:	dc800215 	stw	r18,8(sp)
   28404:	dc400115 	stw	r17,4(sp)
   28408:	dc000015 	stw	r16,0(sp)
   2840c:	dfc00415 	stw	ra,16(sp)
   28410:	2821883a 	mov	r16,r5
   28414:	9cc20704 	addi	r19,r19,2076
   28418:	2025883a 	mov	r18,r4
   2841c:	00314400 	call	31440 <__malloc_lock>
   28420:	98800217 	ldw	r2,8(r19)
   28424:	14400117 	ldw	r17,4(r2)
   28428:	00bfff04 	movi	r2,-4
   2842c:	88a2703a 	and	r17,r17,r2
   28430:	8c21c83a 	sub	r16,r17,r16
   28434:	8403fbc4 	addi	r16,r16,4079
   28438:	8020d33a 	srli	r16,r16,12
   2843c:	0083ffc4 	movi	r2,4095
   28440:	843fffc4 	addi	r16,r16,-1
   28444:	8020933a 	slli	r16,r16,12
   28448:	1400060e 	bge	r2,r16,28464 <_malloc_trim_r+0x70>
   2844c:	000b883a 	mov	r5,zero
   28450:	9009883a 	mov	r4,r18
   28454:	0021ba00 	call	21ba0 <_sbrk_r>
   28458:	98c00217 	ldw	r3,8(r19)
   2845c:	1c47883a 	add	r3,r3,r17
   28460:	10c00a26 	beq	r2,r3,2848c <_malloc_trim_r+0x98>
   28464:	9009883a 	mov	r4,r18
   28468:	00314640 	call	31464 <__malloc_unlock>
   2846c:	0005883a 	mov	r2,zero
   28470:	dfc00417 	ldw	ra,16(sp)
   28474:	dcc00317 	ldw	r19,12(sp)
   28478:	dc800217 	ldw	r18,8(sp)
   2847c:	dc400117 	ldw	r17,4(sp)
   28480:	dc000017 	ldw	r16,0(sp)
   28484:	dec00504 	addi	sp,sp,20
   28488:	f800283a 	ret
   2848c:	040bc83a 	sub	r5,zero,r16
   28490:	9009883a 	mov	r4,r18
   28494:	0021ba00 	call	21ba0 <_sbrk_r>
   28498:	00ffffc4 	movi	r3,-1
   2849c:	10c00d26 	beq	r2,r3,284d4 <_malloc_trim_r+0xe0>
   284a0:	00c10034 	movhi	r3,1024
   284a4:	18c80804 	addi	r3,r3,8224
   284a8:	18800017 	ldw	r2,0(r3)
   284ac:	99000217 	ldw	r4,8(r19)
   284b0:	8c23c83a 	sub	r17,r17,r16
   284b4:	8c400054 	ori	r17,r17,1
   284b8:	1421c83a 	sub	r16,r2,r16
   284bc:	24400115 	stw	r17,4(r4)
   284c0:	9009883a 	mov	r4,r18
   284c4:	1c000015 	stw	r16,0(r3)
   284c8:	00314640 	call	31464 <__malloc_unlock>
   284cc:	00800044 	movi	r2,1
   284d0:	003fe706 	br	28470 <__alt_data_end+0xf8028470>
   284d4:	000b883a 	mov	r5,zero
   284d8:	9009883a 	mov	r4,r18
   284dc:	0021ba00 	call	21ba0 <_sbrk_r>
   284e0:	99000217 	ldw	r4,8(r19)
   284e4:	014003c4 	movi	r5,15
   284e8:	1107c83a 	sub	r3,r2,r4
   284ec:	28ffdd0e 	bge	r5,r3,28464 <__alt_data_end+0xf8028464>
   284f0:	01410034 	movhi	r5,1024
   284f4:	2947ea04 	addi	r5,r5,8104
   284f8:	29400017 	ldw	r5,0(r5)
   284fc:	18c00054 	ori	r3,r3,1
   28500:	20c00115 	stw	r3,4(r4)
   28504:	00c10034 	movhi	r3,1024
   28508:	1145c83a 	sub	r2,r2,r5
   2850c:	18c80804 	addi	r3,r3,8224
   28510:	18800015 	stw	r2,0(r3)
   28514:	003fd306 	br	28464 <__alt_data_end+0xf8028464>

00028518 <_free_r>:
   28518:	28004126 	beq	r5,zero,28620 <_free_r+0x108>
   2851c:	defffd04 	addi	sp,sp,-12
   28520:	dc400115 	stw	r17,4(sp)
   28524:	dc000015 	stw	r16,0(sp)
   28528:	2023883a 	mov	r17,r4
   2852c:	2821883a 	mov	r16,r5
   28530:	dfc00215 	stw	ra,8(sp)
   28534:	00314400 	call	31440 <__malloc_lock>
   28538:	81ffff17 	ldw	r7,-4(r16)
   2853c:	00bfff84 	movi	r2,-2
   28540:	01010034 	movhi	r4,1024
   28544:	81bffe04 	addi	r6,r16,-8
   28548:	3884703a 	and	r2,r7,r2
   2854c:	21020704 	addi	r4,r4,2076
   28550:	308b883a 	add	r5,r6,r2
   28554:	2a400117 	ldw	r9,4(r5)
   28558:	22000217 	ldw	r8,8(r4)
   2855c:	00ffff04 	movi	r3,-4
   28560:	48c6703a 	and	r3,r9,r3
   28564:	2a005726 	beq	r5,r8,286c4 <_free_r+0x1ac>
   28568:	28c00115 	stw	r3,4(r5)
   2856c:	39c0004c 	andi	r7,r7,1
   28570:	3800091e 	bne	r7,zero,28598 <_free_r+0x80>
   28574:	823ffe17 	ldw	r8,-8(r16)
   28578:	22400204 	addi	r9,r4,8
   2857c:	320dc83a 	sub	r6,r6,r8
   28580:	31c00217 	ldw	r7,8(r6)
   28584:	1205883a 	add	r2,r2,r8
   28588:	3a406526 	beq	r7,r9,28720 <_free_r+0x208>
   2858c:	32000317 	ldw	r8,12(r6)
   28590:	3a000315 	stw	r8,12(r7)
   28594:	41c00215 	stw	r7,8(r8)
   28598:	28cf883a 	add	r7,r5,r3
   2859c:	39c00117 	ldw	r7,4(r7)
   285a0:	39c0004c 	andi	r7,r7,1
   285a4:	38003a26 	beq	r7,zero,28690 <_free_r+0x178>
   285a8:	10c00054 	ori	r3,r2,1
   285ac:	30c00115 	stw	r3,4(r6)
   285b0:	3087883a 	add	r3,r6,r2
   285b4:	18800015 	stw	r2,0(r3)
   285b8:	00c07fc4 	movi	r3,511
   285bc:	18801936 	bltu	r3,r2,28624 <_free_r+0x10c>
   285c0:	1004d0fa 	srli	r2,r2,3
   285c4:	01c00044 	movi	r7,1
   285c8:	21400117 	ldw	r5,4(r4)
   285cc:	10c00044 	addi	r3,r2,1
   285d0:	18c7883a 	add	r3,r3,r3
   285d4:	1005d0ba 	srai	r2,r2,2
   285d8:	18c7883a 	add	r3,r3,r3
   285dc:	18c7883a 	add	r3,r3,r3
   285e0:	1907883a 	add	r3,r3,r4
   285e4:	3884983a 	sll	r2,r7,r2
   285e8:	19c00017 	ldw	r7,0(r3)
   285ec:	1a3ffe04 	addi	r8,r3,-8
   285f0:	1144b03a 	or	r2,r2,r5
   285f4:	32000315 	stw	r8,12(r6)
   285f8:	31c00215 	stw	r7,8(r6)
   285fc:	20800115 	stw	r2,4(r4)
   28600:	19800015 	stw	r6,0(r3)
   28604:	39800315 	stw	r6,12(r7)
   28608:	8809883a 	mov	r4,r17
   2860c:	dfc00217 	ldw	ra,8(sp)
   28610:	dc400117 	ldw	r17,4(sp)
   28614:	dc000017 	ldw	r16,0(sp)
   28618:	dec00304 	addi	sp,sp,12
   2861c:	00314641 	jmpi	31464 <__malloc_unlock>
   28620:	f800283a 	ret
   28624:	100ad27a 	srli	r5,r2,9
   28628:	00c00104 	movi	r3,4
   2862c:	19404a36 	bltu	r3,r5,28758 <_free_r+0x240>
   28630:	100ad1ba 	srli	r5,r2,6
   28634:	28c00e44 	addi	r3,r5,57
   28638:	18c7883a 	add	r3,r3,r3
   2863c:	29400e04 	addi	r5,r5,56
   28640:	18c7883a 	add	r3,r3,r3
   28644:	18c7883a 	add	r3,r3,r3
   28648:	1909883a 	add	r4,r3,r4
   2864c:	20c00017 	ldw	r3,0(r4)
   28650:	01c10034 	movhi	r7,1024
   28654:	213ffe04 	addi	r4,r4,-8
   28658:	39c20704 	addi	r7,r7,2076
   2865c:	20c04426 	beq	r4,r3,28770 <_free_r+0x258>
   28660:	01ffff04 	movi	r7,-4
   28664:	19400117 	ldw	r5,4(r3)
   28668:	29ca703a 	and	r5,r5,r7
   2866c:	1140022e 	bgeu	r2,r5,28678 <_free_r+0x160>
   28670:	18c00217 	ldw	r3,8(r3)
   28674:	20fffb1e 	bne	r4,r3,28664 <__alt_data_end+0xf8028664>
   28678:	19000317 	ldw	r4,12(r3)
   2867c:	31000315 	stw	r4,12(r6)
   28680:	30c00215 	stw	r3,8(r6)
   28684:	21800215 	stw	r6,8(r4)
   28688:	19800315 	stw	r6,12(r3)
   2868c:	003fde06 	br	28608 <__alt_data_end+0xf8028608>
   28690:	29c00217 	ldw	r7,8(r5)
   28694:	10c5883a 	add	r2,r2,r3
   28698:	00c10034 	movhi	r3,1024
   2869c:	18c20904 	addi	r3,r3,2084
   286a0:	38c03b26 	beq	r7,r3,28790 <_free_r+0x278>
   286a4:	2a000317 	ldw	r8,12(r5)
   286a8:	11400054 	ori	r5,r2,1
   286ac:	3087883a 	add	r3,r6,r2
   286b0:	3a000315 	stw	r8,12(r7)
   286b4:	41c00215 	stw	r7,8(r8)
   286b8:	31400115 	stw	r5,4(r6)
   286bc:	18800015 	stw	r2,0(r3)
   286c0:	003fbd06 	br	285b8 <__alt_data_end+0xf80285b8>
   286c4:	39c0004c 	andi	r7,r7,1
   286c8:	10c5883a 	add	r2,r2,r3
   286cc:	3800071e 	bne	r7,zero,286ec <_free_r+0x1d4>
   286d0:	81fffe17 	ldw	r7,-8(r16)
   286d4:	31cdc83a 	sub	r6,r6,r7
   286d8:	30c00317 	ldw	r3,12(r6)
   286dc:	31400217 	ldw	r5,8(r6)
   286e0:	11c5883a 	add	r2,r2,r7
   286e4:	28c00315 	stw	r3,12(r5)
   286e8:	19400215 	stw	r5,8(r3)
   286ec:	10c00054 	ori	r3,r2,1
   286f0:	30c00115 	stw	r3,4(r6)
   286f4:	00c10034 	movhi	r3,1024
   286f8:	18c7eb04 	addi	r3,r3,8108
   286fc:	18c00017 	ldw	r3,0(r3)
   28700:	21800215 	stw	r6,8(r4)
   28704:	10ffc036 	bltu	r2,r3,28608 <__alt_data_end+0xf8028608>
   28708:	00810034 	movhi	r2,1024
   2870c:	1087fd04 	addi	r2,r2,8180
   28710:	11400017 	ldw	r5,0(r2)
   28714:	8809883a 	mov	r4,r17
   28718:	00283f40 	call	283f4 <_malloc_trim_r>
   2871c:	003fba06 	br	28608 <__alt_data_end+0xf8028608>
   28720:	28c9883a 	add	r4,r5,r3
   28724:	21000117 	ldw	r4,4(r4)
   28728:	2100004c 	andi	r4,r4,1
   2872c:	2000391e 	bne	r4,zero,28814 <_free_r+0x2fc>
   28730:	29c00217 	ldw	r7,8(r5)
   28734:	29000317 	ldw	r4,12(r5)
   28738:	1885883a 	add	r2,r3,r2
   2873c:	10c00054 	ori	r3,r2,1
   28740:	39000315 	stw	r4,12(r7)
   28744:	21c00215 	stw	r7,8(r4)
   28748:	30c00115 	stw	r3,4(r6)
   2874c:	308d883a 	add	r6,r6,r2
   28750:	30800015 	stw	r2,0(r6)
   28754:	003fac06 	br	28608 <__alt_data_end+0xf8028608>
   28758:	00c00504 	movi	r3,20
   2875c:	19401536 	bltu	r3,r5,287b4 <_free_r+0x29c>
   28760:	28c01704 	addi	r3,r5,92
   28764:	18c7883a 	add	r3,r3,r3
   28768:	294016c4 	addi	r5,r5,91
   2876c:	003fb406 	br	28640 <__alt_data_end+0xf8028640>
   28770:	280bd0ba 	srai	r5,r5,2
   28774:	00c00044 	movi	r3,1
   28778:	38800117 	ldw	r2,4(r7)
   2877c:	194a983a 	sll	r5,r3,r5
   28780:	2007883a 	mov	r3,r4
   28784:	2884b03a 	or	r2,r5,r2
   28788:	38800115 	stw	r2,4(r7)
   2878c:	003fbb06 	br	2867c <__alt_data_end+0xf802867c>
   28790:	21800515 	stw	r6,20(r4)
   28794:	21800415 	stw	r6,16(r4)
   28798:	10c00054 	ori	r3,r2,1
   2879c:	31c00315 	stw	r7,12(r6)
   287a0:	31c00215 	stw	r7,8(r6)
   287a4:	30c00115 	stw	r3,4(r6)
   287a8:	308d883a 	add	r6,r6,r2
   287ac:	30800015 	stw	r2,0(r6)
   287b0:	003f9506 	br	28608 <__alt_data_end+0xf8028608>
   287b4:	00c01504 	movi	r3,84
   287b8:	19400536 	bltu	r3,r5,287d0 <_free_r+0x2b8>
   287bc:	100ad33a 	srli	r5,r2,12
   287c0:	28c01bc4 	addi	r3,r5,111
   287c4:	18c7883a 	add	r3,r3,r3
   287c8:	29401b84 	addi	r5,r5,110
   287cc:	003f9c06 	br	28640 <__alt_data_end+0xf8028640>
   287d0:	00c05504 	movi	r3,340
   287d4:	19400536 	bltu	r3,r5,287ec <_free_r+0x2d4>
   287d8:	100ad3fa 	srli	r5,r2,15
   287dc:	28c01e04 	addi	r3,r5,120
   287e0:	18c7883a 	add	r3,r3,r3
   287e4:	29401dc4 	addi	r5,r5,119
   287e8:	003f9506 	br	28640 <__alt_data_end+0xf8028640>
   287ec:	00c15504 	movi	r3,1364
   287f0:	19400536 	bltu	r3,r5,28808 <_free_r+0x2f0>
   287f4:	100ad4ba 	srli	r5,r2,18
   287f8:	28c01f44 	addi	r3,r5,125
   287fc:	18c7883a 	add	r3,r3,r3
   28800:	29401f04 	addi	r5,r5,124
   28804:	003f8e06 	br	28640 <__alt_data_end+0xf8028640>
   28808:	00c03f84 	movi	r3,254
   2880c:	01401f84 	movi	r5,126
   28810:	003f8b06 	br	28640 <__alt_data_end+0xf8028640>
   28814:	10c00054 	ori	r3,r2,1
   28818:	30c00115 	stw	r3,4(r6)
   2881c:	308d883a 	add	r6,r6,r2
   28820:	30800015 	stw	r2,0(r6)
   28824:	003f7806 	br	28608 <__alt_data_end+0xf8028608>

00028828 <__sfvwrite_r>:
   28828:	30800217 	ldw	r2,8(r6)
   2882c:	10006726 	beq	r2,zero,289cc <__sfvwrite_r+0x1a4>
   28830:	28c0030b 	ldhu	r3,12(r5)
   28834:	defff404 	addi	sp,sp,-48
   28838:	dd400715 	stw	r21,28(sp)
   2883c:	dd000615 	stw	r20,24(sp)
   28840:	dc000215 	stw	r16,8(sp)
   28844:	dfc00b15 	stw	ra,44(sp)
   28848:	df000a15 	stw	fp,40(sp)
   2884c:	ddc00915 	stw	r23,36(sp)
   28850:	dd800815 	stw	r22,32(sp)
   28854:	dcc00515 	stw	r19,20(sp)
   28858:	dc800415 	stw	r18,16(sp)
   2885c:	dc400315 	stw	r17,12(sp)
   28860:	1880020c 	andi	r2,r3,8
   28864:	2821883a 	mov	r16,r5
   28868:	202b883a 	mov	r21,r4
   2886c:	3029883a 	mov	r20,r6
   28870:	10002726 	beq	r2,zero,28910 <__sfvwrite_r+0xe8>
   28874:	28800417 	ldw	r2,16(r5)
   28878:	10002526 	beq	r2,zero,28910 <__sfvwrite_r+0xe8>
   2887c:	1880008c 	andi	r2,r3,2
   28880:	a4400017 	ldw	r17,0(r20)
   28884:	10002a26 	beq	r2,zero,28930 <__sfvwrite_r+0x108>
   28888:	05a00034 	movhi	r22,32768
   2888c:	0027883a 	mov	r19,zero
   28890:	0025883a 	mov	r18,zero
   28894:	b5bf0004 	addi	r22,r22,-1024
   28898:	980d883a 	mov	r6,r19
   2889c:	a809883a 	mov	r4,r21
   288a0:	90004626 	beq	r18,zero,289bc <__sfvwrite_r+0x194>
   288a4:	900f883a 	mov	r7,r18
   288a8:	b480022e 	bgeu	r22,r18,288b4 <__sfvwrite_r+0x8c>
   288ac:	01e00034 	movhi	r7,32768
   288b0:	39ff0004 	addi	r7,r7,-1024
   288b4:	80800917 	ldw	r2,36(r16)
   288b8:	81400717 	ldw	r5,28(r16)
   288bc:	103ee83a 	callr	r2
   288c0:	0080570e 	bge	zero,r2,28a20 <__sfvwrite_r+0x1f8>
   288c4:	a0c00217 	ldw	r3,8(r20)
   288c8:	98a7883a 	add	r19,r19,r2
   288cc:	90a5c83a 	sub	r18,r18,r2
   288d0:	1885c83a 	sub	r2,r3,r2
   288d4:	a0800215 	stw	r2,8(r20)
   288d8:	103fef1e 	bne	r2,zero,28898 <__alt_data_end+0xf8028898>
   288dc:	0005883a 	mov	r2,zero
   288e0:	dfc00b17 	ldw	ra,44(sp)
   288e4:	df000a17 	ldw	fp,40(sp)
   288e8:	ddc00917 	ldw	r23,36(sp)
   288ec:	dd800817 	ldw	r22,32(sp)
   288f0:	dd400717 	ldw	r21,28(sp)
   288f4:	dd000617 	ldw	r20,24(sp)
   288f8:	dcc00517 	ldw	r19,20(sp)
   288fc:	dc800417 	ldw	r18,16(sp)
   28900:	dc400317 	ldw	r17,12(sp)
   28904:	dc000217 	ldw	r16,8(sp)
   28908:	dec00c04 	addi	sp,sp,48
   2890c:	f800283a 	ret
   28910:	800b883a 	mov	r5,r16
   28914:	a809883a 	mov	r4,r21
   28918:	00262d00 	call	262d0 <__swsetup_r>
   2891c:	1000eb1e 	bne	r2,zero,28ccc <__sfvwrite_r+0x4a4>
   28920:	80c0030b 	ldhu	r3,12(r16)
   28924:	a4400017 	ldw	r17,0(r20)
   28928:	1880008c 	andi	r2,r3,2
   2892c:	103fd61e 	bne	r2,zero,28888 <__alt_data_end+0xf8028888>
   28930:	1880004c 	andi	r2,r3,1
   28934:	10003f1e 	bne	r2,zero,28a34 <__sfvwrite_r+0x20c>
   28938:	0039883a 	mov	fp,zero
   2893c:	0025883a 	mov	r18,zero
   28940:	90001a26 	beq	r18,zero,289ac <__sfvwrite_r+0x184>
   28944:	1880800c 	andi	r2,r3,512
   28948:	84c00217 	ldw	r19,8(r16)
   2894c:	10002126 	beq	r2,zero,289d4 <__sfvwrite_r+0x1ac>
   28950:	982f883a 	mov	r23,r19
   28954:	94c09336 	bltu	r18,r19,28ba4 <__sfvwrite_r+0x37c>
   28958:	1881200c 	andi	r2,r3,1152
   2895c:	10009e1e 	bne	r2,zero,28bd8 <__sfvwrite_r+0x3b0>
   28960:	81000017 	ldw	r4,0(r16)
   28964:	b80d883a 	mov	r6,r23
   28968:	e00b883a 	mov	r5,fp
   2896c:	00292280 	call	29228 <memmove>
   28970:	80c00217 	ldw	r3,8(r16)
   28974:	81000017 	ldw	r4,0(r16)
   28978:	9005883a 	mov	r2,r18
   2897c:	1ce7c83a 	sub	r19,r3,r19
   28980:	25cf883a 	add	r7,r4,r23
   28984:	84c00215 	stw	r19,8(r16)
   28988:	81c00015 	stw	r7,0(r16)
   2898c:	a0c00217 	ldw	r3,8(r20)
   28990:	e0b9883a 	add	fp,fp,r2
   28994:	90a5c83a 	sub	r18,r18,r2
   28998:	18a7c83a 	sub	r19,r3,r2
   2899c:	a4c00215 	stw	r19,8(r20)
   289a0:	983fce26 	beq	r19,zero,288dc <__alt_data_end+0xf80288dc>
   289a4:	80c0030b 	ldhu	r3,12(r16)
   289a8:	903fe61e 	bne	r18,zero,28944 <__alt_data_end+0xf8028944>
   289ac:	8f000017 	ldw	fp,0(r17)
   289b0:	8c800117 	ldw	r18,4(r17)
   289b4:	8c400204 	addi	r17,r17,8
   289b8:	003fe106 	br	28940 <__alt_data_end+0xf8028940>
   289bc:	8cc00017 	ldw	r19,0(r17)
   289c0:	8c800117 	ldw	r18,4(r17)
   289c4:	8c400204 	addi	r17,r17,8
   289c8:	003fb306 	br	28898 <__alt_data_end+0xf8028898>
   289cc:	0005883a 	mov	r2,zero
   289d0:	f800283a 	ret
   289d4:	81000017 	ldw	r4,0(r16)
   289d8:	80800417 	ldw	r2,16(r16)
   289dc:	11005736 	bltu	r2,r4,28b3c <__sfvwrite_r+0x314>
   289e0:	85c00517 	ldw	r23,20(r16)
   289e4:	95c05536 	bltu	r18,r23,28b3c <__sfvwrite_r+0x314>
   289e8:	00a00034 	movhi	r2,32768
   289ec:	10bfffc4 	addi	r2,r2,-1
   289f0:	9009883a 	mov	r4,r18
   289f4:	1480012e 	bgeu	r2,r18,289fc <__sfvwrite_r+0x1d4>
   289f8:	1009883a 	mov	r4,r2
   289fc:	b80b883a 	mov	r5,r23
   28a00:	002e6a80 	call	2e6a8 <__divsi3>
   28a04:	15cf383a 	mul	r7,r2,r23
   28a08:	81400717 	ldw	r5,28(r16)
   28a0c:	80800917 	ldw	r2,36(r16)
   28a10:	e00d883a 	mov	r6,fp
   28a14:	a809883a 	mov	r4,r21
   28a18:	103ee83a 	callr	r2
   28a1c:	00bfdb16 	blt	zero,r2,2898c <__alt_data_end+0xf802898c>
   28a20:	8080030b 	ldhu	r2,12(r16)
   28a24:	10801014 	ori	r2,r2,64
   28a28:	8080030d 	sth	r2,12(r16)
   28a2c:	00bfffc4 	movi	r2,-1
   28a30:	003fab06 	br	288e0 <__alt_data_end+0xf80288e0>
   28a34:	0027883a 	mov	r19,zero
   28a38:	0011883a 	mov	r8,zero
   28a3c:	0039883a 	mov	fp,zero
   28a40:	0025883a 	mov	r18,zero
   28a44:	90001f26 	beq	r18,zero,28ac4 <__sfvwrite_r+0x29c>
   28a48:	40005a26 	beq	r8,zero,28bb4 <__sfvwrite_r+0x38c>
   28a4c:	982d883a 	mov	r22,r19
   28a50:	94c0012e 	bgeu	r18,r19,28a58 <__sfvwrite_r+0x230>
   28a54:	902d883a 	mov	r22,r18
   28a58:	81000017 	ldw	r4,0(r16)
   28a5c:	80800417 	ldw	r2,16(r16)
   28a60:	b02f883a 	mov	r23,r22
   28a64:	81c00517 	ldw	r7,20(r16)
   28a68:	1100032e 	bgeu	r2,r4,28a78 <__sfvwrite_r+0x250>
   28a6c:	80c00217 	ldw	r3,8(r16)
   28a70:	38c7883a 	add	r3,r7,r3
   28a74:	1d801816 	blt	r3,r22,28ad8 <__sfvwrite_r+0x2b0>
   28a78:	b1c03e16 	blt	r22,r7,28b74 <__sfvwrite_r+0x34c>
   28a7c:	80800917 	ldw	r2,36(r16)
   28a80:	81400717 	ldw	r5,28(r16)
   28a84:	e00d883a 	mov	r6,fp
   28a88:	da000115 	stw	r8,4(sp)
   28a8c:	a809883a 	mov	r4,r21
   28a90:	103ee83a 	callr	r2
   28a94:	102f883a 	mov	r23,r2
   28a98:	da000117 	ldw	r8,4(sp)
   28a9c:	00bfe00e 	bge	zero,r2,28a20 <__alt_data_end+0xf8028a20>
   28aa0:	9de7c83a 	sub	r19,r19,r23
   28aa4:	98001f26 	beq	r19,zero,28b24 <__sfvwrite_r+0x2fc>
   28aa8:	a0800217 	ldw	r2,8(r20)
   28aac:	e5f9883a 	add	fp,fp,r23
   28ab0:	95e5c83a 	sub	r18,r18,r23
   28ab4:	15efc83a 	sub	r23,r2,r23
   28ab8:	a5c00215 	stw	r23,8(r20)
   28abc:	b83f8726 	beq	r23,zero,288dc <__alt_data_end+0xf80288dc>
   28ac0:	903fe11e 	bne	r18,zero,28a48 <__alt_data_end+0xf8028a48>
   28ac4:	8f000017 	ldw	fp,0(r17)
   28ac8:	8c800117 	ldw	r18,4(r17)
   28acc:	0011883a 	mov	r8,zero
   28ad0:	8c400204 	addi	r17,r17,8
   28ad4:	003fdb06 	br	28a44 <__alt_data_end+0xf8028a44>
   28ad8:	180d883a 	mov	r6,r3
   28adc:	e00b883a 	mov	r5,fp
   28ae0:	da000115 	stw	r8,4(sp)
   28ae4:	d8c00015 	stw	r3,0(sp)
   28ae8:	00292280 	call	29228 <memmove>
   28aec:	d8c00017 	ldw	r3,0(sp)
   28af0:	80800017 	ldw	r2,0(r16)
   28af4:	800b883a 	mov	r5,r16
   28af8:	a809883a 	mov	r4,r21
   28afc:	10c5883a 	add	r2,r2,r3
   28b00:	80800015 	stw	r2,0(r16)
   28b04:	d8c00015 	stw	r3,0(sp)
   28b08:	0027f1c0 	call	27f1c <_fflush_r>
   28b0c:	d8c00017 	ldw	r3,0(sp)
   28b10:	da000117 	ldw	r8,4(sp)
   28b14:	103fc21e 	bne	r2,zero,28a20 <__alt_data_end+0xf8028a20>
   28b18:	182f883a 	mov	r23,r3
   28b1c:	9de7c83a 	sub	r19,r19,r23
   28b20:	983fe11e 	bne	r19,zero,28aa8 <__alt_data_end+0xf8028aa8>
   28b24:	800b883a 	mov	r5,r16
   28b28:	a809883a 	mov	r4,r21
   28b2c:	0027f1c0 	call	27f1c <_fflush_r>
   28b30:	103fbb1e 	bne	r2,zero,28a20 <__alt_data_end+0xf8028a20>
   28b34:	0011883a 	mov	r8,zero
   28b38:	003fdb06 	br	28aa8 <__alt_data_end+0xf8028aa8>
   28b3c:	94c0012e 	bgeu	r18,r19,28b44 <__sfvwrite_r+0x31c>
   28b40:	9027883a 	mov	r19,r18
   28b44:	980d883a 	mov	r6,r19
   28b48:	e00b883a 	mov	r5,fp
   28b4c:	00292280 	call	29228 <memmove>
   28b50:	80800217 	ldw	r2,8(r16)
   28b54:	80c00017 	ldw	r3,0(r16)
   28b58:	14c5c83a 	sub	r2,r2,r19
   28b5c:	1cc7883a 	add	r3,r3,r19
   28b60:	80800215 	stw	r2,8(r16)
   28b64:	80c00015 	stw	r3,0(r16)
   28b68:	10004326 	beq	r2,zero,28c78 <__sfvwrite_r+0x450>
   28b6c:	9805883a 	mov	r2,r19
   28b70:	003f8606 	br	2898c <__alt_data_end+0xf802898c>
   28b74:	b00d883a 	mov	r6,r22
   28b78:	e00b883a 	mov	r5,fp
   28b7c:	da000115 	stw	r8,4(sp)
   28b80:	00292280 	call	29228 <memmove>
   28b84:	80800217 	ldw	r2,8(r16)
   28b88:	80c00017 	ldw	r3,0(r16)
   28b8c:	da000117 	ldw	r8,4(sp)
   28b90:	1585c83a 	sub	r2,r2,r22
   28b94:	1dad883a 	add	r22,r3,r22
   28b98:	80800215 	stw	r2,8(r16)
   28b9c:	85800015 	stw	r22,0(r16)
   28ba0:	003fbf06 	br	28aa0 <__alt_data_end+0xf8028aa0>
   28ba4:	81000017 	ldw	r4,0(r16)
   28ba8:	9027883a 	mov	r19,r18
   28bac:	902f883a 	mov	r23,r18
   28bb0:	003f6c06 	br	28964 <__alt_data_end+0xf8028964>
   28bb4:	900d883a 	mov	r6,r18
   28bb8:	01400284 	movi	r5,10
   28bbc:	e009883a 	mov	r4,fp
   28bc0:	0028ffc0 	call	28ffc <memchr>
   28bc4:	10003e26 	beq	r2,zero,28cc0 <__sfvwrite_r+0x498>
   28bc8:	10800044 	addi	r2,r2,1
   28bcc:	1727c83a 	sub	r19,r2,fp
   28bd0:	02000044 	movi	r8,1
   28bd4:	003f9d06 	br	28a4c <__alt_data_end+0xf8028a4c>
   28bd8:	80800517 	ldw	r2,20(r16)
   28bdc:	81400417 	ldw	r5,16(r16)
   28be0:	81c00017 	ldw	r7,0(r16)
   28be4:	10a7883a 	add	r19,r2,r2
   28be8:	9885883a 	add	r2,r19,r2
   28bec:	1026d7fa 	srli	r19,r2,31
   28bf0:	396dc83a 	sub	r22,r7,r5
   28bf4:	b1000044 	addi	r4,r22,1
   28bf8:	9885883a 	add	r2,r19,r2
   28bfc:	1027d07a 	srai	r19,r2,1
   28c00:	2485883a 	add	r2,r4,r18
   28c04:	980d883a 	mov	r6,r19
   28c08:	9880022e 	bgeu	r19,r2,28c14 <__sfvwrite_r+0x3ec>
   28c0c:	1027883a 	mov	r19,r2
   28c10:	100d883a 	mov	r6,r2
   28c14:	18c1000c 	andi	r3,r3,1024
   28c18:	18001c26 	beq	r3,zero,28c8c <__sfvwrite_r+0x464>
   28c1c:	300b883a 	mov	r5,r6
   28c20:	a809883a 	mov	r4,r21
   28c24:	0020e540 	call	20e54 <_malloc_r>
   28c28:	102f883a 	mov	r23,r2
   28c2c:	10002926 	beq	r2,zero,28cd4 <__sfvwrite_r+0x4ac>
   28c30:	81400417 	ldw	r5,16(r16)
   28c34:	b00d883a 	mov	r6,r22
   28c38:	1009883a 	mov	r4,r2
   28c3c:	00290e00 	call	290e0 <memcpy>
   28c40:	8080030b 	ldhu	r2,12(r16)
   28c44:	00fedfc4 	movi	r3,-1153
   28c48:	10c4703a 	and	r2,r2,r3
   28c4c:	10802014 	ori	r2,r2,128
   28c50:	8080030d 	sth	r2,12(r16)
   28c54:	bd89883a 	add	r4,r23,r22
   28c58:	9d8fc83a 	sub	r7,r19,r22
   28c5c:	85c00415 	stw	r23,16(r16)
   28c60:	84c00515 	stw	r19,20(r16)
   28c64:	81000015 	stw	r4,0(r16)
   28c68:	9027883a 	mov	r19,r18
   28c6c:	81c00215 	stw	r7,8(r16)
   28c70:	902f883a 	mov	r23,r18
   28c74:	003f3b06 	br	28964 <__alt_data_end+0xf8028964>
   28c78:	800b883a 	mov	r5,r16
   28c7c:	a809883a 	mov	r4,r21
   28c80:	0027f1c0 	call	27f1c <_fflush_r>
   28c84:	103fb926 	beq	r2,zero,28b6c <__alt_data_end+0xf8028b6c>
   28c88:	003f6506 	br	28a20 <__alt_data_end+0xf8028a20>
   28c8c:	a809883a 	mov	r4,r21
   28c90:	002a3e00 	call	2a3e0 <_realloc_r>
   28c94:	102f883a 	mov	r23,r2
   28c98:	103fee1e 	bne	r2,zero,28c54 <__alt_data_end+0xf8028c54>
   28c9c:	81400417 	ldw	r5,16(r16)
   28ca0:	a809883a 	mov	r4,r21
   28ca4:	00285180 	call	28518 <_free_r>
   28ca8:	8080030b 	ldhu	r2,12(r16)
   28cac:	00ffdfc4 	movi	r3,-129
   28cb0:	1884703a 	and	r2,r3,r2
   28cb4:	00c00304 	movi	r3,12
   28cb8:	a8c00015 	stw	r3,0(r21)
   28cbc:	003f5906 	br	28a24 <__alt_data_end+0xf8028a24>
   28cc0:	94c00044 	addi	r19,r18,1
   28cc4:	02000044 	movi	r8,1
   28cc8:	003f6006 	br	28a4c <__alt_data_end+0xf8028a4c>
   28ccc:	00bfffc4 	movi	r2,-1
   28cd0:	003f0306 	br	288e0 <__alt_data_end+0xf80288e0>
   28cd4:	00800304 	movi	r2,12
   28cd8:	a8800015 	stw	r2,0(r21)
   28cdc:	8080030b 	ldhu	r2,12(r16)
   28ce0:	003f5006 	br	28a24 <__alt_data_end+0xf8028a24>

00028ce4 <_fwalk>:
   28ce4:	defff704 	addi	sp,sp,-36
   28ce8:	dd000415 	stw	r20,16(sp)
   28cec:	dfc00815 	stw	ra,32(sp)
   28cf0:	ddc00715 	stw	r23,28(sp)
   28cf4:	dd800615 	stw	r22,24(sp)
   28cf8:	dd400515 	stw	r21,20(sp)
   28cfc:	dcc00315 	stw	r19,12(sp)
   28d00:	dc800215 	stw	r18,8(sp)
   28d04:	dc400115 	stw	r17,4(sp)
   28d08:	dc000015 	stw	r16,0(sp)
   28d0c:	2500b804 	addi	r20,r4,736
   28d10:	a0002326 	beq	r20,zero,28da0 <_fwalk+0xbc>
   28d14:	282b883a 	mov	r21,r5
   28d18:	002f883a 	mov	r23,zero
   28d1c:	05800044 	movi	r22,1
   28d20:	04ffffc4 	movi	r19,-1
   28d24:	a4400117 	ldw	r17,4(r20)
   28d28:	a4800217 	ldw	r18,8(r20)
   28d2c:	8c7fffc4 	addi	r17,r17,-1
   28d30:	88000d16 	blt	r17,zero,28d68 <_fwalk+0x84>
   28d34:	94000304 	addi	r16,r18,12
   28d38:	94800384 	addi	r18,r18,14
   28d3c:	8080000b 	ldhu	r2,0(r16)
   28d40:	8c7fffc4 	addi	r17,r17,-1
   28d44:	813ffd04 	addi	r4,r16,-12
   28d48:	b080042e 	bgeu	r22,r2,28d5c <_fwalk+0x78>
   28d4c:	9080000f 	ldh	r2,0(r18)
   28d50:	14c00226 	beq	r2,r19,28d5c <_fwalk+0x78>
   28d54:	a83ee83a 	callr	r21
   28d58:	b8aeb03a 	or	r23,r23,r2
   28d5c:	84001a04 	addi	r16,r16,104
   28d60:	94801a04 	addi	r18,r18,104
   28d64:	8cfff51e 	bne	r17,r19,28d3c <__alt_data_end+0xf8028d3c>
   28d68:	a5000017 	ldw	r20,0(r20)
   28d6c:	a03fed1e 	bne	r20,zero,28d24 <__alt_data_end+0xf8028d24>
   28d70:	b805883a 	mov	r2,r23
   28d74:	dfc00817 	ldw	ra,32(sp)
   28d78:	ddc00717 	ldw	r23,28(sp)
   28d7c:	dd800617 	ldw	r22,24(sp)
   28d80:	dd400517 	ldw	r21,20(sp)
   28d84:	dd000417 	ldw	r20,16(sp)
   28d88:	dcc00317 	ldw	r19,12(sp)
   28d8c:	dc800217 	ldw	r18,8(sp)
   28d90:	dc400117 	ldw	r17,4(sp)
   28d94:	dc000017 	ldw	r16,0(sp)
   28d98:	dec00904 	addi	sp,sp,36
   28d9c:	f800283a 	ret
   28da0:	002f883a 	mov	r23,zero
   28da4:	003ff206 	br	28d70 <__alt_data_end+0xf8028d70>

00028da8 <_fwalk_reent>:
   28da8:	defff704 	addi	sp,sp,-36
   28dac:	dd000415 	stw	r20,16(sp)
   28db0:	dfc00815 	stw	ra,32(sp)
   28db4:	ddc00715 	stw	r23,28(sp)
   28db8:	dd800615 	stw	r22,24(sp)
   28dbc:	dd400515 	stw	r21,20(sp)
   28dc0:	dcc00315 	stw	r19,12(sp)
   28dc4:	dc800215 	stw	r18,8(sp)
   28dc8:	dc400115 	stw	r17,4(sp)
   28dcc:	dc000015 	stw	r16,0(sp)
   28dd0:	2500b804 	addi	r20,r4,736
   28dd4:	a0002326 	beq	r20,zero,28e64 <_fwalk_reent+0xbc>
   28dd8:	282b883a 	mov	r21,r5
   28ddc:	2027883a 	mov	r19,r4
   28de0:	002f883a 	mov	r23,zero
   28de4:	05800044 	movi	r22,1
   28de8:	04bfffc4 	movi	r18,-1
   28dec:	a4400117 	ldw	r17,4(r20)
   28df0:	a4000217 	ldw	r16,8(r20)
   28df4:	8c7fffc4 	addi	r17,r17,-1
   28df8:	88000c16 	blt	r17,zero,28e2c <_fwalk_reent+0x84>
   28dfc:	84000304 	addi	r16,r16,12
   28e00:	8080000b 	ldhu	r2,0(r16)
   28e04:	8c7fffc4 	addi	r17,r17,-1
   28e08:	817ffd04 	addi	r5,r16,-12
   28e0c:	b080052e 	bgeu	r22,r2,28e24 <_fwalk_reent+0x7c>
   28e10:	8080008f 	ldh	r2,2(r16)
   28e14:	9809883a 	mov	r4,r19
   28e18:	14800226 	beq	r2,r18,28e24 <_fwalk_reent+0x7c>
   28e1c:	a83ee83a 	callr	r21
   28e20:	b8aeb03a 	or	r23,r23,r2
   28e24:	84001a04 	addi	r16,r16,104
   28e28:	8cbff51e 	bne	r17,r18,28e00 <__alt_data_end+0xf8028e00>
   28e2c:	a5000017 	ldw	r20,0(r20)
   28e30:	a03fee1e 	bne	r20,zero,28dec <__alt_data_end+0xf8028dec>
   28e34:	b805883a 	mov	r2,r23
   28e38:	dfc00817 	ldw	ra,32(sp)
   28e3c:	ddc00717 	ldw	r23,28(sp)
   28e40:	dd800617 	ldw	r22,24(sp)
   28e44:	dd400517 	ldw	r21,20(sp)
   28e48:	dd000417 	ldw	r20,16(sp)
   28e4c:	dcc00317 	ldw	r19,12(sp)
   28e50:	dc800217 	ldw	r18,8(sp)
   28e54:	dc400117 	ldw	r17,4(sp)
   28e58:	dc000017 	ldw	r16,0(sp)
   28e5c:	dec00904 	addi	sp,sp,36
   28e60:	f800283a 	ret
   28e64:	002f883a 	mov	r23,zero
   28e68:	003ff206 	br	28e34 <__alt_data_end+0xf8028e34>

00028e6c <_isatty_r>:
   28e6c:	defffd04 	addi	sp,sp,-12
   28e70:	dc000015 	stw	r16,0(sp)
   28e74:	04010034 	movhi	r16,1024
   28e78:	dc400115 	stw	r17,4(sp)
   28e7c:	8407fa04 	addi	r16,r16,8168
   28e80:	2023883a 	mov	r17,r4
   28e84:	2809883a 	mov	r4,r5
   28e88:	dfc00215 	stw	ra,8(sp)
   28e8c:	80000015 	stw	zero,0(r16)
   28e90:	00311240 	call	31124 <isatty>
   28e94:	00ffffc4 	movi	r3,-1
   28e98:	10c00526 	beq	r2,r3,28eb0 <_isatty_r+0x44>
   28e9c:	dfc00217 	ldw	ra,8(sp)
   28ea0:	dc400117 	ldw	r17,4(sp)
   28ea4:	dc000017 	ldw	r16,0(sp)
   28ea8:	dec00304 	addi	sp,sp,12
   28eac:	f800283a 	ret
   28eb0:	80c00017 	ldw	r3,0(r16)
   28eb4:	183ff926 	beq	r3,zero,28e9c <__alt_data_end+0xf8028e9c>
   28eb8:	88c00015 	stw	r3,0(r17)
   28ebc:	003ff706 	br	28e9c <__alt_data_end+0xf8028e9c>

00028ec0 <_setlocale_r>:
   28ec0:	30001b26 	beq	r6,zero,28f30 <_setlocale_r+0x70>
   28ec4:	01410034 	movhi	r5,1024
   28ec8:	defffe04 	addi	sp,sp,-8
   28ecc:	29404904 	addi	r5,r5,292
   28ed0:	3009883a 	mov	r4,r6
   28ed4:	dc000015 	stw	r16,0(sp)
   28ed8:	dfc00115 	stw	ra,4(sp)
   28edc:	3021883a 	mov	r16,r6
   28ee0:	002a9b80 	call	2a9b8 <strcmp>
   28ee4:	1000061e 	bne	r2,zero,28f00 <_setlocale_r+0x40>
   28ee8:	00810034 	movhi	r2,1024
   28eec:	10802204 	addi	r2,r2,136
   28ef0:	dfc00117 	ldw	ra,4(sp)
   28ef4:	dc000017 	ldw	r16,0(sp)
   28ef8:	dec00204 	addi	sp,sp,8
   28efc:	f800283a 	ret
   28f00:	01410034 	movhi	r5,1024
   28f04:	29402204 	addi	r5,r5,136
   28f08:	8009883a 	mov	r4,r16
   28f0c:	002a9b80 	call	2a9b8 <strcmp>
   28f10:	103ff526 	beq	r2,zero,28ee8 <__alt_data_end+0xf8028ee8>
   28f14:	01410034 	movhi	r5,1024
   28f18:	29402c04 	addi	r5,r5,176
   28f1c:	8009883a 	mov	r4,r16
   28f20:	002a9b80 	call	2a9b8 <strcmp>
   28f24:	103ff026 	beq	r2,zero,28ee8 <__alt_data_end+0xf8028ee8>
   28f28:	0005883a 	mov	r2,zero
   28f2c:	003ff006 	br	28ef0 <__alt_data_end+0xf8028ef0>
   28f30:	00810034 	movhi	r2,1024
   28f34:	10802204 	addi	r2,r2,136
   28f38:	f800283a 	ret

00028f3c <__locale_charset>:
   28f3c:	00810034 	movhi	r2,1024
   28f40:	10831104 	addi	r2,r2,3140
   28f44:	f800283a 	ret

00028f48 <__locale_mb_cur_max>:
   28f48:	00810034 	movhi	r2,1024
   28f4c:	1087ec04 	addi	r2,r2,8112
   28f50:	10800017 	ldw	r2,0(r2)
   28f54:	f800283a 	ret

00028f58 <__locale_msgcharset>:
   28f58:	00810034 	movhi	r2,1024
   28f5c:	10830904 	addi	r2,r2,3108
   28f60:	f800283a 	ret

00028f64 <__locale_cjk_lang>:
   28f64:	0005883a 	mov	r2,zero
   28f68:	f800283a 	ret

00028f6c <_localeconv_r>:
   28f6c:	00810034 	movhi	r2,1024
   28f70:	10831904 	addi	r2,r2,3172
   28f74:	f800283a 	ret

00028f78 <setlocale>:
   28f78:	00810034 	movhi	r2,1024
   28f7c:	1087e904 	addi	r2,r2,8100
   28f80:	280d883a 	mov	r6,r5
   28f84:	200b883a 	mov	r5,r4
   28f88:	11000017 	ldw	r4,0(r2)
   28f8c:	0028ec01 	jmpi	28ec0 <_setlocale_r>

00028f90 <localeconv>:
   28f90:	00810034 	movhi	r2,1024
   28f94:	10831904 	addi	r2,r2,3172
   28f98:	f800283a 	ret

00028f9c <_lseek_r>:
   28f9c:	defffd04 	addi	sp,sp,-12
   28fa0:	2805883a 	mov	r2,r5
   28fa4:	dc000015 	stw	r16,0(sp)
   28fa8:	04010034 	movhi	r16,1024
   28fac:	dc400115 	stw	r17,4(sp)
   28fb0:	300b883a 	mov	r5,r6
   28fb4:	8407fa04 	addi	r16,r16,8168
   28fb8:	2023883a 	mov	r17,r4
   28fbc:	380d883a 	mov	r6,r7
   28fc0:	1009883a 	mov	r4,r2
   28fc4:	dfc00215 	stw	ra,8(sp)
   28fc8:	80000015 	stw	zero,0(r16)
   28fcc:	00312f00 	call	312f0 <lseek>
   28fd0:	00ffffc4 	movi	r3,-1
   28fd4:	10c00526 	beq	r2,r3,28fec <_lseek_r+0x50>
   28fd8:	dfc00217 	ldw	ra,8(sp)
   28fdc:	dc400117 	ldw	r17,4(sp)
   28fe0:	dc000017 	ldw	r16,0(sp)
   28fe4:	dec00304 	addi	sp,sp,12
   28fe8:	f800283a 	ret
   28fec:	80c00017 	ldw	r3,0(r16)
   28ff0:	183ff926 	beq	r3,zero,28fd8 <__alt_data_end+0xf8028fd8>
   28ff4:	88c00015 	stw	r3,0(r17)
   28ff8:	003ff706 	br	28fd8 <__alt_data_end+0xf8028fd8>

00028ffc <memchr>:
   28ffc:	208000cc 	andi	r2,r4,3
   29000:	280f883a 	mov	r7,r5
   29004:	10003426 	beq	r2,zero,290d8 <memchr+0xdc>
   29008:	30bfffc4 	addi	r2,r6,-1
   2900c:	30001a26 	beq	r6,zero,29078 <memchr+0x7c>
   29010:	20c00003 	ldbu	r3,0(r4)
   29014:	29803fcc 	andi	r6,r5,255
   29018:	30c0051e 	bne	r6,r3,29030 <memchr+0x34>
   2901c:	00001806 	br	29080 <memchr+0x84>
   29020:	10001526 	beq	r2,zero,29078 <memchr+0x7c>
   29024:	20c00003 	ldbu	r3,0(r4)
   29028:	10bfffc4 	addi	r2,r2,-1
   2902c:	30c01426 	beq	r6,r3,29080 <memchr+0x84>
   29030:	21000044 	addi	r4,r4,1
   29034:	20c000cc 	andi	r3,r4,3
   29038:	183ff91e 	bne	r3,zero,29020 <__alt_data_end+0xf8029020>
   2903c:	020000c4 	movi	r8,3
   29040:	40801136 	bltu	r8,r2,29088 <memchr+0x8c>
   29044:	10000c26 	beq	r2,zero,29078 <memchr+0x7c>
   29048:	20c00003 	ldbu	r3,0(r4)
   2904c:	29403fcc 	andi	r5,r5,255
   29050:	28c00b26 	beq	r5,r3,29080 <memchr+0x84>
   29054:	20c00044 	addi	r3,r4,1
   29058:	39803fcc 	andi	r6,r7,255
   2905c:	2089883a 	add	r4,r4,r2
   29060:	00000306 	br	29070 <memchr+0x74>
   29064:	18c00044 	addi	r3,r3,1
   29068:	197fffc3 	ldbu	r5,-1(r3)
   2906c:	31400526 	beq	r6,r5,29084 <memchr+0x88>
   29070:	1805883a 	mov	r2,r3
   29074:	20fffb1e 	bne	r4,r3,29064 <__alt_data_end+0xf8029064>
   29078:	0005883a 	mov	r2,zero
   2907c:	f800283a 	ret
   29080:	2005883a 	mov	r2,r4
   29084:	f800283a 	ret
   29088:	28c03fcc 	andi	r3,r5,255
   2908c:	1812923a 	slli	r9,r3,8
   29090:	02ffbff4 	movhi	r11,65279
   29094:	02a02074 	movhi	r10,32897
   29098:	48d2b03a 	or	r9,r9,r3
   2909c:	4806943a 	slli	r3,r9,16
   290a0:	5affbfc4 	addi	r11,r11,-257
   290a4:	52a02004 	addi	r10,r10,-32640
   290a8:	48d2b03a 	or	r9,r9,r3
   290ac:	20c00017 	ldw	r3,0(r4)
   290b0:	48c6f03a 	xor	r3,r9,r3
   290b4:	1acd883a 	add	r6,r3,r11
   290b8:	00c6303a 	nor	r3,zero,r3
   290bc:	30c6703a 	and	r3,r6,r3
   290c0:	1a86703a 	and	r3,r3,r10
   290c4:	183fe01e 	bne	r3,zero,29048 <__alt_data_end+0xf8029048>
   290c8:	10bfff04 	addi	r2,r2,-4
   290cc:	21000104 	addi	r4,r4,4
   290d0:	40bff636 	bltu	r8,r2,290ac <__alt_data_end+0xf80290ac>
   290d4:	003fdb06 	br	29044 <__alt_data_end+0xf8029044>
   290d8:	3005883a 	mov	r2,r6
   290dc:	003fd706 	br	2903c <__alt_data_end+0xf802903c>

000290e0 <memcpy>:
   290e0:	defffd04 	addi	sp,sp,-12
   290e4:	dfc00215 	stw	ra,8(sp)
   290e8:	dc400115 	stw	r17,4(sp)
   290ec:	dc000015 	stw	r16,0(sp)
   290f0:	00c003c4 	movi	r3,15
   290f4:	2005883a 	mov	r2,r4
   290f8:	1980452e 	bgeu	r3,r6,29210 <memcpy+0x130>
   290fc:	2906b03a 	or	r3,r5,r4
   29100:	18c000cc 	andi	r3,r3,3
   29104:	1800441e 	bne	r3,zero,29218 <memcpy+0x138>
   29108:	347ffc04 	addi	r17,r6,-16
   2910c:	8822d13a 	srli	r17,r17,4
   29110:	28c00104 	addi	r3,r5,4
   29114:	23400104 	addi	r13,r4,4
   29118:	8820913a 	slli	r16,r17,4
   2911c:	2b000204 	addi	r12,r5,8
   29120:	22c00204 	addi	r11,r4,8
   29124:	84000504 	addi	r16,r16,20
   29128:	2a800304 	addi	r10,r5,12
   2912c:	22400304 	addi	r9,r4,12
   29130:	2c21883a 	add	r16,r5,r16
   29134:	2811883a 	mov	r8,r5
   29138:	200f883a 	mov	r7,r4
   2913c:	41000017 	ldw	r4,0(r8)
   29140:	1fc00017 	ldw	ra,0(r3)
   29144:	63c00017 	ldw	r15,0(r12)
   29148:	39000015 	stw	r4,0(r7)
   2914c:	53800017 	ldw	r14,0(r10)
   29150:	6fc00015 	stw	ra,0(r13)
   29154:	5bc00015 	stw	r15,0(r11)
   29158:	4b800015 	stw	r14,0(r9)
   2915c:	18c00404 	addi	r3,r3,16
   29160:	39c00404 	addi	r7,r7,16
   29164:	42000404 	addi	r8,r8,16
   29168:	6b400404 	addi	r13,r13,16
   2916c:	63000404 	addi	r12,r12,16
   29170:	5ac00404 	addi	r11,r11,16
   29174:	52800404 	addi	r10,r10,16
   29178:	4a400404 	addi	r9,r9,16
   2917c:	1c3fef1e 	bne	r3,r16,2913c <__alt_data_end+0xf802913c>
   29180:	89c00044 	addi	r7,r17,1
   29184:	380e913a 	slli	r7,r7,4
   29188:	310003cc 	andi	r4,r6,15
   2918c:	02c000c4 	movi	r11,3
   29190:	11c7883a 	add	r3,r2,r7
   29194:	29cb883a 	add	r5,r5,r7
   29198:	5900212e 	bgeu	r11,r4,29220 <memcpy+0x140>
   2919c:	1813883a 	mov	r9,r3
   291a0:	2811883a 	mov	r8,r5
   291a4:	200f883a 	mov	r7,r4
   291a8:	42800017 	ldw	r10,0(r8)
   291ac:	4a400104 	addi	r9,r9,4
   291b0:	39ffff04 	addi	r7,r7,-4
   291b4:	4abfff15 	stw	r10,-4(r9)
   291b8:	42000104 	addi	r8,r8,4
   291bc:	59fffa36 	bltu	r11,r7,291a8 <__alt_data_end+0xf80291a8>
   291c0:	213fff04 	addi	r4,r4,-4
   291c4:	2008d0ba 	srli	r4,r4,2
   291c8:	318000cc 	andi	r6,r6,3
   291cc:	21000044 	addi	r4,r4,1
   291d0:	2109883a 	add	r4,r4,r4
   291d4:	2109883a 	add	r4,r4,r4
   291d8:	1907883a 	add	r3,r3,r4
   291dc:	290b883a 	add	r5,r5,r4
   291e0:	30000626 	beq	r6,zero,291fc <memcpy+0x11c>
   291e4:	198d883a 	add	r6,r3,r6
   291e8:	29c00003 	ldbu	r7,0(r5)
   291ec:	18c00044 	addi	r3,r3,1
   291f0:	29400044 	addi	r5,r5,1
   291f4:	19ffffc5 	stb	r7,-1(r3)
   291f8:	19bffb1e 	bne	r3,r6,291e8 <__alt_data_end+0xf80291e8>
   291fc:	dfc00217 	ldw	ra,8(sp)
   29200:	dc400117 	ldw	r17,4(sp)
   29204:	dc000017 	ldw	r16,0(sp)
   29208:	dec00304 	addi	sp,sp,12
   2920c:	f800283a 	ret
   29210:	2007883a 	mov	r3,r4
   29214:	003ff206 	br	291e0 <__alt_data_end+0xf80291e0>
   29218:	2007883a 	mov	r3,r4
   2921c:	003ff106 	br	291e4 <__alt_data_end+0xf80291e4>
   29220:	200d883a 	mov	r6,r4
   29224:	003fee06 	br	291e0 <__alt_data_end+0xf80291e0>

00029228 <memmove>:
   29228:	2005883a 	mov	r2,r4
   2922c:	29000b2e 	bgeu	r5,r4,2925c <memmove+0x34>
   29230:	298f883a 	add	r7,r5,r6
   29234:	21c0092e 	bgeu	r4,r7,2925c <memmove+0x34>
   29238:	2187883a 	add	r3,r4,r6
   2923c:	198bc83a 	sub	r5,r3,r6
   29240:	30004826 	beq	r6,zero,29364 <memmove+0x13c>
   29244:	39ffffc4 	addi	r7,r7,-1
   29248:	39000003 	ldbu	r4,0(r7)
   2924c:	18ffffc4 	addi	r3,r3,-1
   29250:	19000005 	stb	r4,0(r3)
   29254:	28fffb1e 	bne	r5,r3,29244 <__alt_data_end+0xf8029244>
   29258:	f800283a 	ret
   2925c:	00c003c4 	movi	r3,15
   29260:	1980412e 	bgeu	r3,r6,29368 <memmove+0x140>
   29264:	2886b03a 	or	r3,r5,r2
   29268:	18c000cc 	andi	r3,r3,3
   2926c:	1800401e 	bne	r3,zero,29370 <memmove+0x148>
   29270:	33fffc04 	addi	r15,r6,-16
   29274:	781ed13a 	srli	r15,r15,4
   29278:	28c00104 	addi	r3,r5,4
   2927c:	13400104 	addi	r13,r2,4
   29280:	781c913a 	slli	r14,r15,4
   29284:	2b000204 	addi	r12,r5,8
   29288:	12c00204 	addi	r11,r2,8
   2928c:	73800504 	addi	r14,r14,20
   29290:	2a800304 	addi	r10,r5,12
   29294:	12400304 	addi	r9,r2,12
   29298:	2b9d883a 	add	r14,r5,r14
   2929c:	2811883a 	mov	r8,r5
   292a0:	100f883a 	mov	r7,r2
   292a4:	41000017 	ldw	r4,0(r8)
   292a8:	39c00404 	addi	r7,r7,16
   292ac:	18c00404 	addi	r3,r3,16
   292b0:	393ffc15 	stw	r4,-16(r7)
   292b4:	193ffc17 	ldw	r4,-16(r3)
   292b8:	6b400404 	addi	r13,r13,16
   292bc:	5ac00404 	addi	r11,r11,16
   292c0:	693ffc15 	stw	r4,-16(r13)
   292c4:	61000017 	ldw	r4,0(r12)
   292c8:	4a400404 	addi	r9,r9,16
   292cc:	42000404 	addi	r8,r8,16
   292d0:	593ffc15 	stw	r4,-16(r11)
   292d4:	51000017 	ldw	r4,0(r10)
   292d8:	63000404 	addi	r12,r12,16
   292dc:	52800404 	addi	r10,r10,16
   292e0:	493ffc15 	stw	r4,-16(r9)
   292e4:	1bbfef1e 	bne	r3,r14,292a4 <__alt_data_end+0xf80292a4>
   292e8:	79000044 	addi	r4,r15,1
   292ec:	2008913a 	slli	r4,r4,4
   292f0:	328003cc 	andi	r10,r6,15
   292f4:	02c000c4 	movi	r11,3
   292f8:	1107883a 	add	r3,r2,r4
   292fc:	290b883a 	add	r5,r5,r4
   29300:	5a801e2e 	bgeu	r11,r10,2937c <memmove+0x154>
   29304:	1813883a 	mov	r9,r3
   29308:	2811883a 	mov	r8,r5
   2930c:	500f883a 	mov	r7,r10
   29310:	41000017 	ldw	r4,0(r8)
   29314:	4a400104 	addi	r9,r9,4
   29318:	39ffff04 	addi	r7,r7,-4
   2931c:	493fff15 	stw	r4,-4(r9)
   29320:	42000104 	addi	r8,r8,4
   29324:	59fffa36 	bltu	r11,r7,29310 <__alt_data_end+0xf8029310>
   29328:	513fff04 	addi	r4,r10,-4
   2932c:	2008d0ba 	srli	r4,r4,2
   29330:	318000cc 	andi	r6,r6,3
   29334:	21000044 	addi	r4,r4,1
   29338:	2109883a 	add	r4,r4,r4
   2933c:	2109883a 	add	r4,r4,r4
   29340:	1907883a 	add	r3,r3,r4
   29344:	290b883a 	add	r5,r5,r4
   29348:	30000b26 	beq	r6,zero,29378 <memmove+0x150>
   2934c:	198d883a 	add	r6,r3,r6
   29350:	29c00003 	ldbu	r7,0(r5)
   29354:	18c00044 	addi	r3,r3,1
   29358:	29400044 	addi	r5,r5,1
   2935c:	19ffffc5 	stb	r7,-1(r3)
   29360:	19bffb1e 	bne	r3,r6,29350 <__alt_data_end+0xf8029350>
   29364:	f800283a 	ret
   29368:	1007883a 	mov	r3,r2
   2936c:	003ff606 	br	29348 <__alt_data_end+0xf8029348>
   29370:	1007883a 	mov	r3,r2
   29374:	003ff506 	br	2934c <__alt_data_end+0xf802934c>
   29378:	f800283a 	ret
   2937c:	500d883a 	mov	r6,r10
   29380:	003ff106 	br	29348 <__alt_data_end+0xf8029348>

00029384 <_Balloc>:
   29384:	20801317 	ldw	r2,76(r4)
   29388:	defffc04 	addi	sp,sp,-16
   2938c:	dc400115 	stw	r17,4(sp)
   29390:	dc000015 	stw	r16,0(sp)
   29394:	dfc00315 	stw	ra,12(sp)
   29398:	dc800215 	stw	r18,8(sp)
   2939c:	2023883a 	mov	r17,r4
   293a0:	2821883a 	mov	r16,r5
   293a4:	10000f26 	beq	r2,zero,293e4 <_Balloc+0x60>
   293a8:	8407883a 	add	r3,r16,r16
   293ac:	18c7883a 	add	r3,r3,r3
   293b0:	10c7883a 	add	r3,r2,r3
   293b4:	18800017 	ldw	r2,0(r3)
   293b8:	10001126 	beq	r2,zero,29400 <_Balloc+0x7c>
   293bc:	11000017 	ldw	r4,0(r2)
   293c0:	19000015 	stw	r4,0(r3)
   293c4:	10000415 	stw	zero,16(r2)
   293c8:	10000315 	stw	zero,12(r2)
   293cc:	dfc00317 	ldw	ra,12(sp)
   293d0:	dc800217 	ldw	r18,8(sp)
   293d4:	dc400117 	ldw	r17,4(sp)
   293d8:	dc000017 	ldw	r16,0(sp)
   293dc:	dec00404 	addi	sp,sp,16
   293e0:	f800283a 	ret
   293e4:	01800844 	movi	r6,33
   293e8:	01400104 	movi	r5,4
   293ec:	002d4e80 	call	2d4e8 <_calloc_r>
   293f0:	88801315 	stw	r2,76(r17)
   293f4:	103fec1e 	bne	r2,zero,293a8 <__alt_data_end+0xf80293a8>
   293f8:	0005883a 	mov	r2,zero
   293fc:	003ff306 	br	293cc <__alt_data_end+0xf80293cc>
   29400:	01400044 	movi	r5,1
   29404:	2c24983a 	sll	r18,r5,r16
   29408:	8809883a 	mov	r4,r17
   2940c:	91800144 	addi	r6,r18,5
   29410:	318d883a 	add	r6,r6,r6
   29414:	318d883a 	add	r6,r6,r6
   29418:	002d4e80 	call	2d4e8 <_calloc_r>
   2941c:	103ff626 	beq	r2,zero,293f8 <__alt_data_end+0xf80293f8>
   29420:	14000115 	stw	r16,4(r2)
   29424:	14800215 	stw	r18,8(r2)
   29428:	003fe606 	br	293c4 <__alt_data_end+0xf80293c4>

0002942c <_Bfree>:
   2942c:	28000826 	beq	r5,zero,29450 <_Bfree+0x24>
   29430:	28c00117 	ldw	r3,4(r5)
   29434:	20801317 	ldw	r2,76(r4)
   29438:	18c7883a 	add	r3,r3,r3
   2943c:	18c7883a 	add	r3,r3,r3
   29440:	10c5883a 	add	r2,r2,r3
   29444:	10c00017 	ldw	r3,0(r2)
   29448:	28c00015 	stw	r3,0(r5)
   2944c:	11400015 	stw	r5,0(r2)
   29450:	f800283a 	ret

00029454 <__multadd>:
   29454:	defffa04 	addi	sp,sp,-24
   29458:	dc800315 	stw	r18,12(sp)
   2945c:	dc400215 	stw	r17,8(sp)
   29460:	dc000115 	stw	r16,4(sp)
   29464:	2823883a 	mov	r17,r5
   29468:	2c000417 	ldw	r16,16(r5)
   2946c:	dfc00515 	stw	ra,20(sp)
   29470:	dcc00415 	stw	r19,16(sp)
   29474:	2025883a 	mov	r18,r4
   29478:	29400504 	addi	r5,r5,20
   2947c:	0011883a 	mov	r8,zero
   29480:	28c00017 	ldw	r3,0(r5)
   29484:	29400104 	addi	r5,r5,4
   29488:	42000044 	addi	r8,r8,1
   2948c:	18bfffcc 	andi	r2,r3,65535
   29490:	1185383a 	mul	r2,r2,r6
   29494:	1806d43a 	srli	r3,r3,16
   29498:	11cf883a 	add	r7,r2,r7
   2949c:	3808d43a 	srli	r4,r7,16
   294a0:	1987383a 	mul	r3,r3,r6
   294a4:	38bfffcc 	andi	r2,r7,65535
   294a8:	1907883a 	add	r3,r3,r4
   294ac:	1808943a 	slli	r4,r3,16
   294b0:	180ed43a 	srli	r7,r3,16
   294b4:	2085883a 	add	r2,r4,r2
   294b8:	28bfff15 	stw	r2,-4(r5)
   294bc:	443ff016 	blt	r8,r16,29480 <__alt_data_end+0xf8029480>
   294c0:	38000926 	beq	r7,zero,294e8 <__multadd+0x94>
   294c4:	88800217 	ldw	r2,8(r17)
   294c8:	80800f0e 	bge	r16,r2,29508 <__multadd+0xb4>
   294cc:	80800144 	addi	r2,r16,5
   294d0:	1085883a 	add	r2,r2,r2
   294d4:	1085883a 	add	r2,r2,r2
   294d8:	8885883a 	add	r2,r17,r2
   294dc:	11c00015 	stw	r7,0(r2)
   294e0:	84000044 	addi	r16,r16,1
   294e4:	8c000415 	stw	r16,16(r17)
   294e8:	8805883a 	mov	r2,r17
   294ec:	dfc00517 	ldw	ra,20(sp)
   294f0:	dcc00417 	ldw	r19,16(sp)
   294f4:	dc800317 	ldw	r18,12(sp)
   294f8:	dc400217 	ldw	r17,8(sp)
   294fc:	dc000117 	ldw	r16,4(sp)
   29500:	dec00604 	addi	sp,sp,24
   29504:	f800283a 	ret
   29508:	89400117 	ldw	r5,4(r17)
   2950c:	9009883a 	mov	r4,r18
   29510:	d9c00015 	stw	r7,0(sp)
   29514:	29400044 	addi	r5,r5,1
   29518:	00293840 	call	29384 <_Balloc>
   2951c:	89800417 	ldw	r6,16(r17)
   29520:	89400304 	addi	r5,r17,12
   29524:	11000304 	addi	r4,r2,12
   29528:	31800084 	addi	r6,r6,2
   2952c:	318d883a 	add	r6,r6,r6
   29530:	318d883a 	add	r6,r6,r6
   29534:	1027883a 	mov	r19,r2
   29538:	00290e00 	call	290e0 <memcpy>
   2953c:	d9c00017 	ldw	r7,0(sp)
   29540:	88000a26 	beq	r17,zero,2956c <__multadd+0x118>
   29544:	88c00117 	ldw	r3,4(r17)
   29548:	90801317 	ldw	r2,76(r18)
   2954c:	18c7883a 	add	r3,r3,r3
   29550:	18c7883a 	add	r3,r3,r3
   29554:	10c5883a 	add	r2,r2,r3
   29558:	10c00017 	ldw	r3,0(r2)
   2955c:	88c00015 	stw	r3,0(r17)
   29560:	14400015 	stw	r17,0(r2)
   29564:	9823883a 	mov	r17,r19
   29568:	003fd806 	br	294cc <__alt_data_end+0xf80294cc>
   2956c:	9823883a 	mov	r17,r19
   29570:	003fd606 	br	294cc <__alt_data_end+0xf80294cc>

00029574 <__s2b>:
   29574:	defff904 	addi	sp,sp,-28
   29578:	dc400115 	stw	r17,4(sp)
   2957c:	dc000015 	stw	r16,0(sp)
   29580:	2023883a 	mov	r17,r4
   29584:	2821883a 	mov	r16,r5
   29588:	39000204 	addi	r4,r7,8
   2958c:	01400244 	movi	r5,9
   29590:	dcc00315 	stw	r19,12(sp)
   29594:	dc800215 	stw	r18,8(sp)
   29598:	dfc00615 	stw	ra,24(sp)
   2959c:	dd400515 	stw	r21,20(sp)
   295a0:	dd000415 	stw	r20,16(sp)
   295a4:	3825883a 	mov	r18,r7
   295a8:	3027883a 	mov	r19,r6
   295ac:	002e6a80 	call	2e6a8 <__divsi3>
   295b0:	00c00044 	movi	r3,1
   295b4:	000b883a 	mov	r5,zero
   295b8:	1880030e 	bge	r3,r2,295c8 <__s2b+0x54>
   295bc:	18c7883a 	add	r3,r3,r3
   295c0:	29400044 	addi	r5,r5,1
   295c4:	18bffd16 	blt	r3,r2,295bc <__alt_data_end+0xf80295bc>
   295c8:	8809883a 	mov	r4,r17
   295cc:	00293840 	call	29384 <_Balloc>
   295d0:	d8c00717 	ldw	r3,28(sp)
   295d4:	10c00515 	stw	r3,20(r2)
   295d8:	00c00044 	movi	r3,1
   295dc:	10c00415 	stw	r3,16(r2)
   295e0:	00c00244 	movi	r3,9
   295e4:	1cc0210e 	bge	r3,r19,2966c <__s2b+0xf8>
   295e8:	80eb883a 	add	r21,r16,r3
   295ec:	a829883a 	mov	r20,r21
   295f0:	84e1883a 	add	r16,r16,r19
   295f4:	a1c00007 	ldb	r7,0(r20)
   295f8:	01800284 	movi	r6,10
   295fc:	a5000044 	addi	r20,r20,1
   29600:	100b883a 	mov	r5,r2
   29604:	39fff404 	addi	r7,r7,-48
   29608:	8809883a 	mov	r4,r17
   2960c:	00294540 	call	29454 <__multadd>
   29610:	a43ff81e 	bne	r20,r16,295f4 <__alt_data_end+0xf80295f4>
   29614:	ace1883a 	add	r16,r21,r19
   29618:	843ffe04 	addi	r16,r16,-8
   2961c:	9c800a0e 	bge	r19,r18,29648 <__s2b+0xd4>
   29620:	94e5c83a 	sub	r18,r18,r19
   29624:	84a5883a 	add	r18,r16,r18
   29628:	81c00007 	ldb	r7,0(r16)
   2962c:	01800284 	movi	r6,10
   29630:	84000044 	addi	r16,r16,1
   29634:	100b883a 	mov	r5,r2
   29638:	39fff404 	addi	r7,r7,-48
   2963c:	8809883a 	mov	r4,r17
   29640:	00294540 	call	29454 <__multadd>
   29644:	84bff81e 	bne	r16,r18,29628 <__alt_data_end+0xf8029628>
   29648:	dfc00617 	ldw	ra,24(sp)
   2964c:	dd400517 	ldw	r21,20(sp)
   29650:	dd000417 	ldw	r20,16(sp)
   29654:	dcc00317 	ldw	r19,12(sp)
   29658:	dc800217 	ldw	r18,8(sp)
   2965c:	dc400117 	ldw	r17,4(sp)
   29660:	dc000017 	ldw	r16,0(sp)
   29664:	dec00704 	addi	sp,sp,28
   29668:	f800283a 	ret
   2966c:	84000284 	addi	r16,r16,10
   29670:	1827883a 	mov	r19,r3
   29674:	003fe906 	br	2961c <__alt_data_end+0xf802961c>

00029678 <__hi0bits>:
   29678:	20bfffec 	andhi	r2,r4,65535
   2967c:	1000141e 	bne	r2,zero,296d0 <__hi0bits+0x58>
   29680:	2008943a 	slli	r4,r4,16
   29684:	00800404 	movi	r2,16
   29688:	20ffc02c 	andhi	r3,r4,65280
   2968c:	1800021e 	bne	r3,zero,29698 <__hi0bits+0x20>
   29690:	2008923a 	slli	r4,r4,8
   29694:	10800204 	addi	r2,r2,8
   29698:	20fc002c 	andhi	r3,r4,61440
   2969c:	1800021e 	bne	r3,zero,296a8 <__hi0bits+0x30>
   296a0:	2008913a 	slli	r4,r4,4
   296a4:	10800104 	addi	r2,r2,4
   296a8:	20f0002c 	andhi	r3,r4,49152
   296ac:	1800031e 	bne	r3,zero,296bc <__hi0bits+0x44>
   296b0:	2109883a 	add	r4,r4,r4
   296b4:	10800084 	addi	r2,r2,2
   296b8:	2109883a 	add	r4,r4,r4
   296bc:	20000316 	blt	r4,zero,296cc <__hi0bits+0x54>
   296c0:	2110002c 	andhi	r4,r4,16384
   296c4:	2000041e 	bne	r4,zero,296d8 <__hi0bits+0x60>
   296c8:	00800804 	movi	r2,32
   296cc:	f800283a 	ret
   296d0:	0005883a 	mov	r2,zero
   296d4:	003fec06 	br	29688 <__alt_data_end+0xf8029688>
   296d8:	10800044 	addi	r2,r2,1
   296dc:	f800283a 	ret

000296e0 <__lo0bits>:
   296e0:	20c00017 	ldw	r3,0(r4)
   296e4:	188001cc 	andi	r2,r3,7
   296e8:	10000826 	beq	r2,zero,2970c <__lo0bits+0x2c>
   296ec:	1880004c 	andi	r2,r3,1
   296f0:	1000211e 	bne	r2,zero,29778 <__lo0bits+0x98>
   296f4:	1880008c 	andi	r2,r3,2
   296f8:	1000211e 	bne	r2,zero,29780 <__lo0bits+0xa0>
   296fc:	1806d0ba 	srli	r3,r3,2
   29700:	00800084 	movi	r2,2
   29704:	20c00015 	stw	r3,0(r4)
   29708:	f800283a 	ret
   2970c:	18bfffcc 	andi	r2,r3,65535
   29710:	10001326 	beq	r2,zero,29760 <__lo0bits+0x80>
   29714:	0005883a 	mov	r2,zero
   29718:	19403fcc 	andi	r5,r3,255
   2971c:	2800021e 	bne	r5,zero,29728 <__lo0bits+0x48>
   29720:	1806d23a 	srli	r3,r3,8
   29724:	10800204 	addi	r2,r2,8
   29728:	194003cc 	andi	r5,r3,15
   2972c:	2800021e 	bne	r5,zero,29738 <__lo0bits+0x58>
   29730:	1806d13a 	srli	r3,r3,4
   29734:	10800104 	addi	r2,r2,4
   29738:	194000cc 	andi	r5,r3,3
   2973c:	2800021e 	bne	r5,zero,29748 <__lo0bits+0x68>
   29740:	1806d0ba 	srli	r3,r3,2
   29744:	10800084 	addi	r2,r2,2
   29748:	1940004c 	andi	r5,r3,1
   2974c:	2800081e 	bne	r5,zero,29770 <__lo0bits+0x90>
   29750:	1806d07a 	srli	r3,r3,1
   29754:	1800051e 	bne	r3,zero,2976c <__lo0bits+0x8c>
   29758:	00800804 	movi	r2,32
   2975c:	f800283a 	ret
   29760:	1806d43a 	srli	r3,r3,16
   29764:	00800404 	movi	r2,16
   29768:	003feb06 	br	29718 <__alt_data_end+0xf8029718>
   2976c:	10800044 	addi	r2,r2,1
   29770:	20c00015 	stw	r3,0(r4)
   29774:	f800283a 	ret
   29778:	0005883a 	mov	r2,zero
   2977c:	f800283a 	ret
   29780:	1806d07a 	srli	r3,r3,1
   29784:	00800044 	movi	r2,1
   29788:	20c00015 	stw	r3,0(r4)
   2978c:	f800283a 	ret

00029790 <__i2b>:
   29790:	defffd04 	addi	sp,sp,-12
   29794:	dc000015 	stw	r16,0(sp)
   29798:	04000044 	movi	r16,1
   2979c:	dc400115 	stw	r17,4(sp)
   297a0:	2823883a 	mov	r17,r5
   297a4:	800b883a 	mov	r5,r16
   297a8:	dfc00215 	stw	ra,8(sp)
   297ac:	00293840 	call	29384 <_Balloc>
   297b0:	14400515 	stw	r17,20(r2)
   297b4:	14000415 	stw	r16,16(r2)
   297b8:	dfc00217 	ldw	ra,8(sp)
   297bc:	dc400117 	ldw	r17,4(sp)
   297c0:	dc000017 	ldw	r16,0(sp)
   297c4:	dec00304 	addi	sp,sp,12
   297c8:	f800283a 	ret

000297cc <__multiply>:
   297cc:	defffa04 	addi	sp,sp,-24
   297d0:	dcc00315 	stw	r19,12(sp)
   297d4:	dc800215 	stw	r18,8(sp)
   297d8:	34c00417 	ldw	r19,16(r6)
   297dc:	2c800417 	ldw	r18,16(r5)
   297e0:	dd000415 	stw	r20,16(sp)
   297e4:	dc400115 	stw	r17,4(sp)
   297e8:	dfc00515 	stw	ra,20(sp)
   297ec:	dc000015 	stw	r16,0(sp)
   297f0:	2829883a 	mov	r20,r5
   297f4:	3023883a 	mov	r17,r6
   297f8:	94c0050e 	bge	r18,r19,29810 <__multiply+0x44>
   297fc:	9007883a 	mov	r3,r18
   29800:	3029883a 	mov	r20,r6
   29804:	9825883a 	mov	r18,r19
   29808:	2823883a 	mov	r17,r5
   2980c:	1827883a 	mov	r19,r3
   29810:	a0800217 	ldw	r2,8(r20)
   29814:	94e1883a 	add	r16,r18,r19
   29818:	a1400117 	ldw	r5,4(r20)
   2981c:	1400010e 	bge	r2,r16,29824 <__multiply+0x58>
   29820:	29400044 	addi	r5,r5,1
   29824:	00293840 	call	29384 <_Balloc>
   29828:	8415883a 	add	r10,r16,r16
   2982c:	12c00504 	addi	r11,r2,20
   29830:	5295883a 	add	r10,r10,r10
   29834:	5a95883a 	add	r10,r11,r10
   29838:	5807883a 	mov	r3,r11
   2983c:	5a80032e 	bgeu	r11,r10,2984c <__multiply+0x80>
   29840:	18000015 	stw	zero,0(r3)
   29844:	18c00104 	addi	r3,r3,4
   29848:	1abffd36 	bltu	r3,r10,29840 <__alt_data_end+0xf8029840>
   2984c:	9ce7883a 	add	r19,r19,r19
   29850:	94a5883a 	add	r18,r18,r18
   29854:	89800504 	addi	r6,r17,20
   29858:	9ce7883a 	add	r19,r19,r19
   2985c:	a3400504 	addi	r13,r20,20
   29860:	94a5883a 	add	r18,r18,r18
   29864:	34d9883a 	add	r12,r6,r19
   29868:	6c93883a 	add	r9,r13,r18
   2986c:	3300422e 	bgeu	r6,r12,29978 <__multiply+0x1ac>
   29870:	37c00017 	ldw	ra,0(r6)
   29874:	fbffffcc 	andi	r15,ra,65535
   29878:	78001b26 	beq	r15,zero,298e8 <__multiply+0x11c>
   2987c:	5811883a 	mov	r8,r11
   29880:	681d883a 	mov	r14,r13
   29884:	000f883a 	mov	r7,zero
   29888:	71000017 	ldw	r4,0(r14)
   2988c:	40c00017 	ldw	r3,0(r8)
   29890:	73800104 	addi	r14,r14,4
   29894:	217fffcc 	andi	r5,r4,65535
   29898:	2bcb383a 	mul	r5,r5,r15
   2989c:	2008d43a 	srli	r4,r4,16
   298a0:	1c7fffcc 	andi	r17,r3,65535
   298a4:	2c4b883a 	add	r5,r5,r17
   298a8:	29cb883a 	add	r5,r5,r7
   298ac:	23c9383a 	mul	r4,r4,r15
   298b0:	1806d43a 	srli	r3,r3,16
   298b4:	280ed43a 	srli	r7,r5,16
   298b8:	297fffcc 	andi	r5,r5,65535
   298bc:	20c7883a 	add	r3,r4,r3
   298c0:	19c7883a 	add	r3,r3,r7
   298c4:	1808943a 	slli	r4,r3,16
   298c8:	4023883a 	mov	r17,r8
   298cc:	180ed43a 	srli	r7,r3,16
   298d0:	214ab03a 	or	r5,r4,r5
   298d4:	41400015 	stw	r5,0(r8)
   298d8:	42000104 	addi	r8,r8,4
   298dc:	727fea36 	bltu	r14,r9,29888 <__alt_data_end+0xf8029888>
   298e0:	89c00115 	stw	r7,4(r17)
   298e4:	37c00017 	ldw	ra,0(r6)
   298e8:	f83ed43a 	srli	ra,ra,16
   298ec:	f8001f26 	beq	ra,zero,2996c <__multiply+0x1a0>
   298f0:	58c00017 	ldw	r3,0(r11)
   298f4:	681d883a 	mov	r14,r13
   298f8:	581f883a 	mov	r15,r11
   298fc:	1811883a 	mov	r8,r3
   29900:	5825883a 	mov	r18,r11
   29904:	000f883a 	mov	r7,zero
   29908:	00000106 	br	29910 <__multiply+0x144>
   2990c:	8825883a 	mov	r18,r17
   29910:	7140000b 	ldhu	r5,0(r14)
   29914:	4010d43a 	srli	r8,r8,16
   29918:	193fffcc 	andi	r4,r3,65535
   2991c:	2fcb383a 	mul	r5,r5,ra
   29920:	7bc00104 	addi	r15,r15,4
   29924:	73800104 	addi	r14,r14,4
   29928:	2a0b883a 	add	r5,r5,r8
   2992c:	29cb883a 	add	r5,r5,r7
   29930:	2806943a 	slli	r3,r5,16
   29934:	94400104 	addi	r17,r18,4
   29938:	280ad43a 	srli	r5,r5,16
   2993c:	1908b03a 	or	r4,r3,r4
   29940:	793fff15 	stw	r4,-4(r15)
   29944:	70ffff17 	ldw	r3,-4(r14)
   29948:	8a000017 	ldw	r8,0(r17)
   2994c:	1806d43a 	srli	r3,r3,16
   29950:	413fffcc 	andi	r4,r8,65535
   29954:	1fc7383a 	mul	r3,r3,ra
   29958:	1907883a 	add	r3,r3,r4
   2995c:	1947883a 	add	r3,r3,r5
   29960:	180ed43a 	srli	r7,r3,16
   29964:	727fe936 	bltu	r14,r9,2990c <__alt_data_end+0xf802990c>
   29968:	90c00115 	stw	r3,4(r18)
   2996c:	31800104 	addi	r6,r6,4
   29970:	5ac00104 	addi	r11,r11,4
   29974:	333fbe36 	bltu	r6,r12,29870 <__alt_data_end+0xf8029870>
   29978:	0400090e 	bge	zero,r16,299a0 <__multiply+0x1d4>
   2997c:	50ffff17 	ldw	r3,-4(r10)
   29980:	52bfff04 	addi	r10,r10,-4
   29984:	18000326 	beq	r3,zero,29994 <__multiply+0x1c8>
   29988:	00000506 	br	299a0 <__multiply+0x1d4>
   2998c:	50c00017 	ldw	r3,0(r10)
   29990:	1800031e 	bne	r3,zero,299a0 <__multiply+0x1d4>
   29994:	843fffc4 	addi	r16,r16,-1
   29998:	52bfff04 	addi	r10,r10,-4
   2999c:	803ffb1e 	bne	r16,zero,2998c <__alt_data_end+0xf802998c>
   299a0:	14000415 	stw	r16,16(r2)
   299a4:	dfc00517 	ldw	ra,20(sp)
   299a8:	dd000417 	ldw	r20,16(sp)
   299ac:	dcc00317 	ldw	r19,12(sp)
   299b0:	dc800217 	ldw	r18,8(sp)
   299b4:	dc400117 	ldw	r17,4(sp)
   299b8:	dc000017 	ldw	r16,0(sp)
   299bc:	dec00604 	addi	sp,sp,24
   299c0:	f800283a 	ret

000299c4 <__pow5mult>:
   299c4:	defffa04 	addi	sp,sp,-24
   299c8:	dcc00315 	stw	r19,12(sp)
   299cc:	dc000015 	stw	r16,0(sp)
   299d0:	dfc00515 	stw	ra,20(sp)
   299d4:	dd000415 	stw	r20,16(sp)
   299d8:	dc800215 	stw	r18,8(sp)
   299dc:	dc400115 	stw	r17,4(sp)
   299e0:	308000cc 	andi	r2,r6,3
   299e4:	3021883a 	mov	r16,r6
   299e8:	2027883a 	mov	r19,r4
   299ec:	10002f1e 	bne	r2,zero,29aac <__pow5mult+0xe8>
   299f0:	2825883a 	mov	r18,r5
   299f4:	8021d0ba 	srai	r16,r16,2
   299f8:	80001a26 	beq	r16,zero,29a64 <__pow5mult+0xa0>
   299fc:	9c401217 	ldw	r17,72(r19)
   29a00:	8800061e 	bne	r17,zero,29a1c <__pow5mult+0x58>
   29a04:	00003406 	br	29ad8 <__pow5mult+0x114>
   29a08:	8021d07a 	srai	r16,r16,1
   29a0c:	80001526 	beq	r16,zero,29a64 <__pow5mult+0xa0>
   29a10:	88800017 	ldw	r2,0(r17)
   29a14:	10001c26 	beq	r2,zero,29a88 <__pow5mult+0xc4>
   29a18:	1023883a 	mov	r17,r2
   29a1c:	8080004c 	andi	r2,r16,1
   29a20:	103ff926 	beq	r2,zero,29a08 <__alt_data_end+0xf8029a08>
   29a24:	880d883a 	mov	r6,r17
   29a28:	900b883a 	mov	r5,r18
   29a2c:	9809883a 	mov	r4,r19
   29a30:	00297cc0 	call	297cc <__multiply>
   29a34:	90001b26 	beq	r18,zero,29aa4 <__pow5mult+0xe0>
   29a38:	91000117 	ldw	r4,4(r18)
   29a3c:	98c01317 	ldw	r3,76(r19)
   29a40:	8021d07a 	srai	r16,r16,1
   29a44:	2109883a 	add	r4,r4,r4
   29a48:	2109883a 	add	r4,r4,r4
   29a4c:	1907883a 	add	r3,r3,r4
   29a50:	19000017 	ldw	r4,0(r3)
   29a54:	91000015 	stw	r4,0(r18)
   29a58:	1c800015 	stw	r18,0(r3)
   29a5c:	1025883a 	mov	r18,r2
   29a60:	803feb1e 	bne	r16,zero,29a10 <__alt_data_end+0xf8029a10>
   29a64:	9005883a 	mov	r2,r18
   29a68:	dfc00517 	ldw	ra,20(sp)
   29a6c:	dd000417 	ldw	r20,16(sp)
   29a70:	dcc00317 	ldw	r19,12(sp)
   29a74:	dc800217 	ldw	r18,8(sp)
   29a78:	dc400117 	ldw	r17,4(sp)
   29a7c:	dc000017 	ldw	r16,0(sp)
   29a80:	dec00604 	addi	sp,sp,24
   29a84:	f800283a 	ret
   29a88:	880d883a 	mov	r6,r17
   29a8c:	880b883a 	mov	r5,r17
   29a90:	9809883a 	mov	r4,r19
   29a94:	00297cc0 	call	297cc <__multiply>
   29a98:	88800015 	stw	r2,0(r17)
   29a9c:	10000015 	stw	zero,0(r2)
   29aa0:	003fdd06 	br	29a18 <__alt_data_end+0xf8029a18>
   29aa4:	1025883a 	mov	r18,r2
   29aa8:	003fd706 	br	29a08 <__alt_data_end+0xf8029a08>
   29aac:	10bfffc4 	addi	r2,r2,-1
   29ab0:	1085883a 	add	r2,r2,r2
   29ab4:	00c10034 	movhi	r3,1024
   29ab8:	18c04c04 	addi	r3,r3,304
   29abc:	1085883a 	add	r2,r2,r2
   29ac0:	1885883a 	add	r2,r3,r2
   29ac4:	11800017 	ldw	r6,0(r2)
   29ac8:	000f883a 	mov	r7,zero
   29acc:	00294540 	call	29454 <__multadd>
   29ad0:	1025883a 	mov	r18,r2
   29ad4:	003fc706 	br	299f4 <__alt_data_end+0xf80299f4>
   29ad8:	05000044 	movi	r20,1
   29adc:	a00b883a 	mov	r5,r20
   29ae0:	9809883a 	mov	r4,r19
   29ae4:	00293840 	call	29384 <_Balloc>
   29ae8:	1023883a 	mov	r17,r2
   29aec:	00809c44 	movi	r2,625
   29af0:	88800515 	stw	r2,20(r17)
   29af4:	8d000415 	stw	r20,16(r17)
   29af8:	9c401215 	stw	r17,72(r19)
   29afc:	88000015 	stw	zero,0(r17)
   29b00:	003fc606 	br	29a1c <__alt_data_end+0xf8029a1c>

00029b04 <__lshift>:
   29b04:	defff904 	addi	sp,sp,-28
   29b08:	dd400515 	stw	r21,20(sp)
   29b0c:	dcc00315 	stw	r19,12(sp)
   29b10:	302bd17a 	srai	r21,r6,5
   29b14:	2cc00417 	ldw	r19,16(r5)
   29b18:	28800217 	ldw	r2,8(r5)
   29b1c:	dd000415 	stw	r20,16(sp)
   29b20:	ace7883a 	add	r19,r21,r19
   29b24:	dc800215 	stw	r18,8(sp)
   29b28:	dc400115 	stw	r17,4(sp)
   29b2c:	dc000015 	stw	r16,0(sp)
   29b30:	dfc00615 	stw	ra,24(sp)
   29b34:	9c000044 	addi	r16,r19,1
   29b38:	2823883a 	mov	r17,r5
   29b3c:	3029883a 	mov	r20,r6
   29b40:	2025883a 	mov	r18,r4
   29b44:	29400117 	ldw	r5,4(r5)
   29b48:	1400030e 	bge	r2,r16,29b58 <__lshift+0x54>
   29b4c:	1085883a 	add	r2,r2,r2
   29b50:	29400044 	addi	r5,r5,1
   29b54:	143ffd16 	blt	r2,r16,29b4c <__alt_data_end+0xf8029b4c>
   29b58:	9009883a 	mov	r4,r18
   29b5c:	00293840 	call	29384 <_Balloc>
   29b60:	10c00504 	addi	r3,r2,20
   29b64:	0540070e 	bge	zero,r21,29b84 <__lshift+0x80>
   29b68:	ad6b883a 	add	r21,r21,r21
   29b6c:	ad6b883a 	add	r21,r21,r21
   29b70:	1809883a 	mov	r4,r3
   29b74:	1d47883a 	add	r3,r3,r21
   29b78:	20000015 	stw	zero,0(r4)
   29b7c:	21000104 	addi	r4,r4,4
   29b80:	193ffd1e 	bne	r3,r4,29b78 <__alt_data_end+0xf8029b78>
   29b84:	8a000417 	ldw	r8,16(r17)
   29b88:	89000504 	addi	r4,r17,20
   29b8c:	a18007cc 	andi	r6,r20,31
   29b90:	4211883a 	add	r8,r8,r8
   29b94:	4211883a 	add	r8,r8,r8
   29b98:	2211883a 	add	r8,r4,r8
   29b9c:	30002326 	beq	r6,zero,29c2c <__lshift+0x128>
   29ba0:	02400804 	movi	r9,32
   29ba4:	4993c83a 	sub	r9,r9,r6
   29ba8:	000b883a 	mov	r5,zero
   29bac:	21c00017 	ldw	r7,0(r4)
   29bb0:	1815883a 	mov	r10,r3
   29bb4:	18c00104 	addi	r3,r3,4
   29bb8:	398e983a 	sll	r7,r7,r6
   29bbc:	21000104 	addi	r4,r4,4
   29bc0:	394ab03a 	or	r5,r7,r5
   29bc4:	197fff15 	stw	r5,-4(r3)
   29bc8:	217fff17 	ldw	r5,-4(r4)
   29bcc:	2a4ad83a 	srl	r5,r5,r9
   29bd0:	223ff636 	bltu	r4,r8,29bac <__alt_data_end+0xf8029bac>
   29bd4:	51400115 	stw	r5,4(r10)
   29bd8:	28001a1e 	bne	r5,zero,29c44 <__lshift+0x140>
   29bdc:	843fffc4 	addi	r16,r16,-1
   29be0:	14000415 	stw	r16,16(r2)
   29be4:	88000826 	beq	r17,zero,29c08 <__lshift+0x104>
   29be8:	89000117 	ldw	r4,4(r17)
   29bec:	90c01317 	ldw	r3,76(r18)
   29bf0:	2109883a 	add	r4,r4,r4
   29bf4:	2109883a 	add	r4,r4,r4
   29bf8:	1907883a 	add	r3,r3,r4
   29bfc:	19000017 	ldw	r4,0(r3)
   29c00:	89000015 	stw	r4,0(r17)
   29c04:	1c400015 	stw	r17,0(r3)
   29c08:	dfc00617 	ldw	ra,24(sp)
   29c0c:	dd400517 	ldw	r21,20(sp)
   29c10:	dd000417 	ldw	r20,16(sp)
   29c14:	dcc00317 	ldw	r19,12(sp)
   29c18:	dc800217 	ldw	r18,8(sp)
   29c1c:	dc400117 	ldw	r17,4(sp)
   29c20:	dc000017 	ldw	r16,0(sp)
   29c24:	dec00704 	addi	sp,sp,28
   29c28:	f800283a 	ret
   29c2c:	21400017 	ldw	r5,0(r4)
   29c30:	18c00104 	addi	r3,r3,4
   29c34:	21000104 	addi	r4,r4,4
   29c38:	197fff15 	stw	r5,-4(r3)
   29c3c:	223ffb36 	bltu	r4,r8,29c2c <__alt_data_end+0xf8029c2c>
   29c40:	003fe606 	br	29bdc <__alt_data_end+0xf8029bdc>
   29c44:	9c000084 	addi	r16,r19,2
   29c48:	003fe406 	br	29bdc <__alt_data_end+0xf8029bdc>

00029c4c <__mcmp>:
   29c4c:	20800417 	ldw	r2,16(r4)
   29c50:	28c00417 	ldw	r3,16(r5)
   29c54:	10c5c83a 	sub	r2,r2,r3
   29c58:	1000111e 	bne	r2,zero,29ca0 <__mcmp+0x54>
   29c5c:	18c7883a 	add	r3,r3,r3
   29c60:	18c7883a 	add	r3,r3,r3
   29c64:	21000504 	addi	r4,r4,20
   29c68:	29400504 	addi	r5,r5,20
   29c6c:	20c5883a 	add	r2,r4,r3
   29c70:	28cb883a 	add	r5,r5,r3
   29c74:	00000106 	br	29c7c <__mcmp+0x30>
   29c78:	20800a2e 	bgeu	r4,r2,29ca4 <__mcmp+0x58>
   29c7c:	10bfff04 	addi	r2,r2,-4
   29c80:	297fff04 	addi	r5,r5,-4
   29c84:	11800017 	ldw	r6,0(r2)
   29c88:	28c00017 	ldw	r3,0(r5)
   29c8c:	30fffa26 	beq	r6,r3,29c78 <__alt_data_end+0xf8029c78>
   29c90:	30c00236 	bltu	r6,r3,29c9c <__mcmp+0x50>
   29c94:	00800044 	movi	r2,1
   29c98:	f800283a 	ret
   29c9c:	00bfffc4 	movi	r2,-1
   29ca0:	f800283a 	ret
   29ca4:	0005883a 	mov	r2,zero
   29ca8:	f800283a 	ret

00029cac <__mdiff>:
   29cac:	28c00417 	ldw	r3,16(r5)
   29cb0:	30800417 	ldw	r2,16(r6)
   29cb4:	defffa04 	addi	sp,sp,-24
   29cb8:	dcc00315 	stw	r19,12(sp)
   29cbc:	dc800215 	stw	r18,8(sp)
   29cc0:	dfc00515 	stw	ra,20(sp)
   29cc4:	dd000415 	stw	r20,16(sp)
   29cc8:	dc400115 	stw	r17,4(sp)
   29ccc:	dc000015 	stw	r16,0(sp)
   29cd0:	1887c83a 	sub	r3,r3,r2
   29cd4:	2825883a 	mov	r18,r5
   29cd8:	3027883a 	mov	r19,r6
   29cdc:	1800141e 	bne	r3,zero,29d30 <__mdiff+0x84>
   29ce0:	1085883a 	add	r2,r2,r2
   29ce4:	1085883a 	add	r2,r2,r2
   29ce8:	2a000504 	addi	r8,r5,20
   29cec:	34000504 	addi	r16,r6,20
   29cf0:	4087883a 	add	r3,r8,r2
   29cf4:	8085883a 	add	r2,r16,r2
   29cf8:	00000106 	br	29d00 <__mdiff+0x54>
   29cfc:	40c0592e 	bgeu	r8,r3,29e64 <__mdiff+0x1b8>
   29d00:	18ffff04 	addi	r3,r3,-4
   29d04:	10bfff04 	addi	r2,r2,-4
   29d08:	19c00017 	ldw	r7,0(r3)
   29d0c:	11400017 	ldw	r5,0(r2)
   29d10:	397ffa26 	beq	r7,r5,29cfc <__alt_data_end+0xf8029cfc>
   29d14:	3940592e 	bgeu	r7,r5,29e7c <__mdiff+0x1d0>
   29d18:	9005883a 	mov	r2,r18
   29d1c:	4023883a 	mov	r17,r8
   29d20:	9825883a 	mov	r18,r19
   29d24:	05000044 	movi	r20,1
   29d28:	1027883a 	mov	r19,r2
   29d2c:	00000406 	br	29d40 <__mdiff+0x94>
   29d30:	18005616 	blt	r3,zero,29e8c <__mdiff+0x1e0>
   29d34:	34400504 	addi	r17,r6,20
   29d38:	2c000504 	addi	r16,r5,20
   29d3c:	0029883a 	mov	r20,zero
   29d40:	91400117 	ldw	r5,4(r18)
   29d44:	00293840 	call	29384 <_Balloc>
   29d48:	92400417 	ldw	r9,16(r18)
   29d4c:	9b000417 	ldw	r12,16(r19)
   29d50:	12c00504 	addi	r11,r2,20
   29d54:	4a51883a 	add	r8,r9,r9
   29d58:	6319883a 	add	r12,r12,r12
   29d5c:	4211883a 	add	r8,r8,r8
   29d60:	6319883a 	add	r12,r12,r12
   29d64:	15000315 	stw	r20,12(r2)
   29d68:	8211883a 	add	r8,r16,r8
   29d6c:	8b19883a 	add	r12,r17,r12
   29d70:	0007883a 	mov	r3,zero
   29d74:	81400017 	ldw	r5,0(r16)
   29d78:	89c00017 	ldw	r7,0(r17)
   29d7c:	59800104 	addi	r6,r11,4
   29d80:	293fffcc 	andi	r4,r5,65535
   29d84:	20c7883a 	add	r3,r4,r3
   29d88:	393fffcc 	andi	r4,r7,65535
   29d8c:	1909c83a 	sub	r4,r3,r4
   29d90:	280ad43a 	srli	r5,r5,16
   29d94:	380ed43a 	srli	r7,r7,16
   29d98:	2007d43a 	srai	r3,r4,16
   29d9c:	213fffcc 	andi	r4,r4,65535
   29da0:	29cbc83a 	sub	r5,r5,r7
   29da4:	28c7883a 	add	r3,r5,r3
   29da8:	180a943a 	slli	r5,r3,16
   29dac:	8c400104 	addi	r17,r17,4
   29db0:	84000104 	addi	r16,r16,4
   29db4:	2908b03a 	or	r4,r5,r4
   29db8:	59000015 	stw	r4,0(r11)
   29dbc:	1807d43a 	srai	r3,r3,16
   29dc0:	3015883a 	mov	r10,r6
   29dc4:	3017883a 	mov	r11,r6
   29dc8:	8b3fea36 	bltu	r17,r12,29d74 <__alt_data_end+0xf8029d74>
   29dcc:	8200162e 	bgeu	r16,r8,29e28 <__mdiff+0x17c>
   29dd0:	8017883a 	mov	r11,r16
   29dd4:	59400017 	ldw	r5,0(r11)
   29dd8:	31800104 	addi	r6,r6,4
   29ddc:	5ac00104 	addi	r11,r11,4
   29de0:	293fffcc 	andi	r4,r5,65535
   29de4:	20c7883a 	add	r3,r4,r3
   29de8:	280ed43a 	srli	r7,r5,16
   29dec:	180bd43a 	srai	r5,r3,16
   29df0:	193fffcc 	andi	r4,r3,65535
   29df4:	3947883a 	add	r3,r7,r5
   29df8:	180a943a 	slli	r5,r3,16
   29dfc:	1807d43a 	srai	r3,r3,16
   29e00:	2908b03a 	or	r4,r5,r4
   29e04:	313fff15 	stw	r4,-4(r6)
   29e08:	5a3ff236 	bltu	r11,r8,29dd4 <__alt_data_end+0xf8029dd4>
   29e0c:	0406303a 	nor	r3,zero,r16
   29e10:	1a07883a 	add	r3,r3,r8
   29e14:	1806d0ba 	srli	r3,r3,2
   29e18:	18c00044 	addi	r3,r3,1
   29e1c:	18c7883a 	add	r3,r3,r3
   29e20:	18c7883a 	add	r3,r3,r3
   29e24:	50d5883a 	add	r10,r10,r3
   29e28:	50ffff04 	addi	r3,r10,-4
   29e2c:	2000041e 	bne	r4,zero,29e40 <__mdiff+0x194>
   29e30:	18ffff04 	addi	r3,r3,-4
   29e34:	19000017 	ldw	r4,0(r3)
   29e38:	4a7fffc4 	addi	r9,r9,-1
   29e3c:	203ffc26 	beq	r4,zero,29e30 <__alt_data_end+0xf8029e30>
   29e40:	12400415 	stw	r9,16(r2)
   29e44:	dfc00517 	ldw	ra,20(sp)
   29e48:	dd000417 	ldw	r20,16(sp)
   29e4c:	dcc00317 	ldw	r19,12(sp)
   29e50:	dc800217 	ldw	r18,8(sp)
   29e54:	dc400117 	ldw	r17,4(sp)
   29e58:	dc000017 	ldw	r16,0(sp)
   29e5c:	dec00604 	addi	sp,sp,24
   29e60:	f800283a 	ret
   29e64:	000b883a 	mov	r5,zero
   29e68:	00293840 	call	29384 <_Balloc>
   29e6c:	00c00044 	movi	r3,1
   29e70:	10c00415 	stw	r3,16(r2)
   29e74:	10000515 	stw	zero,20(r2)
   29e78:	003ff206 	br	29e44 <__alt_data_end+0xf8029e44>
   29e7c:	8023883a 	mov	r17,r16
   29e80:	0029883a 	mov	r20,zero
   29e84:	4021883a 	mov	r16,r8
   29e88:	003fad06 	br	29d40 <__alt_data_end+0xf8029d40>
   29e8c:	9005883a 	mov	r2,r18
   29e90:	94400504 	addi	r17,r18,20
   29e94:	9c000504 	addi	r16,r19,20
   29e98:	9825883a 	mov	r18,r19
   29e9c:	05000044 	movi	r20,1
   29ea0:	1027883a 	mov	r19,r2
   29ea4:	003fa606 	br	29d40 <__alt_data_end+0xf8029d40>

00029ea8 <__ulp>:
   29ea8:	295ffc2c 	andhi	r5,r5,32752
   29eac:	00bf3034 	movhi	r2,64704
   29eb0:	2887883a 	add	r3,r5,r2
   29eb4:	00c0020e 	bge	zero,r3,29ec0 <__ulp+0x18>
   29eb8:	0005883a 	mov	r2,zero
   29ebc:	f800283a 	ret
   29ec0:	00c7c83a 	sub	r3,zero,r3
   29ec4:	1807d53a 	srai	r3,r3,20
   29ec8:	008004c4 	movi	r2,19
   29ecc:	10c00b0e 	bge	r2,r3,29efc <__ulp+0x54>
   29ed0:	18bffb04 	addi	r2,r3,-20
   29ed4:	01000784 	movi	r4,30
   29ed8:	0007883a 	mov	r3,zero
   29edc:	20800516 	blt	r4,r2,29ef4 <__ulp+0x4c>
   29ee0:	010007c4 	movi	r4,31
   29ee4:	2089c83a 	sub	r4,r4,r2
   29ee8:	00800044 	movi	r2,1
   29eec:	1104983a 	sll	r2,r2,r4
   29ef0:	f800283a 	ret
   29ef4:	00800044 	movi	r2,1
   29ef8:	f800283a 	ret
   29efc:	01400234 	movhi	r5,8
   29f00:	28c7d83a 	sra	r3,r5,r3
   29f04:	0005883a 	mov	r2,zero
   29f08:	f800283a 	ret

00029f0c <__b2d>:
   29f0c:	defffa04 	addi	sp,sp,-24
   29f10:	dc000015 	stw	r16,0(sp)
   29f14:	24000417 	ldw	r16,16(r4)
   29f18:	dc400115 	stw	r17,4(sp)
   29f1c:	24400504 	addi	r17,r4,20
   29f20:	8421883a 	add	r16,r16,r16
   29f24:	8421883a 	add	r16,r16,r16
   29f28:	8c21883a 	add	r16,r17,r16
   29f2c:	dc800215 	stw	r18,8(sp)
   29f30:	84bfff17 	ldw	r18,-4(r16)
   29f34:	dd000415 	stw	r20,16(sp)
   29f38:	dcc00315 	stw	r19,12(sp)
   29f3c:	9009883a 	mov	r4,r18
   29f40:	2829883a 	mov	r20,r5
   29f44:	dfc00515 	stw	ra,20(sp)
   29f48:	00296780 	call	29678 <__hi0bits>
   29f4c:	00c00804 	movi	r3,32
   29f50:	1889c83a 	sub	r4,r3,r2
   29f54:	a1000015 	stw	r4,0(r20)
   29f58:	01000284 	movi	r4,10
   29f5c:	84ffff04 	addi	r19,r16,-4
   29f60:	20801216 	blt	r4,r2,29fac <__b2d+0xa0>
   29f64:	018002c4 	movi	r6,11
   29f68:	308dc83a 	sub	r6,r6,r2
   29f6c:	9186d83a 	srl	r3,r18,r6
   29f70:	18cffc34 	orhi	r3,r3,16368
   29f74:	8cc0212e 	bgeu	r17,r19,29ffc <__b2d+0xf0>
   29f78:	813ffe17 	ldw	r4,-8(r16)
   29f7c:	218cd83a 	srl	r6,r4,r6
   29f80:	10800544 	addi	r2,r2,21
   29f84:	9084983a 	sll	r2,r18,r2
   29f88:	1184b03a 	or	r2,r2,r6
   29f8c:	dfc00517 	ldw	ra,20(sp)
   29f90:	dd000417 	ldw	r20,16(sp)
   29f94:	dcc00317 	ldw	r19,12(sp)
   29f98:	dc800217 	ldw	r18,8(sp)
   29f9c:	dc400117 	ldw	r17,4(sp)
   29fa0:	dc000017 	ldw	r16,0(sp)
   29fa4:	dec00604 	addi	sp,sp,24
   29fa8:	f800283a 	ret
   29fac:	8cc00f2e 	bgeu	r17,r19,29fec <__b2d+0xe0>
   29fb0:	117ffd44 	addi	r5,r2,-11
   29fb4:	80bffe17 	ldw	r2,-8(r16)
   29fb8:	28000e26 	beq	r5,zero,29ff4 <__b2d+0xe8>
   29fbc:	1949c83a 	sub	r4,r3,r5
   29fc0:	9164983a 	sll	r18,r18,r5
   29fc4:	1106d83a 	srl	r3,r2,r4
   29fc8:	81bffe04 	addi	r6,r16,-8
   29fcc:	948ffc34 	orhi	r18,r18,16368
   29fd0:	90c6b03a 	or	r3,r18,r3
   29fd4:	89800e2e 	bgeu	r17,r6,2a010 <__b2d+0x104>
   29fd8:	81bffd17 	ldw	r6,-12(r16)
   29fdc:	1144983a 	sll	r2,r2,r5
   29fe0:	310ad83a 	srl	r5,r6,r4
   29fe4:	2884b03a 	or	r2,r5,r2
   29fe8:	003fe806 	br	29f8c <__alt_data_end+0xf8029f8c>
   29fec:	10bffd44 	addi	r2,r2,-11
   29ff0:	1000041e 	bne	r2,zero,2a004 <__b2d+0xf8>
   29ff4:	90cffc34 	orhi	r3,r18,16368
   29ff8:	003fe406 	br	29f8c <__alt_data_end+0xf8029f8c>
   29ffc:	000d883a 	mov	r6,zero
   2a000:	003fdf06 	br	29f80 <__alt_data_end+0xf8029f80>
   2a004:	90a4983a 	sll	r18,r18,r2
   2a008:	0005883a 	mov	r2,zero
   2a00c:	003ff906 	br	29ff4 <__alt_data_end+0xf8029ff4>
   2a010:	1144983a 	sll	r2,r2,r5
   2a014:	003fdd06 	br	29f8c <__alt_data_end+0xf8029f8c>

0002a018 <__d2b>:
   2a018:	defff804 	addi	sp,sp,-32
   2a01c:	dc000215 	stw	r16,8(sp)
   2a020:	3021883a 	mov	r16,r6
   2a024:	dc400315 	stw	r17,12(sp)
   2a028:	8022907a 	slli	r17,r16,1
   2a02c:	dd000615 	stw	r20,24(sp)
   2a030:	2829883a 	mov	r20,r5
   2a034:	01400044 	movi	r5,1
   2a038:	dcc00515 	stw	r19,20(sp)
   2a03c:	dc800415 	stw	r18,16(sp)
   2a040:	dfc00715 	stw	ra,28(sp)
   2a044:	3825883a 	mov	r18,r7
   2a048:	8822d57a 	srli	r17,r17,21
   2a04c:	00293840 	call	29384 <_Balloc>
   2a050:	1027883a 	mov	r19,r2
   2a054:	00800434 	movhi	r2,16
   2a058:	10bfffc4 	addi	r2,r2,-1
   2a05c:	808c703a 	and	r6,r16,r2
   2a060:	88000126 	beq	r17,zero,2a068 <__d2b+0x50>
   2a064:	31800434 	orhi	r6,r6,16
   2a068:	d9800015 	stw	r6,0(sp)
   2a06c:	a0002426 	beq	r20,zero,2a100 <__d2b+0xe8>
   2a070:	d9000104 	addi	r4,sp,4
   2a074:	dd000115 	stw	r20,4(sp)
   2a078:	00296e00 	call	296e0 <__lo0bits>
   2a07c:	d8c00017 	ldw	r3,0(sp)
   2a080:	10002f1e 	bne	r2,zero,2a140 <__d2b+0x128>
   2a084:	d9000117 	ldw	r4,4(sp)
   2a088:	99000515 	stw	r4,20(r19)
   2a08c:	1821003a 	cmpeq	r16,r3,zero
   2a090:	01000084 	movi	r4,2
   2a094:	2421c83a 	sub	r16,r4,r16
   2a098:	98c00615 	stw	r3,24(r19)
   2a09c:	9c000415 	stw	r16,16(r19)
   2a0a0:	88001f1e 	bne	r17,zero,2a120 <__d2b+0x108>
   2a0a4:	10bef384 	addi	r2,r2,-1074
   2a0a8:	90800015 	stw	r2,0(r18)
   2a0ac:	00900034 	movhi	r2,16384
   2a0b0:	10bfffc4 	addi	r2,r2,-1
   2a0b4:	8085883a 	add	r2,r16,r2
   2a0b8:	1085883a 	add	r2,r2,r2
   2a0bc:	1085883a 	add	r2,r2,r2
   2a0c0:	9885883a 	add	r2,r19,r2
   2a0c4:	11000517 	ldw	r4,20(r2)
   2a0c8:	8020917a 	slli	r16,r16,5
   2a0cc:	00296780 	call	29678 <__hi0bits>
   2a0d0:	d8c00817 	ldw	r3,32(sp)
   2a0d4:	8085c83a 	sub	r2,r16,r2
   2a0d8:	18800015 	stw	r2,0(r3)
   2a0dc:	9805883a 	mov	r2,r19
   2a0e0:	dfc00717 	ldw	ra,28(sp)
   2a0e4:	dd000617 	ldw	r20,24(sp)
   2a0e8:	dcc00517 	ldw	r19,20(sp)
   2a0ec:	dc800417 	ldw	r18,16(sp)
   2a0f0:	dc400317 	ldw	r17,12(sp)
   2a0f4:	dc000217 	ldw	r16,8(sp)
   2a0f8:	dec00804 	addi	sp,sp,32
   2a0fc:	f800283a 	ret
   2a100:	d809883a 	mov	r4,sp
   2a104:	00296e00 	call	296e0 <__lo0bits>
   2a108:	d8c00017 	ldw	r3,0(sp)
   2a10c:	04000044 	movi	r16,1
   2a110:	9c000415 	stw	r16,16(r19)
   2a114:	98c00515 	stw	r3,20(r19)
   2a118:	10800804 	addi	r2,r2,32
   2a11c:	883fe126 	beq	r17,zero,2a0a4 <__alt_data_end+0xf802a0a4>
   2a120:	00c00d44 	movi	r3,53
   2a124:	8c7ef344 	addi	r17,r17,-1075
   2a128:	88a3883a 	add	r17,r17,r2
   2a12c:	1885c83a 	sub	r2,r3,r2
   2a130:	d8c00817 	ldw	r3,32(sp)
   2a134:	94400015 	stw	r17,0(r18)
   2a138:	18800015 	stw	r2,0(r3)
   2a13c:	003fe706 	br	2a0dc <__alt_data_end+0xf802a0dc>
   2a140:	01000804 	movi	r4,32
   2a144:	2089c83a 	sub	r4,r4,r2
   2a148:	1908983a 	sll	r4,r3,r4
   2a14c:	d9400117 	ldw	r5,4(sp)
   2a150:	1886d83a 	srl	r3,r3,r2
   2a154:	2148b03a 	or	r4,r4,r5
   2a158:	99000515 	stw	r4,20(r19)
   2a15c:	d8c00015 	stw	r3,0(sp)
   2a160:	003fca06 	br	2a08c <__alt_data_end+0xf802a08c>

0002a164 <__ratio>:
   2a164:	defff904 	addi	sp,sp,-28
   2a168:	dc400315 	stw	r17,12(sp)
   2a16c:	2823883a 	mov	r17,r5
   2a170:	d9400104 	addi	r5,sp,4
   2a174:	dfc00615 	stw	ra,24(sp)
   2a178:	dcc00515 	stw	r19,20(sp)
   2a17c:	dc800415 	stw	r18,16(sp)
   2a180:	2027883a 	mov	r19,r4
   2a184:	dc000215 	stw	r16,8(sp)
   2a188:	0029f0c0 	call	29f0c <__b2d>
   2a18c:	d80b883a 	mov	r5,sp
   2a190:	8809883a 	mov	r4,r17
   2a194:	1025883a 	mov	r18,r2
   2a198:	1821883a 	mov	r16,r3
   2a19c:	0029f0c0 	call	29f0c <__b2d>
   2a1a0:	8a000417 	ldw	r8,16(r17)
   2a1a4:	99000417 	ldw	r4,16(r19)
   2a1a8:	d9400117 	ldw	r5,4(sp)
   2a1ac:	2209c83a 	sub	r4,r4,r8
   2a1b0:	2010917a 	slli	r8,r4,5
   2a1b4:	d9000017 	ldw	r4,0(sp)
   2a1b8:	2909c83a 	sub	r4,r5,r4
   2a1bc:	4109883a 	add	r4,r8,r4
   2a1c0:	01000e0e 	bge	zero,r4,2a1fc <__ratio+0x98>
   2a1c4:	2008953a 	slli	r4,r4,20
   2a1c8:	2421883a 	add	r16,r4,r16
   2a1cc:	100d883a 	mov	r6,r2
   2a1d0:	180f883a 	mov	r7,r3
   2a1d4:	9009883a 	mov	r4,r18
   2a1d8:	800b883a 	mov	r5,r16
   2a1dc:	002f1080 	call	2f108 <__divdf3>
   2a1e0:	dfc00617 	ldw	ra,24(sp)
   2a1e4:	dcc00517 	ldw	r19,20(sp)
   2a1e8:	dc800417 	ldw	r18,16(sp)
   2a1ec:	dc400317 	ldw	r17,12(sp)
   2a1f0:	dc000217 	ldw	r16,8(sp)
   2a1f4:	dec00704 	addi	sp,sp,28
   2a1f8:	f800283a 	ret
   2a1fc:	2008953a 	slli	r4,r4,20
   2a200:	1907c83a 	sub	r3,r3,r4
   2a204:	003ff106 	br	2a1cc <__alt_data_end+0xf802a1cc>

0002a208 <_mprec_log10>:
   2a208:	defffe04 	addi	sp,sp,-8
   2a20c:	dc000015 	stw	r16,0(sp)
   2a210:	dfc00115 	stw	ra,4(sp)
   2a214:	008005c4 	movi	r2,23
   2a218:	2021883a 	mov	r16,r4
   2a21c:	11000d0e 	bge	r2,r4,2a254 <_mprec_log10+0x4c>
   2a220:	0005883a 	mov	r2,zero
   2a224:	00cffc34 	movhi	r3,16368
   2a228:	843fffc4 	addi	r16,r16,-1
   2a22c:	000d883a 	mov	r6,zero
   2a230:	01d00934 	movhi	r7,16420
   2a234:	1009883a 	mov	r4,r2
   2a238:	180b883a 	mov	r5,r3
   2a23c:	002fc480 	call	2fc48 <__muldf3>
   2a240:	803ff91e 	bne	r16,zero,2a228 <__alt_data_end+0xf802a228>
   2a244:	dfc00117 	ldw	ra,4(sp)
   2a248:	dc000017 	ldw	r16,0(sp)
   2a24c:	dec00204 	addi	sp,sp,8
   2a250:	f800283a 	ret
   2a254:	202090fa 	slli	r16,r4,3
   2a258:	00810034 	movhi	r2,1024
   2a25c:	10806304 	addi	r2,r2,396
   2a260:	1421883a 	add	r16,r2,r16
   2a264:	80800017 	ldw	r2,0(r16)
   2a268:	80c00117 	ldw	r3,4(r16)
   2a26c:	dfc00117 	ldw	ra,4(sp)
   2a270:	dc000017 	ldw	r16,0(sp)
   2a274:	dec00204 	addi	sp,sp,8
   2a278:	f800283a 	ret

0002a27c <__copybits>:
   2a27c:	297fffc4 	addi	r5,r5,-1
   2a280:	280fd17a 	srai	r7,r5,5
   2a284:	30c00417 	ldw	r3,16(r6)
   2a288:	30800504 	addi	r2,r6,20
   2a28c:	39c00044 	addi	r7,r7,1
   2a290:	18c7883a 	add	r3,r3,r3
   2a294:	39cf883a 	add	r7,r7,r7
   2a298:	18c7883a 	add	r3,r3,r3
   2a29c:	39cf883a 	add	r7,r7,r7
   2a2a0:	10c7883a 	add	r3,r2,r3
   2a2a4:	21cf883a 	add	r7,r4,r7
   2a2a8:	10c00d2e 	bgeu	r2,r3,2a2e0 <__copybits+0x64>
   2a2ac:	200b883a 	mov	r5,r4
   2a2b0:	12000017 	ldw	r8,0(r2)
   2a2b4:	29400104 	addi	r5,r5,4
   2a2b8:	10800104 	addi	r2,r2,4
   2a2bc:	2a3fff15 	stw	r8,-4(r5)
   2a2c0:	10fffb36 	bltu	r2,r3,2a2b0 <__alt_data_end+0xf802a2b0>
   2a2c4:	1985c83a 	sub	r2,r3,r6
   2a2c8:	10bffac4 	addi	r2,r2,-21
   2a2cc:	1004d0ba 	srli	r2,r2,2
   2a2d0:	10800044 	addi	r2,r2,1
   2a2d4:	1085883a 	add	r2,r2,r2
   2a2d8:	1085883a 	add	r2,r2,r2
   2a2dc:	2089883a 	add	r4,r4,r2
   2a2e0:	21c0032e 	bgeu	r4,r7,2a2f0 <__copybits+0x74>
   2a2e4:	20000015 	stw	zero,0(r4)
   2a2e8:	21000104 	addi	r4,r4,4
   2a2ec:	21fffd36 	bltu	r4,r7,2a2e4 <__alt_data_end+0xf802a2e4>
   2a2f0:	f800283a 	ret

0002a2f4 <__any_on>:
   2a2f4:	20c00417 	ldw	r3,16(r4)
   2a2f8:	2805d17a 	srai	r2,r5,5
   2a2fc:	21000504 	addi	r4,r4,20
   2a300:	18800d0e 	bge	r3,r2,2a338 <__any_on+0x44>
   2a304:	18c7883a 	add	r3,r3,r3
   2a308:	18c7883a 	add	r3,r3,r3
   2a30c:	20c7883a 	add	r3,r4,r3
   2a310:	20c0192e 	bgeu	r4,r3,2a378 <__any_on+0x84>
   2a314:	18bfff17 	ldw	r2,-4(r3)
   2a318:	18ffff04 	addi	r3,r3,-4
   2a31c:	1000041e 	bne	r2,zero,2a330 <__any_on+0x3c>
   2a320:	20c0142e 	bgeu	r4,r3,2a374 <__any_on+0x80>
   2a324:	18ffff04 	addi	r3,r3,-4
   2a328:	19400017 	ldw	r5,0(r3)
   2a32c:	283ffc26 	beq	r5,zero,2a320 <__alt_data_end+0xf802a320>
   2a330:	00800044 	movi	r2,1
   2a334:	f800283a 	ret
   2a338:	10c00a0e 	bge	r2,r3,2a364 <__any_on+0x70>
   2a33c:	1085883a 	add	r2,r2,r2
   2a340:	1085883a 	add	r2,r2,r2
   2a344:	294007cc 	andi	r5,r5,31
   2a348:	2087883a 	add	r3,r4,r2
   2a34c:	283ff026 	beq	r5,zero,2a310 <__alt_data_end+0xf802a310>
   2a350:	19800017 	ldw	r6,0(r3)
   2a354:	3144d83a 	srl	r2,r6,r5
   2a358:	114a983a 	sll	r5,r2,r5
   2a35c:	317ff41e 	bne	r6,r5,2a330 <__alt_data_end+0xf802a330>
   2a360:	003feb06 	br	2a310 <__alt_data_end+0xf802a310>
   2a364:	1085883a 	add	r2,r2,r2
   2a368:	1085883a 	add	r2,r2,r2
   2a36c:	2087883a 	add	r3,r4,r2
   2a370:	003fe706 	br	2a310 <__alt_data_end+0xf802a310>
   2a374:	f800283a 	ret
   2a378:	0005883a 	mov	r2,zero
   2a37c:	f800283a 	ret

0002a380 <_read_r>:
   2a380:	defffd04 	addi	sp,sp,-12
   2a384:	2805883a 	mov	r2,r5
   2a388:	dc000015 	stw	r16,0(sp)
   2a38c:	04010034 	movhi	r16,1024
   2a390:	dc400115 	stw	r17,4(sp)
   2a394:	300b883a 	mov	r5,r6
   2a398:	8407fa04 	addi	r16,r16,8168
   2a39c:	2023883a 	mov	r17,r4
   2a3a0:	380d883a 	mov	r6,r7
   2a3a4:	1009883a 	mov	r4,r2
   2a3a8:	dfc00215 	stw	ra,8(sp)
   2a3ac:	80000015 	stw	zero,0(r16)
   2a3b0:	00317180 	call	31718 <read>
   2a3b4:	00ffffc4 	movi	r3,-1
   2a3b8:	10c00526 	beq	r2,r3,2a3d0 <_read_r+0x50>
   2a3bc:	dfc00217 	ldw	ra,8(sp)
   2a3c0:	dc400117 	ldw	r17,4(sp)
   2a3c4:	dc000017 	ldw	r16,0(sp)
   2a3c8:	dec00304 	addi	sp,sp,12
   2a3cc:	f800283a 	ret
   2a3d0:	80c00017 	ldw	r3,0(r16)
   2a3d4:	183ff926 	beq	r3,zero,2a3bc <__alt_data_end+0xf802a3bc>
   2a3d8:	88c00015 	stw	r3,0(r17)
   2a3dc:	003ff706 	br	2a3bc <__alt_data_end+0xf802a3bc>

0002a3e0 <_realloc_r>:
   2a3e0:	defff604 	addi	sp,sp,-40
   2a3e4:	dc800215 	stw	r18,8(sp)
   2a3e8:	dfc00915 	stw	ra,36(sp)
   2a3ec:	df000815 	stw	fp,32(sp)
   2a3f0:	ddc00715 	stw	r23,28(sp)
   2a3f4:	dd800615 	stw	r22,24(sp)
   2a3f8:	dd400515 	stw	r21,20(sp)
   2a3fc:	dd000415 	stw	r20,16(sp)
   2a400:	dcc00315 	stw	r19,12(sp)
   2a404:	dc400115 	stw	r17,4(sp)
   2a408:	dc000015 	stw	r16,0(sp)
   2a40c:	3025883a 	mov	r18,r6
   2a410:	2800b726 	beq	r5,zero,2a6f0 <_realloc_r+0x310>
   2a414:	282b883a 	mov	r21,r5
   2a418:	2029883a 	mov	r20,r4
   2a41c:	00314400 	call	31440 <__malloc_lock>
   2a420:	a8bfff17 	ldw	r2,-4(r21)
   2a424:	043fff04 	movi	r16,-4
   2a428:	90c002c4 	addi	r3,r18,11
   2a42c:	01000584 	movi	r4,22
   2a430:	acfffe04 	addi	r19,r21,-8
   2a434:	1420703a 	and	r16,r2,r16
   2a438:	20c0332e 	bgeu	r4,r3,2a508 <_realloc_r+0x128>
   2a43c:	047ffe04 	movi	r17,-8
   2a440:	1c62703a 	and	r17,r3,r17
   2a444:	8807883a 	mov	r3,r17
   2a448:	88005816 	blt	r17,zero,2a5ac <_realloc_r+0x1cc>
   2a44c:	8c805736 	bltu	r17,r18,2a5ac <_realloc_r+0x1cc>
   2a450:	80c0300e 	bge	r16,r3,2a514 <_realloc_r+0x134>
   2a454:	07010034 	movhi	fp,1024
   2a458:	e7020704 	addi	fp,fp,2076
   2a45c:	e1c00217 	ldw	r7,8(fp)
   2a460:	9c09883a 	add	r4,r19,r16
   2a464:	22000117 	ldw	r8,4(r4)
   2a468:	21c06326 	beq	r4,r7,2a5f8 <_realloc_r+0x218>
   2a46c:	017fff84 	movi	r5,-2
   2a470:	414a703a 	and	r5,r8,r5
   2a474:	214b883a 	add	r5,r4,r5
   2a478:	29800117 	ldw	r6,4(r5)
   2a47c:	3180004c 	andi	r6,r6,1
   2a480:	30003f26 	beq	r6,zero,2a580 <_realloc_r+0x1a0>
   2a484:	1080004c 	andi	r2,r2,1
   2a488:	10008326 	beq	r2,zero,2a698 <_realloc_r+0x2b8>
   2a48c:	900b883a 	mov	r5,r18
   2a490:	a009883a 	mov	r4,r20
   2a494:	0020e540 	call	20e54 <_malloc_r>
   2a498:	1025883a 	mov	r18,r2
   2a49c:	10011e26 	beq	r2,zero,2a918 <_realloc_r+0x538>
   2a4a0:	a93fff17 	ldw	r4,-4(r21)
   2a4a4:	10fffe04 	addi	r3,r2,-8
   2a4a8:	00bfff84 	movi	r2,-2
   2a4ac:	2084703a 	and	r2,r4,r2
   2a4b0:	9885883a 	add	r2,r19,r2
   2a4b4:	1880ee26 	beq	r3,r2,2a870 <_realloc_r+0x490>
   2a4b8:	81bfff04 	addi	r6,r16,-4
   2a4bc:	00800904 	movi	r2,36
   2a4c0:	1180b836 	bltu	r2,r6,2a7a4 <_realloc_r+0x3c4>
   2a4c4:	00c004c4 	movi	r3,19
   2a4c8:	19809636 	bltu	r3,r6,2a724 <_realloc_r+0x344>
   2a4cc:	9005883a 	mov	r2,r18
   2a4d0:	a807883a 	mov	r3,r21
   2a4d4:	19000017 	ldw	r4,0(r3)
   2a4d8:	11000015 	stw	r4,0(r2)
   2a4dc:	19000117 	ldw	r4,4(r3)
   2a4e0:	11000115 	stw	r4,4(r2)
   2a4e4:	18c00217 	ldw	r3,8(r3)
   2a4e8:	10c00215 	stw	r3,8(r2)
   2a4ec:	a80b883a 	mov	r5,r21
   2a4f0:	a009883a 	mov	r4,r20
   2a4f4:	00285180 	call	28518 <_free_r>
   2a4f8:	a009883a 	mov	r4,r20
   2a4fc:	00314640 	call	31464 <__malloc_unlock>
   2a500:	9005883a 	mov	r2,r18
   2a504:	00001206 	br	2a550 <_realloc_r+0x170>
   2a508:	00c00404 	movi	r3,16
   2a50c:	1823883a 	mov	r17,r3
   2a510:	003fce06 	br	2a44c <__alt_data_end+0xf802a44c>
   2a514:	a825883a 	mov	r18,r21
   2a518:	8445c83a 	sub	r2,r16,r17
   2a51c:	00c003c4 	movi	r3,15
   2a520:	18802636 	bltu	r3,r2,2a5bc <_realloc_r+0x1dc>
   2a524:	99800117 	ldw	r6,4(r19)
   2a528:	9c07883a 	add	r3,r19,r16
   2a52c:	3180004c 	andi	r6,r6,1
   2a530:	3420b03a 	or	r16,r6,r16
   2a534:	9c000115 	stw	r16,4(r19)
   2a538:	18800117 	ldw	r2,4(r3)
   2a53c:	10800054 	ori	r2,r2,1
   2a540:	18800115 	stw	r2,4(r3)
   2a544:	a009883a 	mov	r4,r20
   2a548:	00314640 	call	31464 <__malloc_unlock>
   2a54c:	9005883a 	mov	r2,r18
   2a550:	dfc00917 	ldw	ra,36(sp)
   2a554:	df000817 	ldw	fp,32(sp)
   2a558:	ddc00717 	ldw	r23,28(sp)
   2a55c:	dd800617 	ldw	r22,24(sp)
   2a560:	dd400517 	ldw	r21,20(sp)
   2a564:	dd000417 	ldw	r20,16(sp)
   2a568:	dcc00317 	ldw	r19,12(sp)
   2a56c:	dc800217 	ldw	r18,8(sp)
   2a570:	dc400117 	ldw	r17,4(sp)
   2a574:	dc000017 	ldw	r16,0(sp)
   2a578:	dec00a04 	addi	sp,sp,40
   2a57c:	f800283a 	ret
   2a580:	017fff04 	movi	r5,-4
   2a584:	414a703a 	and	r5,r8,r5
   2a588:	814d883a 	add	r6,r16,r5
   2a58c:	30c01f16 	blt	r6,r3,2a60c <_realloc_r+0x22c>
   2a590:	20800317 	ldw	r2,12(r4)
   2a594:	20c00217 	ldw	r3,8(r4)
   2a598:	a825883a 	mov	r18,r21
   2a59c:	3021883a 	mov	r16,r6
   2a5a0:	18800315 	stw	r2,12(r3)
   2a5a4:	10c00215 	stw	r3,8(r2)
   2a5a8:	003fdb06 	br	2a518 <__alt_data_end+0xf802a518>
   2a5ac:	00800304 	movi	r2,12
   2a5b0:	a0800015 	stw	r2,0(r20)
   2a5b4:	0005883a 	mov	r2,zero
   2a5b8:	003fe506 	br	2a550 <__alt_data_end+0xf802a550>
   2a5bc:	98c00117 	ldw	r3,4(r19)
   2a5c0:	9c4b883a 	add	r5,r19,r17
   2a5c4:	11000054 	ori	r4,r2,1
   2a5c8:	18c0004c 	andi	r3,r3,1
   2a5cc:	1c62b03a 	or	r17,r3,r17
   2a5d0:	9c400115 	stw	r17,4(r19)
   2a5d4:	29000115 	stw	r4,4(r5)
   2a5d8:	2885883a 	add	r2,r5,r2
   2a5dc:	10c00117 	ldw	r3,4(r2)
   2a5e0:	29400204 	addi	r5,r5,8
   2a5e4:	a009883a 	mov	r4,r20
   2a5e8:	18c00054 	ori	r3,r3,1
   2a5ec:	10c00115 	stw	r3,4(r2)
   2a5f0:	00285180 	call	28518 <_free_r>
   2a5f4:	003fd306 	br	2a544 <__alt_data_end+0xf802a544>
   2a5f8:	017fff04 	movi	r5,-4
   2a5fc:	414a703a 	and	r5,r8,r5
   2a600:	89800404 	addi	r6,r17,16
   2a604:	8151883a 	add	r8,r16,r5
   2a608:	4180590e 	bge	r8,r6,2a770 <_realloc_r+0x390>
   2a60c:	1080004c 	andi	r2,r2,1
   2a610:	103f9e1e 	bne	r2,zero,2a48c <__alt_data_end+0xf802a48c>
   2a614:	adbffe17 	ldw	r22,-8(r21)
   2a618:	00bfff04 	movi	r2,-4
   2a61c:	9dadc83a 	sub	r22,r19,r22
   2a620:	b1800117 	ldw	r6,4(r22)
   2a624:	3084703a 	and	r2,r6,r2
   2a628:	20002026 	beq	r4,zero,2a6ac <_realloc_r+0x2cc>
   2a62c:	80af883a 	add	r23,r16,r2
   2a630:	b96f883a 	add	r23,r23,r5
   2a634:	21c05f26 	beq	r4,r7,2a7b4 <_realloc_r+0x3d4>
   2a638:	b8c01c16 	blt	r23,r3,2a6ac <_realloc_r+0x2cc>
   2a63c:	20800317 	ldw	r2,12(r4)
   2a640:	20c00217 	ldw	r3,8(r4)
   2a644:	81bfff04 	addi	r6,r16,-4
   2a648:	01000904 	movi	r4,36
   2a64c:	18800315 	stw	r2,12(r3)
   2a650:	10c00215 	stw	r3,8(r2)
   2a654:	b0c00217 	ldw	r3,8(r22)
   2a658:	b0800317 	ldw	r2,12(r22)
   2a65c:	b4800204 	addi	r18,r22,8
   2a660:	18800315 	stw	r2,12(r3)
   2a664:	10c00215 	stw	r3,8(r2)
   2a668:	21801b36 	bltu	r4,r6,2a6d8 <_realloc_r+0x2f8>
   2a66c:	008004c4 	movi	r2,19
   2a670:	1180352e 	bgeu	r2,r6,2a748 <_realloc_r+0x368>
   2a674:	a8800017 	ldw	r2,0(r21)
   2a678:	b0800215 	stw	r2,8(r22)
   2a67c:	a8800117 	ldw	r2,4(r21)
   2a680:	b0800315 	stw	r2,12(r22)
   2a684:	008006c4 	movi	r2,27
   2a688:	11807f36 	bltu	r2,r6,2a888 <_realloc_r+0x4a8>
   2a68c:	b0800404 	addi	r2,r22,16
   2a690:	ad400204 	addi	r21,r21,8
   2a694:	00002d06 	br	2a74c <_realloc_r+0x36c>
   2a698:	adbffe17 	ldw	r22,-8(r21)
   2a69c:	00bfff04 	movi	r2,-4
   2a6a0:	9dadc83a 	sub	r22,r19,r22
   2a6a4:	b1000117 	ldw	r4,4(r22)
   2a6a8:	2084703a 	and	r2,r4,r2
   2a6ac:	b03f7726 	beq	r22,zero,2a48c <__alt_data_end+0xf802a48c>
   2a6b0:	80af883a 	add	r23,r16,r2
   2a6b4:	b8ff7516 	blt	r23,r3,2a48c <__alt_data_end+0xf802a48c>
   2a6b8:	b0800317 	ldw	r2,12(r22)
   2a6bc:	b0c00217 	ldw	r3,8(r22)
   2a6c0:	81bfff04 	addi	r6,r16,-4
   2a6c4:	01000904 	movi	r4,36
   2a6c8:	18800315 	stw	r2,12(r3)
   2a6cc:	10c00215 	stw	r3,8(r2)
   2a6d0:	b4800204 	addi	r18,r22,8
   2a6d4:	21bfe52e 	bgeu	r4,r6,2a66c <__alt_data_end+0xf802a66c>
   2a6d8:	a80b883a 	mov	r5,r21
   2a6dc:	9009883a 	mov	r4,r18
   2a6e0:	00292280 	call	29228 <memmove>
   2a6e4:	b821883a 	mov	r16,r23
   2a6e8:	b027883a 	mov	r19,r22
   2a6ec:	003f8a06 	br	2a518 <__alt_data_end+0xf802a518>
   2a6f0:	300b883a 	mov	r5,r6
   2a6f4:	dfc00917 	ldw	ra,36(sp)
   2a6f8:	df000817 	ldw	fp,32(sp)
   2a6fc:	ddc00717 	ldw	r23,28(sp)
   2a700:	dd800617 	ldw	r22,24(sp)
   2a704:	dd400517 	ldw	r21,20(sp)
   2a708:	dd000417 	ldw	r20,16(sp)
   2a70c:	dcc00317 	ldw	r19,12(sp)
   2a710:	dc800217 	ldw	r18,8(sp)
   2a714:	dc400117 	ldw	r17,4(sp)
   2a718:	dc000017 	ldw	r16,0(sp)
   2a71c:	dec00a04 	addi	sp,sp,40
   2a720:	0020e541 	jmpi	20e54 <_malloc_r>
   2a724:	a8c00017 	ldw	r3,0(r21)
   2a728:	90c00015 	stw	r3,0(r18)
   2a72c:	a8c00117 	ldw	r3,4(r21)
   2a730:	90c00115 	stw	r3,4(r18)
   2a734:	00c006c4 	movi	r3,27
   2a738:	19804536 	bltu	r3,r6,2a850 <_realloc_r+0x470>
   2a73c:	90800204 	addi	r2,r18,8
   2a740:	a8c00204 	addi	r3,r21,8
   2a744:	003f6306 	br	2a4d4 <__alt_data_end+0xf802a4d4>
   2a748:	9005883a 	mov	r2,r18
   2a74c:	a8c00017 	ldw	r3,0(r21)
   2a750:	b821883a 	mov	r16,r23
   2a754:	b027883a 	mov	r19,r22
   2a758:	10c00015 	stw	r3,0(r2)
   2a75c:	a8c00117 	ldw	r3,4(r21)
   2a760:	10c00115 	stw	r3,4(r2)
   2a764:	a8c00217 	ldw	r3,8(r21)
   2a768:	10c00215 	stw	r3,8(r2)
   2a76c:	003f6a06 	br	2a518 <__alt_data_end+0xf802a518>
   2a770:	9c67883a 	add	r19,r19,r17
   2a774:	4445c83a 	sub	r2,r8,r17
   2a778:	e4c00215 	stw	r19,8(fp)
   2a77c:	10800054 	ori	r2,r2,1
   2a780:	98800115 	stw	r2,4(r19)
   2a784:	a8bfff17 	ldw	r2,-4(r21)
   2a788:	a009883a 	mov	r4,r20
   2a78c:	1080004c 	andi	r2,r2,1
   2a790:	1462b03a 	or	r17,r2,r17
   2a794:	ac7fff15 	stw	r17,-4(r21)
   2a798:	00314640 	call	31464 <__malloc_unlock>
   2a79c:	a805883a 	mov	r2,r21
   2a7a0:	003f6b06 	br	2a550 <__alt_data_end+0xf802a550>
   2a7a4:	a80b883a 	mov	r5,r21
   2a7a8:	9009883a 	mov	r4,r18
   2a7ac:	00292280 	call	29228 <memmove>
   2a7b0:	003f4e06 	br	2a4ec <__alt_data_end+0xf802a4ec>
   2a7b4:	89000404 	addi	r4,r17,16
   2a7b8:	b93fbc16 	blt	r23,r4,2a6ac <__alt_data_end+0xf802a6ac>
   2a7bc:	b0800317 	ldw	r2,12(r22)
   2a7c0:	b0c00217 	ldw	r3,8(r22)
   2a7c4:	81bfff04 	addi	r6,r16,-4
   2a7c8:	01000904 	movi	r4,36
   2a7cc:	18800315 	stw	r2,12(r3)
   2a7d0:	10c00215 	stw	r3,8(r2)
   2a7d4:	b4800204 	addi	r18,r22,8
   2a7d8:	21804336 	bltu	r4,r6,2a8e8 <_realloc_r+0x508>
   2a7dc:	008004c4 	movi	r2,19
   2a7e0:	11803f2e 	bgeu	r2,r6,2a8e0 <_realloc_r+0x500>
   2a7e4:	a8800017 	ldw	r2,0(r21)
   2a7e8:	b0800215 	stw	r2,8(r22)
   2a7ec:	a8800117 	ldw	r2,4(r21)
   2a7f0:	b0800315 	stw	r2,12(r22)
   2a7f4:	008006c4 	movi	r2,27
   2a7f8:	11803f36 	bltu	r2,r6,2a8f8 <_realloc_r+0x518>
   2a7fc:	b0800404 	addi	r2,r22,16
   2a800:	ad400204 	addi	r21,r21,8
   2a804:	a8c00017 	ldw	r3,0(r21)
   2a808:	10c00015 	stw	r3,0(r2)
   2a80c:	a8c00117 	ldw	r3,4(r21)
   2a810:	10c00115 	stw	r3,4(r2)
   2a814:	a8c00217 	ldw	r3,8(r21)
   2a818:	10c00215 	stw	r3,8(r2)
   2a81c:	b447883a 	add	r3,r22,r17
   2a820:	bc45c83a 	sub	r2,r23,r17
   2a824:	e0c00215 	stw	r3,8(fp)
   2a828:	10800054 	ori	r2,r2,1
   2a82c:	18800115 	stw	r2,4(r3)
   2a830:	b0800117 	ldw	r2,4(r22)
   2a834:	a009883a 	mov	r4,r20
   2a838:	1080004c 	andi	r2,r2,1
   2a83c:	1462b03a 	or	r17,r2,r17
   2a840:	b4400115 	stw	r17,4(r22)
   2a844:	00314640 	call	31464 <__malloc_unlock>
   2a848:	9005883a 	mov	r2,r18
   2a84c:	003f4006 	br	2a550 <__alt_data_end+0xf802a550>
   2a850:	a8c00217 	ldw	r3,8(r21)
   2a854:	90c00215 	stw	r3,8(r18)
   2a858:	a8c00317 	ldw	r3,12(r21)
   2a85c:	90c00315 	stw	r3,12(r18)
   2a860:	30801126 	beq	r6,r2,2a8a8 <_realloc_r+0x4c8>
   2a864:	90800404 	addi	r2,r18,16
   2a868:	a8c00404 	addi	r3,r21,16
   2a86c:	003f1906 	br	2a4d4 <__alt_data_end+0xf802a4d4>
   2a870:	90ffff17 	ldw	r3,-4(r18)
   2a874:	00bfff04 	movi	r2,-4
   2a878:	a825883a 	mov	r18,r21
   2a87c:	1884703a 	and	r2,r3,r2
   2a880:	80a1883a 	add	r16,r16,r2
   2a884:	003f2406 	br	2a518 <__alt_data_end+0xf802a518>
   2a888:	a8800217 	ldw	r2,8(r21)
   2a88c:	b0800415 	stw	r2,16(r22)
   2a890:	a8800317 	ldw	r2,12(r21)
   2a894:	b0800515 	stw	r2,20(r22)
   2a898:	31000a26 	beq	r6,r4,2a8c4 <_realloc_r+0x4e4>
   2a89c:	b0800604 	addi	r2,r22,24
   2a8a0:	ad400404 	addi	r21,r21,16
   2a8a4:	003fa906 	br	2a74c <__alt_data_end+0xf802a74c>
   2a8a8:	a9000417 	ldw	r4,16(r21)
   2a8ac:	90800604 	addi	r2,r18,24
   2a8b0:	a8c00604 	addi	r3,r21,24
   2a8b4:	91000415 	stw	r4,16(r18)
   2a8b8:	a9000517 	ldw	r4,20(r21)
   2a8bc:	91000515 	stw	r4,20(r18)
   2a8c0:	003f0406 	br	2a4d4 <__alt_data_end+0xf802a4d4>
   2a8c4:	a8c00417 	ldw	r3,16(r21)
   2a8c8:	ad400604 	addi	r21,r21,24
   2a8cc:	b0800804 	addi	r2,r22,32
   2a8d0:	b0c00615 	stw	r3,24(r22)
   2a8d4:	a8ffff17 	ldw	r3,-4(r21)
   2a8d8:	b0c00715 	stw	r3,28(r22)
   2a8dc:	003f9b06 	br	2a74c <__alt_data_end+0xf802a74c>
   2a8e0:	9005883a 	mov	r2,r18
   2a8e4:	003fc706 	br	2a804 <__alt_data_end+0xf802a804>
   2a8e8:	a80b883a 	mov	r5,r21
   2a8ec:	9009883a 	mov	r4,r18
   2a8f0:	00292280 	call	29228 <memmove>
   2a8f4:	003fc906 	br	2a81c <__alt_data_end+0xf802a81c>
   2a8f8:	a8800217 	ldw	r2,8(r21)
   2a8fc:	b0800415 	stw	r2,16(r22)
   2a900:	a8800317 	ldw	r2,12(r21)
   2a904:	b0800515 	stw	r2,20(r22)
   2a908:	31000726 	beq	r6,r4,2a928 <_realloc_r+0x548>
   2a90c:	b0800604 	addi	r2,r22,24
   2a910:	ad400404 	addi	r21,r21,16
   2a914:	003fbb06 	br	2a804 <__alt_data_end+0xf802a804>
   2a918:	a009883a 	mov	r4,r20
   2a91c:	00314640 	call	31464 <__malloc_unlock>
   2a920:	0005883a 	mov	r2,zero
   2a924:	003f0a06 	br	2a550 <__alt_data_end+0xf802a550>
   2a928:	a8c00417 	ldw	r3,16(r21)
   2a92c:	ad400604 	addi	r21,r21,24
   2a930:	b0800804 	addi	r2,r22,32
   2a934:	b0c00615 	stw	r3,24(r22)
   2a938:	a8ffff17 	ldw	r3,-4(r21)
   2a93c:	b0c00715 	stw	r3,28(r22)
   2a940:	003fb006 	br	2a804 <__alt_data_end+0xf802a804>

0002a944 <__fpclassifyd>:
   2a944:	00a00034 	movhi	r2,32768
   2a948:	10bfffc4 	addi	r2,r2,-1
   2a94c:	2884703a 	and	r2,r5,r2
   2a950:	10000726 	beq	r2,zero,2a970 <__fpclassifyd+0x2c>
   2a954:	00fffc34 	movhi	r3,65520
   2a958:	019ff834 	movhi	r6,32736
   2a95c:	28c7883a 	add	r3,r5,r3
   2a960:	31bfffc4 	addi	r6,r6,-1
   2a964:	30c00536 	bltu	r6,r3,2a97c <__fpclassifyd+0x38>
   2a968:	00800104 	movi	r2,4
   2a96c:	f800283a 	ret
   2a970:	2000021e 	bne	r4,zero,2a97c <__fpclassifyd+0x38>
   2a974:	00800084 	movi	r2,2
   2a978:	f800283a 	ret
   2a97c:	00dffc34 	movhi	r3,32752
   2a980:	019ff834 	movhi	r6,32736
   2a984:	28cb883a 	add	r5,r5,r3
   2a988:	31bfffc4 	addi	r6,r6,-1
   2a98c:	317ff62e 	bgeu	r6,r5,2a968 <__alt_data_end+0xf802a968>
   2a990:	01400434 	movhi	r5,16
   2a994:	297fffc4 	addi	r5,r5,-1
   2a998:	28800236 	bltu	r5,r2,2a9a4 <__fpclassifyd+0x60>
   2a99c:	008000c4 	movi	r2,3
   2a9a0:	f800283a 	ret
   2a9a4:	10c00226 	beq	r2,r3,2a9b0 <__fpclassifyd+0x6c>
   2a9a8:	0005883a 	mov	r2,zero
   2a9ac:	f800283a 	ret
   2a9b0:	2005003a 	cmpeq	r2,r4,zero
   2a9b4:	f800283a 	ret

0002a9b8 <strcmp>:
   2a9b8:	2144b03a 	or	r2,r4,r5
   2a9bc:	108000cc 	andi	r2,r2,3
   2a9c0:	1000171e 	bne	r2,zero,2aa20 <strcmp+0x68>
   2a9c4:	20800017 	ldw	r2,0(r4)
   2a9c8:	28c00017 	ldw	r3,0(r5)
   2a9cc:	10c0141e 	bne	r2,r3,2aa20 <strcmp+0x68>
   2a9d0:	027fbff4 	movhi	r9,65279
   2a9d4:	4a7fbfc4 	addi	r9,r9,-257
   2a9d8:	0086303a 	nor	r3,zero,r2
   2a9dc:	02202074 	movhi	r8,32897
   2a9e0:	1245883a 	add	r2,r2,r9
   2a9e4:	42202004 	addi	r8,r8,-32640
   2a9e8:	10c4703a 	and	r2,r2,r3
   2a9ec:	1204703a 	and	r2,r2,r8
   2a9f0:	10000226 	beq	r2,zero,2a9fc <strcmp+0x44>
   2a9f4:	00002306 	br	2aa84 <strcmp+0xcc>
   2a9f8:	1000221e 	bne	r2,zero,2aa84 <strcmp+0xcc>
   2a9fc:	21000104 	addi	r4,r4,4
   2aa00:	20c00017 	ldw	r3,0(r4)
   2aa04:	29400104 	addi	r5,r5,4
   2aa08:	29800017 	ldw	r6,0(r5)
   2aa0c:	1a4f883a 	add	r7,r3,r9
   2aa10:	00c4303a 	nor	r2,zero,r3
   2aa14:	3884703a 	and	r2,r7,r2
   2aa18:	1204703a 	and	r2,r2,r8
   2aa1c:	19bff626 	beq	r3,r6,2a9f8 <__alt_data_end+0xf802a9f8>
   2aa20:	20800003 	ldbu	r2,0(r4)
   2aa24:	10c03fcc 	andi	r3,r2,255
   2aa28:	18c0201c 	xori	r3,r3,128
   2aa2c:	18ffe004 	addi	r3,r3,-128
   2aa30:	18000c26 	beq	r3,zero,2aa64 <strcmp+0xac>
   2aa34:	29800007 	ldb	r6,0(r5)
   2aa38:	19800326 	beq	r3,r6,2aa48 <strcmp+0x90>
   2aa3c:	00001306 	br	2aa8c <strcmp+0xd4>
   2aa40:	29800007 	ldb	r6,0(r5)
   2aa44:	11800b1e 	bne	r2,r6,2aa74 <strcmp+0xbc>
   2aa48:	21000044 	addi	r4,r4,1
   2aa4c:	20c00003 	ldbu	r3,0(r4)
   2aa50:	29400044 	addi	r5,r5,1
   2aa54:	18803fcc 	andi	r2,r3,255
   2aa58:	1080201c 	xori	r2,r2,128
   2aa5c:	10bfe004 	addi	r2,r2,-128
   2aa60:	103ff71e 	bne	r2,zero,2aa40 <__alt_data_end+0xf802aa40>
   2aa64:	0007883a 	mov	r3,zero
   2aa68:	28800003 	ldbu	r2,0(r5)
   2aa6c:	1885c83a 	sub	r2,r3,r2
   2aa70:	f800283a 	ret
   2aa74:	28800003 	ldbu	r2,0(r5)
   2aa78:	18c03fcc 	andi	r3,r3,255
   2aa7c:	1885c83a 	sub	r2,r3,r2
   2aa80:	f800283a 	ret
   2aa84:	0005883a 	mov	r2,zero
   2aa88:	f800283a 	ret
   2aa8c:	10c03fcc 	andi	r3,r2,255
   2aa90:	003ff506 	br	2aa68 <__alt_data_end+0xf802aa68>

0002aa94 <__ssprint_r>:
   2aa94:	30800217 	ldw	r2,8(r6)
   2aa98:	defff604 	addi	sp,sp,-40
   2aa9c:	dc800215 	stw	r18,8(sp)
   2aaa0:	dfc00915 	stw	ra,36(sp)
   2aaa4:	df000815 	stw	fp,32(sp)
   2aaa8:	ddc00715 	stw	r23,28(sp)
   2aaac:	dd800615 	stw	r22,24(sp)
   2aab0:	dd400515 	stw	r21,20(sp)
   2aab4:	dd000415 	stw	r20,16(sp)
   2aab8:	dcc00315 	stw	r19,12(sp)
   2aabc:	dc400115 	stw	r17,4(sp)
   2aac0:	dc000015 	stw	r16,0(sp)
   2aac4:	3025883a 	mov	r18,r6
   2aac8:	10005826 	beq	r2,zero,2ac2c <__ssprint_r+0x198>
   2aacc:	2027883a 	mov	r19,r4
   2aad0:	35c00017 	ldw	r23,0(r6)
   2aad4:	29000017 	ldw	r4,0(r5)
   2aad8:	28800217 	ldw	r2,8(r5)
   2aadc:	2823883a 	mov	r17,r5
   2aae0:	0039883a 	mov	fp,zero
   2aae4:	0021883a 	mov	r16,zero
   2aae8:	80003926 	beq	r16,zero,2abd0 <__ssprint_r+0x13c>
   2aaec:	102b883a 	mov	r21,r2
   2aaf0:	102d883a 	mov	r22,r2
   2aaf4:	80803a36 	bltu	r16,r2,2abe0 <__ssprint_r+0x14c>
   2aaf8:	88c0030b 	ldhu	r3,12(r17)
   2aafc:	1881200c 	andi	r2,r3,1152
   2ab00:	10002626 	beq	r2,zero,2ab9c <__ssprint_r+0x108>
   2ab04:	88800517 	ldw	r2,20(r17)
   2ab08:	89400417 	ldw	r5,16(r17)
   2ab0c:	81800044 	addi	r6,r16,1
   2ab10:	108f883a 	add	r7,r2,r2
   2ab14:	3885883a 	add	r2,r7,r2
   2ab18:	100ed7fa 	srli	r7,r2,31
   2ab1c:	216dc83a 	sub	r22,r4,r5
   2ab20:	3589883a 	add	r4,r6,r22
   2ab24:	3885883a 	add	r2,r7,r2
   2ab28:	102bd07a 	srai	r21,r2,1
   2ab2c:	a80d883a 	mov	r6,r21
   2ab30:	a900022e 	bgeu	r21,r4,2ab3c <__ssprint_r+0xa8>
   2ab34:	202b883a 	mov	r21,r4
   2ab38:	200d883a 	mov	r6,r4
   2ab3c:	18c1000c 	andi	r3,r3,1024
   2ab40:	18002a26 	beq	r3,zero,2abec <__ssprint_r+0x158>
   2ab44:	300b883a 	mov	r5,r6
   2ab48:	9809883a 	mov	r4,r19
   2ab4c:	0020e540 	call	20e54 <_malloc_r>
   2ab50:	1029883a 	mov	r20,r2
   2ab54:	10002c26 	beq	r2,zero,2ac08 <__ssprint_r+0x174>
   2ab58:	89400417 	ldw	r5,16(r17)
   2ab5c:	b00d883a 	mov	r6,r22
   2ab60:	1009883a 	mov	r4,r2
   2ab64:	00290e00 	call	290e0 <memcpy>
   2ab68:	8880030b 	ldhu	r2,12(r17)
   2ab6c:	00fedfc4 	movi	r3,-1153
   2ab70:	10c4703a 	and	r2,r2,r3
   2ab74:	10802014 	ori	r2,r2,128
   2ab78:	8880030d 	sth	r2,12(r17)
   2ab7c:	a589883a 	add	r4,r20,r22
   2ab80:	adadc83a 	sub	r22,r21,r22
   2ab84:	8d400515 	stw	r21,20(r17)
   2ab88:	8d800215 	stw	r22,8(r17)
   2ab8c:	8d000415 	stw	r20,16(r17)
   2ab90:	89000015 	stw	r4,0(r17)
   2ab94:	802b883a 	mov	r21,r16
   2ab98:	802d883a 	mov	r22,r16
   2ab9c:	b00d883a 	mov	r6,r22
   2aba0:	e00b883a 	mov	r5,fp
   2aba4:	00292280 	call	29228 <memmove>
   2aba8:	88800217 	ldw	r2,8(r17)
   2abac:	89000017 	ldw	r4,0(r17)
   2abb0:	90c00217 	ldw	r3,8(r18)
   2abb4:	1545c83a 	sub	r2,r2,r21
   2abb8:	2589883a 	add	r4,r4,r22
   2abbc:	88800215 	stw	r2,8(r17)
   2abc0:	89000015 	stw	r4,0(r17)
   2abc4:	1c21c83a 	sub	r16,r3,r16
   2abc8:	94000215 	stw	r16,8(r18)
   2abcc:	80001726 	beq	r16,zero,2ac2c <__ssprint_r+0x198>
   2abd0:	bf000017 	ldw	fp,0(r23)
   2abd4:	bc000117 	ldw	r16,4(r23)
   2abd8:	bdc00204 	addi	r23,r23,8
   2abdc:	003fc206 	br	2aae8 <__alt_data_end+0xf802aae8>
   2abe0:	802b883a 	mov	r21,r16
   2abe4:	802d883a 	mov	r22,r16
   2abe8:	003fec06 	br	2ab9c <__alt_data_end+0xf802ab9c>
   2abec:	9809883a 	mov	r4,r19
   2abf0:	002a3e00 	call	2a3e0 <_realloc_r>
   2abf4:	1029883a 	mov	r20,r2
   2abf8:	103fe01e 	bne	r2,zero,2ab7c <__alt_data_end+0xf802ab7c>
   2abfc:	89400417 	ldw	r5,16(r17)
   2ac00:	9809883a 	mov	r4,r19
   2ac04:	00285180 	call	28518 <_free_r>
   2ac08:	88c0030b 	ldhu	r3,12(r17)
   2ac0c:	00800304 	movi	r2,12
   2ac10:	98800015 	stw	r2,0(r19)
   2ac14:	18c01014 	ori	r3,r3,64
   2ac18:	88c0030d 	sth	r3,12(r17)
   2ac1c:	00bfffc4 	movi	r2,-1
   2ac20:	90000215 	stw	zero,8(r18)
   2ac24:	90000115 	stw	zero,4(r18)
   2ac28:	00000206 	br	2ac34 <__ssprint_r+0x1a0>
   2ac2c:	90000115 	stw	zero,4(r18)
   2ac30:	0005883a 	mov	r2,zero
   2ac34:	dfc00917 	ldw	ra,36(sp)
   2ac38:	df000817 	ldw	fp,32(sp)
   2ac3c:	ddc00717 	ldw	r23,28(sp)
   2ac40:	dd800617 	ldw	r22,24(sp)
   2ac44:	dd400517 	ldw	r21,20(sp)
   2ac48:	dd000417 	ldw	r20,16(sp)
   2ac4c:	dcc00317 	ldw	r19,12(sp)
   2ac50:	dc800217 	ldw	r18,8(sp)
   2ac54:	dc400117 	ldw	r17,4(sp)
   2ac58:	dc000017 	ldw	r16,0(sp)
   2ac5c:	dec00a04 	addi	sp,sp,40
   2ac60:	f800283a 	ret

0002ac64 <___svfiprintf_internal_r>:
   2ac64:	2880030b 	ldhu	r2,12(r5)
   2ac68:	deffc804 	addi	sp,sp,-224
   2ac6c:	dcc03115 	stw	r19,196(sp)
   2ac70:	dfc03715 	stw	ra,220(sp)
   2ac74:	df003615 	stw	fp,216(sp)
   2ac78:	ddc03515 	stw	r23,212(sp)
   2ac7c:	dd803415 	stw	r22,208(sp)
   2ac80:	dd403315 	stw	r21,204(sp)
   2ac84:	dd003215 	stw	r20,200(sp)
   2ac88:	dc803015 	stw	r18,192(sp)
   2ac8c:	dc402f15 	stw	r17,188(sp)
   2ac90:	dc002e15 	stw	r16,184(sp)
   2ac94:	d9402715 	stw	r5,156(sp)
   2ac98:	d9002a15 	stw	r4,168(sp)
   2ac9c:	1080200c 	andi	r2,r2,128
   2aca0:	d9c02315 	stw	r7,140(sp)
   2aca4:	3027883a 	mov	r19,r6
   2aca8:	10000226 	beq	r2,zero,2acb4 <___svfiprintf_internal_r+0x50>
   2acac:	28800417 	ldw	r2,16(r5)
   2acb0:	10041d26 	beq	r2,zero,2bd28 <___svfiprintf_internal_r+0x10c4>
   2acb4:	dac01a04 	addi	r11,sp,104
   2acb8:	dac01e15 	stw	r11,120(sp)
   2acbc:	d8801e17 	ldw	r2,120(sp)
   2acc0:	dac019c4 	addi	r11,sp,103
   2acc4:	dd402a17 	ldw	r21,168(sp)
   2acc8:	ddc02717 	ldw	r23,156(sp)
   2accc:	05810034 	movhi	r22,1024
   2acd0:	05010034 	movhi	r20,1024
   2acd4:	dac01f15 	stw	r11,124(sp)
   2acd8:	12d7c83a 	sub	r11,r2,r11
   2acdc:	b5809904 	addi	r22,r22,612
   2ace0:	a5009504 	addi	r20,r20,596
   2ace4:	dec01a15 	stw	sp,104(sp)
   2ace8:	d8001c15 	stw	zero,112(sp)
   2acec:	d8001b15 	stw	zero,108(sp)
   2acf0:	d811883a 	mov	r8,sp
   2acf4:	d8002915 	stw	zero,164(sp)
   2acf8:	d8002515 	stw	zero,148(sp)
   2acfc:	dac02b15 	stw	r11,172(sp)
   2ad00:	98800007 	ldb	r2,0(r19)
   2ad04:	1002dd26 	beq	r2,zero,2b87c <___svfiprintf_internal_r+0xc18>
   2ad08:	00c00944 	movi	r3,37
   2ad0c:	9823883a 	mov	r17,r19
   2ad10:	10c0021e 	bne	r2,r3,2ad1c <___svfiprintf_internal_r+0xb8>
   2ad14:	00001406 	br	2ad68 <___svfiprintf_internal_r+0x104>
   2ad18:	10c00326 	beq	r2,r3,2ad28 <___svfiprintf_internal_r+0xc4>
   2ad1c:	8c400044 	addi	r17,r17,1
   2ad20:	88800007 	ldb	r2,0(r17)
   2ad24:	103ffc1e 	bne	r2,zero,2ad18 <__alt_data_end+0xf802ad18>
   2ad28:	8ce1c83a 	sub	r16,r17,r19
   2ad2c:	80000e26 	beq	r16,zero,2ad68 <___svfiprintf_internal_r+0x104>
   2ad30:	d8c01c17 	ldw	r3,112(sp)
   2ad34:	d8801b17 	ldw	r2,108(sp)
   2ad38:	44c00015 	stw	r19,0(r8)
   2ad3c:	1c07883a 	add	r3,r3,r16
   2ad40:	10800044 	addi	r2,r2,1
   2ad44:	d8c01c15 	stw	r3,112(sp)
   2ad48:	44000115 	stw	r16,4(r8)
   2ad4c:	d8801b15 	stw	r2,108(sp)
   2ad50:	00c001c4 	movi	r3,7
   2ad54:	18831e16 	blt	r3,r2,2b9d0 <___svfiprintf_internal_r+0xd6c>
   2ad58:	42000204 	addi	r8,r8,8
   2ad5c:	dac02517 	ldw	r11,148(sp)
   2ad60:	5c17883a 	add	r11,r11,r16
   2ad64:	dac02515 	stw	r11,148(sp)
   2ad68:	88800007 	ldb	r2,0(r17)
   2ad6c:	1002c526 	beq	r2,zero,2b884 <___svfiprintf_internal_r+0xc20>
   2ad70:	88c00047 	ldb	r3,1(r17)
   2ad74:	8cc00044 	addi	r19,r17,1
   2ad78:	d8001d85 	stb	zero,118(sp)
   2ad7c:	0009883a 	mov	r4,zero
   2ad80:	000f883a 	mov	r7,zero
   2ad84:	043fffc4 	movi	r16,-1
   2ad88:	d8002415 	stw	zero,144(sp)
   2ad8c:	0025883a 	mov	r18,zero
   2ad90:	01401604 	movi	r5,88
   2ad94:	01800244 	movi	r6,9
   2ad98:	02800a84 	movi	r10,42
   2ad9c:	02401b04 	movi	r9,108
   2ada0:	9cc00044 	addi	r19,r19,1
   2ada4:	18bff804 	addi	r2,r3,-32
   2ada8:	2881dd36 	bltu	r5,r2,2b520 <___svfiprintf_internal_r+0x8bc>
   2adac:	100490ba 	slli	r2,r2,2
   2adb0:	02c000f4 	movhi	r11,3
   2adb4:	5aeb7104 	addi	r11,r11,-21052
   2adb8:	12c5883a 	add	r2,r2,r11
   2adbc:	10800017 	ldw	r2,0(r2)
   2adc0:	1000683a 	jmp	r2
   2adc4:	0002afc0 	call	2afc <__alt_mem_onchip_memory2_0-0x1d504>
   2adc8:	0002b520 	cmpeqi	zero,zero,2772
   2adcc:	0002b520 	cmpeqi	zero,zero,2772
   2add0:	0002afb4 	movhi	zero,2750
   2add4:	0002b520 	cmpeqi	zero,zero,2772
   2add8:	0002b520 	cmpeqi	zero,zero,2772
   2addc:	0002b520 	cmpeqi	zero,zero,2772
   2ade0:	0002b520 	cmpeqi	zero,zero,2772
   2ade4:	0002b520 	cmpeqi	zero,zero,2772
   2ade8:	0002b520 	cmpeqi	zero,zero,2772
   2adec:	0002af28 	cmpgeui	zero,zero,2748
   2adf0:	0002b104 	movi	zero,2756
   2adf4:	0002b520 	cmpeqi	zero,zero,2772
   2adf8:	0002af54 	movui	zero,2749
   2adfc:	0002b554 	movui	zero,2773
   2ae00:	0002b520 	cmpeqi	zero,zero,2772
   2ae04:	0002b548 	cmpgei	zero,zero,2773
   2ae08:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae0c:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae10:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae14:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae18:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae1c:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae20:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae24:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae28:	0002b4e8 	cmpgeui	zero,zero,2771
   2ae2c:	0002b520 	cmpeqi	zero,zero,2772
   2ae30:	0002b520 	cmpeqi	zero,zero,2772
   2ae34:	0002b520 	cmpeqi	zero,zero,2772
   2ae38:	0002b520 	cmpeqi	zero,zero,2772
   2ae3c:	0002b520 	cmpeqi	zero,zero,2772
   2ae40:	0002b520 	cmpeqi	zero,zero,2772
   2ae44:	0002b520 	cmpeqi	zero,zero,2772
   2ae48:	0002b520 	cmpeqi	zero,zero,2772
   2ae4c:	0002b520 	cmpeqi	zero,zero,2772
   2ae50:	0002b520 	cmpeqi	zero,zero,2772
   2ae54:	0002b484 	movi	zero,2770
   2ae58:	0002b520 	cmpeqi	zero,zero,2772
   2ae5c:	0002b520 	cmpeqi	zero,zero,2772
   2ae60:	0002b520 	cmpeqi	zero,zero,2772
   2ae64:	0002b520 	cmpeqi	zero,zero,2772
   2ae68:	0002b520 	cmpeqi	zero,zero,2772
   2ae6c:	0002b520 	cmpeqi	zero,zero,2772
   2ae70:	0002b520 	cmpeqi	zero,zero,2772
   2ae74:	0002b520 	cmpeqi	zero,zero,2772
   2ae78:	0002b520 	cmpeqi	zero,zero,2772
   2ae7c:	0002b520 	cmpeqi	zero,zero,2772
   2ae80:	0002b5fc 	xorhi	zero,zero,2775
   2ae84:	0002b520 	cmpeqi	zero,zero,2772
   2ae88:	0002b520 	cmpeqi	zero,zero,2772
   2ae8c:	0002b520 	cmpeqi	zero,zero,2772
   2ae90:	0002b520 	cmpeqi	zero,zero,2772
   2ae94:	0002b520 	cmpeqi	zero,zero,2772
   2ae98:	0002b594 	movui	zero,2774
   2ae9c:	0002b520 	cmpeqi	zero,zero,2772
   2aea0:	0002b520 	cmpeqi	zero,zero,2772
   2aea4:	0002b2c8 	cmpgei	zero,zero,2763
   2aea8:	0002b520 	cmpeqi	zero,zero,2772
   2aeac:	0002b520 	cmpeqi	zero,zero,2772
   2aeb0:	0002b520 	cmpeqi	zero,zero,2772
   2aeb4:	0002b520 	cmpeqi	zero,zero,2772
   2aeb8:	0002b520 	cmpeqi	zero,zero,2772
   2aebc:	0002b520 	cmpeqi	zero,zero,2772
   2aec0:	0002b520 	cmpeqi	zero,zero,2772
   2aec4:	0002b520 	cmpeqi	zero,zero,2772
   2aec8:	0002b520 	cmpeqi	zero,zero,2772
   2aecc:	0002b520 	cmpeqi	zero,zero,2772
   2aed0:	0002b1b8 	rdprs	zero,zero,2758
   2aed4:	0002b364 	muli	zero,zero,2765
   2aed8:	0002b520 	cmpeqi	zero,zero,2772
   2aedc:	0002b520 	cmpeqi	zero,zero,2772
   2aee0:	0002b520 	cmpeqi	zero,zero,2772
   2aee4:	0002b358 	cmpnei	zero,zero,2765
   2aee8:	0002b364 	muli	zero,zero,2765
   2aeec:	0002b520 	cmpeqi	zero,zero,2772
   2aef0:	0002b520 	cmpeqi	zero,zero,2772
   2aef4:	0002b348 	cmpgei	zero,zero,2765
   2aef8:	0002b520 	cmpeqi	zero,zero,2772
   2aefc:	0002b30c 	andi	zero,zero,2764
   2af00:	0002b114 	movui	zero,2756
   2af04:	0002af60 	cmpeqi	zero,zero,2749
   2af08:	0002b478 	rdprs	zero,zero,2769
   2af0c:	0002b520 	cmpeqi	zero,zero,2772
   2af10:	0002b42c 	andhi	zero,zero,2768
   2af14:	0002b520 	cmpeqi	zero,zero,2772
   2af18:	0002b084 	movi	zero,2754
   2af1c:	0002b520 	cmpeqi	zero,zero,2772
   2af20:	0002b520 	cmpeqi	zero,zero,2772
   2af24:	0002afe0 	cmpeqi	zero,zero,2751
   2af28:	dac02317 	ldw	r11,140(sp)
   2af2c:	5ac00017 	ldw	r11,0(r11)
   2af30:	dac02415 	stw	r11,144(sp)
   2af34:	dac02317 	ldw	r11,140(sp)
   2af38:	58800104 	addi	r2,r11,4
   2af3c:	dac02417 	ldw	r11,144(sp)
   2af40:	5802e90e 	bge	r11,zero,2bae8 <___svfiprintf_internal_r+0xe84>
   2af44:	dac02417 	ldw	r11,144(sp)
   2af48:	d8802315 	stw	r2,140(sp)
   2af4c:	02d7c83a 	sub	r11,zero,r11
   2af50:	dac02415 	stw	r11,144(sp)
   2af54:	94800114 	ori	r18,r18,4
   2af58:	98c00007 	ldb	r3,0(r19)
   2af5c:	003f9006 	br	2ada0 <__alt_data_end+0xf802ada0>
   2af60:	00800c04 	movi	r2,48
   2af64:	dac02317 	ldw	r11,140(sp)
   2af68:	d8801d05 	stb	r2,116(sp)
   2af6c:	00801e04 	movi	r2,120
   2af70:	d8801d45 	stb	r2,117(sp)
   2af74:	d8001d85 	stb	zero,118(sp)
   2af78:	58c00104 	addi	r3,r11,4
   2af7c:	5f000017 	ldw	fp,0(r11)
   2af80:	0013883a 	mov	r9,zero
   2af84:	90800094 	ori	r2,r18,2
   2af88:	80032b16 	blt	r16,zero,2bc38 <___svfiprintf_internal_r+0xfd4>
   2af8c:	00bfdfc4 	movi	r2,-129
   2af90:	90a4703a 	and	r18,r18,r2
   2af94:	d8c02315 	stw	r3,140(sp)
   2af98:	94800094 	ori	r18,r18,2
   2af9c:	e002dc26 	beq	fp,zero,2bb10 <___svfiprintf_internal_r+0xeac>
   2afa0:	01010034 	movhi	r4,1024
   2afa4:	21002d04 	addi	r4,r4,180
   2afa8:	0015883a 	mov	r10,zero
   2afac:	d9002915 	stw	r4,164(sp)
   2afb0:	00002306 	br	2b040 <___svfiprintf_internal_r+0x3dc>
   2afb4:	94800054 	ori	r18,r18,1
   2afb8:	98c00007 	ldb	r3,0(r19)
   2afbc:	003f7806 	br	2ada0 <__alt_data_end+0xf802ada0>
   2afc0:	38803fcc 	andi	r2,r7,255
   2afc4:	1080201c 	xori	r2,r2,128
   2afc8:	10bfe004 	addi	r2,r2,-128
   2afcc:	1002f31e 	bne	r2,zero,2bb9c <___svfiprintf_internal_r+0xf38>
   2afd0:	01000044 	movi	r4,1
   2afd4:	01c00804 	movi	r7,32
   2afd8:	98c00007 	ldb	r3,0(r19)
   2afdc:	003f7006 	br	2ada0 <__alt_data_end+0xf802ada0>
   2afe0:	21003fcc 	andi	r4,r4,255
   2afe4:	2003aa1e 	bne	r4,zero,2be90 <___svfiprintf_internal_r+0x122c>
   2afe8:	00810034 	movhi	r2,1024
   2afec:	10802d04 	addi	r2,r2,180
   2aff0:	d8802915 	stw	r2,164(sp)
   2aff4:	9080080c 	andi	r2,r18,32
   2aff8:	1000ba26 	beq	r2,zero,2b2e4 <___svfiprintf_internal_r+0x680>
   2affc:	dac02317 	ldw	r11,140(sp)
   2b000:	5f000017 	ldw	fp,0(r11)
   2b004:	5a400117 	ldw	r9,4(r11)
   2b008:	5ac00204 	addi	r11,r11,8
   2b00c:	dac02315 	stw	r11,140(sp)
   2b010:	9080004c 	andi	r2,r18,1
   2b014:	10029026 	beq	r2,zero,2ba58 <___svfiprintf_internal_r+0xdf4>
   2b018:	e244b03a 	or	r2,fp,r9
   2b01c:	1002d41e 	bne	r2,zero,2bb70 <___svfiprintf_internal_r+0xf0c>
   2b020:	d8001d85 	stb	zero,118(sp)
   2b024:	80030b16 	blt	r16,zero,2bc54 <___svfiprintf_internal_r+0xff0>
   2b028:	00bfdfc4 	movi	r2,-129
   2b02c:	90a4703a 	and	r18,r18,r2
   2b030:	0015883a 	mov	r10,zero
   2b034:	80002426 	beq	r16,zero,2b0c8 <___svfiprintf_internal_r+0x464>
   2b038:	0039883a 	mov	fp,zero
   2b03c:	0013883a 	mov	r9,zero
   2b040:	d9002917 	ldw	r4,164(sp)
   2b044:	dc401a04 	addi	r17,sp,104
   2b048:	e08003cc 	andi	r2,fp,15
   2b04c:	4806973a 	slli	r3,r9,28
   2b050:	2085883a 	add	r2,r4,r2
   2b054:	e038d13a 	srli	fp,fp,4
   2b058:	10800003 	ldbu	r2,0(r2)
   2b05c:	4812d13a 	srli	r9,r9,4
   2b060:	8c7fffc4 	addi	r17,r17,-1
   2b064:	1f38b03a 	or	fp,r3,fp
   2b068:	88800005 	stb	r2,0(r17)
   2b06c:	e244b03a 	or	r2,fp,r9
   2b070:	103ff51e 	bne	r2,zero,2b048 <__alt_data_end+0xf802b048>
   2b074:	dac01e17 	ldw	r11,120(sp)
   2b078:	5c57c83a 	sub	r11,r11,r17
   2b07c:	dac02115 	stw	r11,132(sp)
   2b080:	00001406 	br	2b0d4 <___svfiprintf_internal_r+0x470>
   2b084:	21003fcc 	andi	r4,r4,255
   2b088:	2003741e 	bne	r4,zero,2be5c <___svfiprintf_internal_r+0x11f8>
   2b08c:	9080080c 	andi	r2,r18,32
   2b090:	10014526 	beq	r2,zero,2b5a8 <___svfiprintf_internal_r+0x944>
   2b094:	dac02317 	ldw	r11,140(sp)
   2b098:	d8001d85 	stb	zero,118(sp)
   2b09c:	58c00204 	addi	r3,r11,8
   2b0a0:	5f000017 	ldw	fp,0(r11)
   2b0a4:	5a400117 	ldw	r9,4(r11)
   2b0a8:	8002d916 	blt	r16,zero,2bc10 <___svfiprintf_internal_r+0xfac>
   2b0ac:	013fdfc4 	movi	r4,-129
   2b0b0:	e244b03a 	or	r2,fp,r9
   2b0b4:	d8c02315 	stw	r3,140(sp)
   2b0b8:	9124703a 	and	r18,r18,r4
   2b0bc:	0015883a 	mov	r10,zero
   2b0c0:	1000b91e 	bne	r2,zero,2b3a8 <___svfiprintf_internal_r+0x744>
   2b0c4:	8002e61e 	bne	r16,zero,2bc60 <___svfiprintf_internal_r+0xffc>
   2b0c8:	0021883a 	mov	r16,zero
   2b0cc:	d8002115 	stw	zero,132(sp)
   2b0d0:	dc401a04 	addi	r17,sp,104
   2b0d4:	d8c02117 	ldw	r3,132(sp)
   2b0d8:	dc002015 	stw	r16,128(sp)
   2b0dc:	80c0010e 	bge	r16,r3,2b0e4 <___svfiprintf_internal_r+0x480>
   2b0e0:	d8c02015 	stw	r3,128(sp)
   2b0e4:	52803fcc 	andi	r10,r10,255
   2b0e8:	5280201c 	xori	r10,r10,128
   2b0ec:	52bfe004 	addi	r10,r10,-128
   2b0f0:	50003c26 	beq	r10,zero,2b1e4 <___svfiprintf_internal_r+0x580>
   2b0f4:	dac02017 	ldw	r11,128(sp)
   2b0f8:	5ac00044 	addi	r11,r11,1
   2b0fc:	dac02015 	stw	r11,128(sp)
   2b100:	00003806 	br	2b1e4 <___svfiprintf_internal_r+0x580>
   2b104:	01000044 	movi	r4,1
   2b108:	01c00ac4 	movi	r7,43
   2b10c:	98c00007 	ldb	r3,0(r19)
   2b110:	003f2306 	br	2ada0 <__alt_data_end+0xf802ada0>
   2b114:	21003fcc 	andi	r4,r4,255
   2b118:	2003481e 	bne	r4,zero,2be3c <___svfiprintf_internal_r+0x11d8>
   2b11c:	9080080c 	andi	r2,r18,32
   2b120:	10013b26 	beq	r2,zero,2b610 <___svfiprintf_internal_r+0x9ac>
   2b124:	dac02317 	ldw	r11,140(sp)
   2b128:	d8001d85 	stb	zero,118(sp)
   2b12c:	58800204 	addi	r2,r11,8
   2b130:	5f000017 	ldw	fp,0(r11)
   2b134:	5a400117 	ldw	r9,4(r11)
   2b138:	8002a816 	blt	r16,zero,2bbdc <___svfiprintf_internal_r+0xf78>
   2b13c:	013fdfc4 	movi	r4,-129
   2b140:	e246b03a 	or	r3,fp,r9
   2b144:	d8802315 	stw	r2,140(sp)
   2b148:	9124703a 	and	r18,r18,r4
   2b14c:	18013c26 	beq	r3,zero,2b640 <___svfiprintf_internal_r+0x9dc>
   2b150:	0015883a 	mov	r10,zero
   2b154:	dc401a04 	addi	r17,sp,104
   2b158:	e006d0fa 	srli	r3,fp,3
   2b15c:	4808977a 	slli	r4,r9,29
   2b160:	4812d0fa 	srli	r9,r9,3
   2b164:	e70001cc 	andi	fp,fp,7
   2b168:	e0800c04 	addi	r2,fp,48
   2b16c:	8c7fffc4 	addi	r17,r17,-1
   2b170:	20f8b03a 	or	fp,r4,r3
   2b174:	88800005 	stb	r2,0(r17)
   2b178:	e246b03a 	or	r3,fp,r9
   2b17c:	183ff61e 	bne	r3,zero,2b158 <__alt_data_end+0xf802b158>
   2b180:	90c0004c 	andi	r3,r18,1
   2b184:	1800a526 	beq	r3,zero,2b41c <___svfiprintf_internal_r+0x7b8>
   2b188:	10803fcc 	andi	r2,r2,255
   2b18c:	1080201c 	xori	r2,r2,128
   2b190:	10bfe004 	addi	r2,r2,-128
   2b194:	00c00c04 	movi	r3,48
   2b198:	10ffb626 	beq	r2,r3,2b074 <__alt_data_end+0xf802b074>
   2b19c:	88ffffc5 	stb	r3,-1(r17)
   2b1a0:	d8c01e17 	ldw	r3,120(sp)
   2b1a4:	88bfffc4 	addi	r2,r17,-1
   2b1a8:	1023883a 	mov	r17,r2
   2b1ac:	1887c83a 	sub	r3,r3,r2
   2b1b0:	d8c02115 	stw	r3,132(sp)
   2b1b4:	003fc706 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b1b8:	dac02317 	ldw	r11,140(sp)
   2b1bc:	00c00044 	movi	r3,1
   2b1c0:	d8c02015 	stw	r3,128(sp)
   2b1c4:	58800017 	ldw	r2,0(r11)
   2b1c8:	5ac00104 	addi	r11,r11,4
   2b1cc:	d8001d85 	stb	zero,118(sp)
   2b1d0:	d8801005 	stb	r2,64(sp)
   2b1d4:	dac02315 	stw	r11,140(sp)
   2b1d8:	d8c02115 	stw	r3,132(sp)
   2b1dc:	dc401004 	addi	r17,sp,64
   2b1e0:	0021883a 	mov	r16,zero
   2b1e4:	90c0008c 	andi	r3,r18,2
   2b1e8:	d8c02215 	stw	r3,136(sp)
   2b1ec:	18000326 	beq	r3,zero,2b1fc <___svfiprintf_internal_r+0x598>
   2b1f0:	dac02017 	ldw	r11,128(sp)
   2b1f4:	5ac00084 	addi	r11,r11,2
   2b1f8:	dac02015 	stw	r11,128(sp)
   2b1fc:	90c0210c 	andi	r3,r18,132
   2b200:	d8c02615 	stw	r3,152(sp)
   2b204:	1801131e 	bne	r3,zero,2b654 <___svfiprintf_internal_r+0x9f0>
   2b208:	dac02417 	ldw	r11,144(sp)
   2b20c:	d8c02017 	ldw	r3,128(sp)
   2b210:	58f9c83a 	sub	fp,r11,r3
   2b214:	07010f0e 	bge	zero,fp,2b654 <___svfiprintf_internal_r+0x9f0>
   2b218:	02400404 	movi	r9,16
   2b21c:	d8c01c17 	ldw	r3,112(sp)
   2b220:	d8801b17 	ldw	r2,108(sp)
   2b224:	4f02d60e 	bge	r9,fp,2bd80 <___svfiprintf_internal_r+0x111c>
   2b228:	01410034 	movhi	r5,1024
   2b22c:	29409904 	addi	r5,r5,612
   2b230:	d9402815 	stw	r5,160(sp)
   2b234:	028001c4 	movi	r10,7
   2b238:	00000306 	br	2b248 <___svfiprintf_internal_r+0x5e4>
   2b23c:	e73ffc04 	addi	fp,fp,-16
   2b240:	42000204 	addi	r8,r8,8
   2b244:	4f00150e 	bge	r9,fp,2b29c <___svfiprintf_internal_r+0x638>
   2b248:	18c00404 	addi	r3,r3,16
   2b24c:	10800044 	addi	r2,r2,1
   2b250:	45800015 	stw	r22,0(r8)
   2b254:	42400115 	stw	r9,4(r8)
   2b258:	d8c01c15 	stw	r3,112(sp)
   2b25c:	d8801b15 	stw	r2,108(sp)
   2b260:	50bff60e 	bge	r10,r2,2b23c <__alt_data_end+0xf802b23c>
   2b264:	d9801a04 	addi	r6,sp,104
   2b268:	b80b883a 	mov	r5,r23
   2b26c:	a809883a 	mov	r4,r21
   2b270:	da402c15 	stw	r9,176(sp)
   2b274:	da802d15 	stw	r10,180(sp)
   2b278:	002aa940 	call	2aa94 <__ssprint_r>
   2b27c:	da402c17 	ldw	r9,176(sp)
   2b280:	da802d17 	ldw	r10,180(sp)
   2b284:	1001851e 	bne	r2,zero,2b89c <___svfiprintf_internal_r+0xc38>
   2b288:	e73ffc04 	addi	fp,fp,-16
   2b28c:	d8c01c17 	ldw	r3,112(sp)
   2b290:	d8801b17 	ldw	r2,108(sp)
   2b294:	d811883a 	mov	r8,sp
   2b298:	4f3feb16 	blt	r9,fp,2b248 <__alt_data_end+0xf802b248>
   2b29c:	dac02817 	ldw	r11,160(sp)
   2b2a0:	e0c7883a 	add	r3,fp,r3
   2b2a4:	10800044 	addi	r2,r2,1
   2b2a8:	42c00015 	stw	r11,0(r8)
   2b2ac:	47000115 	stw	fp,4(r8)
   2b2b0:	d8c01c15 	stw	r3,112(sp)
   2b2b4:	d8801b15 	stw	r2,108(sp)
   2b2b8:	010001c4 	movi	r4,7
   2b2bc:	2081ee16 	blt	r4,r2,2ba78 <___svfiprintf_internal_r+0xe14>
   2b2c0:	42000204 	addi	r8,r8,8
   2b2c4:	0000e506 	br	2b65c <___svfiprintf_internal_r+0x9f8>
   2b2c8:	21003fcc 	andi	r4,r4,255
   2b2cc:	2002dd1e 	bne	r4,zero,2be44 <___svfiprintf_internal_r+0x11e0>
   2b2d0:	00810034 	movhi	r2,1024
   2b2d4:	10802804 	addi	r2,r2,160
   2b2d8:	d8802915 	stw	r2,164(sp)
   2b2dc:	9080080c 	andi	r2,r18,32
   2b2e0:	103f461e 	bne	r2,zero,2affc <__alt_data_end+0xf802affc>
   2b2e4:	9080040c 	andi	r2,r18,16
   2b2e8:	10022e1e 	bne	r2,zero,2bba4 <___svfiprintf_internal_r+0xf40>
   2b2ec:	9080100c 	andi	r2,r18,64
   2b2f0:	dac02317 	ldw	r11,140(sp)
   2b2f4:	10027326 	beq	r2,zero,2bcc4 <___svfiprintf_internal_r+0x1060>
   2b2f8:	5f00000b 	ldhu	fp,0(r11)
   2b2fc:	5ac00104 	addi	r11,r11,4
   2b300:	0013883a 	mov	r9,zero
   2b304:	dac02315 	stw	r11,140(sp)
   2b308:	003f4106 	br	2b010 <__alt_data_end+0xf802b010>
   2b30c:	21003fcc 	andi	r4,r4,255
   2b310:	2002e11e 	bne	r4,zero,2be98 <___svfiprintf_internal_r+0x1234>
   2b314:	9080080c 	andi	r2,r18,32
   2b318:	1002011e 	bne	r2,zero,2bb20 <___svfiprintf_internal_r+0xebc>
   2b31c:	9080040c 	andi	r2,r18,16
   2b320:	10023e1e 	bne	r2,zero,2bc1c <___svfiprintf_internal_r+0xfb8>
   2b324:	9480100c 	andi	r18,r18,64
   2b328:	90023c26 	beq	r18,zero,2bc1c <___svfiprintf_internal_r+0xfb8>
   2b32c:	dac02317 	ldw	r11,140(sp)
   2b330:	58800017 	ldw	r2,0(r11)
   2b334:	5ac00104 	addi	r11,r11,4
   2b338:	dac02315 	stw	r11,140(sp)
   2b33c:	dac02517 	ldw	r11,148(sp)
   2b340:	12c0000d 	sth	r11,0(r2)
   2b344:	003e6e06 	br	2ad00 <__alt_data_end+0xf802ad00>
   2b348:	98c00007 	ldb	r3,0(r19)
   2b34c:	1a422926 	beq	r3,r9,2bbf4 <___svfiprintf_internal_r+0xf90>
   2b350:	94800414 	ori	r18,r18,16
   2b354:	003e9206 	br	2ada0 <__alt_data_end+0xf802ada0>
   2b358:	94801014 	ori	r18,r18,64
   2b35c:	98c00007 	ldb	r3,0(r19)
   2b360:	003e8f06 	br	2ada0 <__alt_data_end+0xf802ada0>
   2b364:	21003fcc 	andi	r4,r4,255
   2b368:	2002c71e 	bne	r4,zero,2be88 <___svfiprintf_internal_r+0x1224>
   2b36c:	9080080c 	andi	r2,r18,32
   2b370:	10004926 	beq	r2,zero,2b498 <___svfiprintf_internal_r+0x834>
   2b374:	dac02317 	ldw	r11,140(sp)
   2b378:	58800117 	ldw	r2,4(r11)
   2b37c:	5f000017 	ldw	fp,0(r11)
   2b380:	5ac00204 	addi	r11,r11,8
   2b384:	dac02315 	stw	r11,140(sp)
   2b388:	1013883a 	mov	r9,r2
   2b38c:	10004b16 	blt	r2,zero,2b4bc <___svfiprintf_internal_r+0x858>
   2b390:	da801d83 	ldbu	r10,118(sp)
   2b394:	8001cb16 	blt	r16,zero,2bac4 <___svfiprintf_internal_r+0xe60>
   2b398:	00ffdfc4 	movi	r3,-129
   2b39c:	e244b03a 	or	r2,fp,r9
   2b3a0:	90e4703a 	and	r18,r18,r3
   2b3a4:	103f4726 	beq	r2,zero,2b0c4 <__alt_data_end+0xf802b0c4>
   2b3a8:	48008c26 	beq	r9,zero,2b5dc <___svfiprintf_internal_r+0x978>
   2b3ac:	dc802015 	stw	r18,128(sp)
   2b3b0:	dc002115 	stw	r16,132(sp)
   2b3b4:	dc401a04 	addi	r17,sp,104
   2b3b8:	e021883a 	mov	r16,fp
   2b3bc:	da002215 	stw	r8,136(sp)
   2b3c0:	5039883a 	mov	fp,r10
   2b3c4:	4825883a 	mov	r18,r9
   2b3c8:	8009883a 	mov	r4,r16
   2b3cc:	900b883a 	mov	r5,r18
   2b3d0:	01800284 	movi	r6,10
   2b3d4:	000f883a 	mov	r7,zero
   2b3d8:	002e1700 	call	2e170 <__umoddi3>
   2b3dc:	10800c04 	addi	r2,r2,48
   2b3e0:	8c7fffc4 	addi	r17,r17,-1
   2b3e4:	8009883a 	mov	r4,r16
   2b3e8:	900b883a 	mov	r5,r18
   2b3ec:	88800005 	stb	r2,0(r17)
   2b3f0:	01800284 	movi	r6,10
   2b3f4:	000f883a 	mov	r7,zero
   2b3f8:	002dbf80 	call	2dbf8 <__udivdi3>
   2b3fc:	1021883a 	mov	r16,r2
   2b400:	10c4b03a 	or	r2,r2,r3
   2b404:	1825883a 	mov	r18,r3
   2b408:	103fef1e 	bne	r2,zero,2b3c8 <__alt_data_end+0xf802b3c8>
   2b40c:	dc802017 	ldw	r18,128(sp)
   2b410:	dc002117 	ldw	r16,132(sp)
   2b414:	da002217 	ldw	r8,136(sp)
   2b418:	e015883a 	mov	r10,fp
   2b41c:	d8c01e17 	ldw	r3,120(sp)
   2b420:	1c47c83a 	sub	r3,r3,r17
   2b424:	d8c02115 	stw	r3,132(sp)
   2b428:	003f2a06 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b42c:	dac02317 	ldw	r11,140(sp)
   2b430:	d8001d85 	stb	zero,118(sp)
   2b434:	5c400017 	ldw	r17,0(r11)
   2b438:	5f000104 	addi	fp,r11,4
   2b43c:	88022f26 	beq	r17,zero,2bcfc <___svfiprintf_internal_r+0x1098>
   2b440:	80022516 	blt	r16,zero,2bcd8 <___svfiprintf_internal_r+0x1074>
   2b444:	800d883a 	mov	r6,r16
   2b448:	000b883a 	mov	r5,zero
   2b44c:	8809883a 	mov	r4,r17
   2b450:	da002c15 	stw	r8,176(sp)
   2b454:	0028ffc0 	call	28ffc <memchr>
   2b458:	da002c17 	ldw	r8,176(sp)
   2b45c:	10026426 	beq	r2,zero,2bdf0 <___svfiprintf_internal_r+0x118c>
   2b460:	1445c83a 	sub	r2,r2,r17
   2b464:	d8802115 	stw	r2,132(sp)
   2b468:	da801d83 	ldbu	r10,118(sp)
   2b46c:	df002315 	stw	fp,140(sp)
   2b470:	0021883a 	mov	r16,zero
   2b474:	003f1706 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b478:	94800814 	ori	r18,r18,32
   2b47c:	98c00007 	ldb	r3,0(r19)
   2b480:	003e4706 	br	2ada0 <__alt_data_end+0xf802ada0>
   2b484:	21003fcc 	andi	r4,r4,255
   2b488:	2002701e 	bne	r4,zero,2be4c <___svfiprintf_internal_r+0x11e8>
   2b48c:	94800414 	ori	r18,r18,16
   2b490:	9080080c 	andi	r2,r18,32
   2b494:	103fb71e 	bne	r2,zero,2b374 <__alt_data_end+0xf802b374>
   2b498:	9080040c 	andi	r2,r18,16
   2b49c:	1001ab26 	beq	r2,zero,2bb4c <___svfiprintf_internal_r+0xee8>
   2b4a0:	dac02317 	ldw	r11,140(sp)
   2b4a4:	5f000017 	ldw	fp,0(r11)
   2b4a8:	5ac00104 	addi	r11,r11,4
   2b4ac:	dac02315 	stw	r11,140(sp)
   2b4b0:	e013d7fa 	srai	r9,fp,31
   2b4b4:	4805883a 	mov	r2,r9
   2b4b8:	103fb50e 	bge	r2,zero,2b390 <__alt_data_end+0xf802b390>
   2b4bc:	0739c83a 	sub	fp,zero,fp
   2b4c0:	02800b44 	movi	r10,45
   2b4c4:	e004c03a 	cmpne	r2,fp,zero
   2b4c8:	0253c83a 	sub	r9,zero,r9
   2b4cc:	da801d85 	stb	r10,118(sp)
   2b4d0:	4893c83a 	sub	r9,r9,r2
   2b4d4:	80023016 	blt	r16,zero,2bd98 <___svfiprintf_internal_r+0x1134>
   2b4d8:	00bfdfc4 	movi	r2,-129
   2b4dc:	90a4703a 	and	r18,r18,r2
   2b4e0:	483fb21e 	bne	r9,zero,2b3ac <__alt_data_end+0xf802b3ac>
   2b4e4:	00003d06 	br	2b5dc <___svfiprintf_internal_r+0x978>
   2b4e8:	9817883a 	mov	r11,r19
   2b4ec:	d8002415 	stw	zero,144(sp)
   2b4f0:	18bff404 	addi	r2,r3,-48
   2b4f4:	0019883a 	mov	r12,zero
   2b4f8:	58c00007 	ldb	r3,0(r11)
   2b4fc:	630002a4 	muli	r12,r12,10
   2b500:	9cc00044 	addi	r19,r19,1
   2b504:	9817883a 	mov	r11,r19
   2b508:	1319883a 	add	r12,r2,r12
   2b50c:	18bff404 	addi	r2,r3,-48
   2b510:	30bff92e 	bgeu	r6,r2,2b4f8 <__alt_data_end+0xf802b4f8>
   2b514:	db002415 	stw	r12,144(sp)
   2b518:	18bff804 	addi	r2,r3,-32
   2b51c:	28be232e 	bgeu	r5,r2,2adac <__alt_data_end+0xf802adac>
   2b520:	21003fcc 	andi	r4,r4,255
   2b524:	20024b1e 	bne	r4,zero,2be54 <___svfiprintf_internal_r+0x11f0>
   2b528:	1800d626 	beq	r3,zero,2b884 <___svfiprintf_internal_r+0xc20>
   2b52c:	02c00044 	movi	r11,1
   2b530:	dac02015 	stw	r11,128(sp)
   2b534:	d8c01005 	stb	r3,64(sp)
   2b538:	d8001d85 	stb	zero,118(sp)
   2b53c:	dac02115 	stw	r11,132(sp)
   2b540:	dc401004 	addi	r17,sp,64
   2b544:	003f2606 	br	2b1e0 <__alt_data_end+0xf802b1e0>
   2b548:	94802014 	ori	r18,r18,128
   2b54c:	98c00007 	ldb	r3,0(r19)
   2b550:	003e1306 	br	2ada0 <__alt_data_end+0xf802ada0>
   2b554:	98c00007 	ldb	r3,0(r19)
   2b558:	9ac00044 	addi	r11,r19,1
   2b55c:	1a822b26 	beq	r3,r10,2be0c <___svfiprintf_internal_r+0x11a8>
   2b560:	18bff404 	addi	r2,r3,-48
   2b564:	0021883a 	mov	r16,zero
   2b568:	30821e36 	bltu	r6,r2,2bde4 <___svfiprintf_internal_r+0x1180>
   2b56c:	58c00007 	ldb	r3,0(r11)
   2b570:	840002a4 	muli	r16,r16,10
   2b574:	5cc00044 	addi	r19,r11,1
   2b578:	9817883a 	mov	r11,r19
   2b57c:	80a1883a 	add	r16,r16,r2
   2b580:	18bff404 	addi	r2,r3,-48
   2b584:	30bff92e 	bgeu	r6,r2,2b56c <__alt_data_end+0xf802b56c>
   2b588:	803e060e 	bge	r16,zero,2ada4 <__alt_data_end+0xf802ada4>
   2b58c:	043fffc4 	movi	r16,-1
   2b590:	003e0406 	br	2ada4 <__alt_data_end+0xf802ada4>
   2b594:	21003fcc 	andi	r4,r4,255
   2b598:	2002371e 	bne	r4,zero,2be78 <___svfiprintf_internal_r+0x1214>
   2b59c:	94800414 	ori	r18,r18,16
   2b5a0:	9080080c 	andi	r2,r18,32
   2b5a4:	103ebb1e 	bne	r2,zero,2b094 <__alt_data_end+0xf802b094>
   2b5a8:	9080040c 	andi	r2,r18,16
   2b5ac:	10013b26 	beq	r2,zero,2ba9c <___svfiprintf_internal_r+0xe38>
   2b5b0:	dac02317 	ldw	r11,140(sp)
   2b5b4:	d8001d85 	stb	zero,118(sp)
   2b5b8:	0013883a 	mov	r9,zero
   2b5bc:	58800104 	addi	r2,r11,4
   2b5c0:	5f000017 	ldw	fp,0(r11)
   2b5c4:	80013d16 	blt	r16,zero,2babc <___svfiprintf_internal_r+0xe58>
   2b5c8:	00ffdfc4 	movi	r3,-129
   2b5cc:	d8802315 	stw	r2,140(sp)
   2b5d0:	90e4703a 	and	r18,r18,r3
   2b5d4:	0015883a 	mov	r10,zero
   2b5d8:	e03eba26 	beq	fp,zero,2b0c4 <__alt_data_end+0xf802b0c4>
   2b5dc:	00800244 	movi	r2,9
   2b5e0:	173f7236 	bltu	r2,fp,2b3ac <__alt_data_end+0xf802b3ac>
   2b5e4:	dac02b17 	ldw	r11,172(sp)
   2b5e8:	e7000c04 	addi	fp,fp,48
   2b5ec:	df0019c5 	stb	fp,103(sp)
   2b5f0:	dac02115 	stw	r11,132(sp)
   2b5f4:	dc4019c4 	addi	r17,sp,103
   2b5f8:	003eb606 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2b5fc:	21003fcc 	andi	r4,r4,255
   2b600:	20021f1e 	bne	r4,zero,2be80 <___svfiprintf_internal_r+0x121c>
   2b604:	94800414 	ori	r18,r18,16
   2b608:	9080080c 	andi	r2,r18,32
   2b60c:	103ec51e 	bne	r2,zero,2b124 <__alt_data_end+0xf802b124>
   2b610:	9080040c 	andi	r2,r18,16
   2b614:	10016926 	beq	r2,zero,2bbbc <___svfiprintf_internal_r+0xf58>
   2b618:	dac02317 	ldw	r11,140(sp)
   2b61c:	d8001d85 	stb	zero,118(sp)
   2b620:	0013883a 	mov	r9,zero
   2b624:	58800104 	addi	r2,r11,4
   2b628:	5f000017 	ldw	fp,0(r11)
   2b62c:	80016b16 	blt	r16,zero,2bbdc <___svfiprintf_internal_r+0xf78>
   2b630:	00ffdfc4 	movi	r3,-129
   2b634:	d8802315 	stw	r2,140(sp)
   2b638:	90e4703a 	and	r18,r18,r3
   2b63c:	e03ec41e 	bne	fp,zero,2b150 <__alt_data_end+0xf802b150>
   2b640:	0015883a 	mov	r10,zero
   2b644:	8001c226 	beq	r16,zero,2bd50 <___svfiprintf_internal_r+0x10ec>
   2b648:	0039883a 	mov	fp,zero
   2b64c:	0013883a 	mov	r9,zero
   2b650:	003ec006 	br	2b154 <__alt_data_end+0xf802b154>
   2b654:	d8c01c17 	ldw	r3,112(sp)
   2b658:	d8801b17 	ldw	r2,108(sp)
   2b65c:	d9001d87 	ldb	r4,118(sp)
   2b660:	20000b26 	beq	r4,zero,2b690 <___svfiprintf_internal_r+0xa2c>
   2b664:	d9001d84 	addi	r4,sp,118
   2b668:	18c00044 	addi	r3,r3,1
   2b66c:	10800044 	addi	r2,r2,1
   2b670:	41000015 	stw	r4,0(r8)
   2b674:	01000044 	movi	r4,1
   2b678:	41000115 	stw	r4,4(r8)
   2b67c:	d8c01c15 	stw	r3,112(sp)
   2b680:	d8801b15 	stw	r2,108(sp)
   2b684:	010001c4 	movi	r4,7
   2b688:	2080e116 	blt	r4,r2,2ba10 <___svfiprintf_internal_r+0xdac>
   2b68c:	42000204 	addi	r8,r8,8
   2b690:	dac02217 	ldw	r11,136(sp)
   2b694:	58000b26 	beq	r11,zero,2b6c4 <___svfiprintf_internal_r+0xa60>
   2b698:	d9001d04 	addi	r4,sp,116
   2b69c:	18c00084 	addi	r3,r3,2
   2b6a0:	10800044 	addi	r2,r2,1
   2b6a4:	41000015 	stw	r4,0(r8)
   2b6a8:	01000084 	movi	r4,2
   2b6ac:	41000115 	stw	r4,4(r8)
   2b6b0:	d8c01c15 	stw	r3,112(sp)
   2b6b4:	d8801b15 	stw	r2,108(sp)
   2b6b8:	010001c4 	movi	r4,7
   2b6bc:	2080dd16 	blt	r4,r2,2ba34 <___svfiprintf_internal_r+0xdd0>
   2b6c0:	42000204 	addi	r8,r8,8
   2b6c4:	dac02617 	ldw	r11,152(sp)
   2b6c8:	01002004 	movi	r4,128
   2b6cc:	59008426 	beq	r11,r4,2b8e0 <___svfiprintf_internal_r+0xc7c>
   2b6d0:	dac02117 	ldw	r11,132(sp)
   2b6d4:	82e1c83a 	sub	r16,r16,r11
   2b6d8:	0400270e 	bge	zero,r16,2b778 <___svfiprintf_internal_r+0xb14>
   2b6dc:	01c00404 	movi	r7,16
   2b6e0:	3c016a0e 	bge	r7,r16,2bc8c <___svfiprintf_internal_r+0x1028>
   2b6e4:	01410034 	movhi	r5,1024
   2b6e8:	29409504 	addi	r5,r5,596
   2b6ec:	d9402215 	stw	r5,136(sp)
   2b6f0:	070001c4 	movi	fp,7
   2b6f4:	00000306 	br	2b704 <___svfiprintf_internal_r+0xaa0>
   2b6f8:	843ffc04 	addi	r16,r16,-16
   2b6fc:	42000204 	addi	r8,r8,8
   2b700:	3c00130e 	bge	r7,r16,2b750 <___svfiprintf_internal_r+0xaec>
   2b704:	18c00404 	addi	r3,r3,16
   2b708:	10800044 	addi	r2,r2,1
   2b70c:	45000015 	stw	r20,0(r8)
   2b710:	41c00115 	stw	r7,4(r8)
   2b714:	d8c01c15 	stw	r3,112(sp)
   2b718:	d8801b15 	stw	r2,108(sp)
   2b71c:	e0bff60e 	bge	fp,r2,2b6f8 <__alt_data_end+0xf802b6f8>
   2b720:	d9801a04 	addi	r6,sp,104
   2b724:	b80b883a 	mov	r5,r23
   2b728:	a809883a 	mov	r4,r21
   2b72c:	d9c02c15 	stw	r7,176(sp)
   2b730:	002aa940 	call	2aa94 <__ssprint_r>
   2b734:	d9c02c17 	ldw	r7,176(sp)
   2b738:	1000581e 	bne	r2,zero,2b89c <___svfiprintf_internal_r+0xc38>
   2b73c:	843ffc04 	addi	r16,r16,-16
   2b740:	d8c01c17 	ldw	r3,112(sp)
   2b744:	d8801b17 	ldw	r2,108(sp)
   2b748:	d811883a 	mov	r8,sp
   2b74c:	3c3fed16 	blt	r7,r16,2b704 <__alt_data_end+0xf802b704>
   2b750:	dac02217 	ldw	r11,136(sp)
   2b754:	1c07883a 	add	r3,r3,r16
   2b758:	10800044 	addi	r2,r2,1
   2b75c:	42c00015 	stw	r11,0(r8)
   2b760:	44000115 	stw	r16,4(r8)
   2b764:	d8c01c15 	stw	r3,112(sp)
   2b768:	d8801b15 	stw	r2,108(sp)
   2b76c:	010001c4 	movi	r4,7
   2b770:	20809e16 	blt	r4,r2,2b9ec <___svfiprintf_internal_r+0xd88>
   2b774:	42000204 	addi	r8,r8,8
   2b778:	dac02117 	ldw	r11,132(sp)
   2b77c:	10800044 	addi	r2,r2,1
   2b780:	44400015 	stw	r17,0(r8)
   2b784:	58c7883a 	add	r3,r11,r3
   2b788:	42c00115 	stw	r11,4(r8)
   2b78c:	d8c01c15 	stw	r3,112(sp)
   2b790:	d8801b15 	stw	r2,108(sp)
   2b794:	010001c4 	movi	r4,7
   2b798:	20807f16 	blt	r4,r2,2b998 <___svfiprintf_internal_r+0xd34>
   2b79c:	42000204 	addi	r8,r8,8
   2b7a0:	9480010c 	andi	r18,r18,4
   2b7a4:	90002926 	beq	r18,zero,2b84c <___svfiprintf_internal_r+0xbe8>
   2b7a8:	dac02417 	ldw	r11,144(sp)
   2b7ac:	d8802017 	ldw	r2,128(sp)
   2b7b0:	58a1c83a 	sub	r16,r11,r2
   2b7b4:	0400250e 	bge	zero,r16,2b84c <___svfiprintf_internal_r+0xbe8>
   2b7b8:	04400404 	movi	r17,16
   2b7bc:	d8801b17 	ldw	r2,108(sp)
   2b7c0:	8c017c0e 	bge	r17,r16,2bdb4 <___svfiprintf_internal_r+0x1150>
   2b7c4:	01410034 	movhi	r5,1024
   2b7c8:	29409904 	addi	r5,r5,612
   2b7cc:	d9402815 	stw	r5,160(sp)
   2b7d0:	048001c4 	movi	r18,7
   2b7d4:	00000306 	br	2b7e4 <___svfiprintf_internal_r+0xb80>
   2b7d8:	843ffc04 	addi	r16,r16,-16
   2b7dc:	42000204 	addi	r8,r8,8
   2b7e0:	8c00110e 	bge	r17,r16,2b828 <___svfiprintf_internal_r+0xbc4>
   2b7e4:	18c00404 	addi	r3,r3,16
   2b7e8:	10800044 	addi	r2,r2,1
   2b7ec:	45800015 	stw	r22,0(r8)
   2b7f0:	44400115 	stw	r17,4(r8)
   2b7f4:	d8c01c15 	stw	r3,112(sp)
   2b7f8:	d8801b15 	stw	r2,108(sp)
   2b7fc:	90bff60e 	bge	r18,r2,2b7d8 <__alt_data_end+0xf802b7d8>
   2b800:	d9801a04 	addi	r6,sp,104
   2b804:	b80b883a 	mov	r5,r23
   2b808:	a809883a 	mov	r4,r21
   2b80c:	002aa940 	call	2aa94 <__ssprint_r>
   2b810:	1000221e 	bne	r2,zero,2b89c <___svfiprintf_internal_r+0xc38>
   2b814:	843ffc04 	addi	r16,r16,-16
   2b818:	d8c01c17 	ldw	r3,112(sp)
   2b81c:	d8801b17 	ldw	r2,108(sp)
   2b820:	d811883a 	mov	r8,sp
   2b824:	8c3fef16 	blt	r17,r16,2b7e4 <__alt_data_end+0xf802b7e4>
   2b828:	dac02817 	ldw	r11,160(sp)
   2b82c:	1c07883a 	add	r3,r3,r16
   2b830:	10800044 	addi	r2,r2,1
   2b834:	42c00015 	stw	r11,0(r8)
   2b838:	44000115 	stw	r16,4(r8)
   2b83c:	d8c01c15 	stw	r3,112(sp)
   2b840:	d8801b15 	stw	r2,108(sp)
   2b844:	010001c4 	movi	r4,7
   2b848:	2080aa16 	blt	r4,r2,2baf4 <___svfiprintf_internal_r+0xe90>
   2b84c:	d8802417 	ldw	r2,144(sp)
   2b850:	dac02017 	ldw	r11,128(sp)
   2b854:	12c0010e 	bge	r2,r11,2b85c <___svfiprintf_internal_r+0xbf8>
   2b858:	5805883a 	mov	r2,r11
   2b85c:	dac02517 	ldw	r11,148(sp)
   2b860:	5897883a 	add	r11,r11,r2
   2b864:	dac02515 	stw	r11,148(sp)
   2b868:	1800531e 	bne	r3,zero,2b9b8 <___svfiprintf_internal_r+0xd54>
   2b86c:	98800007 	ldb	r2,0(r19)
   2b870:	d8001b15 	stw	zero,108(sp)
   2b874:	d811883a 	mov	r8,sp
   2b878:	103d231e 	bne	r2,zero,2ad08 <__alt_data_end+0xf802ad08>
   2b87c:	9823883a 	mov	r17,r19
   2b880:	003d3906 	br	2ad68 <__alt_data_end+0xf802ad68>
   2b884:	d8801c17 	ldw	r2,112(sp)
   2b888:	10000426 	beq	r2,zero,2b89c <___svfiprintf_internal_r+0xc38>
   2b88c:	d9402717 	ldw	r5,156(sp)
   2b890:	d9002a17 	ldw	r4,168(sp)
   2b894:	d9801a04 	addi	r6,sp,104
   2b898:	002aa940 	call	2aa94 <__ssprint_r>
   2b89c:	dac02717 	ldw	r11,156(sp)
   2b8a0:	d8802517 	ldw	r2,148(sp)
   2b8a4:	58c0030b 	ldhu	r3,12(r11)
   2b8a8:	18c0100c 	andi	r3,r3,64
   2b8ac:	1801381e 	bne	r3,zero,2bd90 <___svfiprintf_internal_r+0x112c>
   2b8b0:	dfc03717 	ldw	ra,220(sp)
   2b8b4:	df003617 	ldw	fp,216(sp)
   2b8b8:	ddc03517 	ldw	r23,212(sp)
   2b8bc:	dd803417 	ldw	r22,208(sp)
   2b8c0:	dd403317 	ldw	r21,204(sp)
   2b8c4:	dd003217 	ldw	r20,200(sp)
   2b8c8:	dcc03117 	ldw	r19,196(sp)
   2b8cc:	dc803017 	ldw	r18,192(sp)
   2b8d0:	dc402f17 	ldw	r17,188(sp)
   2b8d4:	dc002e17 	ldw	r16,184(sp)
   2b8d8:	dec03804 	addi	sp,sp,224
   2b8dc:	f800283a 	ret
   2b8e0:	dac02417 	ldw	r11,144(sp)
   2b8e4:	d9002017 	ldw	r4,128(sp)
   2b8e8:	5939c83a 	sub	fp,r11,r4
   2b8ec:	073f780e 	bge	zero,fp,2b6d0 <__alt_data_end+0xf802b6d0>
   2b8f0:	02400404 	movi	r9,16
   2b8f4:	4f01370e 	bge	r9,fp,2bdd4 <___svfiprintf_internal_r+0x1170>
   2b8f8:	02c10034 	movhi	r11,1024
   2b8fc:	5ac09504 	addi	r11,r11,596
   2b900:	dac02215 	stw	r11,136(sp)
   2b904:	028001c4 	movi	r10,7
   2b908:	00000306 	br	2b918 <___svfiprintf_internal_r+0xcb4>
   2b90c:	e73ffc04 	addi	fp,fp,-16
   2b910:	42000204 	addi	r8,r8,8
   2b914:	4f00150e 	bge	r9,fp,2b96c <___svfiprintf_internal_r+0xd08>
   2b918:	18c00404 	addi	r3,r3,16
   2b91c:	10800044 	addi	r2,r2,1
   2b920:	45000015 	stw	r20,0(r8)
   2b924:	42400115 	stw	r9,4(r8)
   2b928:	d8c01c15 	stw	r3,112(sp)
   2b92c:	d8801b15 	stw	r2,108(sp)
   2b930:	50bff60e 	bge	r10,r2,2b90c <__alt_data_end+0xf802b90c>
   2b934:	d9801a04 	addi	r6,sp,104
   2b938:	b80b883a 	mov	r5,r23
   2b93c:	a809883a 	mov	r4,r21
   2b940:	da402c15 	stw	r9,176(sp)
   2b944:	da802d15 	stw	r10,180(sp)
   2b948:	002aa940 	call	2aa94 <__ssprint_r>
   2b94c:	da402c17 	ldw	r9,176(sp)
   2b950:	da802d17 	ldw	r10,180(sp)
   2b954:	103fd11e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2b958:	e73ffc04 	addi	fp,fp,-16
   2b95c:	d8c01c17 	ldw	r3,112(sp)
   2b960:	d8801b17 	ldw	r2,108(sp)
   2b964:	d811883a 	mov	r8,sp
   2b968:	4f3feb16 	blt	r9,fp,2b918 <__alt_data_end+0xf802b918>
   2b96c:	dac02217 	ldw	r11,136(sp)
   2b970:	1f07883a 	add	r3,r3,fp
   2b974:	10800044 	addi	r2,r2,1
   2b978:	42c00015 	stw	r11,0(r8)
   2b97c:	47000115 	stw	fp,4(r8)
   2b980:	d8c01c15 	stw	r3,112(sp)
   2b984:	d8801b15 	stw	r2,108(sp)
   2b988:	010001c4 	movi	r4,7
   2b98c:	2080b616 	blt	r4,r2,2bc68 <___svfiprintf_internal_r+0x1004>
   2b990:	42000204 	addi	r8,r8,8
   2b994:	003f4e06 	br	2b6d0 <__alt_data_end+0xf802b6d0>
   2b998:	d9801a04 	addi	r6,sp,104
   2b99c:	b80b883a 	mov	r5,r23
   2b9a0:	a809883a 	mov	r4,r21
   2b9a4:	002aa940 	call	2aa94 <__ssprint_r>
   2b9a8:	103fbc1e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2b9ac:	d8c01c17 	ldw	r3,112(sp)
   2b9b0:	d811883a 	mov	r8,sp
   2b9b4:	003f7a06 	br	2b7a0 <__alt_data_end+0xf802b7a0>
   2b9b8:	d9801a04 	addi	r6,sp,104
   2b9bc:	b80b883a 	mov	r5,r23
   2b9c0:	a809883a 	mov	r4,r21
   2b9c4:	002aa940 	call	2aa94 <__ssprint_r>
   2b9c8:	103fa826 	beq	r2,zero,2b86c <__alt_data_end+0xf802b86c>
   2b9cc:	003fb306 	br	2b89c <__alt_data_end+0xf802b89c>
   2b9d0:	d9801a04 	addi	r6,sp,104
   2b9d4:	b80b883a 	mov	r5,r23
   2b9d8:	a809883a 	mov	r4,r21
   2b9dc:	002aa940 	call	2aa94 <__ssprint_r>
   2b9e0:	103fae1e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2b9e4:	d811883a 	mov	r8,sp
   2b9e8:	003cdc06 	br	2ad5c <__alt_data_end+0xf802ad5c>
   2b9ec:	d9801a04 	addi	r6,sp,104
   2b9f0:	b80b883a 	mov	r5,r23
   2b9f4:	a809883a 	mov	r4,r21
   2b9f8:	002aa940 	call	2aa94 <__ssprint_r>
   2b9fc:	103fa71e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2ba00:	d8c01c17 	ldw	r3,112(sp)
   2ba04:	d8801b17 	ldw	r2,108(sp)
   2ba08:	d811883a 	mov	r8,sp
   2ba0c:	003f5a06 	br	2b778 <__alt_data_end+0xf802b778>
   2ba10:	d9801a04 	addi	r6,sp,104
   2ba14:	b80b883a 	mov	r5,r23
   2ba18:	a809883a 	mov	r4,r21
   2ba1c:	002aa940 	call	2aa94 <__ssprint_r>
   2ba20:	103f9e1e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2ba24:	d8c01c17 	ldw	r3,112(sp)
   2ba28:	d8801b17 	ldw	r2,108(sp)
   2ba2c:	d811883a 	mov	r8,sp
   2ba30:	003f1706 	br	2b690 <__alt_data_end+0xf802b690>
   2ba34:	d9801a04 	addi	r6,sp,104
   2ba38:	b80b883a 	mov	r5,r23
   2ba3c:	a809883a 	mov	r4,r21
   2ba40:	002aa940 	call	2aa94 <__ssprint_r>
   2ba44:	103f951e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2ba48:	d8c01c17 	ldw	r3,112(sp)
   2ba4c:	d8801b17 	ldw	r2,108(sp)
   2ba50:	d811883a 	mov	r8,sp
   2ba54:	003f1b06 	br	2b6c4 <__alt_data_end+0xf802b6c4>
   2ba58:	d8001d85 	stb	zero,118(sp)
   2ba5c:	80007b16 	blt	r16,zero,2bc4c <___svfiprintf_internal_r+0xfe8>
   2ba60:	00ffdfc4 	movi	r3,-129
   2ba64:	e244b03a 	or	r2,fp,r9
   2ba68:	90e4703a 	and	r18,r18,r3
   2ba6c:	103d7026 	beq	r2,zero,2b030 <__alt_data_end+0xf802b030>
   2ba70:	0015883a 	mov	r10,zero
   2ba74:	003d7206 	br	2b040 <__alt_data_end+0xf802b040>
   2ba78:	d9801a04 	addi	r6,sp,104
   2ba7c:	b80b883a 	mov	r5,r23
   2ba80:	a809883a 	mov	r4,r21
   2ba84:	002aa940 	call	2aa94 <__ssprint_r>
   2ba88:	103f841e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2ba8c:	d8c01c17 	ldw	r3,112(sp)
   2ba90:	d8801b17 	ldw	r2,108(sp)
   2ba94:	d811883a 	mov	r8,sp
   2ba98:	003ef006 	br	2b65c <__alt_data_end+0xf802b65c>
   2ba9c:	9080100c 	andi	r2,r18,64
   2baa0:	d8001d85 	stb	zero,118(sp)
   2baa4:	dac02317 	ldw	r11,140(sp)
   2baa8:	10008126 	beq	r2,zero,2bcb0 <___svfiprintf_internal_r+0x104c>
   2baac:	58800104 	addi	r2,r11,4
   2bab0:	5f00000b 	ldhu	fp,0(r11)
   2bab4:	0013883a 	mov	r9,zero
   2bab8:	803ec30e 	bge	r16,zero,2b5c8 <__alt_data_end+0xf802b5c8>
   2babc:	d8802315 	stw	r2,140(sp)
   2bac0:	0015883a 	mov	r10,zero
   2bac4:	e244b03a 	or	r2,fp,r9
   2bac8:	103e371e 	bne	r2,zero,2b3a8 <__alt_data_end+0xf802b3a8>
   2bacc:	00800044 	movi	r2,1
   2bad0:	10803fcc 	andi	r2,r2,255
   2bad4:	00c00044 	movi	r3,1
   2bad8:	10c06126 	beq	r2,r3,2bc60 <___svfiprintf_internal_r+0xffc>
   2badc:	00c00084 	movi	r3,2
   2bae0:	10fd5526 	beq	r2,r3,2b038 <__alt_data_end+0xf802b038>
   2bae4:	003ed806 	br	2b648 <__alt_data_end+0xf802b648>
   2bae8:	d8802315 	stw	r2,140(sp)
   2baec:	98c00007 	ldb	r3,0(r19)
   2baf0:	003cab06 	br	2ada0 <__alt_data_end+0xf802ada0>
   2baf4:	d9801a04 	addi	r6,sp,104
   2baf8:	b80b883a 	mov	r5,r23
   2bafc:	a809883a 	mov	r4,r21
   2bb00:	002aa940 	call	2aa94 <__ssprint_r>
   2bb04:	103f651e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2bb08:	d8c01c17 	ldw	r3,112(sp)
   2bb0c:	003f4f06 	br	2b84c <__alt_data_end+0xf802b84c>
   2bb10:	00810034 	movhi	r2,1024
   2bb14:	10802d04 	addi	r2,r2,180
   2bb18:	d8802915 	stw	r2,164(sp)
   2bb1c:	003d4406 	br	2b030 <__alt_data_end+0xf802b030>
   2bb20:	dac02317 	ldw	r11,140(sp)
   2bb24:	58800017 	ldw	r2,0(r11)
   2bb28:	dac02517 	ldw	r11,148(sp)
   2bb2c:	5807d7fa 	srai	r3,r11,31
   2bb30:	dac02317 	ldw	r11,140(sp)
   2bb34:	10c00115 	stw	r3,4(r2)
   2bb38:	5ac00104 	addi	r11,r11,4
   2bb3c:	dac02315 	stw	r11,140(sp)
   2bb40:	dac02517 	ldw	r11,148(sp)
   2bb44:	12c00015 	stw	r11,0(r2)
   2bb48:	003c6d06 	br	2ad00 <__alt_data_end+0xf802ad00>
   2bb4c:	9080100c 	andi	r2,r18,64
   2bb50:	dac02317 	ldw	r11,140(sp)
   2bb54:	103e5326 	beq	r2,zero,2b4a4 <__alt_data_end+0xf802b4a4>
   2bb58:	5f00000f 	ldh	fp,0(r11)
   2bb5c:	5ac00104 	addi	r11,r11,4
   2bb60:	dac02315 	stw	r11,140(sp)
   2bb64:	e013d7fa 	srai	r9,fp,31
   2bb68:	4805883a 	mov	r2,r9
   2bb6c:	003e0706 	br	2b38c <__alt_data_end+0xf802b38c>
   2bb70:	00800c04 	movi	r2,48
   2bb74:	d8801d05 	stb	r2,116(sp)
   2bb78:	d8c01d45 	stb	r3,117(sp)
   2bb7c:	d8001d85 	stb	zero,118(sp)
   2bb80:	90800094 	ori	r2,r18,2
   2bb84:	80008f16 	blt	r16,zero,2bdc4 <___svfiprintf_internal_r+0x1160>
   2bb88:	00bfdfc4 	movi	r2,-129
   2bb8c:	90a4703a 	and	r18,r18,r2
   2bb90:	94800094 	ori	r18,r18,2
   2bb94:	0015883a 	mov	r10,zero
   2bb98:	003d2906 	br	2b040 <__alt_data_end+0xf802b040>
   2bb9c:	98c00007 	ldb	r3,0(r19)
   2bba0:	003c7f06 	br	2ada0 <__alt_data_end+0xf802ada0>
   2bba4:	dac02317 	ldw	r11,140(sp)
   2bba8:	0013883a 	mov	r9,zero
   2bbac:	5f000017 	ldw	fp,0(r11)
   2bbb0:	5ac00104 	addi	r11,r11,4
   2bbb4:	dac02315 	stw	r11,140(sp)
   2bbb8:	003d1506 	br	2b010 <__alt_data_end+0xf802b010>
   2bbbc:	9080100c 	andi	r2,r18,64
   2bbc0:	d8001d85 	stb	zero,118(sp)
   2bbc4:	dac02317 	ldw	r11,140(sp)
   2bbc8:	10003426 	beq	r2,zero,2bc9c <___svfiprintf_internal_r+0x1038>
   2bbcc:	58800104 	addi	r2,r11,4
   2bbd0:	5f00000b 	ldhu	fp,0(r11)
   2bbd4:	0013883a 	mov	r9,zero
   2bbd8:	803e950e 	bge	r16,zero,2b630 <__alt_data_end+0xf802b630>
   2bbdc:	e246b03a 	or	r3,fp,r9
   2bbe0:	d8802315 	stw	r2,140(sp)
   2bbe4:	183d5a1e 	bne	r3,zero,2b150 <__alt_data_end+0xf802b150>
   2bbe8:	0015883a 	mov	r10,zero
   2bbec:	0005883a 	mov	r2,zero
   2bbf0:	003fb706 	br	2bad0 <__alt_data_end+0xf802bad0>
   2bbf4:	98c00043 	ldbu	r3,1(r19)
   2bbf8:	94800814 	ori	r18,r18,32
   2bbfc:	9cc00044 	addi	r19,r19,1
   2bc00:	18c03fcc 	andi	r3,r3,255
   2bc04:	18c0201c 	xori	r3,r3,128
   2bc08:	18ffe004 	addi	r3,r3,-128
   2bc0c:	003c6406 	br	2ada0 <__alt_data_end+0xf802ada0>
   2bc10:	d8c02315 	stw	r3,140(sp)
   2bc14:	0015883a 	mov	r10,zero
   2bc18:	003faa06 	br	2bac4 <__alt_data_end+0xf802bac4>
   2bc1c:	dac02317 	ldw	r11,140(sp)
   2bc20:	58800017 	ldw	r2,0(r11)
   2bc24:	5ac00104 	addi	r11,r11,4
   2bc28:	dac02315 	stw	r11,140(sp)
   2bc2c:	dac02517 	ldw	r11,148(sp)
   2bc30:	12c00015 	stw	r11,0(r2)
   2bc34:	003c3206 	br	2ad00 <__alt_data_end+0xf802ad00>
   2bc38:	01010034 	movhi	r4,1024
   2bc3c:	21002d04 	addi	r4,r4,180
   2bc40:	d9002915 	stw	r4,164(sp)
   2bc44:	d8c02315 	stw	r3,140(sp)
   2bc48:	1025883a 	mov	r18,r2
   2bc4c:	e244b03a 	or	r2,fp,r9
   2bc50:	103f871e 	bne	r2,zero,2ba70 <__alt_data_end+0xf802ba70>
   2bc54:	0015883a 	mov	r10,zero
   2bc58:	00800084 	movi	r2,2
   2bc5c:	003f9c06 	br	2bad0 <__alt_data_end+0xf802bad0>
   2bc60:	0039883a 	mov	fp,zero
   2bc64:	003e5f06 	br	2b5e4 <__alt_data_end+0xf802b5e4>
   2bc68:	d9801a04 	addi	r6,sp,104
   2bc6c:	b80b883a 	mov	r5,r23
   2bc70:	a809883a 	mov	r4,r21
   2bc74:	002aa940 	call	2aa94 <__ssprint_r>
   2bc78:	103f081e 	bne	r2,zero,2b89c <__alt_data_end+0xf802b89c>
   2bc7c:	d8c01c17 	ldw	r3,112(sp)
   2bc80:	d8801b17 	ldw	r2,108(sp)
   2bc84:	d811883a 	mov	r8,sp
   2bc88:	003e9106 	br	2b6d0 <__alt_data_end+0xf802b6d0>
   2bc8c:	01010034 	movhi	r4,1024
   2bc90:	21009504 	addi	r4,r4,596
   2bc94:	d9002215 	stw	r4,136(sp)
   2bc98:	003ead06 	br	2b750 <__alt_data_end+0xf802b750>
   2bc9c:	58800104 	addi	r2,r11,4
   2bca0:	5f000017 	ldw	fp,0(r11)
   2bca4:	0013883a 	mov	r9,zero
   2bca8:	803e610e 	bge	r16,zero,2b630 <__alt_data_end+0xf802b630>
   2bcac:	003fcb06 	br	2bbdc <__alt_data_end+0xf802bbdc>
   2bcb0:	58800104 	addi	r2,r11,4
   2bcb4:	5f000017 	ldw	fp,0(r11)
   2bcb8:	0013883a 	mov	r9,zero
   2bcbc:	803e420e 	bge	r16,zero,2b5c8 <__alt_data_end+0xf802b5c8>
   2bcc0:	003f7e06 	br	2babc <__alt_data_end+0xf802babc>
   2bcc4:	5f000017 	ldw	fp,0(r11)
   2bcc8:	5ac00104 	addi	r11,r11,4
   2bccc:	0013883a 	mov	r9,zero
   2bcd0:	dac02315 	stw	r11,140(sp)
   2bcd4:	003cce06 	br	2b010 <__alt_data_end+0xf802b010>
   2bcd8:	8809883a 	mov	r4,r17
   2bcdc:	da002c15 	stw	r8,176(sp)
   2bce0:	0021d300 	call	21d30 <strlen>
   2bce4:	d8802115 	stw	r2,132(sp)
   2bce8:	da801d83 	ldbu	r10,118(sp)
   2bcec:	df002315 	stw	fp,140(sp)
   2bcf0:	0021883a 	mov	r16,zero
   2bcf4:	da002c17 	ldw	r8,176(sp)
   2bcf8:	003cf606 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2bcfc:	00800184 	movi	r2,6
   2bd00:	1400012e 	bgeu	r2,r16,2bd08 <___svfiprintf_internal_r+0x10a4>
   2bd04:	1021883a 	mov	r16,r2
   2bd08:	dc002115 	stw	r16,132(sp)
   2bd0c:	8005883a 	mov	r2,r16
   2bd10:	80003c16 	blt	r16,zero,2be04 <___svfiprintf_internal_r+0x11a0>
   2bd14:	04410034 	movhi	r17,1024
   2bd18:	d8802015 	stw	r2,128(sp)
   2bd1c:	df002315 	stw	fp,140(sp)
   2bd20:	8c403204 	addi	r17,r17,200
   2bd24:	003d2e06 	br	2b1e0 <__alt_data_end+0xf802b1e0>
   2bd28:	04001004 	movi	r16,64
   2bd2c:	800b883a 	mov	r5,r16
   2bd30:	0020e540 	call	20e54 <_malloc_r>
   2bd34:	dac02717 	ldw	r11,156(sp)
   2bd38:	58800015 	stw	r2,0(r11)
   2bd3c:	58800415 	stw	r2,16(r11)
   2bd40:	10004826 	beq	r2,zero,2be64 <___svfiprintf_internal_r+0x1200>
   2bd44:	dac02717 	ldw	r11,156(sp)
   2bd48:	5c000515 	stw	r16,20(r11)
   2bd4c:	003bd906 	br	2acb4 <__alt_data_end+0xf802acb4>
   2bd50:	9080004c 	andi	r2,r18,1
   2bd54:	0015883a 	mov	r10,zero
   2bd58:	10000626 	beq	r2,zero,2bd74 <___svfiprintf_internal_r+0x1110>
   2bd5c:	dac02b17 	ldw	r11,172(sp)
   2bd60:	00800c04 	movi	r2,48
   2bd64:	d88019c5 	stb	r2,103(sp)
   2bd68:	dac02115 	stw	r11,132(sp)
   2bd6c:	dc4019c4 	addi	r17,sp,103
   2bd70:	003cd806 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2bd74:	d8002115 	stw	zero,132(sp)
   2bd78:	dc401a04 	addi	r17,sp,104
   2bd7c:	003cd506 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2bd80:	01010034 	movhi	r4,1024
   2bd84:	21009904 	addi	r4,r4,612
   2bd88:	d9002815 	stw	r4,160(sp)
   2bd8c:	003d4306 	br	2b29c <__alt_data_end+0xf802b29c>
   2bd90:	00bfffc4 	movi	r2,-1
   2bd94:	003ec606 	br	2b8b0 <__alt_data_end+0xf802b8b0>
   2bd98:	00800044 	movi	r2,1
   2bd9c:	10803fcc 	andi	r2,r2,255
   2bda0:	00c00044 	movi	r3,1
   2bda4:	10fd8026 	beq	r2,r3,2b3a8 <__alt_data_end+0xf802b3a8>
   2bda8:	00c00084 	movi	r3,2
   2bdac:	10fca426 	beq	r2,r3,2b040 <__alt_data_end+0xf802b040>
   2bdb0:	003ce806 	br	2b154 <__alt_data_end+0xf802b154>
   2bdb4:	01010034 	movhi	r4,1024
   2bdb8:	21009904 	addi	r4,r4,612
   2bdbc:	d9002815 	stw	r4,160(sp)
   2bdc0:	003e9906 	br	2b828 <__alt_data_end+0xf802b828>
   2bdc4:	1025883a 	mov	r18,r2
   2bdc8:	0015883a 	mov	r10,zero
   2bdcc:	00800084 	movi	r2,2
   2bdd0:	003ff206 	br	2bd9c <__alt_data_end+0xf802bd9c>
   2bdd4:	01410034 	movhi	r5,1024
   2bdd8:	29409504 	addi	r5,r5,596
   2bddc:	d9402215 	stw	r5,136(sp)
   2bde0:	003ee206 	br	2b96c <__alt_data_end+0xf802b96c>
   2bde4:	5827883a 	mov	r19,r11
   2bde8:	0021883a 	mov	r16,zero
   2bdec:	003bed06 	br	2ada4 <__alt_data_end+0xf802ada4>
   2bdf0:	dc002115 	stw	r16,132(sp)
   2bdf4:	da801d83 	ldbu	r10,118(sp)
   2bdf8:	df002315 	stw	fp,140(sp)
   2bdfc:	0021883a 	mov	r16,zero
   2be00:	003cb406 	br	2b0d4 <__alt_data_end+0xf802b0d4>
   2be04:	0005883a 	mov	r2,zero
   2be08:	003fc206 	br	2bd14 <__alt_data_end+0xf802bd14>
   2be0c:	d8802317 	ldw	r2,140(sp)
   2be10:	98c00043 	ldbu	r3,1(r19)
   2be14:	5827883a 	mov	r19,r11
   2be18:	14000017 	ldw	r16,0(r2)
   2be1c:	10800104 	addi	r2,r2,4
   2be20:	d8802315 	stw	r2,140(sp)
   2be24:	803f760e 	bge	r16,zero,2bc00 <__alt_data_end+0xf802bc00>
   2be28:	18c03fcc 	andi	r3,r3,255
   2be2c:	18c0201c 	xori	r3,r3,128
   2be30:	043fffc4 	movi	r16,-1
   2be34:	18ffe004 	addi	r3,r3,-128
   2be38:	003bd906 	br	2ada0 <__alt_data_end+0xf802ada0>
   2be3c:	d9c01d85 	stb	r7,118(sp)
   2be40:	003cb606 	br	2b11c <__alt_data_end+0xf802b11c>
   2be44:	d9c01d85 	stb	r7,118(sp)
   2be48:	003d2106 	br	2b2d0 <__alt_data_end+0xf802b2d0>
   2be4c:	d9c01d85 	stb	r7,118(sp)
   2be50:	003d8e06 	br	2b48c <__alt_data_end+0xf802b48c>
   2be54:	d9c01d85 	stb	r7,118(sp)
   2be58:	003db306 	br	2b528 <__alt_data_end+0xf802b528>
   2be5c:	d9c01d85 	stb	r7,118(sp)
   2be60:	003c8a06 	br	2b08c <__alt_data_end+0xf802b08c>
   2be64:	dac02a17 	ldw	r11,168(sp)
   2be68:	00800304 	movi	r2,12
   2be6c:	58800015 	stw	r2,0(r11)
   2be70:	00bfffc4 	movi	r2,-1
   2be74:	003e8e06 	br	2b8b0 <__alt_data_end+0xf802b8b0>
   2be78:	d9c01d85 	stb	r7,118(sp)
   2be7c:	003dc706 	br	2b59c <__alt_data_end+0xf802b59c>
   2be80:	d9c01d85 	stb	r7,118(sp)
   2be84:	003ddf06 	br	2b604 <__alt_data_end+0xf802b604>
   2be88:	d9c01d85 	stb	r7,118(sp)
   2be8c:	003d3706 	br	2b36c <__alt_data_end+0xf802b36c>
   2be90:	d9c01d85 	stb	r7,118(sp)
   2be94:	003c5406 	br	2afe8 <__alt_data_end+0xf802afe8>
   2be98:	d9c01d85 	stb	r7,118(sp)
   2be9c:	003d1d06 	br	2b314 <__alt_data_end+0xf802b314>

0002bea0 <__sprint_r.part.0>:
   2bea0:	28801917 	ldw	r2,100(r5)
   2bea4:	defff604 	addi	sp,sp,-40
   2bea8:	dd400515 	stw	r21,20(sp)
   2beac:	dfc00915 	stw	ra,36(sp)
   2beb0:	df000815 	stw	fp,32(sp)
   2beb4:	ddc00715 	stw	r23,28(sp)
   2beb8:	dd800615 	stw	r22,24(sp)
   2bebc:	dd000415 	stw	r20,16(sp)
   2bec0:	dcc00315 	stw	r19,12(sp)
   2bec4:	dc800215 	stw	r18,8(sp)
   2bec8:	dc400115 	stw	r17,4(sp)
   2becc:	dc000015 	stw	r16,0(sp)
   2bed0:	1088000c 	andi	r2,r2,8192
   2bed4:	302b883a 	mov	r21,r6
   2bed8:	10002e26 	beq	r2,zero,2bf94 <__sprint_r.part.0+0xf4>
   2bedc:	30800217 	ldw	r2,8(r6)
   2bee0:	35800017 	ldw	r22,0(r6)
   2bee4:	10002926 	beq	r2,zero,2bf8c <__sprint_r.part.0+0xec>
   2bee8:	2827883a 	mov	r19,r5
   2beec:	2029883a 	mov	r20,r4
   2bef0:	b5c00104 	addi	r23,r22,4
   2bef4:	04bfffc4 	movi	r18,-1
   2bef8:	bc400017 	ldw	r17,0(r23)
   2befc:	b4000017 	ldw	r16,0(r22)
   2bf00:	0039883a 	mov	fp,zero
   2bf04:	8822d0ba 	srli	r17,r17,2
   2bf08:	8800031e 	bne	r17,zero,2bf18 <__sprint_r.part.0+0x78>
   2bf0c:	00001806 	br	2bf70 <__sprint_r.part.0+0xd0>
   2bf10:	84000104 	addi	r16,r16,4
   2bf14:	8f001526 	beq	r17,fp,2bf6c <__sprint_r.part.0+0xcc>
   2bf18:	81400017 	ldw	r5,0(r16)
   2bf1c:	980d883a 	mov	r6,r19
   2bf20:	a009883a 	mov	r4,r20
   2bf24:	002d8140 	call	2d814 <_fputwc_r>
   2bf28:	e7000044 	addi	fp,fp,1
   2bf2c:	14bff81e 	bne	r2,r18,2bf10 <__alt_data_end+0xf802bf10>
   2bf30:	9005883a 	mov	r2,r18
   2bf34:	a8000215 	stw	zero,8(r21)
   2bf38:	a8000115 	stw	zero,4(r21)
   2bf3c:	dfc00917 	ldw	ra,36(sp)
   2bf40:	df000817 	ldw	fp,32(sp)
   2bf44:	ddc00717 	ldw	r23,28(sp)
   2bf48:	dd800617 	ldw	r22,24(sp)
   2bf4c:	dd400517 	ldw	r21,20(sp)
   2bf50:	dd000417 	ldw	r20,16(sp)
   2bf54:	dcc00317 	ldw	r19,12(sp)
   2bf58:	dc800217 	ldw	r18,8(sp)
   2bf5c:	dc400117 	ldw	r17,4(sp)
   2bf60:	dc000017 	ldw	r16,0(sp)
   2bf64:	dec00a04 	addi	sp,sp,40
   2bf68:	f800283a 	ret
   2bf6c:	a8800217 	ldw	r2,8(r21)
   2bf70:	8c63883a 	add	r17,r17,r17
   2bf74:	8c63883a 	add	r17,r17,r17
   2bf78:	1445c83a 	sub	r2,r2,r17
   2bf7c:	a8800215 	stw	r2,8(r21)
   2bf80:	b5800204 	addi	r22,r22,8
   2bf84:	bdc00204 	addi	r23,r23,8
   2bf88:	103fdb1e 	bne	r2,zero,2bef8 <__alt_data_end+0xf802bef8>
   2bf8c:	0005883a 	mov	r2,zero
   2bf90:	003fe806 	br	2bf34 <__alt_data_end+0xf802bf34>
   2bf94:	00288280 	call	28828 <__sfvwrite_r>
   2bf98:	003fe606 	br	2bf34 <__alt_data_end+0xf802bf34>

0002bf9c <__sprint_r>:
   2bf9c:	30c00217 	ldw	r3,8(r6)
   2bfa0:	18000126 	beq	r3,zero,2bfa8 <__sprint_r+0xc>
   2bfa4:	002bea01 	jmpi	2bea0 <__sprint_r.part.0>
   2bfa8:	30000115 	stw	zero,4(r6)
   2bfac:	0005883a 	mov	r2,zero
   2bfb0:	f800283a 	ret

0002bfb4 <___vfiprintf_internal_r>:
   2bfb4:	deffc904 	addi	sp,sp,-220
   2bfb8:	df003515 	stw	fp,212(sp)
   2bfbc:	dd003115 	stw	r20,196(sp)
   2bfc0:	dfc03615 	stw	ra,216(sp)
   2bfc4:	ddc03415 	stw	r23,208(sp)
   2bfc8:	dd803315 	stw	r22,204(sp)
   2bfcc:	dd403215 	stw	r21,200(sp)
   2bfd0:	dcc03015 	stw	r19,192(sp)
   2bfd4:	dc802f15 	stw	r18,188(sp)
   2bfd8:	dc402e15 	stw	r17,184(sp)
   2bfdc:	dc002d15 	stw	r16,180(sp)
   2bfe0:	d9002015 	stw	r4,128(sp)
   2bfe4:	d9c02215 	stw	r7,136(sp)
   2bfe8:	2829883a 	mov	r20,r5
   2bfec:	3039883a 	mov	fp,r6
   2bff0:	20000226 	beq	r4,zero,2bffc <___vfiprintf_internal_r+0x48>
   2bff4:	20800e17 	ldw	r2,56(r4)
   2bff8:	1000cf26 	beq	r2,zero,2c338 <___vfiprintf_internal_r+0x384>
   2bffc:	a080030b 	ldhu	r2,12(r20)
   2c000:	10c8000c 	andi	r3,r2,8192
   2c004:	1800061e 	bne	r3,zero,2c020 <___vfiprintf_internal_r+0x6c>
   2c008:	a1001917 	ldw	r4,100(r20)
   2c00c:	00f7ffc4 	movi	r3,-8193
   2c010:	10880014 	ori	r2,r2,8192
   2c014:	20c6703a 	and	r3,r4,r3
   2c018:	a080030d 	sth	r2,12(r20)
   2c01c:	a0c01915 	stw	r3,100(r20)
   2c020:	10c0020c 	andi	r3,r2,8
   2c024:	1800a926 	beq	r3,zero,2c2cc <___vfiprintf_internal_r+0x318>
   2c028:	a0c00417 	ldw	r3,16(r20)
   2c02c:	1800a726 	beq	r3,zero,2c2cc <___vfiprintf_internal_r+0x318>
   2c030:	1080068c 	andi	r2,r2,26
   2c034:	00c00284 	movi	r3,10
   2c038:	10c0ac26 	beq	r2,r3,2c2ec <___vfiprintf_internal_r+0x338>
   2c03c:	da801a04 	addi	r10,sp,104
   2c040:	da801e15 	stw	r10,120(sp)
   2c044:	d8801e17 	ldw	r2,120(sp)
   2c048:	da8019c4 	addi	r10,sp,103
   2c04c:	05810034 	movhi	r22,1024
   2c050:	05c10034 	movhi	r23,1024
   2c054:	da801f15 	stw	r10,124(sp)
   2c058:	1295c83a 	sub	r10,r2,r10
   2c05c:	b580a104 	addi	r22,r22,644
   2c060:	bdc09d04 	addi	r23,r23,628
   2c064:	dec01a15 	stw	sp,104(sp)
   2c068:	d8001c15 	stw	zero,112(sp)
   2c06c:	d8001b15 	stw	zero,108(sp)
   2c070:	d8002615 	stw	zero,152(sp)
   2c074:	d8002315 	stw	zero,140(sp)
   2c078:	da802715 	stw	r10,156(sp)
   2c07c:	d811883a 	mov	r8,sp
   2c080:	dd002115 	stw	r20,132(sp)
   2c084:	e021883a 	mov	r16,fp
   2c088:	80800007 	ldb	r2,0(r16)
   2c08c:	1003ea26 	beq	r2,zero,2d038 <___vfiprintf_internal_r+0x1084>
   2c090:	00c00944 	movi	r3,37
   2c094:	8025883a 	mov	r18,r16
   2c098:	10c0021e 	bne	r2,r3,2c0a4 <___vfiprintf_internal_r+0xf0>
   2c09c:	00001606 	br	2c0f8 <___vfiprintf_internal_r+0x144>
   2c0a0:	10c00326 	beq	r2,r3,2c0b0 <___vfiprintf_internal_r+0xfc>
   2c0a4:	94800044 	addi	r18,r18,1
   2c0a8:	90800007 	ldb	r2,0(r18)
   2c0ac:	103ffc1e 	bne	r2,zero,2c0a0 <__alt_data_end+0xf802c0a0>
   2c0b0:	9423c83a 	sub	r17,r18,r16
   2c0b4:	88001026 	beq	r17,zero,2c0f8 <___vfiprintf_internal_r+0x144>
   2c0b8:	d8c01c17 	ldw	r3,112(sp)
   2c0bc:	d8801b17 	ldw	r2,108(sp)
   2c0c0:	44000015 	stw	r16,0(r8)
   2c0c4:	88c7883a 	add	r3,r17,r3
   2c0c8:	10800044 	addi	r2,r2,1
   2c0cc:	44400115 	stw	r17,4(r8)
   2c0d0:	d8c01c15 	stw	r3,112(sp)
   2c0d4:	d8801b15 	stw	r2,108(sp)
   2c0d8:	010001c4 	movi	r4,7
   2c0dc:	2080760e 	bge	r4,r2,2c2b8 <___vfiprintf_internal_r+0x304>
   2c0e0:	1803821e 	bne	r3,zero,2ceec <___vfiprintf_internal_r+0xf38>
   2c0e4:	da802317 	ldw	r10,140(sp)
   2c0e8:	d8001b15 	stw	zero,108(sp)
   2c0ec:	d811883a 	mov	r8,sp
   2c0f0:	5455883a 	add	r10,r10,r17
   2c0f4:	da802315 	stw	r10,140(sp)
   2c0f8:	90800007 	ldb	r2,0(r18)
   2c0fc:	10044626 	beq	r2,zero,2d218 <___vfiprintf_internal_r+0x1264>
   2c100:	90c00047 	ldb	r3,1(r18)
   2c104:	94000044 	addi	r16,r18,1
   2c108:	d8001d85 	stb	zero,118(sp)
   2c10c:	0009883a 	mov	r4,zero
   2c110:	000f883a 	mov	r7,zero
   2c114:	027fffc4 	movi	r9,-1
   2c118:	0023883a 	mov	r17,zero
   2c11c:	0029883a 	mov	r20,zero
   2c120:	01401604 	movi	r5,88
   2c124:	01800244 	movi	r6,9
   2c128:	03400a84 	movi	r13,42
   2c12c:	03001b04 	movi	r12,108
   2c130:	84000044 	addi	r16,r16,1
   2c134:	18bff804 	addi	r2,r3,-32
   2c138:	28827336 	bltu	r5,r2,2cb08 <___vfiprintf_internal_r+0xb54>
   2c13c:	100490ba 	slli	r2,r2,2
   2c140:	028000f4 	movhi	r10,3
   2c144:	52b05504 	addi	r10,r10,-16044
   2c148:	1285883a 	add	r2,r2,r10
   2c14c:	10800017 	ldw	r2,0(r2)
   2c150:	1000683a 	jmp	r2
   2c154:	0002c83c 	xorhi	zero,zero,2848
   2c158:	0002cb08 	cmpgei	zero,zero,2860
   2c15c:	0002cb08 	cmpgei	zero,zero,2860
   2c160:	0002c85c 	xori	zero,zero,2849
   2c164:	0002cb08 	cmpgei	zero,zero,2860
   2c168:	0002cb08 	cmpgei	zero,zero,2860
   2c16c:	0002cb08 	cmpgei	zero,zero,2860
   2c170:	0002cb08 	cmpgei	zero,zero,2860
   2c174:	0002cb08 	cmpgei	zero,zero,2860
   2c178:	0002cb08 	cmpgei	zero,zero,2860
   2c17c:	0002ca44 	movi	zero,2857
   2c180:	0002ca60 	cmpeqi	zero,zero,2857
   2c184:	0002cb08 	cmpgei	zero,zero,2860
   2c188:	0002c348 	cmpgei	zero,zero,2829
   2c18c:	0002ca70 	cmpltui	zero,zero,2857
   2c190:	0002cb08 	cmpgei	zero,zero,2860
   2c194:	0002c868 	cmpgeui	zero,zero,2849
   2c198:	0002c874 	movhi	zero,2849
   2c19c:	0002c874 	movhi	zero,2849
   2c1a0:	0002c874 	movhi	zero,2849
   2c1a4:	0002c874 	movhi	zero,2849
   2c1a8:	0002c874 	movhi	zero,2849
   2c1ac:	0002c874 	movhi	zero,2849
   2c1b0:	0002c874 	movhi	zero,2849
   2c1b4:	0002c874 	movhi	zero,2849
   2c1b8:	0002c874 	movhi	zero,2849
   2c1bc:	0002cb08 	cmpgei	zero,zero,2860
   2c1c0:	0002cb08 	cmpgei	zero,zero,2860
   2c1c4:	0002cb08 	cmpgei	zero,zero,2860
   2c1c8:	0002cb08 	cmpgei	zero,zero,2860
   2c1cc:	0002cb08 	cmpgei	zero,zero,2860
   2c1d0:	0002cb08 	cmpgei	zero,zero,2860
   2c1d4:	0002cb08 	cmpgei	zero,zero,2860
   2c1d8:	0002cb08 	cmpgei	zero,zero,2860
   2c1dc:	0002cb08 	cmpgei	zero,zero,2860
   2c1e0:	0002cb08 	cmpgei	zero,zero,2860
   2c1e4:	0002c8a0 	cmpeqi	zero,zero,2850
   2c1e8:	0002cb08 	cmpgei	zero,zero,2860
   2c1ec:	0002cb08 	cmpgei	zero,zero,2860
   2c1f0:	0002cb08 	cmpgei	zero,zero,2860
   2c1f4:	0002cb08 	cmpgei	zero,zero,2860
   2c1f8:	0002cb08 	cmpgei	zero,zero,2860
   2c1fc:	0002cb08 	cmpgei	zero,zero,2860
   2c200:	0002cb08 	cmpgei	zero,zero,2860
   2c204:	0002cb08 	cmpgei	zero,zero,2860
   2c208:	0002cb08 	cmpgei	zero,zero,2860
   2c20c:	0002cb08 	cmpgei	zero,zero,2860
   2c210:	0002c8d8 	cmpnei	zero,zero,2851
   2c214:	0002cb08 	cmpgei	zero,zero,2860
   2c218:	0002cb08 	cmpgei	zero,zero,2860
   2c21c:	0002cb08 	cmpgei	zero,zero,2860
   2c220:	0002cb08 	cmpgei	zero,zero,2860
   2c224:	0002cb08 	cmpgei	zero,zero,2860
   2c228:	0002c930 	cmpltui	zero,zero,2852
   2c22c:	0002cb08 	cmpgei	zero,zero,2860
   2c230:	0002cb08 	cmpgei	zero,zero,2860
   2c234:	0002c9a0 	cmpeqi	zero,zero,2854
   2c238:	0002cb08 	cmpgei	zero,zero,2860
   2c23c:	0002cb08 	cmpgei	zero,zero,2860
   2c240:	0002cb08 	cmpgei	zero,zero,2860
   2c244:	0002cb08 	cmpgei	zero,zero,2860
   2c248:	0002cb08 	cmpgei	zero,zero,2860
   2c24c:	0002cb08 	cmpgei	zero,zero,2860
   2c250:	0002cb08 	cmpgei	zero,zero,2860
   2c254:	0002cb08 	cmpgei	zero,zero,2860
   2c258:	0002cb08 	cmpgei	zero,zero,2860
   2c25c:	0002cb08 	cmpgei	zero,zero,2860
   2c260:	0002c74c 	andi	zero,zero,2845
   2c264:	0002c778 	rdprs	zero,zero,2845
   2c268:	0002cb08 	cmpgei	zero,zero,2860
   2c26c:	0002cb08 	cmpgei	zero,zero,2860
   2c270:	0002cb08 	cmpgei	zero,zero,2860
   2c274:	0002cab0 	cmpltui	zero,zero,2858
   2c278:	0002c778 	rdprs	zero,zero,2845
   2c27c:	0002cb08 	cmpgei	zero,zero,2860
   2c280:	0002cb08 	cmpgei	zero,zero,2860
   2c284:	0002c60c 	andi	zero,zero,2840
   2c288:	0002cb08 	cmpgei	zero,zero,2860
   2c28c:	0002c61c 	xori	zero,zero,2840
   2c290:	0002c658 	cmpnei	zero,zero,2841
   2c294:	0002c354 	movui	zero,2829
   2c298:	0002c600 	call	2c60 <__alt_mem_onchip_memory2_0-0x1d3a0>
   2c29c:	0002cb08 	cmpgei	zero,zero,2860
   2c2a0:	0002c9dc 	xori	zero,zero,2855
   2c2a4:	0002cb08 	cmpgei	zero,zero,2860
   2c2a8:	0002ca34 	movhi	zero,2856
   2c2ac:	0002cb08 	cmpgei	zero,zero,2860
   2c2b0:	0002cb08 	cmpgei	zero,zero,2860
   2c2b4:	0002c6f8 	rdprs	zero,zero,2843
   2c2b8:	42000204 	addi	r8,r8,8
   2c2bc:	da802317 	ldw	r10,140(sp)
   2c2c0:	5455883a 	add	r10,r10,r17
   2c2c4:	da802315 	stw	r10,140(sp)
   2c2c8:	003f8b06 	br	2c0f8 <__alt_data_end+0xf802c0f8>
   2c2cc:	d9002017 	ldw	r4,128(sp)
   2c2d0:	a00b883a 	mov	r5,r20
   2c2d4:	00262d00 	call	262d0 <__swsetup_r>
   2c2d8:	1003b11e 	bne	r2,zero,2d1a0 <___vfiprintf_internal_r+0x11ec>
   2c2dc:	a080030b 	ldhu	r2,12(r20)
   2c2e0:	00c00284 	movi	r3,10
   2c2e4:	1080068c 	andi	r2,r2,26
   2c2e8:	10ff541e 	bne	r2,r3,2c03c <__alt_data_end+0xf802c03c>
   2c2ec:	a080038f 	ldh	r2,14(r20)
   2c2f0:	103f5216 	blt	r2,zero,2c03c <__alt_data_end+0xf802c03c>
   2c2f4:	d9c02217 	ldw	r7,136(sp)
   2c2f8:	d9002017 	ldw	r4,128(sp)
   2c2fc:	e00d883a 	mov	r6,fp
   2c300:	a00b883a 	mov	r5,r20
   2c304:	002d42c0 	call	2d42c <__sbprintf>
   2c308:	dfc03617 	ldw	ra,216(sp)
   2c30c:	df003517 	ldw	fp,212(sp)
   2c310:	ddc03417 	ldw	r23,208(sp)
   2c314:	dd803317 	ldw	r22,204(sp)
   2c318:	dd403217 	ldw	r21,200(sp)
   2c31c:	dd003117 	ldw	r20,196(sp)
   2c320:	dcc03017 	ldw	r19,192(sp)
   2c324:	dc802f17 	ldw	r18,188(sp)
   2c328:	dc402e17 	ldw	r17,184(sp)
   2c32c:	dc002d17 	ldw	r16,180(sp)
   2c330:	dec03704 	addi	sp,sp,220
   2c334:	f800283a 	ret
   2c338:	00282f80 	call	282f8 <__sinit>
   2c33c:	003f2f06 	br	2bffc <__alt_data_end+0xf802bffc>
   2c340:	0463c83a 	sub	r17,zero,r17
   2c344:	d8802215 	stw	r2,136(sp)
   2c348:	a5000114 	ori	r20,r20,4
   2c34c:	80c00007 	ldb	r3,0(r16)
   2c350:	003f7706 	br	2c130 <__alt_data_end+0xf802c130>
   2c354:	00800c04 	movi	r2,48
   2c358:	da802217 	ldw	r10,136(sp)
   2c35c:	d8801d05 	stb	r2,116(sp)
   2c360:	00801e04 	movi	r2,120
   2c364:	d8801d45 	stb	r2,117(sp)
   2c368:	d8001d85 	stb	zero,118(sp)
   2c36c:	50c00104 	addi	r3,r10,4
   2c370:	54800017 	ldw	r18,0(r10)
   2c374:	0027883a 	mov	r19,zero
   2c378:	a0800094 	ori	r2,r20,2
   2c37c:	48030b16 	blt	r9,zero,2cfac <___vfiprintf_internal_r+0xff8>
   2c380:	00bfdfc4 	movi	r2,-129
   2c384:	a096703a 	and	r11,r20,r2
   2c388:	d8c02215 	stw	r3,136(sp)
   2c38c:	5d000094 	ori	r20,r11,2
   2c390:	90032b1e 	bne	r18,zero,2d040 <___vfiprintf_internal_r+0x108c>
   2c394:	00810034 	movhi	r2,1024
   2c398:	10802d04 	addi	r2,r2,180
   2c39c:	d8802615 	stw	r2,152(sp)
   2c3a0:	0039883a 	mov	fp,zero
   2c3a4:	48017b1e 	bne	r9,zero,2c994 <___vfiprintf_internal_r+0x9e0>
   2c3a8:	0013883a 	mov	r9,zero
   2c3ac:	0027883a 	mov	r19,zero
   2c3b0:	dd401a04 	addi	r21,sp,104
   2c3b4:	4825883a 	mov	r18,r9
   2c3b8:	4cc0010e 	bge	r9,r19,2c3c0 <___vfiprintf_internal_r+0x40c>
   2c3bc:	9825883a 	mov	r18,r19
   2c3c0:	e7003fcc 	andi	fp,fp,255
   2c3c4:	e700201c 	xori	fp,fp,128
   2c3c8:	e73fe004 	addi	fp,fp,-128
   2c3cc:	e0000126 	beq	fp,zero,2c3d4 <___vfiprintf_internal_r+0x420>
   2c3d0:	94800044 	addi	r18,r18,1
   2c3d4:	a380008c 	andi	r14,r20,2
   2c3d8:	70000126 	beq	r14,zero,2c3e0 <___vfiprintf_internal_r+0x42c>
   2c3dc:	94800084 	addi	r18,r18,2
   2c3e0:	a700210c 	andi	fp,r20,132
   2c3e4:	e001df1e 	bne	fp,zero,2cb64 <___vfiprintf_internal_r+0xbb0>
   2c3e8:	8c87c83a 	sub	r3,r17,r18
   2c3ec:	00c1dd0e 	bge	zero,r3,2cb64 <___vfiprintf_internal_r+0xbb0>
   2c3f0:	01c00404 	movi	r7,16
   2c3f4:	d8801c17 	ldw	r2,112(sp)
   2c3f8:	38c3ad0e 	bge	r7,r3,2d2b0 <___vfiprintf_internal_r+0x12fc>
   2c3fc:	02810034 	movhi	r10,1024
   2c400:	5280a104 	addi	r10,r10,644
   2c404:	dc002915 	stw	r16,164(sp)
   2c408:	d9801b17 	ldw	r6,108(sp)
   2c40c:	da802415 	stw	r10,144(sp)
   2c410:	03c001c4 	movi	r15,7
   2c414:	da402515 	stw	r9,148(sp)
   2c418:	db802815 	stw	r14,160(sp)
   2c41c:	1821883a 	mov	r16,r3
   2c420:	00000506 	br	2c438 <___vfiprintf_internal_r+0x484>
   2c424:	31400084 	addi	r5,r6,2
   2c428:	42000204 	addi	r8,r8,8
   2c42c:	200d883a 	mov	r6,r4
   2c430:	843ffc04 	addi	r16,r16,-16
   2c434:	3c000d0e 	bge	r7,r16,2c46c <___vfiprintf_internal_r+0x4b8>
   2c438:	10800404 	addi	r2,r2,16
   2c43c:	31000044 	addi	r4,r6,1
   2c440:	45800015 	stw	r22,0(r8)
   2c444:	41c00115 	stw	r7,4(r8)
   2c448:	d8801c15 	stw	r2,112(sp)
   2c44c:	d9001b15 	stw	r4,108(sp)
   2c450:	793ff40e 	bge	r15,r4,2c424 <__alt_data_end+0xf802c424>
   2c454:	1001b51e 	bne	r2,zero,2cb2c <___vfiprintf_internal_r+0xb78>
   2c458:	843ffc04 	addi	r16,r16,-16
   2c45c:	000d883a 	mov	r6,zero
   2c460:	01400044 	movi	r5,1
   2c464:	d811883a 	mov	r8,sp
   2c468:	3c3ff316 	blt	r7,r16,2c438 <__alt_data_end+0xf802c438>
   2c46c:	8007883a 	mov	r3,r16
   2c470:	da402517 	ldw	r9,148(sp)
   2c474:	db802817 	ldw	r14,160(sp)
   2c478:	dc002917 	ldw	r16,164(sp)
   2c47c:	da802417 	ldw	r10,144(sp)
   2c480:	1885883a 	add	r2,r3,r2
   2c484:	40c00115 	stw	r3,4(r8)
   2c488:	42800015 	stw	r10,0(r8)
   2c48c:	d8801c15 	stw	r2,112(sp)
   2c490:	d9401b15 	stw	r5,108(sp)
   2c494:	00c001c4 	movi	r3,7
   2c498:	19426016 	blt	r3,r5,2ce1c <___vfiprintf_internal_r+0xe68>
   2c49c:	d8c01d87 	ldb	r3,118(sp)
   2c4a0:	42000204 	addi	r8,r8,8
   2c4a4:	29000044 	addi	r4,r5,1
   2c4a8:	1801b31e 	bne	r3,zero,2cb78 <___vfiprintf_internal_r+0xbc4>
   2c4ac:	7001c026 	beq	r14,zero,2cbb0 <___vfiprintf_internal_r+0xbfc>
   2c4b0:	d8c01d04 	addi	r3,sp,116
   2c4b4:	10800084 	addi	r2,r2,2
   2c4b8:	40c00015 	stw	r3,0(r8)
   2c4bc:	00c00084 	movi	r3,2
   2c4c0:	40c00115 	stw	r3,4(r8)
   2c4c4:	d8801c15 	stw	r2,112(sp)
   2c4c8:	d9001b15 	stw	r4,108(sp)
   2c4cc:	00c001c4 	movi	r3,7
   2c4d0:	1902650e 	bge	r3,r4,2ce68 <___vfiprintf_internal_r+0xeb4>
   2c4d4:	10029a1e 	bne	r2,zero,2cf40 <___vfiprintf_internal_r+0xf8c>
   2c4d8:	00c02004 	movi	r3,128
   2c4dc:	01000044 	movi	r4,1
   2c4e0:	000b883a 	mov	r5,zero
   2c4e4:	d811883a 	mov	r8,sp
   2c4e8:	e0c1b31e 	bne	fp,r3,2cbb8 <___vfiprintf_internal_r+0xc04>
   2c4ec:	8cb9c83a 	sub	fp,r17,r18
   2c4f0:	0701b10e 	bge	zero,fp,2cbb8 <___vfiprintf_internal_r+0xc04>
   2c4f4:	01c00404 	movi	r7,16
   2c4f8:	3f03890e 	bge	r7,fp,2d320 <___vfiprintf_internal_r+0x136c>
   2c4fc:	00c10034 	movhi	r3,1024
   2c500:	18c09d04 	addi	r3,r3,628
   2c504:	d8c02415 	stw	r3,144(sp)
   2c508:	8007883a 	mov	r3,r16
   2c50c:	034001c4 	movi	r13,7
   2c510:	e021883a 	mov	r16,fp
   2c514:	da402515 	stw	r9,148(sp)
   2c518:	1839883a 	mov	fp,r3
   2c51c:	00000506 	br	2c534 <___vfiprintf_internal_r+0x580>
   2c520:	29800084 	addi	r6,r5,2
   2c524:	42000204 	addi	r8,r8,8
   2c528:	180b883a 	mov	r5,r3
   2c52c:	843ffc04 	addi	r16,r16,-16
   2c530:	3c000d0e 	bge	r7,r16,2c568 <___vfiprintf_internal_r+0x5b4>
   2c534:	10800404 	addi	r2,r2,16
   2c538:	28c00044 	addi	r3,r5,1
   2c53c:	45c00015 	stw	r23,0(r8)
   2c540:	41c00115 	stw	r7,4(r8)
   2c544:	d8801c15 	stw	r2,112(sp)
   2c548:	d8c01b15 	stw	r3,108(sp)
   2c54c:	68fff40e 	bge	r13,r3,2c520 <__alt_data_end+0xf802c520>
   2c550:	1002241e 	bne	r2,zero,2cde4 <___vfiprintf_internal_r+0xe30>
   2c554:	843ffc04 	addi	r16,r16,-16
   2c558:	01800044 	movi	r6,1
   2c55c:	000b883a 	mov	r5,zero
   2c560:	d811883a 	mov	r8,sp
   2c564:	3c3ff316 	blt	r7,r16,2c534 <__alt_data_end+0xf802c534>
   2c568:	da402517 	ldw	r9,148(sp)
   2c56c:	e007883a 	mov	r3,fp
   2c570:	8039883a 	mov	fp,r16
   2c574:	1821883a 	mov	r16,r3
   2c578:	d8c02417 	ldw	r3,144(sp)
   2c57c:	1705883a 	add	r2,r2,fp
   2c580:	47000115 	stw	fp,4(r8)
   2c584:	40c00015 	stw	r3,0(r8)
   2c588:	d8801c15 	stw	r2,112(sp)
   2c58c:	d9801b15 	stw	r6,108(sp)
   2c590:	00c001c4 	movi	r3,7
   2c594:	19827616 	blt	r3,r6,2cf70 <___vfiprintf_internal_r+0xfbc>
   2c598:	4cf9c83a 	sub	fp,r9,r19
   2c59c:	42000204 	addi	r8,r8,8
   2c5a0:	31000044 	addi	r4,r6,1
   2c5a4:	300b883a 	mov	r5,r6
   2c5a8:	07018516 	blt	zero,fp,2cbc0 <___vfiprintf_internal_r+0xc0c>
   2c5ac:	9885883a 	add	r2,r19,r2
   2c5b0:	45400015 	stw	r21,0(r8)
   2c5b4:	44c00115 	stw	r19,4(r8)
   2c5b8:	d8801c15 	stw	r2,112(sp)
   2c5bc:	d9001b15 	stw	r4,108(sp)
   2c5c0:	00c001c4 	movi	r3,7
   2c5c4:	1901dd0e 	bge	r3,r4,2cd3c <___vfiprintf_internal_r+0xd88>
   2c5c8:	1002401e 	bne	r2,zero,2cecc <___vfiprintf_internal_r+0xf18>
   2c5cc:	d8001b15 	stw	zero,108(sp)
   2c5d0:	a2c0010c 	andi	r11,r20,4
   2c5d4:	58000226 	beq	r11,zero,2c5e0 <___vfiprintf_internal_r+0x62c>
   2c5d8:	8ca7c83a 	sub	r19,r17,r18
   2c5dc:	04c2f216 	blt	zero,r19,2d1a8 <___vfiprintf_internal_r+0x11f4>
   2c5e0:	8c80010e 	bge	r17,r18,2c5e8 <___vfiprintf_internal_r+0x634>
   2c5e4:	9023883a 	mov	r17,r18
   2c5e8:	da802317 	ldw	r10,140(sp)
   2c5ec:	5455883a 	add	r10,r10,r17
   2c5f0:	da802315 	stw	r10,140(sp)
   2c5f4:	d8001b15 	stw	zero,108(sp)
   2c5f8:	d811883a 	mov	r8,sp
   2c5fc:	003ea206 	br	2c088 <__alt_data_end+0xf802c088>
   2c600:	a5000814 	ori	r20,r20,32
   2c604:	80c00007 	ldb	r3,0(r16)
   2c608:	003ec906 	br	2c130 <__alt_data_end+0xf802c130>
   2c60c:	80c00007 	ldb	r3,0(r16)
   2c610:	1b030926 	beq	r3,r12,2d238 <___vfiprintf_internal_r+0x1284>
   2c614:	a5000414 	ori	r20,r20,16
   2c618:	003ec506 	br	2c130 <__alt_data_end+0xf802c130>
   2c61c:	21003fcc 	andi	r4,r4,255
   2c620:	20035e1e 	bne	r4,zero,2d39c <___vfiprintf_internal_r+0x13e8>
   2c624:	a080080c 	andi	r2,r20,32
   2c628:	1002a526 	beq	r2,zero,2d0c0 <___vfiprintf_internal_r+0x110c>
   2c62c:	da802217 	ldw	r10,136(sp)
   2c630:	50800017 	ldw	r2,0(r10)
   2c634:	da802317 	ldw	r10,140(sp)
   2c638:	5007d7fa 	srai	r3,r10,31
   2c63c:	da802217 	ldw	r10,136(sp)
   2c640:	10c00115 	stw	r3,4(r2)
   2c644:	52800104 	addi	r10,r10,4
   2c648:	da802215 	stw	r10,136(sp)
   2c64c:	da802317 	ldw	r10,140(sp)
   2c650:	12800015 	stw	r10,0(r2)
   2c654:	003e8c06 	br	2c088 <__alt_data_end+0xf802c088>
   2c658:	21003fcc 	andi	r4,r4,255
   2c65c:	2003511e 	bne	r4,zero,2d3a4 <___vfiprintf_internal_r+0x13f0>
   2c660:	a080080c 	andi	r2,r20,32
   2c664:	1000a126 	beq	r2,zero,2c8ec <___vfiprintf_internal_r+0x938>
   2c668:	da802217 	ldw	r10,136(sp)
   2c66c:	d8001d85 	stb	zero,118(sp)
   2c670:	50800204 	addi	r2,r10,8
   2c674:	54800017 	ldw	r18,0(r10)
   2c678:	54c00117 	ldw	r19,4(r10)
   2c67c:	4802b416 	blt	r9,zero,2d150 <___vfiprintf_internal_r+0x119c>
   2c680:	013fdfc4 	movi	r4,-129
   2c684:	94c6b03a 	or	r3,r18,r19
   2c688:	d8802215 	stw	r2,136(sp)
   2c68c:	a128703a 	and	r20,r20,r4
   2c690:	1800a226 	beq	r3,zero,2c91c <___vfiprintf_internal_r+0x968>
   2c694:	0039883a 	mov	fp,zero
   2c698:	dd401a04 	addi	r21,sp,104
   2c69c:	9006d0fa 	srli	r3,r18,3
   2c6a0:	9808977a 	slli	r4,r19,29
   2c6a4:	9826d0fa 	srli	r19,r19,3
   2c6a8:	948001cc 	andi	r18,r18,7
   2c6ac:	90800c04 	addi	r2,r18,48
   2c6b0:	ad7fffc4 	addi	r21,r21,-1
   2c6b4:	20e4b03a 	or	r18,r4,r3
   2c6b8:	a8800005 	stb	r2,0(r21)
   2c6bc:	94c6b03a 	or	r3,r18,r19
   2c6c0:	183ff61e 	bne	r3,zero,2c69c <__alt_data_end+0xf802c69c>
   2c6c4:	a0c0004c 	andi	r3,r20,1
   2c6c8:	18005926 	beq	r3,zero,2c830 <___vfiprintf_internal_r+0x87c>
   2c6cc:	10803fcc 	andi	r2,r2,255
   2c6d0:	1080201c 	xori	r2,r2,128
   2c6d4:	10bfe004 	addi	r2,r2,-128
   2c6d8:	00c00c04 	movi	r3,48
   2c6dc:	10c05426 	beq	r2,r3,2c830 <___vfiprintf_internal_r+0x87c>
   2c6e0:	da801e17 	ldw	r10,120(sp)
   2c6e4:	a8bfffc4 	addi	r2,r21,-1
   2c6e8:	a8ffffc5 	stb	r3,-1(r21)
   2c6ec:	50a7c83a 	sub	r19,r10,r2
   2c6f0:	102b883a 	mov	r21,r2
   2c6f4:	003f2f06 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2c6f8:	21003fcc 	andi	r4,r4,255
   2c6fc:	2003421e 	bne	r4,zero,2d408 <___vfiprintf_internal_r+0x1454>
   2c700:	00810034 	movhi	r2,1024
   2c704:	10802d04 	addi	r2,r2,180
   2c708:	d8802615 	stw	r2,152(sp)
   2c70c:	a080080c 	andi	r2,r20,32
   2c710:	1000aa26 	beq	r2,zero,2c9bc <___vfiprintf_internal_r+0xa08>
   2c714:	da802217 	ldw	r10,136(sp)
   2c718:	54800017 	ldw	r18,0(r10)
   2c71c:	54c00117 	ldw	r19,4(r10)
   2c720:	52800204 	addi	r10,r10,8
   2c724:	da802215 	stw	r10,136(sp)
   2c728:	a080004c 	andi	r2,r20,1
   2c72c:	1001d226 	beq	r2,zero,2ce78 <___vfiprintf_internal_r+0xec4>
   2c730:	94c4b03a 	or	r2,r18,r19
   2c734:	1002351e 	bne	r2,zero,2d00c <___vfiprintf_internal_r+0x1058>
   2c738:	d8001d85 	stb	zero,118(sp)
   2c73c:	48022216 	blt	r9,zero,2cfc8 <___vfiprintf_internal_r+0x1014>
   2c740:	00bfdfc4 	movi	r2,-129
   2c744:	a0a8703a 	and	r20,r20,r2
   2c748:	003f1506 	br	2c3a0 <__alt_data_end+0xf802c3a0>
   2c74c:	da802217 	ldw	r10,136(sp)
   2c750:	04800044 	movi	r18,1
   2c754:	d8001d85 	stb	zero,118(sp)
   2c758:	50800017 	ldw	r2,0(r10)
   2c75c:	52800104 	addi	r10,r10,4
   2c760:	da802215 	stw	r10,136(sp)
   2c764:	d8801005 	stb	r2,64(sp)
   2c768:	9027883a 	mov	r19,r18
   2c76c:	dd401004 	addi	r21,sp,64
   2c770:	0013883a 	mov	r9,zero
   2c774:	003f1706 	br	2c3d4 <__alt_data_end+0xf802c3d4>
   2c778:	21003fcc 	andi	r4,r4,255
   2c77c:	2003201e 	bne	r4,zero,2d400 <___vfiprintf_internal_r+0x144c>
   2c780:	a080080c 	andi	r2,r20,32
   2c784:	10004b26 	beq	r2,zero,2c8b4 <___vfiprintf_internal_r+0x900>
   2c788:	da802217 	ldw	r10,136(sp)
   2c78c:	50800117 	ldw	r2,4(r10)
   2c790:	54800017 	ldw	r18,0(r10)
   2c794:	52800204 	addi	r10,r10,8
   2c798:	da802215 	stw	r10,136(sp)
   2c79c:	1027883a 	mov	r19,r2
   2c7a0:	10022c16 	blt	r2,zero,2d054 <___vfiprintf_internal_r+0x10a0>
   2c7a4:	df001d83 	ldbu	fp,118(sp)
   2c7a8:	48007216 	blt	r9,zero,2c974 <___vfiprintf_internal_r+0x9c0>
   2c7ac:	00ffdfc4 	movi	r3,-129
   2c7b0:	94c4b03a 	or	r2,r18,r19
   2c7b4:	a0e8703a 	and	r20,r20,r3
   2c7b8:	1000cc26 	beq	r2,zero,2caec <___vfiprintf_internal_r+0xb38>
   2c7bc:	98021026 	beq	r19,zero,2d000 <___vfiprintf_internal_r+0x104c>
   2c7c0:	dc402415 	stw	r17,144(sp)
   2c7c4:	dc002515 	stw	r16,148(sp)
   2c7c8:	9823883a 	mov	r17,r19
   2c7cc:	9021883a 	mov	r16,r18
   2c7d0:	dd401a04 	addi	r21,sp,104
   2c7d4:	4825883a 	mov	r18,r9
   2c7d8:	4027883a 	mov	r19,r8
   2c7dc:	8009883a 	mov	r4,r16
   2c7e0:	880b883a 	mov	r5,r17
   2c7e4:	01800284 	movi	r6,10
   2c7e8:	000f883a 	mov	r7,zero
   2c7ec:	002e1700 	call	2e170 <__umoddi3>
   2c7f0:	10800c04 	addi	r2,r2,48
   2c7f4:	ad7fffc4 	addi	r21,r21,-1
   2c7f8:	8009883a 	mov	r4,r16
   2c7fc:	880b883a 	mov	r5,r17
   2c800:	a8800005 	stb	r2,0(r21)
   2c804:	01800284 	movi	r6,10
   2c808:	000f883a 	mov	r7,zero
   2c80c:	002dbf80 	call	2dbf8 <__udivdi3>
   2c810:	1021883a 	mov	r16,r2
   2c814:	10c4b03a 	or	r2,r2,r3
   2c818:	1823883a 	mov	r17,r3
   2c81c:	103fef1e 	bne	r2,zero,2c7dc <__alt_data_end+0xf802c7dc>
   2c820:	dc402417 	ldw	r17,144(sp)
   2c824:	dc002517 	ldw	r16,148(sp)
   2c828:	9013883a 	mov	r9,r18
   2c82c:	9811883a 	mov	r8,r19
   2c830:	da801e17 	ldw	r10,120(sp)
   2c834:	5567c83a 	sub	r19,r10,r21
   2c838:	003ede06 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2c83c:	38803fcc 	andi	r2,r7,255
   2c840:	1080201c 	xori	r2,r2,128
   2c844:	10bfe004 	addi	r2,r2,-128
   2c848:	1002371e 	bne	r2,zero,2d128 <___vfiprintf_internal_r+0x1174>
   2c84c:	01000044 	movi	r4,1
   2c850:	01c00804 	movi	r7,32
   2c854:	80c00007 	ldb	r3,0(r16)
   2c858:	003e3506 	br	2c130 <__alt_data_end+0xf802c130>
   2c85c:	a5000054 	ori	r20,r20,1
   2c860:	80c00007 	ldb	r3,0(r16)
   2c864:	003e3206 	br	2c130 <__alt_data_end+0xf802c130>
   2c868:	a5002014 	ori	r20,r20,128
   2c86c:	80c00007 	ldb	r3,0(r16)
   2c870:	003e2f06 	br	2c130 <__alt_data_end+0xf802c130>
   2c874:	8015883a 	mov	r10,r16
   2c878:	0023883a 	mov	r17,zero
   2c87c:	18bff404 	addi	r2,r3,-48
   2c880:	50c00007 	ldb	r3,0(r10)
   2c884:	8c4002a4 	muli	r17,r17,10
   2c888:	84000044 	addi	r16,r16,1
   2c88c:	8015883a 	mov	r10,r16
   2c890:	1463883a 	add	r17,r2,r17
   2c894:	18bff404 	addi	r2,r3,-48
   2c898:	30bff92e 	bgeu	r6,r2,2c880 <__alt_data_end+0xf802c880>
   2c89c:	003e2506 	br	2c134 <__alt_data_end+0xf802c134>
   2c8a0:	21003fcc 	andi	r4,r4,255
   2c8a4:	2002d41e 	bne	r4,zero,2d3f8 <___vfiprintf_internal_r+0x1444>
   2c8a8:	a5000414 	ori	r20,r20,16
   2c8ac:	a080080c 	andi	r2,r20,32
   2c8b0:	103fb51e 	bne	r2,zero,2c788 <__alt_data_end+0xf802c788>
   2c8b4:	a080040c 	andi	r2,r20,16
   2c8b8:	1001f826 	beq	r2,zero,2d09c <___vfiprintf_internal_r+0x10e8>
   2c8bc:	da802217 	ldw	r10,136(sp)
   2c8c0:	54800017 	ldw	r18,0(r10)
   2c8c4:	52800104 	addi	r10,r10,4
   2c8c8:	da802215 	stw	r10,136(sp)
   2c8cc:	9027d7fa 	srai	r19,r18,31
   2c8d0:	9805883a 	mov	r2,r19
   2c8d4:	003fb206 	br	2c7a0 <__alt_data_end+0xf802c7a0>
   2c8d8:	21003fcc 	andi	r4,r4,255
   2c8dc:	2002c41e 	bne	r4,zero,2d3f0 <___vfiprintf_internal_r+0x143c>
   2c8e0:	a5000414 	ori	r20,r20,16
   2c8e4:	a080080c 	andi	r2,r20,32
   2c8e8:	103f5f1e 	bne	r2,zero,2c668 <__alt_data_end+0xf802c668>
   2c8ec:	a080040c 	andi	r2,r20,16
   2c8f0:	10020f26 	beq	r2,zero,2d130 <___vfiprintf_internal_r+0x117c>
   2c8f4:	da802217 	ldw	r10,136(sp)
   2c8f8:	d8001d85 	stb	zero,118(sp)
   2c8fc:	0027883a 	mov	r19,zero
   2c900:	50800104 	addi	r2,r10,4
   2c904:	54800017 	ldw	r18,0(r10)
   2c908:	48021116 	blt	r9,zero,2d150 <___vfiprintf_internal_r+0x119c>
   2c90c:	00ffdfc4 	movi	r3,-129
   2c910:	d8802215 	stw	r2,136(sp)
   2c914:	a0e8703a 	and	r20,r20,r3
   2c918:	903f5e1e 	bne	r18,zero,2c694 <__alt_data_end+0xf802c694>
   2c91c:	0039883a 	mov	fp,zero
   2c920:	4802a626 	beq	r9,zero,2d3bc <___vfiprintf_internal_r+0x1408>
   2c924:	0025883a 	mov	r18,zero
   2c928:	0027883a 	mov	r19,zero
   2c92c:	003f5a06 	br	2c698 <__alt_data_end+0xf802c698>
   2c930:	21003fcc 	andi	r4,r4,255
   2c934:	20029f1e 	bne	r4,zero,2d3b4 <___vfiprintf_internal_r+0x1400>
   2c938:	a5000414 	ori	r20,r20,16
   2c93c:	a080080c 	andi	r2,r20,32
   2c940:	10005e1e 	bne	r2,zero,2cabc <___vfiprintf_internal_r+0xb08>
   2c944:	a080040c 	andi	r2,r20,16
   2c948:	1001a21e 	bne	r2,zero,2cfd4 <___vfiprintf_internal_r+0x1020>
   2c94c:	a080100c 	andi	r2,r20,64
   2c950:	d8001d85 	stb	zero,118(sp)
   2c954:	da802217 	ldw	r10,136(sp)
   2c958:	1002231e 	bne	r2,zero,2d1e8 <___vfiprintf_internal_r+0x1234>
   2c95c:	50800104 	addi	r2,r10,4
   2c960:	54800017 	ldw	r18,0(r10)
   2c964:	0027883a 	mov	r19,zero
   2c968:	4801a00e 	bge	r9,zero,2cfec <___vfiprintf_internal_r+0x1038>
   2c96c:	d8802215 	stw	r2,136(sp)
   2c970:	0039883a 	mov	fp,zero
   2c974:	94c4b03a 	or	r2,r18,r19
   2c978:	103f901e 	bne	r2,zero,2c7bc <__alt_data_end+0xf802c7bc>
   2c97c:	00800044 	movi	r2,1
   2c980:	10803fcc 	andi	r2,r2,255
   2c984:	00c00044 	movi	r3,1
   2c988:	10c05926 	beq	r2,r3,2caf0 <___vfiprintf_internal_r+0xb3c>
   2c98c:	00c00084 	movi	r3,2
   2c990:	10ffe41e 	bne	r2,r3,2c924 <__alt_data_end+0xf802c924>
   2c994:	0025883a 	mov	r18,zero
   2c998:	0027883a 	mov	r19,zero
   2c99c:	00013d06 	br	2ce94 <___vfiprintf_internal_r+0xee0>
   2c9a0:	21003fcc 	andi	r4,r4,255
   2c9a4:	2002811e 	bne	r4,zero,2d3ac <___vfiprintf_internal_r+0x13f8>
   2c9a8:	00810034 	movhi	r2,1024
   2c9ac:	10802804 	addi	r2,r2,160
   2c9b0:	d8802615 	stw	r2,152(sp)
   2c9b4:	a080080c 	andi	r2,r20,32
   2c9b8:	103f561e 	bne	r2,zero,2c714 <__alt_data_end+0xf802c714>
   2c9bc:	a080040c 	andi	r2,r20,16
   2c9c0:	1001d126 	beq	r2,zero,2d108 <___vfiprintf_internal_r+0x1154>
   2c9c4:	da802217 	ldw	r10,136(sp)
   2c9c8:	0027883a 	mov	r19,zero
   2c9cc:	54800017 	ldw	r18,0(r10)
   2c9d0:	52800104 	addi	r10,r10,4
   2c9d4:	da802215 	stw	r10,136(sp)
   2c9d8:	003f5306 	br	2c728 <__alt_data_end+0xf802c728>
   2c9dc:	da802217 	ldw	r10,136(sp)
   2c9e0:	d8001d85 	stb	zero,118(sp)
   2c9e4:	55400017 	ldw	r21,0(r10)
   2c9e8:	50c00104 	addi	r3,r10,4
   2c9ec:	a8024226 	beq	r21,zero,2d2f8 <___vfiprintf_internal_r+0x1344>
   2c9f0:	48021816 	blt	r9,zero,2d254 <___vfiprintf_internal_r+0x12a0>
   2c9f4:	480d883a 	mov	r6,r9
   2c9f8:	000b883a 	mov	r5,zero
   2c9fc:	a809883a 	mov	r4,r21
   2ca00:	d8c02a15 	stw	r3,168(sp)
   2ca04:	da002b15 	stw	r8,172(sp)
   2ca08:	da402c15 	stw	r9,176(sp)
   2ca0c:	0028ffc0 	call	28ffc <memchr>
   2ca10:	d8c02a17 	ldw	r3,168(sp)
   2ca14:	da002b17 	ldw	r8,172(sp)
   2ca18:	da402c17 	ldw	r9,176(sp)
   2ca1c:	10024826 	beq	r2,zero,2d340 <___vfiprintf_internal_r+0x138c>
   2ca20:	1567c83a 	sub	r19,r2,r21
   2ca24:	df001d83 	ldbu	fp,118(sp)
   2ca28:	d8c02215 	stw	r3,136(sp)
   2ca2c:	0013883a 	mov	r9,zero
   2ca30:	003e6006 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2ca34:	21003fcc 	andi	r4,r4,255
   2ca38:	203fc026 	beq	r4,zero,2c93c <__alt_data_end+0xf802c93c>
   2ca3c:	d9c01d85 	stb	r7,118(sp)
   2ca40:	003fbe06 	br	2c93c <__alt_data_end+0xf802c93c>
   2ca44:	da802217 	ldw	r10,136(sp)
   2ca48:	54400017 	ldw	r17,0(r10)
   2ca4c:	50800104 	addi	r2,r10,4
   2ca50:	883e3b16 	blt	r17,zero,2c340 <__alt_data_end+0xf802c340>
   2ca54:	d8802215 	stw	r2,136(sp)
   2ca58:	80c00007 	ldb	r3,0(r16)
   2ca5c:	003db406 	br	2c130 <__alt_data_end+0xf802c130>
   2ca60:	01000044 	movi	r4,1
   2ca64:	01c00ac4 	movi	r7,43
   2ca68:	80c00007 	ldb	r3,0(r16)
   2ca6c:	003db006 	br	2c130 <__alt_data_end+0xf802c130>
   2ca70:	80c00007 	ldb	r3,0(r16)
   2ca74:	82800044 	addi	r10,r16,1
   2ca78:	1b423c26 	beq	r3,r13,2d36c <___vfiprintf_internal_r+0x13b8>
   2ca7c:	18bff404 	addi	r2,r3,-48
   2ca80:	0013883a 	mov	r9,zero
   2ca84:	30822b36 	bltu	r6,r2,2d334 <___vfiprintf_internal_r+0x1380>
   2ca88:	50c00007 	ldb	r3,0(r10)
   2ca8c:	4a4002a4 	muli	r9,r9,10
   2ca90:	54000044 	addi	r16,r10,1
   2ca94:	8015883a 	mov	r10,r16
   2ca98:	4893883a 	add	r9,r9,r2
   2ca9c:	18bff404 	addi	r2,r3,-48
   2caa0:	30bff92e 	bgeu	r6,r2,2ca88 <__alt_data_end+0xf802ca88>
   2caa4:	483da30e 	bge	r9,zero,2c134 <__alt_data_end+0xf802c134>
   2caa8:	027fffc4 	movi	r9,-1
   2caac:	003da106 	br	2c134 <__alt_data_end+0xf802c134>
   2cab0:	a5001014 	ori	r20,r20,64
   2cab4:	80c00007 	ldb	r3,0(r16)
   2cab8:	003d9d06 	br	2c130 <__alt_data_end+0xf802c130>
   2cabc:	da802217 	ldw	r10,136(sp)
   2cac0:	d8001d85 	stb	zero,118(sp)
   2cac4:	50c00204 	addi	r3,r10,8
   2cac8:	54800017 	ldw	r18,0(r10)
   2cacc:	54c00117 	ldw	r19,4(r10)
   2cad0:	4801ca16 	blt	r9,zero,2d1fc <___vfiprintf_internal_r+0x1248>
   2cad4:	013fdfc4 	movi	r4,-129
   2cad8:	94c4b03a 	or	r2,r18,r19
   2cadc:	d8c02215 	stw	r3,136(sp)
   2cae0:	a128703a 	and	r20,r20,r4
   2cae4:	0039883a 	mov	fp,zero
   2cae8:	103f341e 	bne	r2,zero,2c7bc <__alt_data_end+0xf802c7bc>
   2caec:	483e2e26 	beq	r9,zero,2c3a8 <__alt_data_end+0xf802c3a8>
   2caf0:	0025883a 	mov	r18,zero
   2caf4:	94800c04 	addi	r18,r18,48
   2caf8:	dc8019c5 	stb	r18,103(sp)
   2cafc:	dcc02717 	ldw	r19,156(sp)
   2cb00:	dd4019c4 	addi	r21,sp,103
   2cb04:	003e2b06 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2cb08:	21003fcc 	andi	r4,r4,255
   2cb0c:	2002361e 	bne	r4,zero,2d3e8 <___vfiprintf_internal_r+0x1434>
   2cb10:	1801c126 	beq	r3,zero,2d218 <___vfiprintf_internal_r+0x1264>
   2cb14:	04800044 	movi	r18,1
   2cb18:	d8c01005 	stb	r3,64(sp)
   2cb1c:	d8001d85 	stb	zero,118(sp)
   2cb20:	9027883a 	mov	r19,r18
   2cb24:	dd401004 	addi	r21,sp,64
   2cb28:	003f1106 	br	2c770 <__alt_data_end+0xf802c770>
   2cb2c:	d9402117 	ldw	r5,132(sp)
   2cb30:	d9002017 	ldw	r4,128(sp)
   2cb34:	d9801a04 	addi	r6,sp,104
   2cb38:	d9c02b15 	stw	r7,172(sp)
   2cb3c:	dbc02a15 	stw	r15,168(sp)
   2cb40:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cb44:	d9c02b17 	ldw	r7,172(sp)
   2cb48:	dbc02a17 	ldw	r15,168(sp)
   2cb4c:	10006d1e 	bne	r2,zero,2cd04 <___vfiprintf_internal_r+0xd50>
   2cb50:	d9801b17 	ldw	r6,108(sp)
   2cb54:	d8801c17 	ldw	r2,112(sp)
   2cb58:	d811883a 	mov	r8,sp
   2cb5c:	31400044 	addi	r5,r6,1
   2cb60:	003e3306 	br	2c430 <__alt_data_end+0xf802c430>
   2cb64:	d9401b17 	ldw	r5,108(sp)
   2cb68:	d8801c17 	ldw	r2,112(sp)
   2cb6c:	29000044 	addi	r4,r5,1
   2cb70:	d8c01d87 	ldb	r3,118(sp)
   2cb74:	183e4d26 	beq	r3,zero,2c4ac <__alt_data_end+0xf802c4ac>
   2cb78:	00c00044 	movi	r3,1
   2cb7c:	d9401d84 	addi	r5,sp,118
   2cb80:	10c5883a 	add	r2,r2,r3
   2cb84:	41400015 	stw	r5,0(r8)
   2cb88:	40c00115 	stw	r3,4(r8)
   2cb8c:	d8801c15 	stw	r2,112(sp)
   2cb90:	d9001b15 	stw	r4,108(sp)
   2cb94:	014001c4 	movi	r5,7
   2cb98:	2900a90e 	bge	r5,r4,2ce40 <___vfiprintf_internal_r+0xe8c>
   2cb9c:	1000da1e 	bne	r2,zero,2cf08 <___vfiprintf_internal_r+0xf54>
   2cba0:	7000ab1e 	bne	r14,zero,2ce50 <___vfiprintf_internal_r+0xe9c>
   2cba4:	000b883a 	mov	r5,zero
   2cba8:	1809883a 	mov	r4,r3
   2cbac:	d811883a 	mov	r8,sp
   2cbb0:	00c02004 	movi	r3,128
   2cbb4:	e0fe4d26 	beq	fp,r3,2c4ec <__alt_data_end+0xf802c4ec>
   2cbb8:	4cf9c83a 	sub	fp,r9,r19
   2cbbc:	073e7b0e 	bge	zero,fp,2c5ac <__alt_data_end+0xf802c5ac>
   2cbc0:	01c00404 	movi	r7,16
   2cbc4:	3f01900e 	bge	r7,fp,2d208 <___vfiprintf_internal_r+0x1254>
   2cbc8:	00c10034 	movhi	r3,1024
   2cbcc:	18c09d04 	addi	r3,r3,628
   2cbd0:	d8c02415 	stw	r3,144(sp)
   2cbd4:	034001c4 	movi	r13,7
   2cbd8:	00000506 	br	2cbf0 <___vfiprintf_internal_r+0xc3c>
   2cbdc:	29000084 	addi	r4,r5,2
   2cbe0:	42000204 	addi	r8,r8,8
   2cbe4:	180b883a 	mov	r5,r3
   2cbe8:	e73ffc04 	addi	fp,fp,-16
   2cbec:	3f000d0e 	bge	r7,fp,2cc24 <___vfiprintf_internal_r+0xc70>
   2cbf0:	10800404 	addi	r2,r2,16
   2cbf4:	28c00044 	addi	r3,r5,1
   2cbf8:	45c00015 	stw	r23,0(r8)
   2cbfc:	41c00115 	stw	r7,4(r8)
   2cc00:	d8801c15 	stw	r2,112(sp)
   2cc04:	d8c01b15 	stw	r3,108(sp)
   2cc08:	68fff40e 	bge	r13,r3,2cbdc <__alt_data_end+0xf802cbdc>
   2cc0c:	1000101e 	bne	r2,zero,2cc50 <___vfiprintf_internal_r+0xc9c>
   2cc10:	e73ffc04 	addi	fp,fp,-16
   2cc14:	01000044 	movi	r4,1
   2cc18:	000b883a 	mov	r5,zero
   2cc1c:	d811883a 	mov	r8,sp
   2cc20:	3f3ff316 	blt	r7,fp,2cbf0 <__alt_data_end+0xf802cbf0>
   2cc24:	da802417 	ldw	r10,144(sp)
   2cc28:	1705883a 	add	r2,r2,fp
   2cc2c:	47000115 	stw	fp,4(r8)
   2cc30:	42800015 	stw	r10,0(r8)
   2cc34:	d8801c15 	stw	r2,112(sp)
   2cc38:	d9001b15 	stw	r4,108(sp)
   2cc3c:	00c001c4 	movi	r3,7
   2cc40:	19003616 	blt	r3,r4,2cd1c <___vfiprintf_internal_r+0xd68>
   2cc44:	42000204 	addi	r8,r8,8
   2cc48:	21000044 	addi	r4,r4,1
   2cc4c:	003e5706 	br	2c5ac <__alt_data_end+0xf802c5ac>
   2cc50:	d9402117 	ldw	r5,132(sp)
   2cc54:	d9002017 	ldw	r4,128(sp)
   2cc58:	d9801a04 	addi	r6,sp,104
   2cc5c:	d9c02b15 	stw	r7,172(sp)
   2cc60:	db402a15 	stw	r13,168(sp)
   2cc64:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cc68:	d9c02b17 	ldw	r7,172(sp)
   2cc6c:	db402a17 	ldw	r13,168(sp)
   2cc70:	1000241e 	bne	r2,zero,2cd04 <___vfiprintf_internal_r+0xd50>
   2cc74:	d9401b17 	ldw	r5,108(sp)
   2cc78:	d8801c17 	ldw	r2,112(sp)
   2cc7c:	d811883a 	mov	r8,sp
   2cc80:	29000044 	addi	r4,r5,1
   2cc84:	003fd806 	br	2cbe8 <__alt_data_end+0xf802cbe8>
   2cc88:	d9401b17 	ldw	r5,108(sp)
   2cc8c:	00c10034 	movhi	r3,1024
   2cc90:	18c0a104 	addi	r3,r3,644
   2cc94:	d8c02415 	stw	r3,144(sp)
   2cc98:	29400044 	addi	r5,r5,1
   2cc9c:	d8c02417 	ldw	r3,144(sp)
   2cca0:	14c5883a 	add	r2,r2,r19
   2cca4:	44c00115 	stw	r19,4(r8)
   2cca8:	40c00015 	stw	r3,0(r8)
   2ccac:	d8801c15 	stw	r2,112(sp)
   2ccb0:	d9401b15 	stw	r5,108(sp)
   2ccb4:	00c001c4 	movi	r3,7
   2ccb8:	1940070e 	bge	r3,r5,2ccd8 <___vfiprintf_internal_r+0xd24>
   2ccbc:	103e4826 	beq	r2,zero,2c5e0 <__alt_data_end+0xf802c5e0>
   2ccc0:	d9402117 	ldw	r5,132(sp)
   2ccc4:	d9002017 	ldw	r4,128(sp)
   2ccc8:	d9801a04 	addi	r6,sp,104
   2cccc:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2ccd0:	10000c1e 	bne	r2,zero,2cd04 <___vfiprintf_internal_r+0xd50>
   2ccd4:	d8801c17 	ldw	r2,112(sp)
   2ccd8:	8c80010e 	bge	r17,r18,2cce0 <___vfiprintf_internal_r+0xd2c>
   2ccdc:	9023883a 	mov	r17,r18
   2cce0:	da802317 	ldw	r10,140(sp)
   2cce4:	5455883a 	add	r10,r10,r17
   2cce8:	da802315 	stw	r10,140(sp)
   2ccec:	103e4126 	beq	r2,zero,2c5f4 <__alt_data_end+0xf802c5f4>
   2ccf0:	d9402117 	ldw	r5,132(sp)
   2ccf4:	d9002017 	ldw	r4,128(sp)
   2ccf8:	d9801a04 	addi	r6,sp,104
   2ccfc:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cd00:	103e3c26 	beq	r2,zero,2c5f4 <__alt_data_end+0xf802c5f4>
   2cd04:	dd002117 	ldw	r20,132(sp)
   2cd08:	a080030b 	ldhu	r2,12(r20)
   2cd0c:	1080100c 	andi	r2,r2,64
   2cd10:	1001231e 	bne	r2,zero,2d1a0 <___vfiprintf_internal_r+0x11ec>
   2cd14:	d8802317 	ldw	r2,140(sp)
   2cd18:	003d7b06 	br	2c308 <__alt_data_end+0xf802c308>
   2cd1c:	1000991e 	bne	r2,zero,2cf84 <___vfiprintf_internal_r+0xfd0>
   2cd20:	00c00044 	movi	r3,1
   2cd24:	9805883a 	mov	r2,r19
   2cd28:	dd400015 	stw	r21,0(sp)
   2cd2c:	dcc00115 	stw	r19,4(sp)
   2cd30:	dcc01c15 	stw	r19,112(sp)
   2cd34:	d8c01b15 	stw	r3,108(sp)
   2cd38:	d811883a 	mov	r8,sp
   2cd3c:	42000204 	addi	r8,r8,8
   2cd40:	a2c0010c 	andi	r11,r20,4
   2cd44:	583fe426 	beq	r11,zero,2ccd8 <__alt_data_end+0xf802ccd8>
   2cd48:	8ca7c83a 	sub	r19,r17,r18
   2cd4c:	04ffe20e 	bge	zero,r19,2ccd8 <__alt_data_end+0xf802ccd8>
   2cd50:	01c00404 	movi	r7,16
   2cd54:	3cffcc0e 	bge	r7,r19,2cc88 <__alt_data_end+0xf802cc88>
   2cd58:	02810034 	movhi	r10,1024
   2cd5c:	5280a104 	addi	r10,r10,644
   2cd60:	d9001b17 	ldw	r4,108(sp)
   2cd64:	da802415 	stw	r10,144(sp)
   2cd68:	382b883a 	mov	r21,r7
   2cd6c:	050001c4 	movi	r20,7
   2cd70:	df002017 	ldw	fp,128(sp)
   2cd74:	00000506 	br	2cd8c <___vfiprintf_internal_r+0xdd8>
   2cd78:	21400084 	addi	r5,r4,2
   2cd7c:	42000204 	addi	r8,r8,8
   2cd80:	1809883a 	mov	r4,r3
   2cd84:	9cfffc04 	addi	r19,r19,-16
   2cd88:	acffc40e 	bge	r21,r19,2cc9c <__alt_data_end+0xf802cc9c>
   2cd8c:	10800404 	addi	r2,r2,16
   2cd90:	20c00044 	addi	r3,r4,1
   2cd94:	45800015 	stw	r22,0(r8)
   2cd98:	45400115 	stw	r21,4(r8)
   2cd9c:	d8801c15 	stw	r2,112(sp)
   2cda0:	d8c01b15 	stw	r3,108(sp)
   2cda4:	a0fff40e 	bge	r20,r3,2cd78 <__alt_data_end+0xf802cd78>
   2cda8:	1000041e 	bne	r2,zero,2cdbc <___vfiprintf_internal_r+0xe08>
   2cdac:	01400044 	movi	r5,1
   2cdb0:	0009883a 	mov	r4,zero
   2cdb4:	d811883a 	mov	r8,sp
   2cdb8:	003ff206 	br	2cd84 <__alt_data_end+0xf802cd84>
   2cdbc:	d9402117 	ldw	r5,132(sp)
   2cdc0:	d9801a04 	addi	r6,sp,104
   2cdc4:	e009883a 	mov	r4,fp
   2cdc8:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cdcc:	103fcd1e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2cdd0:	d9001b17 	ldw	r4,108(sp)
   2cdd4:	d8801c17 	ldw	r2,112(sp)
   2cdd8:	d811883a 	mov	r8,sp
   2cddc:	21400044 	addi	r5,r4,1
   2cde0:	003fe806 	br	2cd84 <__alt_data_end+0xf802cd84>
   2cde4:	d9402117 	ldw	r5,132(sp)
   2cde8:	d9002017 	ldw	r4,128(sp)
   2cdec:	d9801a04 	addi	r6,sp,104
   2cdf0:	d9c02b15 	stw	r7,172(sp)
   2cdf4:	db402a15 	stw	r13,168(sp)
   2cdf8:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cdfc:	d9c02b17 	ldw	r7,172(sp)
   2ce00:	db402a17 	ldw	r13,168(sp)
   2ce04:	103fbf1e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2ce08:	d9401b17 	ldw	r5,108(sp)
   2ce0c:	d8801c17 	ldw	r2,112(sp)
   2ce10:	d811883a 	mov	r8,sp
   2ce14:	29800044 	addi	r6,r5,1
   2ce18:	003dc406 	br	2c52c <__alt_data_end+0xf802c52c>
   2ce1c:	1000d21e 	bne	r2,zero,2d168 <___vfiprintf_internal_r+0x11b4>
   2ce20:	d8c01d87 	ldb	r3,118(sp)
   2ce24:	18009526 	beq	r3,zero,2d07c <___vfiprintf_internal_r+0x10c8>
   2ce28:	00800044 	movi	r2,1
   2ce2c:	d8c01d84 	addi	r3,sp,118
   2ce30:	1009883a 	mov	r4,r2
   2ce34:	d8c00015 	stw	r3,0(sp)
   2ce38:	d8800115 	stw	r2,4(sp)
   2ce3c:	d811883a 	mov	r8,sp
   2ce40:	200b883a 	mov	r5,r4
   2ce44:	42000204 	addi	r8,r8,8
   2ce48:	21000044 	addi	r4,r4,1
   2ce4c:	003d9706 	br	2c4ac <__alt_data_end+0xf802c4ac>
   2ce50:	d9001d04 	addi	r4,sp,116
   2ce54:	00800084 	movi	r2,2
   2ce58:	d9000015 	stw	r4,0(sp)
   2ce5c:	d8800115 	stw	r2,4(sp)
   2ce60:	1809883a 	mov	r4,r3
   2ce64:	d811883a 	mov	r8,sp
   2ce68:	200b883a 	mov	r5,r4
   2ce6c:	42000204 	addi	r8,r8,8
   2ce70:	21000044 	addi	r4,r4,1
   2ce74:	003f4e06 	br	2cbb0 <__alt_data_end+0xf802cbb0>
   2ce78:	d8001d85 	stb	zero,118(sp)
   2ce7c:	48005016 	blt	r9,zero,2cfc0 <___vfiprintf_internal_r+0x100c>
   2ce80:	00ffdfc4 	movi	r3,-129
   2ce84:	94c4b03a 	or	r2,r18,r19
   2ce88:	a0e8703a 	and	r20,r20,r3
   2ce8c:	103d4426 	beq	r2,zero,2c3a0 <__alt_data_end+0xf802c3a0>
   2ce90:	0039883a 	mov	fp,zero
   2ce94:	d9002617 	ldw	r4,152(sp)
   2ce98:	dd401a04 	addi	r21,sp,104
   2ce9c:	908003cc 	andi	r2,r18,15
   2cea0:	9806973a 	slli	r3,r19,28
   2cea4:	2085883a 	add	r2,r4,r2
   2cea8:	9024d13a 	srli	r18,r18,4
   2ceac:	10800003 	ldbu	r2,0(r2)
   2ceb0:	9826d13a 	srli	r19,r19,4
   2ceb4:	ad7fffc4 	addi	r21,r21,-1
   2ceb8:	1ca4b03a 	or	r18,r3,r18
   2cebc:	a8800005 	stb	r2,0(r21)
   2cec0:	94c4b03a 	or	r2,r18,r19
   2cec4:	103ff51e 	bne	r2,zero,2ce9c <__alt_data_end+0xf802ce9c>
   2cec8:	003e5906 	br	2c830 <__alt_data_end+0xf802c830>
   2cecc:	d9402117 	ldw	r5,132(sp)
   2ced0:	d9002017 	ldw	r4,128(sp)
   2ced4:	d9801a04 	addi	r6,sp,104
   2ced8:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cedc:	103f891e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2cee0:	d8801c17 	ldw	r2,112(sp)
   2cee4:	d811883a 	mov	r8,sp
   2cee8:	003f9506 	br	2cd40 <__alt_data_end+0xf802cd40>
   2ceec:	d9402117 	ldw	r5,132(sp)
   2cef0:	d9002017 	ldw	r4,128(sp)
   2cef4:	d9801a04 	addi	r6,sp,104
   2cef8:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cefc:	103f811e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2cf00:	d811883a 	mov	r8,sp
   2cf04:	003ced06 	br	2c2bc <__alt_data_end+0xf802c2bc>
   2cf08:	d9402117 	ldw	r5,132(sp)
   2cf0c:	d9002017 	ldw	r4,128(sp)
   2cf10:	d9801a04 	addi	r6,sp,104
   2cf14:	da402c15 	stw	r9,176(sp)
   2cf18:	db802a15 	stw	r14,168(sp)
   2cf1c:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cf20:	da402c17 	ldw	r9,176(sp)
   2cf24:	db802a17 	ldw	r14,168(sp)
   2cf28:	103f761e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2cf2c:	d9401b17 	ldw	r5,108(sp)
   2cf30:	d8801c17 	ldw	r2,112(sp)
   2cf34:	d811883a 	mov	r8,sp
   2cf38:	29000044 	addi	r4,r5,1
   2cf3c:	003d5b06 	br	2c4ac <__alt_data_end+0xf802c4ac>
   2cf40:	d9402117 	ldw	r5,132(sp)
   2cf44:	d9002017 	ldw	r4,128(sp)
   2cf48:	d9801a04 	addi	r6,sp,104
   2cf4c:	da402c15 	stw	r9,176(sp)
   2cf50:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cf54:	da402c17 	ldw	r9,176(sp)
   2cf58:	103f6a1e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2cf5c:	d9401b17 	ldw	r5,108(sp)
   2cf60:	d8801c17 	ldw	r2,112(sp)
   2cf64:	d811883a 	mov	r8,sp
   2cf68:	29000044 	addi	r4,r5,1
   2cf6c:	003f1006 	br	2cbb0 <__alt_data_end+0xf802cbb0>
   2cf70:	1000c31e 	bne	r2,zero,2d280 <___vfiprintf_internal_r+0x12cc>
   2cf74:	01000044 	movi	r4,1
   2cf78:	000b883a 	mov	r5,zero
   2cf7c:	d811883a 	mov	r8,sp
   2cf80:	003f0d06 	br	2cbb8 <__alt_data_end+0xf802cbb8>
   2cf84:	d9402117 	ldw	r5,132(sp)
   2cf88:	d9002017 	ldw	r4,128(sp)
   2cf8c:	d9801a04 	addi	r6,sp,104
   2cf90:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2cf94:	103f5b1e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2cf98:	d9001b17 	ldw	r4,108(sp)
   2cf9c:	d8801c17 	ldw	r2,112(sp)
   2cfa0:	d811883a 	mov	r8,sp
   2cfa4:	21000044 	addi	r4,r4,1
   2cfa8:	003d8006 	br	2c5ac <__alt_data_end+0xf802c5ac>
   2cfac:	01010034 	movhi	r4,1024
   2cfb0:	21002d04 	addi	r4,r4,180
   2cfb4:	d9002615 	stw	r4,152(sp)
   2cfb8:	d8c02215 	stw	r3,136(sp)
   2cfbc:	1029883a 	mov	r20,r2
   2cfc0:	94c4b03a 	or	r2,r18,r19
   2cfc4:	103fb21e 	bne	r2,zero,2ce90 <__alt_data_end+0xf802ce90>
   2cfc8:	0039883a 	mov	fp,zero
   2cfcc:	00800084 	movi	r2,2
   2cfd0:	003e6b06 	br	2c980 <__alt_data_end+0xf802c980>
   2cfd4:	da802217 	ldw	r10,136(sp)
   2cfd8:	d8001d85 	stb	zero,118(sp)
   2cfdc:	0027883a 	mov	r19,zero
   2cfe0:	50800104 	addi	r2,r10,4
   2cfe4:	54800017 	ldw	r18,0(r10)
   2cfe8:	483e6016 	blt	r9,zero,2c96c <__alt_data_end+0xf802c96c>
   2cfec:	00ffdfc4 	movi	r3,-129
   2cff0:	d8802215 	stw	r2,136(sp)
   2cff4:	a0e8703a 	and	r20,r20,r3
   2cff8:	0039883a 	mov	fp,zero
   2cffc:	903ebb26 	beq	r18,zero,2caec <__alt_data_end+0xf802caec>
   2d000:	00800244 	movi	r2,9
   2d004:	14bdee36 	bltu	r2,r18,2c7c0 <__alt_data_end+0xf802c7c0>
   2d008:	003eba06 	br	2caf4 <__alt_data_end+0xf802caf4>
   2d00c:	00800c04 	movi	r2,48
   2d010:	d8c01d45 	stb	r3,117(sp)
   2d014:	d8801d05 	stb	r2,116(sp)
   2d018:	d8001d85 	stb	zero,118(sp)
   2d01c:	a0c00094 	ori	r3,r20,2
   2d020:	4800a916 	blt	r9,zero,2d2c8 <___vfiprintf_internal_r+0x1314>
   2d024:	00bfdfc4 	movi	r2,-129
   2d028:	a096703a 	and	r11,r20,r2
   2d02c:	5d000094 	ori	r20,r11,2
   2d030:	0039883a 	mov	fp,zero
   2d034:	003f9706 	br	2ce94 <__alt_data_end+0xf802ce94>
   2d038:	8025883a 	mov	r18,r16
   2d03c:	003c2e06 	br	2c0f8 <__alt_data_end+0xf802c0f8>
   2d040:	00810034 	movhi	r2,1024
   2d044:	10802d04 	addi	r2,r2,180
   2d048:	0039883a 	mov	fp,zero
   2d04c:	d8802615 	stw	r2,152(sp)
   2d050:	003f9006 	br	2ce94 <__alt_data_end+0xf802ce94>
   2d054:	04a5c83a 	sub	r18,zero,r18
   2d058:	07000b44 	movi	fp,45
   2d05c:	9004c03a 	cmpne	r2,r18,zero
   2d060:	04e7c83a 	sub	r19,zero,r19
   2d064:	df001d85 	stb	fp,118(sp)
   2d068:	98a7c83a 	sub	r19,r19,r2
   2d06c:	48009f16 	blt	r9,zero,2d2ec <___vfiprintf_internal_r+0x1338>
   2d070:	00bfdfc4 	movi	r2,-129
   2d074:	a0a8703a 	and	r20,r20,r2
   2d078:	003dd006 	br	2c7bc <__alt_data_end+0xf802c7bc>
   2d07c:	70004c26 	beq	r14,zero,2d1b0 <___vfiprintf_internal_r+0x11fc>
   2d080:	00800084 	movi	r2,2
   2d084:	d8c01d04 	addi	r3,sp,116
   2d088:	d8c00015 	stw	r3,0(sp)
   2d08c:	d8800115 	stw	r2,4(sp)
   2d090:	01000044 	movi	r4,1
   2d094:	d811883a 	mov	r8,sp
   2d098:	003f7306 	br	2ce68 <__alt_data_end+0xf802ce68>
   2d09c:	a080100c 	andi	r2,r20,64
   2d0a0:	da802217 	ldw	r10,136(sp)
   2d0a4:	103e0626 	beq	r2,zero,2c8c0 <__alt_data_end+0xf802c8c0>
   2d0a8:	5480000f 	ldh	r18,0(r10)
   2d0ac:	52800104 	addi	r10,r10,4
   2d0b0:	da802215 	stw	r10,136(sp)
   2d0b4:	9027d7fa 	srai	r19,r18,31
   2d0b8:	9805883a 	mov	r2,r19
   2d0bc:	003db806 	br	2c7a0 <__alt_data_end+0xf802c7a0>
   2d0c0:	a080040c 	andi	r2,r20,16
   2d0c4:	1000091e 	bne	r2,zero,2d0ec <___vfiprintf_internal_r+0x1138>
   2d0c8:	a2c0100c 	andi	r11,r20,64
   2d0cc:	58000726 	beq	r11,zero,2d0ec <___vfiprintf_internal_r+0x1138>
   2d0d0:	da802217 	ldw	r10,136(sp)
   2d0d4:	50800017 	ldw	r2,0(r10)
   2d0d8:	52800104 	addi	r10,r10,4
   2d0dc:	da802215 	stw	r10,136(sp)
   2d0e0:	da802317 	ldw	r10,140(sp)
   2d0e4:	1280000d 	sth	r10,0(r2)
   2d0e8:	003be706 	br	2c088 <__alt_data_end+0xf802c088>
   2d0ec:	da802217 	ldw	r10,136(sp)
   2d0f0:	50800017 	ldw	r2,0(r10)
   2d0f4:	52800104 	addi	r10,r10,4
   2d0f8:	da802215 	stw	r10,136(sp)
   2d0fc:	da802317 	ldw	r10,140(sp)
   2d100:	12800015 	stw	r10,0(r2)
   2d104:	003be006 	br	2c088 <__alt_data_end+0xf802c088>
   2d108:	a080100c 	andi	r2,r20,64
   2d10c:	da802217 	ldw	r10,136(sp)
   2d110:	10003026 	beq	r2,zero,2d1d4 <___vfiprintf_internal_r+0x1220>
   2d114:	5480000b 	ldhu	r18,0(r10)
   2d118:	52800104 	addi	r10,r10,4
   2d11c:	0027883a 	mov	r19,zero
   2d120:	da802215 	stw	r10,136(sp)
   2d124:	003d8006 	br	2c728 <__alt_data_end+0xf802c728>
   2d128:	80c00007 	ldb	r3,0(r16)
   2d12c:	003c0006 	br	2c130 <__alt_data_end+0xf802c130>
   2d130:	a080100c 	andi	r2,r20,64
   2d134:	d8001d85 	stb	zero,118(sp)
   2d138:	da802217 	ldw	r10,136(sp)
   2d13c:	1000201e 	bne	r2,zero,2d1c0 <___vfiprintf_internal_r+0x120c>
   2d140:	50800104 	addi	r2,r10,4
   2d144:	54800017 	ldw	r18,0(r10)
   2d148:	0027883a 	mov	r19,zero
   2d14c:	483def0e 	bge	r9,zero,2c90c <__alt_data_end+0xf802c90c>
   2d150:	94c6b03a 	or	r3,r18,r19
   2d154:	d8802215 	stw	r2,136(sp)
   2d158:	183d4e1e 	bne	r3,zero,2c694 <__alt_data_end+0xf802c694>
   2d15c:	0039883a 	mov	fp,zero
   2d160:	0005883a 	mov	r2,zero
   2d164:	003e0606 	br	2c980 <__alt_data_end+0xf802c980>
   2d168:	d9402117 	ldw	r5,132(sp)
   2d16c:	d9002017 	ldw	r4,128(sp)
   2d170:	d9801a04 	addi	r6,sp,104
   2d174:	da402c15 	stw	r9,176(sp)
   2d178:	db802a15 	stw	r14,168(sp)
   2d17c:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2d180:	da402c17 	ldw	r9,176(sp)
   2d184:	db802a17 	ldw	r14,168(sp)
   2d188:	103ede1e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2d18c:	d9401b17 	ldw	r5,108(sp)
   2d190:	d8801c17 	ldw	r2,112(sp)
   2d194:	d811883a 	mov	r8,sp
   2d198:	29000044 	addi	r4,r5,1
   2d19c:	003e7406 	br	2cb70 <__alt_data_end+0xf802cb70>
   2d1a0:	00bfffc4 	movi	r2,-1
   2d1a4:	003c5806 	br	2c308 <__alt_data_end+0xf802c308>
   2d1a8:	d811883a 	mov	r8,sp
   2d1ac:	003ee806 	br	2cd50 <__alt_data_end+0xf802cd50>
   2d1b0:	000b883a 	mov	r5,zero
   2d1b4:	01000044 	movi	r4,1
   2d1b8:	d811883a 	mov	r8,sp
   2d1bc:	003e7c06 	br	2cbb0 <__alt_data_end+0xf802cbb0>
   2d1c0:	50800104 	addi	r2,r10,4
   2d1c4:	5480000b 	ldhu	r18,0(r10)
   2d1c8:	0027883a 	mov	r19,zero
   2d1cc:	483dcf0e 	bge	r9,zero,2c90c <__alt_data_end+0xf802c90c>
   2d1d0:	003fdf06 	br	2d150 <__alt_data_end+0xf802d150>
   2d1d4:	54800017 	ldw	r18,0(r10)
   2d1d8:	52800104 	addi	r10,r10,4
   2d1dc:	0027883a 	mov	r19,zero
   2d1e0:	da802215 	stw	r10,136(sp)
   2d1e4:	003d5006 	br	2c728 <__alt_data_end+0xf802c728>
   2d1e8:	50800104 	addi	r2,r10,4
   2d1ec:	5480000b 	ldhu	r18,0(r10)
   2d1f0:	0027883a 	mov	r19,zero
   2d1f4:	483f7d0e 	bge	r9,zero,2cfec <__alt_data_end+0xf802cfec>
   2d1f8:	003ddc06 	br	2c96c <__alt_data_end+0xf802c96c>
   2d1fc:	d8c02215 	stw	r3,136(sp)
   2d200:	0039883a 	mov	fp,zero
   2d204:	003ddb06 	br	2c974 <__alt_data_end+0xf802c974>
   2d208:	02810034 	movhi	r10,1024
   2d20c:	52809d04 	addi	r10,r10,628
   2d210:	da802415 	stw	r10,144(sp)
   2d214:	003e8306 	br	2cc24 <__alt_data_end+0xf802cc24>
   2d218:	d8801c17 	ldw	r2,112(sp)
   2d21c:	dd002117 	ldw	r20,132(sp)
   2d220:	103eb926 	beq	r2,zero,2cd08 <__alt_data_end+0xf802cd08>
   2d224:	d9002017 	ldw	r4,128(sp)
   2d228:	d9801a04 	addi	r6,sp,104
   2d22c:	a00b883a 	mov	r5,r20
   2d230:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2d234:	003eb406 	br	2cd08 <__alt_data_end+0xf802cd08>
   2d238:	80c00043 	ldbu	r3,1(r16)
   2d23c:	a5000814 	ori	r20,r20,32
   2d240:	84000044 	addi	r16,r16,1
   2d244:	18c03fcc 	andi	r3,r3,255
   2d248:	18c0201c 	xori	r3,r3,128
   2d24c:	18ffe004 	addi	r3,r3,-128
   2d250:	003bb706 	br	2c130 <__alt_data_end+0xf802c130>
   2d254:	a809883a 	mov	r4,r21
   2d258:	d8c02a15 	stw	r3,168(sp)
   2d25c:	da002b15 	stw	r8,172(sp)
   2d260:	0021d300 	call	21d30 <strlen>
   2d264:	d8c02a17 	ldw	r3,168(sp)
   2d268:	1027883a 	mov	r19,r2
   2d26c:	df001d83 	ldbu	fp,118(sp)
   2d270:	d8c02215 	stw	r3,136(sp)
   2d274:	0013883a 	mov	r9,zero
   2d278:	da002b17 	ldw	r8,172(sp)
   2d27c:	003c4d06 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2d280:	d9402117 	ldw	r5,132(sp)
   2d284:	d9002017 	ldw	r4,128(sp)
   2d288:	d9801a04 	addi	r6,sp,104
   2d28c:	da402c15 	stw	r9,176(sp)
   2d290:	002bea00 	call	2bea0 <__sprint_r.part.0>
   2d294:	da402c17 	ldw	r9,176(sp)
   2d298:	103e9a1e 	bne	r2,zero,2cd04 <__alt_data_end+0xf802cd04>
   2d29c:	d9401b17 	ldw	r5,108(sp)
   2d2a0:	d8801c17 	ldw	r2,112(sp)
   2d2a4:	d811883a 	mov	r8,sp
   2d2a8:	29000044 	addi	r4,r5,1
   2d2ac:	003e4206 	br	2cbb8 <__alt_data_end+0xf802cbb8>
   2d2b0:	d9401b17 	ldw	r5,108(sp)
   2d2b4:	01010034 	movhi	r4,1024
   2d2b8:	2100a104 	addi	r4,r4,644
   2d2bc:	d9002415 	stw	r4,144(sp)
   2d2c0:	29400044 	addi	r5,r5,1
   2d2c4:	003c6d06 	br	2c47c <__alt_data_end+0xf802c47c>
   2d2c8:	0039883a 	mov	fp,zero
   2d2cc:	00800084 	movi	r2,2
   2d2d0:	10803fcc 	andi	r2,r2,255
   2d2d4:	01000044 	movi	r4,1
   2d2d8:	11001e26 	beq	r2,r4,2d354 <___vfiprintf_internal_r+0x13a0>
   2d2dc:	01000084 	movi	r4,2
   2d2e0:	11001e1e 	bne	r2,r4,2d35c <___vfiprintf_internal_r+0x13a8>
   2d2e4:	1829883a 	mov	r20,r3
   2d2e8:	003eea06 	br	2ce94 <__alt_data_end+0xf802ce94>
   2d2ec:	a007883a 	mov	r3,r20
   2d2f0:	00800044 	movi	r2,1
   2d2f4:	003ff606 	br	2d2d0 <__alt_data_end+0xf802d2d0>
   2d2f8:	00800184 	movi	r2,6
   2d2fc:	1240012e 	bgeu	r2,r9,2d304 <___vfiprintf_internal_r+0x1350>
   2d300:	1013883a 	mov	r9,r2
   2d304:	4827883a 	mov	r19,r9
   2d308:	4825883a 	mov	r18,r9
   2d30c:	48001516 	blt	r9,zero,2d364 <___vfiprintf_internal_r+0x13b0>
   2d310:	05410034 	movhi	r21,1024
   2d314:	d8c02215 	stw	r3,136(sp)
   2d318:	ad403204 	addi	r21,r21,200
   2d31c:	003d1406 	br	2c770 <__alt_data_end+0xf802c770>
   2d320:	02810034 	movhi	r10,1024
   2d324:	52809d04 	addi	r10,r10,628
   2d328:	da802415 	stw	r10,144(sp)
   2d32c:	200d883a 	mov	r6,r4
   2d330:	003c9106 	br	2c578 <__alt_data_end+0xf802c578>
   2d334:	5021883a 	mov	r16,r10
   2d338:	0013883a 	mov	r9,zero
   2d33c:	003b7d06 	br	2c134 <__alt_data_end+0xf802c134>
   2d340:	4827883a 	mov	r19,r9
   2d344:	df001d83 	ldbu	fp,118(sp)
   2d348:	d8c02215 	stw	r3,136(sp)
   2d34c:	0013883a 	mov	r9,zero
   2d350:	003c1806 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2d354:	1829883a 	mov	r20,r3
   2d358:	003d1806 	br	2c7bc <__alt_data_end+0xf802c7bc>
   2d35c:	1829883a 	mov	r20,r3
   2d360:	003ccd06 	br	2c698 <__alt_data_end+0xf802c698>
   2d364:	0025883a 	mov	r18,zero
   2d368:	003fe906 	br	2d310 <__alt_data_end+0xf802d310>
   2d36c:	d8802217 	ldw	r2,136(sp)
   2d370:	80c00043 	ldbu	r3,1(r16)
   2d374:	5021883a 	mov	r16,r10
   2d378:	12400017 	ldw	r9,0(r2)
   2d37c:	10800104 	addi	r2,r2,4
   2d380:	d8802215 	stw	r2,136(sp)
   2d384:	483faf0e 	bge	r9,zero,2d244 <__alt_data_end+0xf802d244>
   2d388:	18c03fcc 	andi	r3,r3,255
   2d38c:	18c0201c 	xori	r3,r3,128
   2d390:	027fffc4 	movi	r9,-1
   2d394:	18ffe004 	addi	r3,r3,-128
   2d398:	003b6506 	br	2c130 <__alt_data_end+0xf802c130>
   2d39c:	d9c01d85 	stb	r7,118(sp)
   2d3a0:	003ca006 	br	2c624 <__alt_data_end+0xf802c624>
   2d3a4:	d9c01d85 	stb	r7,118(sp)
   2d3a8:	003cad06 	br	2c660 <__alt_data_end+0xf802c660>
   2d3ac:	d9c01d85 	stb	r7,118(sp)
   2d3b0:	003d7d06 	br	2c9a8 <__alt_data_end+0xf802c9a8>
   2d3b4:	d9c01d85 	stb	r7,118(sp)
   2d3b8:	003d5f06 	br	2c938 <__alt_data_end+0xf802c938>
   2d3bc:	a080004c 	andi	r2,r20,1
   2d3c0:	0039883a 	mov	fp,zero
   2d3c4:	10000526 	beq	r2,zero,2d3dc <___vfiprintf_internal_r+0x1428>
   2d3c8:	00800c04 	movi	r2,48
   2d3cc:	d88019c5 	stb	r2,103(sp)
   2d3d0:	dcc02717 	ldw	r19,156(sp)
   2d3d4:	dd4019c4 	addi	r21,sp,103
   2d3d8:	003bf606 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2d3dc:	0027883a 	mov	r19,zero
   2d3e0:	dd401a04 	addi	r21,sp,104
   2d3e4:	003bf306 	br	2c3b4 <__alt_data_end+0xf802c3b4>
   2d3e8:	d9c01d85 	stb	r7,118(sp)
   2d3ec:	003dc806 	br	2cb10 <__alt_data_end+0xf802cb10>
   2d3f0:	d9c01d85 	stb	r7,118(sp)
   2d3f4:	003d3a06 	br	2c8e0 <__alt_data_end+0xf802c8e0>
   2d3f8:	d9c01d85 	stb	r7,118(sp)
   2d3fc:	003d2a06 	br	2c8a8 <__alt_data_end+0xf802c8a8>
   2d400:	d9c01d85 	stb	r7,118(sp)
   2d404:	003cde06 	br	2c780 <__alt_data_end+0xf802c780>
   2d408:	d9c01d85 	stb	r7,118(sp)
   2d40c:	003cbc06 	br	2c700 <__alt_data_end+0xf802c700>

0002d410 <__vfiprintf_internal>:
   2d410:	00810034 	movhi	r2,1024
   2d414:	1087e904 	addi	r2,r2,8100
   2d418:	300f883a 	mov	r7,r6
   2d41c:	280d883a 	mov	r6,r5
   2d420:	200b883a 	mov	r5,r4
   2d424:	11000017 	ldw	r4,0(r2)
   2d428:	002bfb41 	jmpi	2bfb4 <___vfiprintf_internal_r>

0002d42c <__sbprintf>:
   2d42c:	2880030b 	ldhu	r2,12(r5)
   2d430:	2ac01917 	ldw	r11,100(r5)
   2d434:	2a80038b 	ldhu	r10,14(r5)
   2d438:	2a400717 	ldw	r9,28(r5)
   2d43c:	2a000917 	ldw	r8,36(r5)
   2d440:	defee204 	addi	sp,sp,-1144
   2d444:	00c10004 	movi	r3,1024
   2d448:	dc011a15 	stw	r16,1128(sp)
   2d44c:	10bfff4c 	andi	r2,r2,65533
   2d450:	2821883a 	mov	r16,r5
   2d454:	d8cb883a 	add	r5,sp,r3
   2d458:	dc811c15 	stw	r18,1136(sp)
   2d45c:	dc411b15 	stw	r17,1132(sp)
   2d460:	dfc11d15 	stw	ra,1140(sp)
   2d464:	2025883a 	mov	r18,r4
   2d468:	d881030d 	sth	r2,1036(sp)
   2d46c:	dac11915 	stw	r11,1124(sp)
   2d470:	da81038d 	sth	r10,1038(sp)
   2d474:	da410715 	stw	r9,1052(sp)
   2d478:	da010915 	stw	r8,1060(sp)
   2d47c:	dec10015 	stw	sp,1024(sp)
   2d480:	dec10415 	stw	sp,1040(sp)
   2d484:	d8c10215 	stw	r3,1032(sp)
   2d488:	d8c10515 	stw	r3,1044(sp)
   2d48c:	d8010615 	stw	zero,1048(sp)
   2d490:	002bfb40 	call	2bfb4 <___vfiprintf_internal_r>
   2d494:	1023883a 	mov	r17,r2
   2d498:	10000416 	blt	r2,zero,2d4ac <__sbprintf+0x80>
   2d49c:	d9410004 	addi	r5,sp,1024
   2d4a0:	9009883a 	mov	r4,r18
   2d4a4:	0027f1c0 	call	27f1c <_fflush_r>
   2d4a8:	10000d1e 	bne	r2,zero,2d4e0 <__sbprintf+0xb4>
   2d4ac:	d881030b 	ldhu	r2,1036(sp)
   2d4b0:	1080100c 	andi	r2,r2,64
   2d4b4:	10000326 	beq	r2,zero,2d4c4 <__sbprintf+0x98>
   2d4b8:	8080030b 	ldhu	r2,12(r16)
   2d4bc:	10801014 	ori	r2,r2,64
   2d4c0:	8080030d 	sth	r2,12(r16)
   2d4c4:	8805883a 	mov	r2,r17
   2d4c8:	dfc11d17 	ldw	ra,1140(sp)
   2d4cc:	dc811c17 	ldw	r18,1136(sp)
   2d4d0:	dc411b17 	ldw	r17,1132(sp)
   2d4d4:	dc011a17 	ldw	r16,1128(sp)
   2d4d8:	dec11e04 	addi	sp,sp,1144
   2d4dc:	f800283a 	ret
   2d4e0:	047fffc4 	movi	r17,-1
   2d4e4:	003ff106 	br	2d4ac <__alt_data_end+0xf802d4ac>

0002d4e8 <_calloc_r>:
   2d4e8:	298b383a 	mul	r5,r5,r6
   2d4ec:	defffe04 	addi	sp,sp,-8
   2d4f0:	dfc00115 	stw	ra,4(sp)
   2d4f4:	dc000015 	stw	r16,0(sp)
   2d4f8:	0020e540 	call	20e54 <_malloc_r>
   2d4fc:	10002926 	beq	r2,zero,2d5a4 <_calloc_r+0xbc>
   2d500:	11bfff17 	ldw	r6,-4(r2)
   2d504:	1021883a 	mov	r16,r2
   2d508:	00bfff04 	movi	r2,-4
   2d50c:	308c703a 	and	r6,r6,r2
   2d510:	00c00904 	movi	r3,36
   2d514:	308d883a 	add	r6,r6,r2
   2d518:	19801636 	bltu	r3,r6,2d574 <_calloc_r+0x8c>
   2d51c:	008004c4 	movi	r2,19
   2d520:	11800b2e 	bgeu	r2,r6,2d550 <_calloc_r+0x68>
   2d524:	80000015 	stw	zero,0(r16)
   2d528:	80000115 	stw	zero,4(r16)
   2d52c:	008006c4 	movi	r2,27
   2d530:	11801a2e 	bgeu	r2,r6,2d59c <_calloc_r+0xb4>
   2d534:	80000215 	stw	zero,8(r16)
   2d538:	80000315 	stw	zero,12(r16)
   2d53c:	30c0151e 	bne	r6,r3,2d594 <_calloc_r+0xac>
   2d540:	80000415 	stw	zero,16(r16)
   2d544:	80800604 	addi	r2,r16,24
   2d548:	80000515 	stw	zero,20(r16)
   2d54c:	00000106 	br	2d554 <_calloc_r+0x6c>
   2d550:	8005883a 	mov	r2,r16
   2d554:	10000015 	stw	zero,0(r2)
   2d558:	10000115 	stw	zero,4(r2)
   2d55c:	10000215 	stw	zero,8(r2)
   2d560:	8005883a 	mov	r2,r16
   2d564:	dfc00117 	ldw	ra,4(sp)
   2d568:	dc000017 	ldw	r16,0(sp)
   2d56c:	dec00204 	addi	sp,sp,8
   2d570:	f800283a 	ret
   2d574:	000b883a 	mov	r5,zero
   2d578:	8009883a 	mov	r4,r16
   2d57c:	00216600 	call	21660 <memset>
   2d580:	8005883a 	mov	r2,r16
   2d584:	dfc00117 	ldw	ra,4(sp)
   2d588:	dc000017 	ldw	r16,0(sp)
   2d58c:	dec00204 	addi	sp,sp,8
   2d590:	f800283a 	ret
   2d594:	80800404 	addi	r2,r16,16
   2d598:	003fee06 	br	2d554 <__alt_data_end+0xf802d554>
   2d59c:	80800204 	addi	r2,r16,8
   2d5a0:	003fec06 	br	2d554 <__alt_data_end+0xf802d554>
   2d5a4:	0005883a 	mov	r2,zero
   2d5a8:	003fee06 	br	2d564 <__alt_data_end+0xf802d564>

0002d5ac <_fclose_r>:
   2d5ac:	28003926 	beq	r5,zero,2d694 <_fclose_r+0xe8>
   2d5b0:	defffc04 	addi	sp,sp,-16
   2d5b4:	dc400115 	stw	r17,4(sp)
   2d5b8:	dc000015 	stw	r16,0(sp)
   2d5bc:	dfc00315 	stw	ra,12(sp)
   2d5c0:	dc800215 	stw	r18,8(sp)
   2d5c4:	2023883a 	mov	r17,r4
   2d5c8:	2821883a 	mov	r16,r5
   2d5cc:	20000226 	beq	r4,zero,2d5d8 <_fclose_r+0x2c>
   2d5d0:	20800e17 	ldw	r2,56(r4)
   2d5d4:	10002726 	beq	r2,zero,2d674 <_fclose_r+0xc8>
   2d5d8:	8080030f 	ldh	r2,12(r16)
   2d5dc:	1000071e 	bne	r2,zero,2d5fc <_fclose_r+0x50>
   2d5e0:	0005883a 	mov	r2,zero
   2d5e4:	dfc00317 	ldw	ra,12(sp)
   2d5e8:	dc800217 	ldw	r18,8(sp)
   2d5ec:	dc400117 	ldw	r17,4(sp)
   2d5f0:	dc000017 	ldw	r16,0(sp)
   2d5f4:	dec00404 	addi	sp,sp,16
   2d5f8:	f800283a 	ret
   2d5fc:	800b883a 	mov	r5,r16
   2d600:	8809883a 	mov	r4,r17
   2d604:	0027d000 	call	27d00 <__sflush_r>
   2d608:	1025883a 	mov	r18,r2
   2d60c:	80800b17 	ldw	r2,44(r16)
   2d610:	10000426 	beq	r2,zero,2d624 <_fclose_r+0x78>
   2d614:	81400717 	ldw	r5,28(r16)
   2d618:	8809883a 	mov	r4,r17
   2d61c:	103ee83a 	callr	r2
   2d620:	10001616 	blt	r2,zero,2d67c <_fclose_r+0xd0>
   2d624:	8080030b 	ldhu	r2,12(r16)
   2d628:	1080200c 	andi	r2,r2,128
   2d62c:	1000151e 	bne	r2,zero,2d684 <_fclose_r+0xd8>
   2d630:	81400c17 	ldw	r5,48(r16)
   2d634:	28000526 	beq	r5,zero,2d64c <_fclose_r+0xa0>
   2d638:	80801004 	addi	r2,r16,64
   2d63c:	28800226 	beq	r5,r2,2d648 <_fclose_r+0x9c>
   2d640:	8809883a 	mov	r4,r17
   2d644:	00285180 	call	28518 <_free_r>
   2d648:	80000c15 	stw	zero,48(r16)
   2d64c:	81401117 	ldw	r5,68(r16)
   2d650:	28000326 	beq	r5,zero,2d660 <_fclose_r+0xb4>
   2d654:	8809883a 	mov	r4,r17
   2d658:	00285180 	call	28518 <_free_r>
   2d65c:	80001115 	stw	zero,68(r16)
   2d660:	00283080 	call	28308 <__sfp_lock_acquire>
   2d664:	8000030d 	sth	zero,12(r16)
   2d668:	002830c0 	call	2830c <__sfp_lock_release>
   2d66c:	9005883a 	mov	r2,r18
   2d670:	003fdc06 	br	2d5e4 <__alt_data_end+0xf802d5e4>
   2d674:	00282f80 	call	282f8 <__sinit>
   2d678:	003fd706 	br	2d5d8 <__alt_data_end+0xf802d5d8>
   2d67c:	04bfffc4 	movi	r18,-1
   2d680:	003fe806 	br	2d624 <__alt_data_end+0xf802d624>
   2d684:	81400417 	ldw	r5,16(r16)
   2d688:	8809883a 	mov	r4,r17
   2d68c:	00285180 	call	28518 <_free_r>
   2d690:	003fe706 	br	2d630 <__alt_data_end+0xf802d630>
   2d694:	0005883a 	mov	r2,zero
   2d698:	f800283a 	ret

0002d69c <fclose>:
   2d69c:	00810034 	movhi	r2,1024
   2d6a0:	1087e904 	addi	r2,r2,8100
   2d6a4:	200b883a 	mov	r5,r4
   2d6a8:	11000017 	ldw	r4,0(r2)
   2d6ac:	002d5ac1 	jmpi	2d5ac <_fclose_r>

0002d6b0 <__fputwc>:
   2d6b0:	defff804 	addi	sp,sp,-32
   2d6b4:	dcc00415 	stw	r19,16(sp)
   2d6b8:	dc800315 	stw	r18,12(sp)
   2d6bc:	dc000115 	stw	r16,4(sp)
   2d6c0:	dfc00715 	stw	ra,28(sp)
   2d6c4:	dd400615 	stw	r21,24(sp)
   2d6c8:	dd000515 	stw	r20,20(sp)
   2d6cc:	dc400215 	stw	r17,8(sp)
   2d6d0:	2027883a 	mov	r19,r4
   2d6d4:	2825883a 	mov	r18,r5
   2d6d8:	3021883a 	mov	r16,r6
   2d6dc:	0028f480 	call	28f48 <__locale_mb_cur_max>
   2d6e0:	00c00044 	movi	r3,1
   2d6e4:	10c03e26 	beq	r2,r3,2d7e0 <__fputwc+0x130>
   2d6e8:	81c01704 	addi	r7,r16,92
   2d6ec:	900d883a 	mov	r6,r18
   2d6f0:	d80b883a 	mov	r5,sp
   2d6f4:	9809883a 	mov	r4,r19
   2d6f8:	002da100 	call	2da10 <_wcrtomb_r>
   2d6fc:	1029883a 	mov	r20,r2
   2d700:	00bfffc4 	movi	r2,-1
   2d704:	a0802026 	beq	r20,r2,2d788 <__fputwc+0xd8>
   2d708:	d9400003 	ldbu	r5,0(sp)
   2d70c:	a0001c26 	beq	r20,zero,2d780 <__fputwc+0xd0>
   2d710:	0023883a 	mov	r17,zero
   2d714:	05400284 	movi	r21,10
   2d718:	00000906 	br	2d740 <__fputwc+0x90>
   2d71c:	80800017 	ldw	r2,0(r16)
   2d720:	11400005 	stb	r5,0(r2)
   2d724:	80c00017 	ldw	r3,0(r16)
   2d728:	18c00044 	addi	r3,r3,1
   2d72c:	80c00015 	stw	r3,0(r16)
   2d730:	8c400044 	addi	r17,r17,1
   2d734:	dc45883a 	add	r2,sp,r17
   2d738:	8d00112e 	bgeu	r17,r20,2d780 <__fputwc+0xd0>
   2d73c:	11400003 	ldbu	r5,0(r2)
   2d740:	80c00217 	ldw	r3,8(r16)
   2d744:	18ffffc4 	addi	r3,r3,-1
   2d748:	80c00215 	stw	r3,8(r16)
   2d74c:	183ff30e 	bge	r3,zero,2d71c <__alt_data_end+0xf802d71c>
   2d750:	80800617 	ldw	r2,24(r16)
   2d754:	18801916 	blt	r3,r2,2d7bc <__fputwc+0x10c>
   2d758:	80800017 	ldw	r2,0(r16)
   2d75c:	11400005 	stb	r5,0(r2)
   2d760:	80800017 	ldw	r2,0(r16)
   2d764:	10c00003 	ldbu	r3,0(r2)
   2d768:	10800044 	addi	r2,r2,1
   2d76c:	1d402326 	beq	r3,r21,2d7fc <__fputwc+0x14c>
   2d770:	80800015 	stw	r2,0(r16)
   2d774:	8c400044 	addi	r17,r17,1
   2d778:	dc45883a 	add	r2,sp,r17
   2d77c:	8d3fef36 	bltu	r17,r20,2d73c <__alt_data_end+0xf802d73c>
   2d780:	9005883a 	mov	r2,r18
   2d784:	00000406 	br	2d798 <__fputwc+0xe8>
   2d788:	80c0030b 	ldhu	r3,12(r16)
   2d78c:	a005883a 	mov	r2,r20
   2d790:	18c01014 	ori	r3,r3,64
   2d794:	80c0030d 	sth	r3,12(r16)
   2d798:	dfc00717 	ldw	ra,28(sp)
   2d79c:	dd400617 	ldw	r21,24(sp)
   2d7a0:	dd000517 	ldw	r20,20(sp)
   2d7a4:	dcc00417 	ldw	r19,16(sp)
   2d7a8:	dc800317 	ldw	r18,12(sp)
   2d7ac:	dc400217 	ldw	r17,8(sp)
   2d7b0:	dc000117 	ldw	r16,4(sp)
   2d7b4:	dec00804 	addi	sp,sp,32
   2d7b8:	f800283a 	ret
   2d7bc:	800d883a 	mov	r6,r16
   2d7c0:	29403fcc 	andi	r5,r5,255
   2d7c4:	9809883a 	mov	r4,r19
   2d7c8:	002d8b80 	call	2d8b8 <__swbuf_r>
   2d7cc:	10bfffe0 	cmpeqi	r2,r2,-1
   2d7d0:	10803fcc 	andi	r2,r2,255
   2d7d4:	103fd626 	beq	r2,zero,2d730 <__alt_data_end+0xf802d730>
   2d7d8:	00bfffc4 	movi	r2,-1
   2d7dc:	003fee06 	br	2d798 <__alt_data_end+0xf802d798>
   2d7e0:	90ffffc4 	addi	r3,r18,-1
   2d7e4:	01003f84 	movi	r4,254
   2d7e8:	20ffbf36 	bltu	r4,r3,2d6e8 <__alt_data_end+0xf802d6e8>
   2d7ec:	900b883a 	mov	r5,r18
   2d7f0:	dc800005 	stb	r18,0(sp)
   2d7f4:	1029883a 	mov	r20,r2
   2d7f8:	003fc506 	br	2d710 <__alt_data_end+0xf802d710>
   2d7fc:	800d883a 	mov	r6,r16
   2d800:	a80b883a 	mov	r5,r21
   2d804:	9809883a 	mov	r4,r19
   2d808:	002d8b80 	call	2d8b8 <__swbuf_r>
   2d80c:	10bfffe0 	cmpeqi	r2,r2,-1
   2d810:	003fef06 	br	2d7d0 <__alt_data_end+0xf802d7d0>

0002d814 <_fputwc_r>:
   2d814:	3080030b 	ldhu	r2,12(r6)
   2d818:	10c8000c 	andi	r3,r2,8192
   2d81c:	1800051e 	bne	r3,zero,2d834 <_fputwc_r+0x20>
   2d820:	30c01917 	ldw	r3,100(r6)
   2d824:	10880014 	ori	r2,r2,8192
   2d828:	3080030d 	sth	r2,12(r6)
   2d82c:	18880014 	ori	r2,r3,8192
   2d830:	30801915 	stw	r2,100(r6)
   2d834:	002d6b01 	jmpi	2d6b0 <__fputwc>

0002d838 <fputwc>:
   2d838:	00810034 	movhi	r2,1024
   2d83c:	defffc04 	addi	sp,sp,-16
   2d840:	1087e904 	addi	r2,r2,8100
   2d844:	dc000115 	stw	r16,4(sp)
   2d848:	14000017 	ldw	r16,0(r2)
   2d84c:	dc400215 	stw	r17,8(sp)
   2d850:	dfc00315 	stw	ra,12(sp)
   2d854:	2023883a 	mov	r17,r4
   2d858:	80000226 	beq	r16,zero,2d864 <fputwc+0x2c>
   2d85c:	80800e17 	ldw	r2,56(r16)
   2d860:	10001026 	beq	r2,zero,2d8a4 <fputwc+0x6c>
   2d864:	2880030b 	ldhu	r2,12(r5)
   2d868:	10c8000c 	andi	r3,r2,8192
   2d86c:	1800051e 	bne	r3,zero,2d884 <fputwc+0x4c>
   2d870:	28c01917 	ldw	r3,100(r5)
   2d874:	10880014 	ori	r2,r2,8192
   2d878:	2880030d 	sth	r2,12(r5)
   2d87c:	18880014 	ori	r2,r3,8192
   2d880:	28801915 	stw	r2,100(r5)
   2d884:	280d883a 	mov	r6,r5
   2d888:	8009883a 	mov	r4,r16
   2d88c:	880b883a 	mov	r5,r17
   2d890:	dfc00317 	ldw	ra,12(sp)
   2d894:	dc400217 	ldw	r17,8(sp)
   2d898:	dc000117 	ldw	r16,4(sp)
   2d89c:	dec00404 	addi	sp,sp,16
   2d8a0:	002d6b01 	jmpi	2d6b0 <__fputwc>
   2d8a4:	8009883a 	mov	r4,r16
   2d8a8:	d9400015 	stw	r5,0(sp)
   2d8ac:	00282f80 	call	282f8 <__sinit>
   2d8b0:	d9400017 	ldw	r5,0(sp)
   2d8b4:	003feb06 	br	2d864 <__alt_data_end+0xf802d864>

0002d8b8 <__swbuf_r>:
   2d8b8:	defffb04 	addi	sp,sp,-20
   2d8bc:	dcc00315 	stw	r19,12(sp)
   2d8c0:	dc800215 	stw	r18,8(sp)
   2d8c4:	dc000015 	stw	r16,0(sp)
   2d8c8:	dfc00415 	stw	ra,16(sp)
   2d8cc:	dc400115 	stw	r17,4(sp)
   2d8d0:	2025883a 	mov	r18,r4
   2d8d4:	2827883a 	mov	r19,r5
   2d8d8:	3021883a 	mov	r16,r6
   2d8dc:	20000226 	beq	r4,zero,2d8e8 <__swbuf_r+0x30>
   2d8e0:	20800e17 	ldw	r2,56(r4)
   2d8e4:	10004226 	beq	r2,zero,2d9f0 <__swbuf_r+0x138>
   2d8e8:	80800617 	ldw	r2,24(r16)
   2d8ec:	8100030b 	ldhu	r4,12(r16)
   2d8f0:	80800215 	stw	r2,8(r16)
   2d8f4:	2080020c 	andi	r2,r4,8
   2d8f8:	10003626 	beq	r2,zero,2d9d4 <__swbuf_r+0x11c>
   2d8fc:	80c00417 	ldw	r3,16(r16)
   2d900:	18003426 	beq	r3,zero,2d9d4 <__swbuf_r+0x11c>
   2d904:	2088000c 	andi	r2,r4,8192
   2d908:	9c403fcc 	andi	r17,r19,255
   2d90c:	10001a26 	beq	r2,zero,2d978 <__swbuf_r+0xc0>
   2d910:	80800017 	ldw	r2,0(r16)
   2d914:	81000517 	ldw	r4,20(r16)
   2d918:	10c7c83a 	sub	r3,r2,r3
   2d91c:	1900200e 	bge	r3,r4,2d9a0 <__swbuf_r+0xe8>
   2d920:	18c00044 	addi	r3,r3,1
   2d924:	81000217 	ldw	r4,8(r16)
   2d928:	11400044 	addi	r5,r2,1
   2d92c:	81400015 	stw	r5,0(r16)
   2d930:	213fffc4 	addi	r4,r4,-1
   2d934:	81000215 	stw	r4,8(r16)
   2d938:	14c00005 	stb	r19,0(r2)
   2d93c:	80800517 	ldw	r2,20(r16)
   2d940:	10c01e26 	beq	r2,r3,2d9bc <__swbuf_r+0x104>
   2d944:	8080030b 	ldhu	r2,12(r16)
   2d948:	1080004c 	andi	r2,r2,1
   2d94c:	10000226 	beq	r2,zero,2d958 <__swbuf_r+0xa0>
   2d950:	00800284 	movi	r2,10
   2d954:	88801926 	beq	r17,r2,2d9bc <__swbuf_r+0x104>
   2d958:	8805883a 	mov	r2,r17
   2d95c:	dfc00417 	ldw	ra,16(sp)
   2d960:	dcc00317 	ldw	r19,12(sp)
   2d964:	dc800217 	ldw	r18,8(sp)
   2d968:	dc400117 	ldw	r17,4(sp)
   2d96c:	dc000017 	ldw	r16,0(sp)
   2d970:	dec00504 	addi	sp,sp,20
   2d974:	f800283a 	ret
   2d978:	81401917 	ldw	r5,100(r16)
   2d97c:	00b7ffc4 	movi	r2,-8193
   2d980:	21080014 	ori	r4,r4,8192
   2d984:	2884703a 	and	r2,r5,r2
   2d988:	80801915 	stw	r2,100(r16)
   2d98c:	80800017 	ldw	r2,0(r16)
   2d990:	8100030d 	sth	r4,12(r16)
   2d994:	81000517 	ldw	r4,20(r16)
   2d998:	10c7c83a 	sub	r3,r2,r3
   2d99c:	193fe016 	blt	r3,r4,2d920 <__alt_data_end+0xf802d920>
   2d9a0:	800b883a 	mov	r5,r16
   2d9a4:	9009883a 	mov	r4,r18
   2d9a8:	0027f1c0 	call	27f1c <_fflush_r>
   2d9ac:	1000071e 	bne	r2,zero,2d9cc <__swbuf_r+0x114>
   2d9b0:	80800017 	ldw	r2,0(r16)
   2d9b4:	00c00044 	movi	r3,1
   2d9b8:	003fda06 	br	2d924 <__alt_data_end+0xf802d924>
   2d9bc:	800b883a 	mov	r5,r16
   2d9c0:	9009883a 	mov	r4,r18
   2d9c4:	0027f1c0 	call	27f1c <_fflush_r>
   2d9c8:	103fe326 	beq	r2,zero,2d958 <__alt_data_end+0xf802d958>
   2d9cc:	00bfffc4 	movi	r2,-1
   2d9d0:	003fe206 	br	2d95c <__alt_data_end+0xf802d95c>
   2d9d4:	800b883a 	mov	r5,r16
   2d9d8:	9009883a 	mov	r4,r18
   2d9dc:	00262d00 	call	262d0 <__swsetup_r>
   2d9e0:	103ffa1e 	bne	r2,zero,2d9cc <__alt_data_end+0xf802d9cc>
   2d9e4:	8100030b 	ldhu	r4,12(r16)
   2d9e8:	80c00417 	ldw	r3,16(r16)
   2d9ec:	003fc506 	br	2d904 <__alt_data_end+0xf802d904>
   2d9f0:	00282f80 	call	282f8 <__sinit>
   2d9f4:	003fbc06 	br	2d8e8 <__alt_data_end+0xf802d8e8>

0002d9f8 <__swbuf>:
   2d9f8:	00810034 	movhi	r2,1024
   2d9fc:	1087e904 	addi	r2,r2,8100
   2da00:	280d883a 	mov	r6,r5
   2da04:	200b883a 	mov	r5,r4
   2da08:	11000017 	ldw	r4,0(r2)
   2da0c:	002d8b81 	jmpi	2d8b8 <__swbuf_r>

0002da10 <_wcrtomb_r>:
   2da10:	defff604 	addi	sp,sp,-40
   2da14:	00810034 	movhi	r2,1024
   2da18:	dc800815 	stw	r18,32(sp)
   2da1c:	dc400715 	stw	r17,28(sp)
   2da20:	dc000615 	stw	r16,24(sp)
   2da24:	1087ed04 	addi	r2,r2,8116
   2da28:	dfc00915 	stw	ra,36(sp)
   2da2c:	2021883a 	mov	r16,r4
   2da30:	3823883a 	mov	r17,r7
   2da34:	14800017 	ldw	r18,0(r2)
   2da38:	28001426 	beq	r5,zero,2da8c <_wcrtomb_r+0x7c>
   2da3c:	d9400415 	stw	r5,16(sp)
   2da40:	d9800515 	stw	r6,20(sp)
   2da44:	0028f3c0 	call	28f3c <__locale_charset>
   2da48:	d9800517 	ldw	r6,20(sp)
   2da4c:	d9400417 	ldw	r5,16(sp)
   2da50:	100f883a 	mov	r7,r2
   2da54:	dc400015 	stw	r17,0(sp)
   2da58:	8009883a 	mov	r4,r16
   2da5c:	903ee83a 	callr	r18
   2da60:	00ffffc4 	movi	r3,-1
   2da64:	10c0031e 	bne	r2,r3,2da74 <_wcrtomb_r+0x64>
   2da68:	88000015 	stw	zero,0(r17)
   2da6c:	00c02284 	movi	r3,138
   2da70:	80c00015 	stw	r3,0(r16)
   2da74:	dfc00917 	ldw	ra,36(sp)
   2da78:	dc800817 	ldw	r18,32(sp)
   2da7c:	dc400717 	ldw	r17,28(sp)
   2da80:	dc000617 	ldw	r16,24(sp)
   2da84:	dec00a04 	addi	sp,sp,40
   2da88:	f800283a 	ret
   2da8c:	0028f3c0 	call	28f3c <__locale_charset>
   2da90:	100f883a 	mov	r7,r2
   2da94:	dc400015 	stw	r17,0(sp)
   2da98:	000d883a 	mov	r6,zero
   2da9c:	d9400104 	addi	r5,sp,4
   2daa0:	8009883a 	mov	r4,r16
   2daa4:	903ee83a 	callr	r18
   2daa8:	003fed06 	br	2da60 <__alt_data_end+0xf802da60>

0002daac <wcrtomb>:
   2daac:	defff604 	addi	sp,sp,-40
   2dab0:	00810034 	movhi	r2,1024
   2dab4:	dc800615 	stw	r18,24(sp)
   2dab8:	dc400515 	stw	r17,20(sp)
   2dabc:	1087e904 	addi	r2,r2,8100
   2dac0:	dfc00915 	stw	ra,36(sp)
   2dac4:	dd000815 	stw	r20,32(sp)
   2dac8:	dcc00715 	stw	r19,28(sp)
   2dacc:	dc000415 	stw	r16,16(sp)
   2dad0:	3025883a 	mov	r18,r6
   2dad4:	14400017 	ldw	r17,0(r2)
   2dad8:	20001926 	beq	r4,zero,2db40 <wcrtomb+0x94>
   2dadc:	00810034 	movhi	r2,1024
   2dae0:	1087ed04 	addi	r2,r2,8116
   2dae4:	15000017 	ldw	r20,0(r2)
   2dae8:	2021883a 	mov	r16,r4
   2daec:	2827883a 	mov	r19,r5
   2daf0:	0028f3c0 	call	28f3c <__locale_charset>
   2daf4:	100f883a 	mov	r7,r2
   2daf8:	dc800015 	stw	r18,0(sp)
   2dafc:	980d883a 	mov	r6,r19
   2db00:	800b883a 	mov	r5,r16
   2db04:	8809883a 	mov	r4,r17
   2db08:	a03ee83a 	callr	r20
   2db0c:	00ffffc4 	movi	r3,-1
   2db10:	10c0031e 	bne	r2,r3,2db20 <wcrtomb+0x74>
   2db14:	90000015 	stw	zero,0(r18)
   2db18:	00c02284 	movi	r3,138
   2db1c:	88c00015 	stw	r3,0(r17)
   2db20:	dfc00917 	ldw	ra,36(sp)
   2db24:	dd000817 	ldw	r20,32(sp)
   2db28:	dcc00717 	ldw	r19,28(sp)
   2db2c:	dc800617 	ldw	r18,24(sp)
   2db30:	dc400517 	ldw	r17,20(sp)
   2db34:	dc000417 	ldw	r16,16(sp)
   2db38:	dec00a04 	addi	sp,sp,40
   2db3c:	f800283a 	ret
   2db40:	00810034 	movhi	r2,1024
   2db44:	1087ed04 	addi	r2,r2,8116
   2db48:	14000017 	ldw	r16,0(r2)
   2db4c:	0028f3c0 	call	28f3c <__locale_charset>
   2db50:	100f883a 	mov	r7,r2
   2db54:	dc800015 	stw	r18,0(sp)
   2db58:	000d883a 	mov	r6,zero
   2db5c:	d9400104 	addi	r5,sp,4
   2db60:	8809883a 	mov	r4,r17
   2db64:	803ee83a 	callr	r16
   2db68:	003fe806 	br	2db0c <__alt_data_end+0xf802db0c>

0002db6c <__ascii_wctomb>:
   2db6c:	28000526 	beq	r5,zero,2db84 <__ascii_wctomb+0x18>
   2db70:	00803fc4 	movi	r2,255
   2db74:	11800536 	bltu	r2,r6,2db8c <__ascii_wctomb+0x20>
   2db78:	29800005 	stb	r6,0(r5)
   2db7c:	00800044 	movi	r2,1
   2db80:	f800283a 	ret
   2db84:	0005883a 	mov	r2,zero
   2db88:	f800283a 	ret
   2db8c:	00802284 	movi	r2,138
   2db90:	20800015 	stw	r2,0(r4)
   2db94:	00bfffc4 	movi	r2,-1
   2db98:	f800283a 	ret

0002db9c <_wctomb_r>:
   2db9c:	00810034 	movhi	r2,1024
   2dba0:	defff904 	addi	sp,sp,-28
   2dba4:	1087ed04 	addi	r2,r2,8116
   2dba8:	dfc00615 	stw	ra,24(sp)
   2dbac:	dc400515 	stw	r17,20(sp)
   2dbb0:	dc000415 	stw	r16,16(sp)
   2dbb4:	3823883a 	mov	r17,r7
   2dbb8:	14000017 	ldw	r16,0(r2)
   2dbbc:	d9000115 	stw	r4,4(sp)
   2dbc0:	d9400215 	stw	r5,8(sp)
   2dbc4:	d9800315 	stw	r6,12(sp)
   2dbc8:	0028f3c0 	call	28f3c <__locale_charset>
   2dbcc:	d9800317 	ldw	r6,12(sp)
   2dbd0:	d9400217 	ldw	r5,8(sp)
   2dbd4:	d9000117 	ldw	r4,4(sp)
   2dbd8:	100f883a 	mov	r7,r2
   2dbdc:	dc400015 	stw	r17,0(sp)
   2dbe0:	803ee83a 	callr	r16
   2dbe4:	dfc00617 	ldw	ra,24(sp)
   2dbe8:	dc400517 	ldw	r17,20(sp)
   2dbec:	dc000417 	ldw	r16,16(sp)
   2dbf0:	dec00704 	addi	sp,sp,28
   2dbf4:	f800283a 	ret

0002dbf8 <__udivdi3>:
   2dbf8:	defff504 	addi	sp,sp,-44
   2dbfc:	dcc00415 	stw	r19,16(sp)
   2dc00:	dc000115 	stw	r16,4(sp)
   2dc04:	dfc00a15 	stw	ra,40(sp)
   2dc08:	df000915 	stw	fp,36(sp)
   2dc0c:	ddc00815 	stw	r23,32(sp)
   2dc10:	dd800715 	stw	r22,28(sp)
   2dc14:	dd400615 	stw	r21,24(sp)
   2dc18:	dd000515 	stw	r20,20(sp)
   2dc1c:	dc800315 	stw	r18,12(sp)
   2dc20:	dc400215 	stw	r17,8(sp)
   2dc24:	2027883a 	mov	r19,r4
   2dc28:	2821883a 	mov	r16,r5
   2dc2c:	3800411e 	bne	r7,zero,2dd34 <__udivdi3+0x13c>
   2dc30:	3023883a 	mov	r17,r6
   2dc34:	2025883a 	mov	r18,r4
   2dc38:	2980522e 	bgeu	r5,r6,2dd84 <__udivdi3+0x18c>
   2dc3c:	00bfffd4 	movui	r2,65535
   2dc40:	282d883a 	mov	r22,r5
   2dc44:	1180a836 	bltu	r2,r6,2dee8 <__udivdi3+0x2f0>
   2dc48:	00803fc4 	movi	r2,255
   2dc4c:	1185803a 	cmpltu	r2,r2,r6
   2dc50:	100490fa 	slli	r2,r2,3
   2dc54:	3086d83a 	srl	r3,r6,r2
   2dc58:	01010034 	movhi	r4,1024
   2dc5c:	2100a504 	addi	r4,r4,660
   2dc60:	20c7883a 	add	r3,r4,r3
   2dc64:	18c00003 	ldbu	r3,0(r3)
   2dc68:	1885883a 	add	r2,r3,r2
   2dc6c:	00c00804 	movi	r3,32
   2dc70:	1887c83a 	sub	r3,r3,r2
   2dc74:	18000526 	beq	r3,zero,2dc8c <__udivdi3+0x94>
   2dc78:	80e0983a 	sll	r16,r16,r3
   2dc7c:	9884d83a 	srl	r2,r19,r2
   2dc80:	30e2983a 	sll	r17,r6,r3
   2dc84:	98e4983a 	sll	r18,r19,r3
   2dc88:	142cb03a 	or	r22,r2,r16
   2dc8c:	882ad43a 	srli	r21,r17,16
   2dc90:	b009883a 	mov	r4,r22
   2dc94:	8d3fffcc 	andi	r20,r17,65535
   2dc98:	a80b883a 	mov	r5,r21
   2dc9c:	002e8040 	call	2e804 <__umodsi3>
   2dca0:	b009883a 	mov	r4,r22
   2dca4:	a80b883a 	mov	r5,r21
   2dca8:	1027883a 	mov	r19,r2
   2dcac:	002e7a00 	call	2e7a0 <__udivsi3>
   2dcb0:	102d883a 	mov	r22,r2
   2dcb4:	9826943a 	slli	r19,r19,16
   2dcb8:	9004d43a 	srli	r2,r18,16
   2dcbc:	a5a1383a 	mul	r16,r20,r22
   2dcc0:	14c4b03a 	or	r2,r2,r19
   2dcc4:	1400052e 	bgeu	r2,r16,2dcdc <__udivdi3+0xe4>
   2dcc8:	1445883a 	add	r2,r2,r17
   2dccc:	b0ffffc4 	addi	r3,r22,-1
   2dcd0:	14400136 	bltu	r2,r17,2dcd8 <__udivdi3+0xe0>
   2dcd4:	14012336 	bltu	r2,r16,2e164 <__udivdi3+0x56c>
   2dcd8:	182d883a 	mov	r22,r3
   2dcdc:	1421c83a 	sub	r16,r2,r16
   2dce0:	a80b883a 	mov	r5,r21
   2dce4:	8009883a 	mov	r4,r16
   2dce8:	002e8040 	call	2e804 <__umodsi3>
   2dcec:	1027883a 	mov	r19,r2
   2dcf0:	a80b883a 	mov	r5,r21
   2dcf4:	8009883a 	mov	r4,r16
   2dcf8:	002e7a00 	call	2e7a0 <__udivsi3>
   2dcfc:	9826943a 	slli	r19,r19,16
   2dd00:	a0a9383a 	mul	r20,r20,r2
   2dd04:	94bfffcc 	andi	r18,r18,65535
   2dd08:	94e4b03a 	or	r18,r18,r19
   2dd0c:	9500052e 	bgeu	r18,r20,2dd24 <__udivdi3+0x12c>
   2dd10:	8ca5883a 	add	r18,r17,r18
   2dd14:	10ffffc4 	addi	r3,r2,-1
   2dd18:	9440f136 	bltu	r18,r17,2e0e0 <__udivdi3+0x4e8>
   2dd1c:	9500f02e 	bgeu	r18,r20,2e0e0 <__udivdi3+0x4e8>
   2dd20:	10bfff84 	addi	r2,r2,-2
   2dd24:	b00c943a 	slli	r6,r22,16
   2dd28:	0007883a 	mov	r3,zero
   2dd2c:	3084b03a 	or	r2,r6,r2
   2dd30:	00005906 	br	2de98 <__udivdi3+0x2a0>
   2dd34:	29c05636 	bltu	r5,r7,2de90 <__udivdi3+0x298>
   2dd38:	00bfffd4 	movui	r2,65535
   2dd3c:	11c0622e 	bgeu	r2,r7,2dec8 <__udivdi3+0x2d0>
   2dd40:	00804034 	movhi	r2,256
   2dd44:	10bfffc4 	addi	r2,r2,-1
   2dd48:	11c0ee36 	bltu	r2,r7,2e104 <__udivdi3+0x50c>
   2dd4c:	00800404 	movi	r2,16
   2dd50:	3886d83a 	srl	r3,r7,r2
   2dd54:	01010034 	movhi	r4,1024
   2dd58:	2100a504 	addi	r4,r4,660
   2dd5c:	20c7883a 	add	r3,r4,r3
   2dd60:	18c00003 	ldbu	r3,0(r3)
   2dd64:	05400804 	movi	r21,32
   2dd68:	1885883a 	add	r2,r3,r2
   2dd6c:	a8abc83a 	sub	r21,r21,r2
   2dd70:	a800621e 	bne	r21,zero,2defc <__udivdi3+0x304>
   2dd74:	3c00e936 	bltu	r7,r16,2e11c <__udivdi3+0x524>
   2dd78:	9985403a 	cmpgeu	r2,r19,r6
   2dd7c:	0007883a 	mov	r3,zero
   2dd80:	00004506 	br	2de98 <__udivdi3+0x2a0>
   2dd84:	3000041e 	bne	r6,zero,2dd98 <__udivdi3+0x1a0>
   2dd88:	000b883a 	mov	r5,zero
   2dd8c:	01000044 	movi	r4,1
   2dd90:	002e7a00 	call	2e7a0 <__udivsi3>
   2dd94:	1023883a 	mov	r17,r2
   2dd98:	00bfffd4 	movui	r2,65535
   2dd9c:	14404e2e 	bgeu	r2,r17,2ded8 <__udivdi3+0x2e0>
   2dda0:	00804034 	movhi	r2,256
   2dda4:	10bfffc4 	addi	r2,r2,-1
   2dda8:	1440d836 	bltu	r2,r17,2e10c <__udivdi3+0x514>
   2ddac:	00800404 	movi	r2,16
   2ddb0:	8886d83a 	srl	r3,r17,r2
   2ddb4:	01010034 	movhi	r4,1024
   2ddb8:	2100a504 	addi	r4,r4,660
   2ddbc:	20c7883a 	add	r3,r4,r3
   2ddc0:	18c00003 	ldbu	r3,0(r3)
   2ddc4:	1885883a 	add	r2,r3,r2
   2ddc8:	00c00804 	movi	r3,32
   2ddcc:	1887c83a 	sub	r3,r3,r2
   2ddd0:	18008f1e 	bne	r3,zero,2e010 <__udivdi3+0x418>
   2ddd4:	882ad43a 	srli	r21,r17,16
   2ddd8:	8461c83a 	sub	r16,r16,r17
   2dddc:	8d3fffcc 	andi	r20,r17,65535
   2dde0:	00c00044 	movi	r3,1
   2dde4:	8009883a 	mov	r4,r16
   2dde8:	a80b883a 	mov	r5,r21
   2ddec:	d8c00015 	stw	r3,0(sp)
   2ddf0:	002e8040 	call	2e804 <__umodsi3>
   2ddf4:	8009883a 	mov	r4,r16
   2ddf8:	a80b883a 	mov	r5,r21
   2ddfc:	1027883a 	mov	r19,r2
   2de00:	002e7a00 	call	2e7a0 <__udivsi3>
   2de04:	9826943a 	slli	r19,r19,16
   2de08:	9008d43a 	srli	r4,r18,16
   2de0c:	1521383a 	mul	r16,r2,r20
   2de10:	102d883a 	mov	r22,r2
   2de14:	24c8b03a 	or	r4,r4,r19
   2de18:	d8c00017 	ldw	r3,0(sp)
   2de1c:	2400052e 	bgeu	r4,r16,2de34 <__udivdi3+0x23c>
   2de20:	2449883a 	add	r4,r4,r17
   2de24:	b0bfffc4 	addi	r2,r22,-1
   2de28:	24400136 	bltu	r4,r17,2de30 <__udivdi3+0x238>
   2de2c:	2400ca36 	bltu	r4,r16,2e158 <__udivdi3+0x560>
   2de30:	102d883a 	mov	r22,r2
   2de34:	2421c83a 	sub	r16,r4,r16
   2de38:	a80b883a 	mov	r5,r21
   2de3c:	8009883a 	mov	r4,r16
   2de40:	d8c00015 	stw	r3,0(sp)
   2de44:	002e8040 	call	2e804 <__umodsi3>
   2de48:	1027883a 	mov	r19,r2
   2de4c:	a80b883a 	mov	r5,r21
   2de50:	8009883a 	mov	r4,r16
   2de54:	002e7a00 	call	2e7a0 <__udivsi3>
   2de58:	9826943a 	slli	r19,r19,16
   2de5c:	1529383a 	mul	r20,r2,r20
   2de60:	94bfffcc 	andi	r18,r18,65535
   2de64:	94e4b03a 	or	r18,r18,r19
   2de68:	d8c00017 	ldw	r3,0(sp)
   2de6c:	9500052e 	bgeu	r18,r20,2de84 <__udivdi3+0x28c>
   2de70:	8ca5883a 	add	r18,r17,r18
   2de74:	113fffc4 	addi	r4,r2,-1
   2de78:	94409736 	bltu	r18,r17,2e0d8 <__udivdi3+0x4e0>
   2de7c:	9500962e 	bgeu	r18,r20,2e0d8 <__udivdi3+0x4e0>
   2de80:	10bfff84 	addi	r2,r2,-2
   2de84:	b00c943a 	slli	r6,r22,16
   2de88:	3084b03a 	or	r2,r6,r2
   2de8c:	00000206 	br	2de98 <__udivdi3+0x2a0>
   2de90:	0007883a 	mov	r3,zero
   2de94:	0005883a 	mov	r2,zero
   2de98:	dfc00a17 	ldw	ra,40(sp)
   2de9c:	df000917 	ldw	fp,36(sp)
   2dea0:	ddc00817 	ldw	r23,32(sp)
   2dea4:	dd800717 	ldw	r22,28(sp)
   2dea8:	dd400617 	ldw	r21,24(sp)
   2deac:	dd000517 	ldw	r20,20(sp)
   2deb0:	dcc00417 	ldw	r19,16(sp)
   2deb4:	dc800317 	ldw	r18,12(sp)
   2deb8:	dc400217 	ldw	r17,8(sp)
   2debc:	dc000117 	ldw	r16,4(sp)
   2dec0:	dec00b04 	addi	sp,sp,44
   2dec4:	f800283a 	ret
   2dec8:	00803fc4 	movi	r2,255
   2decc:	11c5803a 	cmpltu	r2,r2,r7
   2ded0:	100490fa 	slli	r2,r2,3
   2ded4:	003f9e06 	br	2dd50 <__alt_data_end+0xf802dd50>
   2ded8:	00803fc4 	movi	r2,255
   2dedc:	1445803a 	cmpltu	r2,r2,r17
   2dee0:	100490fa 	slli	r2,r2,3
   2dee4:	003fb206 	br	2ddb0 <__alt_data_end+0xf802ddb0>
   2dee8:	00804034 	movhi	r2,256
   2deec:	10bfffc4 	addi	r2,r2,-1
   2def0:	11808836 	bltu	r2,r6,2e114 <__udivdi3+0x51c>
   2def4:	00800404 	movi	r2,16
   2def8:	003f5606 	br	2dc54 <__alt_data_end+0xf802dc54>
   2defc:	30aed83a 	srl	r23,r6,r2
   2df00:	3d4e983a 	sll	r7,r7,r21
   2df04:	80acd83a 	srl	r22,r16,r2
   2df08:	9884d83a 	srl	r2,r19,r2
   2df0c:	3deeb03a 	or	r23,r7,r23
   2df10:	b824d43a 	srli	r18,r23,16
   2df14:	8560983a 	sll	r16,r16,r21
   2df18:	b009883a 	mov	r4,r22
   2df1c:	900b883a 	mov	r5,r18
   2df20:	3568983a 	sll	r20,r6,r21
   2df24:	1420b03a 	or	r16,r2,r16
   2df28:	002e8040 	call	2e804 <__umodsi3>
   2df2c:	b009883a 	mov	r4,r22
   2df30:	900b883a 	mov	r5,r18
   2df34:	1023883a 	mov	r17,r2
   2df38:	002e7a00 	call	2e7a0 <__udivsi3>
   2df3c:	8808943a 	slli	r4,r17,16
   2df40:	bf3fffcc 	andi	fp,r23,65535
   2df44:	8006d43a 	srli	r3,r16,16
   2df48:	e0a3383a 	mul	r17,fp,r2
   2df4c:	100d883a 	mov	r6,r2
   2df50:	1906b03a 	or	r3,r3,r4
   2df54:	1c40042e 	bgeu	r3,r17,2df68 <__udivdi3+0x370>
   2df58:	1dc7883a 	add	r3,r3,r23
   2df5c:	10bfffc4 	addi	r2,r2,-1
   2df60:	1dc0752e 	bgeu	r3,r23,2e138 <__udivdi3+0x540>
   2df64:	100d883a 	mov	r6,r2
   2df68:	1c63c83a 	sub	r17,r3,r17
   2df6c:	900b883a 	mov	r5,r18
   2df70:	8809883a 	mov	r4,r17
   2df74:	d9800015 	stw	r6,0(sp)
   2df78:	002e8040 	call	2e804 <__umodsi3>
   2df7c:	102d883a 	mov	r22,r2
   2df80:	8809883a 	mov	r4,r17
   2df84:	900b883a 	mov	r5,r18
   2df88:	002e7a00 	call	2e7a0 <__udivsi3>
   2df8c:	b02c943a 	slli	r22,r22,16
   2df90:	e089383a 	mul	r4,fp,r2
   2df94:	843fffcc 	andi	r16,r16,65535
   2df98:	85a0b03a 	or	r16,r16,r22
   2df9c:	d9800017 	ldw	r6,0(sp)
   2dfa0:	8100042e 	bgeu	r16,r4,2dfb4 <__udivdi3+0x3bc>
   2dfa4:	85e1883a 	add	r16,r16,r23
   2dfa8:	10ffffc4 	addi	r3,r2,-1
   2dfac:	85c05e2e 	bgeu	r16,r23,2e128 <__udivdi3+0x530>
   2dfb0:	1805883a 	mov	r2,r3
   2dfb4:	300c943a 	slli	r6,r6,16
   2dfb8:	a17fffcc 	andi	r5,r20,65535
   2dfbc:	a028d43a 	srli	r20,r20,16
   2dfc0:	3084b03a 	or	r2,r6,r2
   2dfc4:	10ffffcc 	andi	r3,r2,65535
   2dfc8:	100cd43a 	srli	r6,r2,16
   2dfcc:	194f383a 	mul	r7,r3,r5
   2dfd0:	1d07383a 	mul	r3,r3,r20
   2dfd4:	314b383a 	mul	r5,r6,r5
   2dfd8:	3810d43a 	srli	r8,r7,16
   2dfdc:	8121c83a 	sub	r16,r16,r4
   2dfe0:	1947883a 	add	r3,r3,r5
   2dfe4:	40c7883a 	add	r3,r8,r3
   2dfe8:	350d383a 	mul	r6,r6,r20
   2dfec:	1940022e 	bgeu	r3,r5,2dff8 <__udivdi3+0x400>
   2dff0:	01000074 	movhi	r4,1
   2dff4:	310d883a 	add	r6,r6,r4
   2dff8:	1828d43a 	srli	r20,r3,16
   2dffc:	a18d883a 	add	r6,r20,r6
   2e000:	81803e36 	bltu	r16,r6,2e0fc <__udivdi3+0x504>
   2e004:	81803826 	beq	r16,r6,2e0e8 <__udivdi3+0x4f0>
   2e008:	0007883a 	mov	r3,zero
   2e00c:	003fa206 	br	2de98 <__alt_data_end+0xf802de98>
   2e010:	88e2983a 	sll	r17,r17,r3
   2e014:	80a8d83a 	srl	r20,r16,r2
   2e018:	80e0983a 	sll	r16,r16,r3
   2e01c:	882ad43a 	srli	r21,r17,16
   2e020:	9884d83a 	srl	r2,r19,r2
   2e024:	a009883a 	mov	r4,r20
   2e028:	a80b883a 	mov	r5,r21
   2e02c:	142eb03a 	or	r23,r2,r16
   2e030:	98e4983a 	sll	r18,r19,r3
   2e034:	002e8040 	call	2e804 <__umodsi3>
   2e038:	a009883a 	mov	r4,r20
   2e03c:	a80b883a 	mov	r5,r21
   2e040:	1021883a 	mov	r16,r2
   2e044:	002e7a00 	call	2e7a0 <__udivsi3>
   2e048:	1039883a 	mov	fp,r2
   2e04c:	8d3fffcc 	andi	r20,r17,65535
   2e050:	8020943a 	slli	r16,r16,16
   2e054:	b804d43a 	srli	r2,r23,16
   2e058:	a72d383a 	mul	r22,r20,fp
   2e05c:	1404b03a 	or	r2,r2,r16
   2e060:	1580062e 	bgeu	r2,r22,2e07c <__udivdi3+0x484>
   2e064:	1445883a 	add	r2,r2,r17
   2e068:	e0ffffc4 	addi	r3,fp,-1
   2e06c:	14403836 	bltu	r2,r17,2e150 <__udivdi3+0x558>
   2e070:	1580372e 	bgeu	r2,r22,2e150 <__udivdi3+0x558>
   2e074:	e73fff84 	addi	fp,fp,-2
   2e078:	1445883a 	add	r2,r2,r17
   2e07c:	15adc83a 	sub	r22,r2,r22
   2e080:	a80b883a 	mov	r5,r21
   2e084:	b009883a 	mov	r4,r22
   2e088:	002e8040 	call	2e804 <__umodsi3>
   2e08c:	1027883a 	mov	r19,r2
   2e090:	b009883a 	mov	r4,r22
   2e094:	a80b883a 	mov	r5,r21
   2e098:	002e7a00 	call	2e7a0 <__udivsi3>
   2e09c:	9826943a 	slli	r19,r19,16
   2e0a0:	a0a1383a 	mul	r16,r20,r2
   2e0a4:	b93fffcc 	andi	r4,r23,65535
   2e0a8:	24c8b03a 	or	r4,r4,r19
   2e0ac:	2400062e 	bgeu	r4,r16,2e0c8 <__udivdi3+0x4d0>
   2e0b0:	2449883a 	add	r4,r4,r17
   2e0b4:	10ffffc4 	addi	r3,r2,-1
   2e0b8:	24402336 	bltu	r4,r17,2e148 <__udivdi3+0x550>
   2e0bc:	2400222e 	bgeu	r4,r16,2e148 <__udivdi3+0x550>
   2e0c0:	10bfff84 	addi	r2,r2,-2
   2e0c4:	2449883a 	add	r4,r4,r17
   2e0c8:	e038943a 	slli	fp,fp,16
   2e0cc:	2421c83a 	sub	r16,r4,r16
   2e0d0:	e086b03a 	or	r3,fp,r2
   2e0d4:	003f4306 	br	2dde4 <__alt_data_end+0xf802dde4>
   2e0d8:	2005883a 	mov	r2,r4
   2e0dc:	003f6906 	br	2de84 <__alt_data_end+0xf802de84>
   2e0e0:	1805883a 	mov	r2,r3
   2e0e4:	003f0f06 	br	2dd24 <__alt_data_end+0xf802dd24>
   2e0e8:	1806943a 	slli	r3,r3,16
   2e0ec:	9d66983a 	sll	r19,r19,r21
   2e0f0:	39ffffcc 	andi	r7,r7,65535
   2e0f4:	19c7883a 	add	r3,r3,r7
   2e0f8:	98ffc32e 	bgeu	r19,r3,2e008 <__alt_data_end+0xf802e008>
   2e0fc:	10bfffc4 	addi	r2,r2,-1
   2e100:	003fc106 	br	2e008 <__alt_data_end+0xf802e008>
   2e104:	00800604 	movi	r2,24
   2e108:	003f1106 	br	2dd50 <__alt_data_end+0xf802dd50>
   2e10c:	00800604 	movi	r2,24
   2e110:	003f2706 	br	2ddb0 <__alt_data_end+0xf802ddb0>
   2e114:	00800604 	movi	r2,24
   2e118:	003ece06 	br	2dc54 <__alt_data_end+0xf802dc54>
   2e11c:	0007883a 	mov	r3,zero
   2e120:	00800044 	movi	r2,1
   2e124:	003f5c06 	br	2de98 <__alt_data_end+0xf802de98>
   2e128:	813fa12e 	bgeu	r16,r4,2dfb0 <__alt_data_end+0xf802dfb0>
   2e12c:	10bfff84 	addi	r2,r2,-2
   2e130:	85e1883a 	add	r16,r16,r23
   2e134:	003f9f06 	br	2dfb4 <__alt_data_end+0xf802dfb4>
   2e138:	1c7f8a2e 	bgeu	r3,r17,2df64 <__alt_data_end+0xf802df64>
   2e13c:	31bfff84 	addi	r6,r6,-2
   2e140:	1dc7883a 	add	r3,r3,r23
   2e144:	003f8806 	br	2df68 <__alt_data_end+0xf802df68>
   2e148:	1805883a 	mov	r2,r3
   2e14c:	003fde06 	br	2e0c8 <__alt_data_end+0xf802e0c8>
   2e150:	1839883a 	mov	fp,r3
   2e154:	003fc906 	br	2e07c <__alt_data_end+0xf802e07c>
   2e158:	b5bfff84 	addi	r22,r22,-2
   2e15c:	2449883a 	add	r4,r4,r17
   2e160:	003f3406 	br	2de34 <__alt_data_end+0xf802de34>
   2e164:	b5bfff84 	addi	r22,r22,-2
   2e168:	1445883a 	add	r2,r2,r17
   2e16c:	003edb06 	br	2dcdc <__alt_data_end+0xf802dcdc>

0002e170 <__umoddi3>:
   2e170:	defff404 	addi	sp,sp,-48
   2e174:	df000a15 	stw	fp,40(sp)
   2e178:	dc400315 	stw	r17,12(sp)
   2e17c:	dc000215 	stw	r16,8(sp)
   2e180:	dfc00b15 	stw	ra,44(sp)
   2e184:	ddc00915 	stw	r23,36(sp)
   2e188:	dd800815 	stw	r22,32(sp)
   2e18c:	dd400715 	stw	r21,28(sp)
   2e190:	dd000615 	stw	r20,24(sp)
   2e194:	dcc00515 	stw	r19,20(sp)
   2e198:	dc800415 	stw	r18,16(sp)
   2e19c:	2021883a 	mov	r16,r4
   2e1a0:	2823883a 	mov	r17,r5
   2e1a4:	2839883a 	mov	fp,r5
   2e1a8:	38003c1e 	bne	r7,zero,2e29c <__umoddi3+0x12c>
   2e1ac:	3027883a 	mov	r19,r6
   2e1b0:	2029883a 	mov	r20,r4
   2e1b4:	2980512e 	bgeu	r5,r6,2e2fc <__umoddi3+0x18c>
   2e1b8:	00bfffd4 	movui	r2,65535
   2e1bc:	11809a36 	bltu	r2,r6,2e428 <__umoddi3+0x2b8>
   2e1c0:	01003fc4 	movi	r4,255
   2e1c4:	2189803a 	cmpltu	r4,r4,r6
   2e1c8:	200890fa 	slli	r4,r4,3
   2e1cc:	3104d83a 	srl	r2,r6,r4
   2e1d0:	00c10034 	movhi	r3,1024
   2e1d4:	18c0a504 	addi	r3,r3,660
   2e1d8:	1885883a 	add	r2,r3,r2
   2e1dc:	10c00003 	ldbu	r3,0(r2)
   2e1e0:	00800804 	movi	r2,32
   2e1e4:	1909883a 	add	r4,r3,r4
   2e1e8:	1125c83a 	sub	r18,r2,r4
   2e1ec:	90000526 	beq	r18,zero,2e204 <__umoddi3+0x94>
   2e1f0:	8ca2983a 	sll	r17,r17,r18
   2e1f4:	8108d83a 	srl	r4,r16,r4
   2e1f8:	34a6983a 	sll	r19,r6,r18
   2e1fc:	84a8983a 	sll	r20,r16,r18
   2e200:	2478b03a 	or	fp,r4,r17
   2e204:	982ed43a 	srli	r23,r19,16
   2e208:	e009883a 	mov	r4,fp
   2e20c:	9dbfffcc 	andi	r22,r19,65535
   2e210:	b80b883a 	mov	r5,r23
   2e214:	002e8040 	call	2e804 <__umodsi3>
   2e218:	e009883a 	mov	r4,fp
   2e21c:	b80b883a 	mov	r5,r23
   2e220:	102b883a 	mov	r21,r2
   2e224:	002e7a00 	call	2e7a0 <__udivsi3>
   2e228:	a806943a 	slli	r3,r21,16
   2e22c:	a008d43a 	srli	r4,r20,16
   2e230:	b085383a 	mul	r2,r22,r2
   2e234:	20c8b03a 	or	r4,r4,r3
   2e238:	2080032e 	bgeu	r4,r2,2e248 <__umoddi3+0xd8>
   2e23c:	24c9883a 	add	r4,r4,r19
   2e240:	24c00136 	bltu	r4,r19,2e248 <__umoddi3+0xd8>
   2e244:	20811036 	bltu	r4,r2,2e688 <__umoddi3+0x518>
   2e248:	20abc83a 	sub	r21,r4,r2
   2e24c:	b80b883a 	mov	r5,r23
   2e250:	a809883a 	mov	r4,r21
   2e254:	002e8040 	call	2e804 <__umodsi3>
   2e258:	1023883a 	mov	r17,r2
   2e25c:	b80b883a 	mov	r5,r23
   2e260:	a809883a 	mov	r4,r21
   2e264:	002e7a00 	call	2e7a0 <__udivsi3>
   2e268:	8822943a 	slli	r17,r17,16
   2e26c:	b085383a 	mul	r2,r22,r2
   2e270:	a0ffffcc 	andi	r3,r20,65535
   2e274:	1c46b03a 	or	r3,r3,r17
   2e278:	1880042e 	bgeu	r3,r2,2e28c <__umoddi3+0x11c>
   2e27c:	1cc7883a 	add	r3,r3,r19
   2e280:	1cc00236 	bltu	r3,r19,2e28c <__umoddi3+0x11c>
   2e284:	1880012e 	bgeu	r3,r2,2e28c <__umoddi3+0x11c>
   2e288:	1cc7883a 	add	r3,r3,r19
   2e28c:	1885c83a 	sub	r2,r3,r2
   2e290:	1484d83a 	srl	r2,r2,r18
   2e294:	0007883a 	mov	r3,zero
   2e298:	00004f06 	br	2e3d8 <__umoddi3+0x268>
   2e29c:	29c04c36 	bltu	r5,r7,2e3d0 <__umoddi3+0x260>
   2e2a0:	00bfffd4 	movui	r2,65535
   2e2a4:	11c0582e 	bgeu	r2,r7,2e408 <__umoddi3+0x298>
   2e2a8:	00804034 	movhi	r2,256
   2e2ac:	10bfffc4 	addi	r2,r2,-1
   2e2b0:	11c0e736 	bltu	r2,r7,2e650 <__umoddi3+0x4e0>
   2e2b4:	01000404 	movi	r4,16
   2e2b8:	3904d83a 	srl	r2,r7,r4
   2e2bc:	00c10034 	movhi	r3,1024
   2e2c0:	18c0a504 	addi	r3,r3,660
   2e2c4:	1885883a 	add	r2,r3,r2
   2e2c8:	14c00003 	ldbu	r19,0(r2)
   2e2cc:	00c00804 	movi	r3,32
   2e2d0:	9927883a 	add	r19,r19,r4
   2e2d4:	1ce9c83a 	sub	r20,r3,r19
   2e2d8:	a000581e 	bne	r20,zero,2e43c <__umoddi3+0x2cc>
   2e2dc:	3c400136 	bltu	r7,r17,2e2e4 <__umoddi3+0x174>
   2e2e0:	8180eb36 	bltu	r16,r6,2e690 <__umoddi3+0x520>
   2e2e4:	8185c83a 	sub	r2,r16,r6
   2e2e8:	89e3c83a 	sub	r17,r17,r7
   2e2ec:	8089803a 	cmpltu	r4,r16,r2
   2e2f0:	8939c83a 	sub	fp,r17,r4
   2e2f4:	e007883a 	mov	r3,fp
   2e2f8:	00003706 	br	2e3d8 <__umoddi3+0x268>
   2e2fc:	3000041e 	bne	r6,zero,2e310 <__umoddi3+0x1a0>
   2e300:	000b883a 	mov	r5,zero
   2e304:	01000044 	movi	r4,1
   2e308:	002e7a00 	call	2e7a0 <__udivsi3>
   2e30c:	1027883a 	mov	r19,r2
   2e310:	00bfffd4 	movui	r2,65535
   2e314:	14c0402e 	bgeu	r2,r19,2e418 <__umoddi3+0x2a8>
   2e318:	00804034 	movhi	r2,256
   2e31c:	10bfffc4 	addi	r2,r2,-1
   2e320:	14c0cd36 	bltu	r2,r19,2e658 <__umoddi3+0x4e8>
   2e324:	00800404 	movi	r2,16
   2e328:	9886d83a 	srl	r3,r19,r2
   2e32c:	01010034 	movhi	r4,1024
   2e330:	2100a504 	addi	r4,r4,660
   2e334:	20c7883a 	add	r3,r4,r3
   2e338:	18c00003 	ldbu	r3,0(r3)
   2e33c:	1887883a 	add	r3,r3,r2
   2e340:	00800804 	movi	r2,32
   2e344:	10e5c83a 	sub	r18,r2,r3
   2e348:	9000901e 	bne	r18,zero,2e58c <__umoddi3+0x41c>
   2e34c:	982cd43a 	srli	r22,r19,16
   2e350:	8ce3c83a 	sub	r17,r17,r19
   2e354:	9d7fffcc 	andi	r21,r19,65535
   2e358:	b00b883a 	mov	r5,r22
   2e35c:	8809883a 	mov	r4,r17
   2e360:	002e8040 	call	2e804 <__umodsi3>
   2e364:	8809883a 	mov	r4,r17
   2e368:	b00b883a 	mov	r5,r22
   2e36c:	1021883a 	mov	r16,r2
   2e370:	002e7a00 	call	2e7a0 <__udivsi3>
   2e374:	8006943a 	slli	r3,r16,16
   2e378:	a008d43a 	srli	r4,r20,16
   2e37c:	1545383a 	mul	r2,r2,r21
   2e380:	20c8b03a 	or	r4,r4,r3
   2e384:	2080042e 	bgeu	r4,r2,2e398 <__umoddi3+0x228>
   2e388:	24c9883a 	add	r4,r4,r19
   2e38c:	24c00236 	bltu	r4,r19,2e398 <__umoddi3+0x228>
   2e390:	2080012e 	bgeu	r4,r2,2e398 <__umoddi3+0x228>
   2e394:	24c9883a 	add	r4,r4,r19
   2e398:	20a1c83a 	sub	r16,r4,r2
   2e39c:	b00b883a 	mov	r5,r22
   2e3a0:	8009883a 	mov	r4,r16
   2e3a4:	002e8040 	call	2e804 <__umodsi3>
   2e3a8:	1023883a 	mov	r17,r2
   2e3ac:	b00b883a 	mov	r5,r22
   2e3b0:	8009883a 	mov	r4,r16
   2e3b4:	002e7a00 	call	2e7a0 <__udivsi3>
   2e3b8:	8822943a 	slli	r17,r17,16
   2e3bc:	1545383a 	mul	r2,r2,r21
   2e3c0:	a53fffcc 	andi	r20,r20,65535
   2e3c4:	a446b03a 	or	r3,r20,r17
   2e3c8:	18bfb02e 	bgeu	r3,r2,2e28c <__alt_data_end+0xf802e28c>
   2e3cc:	003fab06 	br	2e27c <__alt_data_end+0xf802e27c>
   2e3d0:	2005883a 	mov	r2,r4
   2e3d4:	2807883a 	mov	r3,r5
   2e3d8:	dfc00b17 	ldw	ra,44(sp)
   2e3dc:	df000a17 	ldw	fp,40(sp)
   2e3e0:	ddc00917 	ldw	r23,36(sp)
   2e3e4:	dd800817 	ldw	r22,32(sp)
   2e3e8:	dd400717 	ldw	r21,28(sp)
   2e3ec:	dd000617 	ldw	r20,24(sp)
   2e3f0:	dcc00517 	ldw	r19,20(sp)
   2e3f4:	dc800417 	ldw	r18,16(sp)
   2e3f8:	dc400317 	ldw	r17,12(sp)
   2e3fc:	dc000217 	ldw	r16,8(sp)
   2e400:	dec00c04 	addi	sp,sp,48
   2e404:	f800283a 	ret
   2e408:	04c03fc4 	movi	r19,255
   2e40c:	99c9803a 	cmpltu	r4,r19,r7
   2e410:	200890fa 	slli	r4,r4,3
   2e414:	003fa806 	br	2e2b8 <__alt_data_end+0xf802e2b8>
   2e418:	00803fc4 	movi	r2,255
   2e41c:	14c5803a 	cmpltu	r2,r2,r19
   2e420:	100490fa 	slli	r2,r2,3
   2e424:	003fc006 	br	2e328 <__alt_data_end+0xf802e328>
   2e428:	00804034 	movhi	r2,256
   2e42c:	10bfffc4 	addi	r2,r2,-1
   2e430:	11808b36 	bltu	r2,r6,2e660 <__umoddi3+0x4f0>
   2e434:	01000404 	movi	r4,16
   2e438:	003f6406 	br	2e1cc <__alt_data_end+0xf802e1cc>
   2e43c:	34c4d83a 	srl	r2,r6,r19
   2e440:	3d0e983a 	sll	r7,r7,r20
   2e444:	8cf8d83a 	srl	fp,r17,r19
   2e448:	8d10983a 	sll	r8,r17,r20
   2e44c:	38aab03a 	or	r21,r7,r2
   2e450:	a82cd43a 	srli	r22,r21,16
   2e454:	84e2d83a 	srl	r17,r16,r19
   2e458:	e009883a 	mov	r4,fp
   2e45c:	b00b883a 	mov	r5,r22
   2e460:	8a22b03a 	or	r17,r17,r8
   2e464:	3524983a 	sll	r18,r6,r20
   2e468:	002e8040 	call	2e804 <__umodsi3>
   2e46c:	e009883a 	mov	r4,fp
   2e470:	b00b883a 	mov	r5,r22
   2e474:	102f883a 	mov	r23,r2
   2e478:	002e7a00 	call	2e7a0 <__udivsi3>
   2e47c:	100d883a 	mov	r6,r2
   2e480:	b808943a 	slli	r4,r23,16
   2e484:	aa3fffcc 	andi	r8,r21,65535
   2e488:	8804d43a 	srli	r2,r17,16
   2e48c:	41af383a 	mul	r23,r8,r6
   2e490:	8520983a 	sll	r16,r16,r20
   2e494:	1104b03a 	or	r2,r2,r4
   2e498:	15c0042e 	bgeu	r2,r23,2e4ac <__umoddi3+0x33c>
   2e49c:	1545883a 	add	r2,r2,r21
   2e4a0:	30ffffc4 	addi	r3,r6,-1
   2e4a4:	1540742e 	bgeu	r2,r21,2e678 <__umoddi3+0x508>
   2e4a8:	180d883a 	mov	r6,r3
   2e4ac:	15efc83a 	sub	r23,r2,r23
   2e4b0:	b00b883a 	mov	r5,r22
   2e4b4:	b809883a 	mov	r4,r23
   2e4b8:	d9800115 	stw	r6,4(sp)
   2e4bc:	da000015 	stw	r8,0(sp)
   2e4c0:	002e8040 	call	2e804 <__umodsi3>
   2e4c4:	b00b883a 	mov	r5,r22
   2e4c8:	b809883a 	mov	r4,r23
   2e4cc:	1039883a 	mov	fp,r2
   2e4d0:	002e7a00 	call	2e7a0 <__udivsi3>
   2e4d4:	da000017 	ldw	r8,0(sp)
   2e4d8:	e038943a 	slli	fp,fp,16
   2e4dc:	100b883a 	mov	r5,r2
   2e4e0:	4089383a 	mul	r4,r8,r2
   2e4e4:	8a3fffcc 	andi	r8,r17,65535
   2e4e8:	4710b03a 	or	r8,r8,fp
   2e4ec:	d9800117 	ldw	r6,4(sp)
   2e4f0:	4100042e 	bgeu	r8,r4,2e504 <__umoddi3+0x394>
   2e4f4:	4551883a 	add	r8,r8,r21
   2e4f8:	10bfffc4 	addi	r2,r2,-1
   2e4fc:	45405a2e 	bgeu	r8,r21,2e668 <__umoddi3+0x4f8>
   2e500:	100b883a 	mov	r5,r2
   2e504:	300c943a 	slli	r6,r6,16
   2e508:	91ffffcc 	andi	r7,r18,65535
   2e50c:	9004d43a 	srli	r2,r18,16
   2e510:	314cb03a 	or	r6,r6,r5
   2e514:	317fffcc 	andi	r5,r6,65535
   2e518:	300cd43a 	srli	r6,r6,16
   2e51c:	29d3383a 	mul	r9,r5,r7
   2e520:	288b383a 	mul	r5,r5,r2
   2e524:	31cf383a 	mul	r7,r6,r7
   2e528:	4806d43a 	srli	r3,r9,16
   2e52c:	4111c83a 	sub	r8,r8,r4
   2e530:	29cb883a 	add	r5,r5,r7
   2e534:	194b883a 	add	r5,r3,r5
   2e538:	3085383a 	mul	r2,r6,r2
   2e53c:	29c0022e 	bgeu	r5,r7,2e548 <__umoddi3+0x3d8>
   2e540:	00c00074 	movhi	r3,1
   2e544:	10c5883a 	add	r2,r2,r3
   2e548:	2808d43a 	srli	r4,r5,16
   2e54c:	280a943a 	slli	r5,r5,16
   2e550:	4a7fffcc 	andi	r9,r9,65535
   2e554:	2085883a 	add	r2,r4,r2
   2e558:	2a4b883a 	add	r5,r5,r9
   2e55c:	40803636 	bltu	r8,r2,2e638 <__umoddi3+0x4c8>
   2e560:	40804d26 	beq	r8,r2,2e698 <__umoddi3+0x528>
   2e564:	4089c83a 	sub	r4,r8,r2
   2e568:	280f883a 	mov	r7,r5
   2e56c:	81cfc83a 	sub	r7,r16,r7
   2e570:	81c7803a 	cmpltu	r3,r16,r7
   2e574:	20c7c83a 	sub	r3,r4,r3
   2e578:	1cc4983a 	sll	r2,r3,r19
   2e57c:	3d0ed83a 	srl	r7,r7,r20
   2e580:	1d06d83a 	srl	r3,r3,r20
   2e584:	11c4b03a 	or	r2,r2,r7
   2e588:	003f9306 	br	2e3d8 <__alt_data_end+0xf802e3d8>
   2e58c:	9ca6983a 	sll	r19,r19,r18
   2e590:	88e8d83a 	srl	r20,r17,r3
   2e594:	80c4d83a 	srl	r2,r16,r3
   2e598:	982cd43a 	srli	r22,r19,16
   2e59c:	8ca2983a 	sll	r17,r17,r18
   2e5a0:	a009883a 	mov	r4,r20
   2e5a4:	b00b883a 	mov	r5,r22
   2e5a8:	1478b03a 	or	fp,r2,r17
   2e5ac:	002e8040 	call	2e804 <__umodsi3>
   2e5b0:	a009883a 	mov	r4,r20
   2e5b4:	b00b883a 	mov	r5,r22
   2e5b8:	1023883a 	mov	r17,r2
   2e5bc:	002e7a00 	call	2e7a0 <__udivsi3>
   2e5c0:	9d7fffcc 	andi	r21,r19,65535
   2e5c4:	880a943a 	slli	r5,r17,16
   2e5c8:	e008d43a 	srli	r4,fp,16
   2e5cc:	a885383a 	mul	r2,r21,r2
   2e5d0:	84a8983a 	sll	r20,r16,r18
   2e5d4:	2148b03a 	or	r4,r4,r5
   2e5d8:	2080042e 	bgeu	r4,r2,2e5ec <__umoddi3+0x47c>
   2e5dc:	24c9883a 	add	r4,r4,r19
   2e5e0:	24c00236 	bltu	r4,r19,2e5ec <__umoddi3+0x47c>
   2e5e4:	2080012e 	bgeu	r4,r2,2e5ec <__umoddi3+0x47c>
   2e5e8:	24c9883a 	add	r4,r4,r19
   2e5ec:	20a3c83a 	sub	r17,r4,r2
   2e5f0:	b00b883a 	mov	r5,r22
   2e5f4:	8809883a 	mov	r4,r17
   2e5f8:	002e8040 	call	2e804 <__umodsi3>
   2e5fc:	102f883a 	mov	r23,r2
   2e600:	8809883a 	mov	r4,r17
   2e604:	b00b883a 	mov	r5,r22
   2e608:	002e7a00 	call	2e7a0 <__udivsi3>
   2e60c:	b82e943a 	slli	r23,r23,16
   2e610:	a885383a 	mul	r2,r21,r2
   2e614:	e13fffcc 	andi	r4,fp,65535
   2e618:	25c8b03a 	or	r4,r4,r23
   2e61c:	2080042e 	bgeu	r4,r2,2e630 <__umoddi3+0x4c0>
   2e620:	24c9883a 	add	r4,r4,r19
   2e624:	24c00236 	bltu	r4,r19,2e630 <__umoddi3+0x4c0>
   2e628:	2080012e 	bgeu	r4,r2,2e630 <__umoddi3+0x4c0>
   2e62c:	24c9883a 	add	r4,r4,r19
   2e630:	20a3c83a 	sub	r17,r4,r2
   2e634:	003f4806 	br	2e358 <__alt_data_end+0xf802e358>
   2e638:	2c8fc83a 	sub	r7,r5,r18
   2e63c:	1545c83a 	sub	r2,r2,r21
   2e640:	29cb803a 	cmpltu	r5,r5,r7
   2e644:	1145c83a 	sub	r2,r2,r5
   2e648:	4089c83a 	sub	r4,r8,r2
   2e64c:	003fc706 	br	2e56c <__alt_data_end+0xf802e56c>
   2e650:	01000604 	movi	r4,24
   2e654:	003f1806 	br	2e2b8 <__alt_data_end+0xf802e2b8>
   2e658:	00800604 	movi	r2,24
   2e65c:	003f3206 	br	2e328 <__alt_data_end+0xf802e328>
   2e660:	01000604 	movi	r4,24
   2e664:	003ed906 	br	2e1cc <__alt_data_end+0xf802e1cc>
   2e668:	413fa52e 	bgeu	r8,r4,2e500 <__alt_data_end+0xf802e500>
   2e66c:	297fff84 	addi	r5,r5,-2
   2e670:	4551883a 	add	r8,r8,r21
   2e674:	003fa306 	br	2e504 <__alt_data_end+0xf802e504>
   2e678:	15ff8b2e 	bgeu	r2,r23,2e4a8 <__alt_data_end+0xf802e4a8>
   2e67c:	31bfff84 	addi	r6,r6,-2
   2e680:	1545883a 	add	r2,r2,r21
   2e684:	003f8906 	br	2e4ac <__alt_data_end+0xf802e4ac>
   2e688:	24c9883a 	add	r4,r4,r19
   2e68c:	003eee06 	br	2e248 <__alt_data_end+0xf802e248>
   2e690:	8005883a 	mov	r2,r16
   2e694:	003f1706 	br	2e2f4 <__alt_data_end+0xf802e2f4>
   2e698:	817fe736 	bltu	r16,r5,2e638 <__alt_data_end+0xf802e638>
   2e69c:	280f883a 	mov	r7,r5
   2e6a0:	0009883a 	mov	r4,zero
   2e6a4:	003fb106 	br	2e56c <__alt_data_end+0xf802e56c>

0002e6a8 <__divsi3>:
   2e6a8:	20001b16 	blt	r4,zero,2e718 <__divsi3+0x70>
   2e6ac:	000f883a 	mov	r7,zero
   2e6b0:	28001616 	blt	r5,zero,2e70c <__divsi3+0x64>
   2e6b4:	200d883a 	mov	r6,r4
   2e6b8:	29001a2e 	bgeu	r5,r4,2e724 <__divsi3+0x7c>
   2e6bc:	00800804 	movi	r2,32
   2e6c0:	00c00044 	movi	r3,1
   2e6c4:	00000106 	br	2e6cc <__divsi3+0x24>
   2e6c8:	10000d26 	beq	r2,zero,2e700 <__divsi3+0x58>
   2e6cc:	294b883a 	add	r5,r5,r5
   2e6d0:	10bfffc4 	addi	r2,r2,-1
   2e6d4:	18c7883a 	add	r3,r3,r3
   2e6d8:	293ffb36 	bltu	r5,r4,2e6c8 <__alt_data_end+0xf802e6c8>
   2e6dc:	0005883a 	mov	r2,zero
   2e6e0:	18000726 	beq	r3,zero,2e700 <__divsi3+0x58>
   2e6e4:	0005883a 	mov	r2,zero
   2e6e8:	31400236 	bltu	r6,r5,2e6f4 <__divsi3+0x4c>
   2e6ec:	314dc83a 	sub	r6,r6,r5
   2e6f0:	10c4b03a 	or	r2,r2,r3
   2e6f4:	1806d07a 	srli	r3,r3,1
   2e6f8:	280ad07a 	srli	r5,r5,1
   2e6fc:	183ffa1e 	bne	r3,zero,2e6e8 <__alt_data_end+0xf802e6e8>
   2e700:	38000126 	beq	r7,zero,2e708 <__divsi3+0x60>
   2e704:	0085c83a 	sub	r2,zero,r2
   2e708:	f800283a 	ret
   2e70c:	014bc83a 	sub	r5,zero,r5
   2e710:	39c0005c 	xori	r7,r7,1
   2e714:	003fe706 	br	2e6b4 <__alt_data_end+0xf802e6b4>
   2e718:	0109c83a 	sub	r4,zero,r4
   2e71c:	01c00044 	movi	r7,1
   2e720:	003fe306 	br	2e6b0 <__alt_data_end+0xf802e6b0>
   2e724:	00c00044 	movi	r3,1
   2e728:	003fee06 	br	2e6e4 <__alt_data_end+0xf802e6e4>

0002e72c <__modsi3>:
   2e72c:	20001716 	blt	r4,zero,2e78c <__modsi3+0x60>
   2e730:	000f883a 	mov	r7,zero
   2e734:	2005883a 	mov	r2,r4
   2e738:	28001216 	blt	r5,zero,2e784 <__modsi3+0x58>
   2e73c:	2900162e 	bgeu	r5,r4,2e798 <__modsi3+0x6c>
   2e740:	01800804 	movi	r6,32
   2e744:	00c00044 	movi	r3,1
   2e748:	00000106 	br	2e750 <__modsi3+0x24>
   2e74c:	30000a26 	beq	r6,zero,2e778 <__modsi3+0x4c>
   2e750:	294b883a 	add	r5,r5,r5
   2e754:	31bfffc4 	addi	r6,r6,-1
   2e758:	18c7883a 	add	r3,r3,r3
   2e75c:	293ffb36 	bltu	r5,r4,2e74c <__alt_data_end+0xf802e74c>
   2e760:	18000526 	beq	r3,zero,2e778 <__modsi3+0x4c>
   2e764:	1806d07a 	srli	r3,r3,1
   2e768:	11400136 	bltu	r2,r5,2e770 <__modsi3+0x44>
   2e76c:	1145c83a 	sub	r2,r2,r5
   2e770:	280ad07a 	srli	r5,r5,1
   2e774:	183ffb1e 	bne	r3,zero,2e764 <__alt_data_end+0xf802e764>
   2e778:	38000126 	beq	r7,zero,2e780 <__modsi3+0x54>
   2e77c:	0085c83a 	sub	r2,zero,r2
   2e780:	f800283a 	ret
   2e784:	014bc83a 	sub	r5,zero,r5
   2e788:	003fec06 	br	2e73c <__alt_data_end+0xf802e73c>
   2e78c:	0109c83a 	sub	r4,zero,r4
   2e790:	01c00044 	movi	r7,1
   2e794:	003fe706 	br	2e734 <__alt_data_end+0xf802e734>
   2e798:	00c00044 	movi	r3,1
   2e79c:	003ff106 	br	2e764 <__alt_data_end+0xf802e764>

0002e7a0 <__udivsi3>:
   2e7a0:	200d883a 	mov	r6,r4
   2e7a4:	2900152e 	bgeu	r5,r4,2e7fc <__udivsi3+0x5c>
   2e7a8:	28001416 	blt	r5,zero,2e7fc <__udivsi3+0x5c>
   2e7ac:	00800804 	movi	r2,32
   2e7b0:	00c00044 	movi	r3,1
   2e7b4:	00000206 	br	2e7c0 <__udivsi3+0x20>
   2e7b8:	10000e26 	beq	r2,zero,2e7f4 <__udivsi3+0x54>
   2e7bc:	28000516 	blt	r5,zero,2e7d4 <__udivsi3+0x34>
   2e7c0:	294b883a 	add	r5,r5,r5
   2e7c4:	10bfffc4 	addi	r2,r2,-1
   2e7c8:	18c7883a 	add	r3,r3,r3
   2e7cc:	293ffa36 	bltu	r5,r4,2e7b8 <__alt_data_end+0xf802e7b8>
   2e7d0:	18000826 	beq	r3,zero,2e7f4 <__udivsi3+0x54>
   2e7d4:	0005883a 	mov	r2,zero
   2e7d8:	31400236 	bltu	r6,r5,2e7e4 <__udivsi3+0x44>
   2e7dc:	314dc83a 	sub	r6,r6,r5
   2e7e0:	10c4b03a 	or	r2,r2,r3
   2e7e4:	1806d07a 	srli	r3,r3,1
   2e7e8:	280ad07a 	srli	r5,r5,1
   2e7ec:	183ffa1e 	bne	r3,zero,2e7d8 <__alt_data_end+0xf802e7d8>
   2e7f0:	f800283a 	ret
   2e7f4:	0005883a 	mov	r2,zero
   2e7f8:	f800283a 	ret
   2e7fc:	00c00044 	movi	r3,1
   2e800:	003ff406 	br	2e7d4 <__alt_data_end+0xf802e7d4>

0002e804 <__umodsi3>:
   2e804:	2005883a 	mov	r2,r4
   2e808:	2900122e 	bgeu	r5,r4,2e854 <__umodsi3+0x50>
   2e80c:	28001116 	blt	r5,zero,2e854 <__umodsi3+0x50>
   2e810:	01800804 	movi	r6,32
   2e814:	00c00044 	movi	r3,1
   2e818:	00000206 	br	2e824 <__umodsi3+0x20>
   2e81c:	30000c26 	beq	r6,zero,2e850 <__umodsi3+0x4c>
   2e820:	28000516 	blt	r5,zero,2e838 <__umodsi3+0x34>
   2e824:	294b883a 	add	r5,r5,r5
   2e828:	31bfffc4 	addi	r6,r6,-1
   2e82c:	18c7883a 	add	r3,r3,r3
   2e830:	293ffa36 	bltu	r5,r4,2e81c <__alt_data_end+0xf802e81c>
   2e834:	18000626 	beq	r3,zero,2e850 <__umodsi3+0x4c>
   2e838:	1806d07a 	srli	r3,r3,1
   2e83c:	11400136 	bltu	r2,r5,2e844 <__umodsi3+0x40>
   2e840:	1145c83a 	sub	r2,r2,r5
   2e844:	280ad07a 	srli	r5,r5,1
   2e848:	183ffb1e 	bne	r3,zero,2e838 <__alt_data_end+0xf802e838>
   2e84c:	f800283a 	ret
   2e850:	f800283a 	ret
   2e854:	00c00044 	movi	r3,1
   2e858:	003ff706 	br	2e838 <__alt_data_end+0xf802e838>

0002e85c <__adddf3>:
   2e85c:	02c00434 	movhi	r11,16
   2e860:	5affffc4 	addi	r11,r11,-1
   2e864:	2806d7fa 	srli	r3,r5,31
   2e868:	2ad4703a 	and	r10,r5,r11
   2e86c:	3ad2703a 	and	r9,r7,r11
   2e870:	3804d53a 	srli	r2,r7,20
   2e874:	3018d77a 	srli	r12,r6,29
   2e878:	280ad53a 	srli	r5,r5,20
   2e87c:	501490fa 	slli	r10,r10,3
   2e880:	2010d77a 	srli	r8,r4,29
   2e884:	481290fa 	slli	r9,r9,3
   2e888:	380ed7fa 	srli	r7,r7,31
   2e88c:	defffb04 	addi	sp,sp,-20
   2e890:	dc800215 	stw	r18,8(sp)
   2e894:	dc400115 	stw	r17,4(sp)
   2e898:	dc000015 	stw	r16,0(sp)
   2e89c:	dfc00415 	stw	ra,16(sp)
   2e8a0:	dcc00315 	stw	r19,12(sp)
   2e8a4:	1c803fcc 	andi	r18,r3,255
   2e8a8:	2c01ffcc 	andi	r16,r5,2047
   2e8ac:	5210b03a 	or	r8,r10,r8
   2e8b0:	202290fa 	slli	r17,r4,3
   2e8b4:	1081ffcc 	andi	r2,r2,2047
   2e8b8:	4b12b03a 	or	r9,r9,r12
   2e8bc:	300c90fa 	slli	r6,r6,3
   2e8c0:	91c07526 	beq	r18,r7,2ea98 <__adddf3+0x23c>
   2e8c4:	8087c83a 	sub	r3,r16,r2
   2e8c8:	00c0ab0e 	bge	zero,r3,2eb78 <__adddf3+0x31c>
   2e8cc:	10002a1e 	bne	r2,zero,2e978 <__adddf3+0x11c>
   2e8d0:	4984b03a 	or	r2,r9,r6
   2e8d4:	1000961e 	bne	r2,zero,2eb30 <__adddf3+0x2d4>
   2e8d8:	888001cc 	andi	r2,r17,7
   2e8dc:	10000726 	beq	r2,zero,2e8fc <__adddf3+0xa0>
   2e8e0:	888003cc 	andi	r2,r17,15
   2e8e4:	00c00104 	movi	r3,4
   2e8e8:	10c00426 	beq	r2,r3,2e8fc <__adddf3+0xa0>
   2e8ec:	88c7883a 	add	r3,r17,r3
   2e8f0:	1c63803a 	cmpltu	r17,r3,r17
   2e8f4:	4451883a 	add	r8,r8,r17
   2e8f8:	1823883a 	mov	r17,r3
   2e8fc:	4080202c 	andhi	r2,r8,128
   2e900:	10005926 	beq	r2,zero,2ea68 <__adddf3+0x20c>
   2e904:	84000044 	addi	r16,r16,1
   2e908:	0081ffc4 	movi	r2,2047
   2e90c:	8080ba26 	beq	r16,r2,2ebf8 <__adddf3+0x39c>
   2e910:	00bfe034 	movhi	r2,65408
   2e914:	10bfffc4 	addi	r2,r2,-1
   2e918:	4090703a 	and	r8,r8,r2
   2e91c:	4004977a 	slli	r2,r8,29
   2e920:	4010927a 	slli	r8,r8,9
   2e924:	8822d0fa 	srli	r17,r17,3
   2e928:	8401ffcc 	andi	r16,r16,2047
   2e92c:	4010d33a 	srli	r8,r8,12
   2e930:	9007883a 	mov	r3,r18
   2e934:	1444b03a 	or	r2,r2,r17
   2e938:	8401ffcc 	andi	r16,r16,2047
   2e93c:	8020953a 	slli	r16,r16,20
   2e940:	18c03fcc 	andi	r3,r3,255
   2e944:	01000434 	movhi	r4,16
   2e948:	213fffc4 	addi	r4,r4,-1
   2e94c:	180697fa 	slli	r3,r3,31
   2e950:	4110703a 	and	r8,r8,r4
   2e954:	4410b03a 	or	r8,r8,r16
   2e958:	40c6b03a 	or	r3,r8,r3
   2e95c:	dfc00417 	ldw	ra,16(sp)
   2e960:	dcc00317 	ldw	r19,12(sp)
   2e964:	dc800217 	ldw	r18,8(sp)
   2e968:	dc400117 	ldw	r17,4(sp)
   2e96c:	dc000017 	ldw	r16,0(sp)
   2e970:	dec00504 	addi	sp,sp,20
   2e974:	f800283a 	ret
   2e978:	0081ffc4 	movi	r2,2047
   2e97c:	80bfd626 	beq	r16,r2,2e8d8 <__alt_data_end+0xf802e8d8>
   2e980:	4a402034 	orhi	r9,r9,128
   2e984:	00800e04 	movi	r2,56
   2e988:	10c09f16 	blt	r2,r3,2ec08 <__adddf3+0x3ac>
   2e98c:	008007c4 	movi	r2,31
   2e990:	10c0c216 	blt	r2,r3,2ec9c <__adddf3+0x440>
   2e994:	00800804 	movi	r2,32
   2e998:	10c5c83a 	sub	r2,r2,r3
   2e99c:	488a983a 	sll	r5,r9,r2
   2e9a0:	30c8d83a 	srl	r4,r6,r3
   2e9a4:	3084983a 	sll	r2,r6,r2
   2e9a8:	48c6d83a 	srl	r3,r9,r3
   2e9ac:	290cb03a 	or	r6,r5,r4
   2e9b0:	1004c03a 	cmpne	r2,r2,zero
   2e9b4:	308cb03a 	or	r6,r6,r2
   2e9b8:	898dc83a 	sub	r6,r17,r6
   2e9bc:	89a3803a 	cmpltu	r17,r17,r6
   2e9c0:	40d1c83a 	sub	r8,r8,r3
   2e9c4:	4451c83a 	sub	r8,r8,r17
   2e9c8:	3023883a 	mov	r17,r6
   2e9cc:	4080202c 	andhi	r2,r8,128
   2e9d0:	10002326 	beq	r2,zero,2ea60 <__adddf3+0x204>
   2e9d4:	04c02034 	movhi	r19,128
   2e9d8:	9cffffc4 	addi	r19,r19,-1
   2e9dc:	44e6703a 	and	r19,r8,r19
   2e9e0:	98007626 	beq	r19,zero,2ebbc <__adddf3+0x360>
   2e9e4:	9809883a 	mov	r4,r19
   2e9e8:	0030e600 	call	30e60 <__clzsi2>
   2e9ec:	10fffe04 	addi	r3,r2,-8
   2e9f0:	010007c4 	movi	r4,31
   2e9f4:	20c07716 	blt	r4,r3,2ebd4 <__adddf3+0x378>
   2e9f8:	00800804 	movi	r2,32
   2e9fc:	10c5c83a 	sub	r2,r2,r3
   2ea00:	8884d83a 	srl	r2,r17,r2
   2ea04:	98d0983a 	sll	r8,r19,r3
   2ea08:	88e2983a 	sll	r17,r17,r3
   2ea0c:	1204b03a 	or	r2,r2,r8
   2ea10:	1c007416 	blt	r3,r16,2ebe4 <__adddf3+0x388>
   2ea14:	1c21c83a 	sub	r16,r3,r16
   2ea18:	82000044 	addi	r8,r16,1
   2ea1c:	00c007c4 	movi	r3,31
   2ea20:	1a009116 	blt	r3,r8,2ec68 <__adddf3+0x40c>
   2ea24:	00c00804 	movi	r3,32
   2ea28:	1a07c83a 	sub	r3,r3,r8
   2ea2c:	8a08d83a 	srl	r4,r17,r8
   2ea30:	88e2983a 	sll	r17,r17,r3
   2ea34:	10c6983a 	sll	r3,r2,r3
   2ea38:	1210d83a 	srl	r8,r2,r8
   2ea3c:	8804c03a 	cmpne	r2,r17,zero
   2ea40:	1906b03a 	or	r3,r3,r4
   2ea44:	18a2b03a 	or	r17,r3,r2
   2ea48:	0021883a 	mov	r16,zero
   2ea4c:	003fa206 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ea50:	1890b03a 	or	r8,r3,r2
   2ea54:	40017d26 	beq	r8,zero,2f04c <__adddf3+0x7f0>
   2ea58:	1011883a 	mov	r8,r2
   2ea5c:	1823883a 	mov	r17,r3
   2ea60:	888001cc 	andi	r2,r17,7
   2ea64:	103f9e1e 	bne	r2,zero,2e8e0 <__alt_data_end+0xf802e8e0>
   2ea68:	4004977a 	slli	r2,r8,29
   2ea6c:	8822d0fa 	srli	r17,r17,3
   2ea70:	4010d0fa 	srli	r8,r8,3
   2ea74:	9007883a 	mov	r3,r18
   2ea78:	1444b03a 	or	r2,r2,r17
   2ea7c:	0101ffc4 	movi	r4,2047
   2ea80:	81002426 	beq	r16,r4,2eb14 <__adddf3+0x2b8>
   2ea84:	8120703a 	and	r16,r16,r4
   2ea88:	01000434 	movhi	r4,16
   2ea8c:	213fffc4 	addi	r4,r4,-1
   2ea90:	4110703a 	and	r8,r8,r4
   2ea94:	003fa806 	br	2e938 <__alt_data_end+0xf802e938>
   2ea98:	8089c83a 	sub	r4,r16,r2
   2ea9c:	01005e0e 	bge	zero,r4,2ec18 <__adddf3+0x3bc>
   2eaa0:	10002b26 	beq	r2,zero,2eb50 <__adddf3+0x2f4>
   2eaa4:	0081ffc4 	movi	r2,2047
   2eaa8:	80bf8b26 	beq	r16,r2,2e8d8 <__alt_data_end+0xf802e8d8>
   2eaac:	4a402034 	orhi	r9,r9,128
   2eab0:	00800e04 	movi	r2,56
   2eab4:	1100a40e 	bge	r2,r4,2ed48 <__adddf3+0x4ec>
   2eab8:	498cb03a 	or	r6,r9,r6
   2eabc:	300ac03a 	cmpne	r5,r6,zero
   2eac0:	0013883a 	mov	r9,zero
   2eac4:	2c4b883a 	add	r5,r5,r17
   2eac8:	2c63803a 	cmpltu	r17,r5,r17
   2eacc:	4a11883a 	add	r8,r9,r8
   2ead0:	8a11883a 	add	r8,r17,r8
   2ead4:	2823883a 	mov	r17,r5
   2ead8:	4080202c 	andhi	r2,r8,128
   2eadc:	103fe026 	beq	r2,zero,2ea60 <__alt_data_end+0xf802ea60>
   2eae0:	84000044 	addi	r16,r16,1
   2eae4:	0081ffc4 	movi	r2,2047
   2eae8:	8080d226 	beq	r16,r2,2ee34 <__adddf3+0x5d8>
   2eaec:	00bfe034 	movhi	r2,65408
   2eaf0:	10bfffc4 	addi	r2,r2,-1
   2eaf4:	4090703a 	and	r8,r8,r2
   2eaf8:	880ad07a 	srli	r5,r17,1
   2eafc:	400897fa 	slli	r4,r8,31
   2eb00:	88c0004c 	andi	r3,r17,1
   2eb04:	28e2b03a 	or	r17,r5,r3
   2eb08:	4010d07a 	srli	r8,r8,1
   2eb0c:	2462b03a 	or	r17,r4,r17
   2eb10:	003f7106 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2eb14:	4088b03a 	or	r4,r8,r2
   2eb18:	20014526 	beq	r4,zero,2f030 <__adddf3+0x7d4>
   2eb1c:	01000434 	movhi	r4,16
   2eb20:	42000234 	orhi	r8,r8,8
   2eb24:	213fffc4 	addi	r4,r4,-1
   2eb28:	4110703a 	and	r8,r8,r4
   2eb2c:	003f8206 	br	2e938 <__alt_data_end+0xf802e938>
   2eb30:	18ffffc4 	addi	r3,r3,-1
   2eb34:	1800491e 	bne	r3,zero,2ec5c <__adddf3+0x400>
   2eb38:	898bc83a 	sub	r5,r17,r6
   2eb3c:	8963803a 	cmpltu	r17,r17,r5
   2eb40:	4251c83a 	sub	r8,r8,r9
   2eb44:	4451c83a 	sub	r8,r8,r17
   2eb48:	2823883a 	mov	r17,r5
   2eb4c:	003f9f06 	br	2e9cc <__alt_data_end+0xf802e9cc>
   2eb50:	4984b03a 	or	r2,r9,r6
   2eb54:	103f6026 	beq	r2,zero,2e8d8 <__alt_data_end+0xf802e8d8>
   2eb58:	213fffc4 	addi	r4,r4,-1
   2eb5c:	2000931e 	bne	r4,zero,2edac <__adddf3+0x550>
   2eb60:	898d883a 	add	r6,r17,r6
   2eb64:	3463803a 	cmpltu	r17,r6,r17
   2eb68:	4251883a 	add	r8,r8,r9
   2eb6c:	8a11883a 	add	r8,r17,r8
   2eb70:	3023883a 	mov	r17,r6
   2eb74:	003fd806 	br	2ead8 <__alt_data_end+0xf802ead8>
   2eb78:	1800541e 	bne	r3,zero,2eccc <__adddf3+0x470>
   2eb7c:	80800044 	addi	r2,r16,1
   2eb80:	1081ffcc 	andi	r2,r2,2047
   2eb84:	00c00044 	movi	r3,1
   2eb88:	1880a00e 	bge	r3,r2,2ee0c <__adddf3+0x5b0>
   2eb8c:	8989c83a 	sub	r4,r17,r6
   2eb90:	8905803a 	cmpltu	r2,r17,r4
   2eb94:	4267c83a 	sub	r19,r8,r9
   2eb98:	98a7c83a 	sub	r19,r19,r2
   2eb9c:	9880202c 	andhi	r2,r19,128
   2eba0:	10006326 	beq	r2,zero,2ed30 <__adddf3+0x4d4>
   2eba4:	3463c83a 	sub	r17,r6,r17
   2eba8:	4a07c83a 	sub	r3,r9,r8
   2ebac:	344d803a 	cmpltu	r6,r6,r17
   2ebb0:	19a7c83a 	sub	r19,r3,r6
   2ebb4:	3825883a 	mov	r18,r7
   2ebb8:	983f8a1e 	bne	r19,zero,2e9e4 <__alt_data_end+0xf802e9e4>
   2ebbc:	8809883a 	mov	r4,r17
   2ebc0:	0030e600 	call	30e60 <__clzsi2>
   2ebc4:	10800804 	addi	r2,r2,32
   2ebc8:	10fffe04 	addi	r3,r2,-8
   2ebcc:	010007c4 	movi	r4,31
   2ebd0:	20ff890e 	bge	r4,r3,2e9f8 <__alt_data_end+0xf802e9f8>
   2ebd4:	10bff604 	addi	r2,r2,-40
   2ebd8:	8884983a 	sll	r2,r17,r2
   2ebdc:	0023883a 	mov	r17,zero
   2ebe0:	1c3f8c0e 	bge	r3,r16,2ea14 <__alt_data_end+0xf802ea14>
   2ebe4:	023fe034 	movhi	r8,65408
   2ebe8:	423fffc4 	addi	r8,r8,-1
   2ebec:	80e1c83a 	sub	r16,r16,r3
   2ebf0:	1210703a 	and	r8,r2,r8
   2ebf4:	003f3806 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ebf8:	9007883a 	mov	r3,r18
   2ebfc:	0011883a 	mov	r8,zero
   2ec00:	0005883a 	mov	r2,zero
   2ec04:	003f4c06 	br	2e938 <__alt_data_end+0xf802e938>
   2ec08:	498cb03a 	or	r6,r9,r6
   2ec0c:	300cc03a 	cmpne	r6,r6,zero
   2ec10:	0007883a 	mov	r3,zero
   2ec14:	003f6806 	br	2e9b8 <__alt_data_end+0xf802e9b8>
   2ec18:	20009c1e 	bne	r4,zero,2ee8c <__adddf3+0x630>
   2ec1c:	80800044 	addi	r2,r16,1
   2ec20:	1141ffcc 	andi	r5,r2,2047
   2ec24:	01000044 	movi	r4,1
   2ec28:	2140670e 	bge	r4,r5,2edc8 <__adddf3+0x56c>
   2ec2c:	0101ffc4 	movi	r4,2047
   2ec30:	11007f26 	beq	r2,r4,2ee30 <__adddf3+0x5d4>
   2ec34:	898d883a 	add	r6,r17,r6
   2ec38:	4247883a 	add	r3,r8,r9
   2ec3c:	3451803a 	cmpltu	r8,r6,r17
   2ec40:	40d1883a 	add	r8,r8,r3
   2ec44:	402297fa 	slli	r17,r8,31
   2ec48:	300cd07a 	srli	r6,r6,1
   2ec4c:	4010d07a 	srli	r8,r8,1
   2ec50:	1021883a 	mov	r16,r2
   2ec54:	89a2b03a 	or	r17,r17,r6
   2ec58:	003f1f06 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ec5c:	0081ffc4 	movi	r2,2047
   2ec60:	80bf481e 	bne	r16,r2,2e984 <__alt_data_end+0xf802e984>
   2ec64:	003f1c06 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ec68:	843ff844 	addi	r16,r16,-31
   2ec6c:	01000804 	movi	r4,32
   2ec70:	1406d83a 	srl	r3,r2,r16
   2ec74:	41005026 	beq	r8,r4,2edb8 <__adddf3+0x55c>
   2ec78:	01001004 	movi	r4,64
   2ec7c:	2211c83a 	sub	r8,r4,r8
   2ec80:	1204983a 	sll	r2,r2,r8
   2ec84:	88a2b03a 	or	r17,r17,r2
   2ec88:	8822c03a 	cmpne	r17,r17,zero
   2ec8c:	1c62b03a 	or	r17,r3,r17
   2ec90:	0011883a 	mov	r8,zero
   2ec94:	0021883a 	mov	r16,zero
   2ec98:	003f7106 	br	2ea60 <__alt_data_end+0xf802ea60>
   2ec9c:	193ff804 	addi	r4,r3,-32
   2eca0:	00800804 	movi	r2,32
   2eca4:	4908d83a 	srl	r4,r9,r4
   2eca8:	18804526 	beq	r3,r2,2edc0 <__adddf3+0x564>
   2ecac:	00801004 	movi	r2,64
   2ecb0:	10c5c83a 	sub	r2,r2,r3
   2ecb4:	4886983a 	sll	r3,r9,r2
   2ecb8:	198cb03a 	or	r6,r3,r6
   2ecbc:	300cc03a 	cmpne	r6,r6,zero
   2ecc0:	218cb03a 	or	r6,r4,r6
   2ecc4:	0007883a 	mov	r3,zero
   2ecc8:	003f3b06 	br	2e9b8 <__alt_data_end+0xf802e9b8>
   2eccc:	80002a26 	beq	r16,zero,2ed78 <__adddf3+0x51c>
   2ecd0:	0101ffc4 	movi	r4,2047
   2ecd4:	11006826 	beq	r2,r4,2ee78 <__adddf3+0x61c>
   2ecd8:	00c7c83a 	sub	r3,zero,r3
   2ecdc:	42002034 	orhi	r8,r8,128
   2ece0:	01000e04 	movi	r4,56
   2ece4:	20c07c16 	blt	r4,r3,2eed8 <__adddf3+0x67c>
   2ece8:	010007c4 	movi	r4,31
   2ecec:	20c0da16 	blt	r4,r3,2f058 <__adddf3+0x7fc>
   2ecf0:	01000804 	movi	r4,32
   2ecf4:	20c9c83a 	sub	r4,r4,r3
   2ecf8:	4114983a 	sll	r10,r8,r4
   2ecfc:	88cad83a 	srl	r5,r17,r3
   2ed00:	8908983a 	sll	r4,r17,r4
   2ed04:	40c6d83a 	srl	r3,r8,r3
   2ed08:	5162b03a 	or	r17,r10,r5
   2ed0c:	2008c03a 	cmpne	r4,r4,zero
   2ed10:	8922b03a 	or	r17,r17,r4
   2ed14:	3463c83a 	sub	r17,r6,r17
   2ed18:	48c7c83a 	sub	r3,r9,r3
   2ed1c:	344d803a 	cmpltu	r6,r6,r17
   2ed20:	1991c83a 	sub	r8,r3,r6
   2ed24:	1021883a 	mov	r16,r2
   2ed28:	3825883a 	mov	r18,r7
   2ed2c:	003f2706 	br	2e9cc <__alt_data_end+0xf802e9cc>
   2ed30:	24d0b03a 	or	r8,r4,r19
   2ed34:	40001b1e 	bne	r8,zero,2eda4 <__adddf3+0x548>
   2ed38:	0005883a 	mov	r2,zero
   2ed3c:	0007883a 	mov	r3,zero
   2ed40:	0021883a 	mov	r16,zero
   2ed44:	003f4d06 	br	2ea7c <__alt_data_end+0xf802ea7c>
   2ed48:	008007c4 	movi	r2,31
   2ed4c:	11003c16 	blt	r2,r4,2ee40 <__adddf3+0x5e4>
   2ed50:	00800804 	movi	r2,32
   2ed54:	1105c83a 	sub	r2,r2,r4
   2ed58:	488e983a 	sll	r7,r9,r2
   2ed5c:	310ad83a 	srl	r5,r6,r4
   2ed60:	3084983a 	sll	r2,r6,r2
   2ed64:	4912d83a 	srl	r9,r9,r4
   2ed68:	394ab03a 	or	r5,r7,r5
   2ed6c:	1004c03a 	cmpne	r2,r2,zero
   2ed70:	288ab03a 	or	r5,r5,r2
   2ed74:	003f5306 	br	2eac4 <__alt_data_end+0xf802eac4>
   2ed78:	4448b03a 	or	r4,r8,r17
   2ed7c:	20003e26 	beq	r4,zero,2ee78 <__adddf3+0x61c>
   2ed80:	00c6303a 	nor	r3,zero,r3
   2ed84:	18003a1e 	bne	r3,zero,2ee70 <__adddf3+0x614>
   2ed88:	3463c83a 	sub	r17,r6,r17
   2ed8c:	4a07c83a 	sub	r3,r9,r8
   2ed90:	344d803a 	cmpltu	r6,r6,r17
   2ed94:	1991c83a 	sub	r8,r3,r6
   2ed98:	1021883a 	mov	r16,r2
   2ed9c:	3825883a 	mov	r18,r7
   2eda0:	003f0a06 	br	2e9cc <__alt_data_end+0xf802e9cc>
   2eda4:	2023883a 	mov	r17,r4
   2eda8:	003f0d06 	br	2e9e0 <__alt_data_end+0xf802e9e0>
   2edac:	0081ffc4 	movi	r2,2047
   2edb0:	80bf3f1e 	bne	r16,r2,2eab0 <__alt_data_end+0xf802eab0>
   2edb4:	003ec806 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2edb8:	0005883a 	mov	r2,zero
   2edbc:	003fb106 	br	2ec84 <__alt_data_end+0xf802ec84>
   2edc0:	0007883a 	mov	r3,zero
   2edc4:	003fbc06 	br	2ecb8 <__alt_data_end+0xf802ecb8>
   2edc8:	4444b03a 	or	r2,r8,r17
   2edcc:	8000871e 	bne	r16,zero,2efec <__adddf3+0x790>
   2edd0:	1000ba26 	beq	r2,zero,2f0bc <__adddf3+0x860>
   2edd4:	4984b03a 	or	r2,r9,r6
   2edd8:	103ebf26 	beq	r2,zero,2e8d8 <__alt_data_end+0xf802e8d8>
   2eddc:	8985883a 	add	r2,r17,r6
   2ede0:	4247883a 	add	r3,r8,r9
   2ede4:	1451803a 	cmpltu	r8,r2,r17
   2ede8:	40d1883a 	add	r8,r8,r3
   2edec:	40c0202c 	andhi	r3,r8,128
   2edf0:	1023883a 	mov	r17,r2
   2edf4:	183f1a26 	beq	r3,zero,2ea60 <__alt_data_end+0xf802ea60>
   2edf8:	00bfe034 	movhi	r2,65408
   2edfc:	10bfffc4 	addi	r2,r2,-1
   2ee00:	2021883a 	mov	r16,r4
   2ee04:	4090703a 	and	r8,r8,r2
   2ee08:	003eb306 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ee0c:	4444b03a 	or	r2,r8,r17
   2ee10:	8000291e 	bne	r16,zero,2eeb8 <__adddf3+0x65c>
   2ee14:	10004b1e 	bne	r2,zero,2ef44 <__adddf3+0x6e8>
   2ee18:	4990b03a 	or	r8,r9,r6
   2ee1c:	40008b26 	beq	r8,zero,2f04c <__adddf3+0x7f0>
   2ee20:	4811883a 	mov	r8,r9
   2ee24:	3023883a 	mov	r17,r6
   2ee28:	3825883a 	mov	r18,r7
   2ee2c:	003eaa06 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ee30:	1021883a 	mov	r16,r2
   2ee34:	0011883a 	mov	r8,zero
   2ee38:	0005883a 	mov	r2,zero
   2ee3c:	003f0f06 	br	2ea7c <__alt_data_end+0xf802ea7c>
   2ee40:	217ff804 	addi	r5,r4,-32
   2ee44:	00800804 	movi	r2,32
   2ee48:	494ad83a 	srl	r5,r9,r5
   2ee4c:	20807d26 	beq	r4,r2,2f044 <__adddf3+0x7e8>
   2ee50:	00801004 	movi	r2,64
   2ee54:	1109c83a 	sub	r4,r2,r4
   2ee58:	4912983a 	sll	r9,r9,r4
   2ee5c:	498cb03a 	or	r6,r9,r6
   2ee60:	300cc03a 	cmpne	r6,r6,zero
   2ee64:	298ab03a 	or	r5,r5,r6
   2ee68:	0013883a 	mov	r9,zero
   2ee6c:	003f1506 	br	2eac4 <__alt_data_end+0xf802eac4>
   2ee70:	0101ffc4 	movi	r4,2047
   2ee74:	113f9a1e 	bne	r2,r4,2ece0 <__alt_data_end+0xf802ece0>
   2ee78:	4811883a 	mov	r8,r9
   2ee7c:	3023883a 	mov	r17,r6
   2ee80:	1021883a 	mov	r16,r2
   2ee84:	3825883a 	mov	r18,r7
   2ee88:	003e9306 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ee8c:	8000161e 	bne	r16,zero,2eee8 <__adddf3+0x68c>
   2ee90:	444ab03a 	or	r5,r8,r17
   2ee94:	28005126 	beq	r5,zero,2efdc <__adddf3+0x780>
   2ee98:	0108303a 	nor	r4,zero,r4
   2ee9c:	20004d1e 	bne	r4,zero,2efd4 <__adddf3+0x778>
   2eea0:	89a3883a 	add	r17,r17,r6
   2eea4:	4253883a 	add	r9,r8,r9
   2eea8:	898d803a 	cmpltu	r6,r17,r6
   2eeac:	3251883a 	add	r8,r6,r9
   2eeb0:	1021883a 	mov	r16,r2
   2eeb4:	003f0806 	br	2ead8 <__alt_data_end+0xf802ead8>
   2eeb8:	1000301e 	bne	r2,zero,2ef7c <__adddf3+0x720>
   2eebc:	4984b03a 	or	r2,r9,r6
   2eec0:	10007126 	beq	r2,zero,2f088 <__adddf3+0x82c>
   2eec4:	4811883a 	mov	r8,r9
   2eec8:	3023883a 	mov	r17,r6
   2eecc:	3825883a 	mov	r18,r7
   2eed0:	0401ffc4 	movi	r16,2047
   2eed4:	003e8006 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2eed8:	4462b03a 	or	r17,r8,r17
   2eedc:	8822c03a 	cmpne	r17,r17,zero
   2eee0:	0007883a 	mov	r3,zero
   2eee4:	003f8b06 	br	2ed14 <__alt_data_end+0xf802ed14>
   2eee8:	0141ffc4 	movi	r5,2047
   2eeec:	11403b26 	beq	r2,r5,2efdc <__adddf3+0x780>
   2eef0:	0109c83a 	sub	r4,zero,r4
   2eef4:	42002034 	orhi	r8,r8,128
   2eef8:	01400e04 	movi	r5,56
   2eefc:	29006716 	blt	r5,r4,2f09c <__adddf3+0x840>
   2ef00:	014007c4 	movi	r5,31
   2ef04:	29007016 	blt	r5,r4,2f0c8 <__adddf3+0x86c>
   2ef08:	01400804 	movi	r5,32
   2ef0c:	290bc83a 	sub	r5,r5,r4
   2ef10:	4154983a 	sll	r10,r8,r5
   2ef14:	890ed83a 	srl	r7,r17,r4
   2ef18:	894a983a 	sll	r5,r17,r5
   2ef1c:	4108d83a 	srl	r4,r8,r4
   2ef20:	51e2b03a 	or	r17,r10,r7
   2ef24:	280ac03a 	cmpne	r5,r5,zero
   2ef28:	8962b03a 	or	r17,r17,r5
   2ef2c:	89a3883a 	add	r17,r17,r6
   2ef30:	2253883a 	add	r9,r4,r9
   2ef34:	898d803a 	cmpltu	r6,r17,r6
   2ef38:	3251883a 	add	r8,r6,r9
   2ef3c:	1021883a 	mov	r16,r2
   2ef40:	003ee506 	br	2ead8 <__alt_data_end+0xf802ead8>
   2ef44:	4984b03a 	or	r2,r9,r6
   2ef48:	103e6326 	beq	r2,zero,2e8d8 <__alt_data_end+0xf802e8d8>
   2ef4c:	8987c83a 	sub	r3,r17,r6
   2ef50:	88c9803a 	cmpltu	r4,r17,r3
   2ef54:	4245c83a 	sub	r2,r8,r9
   2ef58:	1105c83a 	sub	r2,r2,r4
   2ef5c:	1100202c 	andhi	r4,r2,128
   2ef60:	203ebb26 	beq	r4,zero,2ea50 <__alt_data_end+0xf802ea50>
   2ef64:	3463c83a 	sub	r17,r6,r17
   2ef68:	4a07c83a 	sub	r3,r9,r8
   2ef6c:	344d803a 	cmpltu	r6,r6,r17
   2ef70:	1991c83a 	sub	r8,r3,r6
   2ef74:	3825883a 	mov	r18,r7
   2ef78:	003e5706 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2ef7c:	4984b03a 	or	r2,r9,r6
   2ef80:	10002e26 	beq	r2,zero,2f03c <__adddf3+0x7e0>
   2ef84:	4004d0fa 	srli	r2,r8,3
   2ef88:	8822d0fa 	srli	r17,r17,3
   2ef8c:	4010977a 	slli	r8,r8,29
   2ef90:	10c0022c 	andhi	r3,r2,8
   2ef94:	4462b03a 	or	r17,r8,r17
   2ef98:	18000826 	beq	r3,zero,2efbc <__adddf3+0x760>
   2ef9c:	4808d0fa 	srli	r4,r9,3
   2efa0:	20c0022c 	andhi	r3,r4,8
   2efa4:	1800051e 	bne	r3,zero,2efbc <__adddf3+0x760>
   2efa8:	300cd0fa 	srli	r6,r6,3
   2efac:	4806977a 	slli	r3,r9,29
   2efb0:	2005883a 	mov	r2,r4
   2efb4:	3825883a 	mov	r18,r7
   2efb8:	19a2b03a 	or	r17,r3,r6
   2efbc:	8810d77a 	srli	r8,r17,29
   2efc0:	100490fa 	slli	r2,r2,3
   2efc4:	882290fa 	slli	r17,r17,3
   2efc8:	0401ffc4 	movi	r16,2047
   2efcc:	4090b03a 	or	r8,r8,r2
   2efd0:	003e4106 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2efd4:	0141ffc4 	movi	r5,2047
   2efd8:	117fc71e 	bne	r2,r5,2eef8 <__alt_data_end+0xf802eef8>
   2efdc:	4811883a 	mov	r8,r9
   2efe0:	3023883a 	mov	r17,r6
   2efe4:	1021883a 	mov	r16,r2
   2efe8:	003e3b06 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2efec:	10002f26 	beq	r2,zero,2f0ac <__adddf3+0x850>
   2eff0:	4984b03a 	or	r2,r9,r6
   2eff4:	10001126 	beq	r2,zero,2f03c <__adddf3+0x7e0>
   2eff8:	4004d0fa 	srli	r2,r8,3
   2effc:	8822d0fa 	srli	r17,r17,3
   2f000:	4010977a 	slli	r8,r8,29
   2f004:	10c0022c 	andhi	r3,r2,8
   2f008:	4462b03a 	or	r17,r8,r17
   2f00c:	183feb26 	beq	r3,zero,2efbc <__alt_data_end+0xf802efbc>
   2f010:	4808d0fa 	srli	r4,r9,3
   2f014:	20c0022c 	andhi	r3,r4,8
   2f018:	183fe81e 	bne	r3,zero,2efbc <__alt_data_end+0xf802efbc>
   2f01c:	300cd0fa 	srli	r6,r6,3
   2f020:	4806977a 	slli	r3,r9,29
   2f024:	2005883a 	mov	r2,r4
   2f028:	19a2b03a 	or	r17,r3,r6
   2f02c:	003fe306 	br	2efbc <__alt_data_end+0xf802efbc>
   2f030:	0011883a 	mov	r8,zero
   2f034:	0005883a 	mov	r2,zero
   2f038:	003e3f06 	br	2e938 <__alt_data_end+0xf802e938>
   2f03c:	0401ffc4 	movi	r16,2047
   2f040:	003e2506 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2f044:	0013883a 	mov	r9,zero
   2f048:	003f8406 	br	2ee5c <__alt_data_end+0xf802ee5c>
   2f04c:	0005883a 	mov	r2,zero
   2f050:	0007883a 	mov	r3,zero
   2f054:	003e8906 	br	2ea7c <__alt_data_end+0xf802ea7c>
   2f058:	197ff804 	addi	r5,r3,-32
   2f05c:	01000804 	movi	r4,32
   2f060:	414ad83a 	srl	r5,r8,r5
   2f064:	19002426 	beq	r3,r4,2f0f8 <__adddf3+0x89c>
   2f068:	01001004 	movi	r4,64
   2f06c:	20c7c83a 	sub	r3,r4,r3
   2f070:	40c6983a 	sll	r3,r8,r3
   2f074:	1c46b03a 	or	r3,r3,r17
   2f078:	1806c03a 	cmpne	r3,r3,zero
   2f07c:	28e2b03a 	or	r17,r5,r3
   2f080:	0007883a 	mov	r3,zero
   2f084:	003f2306 	br	2ed14 <__alt_data_end+0xf802ed14>
   2f088:	0007883a 	mov	r3,zero
   2f08c:	5811883a 	mov	r8,r11
   2f090:	00bfffc4 	movi	r2,-1
   2f094:	0401ffc4 	movi	r16,2047
   2f098:	003e7806 	br	2ea7c <__alt_data_end+0xf802ea7c>
   2f09c:	4462b03a 	or	r17,r8,r17
   2f0a0:	8822c03a 	cmpne	r17,r17,zero
   2f0a4:	0009883a 	mov	r4,zero
   2f0a8:	003fa006 	br	2ef2c <__alt_data_end+0xf802ef2c>
   2f0ac:	4811883a 	mov	r8,r9
   2f0b0:	3023883a 	mov	r17,r6
   2f0b4:	0401ffc4 	movi	r16,2047
   2f0b8:	003e0706 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2f0bc:	4811883a 	mov	r8,r9
   2f0c0:	3023883a 	mov	r17,r6
   2f0c4:	003e0406 	br	2e8d8 <__alt_data_end+0xf802e8d8>
   2f0c8:	21fff804 	addi	r7,r4,-32
   2f0cc:	01400804 	movi	r5,32
   2f0d0:	41ced83a 	srl	r7,r8,r7
   2f0d4:	21400a26 	beq	r4,r5,2f100 <__adddf3+0x8a4>
   2f0d8:	01401004 	movi	r5,64
   2f0dc:	2909c83a 	sub	r4,r5,r4
   2f0e0:	4108983a 	sll	r4,r8,r4
   2f0e4:	2448b03a 	or	r4,r4,r17
   2f0e8:	2008c03a 	cmpne	r4,r4,zero
   2f0ec:	3922b03a 	or	r17,r7,r4
   2f0f0:	0009883a 	mov	r4,zero
   2f0f4:	003f8d06 	br	2ef2c <__alt_data_end+0xf802ef2c>
   2f0f8:	0007883a 	mov	r3,zero
   2f0fc:	003fdd06 	br	2f074 <__alt_data_end+0xf802f074>
   2f100:	0009883a 	mov	r4,zero
   2f104:	003ff706 	br	2f0e4 <__alt_data_end+0xf802f0e4>

0002f108 <__divdf3>:
   2f108:	defff204 	addi	sp,sp,-56
   2f10c:	dd400915 	stw	r21,36(sp)
   2f110:	282ad53a 	srli	r21,r5,20
   2f114:	dd000815 	stw	r20,32(sp)
   2f118:	2828d7fa 	srli	r20,r5,31
   2f11c:	dc000415 	stw	r16,16(sp)
   2f120:	04000434 	movhi	r16,16
   2f124:	df000c15 	stw	fp,48(sp)
   2f128:	843fffc4 	addi	r16,r16,-1
   2f12c:	dfc00d15 	stw	ra,52(sp)
   2f130:	ddc00b15 	stw	r23,44(sp)
   2f134:	dd800a15 	stw	r22,40(sp)
   2f138:	dcc00715 	stw	r19,28(sp)
   2f13c:	dc800615 	stw	r18,24(sp)
   2f140:	dc400515 	stw	r17,20(sp)
   2f144:	ad41ffcc 	andi	r21,r21,2047
   2f148:	2c20703a 	and	r16,r5,r16
   2f14c:	a7003fcc 	andi	fp,r20,255
   2f150:	a8006126 	beq	r21,zero,2f2d8 <__divdf3+0x1d0>
   2f154:	0081ffc4 	movi	r2,2047
   2f158:	2025883a 	mov	r18,r4
   2f15c:	a8803726 	beq	r21,r2,2f23c <__divdf3+0x134>
   2f160:	80800434 	orhi	r2,r16,16
   2f164:	100490fa 	slli	r2,r2,3
   2f168:	2020d77a 	srli	r16,r4,29
   2f16c:	202490fa 	slli	r18,r4,3
   2f170:	ad7f0044 	addi	r21,r21,-1023
   2f174:	80a0b03a 	or	r16,r16,r2
   2f178:	0027883a 	mov	r19,zero
   2f17c:	0013883a 	mov	r9,zero
   2f180:	3804d53a 	srli	r2,r7,20
   2f184:	382cd7fa 	srli	r22,r7,31
   2f188:	04400434 	movhi	r17,16
   2f18c:	8c7fffc4 	addi	r17,r17,-1
   2f190:	1081ffcc 	andi	r2,r2,2047
   2f194:	3011883a 	mov	r8,r6
   2f198:	3c62703a 	and	r17,r7,r17
   2f19c:	b5c03fcc 	andi	r23,r22,255
   2f1a0:	10006c26 	beq	r2,zero,2f354 <__divdf3+0x24c>
   2f1a4:	00c1ffc4 	movi	r3,2047
   2f1a8:	10c06426 	beq	r2,r3,2f33c <__divdf3+0x234>
   2f1ac:	88c00434 	orhi	r3,r17,16
   2f1b0:	180690fa 	slli	r3,r3,3
   2f1b4:	3022d77a 	srli	r17,r6,29
   2f1b8:	301090fa 	slli	r8,r6,3
   2f1bc:	10bf0044 	addi	r2,r2,-1023
   2f1c0:	88e2b03a 	or	r17,r17,r3
   2f1c4:	000f883a 	mov	r7,zero
   2f1c8:	a58cf03a 	xor	r6,r20,r22
   2f1cc:	3cc8b03a 	or	r4,r7,r19
   2f1d0:	a8abc83a 	sub	r21,r21,r2
   2f1d4:	008003c4 	movi	r2,15
   2f1d8:	3007883a 	mov	r3,r6
   2f1dc:	34c03fcc 	andi	r19,r6,255
   2f1e0:	11009036 	bltu	r2,r4,2f424 <__divdf3+0x31c>
   2f1e4:	200890ba 	slli	r4,r4,2
   2f1e8:	008000f4 	movhi	r2,3
   2f1ec:	10bc7f04 	addi	r2,r2,-3588
   2f1f0:	2089883a 	add	r4,r4,r2
   2f1f4:	20800017 	ldw	r2,0(r4)
   2f1f8:	1000683a 	jmp	r2
   2f1fc:	0002f424 	muli	zero,zero,3024
   2f200:	0002f274 	movhi	zero,3017
   2f204:	0002f414 	movui	zero,3024
   2f208:	0002f268 	cmpgeui	zero,zero,3017
   2f20c:	0002f414 	movui	zero,3024
   2f210:	0002f3e8 	cmpgeui	zero,zero,3023
   2f214:	0002f414 	movui	zero,3024
   2f218:	0002f268 	cmpgeui	zero,zero,3017
   2f21c:	0002f274 	movhi	zero,3017
   2f220:	0002f274 	movhi	zero,3017
   2f224:	0002f3e8 	cmpgeui	zero,zero,3023
   2f228:	0002f268 	cmpgeui	zero,zero,3017
   2f22c:	0002f258 	cmpnei	zero,zero,3017
   2f230:	0002f258 	cmpnei	zero,zero,3017
   2f234:	0002f258 	cmpnei	zero,zero,3017
   2f238:	0002f708 	cmpgei	zero,zero,3036
   2f23c:	2404b03a 	or	r2,r4,r16
   2f240:	1000661e 	bne	r2,zero,2f3dc <__divdf3+0x2d4>
   2f244:	04c00204 	movi	r19,8
   2f248:	0021883a 	mov	r16,zero
   2f24c:	0025883a 	mov	r18,zero
   2f250:	02400084 	movi	r9,2
   2f254:	003fca06 	br	2f180 <__alt_data_end+0xf802f180>
   2f258:	8023883a 	mov	r17,r16
   2f25c:	9011883a 	mov	r8,r18
   2f260:	e02f883a 	mov	r23,fp
   2f264:	480f883a 	mov	r7,r9
   2f268:	00800084 	movi	r2,2
   2f26c:	3881311e 	bne	r7,r2,2f734 <__divdf3+0x62c>
   2f270:	b827883a 	mov	r19,r23
   2f274:	98c0004c 	andi	r3,r19,1
   2f278:	0081ffc4 	movi	r2,2047
   2f27c:	000b883a 	mov	r5,zero
   2f280:	0025883a 	mov	r18,zero
   2f284:	1004953a 	slli	r2,r2,20
   2f288:	18c03fcc 	andi	r3,r3,255
   2f28c:	04400434 	movhi	r17,16
   2f290:	8c7fffc4 	addi	r17,r17,-1
   2f294:	180697fa 	slli	r3,r3,31
   2f298:	2c4a703a 	and	r5,r5,r17
   2f29c:	288ab03a 	or	r5,r5,r2
   2f2a0:	28c6b03a 	or	r3,r5,r3
   2f2a4:	9005883a 	mov	r2,r18
   2f2a8:	dfc00d17 	ldw	ra,52(sp)
   2f2ac:	df000c17 	ldw	fp,48(sp)
   2f2b0:	ddc00b17 	ldw	r23,44(sp)
   2f2b4:	dd800a17 	ldw	r22,40(sp)
   2f2b8:	dd400917 	ldw	r21,36(sp)
   2f2bc:	dd000817 	ldw	r20,32(sp)
   2f2c0:	dcc00717 	ldw	r19,28(sp)
   2f2c4:	dc800617 	ldw	r18,24(sp)
   2f2c8:	dc400517 	ldw	r17,20(sp)
   2f2cc:	dc000417 	ldw	r16,16(sp)
   2f2d0:	dec00e04 	addi	sp,sp,56
   2f2d4:	f800283a 	ret
   2f2d8:	2404b03a 	or	r2,r4,r16
   2f2dc:	2027883a 	mov	r19,r4
   2f2e0:	10003926 	beq	r2,zero,2f3c8 <__divdf3+0x2c0>
   2f2e4:	80012e26 	beq	r16,zero,2f7a0 <__divdf3+0x698>
   2f2e8:	8009883a 	mov	r4,r16
   2f2ec:	d9800315 	stw	r6,12(sp)
   2f2f0:	d9c00215 	stw	r7,8(sp)
   2f2f4:	0030e600 	call	30e60 <__clzsi2>
   2f2f8:	d9800317 	ldw	r6,12(sp)
   2f2fc:	d9c00217 	ldw	r7,8(sp)
   2f300:	113ffd44 	addi	r4,r2,-11
   2f304:	00c00704 	movi	r3,28
   2f308:	19012116 	blt	r3,r4,2f790 <__divdf3+0x688>
   2f30c:	00c00744 	movi	r3,29
   2f310:	147ffe04 	addi	r17,r2,-8
   2f314:	1907c83a 	sub	r3,r3,r4
   2f318:	8460983a 	sll	r16,r16,r17
   2f31c:	98c6d83a 	srl	r3,r19,r3
   2f320:	9c64983a 	sll	r18,r19,r17
   2f324:	1c20b03a 	or	r16,r3,r16
   2f328:	1080fcc4 	addi	r2,r2,1011
   2f32c:	00abc83a 	sub	r21,zero,r2
   2f330:	0027883a 	mov	r19,zero
   2f334:	0013883a 	mov	r9,zero
   2f338:	003f9106 	br	2f180 <__alt_data_end+0xf802f180>
   2f33c:	3446b03a 	or	r3,r6,r17
   2f340:	18001f1e 	bne	r3,zero,2f3c0 <__divdf3+0x2b8>
   2f344:	0023883a 	mov	r17,zero
   2f348:	0011883a 	mov	r8,zero
   2f34c:	01c00084 	movi	r7,2
   2f350:	003f9d06 	br	2f1c8 <__alt_data_end+0xf802f1c8>
   2f354:	3446b03a 	or	r3,r6,r17
   2f358:	18001526 	beq	r3,zero,2f3b0 <__divdf3+0x2a8>
   2f35c:	88011b26 	beq	r17,zero,2f7cc <__divdf3+0x6c4>
   2f360:	8809883a 	mov	r4,r17
   2f364:	d9800315 	stw	r6,12(sp)
   2f368:	da400115 	stw	r9,4(sp)
   2f36c:	0030e600 	call	30e60 <__clzsi2>
   2f370:	d9800317 	ldw	r6,12(sp)
   2f374:	da400117 	ldw	r9,4(sp)
   2f378:	113ffd44 	addi	r4,r2,-11
   2f37c:	00c00704 	movi	r3,28
   2f380:	19010e16 	blt	r3,r4,2f7bc <__divdf3+0x6b4>
   2f384:	00c00744 	movi	r3,29
   2f388:	123ffe04 	addi	r8,r2,-8
   2f38c:	1907c83a 	sub	r3,r3,r4
   2f390:	8a22983a 	sll	r17,r17,r8
   2f394:	30c6d83a 	srl	r3,r6,r3
   2f398:	3210983a 	sll	r8,r6,r8
   2f39c:	1c62b03a 	or	r17,r3,r17
   2f3a0:	1080fcc4 	addi	r2,r2,1011
   2f3a4:	0085c83a 	sub	r2,zero,r2
   2f3a8:	000f883a 	mov	r7,zero
   2f3ac:	003f8606 	br	2f1c8 <__alt_data_end+0xf802f1c8>
   2f3b0:	0023883a 	mov	r17,zero
   2f3b4:	0011883a 	mov	r8,zero
   2f3b8:	01c00044 	movi	r7,1
   2f3bc:	003f8206 	br	2f1c8 <__alt_data_end+0xf802f1c8>
   2f3c0:	01c000c4 	movi	r7,3
   2f3c4:	003f8006 	br	2f1c8 <__alt_data_end+0xf802f1c8>
   2f3c8:	04c00104 	movi	r19,4
   2f3cc:	0021883a 	mov	r16,zero
   2f3d0:	0025883a 	mov	r18,zero
   2f3d4:	02400044 	movi	r9,1
   2f3d8:	003f6906 	br	2f180 <__alt_data_end+0xf802f180>
   2f3dc:	04c00304 	movi	r19,12
   2f3e0:	024000c4 	movi	r9,3
   2f3e4:	003f6606 	br	2f180 <__alt_data_end+0xf802f180>
   2f3e8:	01400434 	movhi	r5,16
   2f3ec:	0007883a 	mov	r3,zero
   2f3f0:	297fffc4 	addi	r5,r5,-1
   2f3f4:	04bfffc4 	movi	r18,-1
   2f3f8:	0081ffc4 	movi	r2,2047
   2f3fc:	003fa106 	br	2f284 <__alt_data_end+0xf802f284>
   2f400:	00c00044 	movi	r3,1
   2f404:	1887c83a 	sub	r3,r3,r2
   2f408:	01000e04 	movi	r4,56
   2f40c:	20c1210e 	bge	r4,r3,2f894 <__divdf3+0x78c>
   2f410:	98c0004c 	andi	r3,r19,1
   2f414:	0005883a 	mov	r2,zero
   2f418:	000b883a 	mov	r5,zero
   2f41c:	0025883a 	mov	r18,zero
   2f420:	003f9806 	br	2f284 <__alt_data_end+0xf802f284>
   2f424:	8c00fd36 	bltu	r17,r16,2f81c <__divdf3+0x714>
   2f428:	8440fb26 	beq	r16,r17,2f818 <__divdf3+0x710>
   2f42c:	8007883a 	mov	r3,r16
   2f430:	ad7fffc4 	addi	r21,r21,-1
   2f434:	0021883a 	mov	r16,zero
   2f438:	4004d63a 	srli	r2,r8,24
   2f43c:	8822923a 	slli	r17,r17,8
   2f440:	1809883a 	mov	r4,r3
   2f444:	402c923a 	slli	r22,r8,8
   2f448:	88b8b03a 	or	fp,r17,r2
   2f44c:	e028d43a 	srli	r20,fp,16
   2f450:	d8c00015 	stw	r3,0(sp)
   2f454:	e5ffffcc 	andi	r23,fp,65535
   2f458:	a00b883a 	mov	r5,r20
   2f45c:	002e7a00 	call	2e7a0 <__udivsi3>
   2f460:	d8c00017 	ldw	r3,0(sp)
   2f464:	a00b883a 	mov	r5,r20
   2f468:	d8800315 	stw	r2,12(sp)
   2f46c:	1809883a 	mov	r4,r3
   2f470:	002e8040 	call	2e804 <__umodsi3>
   2f474:	d9800317 	ldw	r6,12(sp)
   2f478:	1006943a 	slli	r3,r2,16
   2f47c:	9004d43a 	srli	r2,r18,16
   2f480:	b9a3383a 	mul	r17,r23,r6
   2f484:	10c4b03a 	or	r2,r2,r3
   2f488:	1440062e 	bgeu	r2,r17,2f4a4 <__divdf3+0x39c>
   2f48c:	1705883a 	add	r2,r2,fp
   2f490:	30ffffc4 	addi	r3,r6,-1
   2f494:	1700ee36 	bltu	r2,fp,2f850 <__divdf3+0x748>
   2f498:	1440ed2e 	bgeu	r2,r17,2f850 <__divdf3+0x748>
   2f49c:	31bfff84 	addi	r6,r6,-2
   2f4a0:	1705883a 	add	r2,r2,fp
   2f4a4:	1463c83a 	sub	r17,r2,r17
   2f4a8:	a00b883a 	mov	r5,r20
   2f4ac:	8809883a 	mov	r4,r17
   2f4b0:	d9800315 	stw	r6,12(sp)
   2f4b4:	002e7a00 	call	2e7a0 <__udivsi3>
   2f4b8:	a00b883a 	mov	r5,r20
   2f4bc:	8809883a 	mov	r4,r17
   2f4c0:	d8800215 	stw	r2,8(sp)
   2f4c4:	002e8040 	call	2e804 <__umodsi3>
   2f4c8:	d9c00217 	ldw	r7,8(sp)
   2f4cc:	1004943a 	slli	r2,r2,16
   2f4d0:	94bfffcc 	andi	r18,r18,65535
   2f4d4:	b9d1383a 	mul	r8,r23,r7
   2f4d8:	90a4b03a 	or	r18,r18,r2
   2f4dc:	d9800317 	ldw	r6,12(sp)
   2f4e0:	9200062e 	bgeu	r18,r8,2f4fc <__divdf3+0x3f4>
   2f4e4:	9725883a 	add	r18,r18,fp
   2f4e8:	38bfffc4 	addi	r2,r7,-1
   2f4ec:	9700d636 	bltu	r18,fp,2f848 <__divdf3+0x740>
   2f4f0:	9200d52e 	bgeu	r18,r8,2f848 <__divdf3+0x740>
   2f4f4:	39ffff84 	addi	r7,r7,-2
   2f4f8:	9725883a 	add	r18,r18,fp
   2f4fc:	3004943a 	slli	r2,r6,16
   2f500:	b012d43a 	srli	r9,r22,16
   2f504:	b1bfffcc 	andi	r6,r22,65535
   2f508:	11e2b03a 	or	r17,r2,r7
   2f50c:	8806d43a 	srli	r3,r17,16
   2f510:	893fffcc 	andi	r4,r17,65535
   2f514:	218b383a 	mul	r5,r4,r6
   2f518:	30c5383a 	mul	r2,r6,r3
   2f51c:	2249383a 	mul	r4,r4,r9
   2f520:	280ed43a 	srli	r7,r5,16
   2f524:	9225c83a 	sub	r18,r18,r8
   2f528:	2089883a 	add	r4,r4,r2
   2f52c:	3909883a 	add	r4,r7,r4
   2f530:	1a47383a 	mul	r3,r3,r9
   2f534:	2080022e 	bgeu	r4,r2,2f540 <__divdf3+0x438>
   2f538:	00800074 	movhi	r2,1
   2f53c:	1887883a 	add	r3,r3,r2
   2f540:	2004d43a 	srli	r2,r4,16
   2f544:	2008943a 	slli	r4,r4,16
   2f548:	297fffcc 	andi	r5,r5,65535
   2f54c:	10c7883a 	add	r3,r2,r3
   2f550:	2149883a 	add	r4,r4,r5
   2f554:	90c0a536 	bltu	r18,r3,2f7ec <__divdf3+0x6e4>
   2f558:	90c0bf26 	beq	r18,r3,2f858 <__divdf3+0x750>
   2f55c:	90c7c83a 	sub	r3,r18,r3
   2f560:	810fc83a 	sub	r7,r16,r4
   2f564:	81e5803a 	cmpltu	r18,r16,r7
   2f568:	1ca5c83a 	sub	r18,r3,r18
   2f56c:	e480c126 	beq	fp,r18,2f874 <__divdf3+0x76c>
   2f570:	a00b883a 	mov	r5,r20
   2f574:	9009883a 	mov	r4,r18
   2f578:	d9800315 	stw	r6,12(sp)
   2f57c:	d9c00215 	stw	r7,8(sp)
   2f580:	da400115 	stw	r9,4(sp)
   2f584:	002e7a00 	call	2e7a0 <__udivsi3>
   2f588:	a00b883a 	mov	r5,r20
   2f58c:	9009883a 	mov	r4,r18
   2f590:	d8800015 	stw	r2,0(sp)
   2f594:	002e8040 	call	2e804 <__umodsi3>
   2f598:	d9c00217 	ldw	r7,8(sp)
   2f59c:	da000017 	ldw	r8,0(sp)
   2f5a0:	1006943a 	slli	r3,r2,16
   2f5a4:	3804d43a 	srli	r2,r7,16
   2f5a8:	ba21383a 	mul	r16,r23,r8
   2f5ac:	d9800317 	ldw	r6,12(sp)
   2f5b0:	10c4b03a 	or	r2,r2,r3
   2f5b4:	da400117 	ldw	r9,4(sp)
   2f5b8:	1400062e 	bgeu	r2,r16,2f5d4 <__divdf3+0x4cc>
   2f5bc:	1705883a 	add	r2,r2,fp
   2f5c0:	40ffffc4 	addi	r3,r8,-1
   2f5c4:	1700ad36 	bltu	r2,fp,2f87c <__divdf3+0x774>
   2f5c8:	1400ac2e 	bgeu	r2,r16,2f87c <__divdf3+0x774>
   2f5cc:	423fff84 	addi	r8,r8,-2
   2f5d0:	1705883a 	add	r2,r2,fp
   2f5d4:	1421c83a 	sub	r16,r2,r16
   2f5d8:	a00b883a 	mov	r5,r20
   2f5dc:	8009883a 	mov	r4,r16
   2f5e0:	d9800315 	stw	r6,12(sp)
   2f5e4:	d9c00215 	stw	r7,8(sp)
   2f5e8:	da000015 	stw	r8,0(sp)
   2f5ec:	da400115 	stw	r9,4(sp)
   2f5f0:	002e7a00 	call	2e7a0 <__udivsi3>
   2f5f4:	8009883a 	mov	r4,r16
   2f5f8:	a00b883a 	mov	r5,r20
   2f5fc:	1025883a 	mov	r18,r2
   2f600:	002e8040 	call	2e804 <__umodsi3>
   2f604:	d9c00217 	ldw	r7,8(sp)
   2f608:	1004943a 	slli	r2,r2,16
   2f60c:	bcaf383a 	mul	r23,r23,r18
   2f610:	393fffcc 	andi	r4,r7,65535
   2f614:	2088b03a 	or	r4,r4,r2
   2f618:	d9800317 	ldw	r6,12(sp)
   2f61c:	da000017 	ldw	r8,0(sp)
   2f620:	da400117 	ldw	r9,4(sp)
   2f624:	25c0062e 	bgeu	r4,r23,2f640 <__divdf3+0x538>
   2f628:	2709883a 	add	r4,r4,fp
   2f62c:	90bfffc4 	addi	r2,r18,-1
   2f630:	27009436 	bltu	r4,fp,2f884 <__divdf3+0x77c>
   2f634:	25c0932e 	bgeu	r4,r23,2f884 <__divdf3+0x77c>
   2f638:	94bfff84 	addi	r18,r18,-2
   2f63c:	2709883a 	add	r4,r4,fp
   2f640:	4004943a 	slli	r2,r8,16
   2f644:	25efc83a 	sub	r23,r4,r23
   2f648:	1490b03a 	or	r8,r2,r18
   2f64c:	4008d43a 	srli	r4,r8,16
   2f650:	40ffffcc 	andi	r3,r8,65535
   2f654:	30c5383a 	mul	r2,r6,r3
   2f658:	1a47383a 	mul	r3,r3,r9
   2f65c:	310d383a 	mul	r6,r6,r4
   2f660:	100ad43a 	srli	r5,r2,16
   2f664:	4913383a 	mul	r9,r9,r4
   2f668:	1987883a 	add	r3,r3,r6
   2f66c:	28c7883a 	add	r3,r5,r3
   2f670:	1980022e 	bgeu	r3,r6,2f67c <__divdf3+0x574>
   2f674:	01000074 	movhi	r4,1
   2f678:	4913883a 	add	r9,r9,r4
   2f67c:	1808d43a 	srli	r4,r3,16
   2f680:	1806943a 	slli	r3,r3,16
   2f684:	10bfffcc 	andi	r2,r2,65535
   2f688:	2253883a 	add	r9,r4,r9
   2f68c:	1887883a 	add	r3,r3,r2
   2f690:	ba403836 	bltu	r23,r9,2f774 <__divdf3+0x66c>
   2f694:	ba403626 	beq	r23,r9,2f770 <__divdf3+0x668>
   2f698:	42000054 	ori	r8,r8,1
   2f69c:	a880ffc4 	addi	r2,r21,1023
   2f6a0:	00bf570e 	bge	zero,r2,2f400 <__alt_data_end+0xf802f400>
   2f6a4:	40c001cc 	andi	r3,r8,7
   2f6a8:	18000726 	beq	r3,zero,2f6c8 <__divdf3+0x5c0>
   2f6ac:	40c003cc 	andi	r3,r8,15
   2f6b0:	01000104 	movi	r4,4
   2f6b4:	19000426 	beq	r3,r4,2f6c8 <__divdf3+0x5c0>
   2f6b8:	4107883a 	add	r3,r8,r4
   2f6bc:	1a11803a 	cmpltu	r8,r3,r8
   2f6c0:	8a23883a 	add	r17,r17,r8
   2f6c4:	1811883a 	mov	r8,r3
   2f6c8:	88c0402c 	andhi	r3,r17,256
   2f6cc:	18000426 	beq	r3,zero,2f6e0 <__divdf3+0x5d8>
   2f6d0:	00ffc034 	movhi	r3,65280
   2f6d4:	18ffffc4 	addi	r3,r3,-1
   2f6d8:	a8810004 	addi	r2,r21,1024
   2f6dc:	88e2703a 	and	r17,r17,r3
   2f6e0:	00c1ff84 	movi	r3,2046
   2f6e4:	18bee316 	blt	r3,r2,2f274 <__alt_data_end+0xf802f274>
   2f6e8:	8824977a 	slli	r18,r17,29
   2f6ec:	4010d0fa 	srli	r8,r8,3
   2f6f0:	8822927a 	slli	r17,r17,9
   2f6f4:	1081ffcc 	andi	r2,r2,2047
   2f6f8:	9224b03a 	or	r18,r18,r8
   2f6fc:	880ad33a 	srli	r5,r17,12
   2f700:	98c0004c 	andi	r3,r19,1
   2f704:	003edf06 	br	2f284 <__alt_data_end+0xf802f284>
   2f708:	8080022c 	andhi	r2,r16,8
   2f70c:	10001226 	beq	r2,zero,2f758 <__divdf3+0x650>
   2f710:	8880022c 	andhi	r2,r17,8
   2f714:	1000101e 	bne	r2,zero,2f758 <__divdf3+0x650>
   2f718:	00800434 	movhi	r2,16
   2f71c:	89400234 	orhi	r5,r17,8
   2f720:	10bfffc4 	addi	r2,r2,-1
   2f724:	b007883a 	mov	r3,r22
   2f728:	288a703a 	and	r5,r5,r2
   2f72c:	4025883a 	mov	r18,r8
   2f730:	003f3106 	br	2f3f8 <__alt_data_end+0xf802f3f8>
   2f734:	008000c4 	movi	r2,3
   2f738:	3880a626 	beq	r7,r2,2f9d4 <__divdf3+0x8cc>
   2f73c:	00800044 	movi	r2,1
   2f740:	3880521e 	bne	r7,r2,2f88c <__divdf3+0x784>
   2f744:	b807883a 	mov	r3,r23
   2f748:	0005883a 	mov	r2,zero
   2f74c:	000b883a 	mov	r5,zero
   2f750:	0025883a 	mov	r18,zero
   2f754:	003ecb06 	br	2f284 <__alt_data_end+0xf802f284>
   2f758:	00800434 	movhi	r2,16
   2f75c:	81400234 	orhi	r5,r16,8
   2f760:	10bfffc4 	addi	r2,r2,-1
   2f764:	a007883a 	mov	r3,r20
   2f768:	288a703a 	and	r5,r5,r2
   2f76c:	003f2206 	br	2f3f8 <__alt_data_end+0xf802f3f8>
   2f770:	183fca26 	beq	r3,zero,2f69c <__alt_data_end+0xf802f69c>
   2f774:	e5ef883a 	add	r23,fp,r23
   2f778:	40bfffc4 	addi	r2,r8,-1
   2f77c:	bf00392e 	bgeu	r23,fp,2f864 <__divdf3+0x75c>
   2f780:	1011883a 	mov	r8,r2
   2f784:	ba7fc41e 	bne	r23,r9,2f698 <__alt_data_end+0xf802f698>
   2f788:	b0ffc31e 	bne	r22,r3,2f698 <__alt_data_end+0xf802f698>
   2f78c:	003fc306 	br	2f69c <__alt_data_end+0xf802f69c>
   2f790:	143ff604 	addi	r16,r2,-40
   2f794:	9c20983a 	sll	r16,r19,r16
   2f798:	0025883a 	mov	r18,zero
   2f79c:	003ee206 	br	2f328 <__alt_data_end+0xf802f328>
   2f7a0:	d9800315 	stw	r6,12(sp)
   2f7a4:	d9c00215 	stw	r7,8(sp)
   2f7a8:	0030e600 	call	30e60 <__clzsi2>
   2f7ac:	10800804 	addi	r2,r2,32
   2f7b0:	d9c00217 	ldw	r7,8(sp)
   2f7b4:	d9800317 	ldw	r6,12(sp)
   2f7b8:	003ed106 	br	2f300 <__alt_data_end+0xf802f300>
   2f7bc:	147ff604 	addi	r17,r2,-40
   2f7c0:	3462983a 	sll	r17,r6,r17
   2f7c4:	0011883a 	mov	r8,zero
   2f7c8:	003ef506 	br	2f3a0 <__alt_data_end+0xf802f3a0>
   2f7cc:	3009883a 	mov	r4,r6
   2f7d0:	d9800315 	stw	r6,12(sp)
   2f7d4:	da400115 	stw	r9,4(sp)
   2f7d8:	0030e600 	call	30e60 <__clzsi2>
   2f7dc:	10800804 	addi	r2,r2,32
   2f7e0:	da400117 	ldw	r9,4(sp)
   2f7e4:	d9800317 	ldw	r6,12(sp)
   2f7e8:	003ee306 	br	2f378 <__alt_data_end+0xf802f378>
   2f7ec:	85a1883a 	add	r16,r16,r22
   2f7f0:	8585803a 	cmpltu	r2,r16,r22
   2f7f4:	1705883a 	add	r2,r2,fp
   2f7f8:	14a5883a 	add	r18,r2,r18
   2f7fc:	88bfffc4 	addi	r2,r17,-1
   2f800:	e4800c2e 	bgeu	fp,r18,2f834 <__divdf3+0x72c>
   2f804:	90c03e36 	bltu	r18,r3,2f900 <__divdf3+0x7f8>
   2f808:	1c806926 	beq	r3,r18,2f9b0 <__divdf3+0x8a8>
   2f80c:	90c7c83a 	sub	r3,r18,r3
   2f810:	1023883a 	mov	r17,r2
   2f814:	003f5206 	br	2f560 <__alt_data_end+0xf802f560>
   2f818:	923f0436 	bltu	r18,r8,2f42c <__alt_data_end+0xf802f42c>
   2f81c:	800897fa 	slli	r4,r16,31
   2f820:	9004d07a 	srli	r2,r18,1
   2f824:	8006d07a 	srli	r3,r16,1
   2f828:	902097fa 	slli	r16,r18,31
   2f82c:	20a4b03a 	or	r18,r4,r2
   2f830:	003f0106 	br	2f438 <__alt_data_end+0xf802f438>
   2f834:	e4bff51e 	bne	fp,r18,2f80c <__alt_data_end+0xf802f80c>
   2f838:	85bff22e 	bgeu	r16,r22,2f804 <__alt_data_end+0xf802f804>
   2f83c:	e0c7c83a 	sub	r3,fp,r3
   2f840:	1023883a 	mov	r17,r2
   2f844:	003f4606 	br	2f560 <__alt_data_end+0xf802f560>
   2f848:	100f883a 	mov	r7,r2
   2f84c:	003f2b06 	br	2f4fc <__alt_data_end+0xf802f4fc>
   2f850:	180d883a 	mov	r6,r3
   2f854:	003f1306 	br	2f4a4 <__alt_data_end+0xf802f4a4>
   2f858:	813fe436 	bltu	r16,r4,2f7ec <__alt_data_end+0xf802f7ec>
   2f85c:	0007883a 	mov	r3,zero
   2f860:	003f3f06 	br	2f560 <__alt_data_end+0xf802f560>
   2f864:	ba402c36 	bltu	r23,r9,2f918 <__divdf3+0x810>
   2f868:	4dc05426 	beq	r9,r23,2f9bc <__divdf3+0x8b4>
   2f86c:	1011883a 	mov	r8,r2
   2f870:	003f8906 	br	2f698 <__alt_data_end+0xf802f698>
   2f874:	023fffc4 	movi	r8,-1
   2f878:	003f8806 	br	2f69c <__alt_data_end+0xf802f69c>
   2f87c:	1811883a 	mov	r8,r3
   2f880:	003f5406 	br	2f5d4 <__alt_data_end+0xf802f5d4>
   2f884:	1025883a 	mov	r18,r2
   2f888:	003f6d06 	br	2f640 <__alt_data_end+0xf802f640>
   2f88c:	b827883a 	mov	r19,r23
   2f890:	003f8206 	br	2f69c <__alt_data_end+0xf802f69c>
   2f894:	010007c4 	movi	r4,31
   2f898:	20c02616 	blt	r4,r3,2f934 <__divdf3+0x82c>
   2f89c:	00800804 	movi	r2,32
   2f8a0:	10c5c83a 	sub	r2,r2,r3
   2f8a4:	888a983a 	sll	r5,r17,r2
   2f8a8:	40c8d83a 	srl	r4,r8,r3
   2f8ac:	4084983a 	sll	r2,r8,r2
   2f8b0:	88e2d83a 	srl	r17,r17,r3
   2f8b4:	2906b03a 	or	r3,r5,r4
   2f8b8:	1004c03a 	cmpne	r2,r2,zero
   2f8bc:	1886b03a 	or	r3,r3,r2
   2f8c0:	188001cc 	andi	r2,r3,7
   2f8c4:	10000726 	beq	r2,zero,2f8e4 <__divdf3+0x7dc>
   2f8c8:	188003cc 	andi	r2,r3,15
   2f8cc:	01000104 	movi	r4,4
   2f8d0:	11000426 	beq	r2,r4,2f8e4 <__divdf3+0x7dc>
   2f8d4:	1805883a 	mov	r2,r3
   2f8d8:	10c00104 	addi	r3,r2,4
   2f8dc:	1885803a 	cmpltu	r2,r3,r2
   2f8e0:	88a3883a 	add	r17,r17,r2
   2f8e4:	8880202c 	andhi	r2,r17,128
   2f8e8:	10002726 	beq	r2,zero,2f988 <__divdf3+0x880>
   2f8ec:	98c0004c 	andi	r3,r19,1
   2f8f0:	00800044 	movi	r2,1
   2f8f4:	000b883a 	mov	r5,zero
   2f8f8:	0025883a 	mov	r18,zero
   2f8fc:	003e6106 	br	2f284 <__alt_data_end+0xf802f284>
   2f900:	85a1883a 	add	r16,r16,r22
   2f904:	8585803a 	cmpltu	r2,r16,r22
   2f908:	1705883a 	add	r2,r2,fp
   2f90c:	14a5883a 	add	r18,r2,r18
   2f910:	8c7fff84 	addi	r17,r17,-2
   2f914:	003f1106 	br	2f55c <__alt_data_end+0xf802f55c>
   2f918:	b589883a 	add	r4,r22,r22
   2f91c:	25ad803a 	cmpltu	r22,r4,r22
   2f920:	b739883a 	add	fp,r22,fp
   2f924:	40bfff84 	addi	r2,r8,-2
   2f928:	bf2f883a 	add	r23,r23,fp
   2f92c:	202d883a 	mov	r22,r4
   2f930:	003f9306 	br	2f780 <__alt_data_end+0xf802f780>
   2f934:	013ff844 	movi	r4,-31
   2f938:	2085c83a 	sub	r2,r4,r2
   2f93c:	8888d83a 	srl	r4,r17,r2
   2f940:	00800804 	movi	r2,32
   2f944:	18802126 	beq	r3,r2,2f9cc <__divdf3+0x8c4>
   2f948:	00801004 	movi	r2,64
   2f94c:	10c5c83a 	sub	r2,r2,r3
   2f950:	8884983a 	sll	r2,r17,r2
   2f954:	1204b03a 	or	r2,r2,r8
   2f958:	1004c03a 	cmpne	r2,r2,zero
   2f95c:	2084b03a 	or	r2,r4,r2
   2f960:	144001cc 	andi	r17,r2,7
   2f964:	88000d1e 	bne	r17,zero,2f99c <__divdf3+0x894>
   2f968:	000b883a 	mov	r5,zero
   2f96c:	1024d0fa 	srli	r18,r2,3
   2f970:	98c0004c 	andi	r3,r19,1
   2f974:	0005883a 	mov	r2,zero
   2f978:	9464b03a 	or	r18,r18,r17
   2f97c:	003e4106 	br	2f284 <__alt_data_end+0xf802f284>
   2f980:	1007883a 	mov	r3,r2
   2f984:	0023883a 	mov	r17,zero
   2f988:	880a927a 	slli	r5,r17,9
   2f98c:	1805883a 	mov	r2,r3
   2f990:	8822977a 	slli	r17,r17,29
   2f994:	280ad33a 	srli	r5,r5,12
   2f998:	003ff406 	br	2f96c <__alt_data_end+0xf802f96c>
   2f99c:	10c003cc 	andi	r3,r2,15
   2f9a0:	01000104 	movi	r4,4
   2f9a4:	193ff626 	beq	r3,r4,2f980 <__alt_data_end+0xf802f980>
   2f9a8:	0023883a 	mov	r17,zero
   2f9ac:	003fca06 	br	2f8d8 <__alt_data_end+0xf802f8d8>
   2f9b0:	813fd336 	bltu	r16,r4,2f900 <__alt_data_end+0xf802f900>
   2f9b4:	1023883a 	mov	r17,r2
   2f9b8:	003fa806 	br	2f85c <__alt_data_end+0xf802f85c>
   2f9bc:	b0ffd636 	bltu	r22,r3,2f918 <__alt_data_end+0xf802f918>
   2f9c0:	1011883a 	mov	r8,r2
   2f9c4:	b0ff341e 	bne	r22,r3,2f698 <__alt_data_end+0xf802f698>
   2f9c8:	003f3406 	br	2f69c <__alt_data_end+0xf802f69c>
   2f9cc:	0005883a 	mov	r2,zero
   2f9d0:	003fe006 	br	2f954 <__alt_data_end+0xf802f954>
   2f9d4:	00800434 	movhi	r2,16
   2f9d8:	89400234 	orhi	r5,r17,8
   2f9dc:	10bfffc4 	addi	r2,r2,-1
   2f9e0:	b807883a 	mov	r3,r23
   2f9e4:	288a703a 	and	r5,r5,r2
   2f9e8:	4025883a 	mov	r18,r8
   2f9ec:	003e8206 	br	2f3f8 <__alt_data_end+0xf802f3f8>

0002f9f0 <__eqdf2>:
   2f9f0:	2804d53a 	srli	r2,r5,20
   2f9f4:	3806d53a 	srli	r3,r7,20
   2f9f8:	02000434 	movhi	r8,16
   2f9fc:	423fffc4 	addi	r8,r8,-1
   2fa00:	1081ffcc 	andi	r2,r2,2047
   2fa04:	0281ffc4 	movi	r10,2047
   2fa08:	2a12703a 	and	r9,r5,r8
   2fa0c:	18c1ffcc 	andi	r3,r3,2047
   2fa10:	3a10703a 	and	r8,r7,r8
   2fa14:	280ad7fa 	srli	r5,r5,31
   2fa18:	380ed7fa 	srli	r7,r7,31
   2fa1c:	12801026 	beq	r2,r10,2fa60 <__eqdf2+0x70>
   2fa20:	0281ffc4 	movi	r10,2047
   2fa24:	1a800a26 	beq	r3,r10,2fa50 <__eqdf2+0x60>
   2fa28:	10c00226 	beq	r2,r3,2fa34 <__eqdf2+0x44>
   2fa2c:	00800044 	movi	r2,1
   2fa30:	f800283a 	ret
   2fa34:	4a3ffd1e 	bne	r9,r8,2fa2c <__alt_data_end+0xf802fa2c>
   2fa38:	21bffc1e 	bne	r4,r6,2fa2c <__alt_data_end+0xf802fa2c>
   2fa3c:	29c00c26 	beq	r5,r7,2fa70 <__eqdf2+0x80>
   2fa40:	103ffa1e 	bne	r2,zero,2fa2c <__alt_data_end+0xf802fa2c>
   2fa44:	2244b03a 	or	r2,r4,r9
   2fa48:	1004c03a 	cmpne	r2,r2,zero
   2fa4c:	f800283a 	ret
   2fa50:	3214b03a 	or	r10,r6,r8
   2fa54:	503ff426 	beq	r10,zero,2fa28 <__alt_data_end+0xf802fa28>
   2fa58:	00800044 	movi	r2,1
   2fa5c:	f800283a 	ret
   2fa60:	2254b03a 	or	r10,r4,r9
   2fa64:	503fee26 	beq	r10,zero,2fa20 <__alt_data_end+0xf802fa20>
   2fa68:	00800044 	movi	r2,1
   2fa6c:	f800283a 	ret
   2fa70:	0005883a 	mov	r2,zero
   2fa74:	f800283a 	ret

0002fa78 <__gedf2>:
   2fa78:	2804d53a 	srli	r2,r5,20
   2fa7c:	3806d53a 	srli	r3,r7,20
   2fa80:	02000434 	movhi	r8,16
   2fa84:	423fffc4 	addi	r8,r8,-1
   2fa88:	1081ffcc 	andi	r2,r2,2047
   2fa8c:	0241ffc4 	movi	r9,2047
   2fa90:	2a14703a 	and	r10,r5,r8
   2fa94:	18c1ffcc 	andi	r3,r3,2047
   2fa98:	3a10703a 	and	r8,r7,r8
   2fa9c:	280ad7fa 	srli	r5,r5,31
   2faa0:	380ed7fa 	srli	r7,r7,31
   2faa4:	12401d26 	beq	r2,r9,2fb1c <__gedf2+0xa4>
   2faa8:	0241ffc4 	movi	r9,2047
   2faac:	1a401226 	beq	r3,r9,2faf8 <__gedf2+0x80>
   2fab0:	1000081e 	bne	r2,zero,2fad4 <__gedf2+0x5c>
   2fab4:	2296b03a 	or	r11,r4,r10
   2fab8:	5813003a 	cmpeq	r9,r11,zero
   2fabc:	1800091e 	bne	r3,zero,2fae4 <__gedf2+0x6c>
   2fac0:	3218b03a 	or	r12,r6,r8
   2fac4:	6000071e 	bne	r12,zero,2fae4 <__gedf2+0x6c>
   2fac8:	0005883a 	mov	r2,zero
   2facc:	5800101e 	bne	r11,zero,2fb10 <__gedf2+0x98>
   2fad0:	f800283a 	ret
   2fad4:	18000c1e 	bne	r3,zero,2fb08 <__gedf2+0x90>
   2fad8:	3212b03a 	or	r9,r6,r8
   2fadc:	48000c26 	beq	r9,zero,2fb10 <__gedf2+0x98>
   2fae0:	0013883a 	mov	r9,zero
   2fae4:	39c03fcc 	andi	r7,r7,255
   2fae8:	48000826 	beq	r9,zero,2fb0c <__gedf2+0x94>
   2faec:	38000926 	beq	r7,zero,2fb14 <__gedf2+0x9c>
   2faf0:	00800044 	movi	r2,1
   2faf4:	f800283a 	ret
   2faf8:	3212b03a 	or	r9,r6,r8
   2fafc:	483fec26 	beq	r9,zero,2fab0 <__alt_data_end+0xf802fab0>
   2fb00:	00bfff84 	movi	r2,-2
   2fb04:	f800283a 	ret
   2fb08:	39c03fcc 	andi	r7,r7,255
   2fb0c:	29c00626 	beq	r5,r7,2fb28 <__gedf2+0xb0>
   2fb10:	283ff726 	beq	r5,zero,2faf0 <__alt_data_end+0xf802faf0>
   2fb14:	00bfffc4 	movi	r2,-1
   2fb18:	f800283a 	ret
   2fb1c:	2292b03a 	or	r9,r4,r10
   2fb20:	483fe126 	beq	r9,zero,2faa8 <__alt_data_end+0xf802faa8>
   2fb24:	003ff606 	br	2fb00 <__alt_data_end+0xf802fb00>
   2fb28:	18bff916 	blt	r3,r2,2fb10 <__alt_data_end+0xf802fb10>
   2fb2c:	10c00316 	blt	r2,r3,2fb3c <__gedf2+0xc4>
   2fb30:	42bff736 	bltu	r8,r10,2fb10 <__alt_data_end+0xf802fb10>
   2fb34:	52000326 	beq	r10,r8,2fb44 <__gedf2+0xcc>
   2fb38:	5200042e 	bgeu	r10,r8,2fb4c <__gedf2+0xd4>
   2fb3c:	283fec1e 	bne	r5,zero,2faf0 <__alt_data_end+0xf802faf0>
   2fb40:	003ff406 	br	2fb14 <__alt_data_end+0xf802fb14>
   2fb44:	313ff236 	bltu	r6,r4,2fb10 <__alt_data_end+0xf802fb10>
   2fb48:	21bffc36 	bltu	r4,r6,2fb3c <__alt_data_end+0xf802fb3c>
   2fb4c:	0005883a 	mov	r2,zero
   2fb50:	f800283a 	ret

0002fb54 <__ledf2>:
   2fb54:	2804d53a 	srli	r2,r5,20
   2fb58:	3810d53a 	srli	r8,r7,20
   2fb5c:	00c00434 	movhi	r3,16
   2fb60:	18ffffc4 	addi	r3,r3,-1
   2fb64:	1081ffcc 	andi	r2,r2,2047
   2fb68:	0241ffc4 	movi	r9,2047
   2fb6c:	28d4703a 	and	r10,r5,r3
   2fb70:	4201ffcc 	andi	r8,r8,2047
   2fb74:	38c6703a 	and	r3,r7,r3
   2fb78:	280ad7fa 	srli	r5,r5,31
   2fb7c:	380ed7fa 	srli	r7,r7,31
   2fb80:	12401f26 	beq	r2,r9,2fc00 <__ledf2+0xac>
   2fb84:	0241ffc4 	movi	r9,2047
   2fb88:	42401426 	beq	r8,r9,2fbdc <__ledf2+0x88>
   2fb8c:	1000091e 	bne	r2,zero,2fbb4 <__ledf2+0x60>
   2fb90:	2296b03a 	or	r11,r4,r10
   2fb94:	5813003a 	cmpeq	r9,r11,zero
   2fb98:	29403fcc 	andi	r5,r5,255
   2fb9c:	40000a1e 	bne	r8,zero,2fbc8 <__ledf2+0x74>
   2fba0:	30d8b03a 	or	r12,r6,r3
   2fba4:	6000081e 	bne	r12,zero,2fbc8 <__ledf2+0x74>
   2fba8:	0005883a 	mov	r2,zero
   2fbac:	5800111e 	bne	r11,zero,2fbf4 <__ledf2+0xa0>
   2fbb0:	f800283a 	ret
   2fbb4:	29403fcc 	andi	r5,r5,255
   2fbb8:	40000c1e 	bne	r8,zero,2fbec <__ledf2+0x98>
   2fbbc:	30d2b03a 	or	r9,r6,r3
   2fbc0:	48000c26 	beq	r9,zero,2fbf4 <__ledf2+0xa0>
   2fbc4:	0013883a 	mov	r9,zero
   2fbc8:	39c03fcc 	andi	r7,r7,255
   2fbcc:	48000826 	beq	r9,zero,2fbf0 <__ledf2+0x9c>
   2fbd0:	38001126 	beq	r7,zero,2fc18 <__ledf2+0xc4>
   2fbd4:	00800044 	movi	r2,1
   2fbd8:	f800283a 	ret
   2fbdc:	30d2b03a 	or	r9,r6,r3
   2fbe0:	483fea26 	beq	r9,zero,2fb8c <__alt_data_end+0xf802fb8c>
   2fbe4:	00800084 	movi	r2,2
   2fbe8:	f800283a 	ret
   2fbec:	39c03fcc 	andi	r7,r7,255
   2fbf0:	39400726 	beq	r7,r5,2fc10 <__ledf2+0xbc>
   2fbf4:	2800081e 	bne	r5,zero,2fc18 <__ledf2+0xc4>
   2fbf8:	00800044 	movi	r2,1
   2fbfc:	f800283a 	ret
   2fc00:	2292b03a 	or	r9,r4,r10
   2fc04:	483fdf26 	beq	r9,zero,2fb84 <__alt_data_end+0xf802fb84>
   2fc08:	00800084 	movi	r2,2
   2fc0c:	f800283a 	ret
   2fc10:	4080030e 	bge	r8,r2,2fc20 <__ledf2+0xcc>
   2fc14:	383fef26 	beq	r7,zero,2fbd4 <__alt_data_end+0xf802fbd4>
   2fc18:	00bfffc4 	movi	r2,-1
   2fc1c:	f800283a 	ret
   2fc20:	123feb16 	blt	r2,r8,2fbd0 <__alt_data_end+0xf802fbd0>
   2fc24:	1abff336 	bltu	r3,r10,2fbf4 <__alt_data_end+0xf802fbf4>
   2fc28:	50c00326 	beq	r10,r3,2fc38 <__ledf2+0xe4>
   2fc2c:	50c0042e 	bgeu	r10,r3,2fc40 <__ledf2+0xec>
   2fc30:	283fe81e 	bne	r5,zero,2fbd4 <__alt_data_end+0xf802fbd4>
   2fc34:	003ff806 	br	2fc18 <__alt_data_end+0xf802fc18>
   2fc38:	313fee36 	bltu	r6,r4,2fbf4 <__alt_data_end+0xf802fbf4>
   2fc3c:	21bffc36 	bltu	r4,r6,2fc30 <__alt_data_end+0xf802fc30>
   2fc40:	0005883a 	mov	r2,zero
   2fc44:	f800283a 	ret

0002fc48 <__muldf3>:
   2fc48:	defff304 	addi	sp,sp,-52
   2fc4c:	2804d53a 	srli	r2,r5,20
   2fc50:	dd800915 	stw	r22,36(sp)
   2fc54:	282cd7fa 	srli	r22,r5,31
   2fc58:	dc000315 	stw	r16,12(sp)
   2fc5c:	04000434 	movhi	r16,16
   2fc60:	dd400815 	stw	r21,32(sp)
   2fc64:	dc800515 	stw	r18,20(sp)
   2fc68:	843fffc4 	addi	r16,r16,-1
   2fc6c:	dfc00c15 	stw	ra,48(sp)
   2fc70:	df000b15 	stw	fp,44(sp)
   2fc74:	ddc00a15 	stw	r23,40(sp)
   2fc78:	dd000715 	stw	r20,28(sp)
   2fc7c:	dcc00615 	stw	r19,24(sp)
   2fc80:	dc400415 	stw	r17,16(sp)
   2fc84:	1481ffcc 	andi	r18,r2,2047
   2fc88:	2c20703a 	and	r16,r5,r16
   2fc8c:	b02b883a 	mov	r21,r22
   2fc90:	b2403fcc 	andi	r9,r22,255
   2fc94:	90006026 	beq	r18,zero,2fe18 <__muldf3+0x1d0>
   2fc98:	0081ffc4 	movi	r2,2047
   2fc9c:	2029883a 	mov	r20,r4
   2fca0:	90803626 	beq	r18,r2,2fd7c <__muldf3+0x134>
   2fca4:	80800434 	orhi	r2,r16,16
   2fca8:	100490fa 	slli	r2,r2,3
   2fcac:	2020d77a 	srli	r16,r4,29
   2fcb0:	202890fa 	slli	r20,r4,3
   2fcb4:	94bf0044 	addi	r18,r18,-1023
   2fcb8:	80a0b03a 	or	r16,r16,r2
   2fcbc:	0027883a 	mov	r19,zero
   2fcc0:	0039883a 	mov	fp,zero
   2fcc4:	3804d53a 	srli	r2,r7,20
   2fcc8:	382ed7fa 	srli	r23,r7,31
   2fccc:	04400434 	movhi	r17,16
   2fcd0:	8c7fffc4 	addi	r17,r17,-1
   2fcd4:	1081ffcc 	andi	r2,r2,2047
   2fcd8:	3011883a 	mov	r8,r6
   2fcdc:	3c62703a 	and	r17,r7,r17
   2fce0:	ba803fcc 	andi	r10,r23,255
   2fce4:	10006d26 	beq	r2,zero,2fe9c <__muldf3+0x254>
   2fce8:	00c1ffc4 	movi	r3,2047
   2fcec:	10c06526 	beq	r2,r3,2fe84 <__muldf3+0x23c>
   2fcf0:	88c00434 	orhi	r3,r17,16
   2fcf4:	180690fa 	slli	r3,r3,3
   2fcf8:	3022d77a 	srli	r17,r6,29
   2fcfc:	301090fa 	slli	r8,r6,3
   2fd00:	10bf0044 	addi	r2,r2,-1023
   2fd04:	88e2b03a 	or	r17,r17,r3
   2fd08:	000b883a 	mov	r5,zero
   2fd0c:	9085883a 	add	r2,r18,r2
   2fd10:	2cc8b03a 	or	r4,r5,r19
   2fd14:	00c003c4 	movi	r3,15
   2fd18:	bdacf03a 	xor	r22,r23,r22
   2fd1c:	12c00044 	addi	r11,r2,1
   2fd20:	19009936 	bltu	r3,r4,2ff88 <__muldf3+0x340>
   2fd24:	200890ba 	slli	r4,r4,2
   2fd28:	00c000f4 	movhi	r3,3
   2fd2c:	18ff4f04 	addi	r3,r3,-708
   2fd30:	20c9883a 	add	r4,r4,r3
   2fd34:	20c00017 	ldw	r3,0(r4)
   2fd38:	1800683a 	jmp	r3
   2fd3c:	0002ff88 	cmpgei	zero,zero,3070
   2fd40:	0002fd9c 	xori	zero,zero,3062
   2fd44:	0002fd9c 	xori	zero,zero,3062
   2fd48:	0002fd98 	cmpnei	zero,zero,3062
   2fd4c:	0002ff64 	muli	zero,zero,3069
   2fd50:	0002ff64 	muli	zero,zero,3069
   2fd54:	0002ff4c 	andi	zero,zero,3069
   2fd58:	0002fd98 	cmpnei	zero,zero,3062
   2fd5c:	0002ff64 	muli	zero,zero,3069
   2fd60:	0002ff4c 	andi	zero,zero,3069
   2fd64:	0002ff64 	muli	zero,zero,3069
   2fd68:	0002fd98 	cmpnei	zero,zero,3062
   2fd6c:	0002ff74 	movhi	zero,3069
   2fd70:	0002ff74 	movhi	zero,3069
   2fd74:	0002ff74 	movhi	zero,3069
   2fd78:	00030190 	cmplti	zero,zero,3078
   2fd7c:	2404b03a 	or	r2,r4,r16
   2fd80:	10006f1e 	bne	r2,zero,2ff40 <__muldf3+0x2f8>
   2fd84:	04c00204 	movi	r19,8
   2fd88:	0021883a 	mov	r16,zero
   2fd8c:	0029883a 	mov	r20,zero
   2fd90:	07000084 	movi	fp,2
   2fd94:	003fcb06 	br	2fcc4 <__alt_data_end+0xf802fcc4>
   2fd98:	502d883a 	mov	r22,r10
   2fd9c:	00800084 	movi	r2,2
   2fda0:	28805726 	beq	r5,r2,2ff00 <__muldf3+0x2b8>
   2fda4:	008000c4 	movi	r2,3
   2fda8:	28816626 	beq	r5,r2,30344 <__muldf3+0x6fc>
   2fdac:	00800044 	movi	r2,1
   2fdb0:	2881411e 	bne	r5,r2,302b8 <__muldf3+0x670>
   2fdb4:	b02b883a 	mov	r21,r22
   2fdb8:	0005883a 	mov	r2,zero
   2fdbc:	000b883a 	mov	r5,zero
   2fdc0:	0029883a 	mov	r20,zero
   2fdc4:	1004953a 	slli	r2,r2,20
   2fdc8:	a8c03fcc 	andi	r3,r21,255
   2fdcc:	04400434 	movhi	r17,16
   2fdd0:	8c7fffc4 	addi	r17,r17,-1
   2fdd4:	180697fa 	slli	r3,r3,31
   2fdd8:	2c4a703a 	and	r5,r5,r17
   2fddc:	288ab03a 	or	r5,r5,r2
   2fde0:	28c6b03a 	or	r3,r5,r3
   2fde4:	a005883a 	mov	r2,r20
   2fde8:	dfc00c17 	ldw	ra,48(sp)
   2fdec:	df000b17 	ldw	fp,44(sp)
   2fdf0:	ddc00a17 	ldw	r23,40(sp)
   2fdf4:	dd800917 	ldw	r22,36(sp)
   2fdf8:	dd400817 	ldw	r21,32(sp)
   2fdfc:	dd000717 	ldw	r20,28(sp)
   2fe00:	dcc00617 	ldw	r19,24(sp)
   2fe04:	dc800517 	ldw	r18,20(sp)
   2fe08:	dc400417 	ldw	r17,16(sp)
   2fe0c:	dc000317 	ldw	r16,12(sp)
   2fe10:	dec00d04 	addi	sp,sp,52
   2fe14:	f800283a 	ret
   2fe18:	2404b03a 	or	r2,r4,r16
   2fe1c:	2027883a 	mov	r19,r4
   2fe20:	10004226 	beq	r2,zero,2ff2c <__muldf3+0x2e4>
   2fe24:	8000fc26 	beq	r16,zero,30218 <__muldf3+0x5d0>
   2fe28:	8009883a 	mov	r4,r16
   2fe2c:	d9800215 	stw	r6,8(sp)
   2fe30:	d9c00015 	stw	r7,0(sp)
   2fe34:	da400115 	stw	r9,4(sp)
   2fe38:	0030e600 	call	30e60 <__clzsi2>
   2fe3c:	d9800217 	ldw	r6,8(sp)
   2fe40:	d9c00017 	ldw	r7,0(sp)
   2fe44:	da400117 	ldw	r9,4(sp)
   2fe48:	113ffd44 	addi	r4,r2,-11
   2fe4c:	00c00704 	movi	r3,28
   2fe50:	1900ed16 	blt	r3,r4,30208 <__muldf3+0x5c0>
   2fe54:	00c00744 	movi	r3,29
   2fe58:	147ffe04 	addi	r17,r2,-8
   2fe5c:	1907c83a 	sub	r3,r3,r4
   2fe60:	8460983a 	sll	r16,r16,r17
   2fe64:	98c6d83a 	srl	r3,r19,r3
   2fe68:	9c68983a 	sll	r20,r19,r17
   2fe6c:	1c20b03a 	or	r16,r3,r16
   2fe70:	1080fcc4 	addi	r2,r2,1011
   2fe74:	00a5c83a 	sub	r18,zero,r2
   2fe78:	0027883a 	mov	r19,zero
   2fe7c:	0039883a 	mov	fp,zero
   2fe80:	003f9006 	br	2fcc4 <__alt_data_end+0xf802fcc4>
   2fe84:	3446b03a 	or	r3,r6,r17
   2fe88:	1800261e 	bne	r3,zero,2ff24 <__muldf3+0x2dc>
   2fe8c:	0023883a 	mov	r17,zero
   2fe90:	0011883a 	mov	r8,zero
   2fe94:	01400084 	movi	r5,2
   2fe98:	003f9c06 	br	2fd0c <__alt_data_end+0xf802fd0c>
   2fe9c:	3446b03a 	or	r3,r6,r17
   2fea0:	18001c26 	beq	r3,zero,2ff14 <__muldf3+0x2cc>
   2fea4:	8800ce26 	beq	r17,zero,301e0 <__muldf3+0x598>
   2fea8:	8809883a 	mov	r4,r17
   2feac:	d9800215 	stw	r6,8(sp)
   2feb0:	da400115 	stw	r9,4(sp)
   2feb4:	da800015 	stw	r10,0(sp)
   2feb8:	0030e600 	call	30e60 <__clzsi2>
   2febc:	d9800217 	ldw	r6,8(sp)
   2fec0:	da400117 	ldw	r9,4(sp)
   2fec4:	da800017 	ldw	r10,0(sp)
   2fec8:	113ffd44 	addi	r4,r2,-11
   2fecc:	00c00704 	movi	r3,28
   2fed0:	1900bf16 	blt	r3,r4,301d0 <__muldf3+0x588>
   2fed4:	00c00744 	movi	r3,29
   2fed8:	123ffe04 	addi	r8,r2,-8
   2fedc:	1907c83a 	sub	r3,r3,r4
   2fee0:	8a22983a 	sll	r17,r17,r8
   2fee4:	30c6d83a 	srl	r3,r6,r3
   2fee8:	3210983a 	sll	r8,r6,r8
   2feec:	1c62b03a 	or	r17,r3,r17
   2fef0:	1080fcc4 	addi	r2,r2,1011
   2fef4:	0085c83a 	sub	r2,zero,r2
   2fef8:	000b883a 	mov	r5,zero
   2fefc:	003f8306 	br	2fd0c <__alt_data_end+0xf802fd0c>
   2ff00:	b02b883a 	mov	r21,r22
   2ff04:	0081ffc4 	movi	r2,2047
   2ff08:	000b883a 	mov	r5,zero
   2ff0c:	0029883a 	mov	r20,zero
   2ff10:	003fac06 	br	2fdc4 <__alt_data_end+0xf802fdc4>
   2ff14:	0023883a 	mov	r17,zero
   2ff18:	0011883a 	mov	r8,zero
   2ff1c:	01400044 	movi	r5,1
   2ff20:	003f7a06 	br	2fd0c <__alt_data_end+0xf802fd0c>
   2ff24:	014000c4 	movi	r5,3
   2ff28:	003f7806 	br	2fd0c <__alt_data_end+0xf802fd0c>
   2ff2c:	04c00104 	movi	r19,4
   2ff30:	0021883a 	mov	r16,zero
   2ff34:	0029883a 	mov	r20,zero
   2ff38:	07000044 	movi	fp,1
   2ff3c:	003f6106 	br	2fcc4 <__alt_data_end+0xf802fcc4>
   2ff40:	04c00304 	movi	r19,12
   2ff44:	070000c4 	movi	fp,3
   2ff48:	003f5e06 	br	2fcc4 <__alt_data_end+0xf802fcc4>
   2ff4c:	01400434 	movhi	r5,16
   2ff50:	002b883a 	mov	r21,zero
   2ff54:	297fffc4 	addi	r5,r5,-1
   2ff58:	053fffc4 	movi	r20,-1
   2ff5c:	0081ffc4 	movi	r2,2047
   2ff60:	003f9806 	br	2fdc4 <__alt_data_end+0xf802fdc4>
   2ff64:	8023883a 	mov	r17,r16
   2ff68:	a011883a 	mov	r8,r20
   2ff6c:	e00b883a 	mov	r5,fp
   2ff70:	003f8a06 	br	2fd9c <__alt_data_end+0xf802fd9c>
   2ff74:	8023883a 	mov	r17,r16
   2ff78:	a011883a 	mov	r8,r20
   2ff7c:	482d883a 	mov	r22,r9
   2ff80:	e00b883a 	mov	r5,fp
   2ff84:	003f8506 	br	2fd9c <__alt_data_end+0xf802fd9c>
   2ff88:	a00ad43a 	srli	r5,r20,16
   2ff8c:	401ad43a 	srli	r13,r8,16
   2ff90:	a53fffcc 	andi	r20,r20,65535
   2ff94:	423fffcc 	andi	r8,r8,65535
   2ff98:	4519383a 	mul	r12,r8,r20
   2ff9c:	4147383a 	mul	r3,r8,r5
   2ffa0:	6d09383a 	mul	r4,r13,r20
   2ffa4:	600cd43a 	srli	r6,r12,16
   2ffa8:	2b5d383a 	mul	r14,r5,r13
   2ffac:	20c9883a 	add	r4,r4,r3
   2ffb0:	310d883a 	add	r6,r6,r4
   2ffb4:	30c0022e 	bgeu	r6,r3,2ffc0 <__muldf3+0x378>
   2ffb8:	00c00074 	movhi	r3,1
   2ffbc:	70dd883a 	add	r14,r14,r3
   2ffc0:	8826d43a 	srli	r19,r17,16
   2ffc4:	8bffffcc 	andi	r15,r17,65535
   2ffc8:	7d23383a 	mul	r17,r15,r20
   2ffcc:	7949383a 	mul	r4,r15,r5
   2ffd0:	9d29383a 	mul	r20,r19,r20
   2ffd4:	8814d43a 	srli	r10,r17,16
   2ffd8:	3012943a 	slli	r9,r6,16
   2ffdc:	a129883a 	add	r20,r20,r4
   2ffe0:	633fffcc 	andi	r12,r12,65535
   2ffe4:	5515883a 	add	r10,r10,r20
   2ffe8:	3006d43a 	srli	r3,r6,16
   2ffec:	4b13883a 	add	r9,r9,r12
   2fff0:	2ccb383a 	mul	r5,r5,r19
   2fff4:	5100022e 	bgeu	r10,r4,30000 <__muldf3+0x3b8>
   2fff8:	01000074 	movhi	r4,1
   2fffc:	290b883a 	add	r5,r5,r4
   30000:	802ad43a 	srli	r21,r16,16
   30004:	843fffcc 	andi	r16,r16,65535
   30008:	440d383a 	mul	r6,r8,r16
   3000c:	4565383a 	mul	r18,r8,r21
   30010:	8349383a 	mul	r4,r16,r13
   30014:	500e943a 	slli	r7,r10,16
   30018:	3010d43a 	srli	r8,r6,16
   3001c:	5028d43a 	srli	r20,r10,16
   30020:	2489883a 	add	r4,r4,r18
   30024:	8abfffcc 	andi	r10,r17,65535
   30028:	3a95883a 	add	r10,r7,r10
   3002c:	4119883a 	add	r12,r8,r4
   30030:	a169883a 	add	r20,r20,r5
   30034:	1a87883a 	add	r3,r3,r10
   30038:	6d5b383a 	mul	r13,r13,r21
   3003c:	6480022e 	bgeu	r12,r18,30048 <__muldf3+0x400>
   30040:	01000074 	movhi	r4,1
   30044:	691b883a 	add	r13,r13,r4
   30048:	7c25383a 	mul	r18,r15,r16
   3004c:	7d4b383a 	mul	r5,r15,r21
   30050:	84cf383a 	mul	r7,r16,r19
   30054:	901ed43a 	srli	r15,r18,16
   30058:	6008d43a 	srli	r4,r12,16
   3005c:	6010943a 	slli	r8,r12,16
   30060:	394f883a 	add	r7,r7,r5
   30064:	333fffcc 	andi	r12,r6,65535
   30068:	79df883a 	add	r15,r15,r7
   3006c:	235b883a 	add	r13,r4,r13
   30070:	9d63383a 	mul	r17,r19,r21
   30074:	4309883a 	add	r4,r8,r12
   30078:	7940022e 	bgeu	r15,r5,30084 <__muldf3+0x43c>
   3007c:	01400074 	movhi	r5,1
   30080:	8963883a 	add	r17,r17,r5
   30084:	780a943a 	slli	r5,r15,16
   30088:	91bfffcc 	andi	r6,r18,65535
   3008c:	70c7883a 	add	r3,r14,r3
   30090:	298d883a 	add	r6,r5,r6
   30094:	1a8f803a 	cmpltu	r7,r3,r10
   30098:	350b883a 	add	r5,r6,r20
   3009c:	20c7883a 	add	r3,r4,r3
   300a0:	3955883a 	add	r10,r7,r5
   300a4:	1909803a 	cmpltu	r4,r3,r4
   300a8:	6a91883a 	add	r8,r13,r10
   300ac:	780cd43a 	srli	r6,r15,16
   300b0:	2219883a 	add	r12,r4,r8
   300b4:	2d0b803a 	cmpltu	r5,r5,r20
   300b8:	51cf803a 	cmpltu	r7,r10,r7
   300bc:	29ceb03a 	or	r7,r5,r7
   300c0:	4351803a 	cmpltu	r8,r8,r13
   300c4:	610b803a 	cmpltu	r5,r12,r4
   300c8:	4148b03a 	or	r4,r8,r5
   300cc:	398f883a 	add	r7,r7,r6
   300d0:	3909883a 	add	r4,r7,r4
   300d4:	1810927a 	slli	r8,r3,9
   300d8:	2449883a 	add	r4,r4,r17
   300dc:	2008927a 	slli	r4,r4,9
   300e0:	6022d5fa 	srli	r17,r12,23
   300e4:	1806d5fa 	srli	r3,r3,23
   300e8:	4252b03a 	or	r9,r8,r9
   300ec:	600a927a 	slli	r5,r12,9
   300f0:	4810c03a 	cmpne	r8,r9,zero
   300f4:	2462b03a 	or	r17,r4,r17
   300f8:	40c6b03a 	or	r3,r8,r3
   300fc:	8900402c 	andhi	r4,r17,256
   30100:	1950b03a 	or	r8,r3,r5
   30104:	20000726 	beq	r4,zero,30124 <__muldf3+0x4dc>
   30108:	4006d07a 	srli	r3,r8,1
   3010c:	880497fa 	slli	r2,r17,31
   30110:	4200004c 	andi	r8,r8,1
   30114:	8822d07a 	srli	r17,r17,1
   30118:	1a10b03a 	or	r8,r3,r8
   3011c:	1210b03a 	or	r8,r2,r8
   30120:	5805883a 	mov	r2,r11
   30124:	1140ffc4 	addi	r5,r2,1023
   30128:	0140440e 	bge	zero,r5,3023c <__muldf3+0x5f4>
   3012c:	40c001cc 	andi	r3,r8,7
   30130:	18000726 	beq	r3,zero,30150 <__muldf3+0x508>
   30134:	40c003cc 	andi	r3,r8,15
   30138:	01000104 	movi	r4,4
   3013c:	19000426 	beq	r3,r4,30150 <__muldf3+0x508>
   30140:	4107883a 	add	r3,r8,r4
   30144:	1a11803a 	cmpltu	r8,r3,r8
   30148:	8a23883a 	add	r17,r17,r8
   3014c:	1811883a 	mov	r8,r3
   30150:	88c0402c 	andhi	r3,r17,256
   30154:	18000426 	beq	r3,zero,30168 <__muldf3+0x520>
   30158:	11410004 	addi	r5,r2,1024
   3015c:	00bfc034 	movhi	r2,65280
   30160:	10bfffc4 	addi	r2,r2,-1
   30164:	88a2703a 	and	r17,r17,r2
   30168:	0081ff84 	movi	r2,2046
   3016c:	117f6416 	blt	r2,r5,2ff00 <__alt_data_end+0xf802ff00>
   30170:	8828977a 	slli	r20,r17,29
   30174:	4010d0fa 	srli	r8,r8,3
   30178:	8822927a 	slli	r17,r17,9
   3017c:	2881ffcc 	andi	r2,r5,2047
   30180:	a228b03a 	or	r20,r20,r8
   30184:	880ad33a 	srli	r5,r17,12
   30188:	b02b883a 	mov	r21,r22
   3018c:	003f0d06 	br	2fdc4 <__alt_data_end+0xf802fdc4>
   30190:	8080022c 	andhi	r2,r16,8
   30194:	10000926 	beq	r2,zero,301bc <__muldf3+0x574>
   30198:	8880022c 	andhi	r2,r17,8
   3019c:	1000071e 	bne	r2,zero,301bc <__muldf3+0x574>
   301a0:	00800434 	movhi	r2,16
   301a4:	89400234 	orhi	r5,r17,8
   301a8:	10bfffc4 	addi	r2,r2,-1
   301ac:	b82b883a 	mov	r21,r23
   301b0:	288a703a 	and	r5,r5,r2
   301b4:	4029883a 	mov	r20,r8
   301b8:	003f6806 	br	2ff5c <__alt_data_end+0xf802ff5c>
   301bc:	00800434 	movhi	r2,16
   301c0:	81400234 	orhi	r5,r16,8
   301c4:	10bfffc4 	addi	r2,r2,-1
   301c8:	288a703a 	and	r5,r5,r2
   301cc:	003f6306 	br	2ff5c <__alt_data_end+0xf802ff5c>
   301d0:	147ff604 	addi	r17,r2,-40
   301d4:	3462983a 	sll	r17,r6,r17
   301d8:	0011883a 	mov	r8,zero
   301dc:	003f4406 	br	2fef0 <__alt_data_end+0xf802fef0>
   301e0:	3009883a 	mov	r4,r6
   301e4:	d9800215 	stw	r6,8(sp)
   301e8:	da400115 	stw	r9,4(sp)
   301ec:	da800015 	stw	r10,0(sp)
   301f0:	0030e600 	call	30e60 <__clzsi2>
   301f4:	10800804 	addi	r2,r2,32
   301f8:	da800017 	ldw	r10,0(sp)
   301fc:	da400117 	ldw	r9,4(sp)
   30200:	d9800217 	ldw	r6,8(sp)
   30204:	003f3006 	br	2fec8 <__alt_data_end+0xf802fec8>
   30208:	143ff604 	addi	r16,r2,-40
   3020c:	9c20983a 	sll	r16,r19,r16
   30210:	0029883a 	mov	r20,zero
   30214:	003f1606 	br	2fe70 <__alt_data_end+0xf802fe70>
   30218:	d9800215 	stw	r6,8(sp)
   3021c:	d9c00015 	stw	r7,0(sp)
   30220:	da400115 	stw	r9,4(sp)
   30224:	0030e600 	call	30e60 <__clzsi2>
   30228:	10800804 	addi	r2,r2,32
   3022c:	da400117 	ldw	r9,4(sp)
   30230:	d9c00017 	ldw	r7,0(sp)
   30234:	d9800217 	ldw	r6,8(sp)
   30238:	003f0306 	br	2fe48 <__alt_data_end+0xf802fe48>
   3023c:	00c00044 	movi	r3,1
   30240:	1947c83a 	sub	r3,r3,r5
   30244:	00800e04 	movi	r2,56
   30248:	10feda16 	blt	r2,r3,2fdb4 <__alt_data_end+0xf802fdb4>
   3024c:	008007c4 	movi	r2,31
   30250:	10c01b16 	blt	r2,r3,302c0 <__muldf3+0x678>
   30254:	00800804 	movi	r2,32
   30258:	10c5c83a 	sub	r2,r2,r3
   3025c:	888a983a 	sll	r5,r17,r2
   30260:	40c8d83a 	srl	r4,r8,r3
   30264:	4084983a 	sll	r2,r8,r2
   30268:	88e2d83a 	srl	r17,r17,r3
   3026c:	2906b03a 	or	r3,r5,r4
   30270:	1004c03a 	cmpne	r2,r2,zero
   30274:	1886b03a 	or	r3,r3,r2
   30278:	188001cc 	andi	r2,r3,7
   3027c:	10000726 	beq	r2,zero,3029c <__muldf3+0x654>
   30280:	188003cc 	andi	r2,r3,15
   30284:	01000104 	movi	r4,4
   30288:	11000426 	beq	r2,r4,3029c <__muldf3+0x654>
   3028c:	1805883a 	mov	r2,r3
   30290:	10c00104 	addi	r3,r2,4
   30294:	1885803a 	cmpltu	r2,r3,r2
   30298:	88a3883a 	add	r17,r17,r2
   3029c:	8880202c 	andhi	r2,r17,128
   302a0:	10001c26 	beq	r2,zero,30314 <__muldf3+0x6cc>
   302a4:	b02b883a 	mov	r21,r22
   302a8:	00800044 	movi	r2,1
   302ac:	000b883a 	mov	r5,zero
   302b0:	0029883a 	mov	r20,zero
   302b4:	003ec306 	br	2fdc4 <__alt_data_end+0xf802fdc4>
   302b8:	5805883a 	mov	r2,r11
   302bc:	003f9906 	br	30124 <__alt_data_end+0xf8030124>
   302c0:	00bff844 	movi	r2,-31
   302c4:	1145c83a 	sub	r2,r2,r5
   302c8:	8888d83a 	srl	r4,r17,r2
   302cc:	00800804 	movi	r2,32
   302d0:	18801a26 	beq	r3,r2,3033c <__muldf3+0x6f4>
   302d4:	00801004 	movi	r2,64
   302d8:	10c5c83a 	sub	r2,r2,r3
   302dc:	8884983a 	sll	r2,r17,r2
   302e0:	1204b03a 	or	r2,r2,r8
   302e4:	1004c03a 	cmpne	r2,r2,zero
   302e8:	2084b03a 	or	r2,r4,r2
   302ec:	144001cc 	andi	r17,r2,7
   302f0:	88000d1e 	bne	r17,zero,30328 <__muldf3+0x6e0>
   302f4:	000b883a 	mov	r5,zero
   302f8:	1028d0fa 	srli	r20,r2,3
   302fc:	b02b883a 	mov	r21,r22
   30300:	0005883a 	mov	r2,zero
   30304:	a468b03a 	or	r20,r20,r17
   30308:	003eae06 	br	2fdc4 <__alt_data_end+0xf802fdc4>
   3030c:	1007883a 	mov	r3,r2
   30310:	0023883a 	mov	r17,zero
   30314:	880a927a 	slli	r5,r17,9
   30318:	1805883a 	mov	r2,r3
   3031c:	8822977a 	slli	r17,r17,29
   30320:	280ad33a 	srli	r5,r5,12
   30324:	003ff406 	br	302f8 <__alt_data_end+0xf80302f8>
   30328:	10c003cc 	andi	r3,r2,15
   3032c:	01000104 	movi	r4,4
   30330:	193ff626 	beq	r3,r4,3030c <__alt_data_end+0xf803030c>
   30334:	0023883a 	mov	r17,zero
   30338:	003fd506 	br	30290 <__alt_data_end+0xf8030290>
   3033c:	0005883a 	mov	r2,zero
   30340:	003fe706 	br	302e0 <__alt_data_end+0xf80302e0>
   30344:	00800434 	movhi	r2,16
   30348:	89400234 	orhi	r5,r17,8
   3034c:	10bfffc4 	addi	r2,r2,-1
   30350:	b02b883a 	mov	r21,r22
   30354:	288a703a 	and	r5,r5,r2
   30358:	4029883a 	mov	r20,r8
   3035c:	003eff06 	br	2ff5c <__alt_data_end+0xf802ff5c>

00030360 <__subdf3>:
   30360:	02000434 	movhi	r8,16
   30364:	423fffc4 	addi	r8,r8,-1
   30368:	defffb04 	addi	sp,sp,-20
   3036c:	2a14703a 	and	r10,r5,r8
   30370:	3812d53a 	srli	r9,r7,20
   30374:	3a10703a 	and	r8,r7,r8
   30378:	2006d77a 	srli	r3,r4,29
   3037c:	3004d77a 	srli	r2,r6,29
   30380:	dc000015 	stw	r16,0(sp)
   30384:	501490fa 	slli	r10,r10,3
   30388:	2820d53a 	srli	r16,r5,20
   3038c:	401090fa 	slli	r8,r8,3
   30390:	dc800215 	stw	r18,8(sp)
   30394:	dc400115 	stw	r17,4(sp)
   30398:	dfc00415 	stw	ra,16(sp)
   3039c:	202290fa 	slli	r17,r4,3
   303a0:	dcc00315 	stw	r19,12(sp)
   303a4:	4a41ffcc 	andi	r9,r9,2047
   303a8:	0101ffc4 	movi	r4,2047
   303ac:	2824d7fa 	srli	r18,r5,31
   303b0:	8401ffcc 	andi	r16,r16,2047
   303b4:	50c6b03a 	or	r3,r10,r3
   303b8:	380ed7fa 	srli	r7,r7,31
   303bc:	408ab03a 	or	r5,r8,r2
   303c0:	300c90fa 	slli	r6,r6,3
   303c4:	49009626 	beq	r9,r4,30620 <__subdf3+0x2c0>
   303c8:	39c0005c 	xori	r7,r7,1
   303cc:	8245c83a 	sub	r2,r16,r9
   303d0:	3c807426 	beq	r7,r18,305a4 <__subdf3+0x244>
   303d4:	0080af0e 	bge	zero,r2,30694 <__subdf3+0x334>
   303d8:	48002a1e 	bne	r9,zero,30484 <__subdf3+0x124>
   303dc:	2988b03a 	or	r4,r5,r6
   303e0:	20009a1e 	bne	r4,zero,3064c <__subdf3+0x2ec>
   303e4:	888001cc 	andi	r2,r17,7
   303e8:	10000726 	beq	r2,zero,30408 <__subdf3+0xa8>
   303ec:	888003cc 	andi	r2,r17,15
   303f0:	01000104 	movi	r4,4
   303f4:	11000426 	beq	r2,r4,30408 <__subdf3+0xa8>
   303f8:	890b883a 	add	r5,r17,r4
   303fc:	2c63803a 	cmpltu	r17,r5,r17
   30400:	1c47883a 	add	r3,r3,r17
   30404:	2823883a 	mov	r17,r5
   30408:	1880202c 	andhi	r2,r3,128
   3040c:	10005926 	beq	r2,zero,30574 <__subdf3+0x214>
   30410:	84000044 	addi	r16,r16,1
   30414:	0081ffc4 	movi	r2,2047
   30418:	8080be26 	beq	r16,r2,30714 <__subdf3+0x3b4>
   3041c:	017fe034 	movhi	r5,65408
   30420:	297fffc4 	addi	r5,r5,-1
   30424:	1946703a 	and	r3,r3,r5
   30428:	1804977a 	slli	r2,r3,29
   3042c:	1806927a 	slli	r3,r3,9
   30430:	8822d0fa 	srli	r17,r17,3
   30434:	8401ffcc 	andi	r16,r16,2047
   30438:	180ad33a 	srli	r5,r3,12
   3043c:	9100004c 	andi	r4,r18,1
   30440:	1444b03a 	or	r2,r2,r17
   30444:	80c1ffcc 	andi	r3,r16,2047
   30448:	1820953a 	slli	r16,r3,20
   3044c:	20c03fcc 	andi	r3,r4,255
   30450:	180897fa 	slli	r4,r3,31
   30454:	00c00434 	movhi	r3,16
   30458:	18ffffc4 	addi	r3,r3,-1
   3045c:	28c6703a 	and	r3,r5,r3
   30460:	1c06b03a 	or	r3,r3,r16
   30464:	1906b03a 	or	r3,r3,r4
   30468:	dfc00417 	ldw	ra,16(sp)
   3046c:	dcc00317 	ldw	r19,12(sp)
   30470:	dc800217 	ldw	r18,8(sp)
   30474:	dc400117 	ldw	r17,4(sp)
   30478:	dc000017 	ldw	r16,0(sp)
   3047c:	dec00504 	addi	sp,sp,20
   30480:	f800283a 	ret
   30484:	0101ffc4 	movi	r4,2047
   30488:	813fd626 	beq	r16,r4,303e4 <__alt_data_end+0xf80303e4>
   3048c:	29402034 	orhi	r5,r5,128
   30490:	01000e04 	movi	r4,56
   30494:	2080a316 	blt	r4,r2,30724 <__subdf3+0x3c4>
   30498:	010007c4 	movi	r4,31
   3049c:	2080c616 	blt	r4,r2,307b8 <__subdf3+0x458>
   304a0:	01000804 	movi	r4,32
   304a4:	2089c83a 	sub	r4,r4,r2
   304a8:	2910983a 	sll	r8,r5,r4
   304ac:	308ed83a 	srl	r7,r6,r2
   304b0:	3108983a 	sll	r4,r6,r4
   304b4:	2884d83a 	srl	r2,r5,r2
   304b8:	41ccb03a 	or	r6,r8,r7
   304bc:	2008c03a 	cmpne	r4,r4,zero
   304c0:	310cb03a 	or	r6,r6,r4
   304c4:	898dc83a 	sub	r6,r17,r6
   304c8:	89a3803a 	cmpltu	r17,r17,r6
   304cc:	1887c83a 	sub	r3,r3,r2
   304d0:	1c47c83a 	sub	r3,r3,r17
   304d4:	3023883a 	mov	r17,r6
   304d8:	1880202c 	andhi	r2,r3,128
   304dc:	10002326 	beq	r2,zero,3056c <__subdf3+0x20c>
   304e0:	04c02034 	movhi	r19,128
   304e4:	9cffffc4 	addi	r19,r19,-1
   304e8:	1ce6703a 	and	r19,r3,r19
   304ec:	98007a26 	beq	r19,zero,306d8 <__subdf3+0x378>
   304f0:	9809883a 	mov	r4,r19
   304f4:	0030e600 	call	30e60 <__clzsi2>
   304f8:	113ffe04 	addi	r4,r2,-8
   304fc:	00c007c4 	movi	r3,31
   30500:	19007b16 	blt	r3,r4,306f0 <__subdf3+0x390>
   30504:	00800804 	movi	r2,32
   30508:	1105c83a 	sub	r2,r2,r4
   3050c:	8884d83a 	srl	r2,r17,r2
   30510:	9906983a 	sll	r3,r19,r4
   30514:	8922983a 	sll	r17,r17,r4
   30518:	10c4b03a 	or	r2,r2,r3
   3051c:	24007816 	blt	r4,r16,30700 <__subdf3+0x3a0>
   30520:	2421c83a 	sub	r16,r4,r16
   30524:	80c00044 	addi	r3,r16,1
   30528:	010007c4 	movi	r4,31
   3052c:	20c09516 	blt	r4,r3,30784 <__subdf3+0x424>
   30530:	01400804 	movi	r5,32
   30534:	28cbc83a 	sub	r5,r5,r3
   30538:	88c8d83a 	srl	r4,r17,r3
   3053c:	8962983a 	sll	r17,r17,r5
   30540:	114a983a 	sll	r5,r2,r5
   30544:	10c6d83a 	srl	r3,r2,r3
   30548:	8804c03a 	cmpne	r2,r17,zero
   3054c:	290ab03a 	or	r5,r5,r4
   30550:	28a2b03a 	or	r17,r5,r2
   30554:	0021883a 	mov	r16,zero
   30558:	003fa206 	br	303e4 <__alt_data_end+0xf80303e4>
   3055c:	2090b03a 	or	r8,r4,r2
   30560:	40018e26 	beq	r8,zero,30b9c <__subdf3+0x83c>
   30564:	1007883a 	mov	r3,r2
   30568:	2023883a 	mov	r17,r4
   3056c:	888001cc 	andi	r2,r17,7
   30570:	103f9e1e 	bne	r2,zero,303ec <__alt_data_end+0xf80303ec>
   30574:	1804977a 	slli	r2,r3,29
   30578:	8822d0fa 	srli	r17,r17,3
   3057c:	1810d0fa 	srli	r8,r3,3
   30580:	9100004c 	andi	r4,r18,1
   30584:	1444b03a 	or	r2,r2,r17
   30588:	00c1ffc4 	movi	r3,2047
   3058c:	80c02826 	beq	r16,r3,30630 <__subdf3+0x2d0>
   30590:	01400434 	movhi	r5,16
   30594:	297fffc4 	addi	r5,r5,-1
   30598:	80e0703a 	and	r16,r16,r3
   3059c:	414a703a 	and	r5,r8,r5
   305a0:	003fa806 	br	30444 <__alt_data_end+0xf8030444>
   305a4:	0080630e 	bge	zero,r2,30734 <__subdf3+0x3d4>
   305a8:	48003026 	beq	r9,zero,3066c <__subdf3+0x30c>
   305ac:	0101ffc4 	movi	r4,2047
   305b0:	813f8c26 	beq	r16,r4,303e4 <__alt_data_end+0xf80303e4>
   305b4:	29402034 	orhi	r5,r5,128
   305b8:	01000e04 	movi	r4,56
   305bc:	2080a90e 	bge	r4,r2,30864 <__subdf3+0x504>
   305c0:	298cb03a 	or	r6,r5,r6
   305c4:	3012c03a 	cmpne	r9,r6,zero
   305c8:	0005883a 	mov	r2,zero
   305cc:	4c53883a 	add	r9,r9,r17
   305d0:	4c63803a 	cmpltu	r17,r9,r17
   305d4:	10c7883a 	add	r3,r2,r3
   305d8:	88c7883a 	add	r3,r17,r3
   305dc:	4823883a 	mov	r17,r9
   305e0:	1880202c 	andhi	r2,r3,128
   305e4:	1000d026 	beq	r2,zero,30928 <__subdf3+0x5c8>
   305e8:	84000044 	addi	r16,r16,1
   305ec:	0081ffc4 	movi	r2,2047
   305f0:	8080fe26 	beq	r16,r2,309ec <__subdf3+0x68c>
   305f4:	00bfe034 	movhi	r2,65408
   305f8:	10bfffc4 	addi	r2,r2,-1
   305fc:	1886703a 	and	r3,r3,r2
   30600:	880ad07a 	srli	r5,r17,1
   30604:	180497fa 	slli	r2,r3,31
   30608:	8900004c 	andi	r4,r17,1
   3060c:	2922b03a 	or	r17,r5,r4
   30610:	1806d07a 	srli	r3,r3,1
   30614:	1462b03a 	or	r17,r2,r17
   30618:	3825883a 	mov	r18,r7
   3061c:	003f7106 	br	303e4 <__alt_data_end+0xf80303e4>
   30620:	2984b03a 	or	r2,r5,r6
   30624:	103f6826 	beq	r2,zero,303c8 <__alt_data_end+0xf80303c8>
   30628:	39c03fcc 	andi	r7,r7,255
   3062c:	003f6706 	br	303cc <__alt_data_end+0xf80303cc>
   30630:	4086b03a 	or	r3,r8,r2
   30634:	18015226 	beq	r3,zero,30b80 <__subdf3+0x820>
   30638:	00c00434 	movhi	r3,16
   3063c:	41400234 	orhi	r5,r8,8
   30640:	18ffffc4 	addi	r3,r3,-1
   30644:	28ca703a 	and	r5,r5,r3
   30648:	003f7e06 	br	30444 <__alt_data_end+0xf8030444>
   3064c:	10bfffc4 	addi	r2,r2,-1
   30650:	1000491e 	bne	r2,zero,30778 <__subdf3+0x418>
   30654:	898fc83a 	sub	r7,r17,r6
   30658:	89e3803a 	cmpltu	r17,r17,r7
   3065c:	1947c83a 	sub	r3,r3,r5
   30660:	1c47c83a 	sub	r3,r3,r17
   30664:	3823883a 	mov	r17,r7
   30668:	003f9b06 	br	304d8 <__alt_data_end+0xf80304d8>
   3066c:	2988b03a 	or	r4,r5,r6
   30670:	203f5c26 	beq	r4,zero,303e4 <__alt_data_end+0xf80303e4>
   30674:	10bfffc4 	addi	r2,r2,-1
   30678:	1000931e 	bne	r2,zero,308c8 <__subdf3+0x568>
   3067c:	898d883a 	add	r6,r17,r6
   30680:	3463803a 	cmpltu	r17,r6,r17
   30684:	1947883a 	add	r3,r3,r5
   30688:	88c7883a 	add	r3,r17,r3
   3068c:	3023883a 	mov	r17,r6
   30690:	003fd306 	br	305e0 <__alt_data_end+0xf80305e0>
   30694:	1000541e 	bne	r2,zero,307e8 <__subdf3+0x488>
   30698:	80800044 	addi	r2,r16,1
   3069c:	1081ffcc 	andi	r2,r2,2047
   306a0:	01000044 	movi	r4,1
   306a4:	2080a20e 	bge	r4,r2,30930 <__subdf3+0x5d0>
   306a8:	8989c83a 	sub	r4,r17,r6
   306ac:	8905803a 	cmpltu	r2,r17,r4
   306b0:	1967c83a 	sub	r19,r3,r5
   306b4:	98a7c83a 	sub	r19,r19,r2
   306b8:	9880202c 	andhi	r2,r19,128
   306bc:	10006326 	beq	r2,zero,3084c <__subdf3+0x4ec>
   306c0:	3463c83a 	sub	r17,r6,r17
   306c4:	28c7c83a 	sub	r3,r5,r3
   306c8:	344d803a 	cmpltu	r6,r6,r17
   306cc:	19a7c83a 	sub	r19,r3,r6
   306d0:	3825883a 	mov	r18,r7
   306d4:	983f861e 	bne	r19,zero,304f0 <__alt_data_end+0xf80304f0>
   306d8:	8809883a 	mov	r4,r17
   306dc:	0030e600 	call	30e60 <__clzsi2>
   306e0:	10800804 	addi	r2,r2,32
   306e4:	113ffe04 	addi	r4,r2,-8
   306e8:	00c007c4 	movi	r3,31
   306ec:	193f850e 	bge	r3,r4,30504 <__alt_data_end+0xf8030504>
   306f0:	10bff604 	addi	r2,r2,-40
   306f4:	8884983a 	sll	r2,r17,r2
   306f8:	0023883a 	mov	r17,zero
   306fc:	243f880e 	bge	r4,r16,30520 <__alt_data_end+0xf8030520>
   30700:	00ffe034 	movhi	r3,65408
   30704:	18ffffc4 	addi	r3,r3,-1
   30708:	8121c83a 	sub	r16,r16,r4
   3070c:	10c6703a 	and	r3,r2,r3
   30710:	003f3406 	br	303e4 <__alt_data_end+0xf80303e4>
   30714:	9100004c 	andi	r4,r18,1
   30718:	000b883a 	mov	r5,zero
   3071c:	0005883a 	mov	r2,zero
   30720:	003f4806 	br	30444 <__alt_data_end+0xf8030444>
   30724:	298cb03a 	or	r6,r5,r6
   30728:	300cc03a 	cmpne	r6,r6,zero
   3072c:	0005883a 	mov	r2,zero
   30730:	003f6406 	br	304c4 <__alt_data_end+0xf80304c4>
   30734:	10009a1e 	bne	r2,zero,309a0 <__subdf3+0x640>
   30738:	82400044 	addi	r9,r16,1
   3073c:	4881ffcc 	andi	r2,r9,2047
   30740:	02800044 	movi	r10,1
   30744:	5080670e 	bge	r10,r2,308e4 <__subdf3+0x584>
   30748:	0081ffc4 	movi	r2,2047
   3074c:	4880af26 	beq	r9,r2,30a0c <__subdf3+0x6ac>
   30750:	898d883a 	add	r6,r17,r6
   30754:	1945883a 	add	r2,r3,r5
   30758:	3447803a 	cmpltu	r3,r6,r17
   3075c:	1887883a 	add	r3,r3,r2
   30760:	182297fa 	slli	r17,r3,31
   30764:	300cd07a 	srli	r6,r6,1
   30768:	1806d07a 	srli	r3,r3,1
   3076c:	4821883a 	mov	r16,r9
   30770:	89a2b03a 	or	r17,r17,r6
   30774:	003f1b06 	br	303e4 <__alt_data_end+0xf80303e4>
   30778:	0101ffc4 	movi	r4,2047
   3077c:	813f441e 	bne	r16,r4,30490 <__alt_data_end+0xf8030490>
   30780:	003f1806 	br	303e4 <__alt_data_end+0xf80303e4>
   30784:	843ff844 	addi	r16,r16,-31
   30788:	01400804 	movi	r5,32
   3078c:	1408d83a 	srl	r4,r2,r16
   30790:	19405026 	beq	r3,r5,308d4 <__subdf3+0x574>
   30794:	01401004 	movi	r5,64
   30798:	28c7c83a 	sub	r3,r5,r3
   3079c:	10c4983a 	sll	r2,r2,r3
   307a0:	88a2b03a 	or	r17,r17,r2
   307a4:	8822c03a 	cmpne	r17,r17,zero
   307a8:	2462b03a 	or	r17,r4,r17
   307ac:	0007883a 	mov	r3,zero
   307b0:	0021883a 	mov	r16,zero
   307b4:	003f6d06 	br	3056c <__alt_data_end+0xf803056c>
   307b8:	11fff804 	addi	r7,r2,-32
   307bc:	01000804 	movi	r4,32
   307c0:	29ced83a 	srl	r7,r5,r7
   307c4:	11004526 	beq	r2,r4,308dc <__subdf3+0x57c>
   307c8:	01001004 	movi	r4,64
   307cc:	2089c83a 	sub	r4,r4,r2
   307d0:	2904983a 	sll	r2,r5,r4
   307d4:	118cb03a 	or	r6,r2,r6
   307d8:	300cc03a 	cmpne	r6,r6,zero
   307dc:	398cb03a 	or	r6,r7,r6
   307e0:	0005883a 	mov	r2,zero
   307e4:	003f3706 	br	304c4 <__alt_data_end+0xf80304c4>
   307e8:	80002a26 	beq	r16,zero,30894 <__subdf3+0x534>
   307ec:	0101ffc4 	movi	r4,2047
   307f0:	49006626 	beq	r9,r4,3098c <__subdf3+0x62c>
   307f4:	0085c83a 	sub	r2,zero,r2
   307f8:	18c02034 	orhi	r3,r3,128
   307fc:	01000e04 	movi	r4,56
   30800:	20807e16 	blt	r4,r2,309fc <__subdf3+0x69c>
   30804:	010007c4 	movi	r4,31
   30808:	2080e716 	blt	r4,r2,30ba8 <__subdf3+0x848>
   3080c:	01000804 	movi	r4,32
   30810:	2089c83a 	sub	r4,r4,r2
   30814:	1914983a 	sll	r10,r3,r4
   30818:	8890d83a 	srl	r8,r17,r2
   3081c:	8908983a 	sll	r4,r17,r4
   30820:	1884d83a 	srl	r2,r3,r2
   30824:	5222b03a 	or	r17,r10,r8
   30828:	2006c03a 	cmpne	r3,r4,zero
   3082c:	88e2b03a 	or	r17,r17,r3
   30830:	3463c83a 	sub	r17,r6,r17
   30834:	2885c83a 	sub	r2,r5,r2
   30838:	344d803a 	cmpltu	r6,r6,r17
   3083c:	1187c83a 	sub	r3,r2,r6
   30840:	4821883a 	mov	r16,r9
   30844:	3825883a 	mov	r18,r7
   30848:	003f2306 	br	304d8 <__alt_data_end+0xf80304d8>
   3084c:	24d0b03a 	or	r8,r4,r19
   30850:	40001b1e 	bne	r8,zero,308c0 <__subdf3+0x560>
   30854:	0005883a 	mov	r2,zero
   30858:	0009883a 	mov	r4,zero
   3085c:	0021883a 	mov	r16,zero
   30860:	003f4906 	br	30588 <__alt_data_end+0xf8030588>
   30864:	010007c4 	movi	r4,31
   30868:	20803a16 	blt	r4,r2,30954 <__subdf3+0x5f4>
   3086c:	01000804 	movi	r4,32
   30870:	2089c83a 	sub	r4,r4,r2
   30874:	2912983a 	sll	r9,r5,r4
   30878:	3090d83a 	srl	r8,r6,r2
   3087c:	3108983a 	sll	r4,r6,r4
   30880:	2884d83a 	srl	r2,r5,r2
   30884:	4a12b03a 	or	r9,r9,r8
   30888:	2008c03a 	cmpne	r4,r4,zero
   3088c:	4912b03a 	or	r9,r9,r4
   30890:	003f4e06 	br	305cc <__alt_data_end+0xf80305cc>
   30894:	1c48b03a 	or	r4,r3,r17
   30898:	20003c26 	beq	r4,zero,3098c <__subdf3+0x62c>
   3089c:	0084303a 	nor	r2,zero,r2
   308a0:	1000381e 	bne	r2,zero,30984 <__subdf3+0x624>
   308a4:	3463c83a 	sub	r17,r6,r17
   308a8:	28c5c83a 	sub	r2,r5,r3
   308ac:	344d803a 	cmpltu	r6,r6,r17
   308b0:	1187c83a 	sub	r3,r2,r6
   308b4:	4821883a 	mov	r16,r9
   308b8:	3825883a 	mov	r18,r7
   308bc:	003f0606 	br	304d8 <__alt_data_end+0xf80304d8>
   308c0:	2023883a 	mov	r17,r4
   308c4:	003f0906 	br	304ec <__alt_data_end+0xf80304ec>
   308c8:	0101ffc4 	movi	r4,2047
   308cc:	813f3a1e 	bne	r16,r4,305b8 <__alt_data_end+0xf80305b8>
   308d0:	003ec406 	br	303e4 <__alt_data_end+0xf80303e4>
   308d4:	0005883a 	mov	r2,zero
   308d8:	003fb106 	br	307a0 <__alt_data_end+0xf80307a0>
   308dc:	0005883a 	mov	r2,zero
   308e0:	003fbc06 	br	307d4 <__alt_data_end+0xf80307d4>
   308e4:	1c44b03a 	or	r2,r3,r17
   308e8:	80008e1e 	bne	r16,zero,30b24 <__subdf3+0x7c4>
   308ec:	1000c826 	beq	r2,zero,30c10 <__subdf3+0x8b0>
   308f0:	2984b03a 	or	r2,r5,r6
   308f4:	103ebb26 	beq	r2,zero,303e4 <__alt_data_end+0xf80303e4>
   308f8:	8989883a 	add	r4,r17,r6
   308fc:	1945883a 	add	r2,r3,r5
   30900:	2447803a 	cmpltu	r3,r4,r17
   30904:	1887883a 	add	r3,r3,r2
   30908:	1880202c 	andhi	r2,r3,128
   3090c:	2023883a 	mov	r17,r4
   30910:	103f1626 	beq	r2,zero,3056c <__alt_data_end+0xf803056c>
   30914:	00bfe034 	movhi	r2,65408
   30918:	10bfffc4 	addi	r2,r2,-1
   3091c:	5021883a 	mov	r16,r10
   30920:	1886703a 	and	r3,r3,r2
   30924:	003eaf06 	br	303e4 <__alt_data_end+0xf80303e4>
   30928:	3825883a 	mov	r18,r7
   3092c:	003f0f06 	br	3056c <__alt_data_end+0xf803056c>
   30930:	1c44b03a 	or	r2,r3,r17
   30934:	8000251e 	bne	r16,zero,309cc <__subdf3+0x66c>
   30938:	1000661e 	bne	r2,zero,30ad4 <__subdf3+0x774>
   3093c:	2990b03a 	or	r8,r5,r6
   30940:	40009626 	beq	r8,zero,30b9c <__subdf3+0x83c>
   30944:	2807883a 	mov	r3,r5
   30948:	3023883a 	mov	r17,r6
   3094c:	3825883a 	mov	r18,r7
   30950:	003ea406 	br	303e4 <__alt_data_end+0xf80303e4>
   30954:	127ff804 	addi	r9,r2,-32
   30958:	01000804 	movi	r4,32
   3095c:	2a52d83a 	srl	r9,r5,r9
   30960:	11008c26 	beq	r2,r4,30b94 <__subdf3+0x834>
   30964:	01001004 	movi	r4,64
   30968:	2085c83a 	sub	r2,r4,r2
   3096c:	2884983a 	sll	r2,r5,r2
   30970:	118cb03a 	or	r6,r2,r6
   30974:	300cc03a 	cmpne	r6,r6,zero
   30978:	4992b03a 	or	r9,r9,r6
   3097c:	0005883a 	mov	r2,zero
   30980:	003f1206 	br	305cc <__alt_data_end+0xf80305cc>
   30984:	0101ffc4 	movi	r4,2047
   30988:	493f9c1e 	bne	r9,r4,307fc <__alt_data_end+0xf80307fc>
   3098c:	2807883a 	mov	r3,r5
   30990:	3023883a 	mov	r17,r6
   30994:	4821883a 	mov	r16,r9
   30998:	3825883a 	mov	r18,r7
   3099c:	003e9106 	br	303e4 <__alt_data_end+0xf80303e4>
   309a0:	80001f1e 	bne	r16,zero,30a20 <__subdf3+0x6c0>
   309a4:	1c48b03a 	or	r4,r3,r17
   309a8:	20005a26 	beq	r4,zero,30b14 <__subdf3+0x7b4>
   309ac:	0084303a 	nor	r2,zero,r2
   309b0:	1000561e 	bne	r2,zero,30b0c <__subdf3+0x7ac>
   309b4:	89a3883a 	add	r17,r17,r6
   309b8:	1945883a 	add	r2,r3,r5
   309bc:	898d803a 	cmpltu	r6,r17,r6
   309c0:	3087883a 	add	r3,r6,r2
   309c4:	4821883a 	mov	r16,r9
   309c8:	003f0506 	br	305e0 <__alt_data_end+0xf80305e0>
   309cc:	10002b1e 	bne	r2,zero,30a7c <__subdf3+0x71c>
   309d0:	2984b03a 	or	r2,r5,r6
   309d4:	10008026 	beq	r2,zero,30bd8 <__subdf3+0x878>
   309d8:	2807883a 	mov	r3,r5
   309dc:	3023883a 	mov	r17,r6
   309e0:	3825883a 	mov	r18,r7
   309e4:	0401ffc4 	movi	r16,2047
   309e8:	003e7e06 	br	303e4 <__alt_data_end+0xf80303e4>
   309ec:	3809883a 	mov	r4,r7
   309f0:	0011883a 	mov	r8,zero
   309f4:	0005883a 	mov	r2,zero
   309f8:	003ee306 	br	30588 <__alt_data_end+0xf8030588>
   309fc:	1c62b03a 	or	r17,r3,r17
   30a00:	8822c03a 	cmpne	r17,r17,zero
   30a04:	0005883a 	mov	r2,zero
   30a08:	003f8906 	br	30830 <__alt_data_end+0xf8030830>
   30a0c:	3809883a 	mov	r4,r7
   30a10:	4821883a 	mov	r16,r9
   30a14:	0011883a 	mov	r8,zero
   30a18:	0005883a 	mov	r2,zero
   30a1c:	003eda06 	br	30588 <__alt_data_end+0xf8030588>
   30a20:	0101ffc4 	movi	r4,2047
   30a24:	49003b26 	beq	r9,r4,30b14 <__subdf3+0x7b4>
   30a28:	0085c83a 	sub	r2,zero,r2
   30a2c:	18c02034 	orhi	r3,r3,128
   30a30:	01000e04 	movi	r4,56
   30a34:	20806e16 	blt	r4,r2,30bf0 <__subdf3+0x890>
   30a38:	010007c4 	movi	r4,31
   30a3c:	20807716 	blt	r4,r2,30c1c <__subdf3+0x8bc>
   30a40:	01000804 	movi	r4,32
   30a44:	2089c83a 	sub	r4,r4,r2
   30a48:	1914983a 	sll	r10,r3,r4
   30a4c:	8890d83a 	srl	r8,r17,r2
   30a50:	8908983a 	sll	r4,r17,r4
   30a54:	1884d83a 	srl	r2,r3,r2
   30a58:	5222b03a 	or	r17,r10,r8
   30a5c:	2006c03a 	cmpne	r3,r4,zero
   30a60:	88e2b03a 	or	r17,r17,r3
   30a64:	89a3883a 	add	r17,r17,r6
   30a68:	1145883a 	add	r2,r2,r5
   30a6c:	898d803a 	cmpltu	r6,r17,r6
   30a70:	3087883a 	add	r3,r6,r2
   30a74:	4821883a 	mov	r16,r9
   30a78:	003ed906 	br	305e0 <__alt_data_end+0xf80305e0>
   30a7c:	2984b03a 	or	r2,r5,r6
   30a80:	10004226 	beq	r2,zero,30b8c <__subdf3+0x82c>
   30a84:	1808d0fa 	srli	r4,r3,3
   30a88:	8822d0fa 	srli	r17,r17,3
   30a8c:	1806977a 	slli	r3,r3,29
   30a90:	2080022c 	andhi	r2,r4,8
   30a94:	1c62b03a 	or	r17,r3,r17
   30a98:	10000826 	beq	r2,zero,30abc <__subdf3+0x75c>
   30a9c:	2812d0fa 	srli	r9,r5,3
   30aa0:	4880022c 	andhi	r2,r9,8
   30aa4:	1000051e 	bne	r2,zero,30abc <__subdf3+0x75c>
   30aa8:	300cd0fa 	srli	r6,r6,3
   30aac:	2804977a 	slli	r2,r5,29
   30ab0:	4809883a 	mov	r4,r9
   30ab4:	3825883a 	mov	r18,r7
   30ab8:	11a2b03a 	or	r17,r2,r6
   30abc:	8806d77a 	srli	r3,r17,29
   30ac0:	200890fa 	slli	r4,r4,3
   30ac4:	882290fa 	slli	r17,r17,3
   30ac8:	0401ffc4 	movi	r16,2047
   30acc:	1906b03a 	or	r3,r3,r4
   30ad0:	003e4406 	br	303e4 <__alt_data_end+0xf80303e4>
   30ad4:	2984b03a 	or	r2,r5,r6
   30ad8:	103e4226 	beq	r2,zero,303e4 <__alt_data_end+0xf80303e4>
   30adc:	8989c83a 	sub	r4,r17,r6
   30ae0:	8911803a 	cmpltu	r8,r17,r4
   30ae4:	1945c83a 	sub	r2,r3,r5
   30ae8:	1205c83a 	sub	r2,r2,r8
   30aec:	1200202c 	andhi	r8,r2,128
   30af0:	403e9a26 	beq	r8,zero,3055c <__alt_data_end+0xf803055c>
   30af4:	3463c83a 	sub	r17,r6,r17
   30af8:	28c5c83a 	sub	r2,r5,r3
   30afc:	344d803a 	cmpltu	r6,r6,r17
   30b00:	1187c83a 	sub	r3,r2,r6
   30b04:	3825883a 	mov	r18,r7
   30b08:	003e3606 	br	303e4 <__alt_data_end+0xf80303e4>
   30b0c:	0101ffc4 	movi	r4,2047
   30b10:	493fc71e 	bne	r9,r4,30a30 <__alt_data_end+0xf8030a30>
   30b14:	2807883a 	mov	r3,r5
   30b18:	3023883a 	mov	r17,r6
   30b1c:	4821883a 	mov	r16,r9
   30b20:	003e3006 	br	303e4 <__alt_data_end+0xf80303e4>
   30b24:	10003626 	beq	r2,zero,30c00 <__subdf3+0x8a0>
   30b28:	2984b03a 	or	r2,r5,r6
   30b2c:	10001726 	beq	r2,zero,30b8c <__subdf3+0x82c>
   30b30:	1808d0fa 	srli	r4,r3,3
   30b34:	8822d0fa 	srli	r17,r17,3
   30b38:	1806977a 	slli	r3,r3,29
   30b3c:	2080022c 	andhi	r2,r4,8
   30b40:	1c62b03a 	or	r17,r3,r17
   30b44:	10000726 	beq	r2,zero,30b64 <__subdf3+0x804>
   30b48:	2812d0fa 	srli	r9,r5,3
   30b4c:	4880022c 	andhi	r2,r9,8
   30b50:	1000041e 	bne	r2,zero,30b64 <__subdf3+0x804>
   30b54:	300cd0fa 	srli	r6,r6,3
   30b58:	2804977a 	slli	r2,r5,29
   30b5c:	4809883a 	mov	r4,r9
   30b60:	11a2b03a 	or	r17,r2,r6
   30b64:	8806d77a 	srli	r3,r17,29
   30b68:	200890fa 	slli	r4,r4,3
   30b6c:	882290fa 	slli	r17,r17,3
   30b70:	3825883a 	mov	r18,r7
   30b74:	1906b03a 	or	r3,r3,r4
   30b78:	0401ffc4 	movi	r16,2047
   30b7c:	003e1906 	br	303e4 <__alt_data_end+0xf80303e4>
   30b80:	000b883a 	mov	r5,zero
   30b84:	0005883a 	mov	r2,zero
   30b88:	003e2e06 	br	30444 <__alt_data_end+0xf8030444>
   30b8c:	0401ffc4 	movi	r16,2047
   30b90:	003e1406 	br	303e4 <__alt_data_end+0xf80303e4>
   30b94:	0005883a 	mov	r2,zero
   30b98:	003f7506 	br	30970 <__alt_data_end+0xf8030970>
   30b9c:	0005883a 	mov	r2,zero
   30ba0:	0009883a 	mov	r4,zero
   30ba4:	003e7806 	br	30588 <__alt_data_end+0xf8030588>
   30ba8:	123ff804 	addi	r8,r2,-32
   30bac:	01000804 	movi	r4,32
   30bb0:	1a10d83a 	srl	r8,r3,r8
   30bb4:	11002526 	beq	r2,r4,30c4c <__subdf3+0x8ec>
   30bb8:	01001004 	movi	r4,64
   30bbc:	2085c83a 	sub	r2,r4,r2
   30bc0:	1884983a 	sll	r2,r3,r2
   30bc4:	1444b03a 	or	r2,r2,r17
   30bc8:	1004c03a 	cmpne	r2,r2,zero
   30bcc:	40a2b03a 	or	r17,r8,r2
   30bd0:	0005883a 	mov	r2,zero
   30bd4:	003f1606 	br	30830 <__alt_data_end+0xf8030830>
   30bd8:	02000434 	movhi	r8,16
   30bdc:	0009883a 	mov	r4,zero
   30be0:	423fffc4 	addi	r8,r8,-1
   30be4:	00bfffc4 	movi	r2,-1
   30be8:	0401ffc4 	movi	r16,2047
   30bec:	003e6606 	br	30588 <__alt_data_end+0xf8030588>
   30bf0:	1c62b03a 	or	r17,r3,r17
   30bf4:	8822c03a 	cmpne	r17,r17,zero
   30bf8:	0005883a 	mov	r2,zero
   30bfc:	003f9906 	br	30a64 <__alt_data_end+0xf8030a64>
   30c00:	2807883a 	mov	r3,r5
   30c04:	3023883a 	mov	r17,r6
   30c08:	0401ffc4 	movi	r16,2047
   30c0c:	003df506 	br	303e4 <__alt_data_end+0xf80303e4>
   30c10:	2807883a 	mov	r3,r5
   30c14:	3023883a 	mov	r17,r6
   30c18:	003df206 	br	303e4 <__alt_data_end+0xf80303e4>
   30c1c:	123ff804 	addi	r8,r2,-32
   30c20:	01000804 	movi	r4,32
   30c24:	1a10d83a 	srl	r8,r3,r8
   30c28:	11000a26 	beq	r2,r4,30c54 <__subdf3+0x8f4>
   30c2c:	01001004 	movi	r4,64
   30c30:	2085c83a 	sub	r2,r4,r2
   30c34:	1884983a 	sll	r2,r3,r2
   30c38:	1444b03a 	or	r2,r2,r17
   30c3c:	1004c03a 	cmpne	r2,r2,zero
   30c40:	40a2b03a 	or	r17,r8,r2
   30c44:	0005883a 	mov	r2,zero
   30c48:	003f8606 	br	30a64 <__alt_data_end+0xf8030a64>
   30c4c:	0005883a 	mov	r2,zero
   30c50:	003fdc06 	br	30bc4 <__alt_data_end+0xf8030bc4>
   30c54:	0005883a 	mov	r2,zero
   30c58:	003ff706 	br	30c38 <__alt_data_end+0xf8030c38>

00030c5c <__fixdfsi>:
   30c5c:	280cd53a 	srli	r6,r5,20
   30c60:	00c00434 	movhi	r3,16
   30c64:	18ffffc4 	addi	r3,r3,-1
   30c68:	3181ffcc 	andi	r6,r6,2047
   30c6c:	01c0ff84 	movi	r7,1022
   30c70:	28c6703a 	and	r3,r5,r3
   30c74:	280ad7fa 	srli	r5,r5,31
   30c78:	3980120e 	bge	r7,r6,30cc4 <__fixdfsi+0x68>
   30c7c:	00810744 	movi	r2,1053
   30c80:	11800c16 	blt	r2,r6,30cb4 <__fixdfsi+0x58>
   30c84:	00810cc4 	movi	r2,1075
   30c88:	1185c83a 	sub	r2,r2,r6
   30c8c:	01c007c4 	movi	r7,31
   30c90:	18c00434 	orhi	r3,r3,16
   30c94:	38800d16 	blt	r7,r2,30ccc <__fixdfsi+0x70>
   30c98:	31befb44 	addi	r6,r6,-1043
   30c9c:	2084d83a 	srl	r2,r4,r2
   30ca0:	1986983a 	sll	r3,r3,r6
   30ca4:	1884b03a 	or	r2,r3,r2
   30ca8:	28000726 	beq	r5,zero,30cc8 <__fixdfsi+0x6c>
   30cac:	0085c83a 	sub	r2,zero,r2
   30cb0:	f800283a 	ret
   30cb4:	00a00034 	movhi	r2,32768
   30cb8:	10bfffc4 	addi	r2,r2,-1
   30cbc:	2885883a 	add	r2,r5,r2
   30cc0:	f800283a 	ret
   30cc4:	0005883a 	mov	r2,zero
   30cc8:	f800283a 	ret
   30ccc:	008104c4 	movi	r2,1043
   30cd0:	1185c83a 	sub	r2,r2,r6
   30cd4:	1884d83a 	srl	r2,r3,r2
   30cd8:	003ff306 	br	30ca8 <__alt_data_end+0xf8030ca8>

00030cdc <__floatsidf>:
   30cdc:	defffd04 	addi	sp,sp,-12
   30ce0:	dfc00215 	stw	ra,8(sp)
   30ce4:	dc400115 	stw	r17,4(sp)
   30ce8:	dc000015 	stw	r16,0(sp)
   30cec:	20002b26 	beq	r4,zero,30d9c <__floatsidf+0xc0>
   30cf0:	2023883a 	mov	r17,r4
   30cf4:	2020d7fa 	srli	r16,r4,31
   30cf8:	20002d16 	blt	r4,zero,30db0 <__floatsidf+0xd4>
   30cfc:	8809883a 	mov	r4,r17
   30d00:	0030e600 	call	30e60 <__clzsi2>
   30d04:	01410784 	movi	r5,1054
   30d08:	288bc83a 	sub	r5,r5,r2
   30d0c:	01010cc4 	movi	r4,1075
   30d10:	2149c83a 	sub	r4,r4,r5
   30d14:	00c007c4 	movi	r3,31
   30d18:	1900160e 	bge	r3,r4,30d74 <__floatsidf+0x98>
   30d1c:	00c104c4 	movi	r3,1043
   30d20:	1947c83a 	sub	r3,r3,r5
   30d24:	88c6983a 	sll	r3,r17,r3
   30d28:	00800434 	movhi	r2,16
   30d2c:	10bfffc4 	addi	r2,r2,-1
   30d30:	1886703a 	and	r3,r3,r2
   30d34:	2941ffcc 	andi	r5,r5,2047
   30d38:	800d883a 	mov	r6,r16
   30d3c:	0005883a 	mov	r2,zero
   30d40:	280a953a 	slli	r5,r5,20
   30d44:	31803fcc 	andi	r6,r6,255
   30d48:	01000434 	movhi	r4,16
   30d4c:	300c97fa 	slli	r6,r6,31
   30d50:	213fffc4 	addi	r4,r4,-1
   30d54:	1906703a 	and	r3,r3,r4
   30d58:	1946b03a 	or	r3,r3,r5
   30d5c:	1986b03a 	or	r3,r3,r6
   30d60:	dfc00217 	ldw	ra,8(sp)
   30d64:	dc400117 	ldw	r17,4(sp)
   30d68:	dc000017 	ldw	r16,0(sp)
   30d6c:	dec00304 	addi	sp,sp,12
   30d70:	f800283a 	ret
   30d74:	00c002c4 	movi	r3,11
   30d78:	1887c83a 	sub	r3,r3,r2
   30d7c:	88c6d83a 	srl	r3,r17,r3
   30d80:	8904983a 	sll	r2,r17,r4
   30d84:	01000434 	movhi	r4,16
   30d88:	213fffc4 	addi	r4,r4,-1
   30d8c:	2941ffcc 	andi	r5,r5,2047
   30d90:	1906703a 	and	r3,r3,r4
   30d94:	800d883a 	mov	r6,r16
   30d98:	003fe906 	br	30d40 <__alt_data_end+0xf8030d40>
   30d9c:	000d883a 	mov	r6,zero
   30da0:	000b883a 	mov	r5,zero
   30da4:	0007883a 	mov	r3,zero
   30da8:	0005883a 	mov	r2,zero
   30dac:	003fe406 	br	30d40 <__alt_data_end+0xf8030d40>
   30db0:	0123c83a 	sub	r17,zero,r4
   30db4:	003fd106 	br	30cfc <__alt_data_end+0xf8030cfc>

00030db8 <__floatunsidf>:
   30db8:	defffe04 	addi	sp,sp,-8
   30dbc:	dc000015 	stw	r16,0(sp)
   30dc0:	dfc00115 	stw	ra,4(sp)
   30dc4:	2021883a 	mov	r16,r4
   30dc8:	20002226 	beq	r4,zero,30e54 <__floatunsidf+0x9c>
   30dcc:	0030e600 	call	30e60 <__clzsi2>
   30dd0:	01010784 	movi	r4,1054
   30dd4:	2089c83a 	sub	r4,r4,r2
   30dd8:	01810cc4 	movi	r6,1075
   30ddc:	310dc83a 	sub	r6,r6,r4
   30de0:	00c007c4 	movi	r3,31
   30de4:	1980120e 	bge	r3,r6,30e30 <__floatunsidf+0x78>
   30de8:	00c104c4 	movi	r3,1043
   30dec:	1907c83a 	sub	r3,r3,r4
   30df0:	80ca983a 	sll	r5,r16,r3
   30df4:	00800434 	movhi	r2,16
   30df8:	10bfffc4 	addi	r2,r2,-1
   30dfc:	2101ffcc 	andi	r4,r4,2047
   30e00:	0021883a 	mov	r16,zero
   30e04:	288a703a 	and	r5,r5,r2
   30e08:	2008953a 	slli	r4,r4,20
   30e0c:	00c00434 	movhi	r3,16
   30e10:	18ffffc4 	addi	r3,r3,-1
   30e14:	28c6703a 	and	r3,r5,r3
   30e18:	8005883a 	mov	r2,r16
   30e1c:	1906b03a 	or	r3,r3,r4
   30e20:	dfc00117 	ldw	ra,4(sp)
   30e24:	dc000017 	ldw	r16,0(sp)
   30e28:	dec00204 	addi	sp,sp,8
   30e2c:	f800283a 	ret
   30e30:	00c002c4 	movi	r3,11
   30e34:	188bc83a 	sub	r5,r3,r2
   30e38:	814ad83a 	srl	r5,r16,r5
   30e3c:	00c00434 	movhi	r3,16
   30e40:	18ffffc4 	addi	r3,r3,-1
   30e44:	81a0983a 	sll	r16,r16,r6
   30e48:	2101ffcc 	andi	r4,r4,2047
   30e4c:	28ca703a 	and	r5,r5,r3
   30e50:	003fed06 	br	30e08 <__alt_data_end+0xf8030e08>
   30e54:	0009883a 	mov	r4,zero
   30e58:	000b883a 	mov	r5,zero
   30e5c:	003fea06 	br	30e08 <__alt_data_end+0xf8030e08>

00030e60 <__clzsi2>:
   30e60:	00bfffd4 	movui	r2,65535
   30e64:	11000536 	bltu	r2,r4,30e7c <__clzsi2+0x1c>
   30e68:	00803fc4 	movi	r2,255
   30e6c:	11000f36 	bltu	r2,r4,30eac <__clzsi2+0x4c>
   30e70:	00800804 	movi	r2,32
   30e74:	0007883a 	mov	r3,zero
   30e78:	00000506 	br	30e90 <__clzsi2+0x30>
   30e7c:	00804034 	movhi	r2,256
   30e80:	10bfffc4 	addi	r2,r2,-1
   30e84:	11000c2e 	bgeu	r2,r4,30eb8 <__clzsi2+0x58>
   30e88:	00800204 	movi	r2,8
   30e8c:	00c00604 	movi	r3,24
   30e90:	20c8d83a 	srl	r4,r4,r3
   30e94:	00c10034 	movhi	r3,1024
   30e98:	18c0a504 	addi	r3,r3,660
   30e9c:	1909883a 	add	r4,r3,r4
   30ea0:	20c00003 	ldbu	r3,0(r4)
   30ea4:	10c5c83a 	sub	r2,r2,r3
   30ea8:	f800283a 	ret
   30eac:	00800604 	movi	r2,24
   30eb0:	00c00204 	movi	r3,8
   30eb4:	003ff606 	br	30e90 <__alt_data_end+0xf8030e90>
   30eb8:	00800404 	movi	r2,16
   30ebc:	1007883a 	mov	r3,r2
   30ec0:	003ff306 	br	30e90 <__alt_data_end+0xf8030e90>

00030ec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30ec4:	defffe04 	addi	sp,sp,-8
   30ec8:	dfc00115 	stw	ra,4(sp)
   30ecc:	df000015 	stw	fp,0(sp)
   30ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30ed4:	d0a00b17 	ldw	r2,-32724(gp)
   30ed8:	10000326 	beq	r2,zero,30ee8 <alt_get_errno+0x24>
   30edc:	d0a00b17 	ldw	r2,-32724(gp)
   30ee0:	103ee83a 	callr	r2
   30ee4:	00000106 	br	30eec <alt_get_errno+0x28>
   30ee8:	d0a01204 	addi	r2,gp,-32696
}
   30eec:	e037883a 	mov	sp,fp
   30ef0:	dfc00117 	ldw	ra,4(sp)
   30ef4:	df000017 	ldw	fp,0(sp)
   30ef8:	dec00204 	addi	sp,sp,8
   30efc:	f800283a 	ret

00030f00 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   30f00:	defffb04 	addi	sp,sp,-20
   30f04:	dfc00415 	stw	ra,16(sp)
   30f08:	df000315 	stw	fp,12(sp)
   30f0c:	df000304 	addi	fp,sp,12
   30f10:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   30f14:	e0bfff17 	ldw	r2,-4(fp)
   30f18:	10000616 	blt	r2,zero,30f34 <close+0x34>
   30f1c:	e0bfff17 	ldw	r2,-4(fp)
   30f20:	10c00324 	muli	r3,r2,12
   30f24:	00810034 	movhi	r2,1024
   30f28:	10833104 	addi	r2,r2,3268
   30f2c:	1885883a 	add	r2,r3,r2
   30f30:	00000106 	br	30f38 <close+0x38>
   30f34:	0005883a 	mov	r2,zero
   30f38:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   30f3c:	e0bffd17 	ldw	r2,-12(fp)
   30f40:	10001926 	beq	r2,zero,30fa8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   30f44:	e0bffd17 	ldw	r2,-12(fp)
   30f48:	10800017 	ldw	r2,0(r2)
   30f4c:	10800417 	ldw	r2,16(r2)
   30f50:	10000626 	beq	r2,zero,30f6c <close+0x6c>
   30f54:	e0bffd17 	ldw	r2,-12(fp)
   30f58:	10800017 	ldw	r2,0(r2)
   30f5c:	10800417 	ldw	r2,16(r2)
   30f60:	e13ffd17 	ldw	r4,-12(fp)
   30f64:	103ee83a 	callr	r2
   30f68:	00000106 	br	30f70 <close+0x70>
   30f6c:	0005883a 	mov	r2,zero
   30f70:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   30f74:	e13fff17 	ldw	r4,-4(fp)
   30f78:	00318140 	call	31814 <alt_release_fd>
    if (rval < 0)
   30f7c:	e0bffe17 	ldw	r2,-8(fp)
   30f80:	1000070e 	bge	r2,zero,30fa0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   30f84:	0030ec40 	call	30ec4 <alt_get_errno>
   30f88:	1007883a 	mov	r3,r2
   30f8c:	e0bffe17 	ldw	r2,-8(fp)
   30f90:	0085c83a 	sub	r2,zero,r2
   30f94:	18800015 	stw	r2,0(r3)
      return -1;
   30f98:	00bfffc4 	movi	r2,-1
   30f9c:	00000706 	br	30fbc <close+0xbc>
    }
    return 0;
   30fa0:	0005883a 	mov	r2,zero
   30fa4:	00000506 	br	30fbc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   30fa8:	0030ec40 	call	30ec4 <alt_get_errno>
   30fac:	1007883a 	mov	r3,r2
   30fb0:	00801444 	movi	r2,81
   30fb4:	18800015 	stw	r2,0(r3)
    return -1;
   30fb8:	00bfffc4 	movi	r2,-1
  }
}
   30fbc:	e037883a 	mov	sp,fp
   30fc0:	dfc00117 	ldw	ra,4(sp)
   30fc4:	df000017 	ldw	fp,0(sp)
   30fc8:	dec00204 	addi	sp,sp,8
   30fcc:	f800283a 	ret

00030fd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   30fd0:	defffc04 	addi	sp,sp,-16
   30fd4:	df000315 	stw	fp,12(sp)
   30fd8:	df000304 	addi	fp,sp,12
   30fdc:	e13ffd15 	stw	r4,-12(fp)
   30fe0:	e17ffe15 	stw	r5,-8(fp)
   30fe4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   30fe8:	e0bfff17 	ldw	r2,-4(fp)
}
   30fec:	e037883a 	mov	sp,fp
   30ff0:	df000017 	ldw	fp,0(sp)
   30ff4:	dec00104 	addi	sp,sp,4
   30ff8:	f800283a 	ret

00030ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30ffc:	defffe04 	addi	sp,sp,-8
   31000:	dfc00115 	stw	ra,4(sp)
   31004:	df000015 	stw	fp,0(sp)
   31008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3100c:	d0a00b17 	ldw	r2,-32724(gp)
   31010:	10000326 	beq	r2,zero,31020 <alt_get_errno+0x24>
   31014:	d0a00b17 	ldw	r2,-32724(gp)
   31018:	103ee83a 	callr	r2
   3101c:	00000106 	br	31024 <alt_get_errno+0x28>
   31020:	d0a01204 	addi	r2,gp,-32696
}
   31024:	e037883a 	mov	sp,fp
   31028:	dfc00117 	ldw	ra,4(sp)
   3102c:	df000017 	ldw	fp,0(sp)
   31030:	dec00204 	addi	sp,sp,8
   31034:	f800283a 	ret

00031038 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   31038:	defffb04 	addi	sp,sp,-20
   3103c:	dfc00415 	stw	ra,16(sp)
   31040:	df000315 	stw	fp,12(sp)
   31044:	df000304 	addi	fp,sp,12
   31048:	e13ffe15 	stw	r4,-8(fp)
   3104c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31050:	e0bffe17 	ldw	r2,-8(fp)
   31054:	10000616 	blt	r2,zero,31070 <fstat+0x38>
   31058:	e0bffe17 	ldw	r2,-8(fp)
   3105c:	10c00324 	muli	r3,r2,12
   31060:	00810034 	movhi	r2,1024
   31064:	10833104 	addi	r2,r2,3268
   31068:	1885883a 	add	r2,r3,r2
   3106c:	00000106 	br	31074 <fstat+0x3c>
   31070:	0005883a 	mov	r2,zero
   31074:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   31078:	e0bffd17 	ldw	r2,-12(fp)
   3107c:	10001026 	beq	r2,zero,310c0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   31080:	e0bffd17 	ldw	r2,-12(fp)
   31084:	10800017 	ldw	r2,0(r2)
   31088:	10800817 	ldw	r2,32(r2)
   3108c:	10000726 	beq	r2,zero,310ac <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   31090:	e0bffd17 	ldw	r2,-12(fp)
   31094:	10800017 	ldw	r2,0(r2)
   31098:	10800817 	ldw	r2,32(r2)
   3109c:	e17fff17 	ldw	r5,-4(fp)
   310a0:	e13ffd17 	ldw	r4,-12(fp)
   310a4:	103ee83a 	callr	r2
   310a8:	00000a06 	br	310d4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   310ac:	e0bfff17 	ldw	r2,-4(fp)
   310b0:	00c80004 	movi	r3,8192
   310b4:	10c00115 	stw	r3,4(r2)
      return 0;
   310b8:	0005883a 	mov	r2,zero
   310bc:	00000506 	br	310d4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   310c0:	0030ffc0 	call	30ffc <alt_get_errno>
   310c4:	1007883a 	mov	r3,r2
   310c8:	00801444 	movi	r2,81
   310cc:	18800015 	stw	r2,0(r3)
    return -1;
   310d0:	00bfffc4 	movi	r2,-1
  }
}
   310d4:	e037883a 	mov	sp,fp
   310d8:	dfc00117 	ldw	ra,4(sp)
   310dc:	df000017 	ldw	fp,0(sp)
   310e0:	dec00204 	addi	sp,sp,8
   310e4:	f800283a 	ret

000310e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   310e8:	defffe04 	addi	sp,sp,-8
   310ec:	dfc00115 	stw	ra,4(sp)
   310f0:	df000015 	stw	fp,0(sp)
   310f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   310f8:	d0a00b17 	ldw	r2,-32724(gp)
   310fc:	10000326 	beq	r2,zero,3110c <alt_get_errno+0x24>
   31100:	d0a00b17 	ldw	r2,-32724(gp)
   31104:	103ee83a 	callr	r2
   31108:	00000106 	br	31110 <alt_get_errno+0x28>
   3110c:	d0a01204 	addi	r2,gp,-32696
}
   31110:	e037883a 	mov	sp,fp
   31114:	dfc00117 	ldw	ra,4(sp)
   31118:	df000017 	ldw	fp,0(sp)
   3111c:	dec00204 	addi	sp,sp,8
   31120:	f800283a 	ret

00031124 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   31124:	deffed04 	addi	sp,sp,-76
   31128:	dfc01215 	stw	ra,72(sp)
   3112c:	df001115 	stw	fp,68(sp)
   31130:	df001104 	addi	fp,sp,68
   31134:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31138:	e0bfff17 	ldw	r2,-4(fp)
   3113c:	10000616 	blt	r2,zero,31158 <isatty+0x34>
   31140:	e0bfff17 	ldw	r2,-4(fp)
   31144:	10c00324 	muli	r3,r2,12
   31148:	00810034 	movhi	r2,1024
   3114c:	10833104 	addi	r2,r2,3268
   31150:	1885883a 	add	r2,r3,r2
   31154:	00000106 	br	3115c <isatty+0x38>
   31158:	0005883a 	mov	r2,zero
   3115c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   31160:	e0bfef17 	ldw	r2,-68(fp)
   31164:	10000e26 	beq	r2,zero,311a0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   31168:	e0bfef17 	ldw	r2,-68(fp)
   3116c:	10800017 	ldw	r2,0(r2)
   31170:	10800817 	ldw	r2,32(r2)
   31174:	1000021e 	bne	r2,zero,31180 <isatty+0x5c>
    {
      return 1;
   31178:	00800044 	movi	r2,1
   3117c:	00000d06 	br	311b4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   31180:	e0bff004 	addi	r2,fp,-64
   31184:	100b883a 	mov	r5,r2
   31188:	e13fff17 	ldw	r4,-4(fp)
   3118c:	00310380 	call	31038 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   31190:	e0bff117 	ldw	r2,-60(fp)
   31194:	10880020 	cmpeqi	r2,r2,8192
   31198:	10803fcc 	andi	r2,r2,255
   3119c:	00000506 	br	311b4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   311a0:	00310e80 	call	310e8 <alt_get_errno>
   311a4:	1007883a 	mov	r3,r2
   311a8:	00801444 	movi	r2,81
   311ac:	18800015 	stw	r2,0(r3)
    return 0;
   311b0:	0005883a 	mov	r2,zero
  }
}
   311b4:	e037883a 	mov	sp,fp
   311b8:	dfc00117 	ldw	ra,4(sp)
   311bc:	df000017 	ldw	fp,0(sp)
   311c0:	dec00204 	addi	sp,sp,8
   311c4:	f800283a 	ret

000311c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   311c8:	defffc04 	addi	sp,sp,-16
   311cc:	df000315 	stw	fp,12(sp)
   311d0:	df000304 	addi	fp,sp,12
   311d4:	e13ffd15 	stw	r4,-12(fp)
   311d8:	e17ffe15 	stw	r5,-8(fp)
   311dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   311e0:	e0fffe17 	ldw	r3,-8(fp)
   311e4:	e0bffd17 	ldw	r2,-12(fp)
   311e8:	18800c26 	beq	r3,r2,3121c <alt_load_section+0x54>
  {
    while( to != end )
   311ec:	00000806 	br	31210 <alt_load_section+0x48>
    {
      *to++ = *from++;
   311f0:	e0bffe17 	ldw	r2,-8(fp)
   311f4:	10c00104 	addi	r3,r2,4
   311f8:	e0fffe15 	stw	r3,-8(fp)
   311fc:	e0fffd17 	ldw	r3,-12(fp)
   31200:	19000104 	addi	r4,r3,4
   31204:	e13ffd15 	stw	r4,-12(fp)
   31208:	18c00017 	ldw	r3,0(r3)
   3120c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   31210:	e0fffe17 	ldw	r3,-8(fp)
   31214:	e0bfff17 	ldw	r2,-4(fp)
   31218:	18bff51e 	bne	r3,r2,311f0 <__alt_data_end+0xf80311f0>
    {
      *to++ = *from++;
    }
  }
}
   3121c:	0001883a 	nop
   31220:	e037883a 	mov	sp,fp
   31224:	df000017 	ldw	fp,0(sp)
   31228:	dec00104 	addi	sp,sp,4
   3122c:	f800283a 	ret

00031230 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   31230:	defffe04 	addi	sp,sp,-8
   31234:	dfc00115 	stw	ra,4(sp)
   31238:	df000015 	stw	fp,0(sp)
   3123c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   31240:	01810034 	movhi	r6,1024
   31244:	3187fa04 	addi	r6,r6,8168
   31248:	01410034 	movhi	r5,1024
   3124c:	2940fe04 	addi	r5,r5,1016
   31250:	010000f4 	movhi	r4,3
   31254:	21193204 	addi	r4,r4,25800
   31258:	00311c80 	call	311c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   3125c:	018000b4 	movhi	r6,2
   31260:	31809104 	addi	r6,r6,580
   31264:	014000b4 	movhi	r5,2
   31268:	29400804 	addi	r5,r5,32
   3126c:	010000b4 	movhi	r4,2
   31270:	21000804 	addi	r4,r4,32
   31274:	00311c80 	call	311c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   31278:	01810034 	movhi	r6,1024
   3127c:	3180fe04 	addi	r6,r6,1016
   31280:	01410034 	movhi	r5,1024
   31284:	29400004 	addi	r5,r5,0
   31288:	010000f4 	movhi	r4,3
   3128c:	21183404 	addi	r4,r4,24784
   31290:	00311c80 	call	311c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   31294:	0034e400 	call	34e40 <alt_dcache_flush_all>
  alt_icache_flush_all();
   31298:	00352640 	call	35264 <alt_icache_flush_all>
}
   3129c:	0001883a 	nop
   312a0:	e037883a 	mov	sp,fp
   312a4:	dfc00117 	ldw	ra,4(sp)
   312a8:	df000017 	ldw	fp,0(sp)
   312ac:	dec00204 	addi	sp,sp,8
   312b0:	f800283a 	ret

000312b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   312b4:	defffe04 	addi	sp,sp,-8
   312b8:	dfc00115 	stw	ra,4(sp)
   312bc:	df000015 	stw	fp,0(sp)
   312c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   312c4:	d0a00b17 	ldw	r2,-32724(gp)
   312c8:	10000326 	beq	r2,zero,312d8 <alt_get_errno+0x24>
   312cc:	d0a00b17 	ldw	r2,-32724(gp)
   312d0:	103ee83a 	callr	r2
   312d4:	00000106 	br	312dc <alt_get_errno+0x28>
   312d8:	d0a01204 	addi	r2,gp,-32696
}
   312dc:	e037883a 	mov	sp,fp
   312e0:	dfc00117 	ldw	ra,4(sp)
   312e4:	df000017 	ldw	fp,0(sp)
   312e8:	dec00204 	addi	sp,sp,8
   312ec:	f800283a 	ret

000312f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   312f0:	defff904 	addi	sp,sp,-28
   312f4:	dfc00615 	stw	ra,24(sp)
   312f8:	df000515 	stw	fp,20(sp)
   312fc:	df000504 	addi	fp,sp,20
   31300:	e13ffd15 	stw	r4,-12(fp)
   31304:	e17ffe15 	stw	r5,-8(fp)
   31308:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   3130c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31310:	e0bffd17 	ldw	r2,-12(fp)
   31314:	10000616 	blt	r2,zero,31330 <lseek+0x40>
   31318:	e0bffd17 	ldw	r2,-12(fp)
   3131c:	10c00324 	muli	r3,r2,12
   31320:	00810034 	movhi	r2,1024
   31324:	10833104 	addi	r2,r2,3268
   31328:	1885883a 	add	r2,r3,r2
   3132c:	00000106 	br	31334 <lseek+0x44>
   31330:	0005883a 	mov	r2,zero
   31334:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   31338:	e0bffc17 	ldw	r2,-16(fp)
   3133c:	10001026 	beq	r2,zero,31380 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   31340:	e0bffc17 	ldw	r2,-16(fp)
   31344:	10800017 	ldw	r2,0(r2)
   31348:	10800717 	ldw	r2,28(r2)
   3134c:	10000926 	beq	r2,zero,31374 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   31350:	e0bffc17 	ldw	r2,-16(fp)
   31354:	10800017 	ldw	r2,0(r2)
   31358:	10800717 	ldw	r2,28(r2)
   3135c:	e1bfff17 	ldw	r6,-4(fp)
   31360:	e17ffe17 	ldw	r5,-8(fp)
   31364:	e13ffc17 	ldw	r4,-16(fp)
   31368:	103ee83a 	callr	r2
   3136c:	e0bffb15 	stw	r2,-20(fp)
   31370:	00000506 	br	31388 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   31374:	00bfde84 	movi	r2,-134
   31378:	e0bffb15 	stw	r2,-20(fp)
   3137c:	00000206 	br	31388 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   31380:	00bfebc4 	movi	r2,-81
   31384:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   31388:	e0bffb17 	ldw	r2,-20(fp)
   3138c:	1000070e 	bge	r2,zero,313ac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   31390:	00312b40 	call	312b4 <alt_get_errno>
   31394:	1007883a 	mov	r3,r2
   31398:	e0bffb17 	ldw	r2,-20(fp)
   3139c:	0085c83a 	sub	r2,zero,r2
   313a0:	18800015 	stw	r2,0(r3)
    rc = -1;
   313a4:	00bfffc4 	movi	r2,-1
   313a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   313ac:	e0bffb17 	ldw	r2,-20(fp)
}
   313b0:	e037883a 	mov	sp,fp
   313b4:	dfc00117 	ldw	ra,4(sp)
   313b8:	df000017 	ldw	fp,0(sp)
   313bc:	dec00204 	addi	sp,sp,8
   313c0:	f800283a 	ret

000313c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   313c4:	defffd04 	addi	sp,sp,-12
   313c8:	dfc00215 	stw	ra,8(sp)
   313cc:	df000115 	stw	fp,4(sp)
   313d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   313d4:	0009883a 	mov	r4,zero
   313d8:	0031ac00 	call	31ac0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   313dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   313e0:	0031af80 	call	31af8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   313e4:	01810034 	movhi	r6,1024
   313e8:	3180e804 	addi	r6,r6,928
   313ec:	01410034 	movhi	r5,1024
   313f0:	2940e804 	addi	r5,r5,928
   313f4:	01010034 	movhi	r4,1024
   313f8:	2100e804 	addi	r4,r4,928
   313fc:	00355fc0 	call	355fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   31400:	0034f680 	call	34f68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   31404:	010000f4 	movhi	r4,3
   31408:	2113f204 	addi	r4,r4,20424
   3140c:	0035bd40 	call	35bd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   31410:	d0a01917 	ldw	r2,-32668(gp)
   31414:	d0e01a17 	ldw	r3,-32664(gp)
   31418:	d1201b17 	ldw	r4,-32660(gp)
   3141c:	200d883a 	mov	r6,r4
   31420:	180b883a 	mov	r5,r3
   31424:	1009883a 	mov	r4,r2
   31428:	00202900 	call	20290 <main>
   3142c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   31430:	01000044 	movi	r4,1
   31434:	0030f000 	call	30f00 <close>
  exit (result);
   31438:	e13fff17 	ldw	r4,-4(fp)
   3143c:	0035be80 	call	35be8 <exit>

00031440 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   31440:	defffe04 	addi	sp,sp,-8
   31444:	df000115 	stw	fp,4(sp)
   31448:	df000104 	addi	fp,sp,4
   3144c:	e13fff15 	stw	r4,-4(fp)
}
   31450:	0001883a 	nop
   31454:	e037883a 	mov	sp,fp
   31458:	df000017 	ldw	fp,0(sp)
   3145c:	dec00104 	addi	sp,sp,4
   31460:	f800283a 	ret

00031464 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   31464:	defffe04 	addi	sp,sp,-8
   31468:	df000115 	stw	fp,4(sp)
   3146c:	df000104 	addi	fp,sp,4
   31470:	e13fff15 	stw	r4,-4(fp)
}
   31474:	0001883a 	nop
   31478:	e037883a 	mov	sp,fp
   3147c:	df000017 	ldw	fp,0(sp)
   31480:	dec00104 	addi	sp,sp,4
   31484:	f800283a 	ret

00031488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31488:	defffe04 	addi	sp,sp,-8
   3148c:	dfc00115 	stw	ra,4(sp)
   31490:	df000015 	stw	fp,0(sp)
   31494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31498:	d0a00b17 	ldw	r2,-32724(gp)
   3149c:	10000326 	beq	r2,zero,314ac <alt_get_errno+0x24>
   314a0:	d0a00b17 	ldw	r2,-32724(gp)
   314a4:	103ee83a 	callr	r2
   314a8:	00000106 	br	314b0 <alt_get_errno+0x28>
   314ac:	d0a01204 	addi	r2,gp,-32696
}
   314b0:	e037883a 	mov	sp,fp
   314b4:	dfc00117 	ldw	ra,4(sp)
   314b8:	df000017 	ldw	fp,0(sp)
   314bc:	dec00204 	addi	sp,sp,8
   314c0:	f800283a 	ret

000314c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   314c4:	defffd04 	addi	sp,sp,-12
   314c8:	df000215 	stw	fp,8(sp)
   314cc:	df000204 	addi	fp,sp,8
   314d0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   314d4:	e0bfff17 	ldw	r2,-4(fp)
   314d8:	10800217 	ldw	r2,8(r2)
   314dc:	10d00034 	orhi	r3,r2,16384
   314e0:	e0bfff17 	ldw	r2,-4(fp)
   314e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   314e8:	e03ffe15 	stw	zero,-8(fp)
   314ec:	00001d06 	br	31564 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   314f0:	00810034 	movhi	r2,1024
   314f4:	10833104 	addi	r2,r2,3268
   314f8:	e0fffe17 	ldw	r3,-8(fp)
   314fc:	18c00324 	muli	r3,r3,12
   31500:	10c5883a 	add	r2,r2,r3
   31504:	10c00017 	ldw	r3,0(r2)
   31508:	e0bfff17 	ldw	r2,-4(fp)
   3150c:	10800017 	ldw	r2,0(r2)
   31510:	1880111e 	bne	r3,r2,31558 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31514:	00810034 	movhi	r2,1024
   31518:	10833104 	addi	r2,r2,3268
   3151c:	e0fffe17 	ldw	r3,-8(fp)
   31520:	18c00324 	muli	r3,r3,12
   31524:	10c5883a 	add	r2,r2,r3
   31528:	10800204 	addi	r2,r2,8
   3152c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   31530:	1000090e 	bge	r2,zero,31558 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   31534:	e0bffe17 	ldw	r2,-8(fp)
   31538:	10c00324 	muli	r3,r2,12
   3153c:	00810034 	movhi	r2,1024
   31540:	10833104 	addi	r2,r2,3268
   31544:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   31548:	e0bfff17 	ldw	r2,-4(fp)
   3154c:	18800226 	beq	r3,r2,31558 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   31550:	00bffcc4 	movi	r2,-13
   31554:	00000806 	br	31578 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   31558:	e0bffe17 	ldw	r2,-8(fp)
   3155c:	10800044 	addi	r2,r2,1
   31560:	e0bffe15 	stw	r2,-8(fp)
   31564:	d0a00a17 	ldw	r2,-32728(gp)
   31568:	1007883a 	mov	r3,r2
   3156c:	e0bffe17 	ldw	r2,-8(fp)
   31570:	18bfdf2e 	bgeu	r3,r2,314f0 <__alt_data_end+0xf80314f0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   31574:	0005883a 	mov	r2,zero
}
   31578:	e037883a 	mov	sp,fp
   3157c:	df000017 	ldw	fp,0(sp)
   31580:	dec00104 	addi	sp,sp,4
   31584:	f800283a 	ret

00031588 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   31588:	defff604 	addi	sp,sp,-40
   3158c:	dfc00915 	stw	ra,36(sp)
   31590:	df000815 	stw	fp,32(sp)
   31594:	df000804 	addi	fp,sp,32
   31598:	e13ffd15 	stw	r4,-12(fp)
   3159c:	e17ffe15 	stw	r5,-8(fp)
   315a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   315a4:	00bfffc4 	movi	r2,-1
   315a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   315ac:	00bffb44 	movi	r2,-19
   315b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   315b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   315b8:	d1600804 	addi	r5,gp,-32736
   315bc:	e13ffd17 	ldw	r4,-12(fp)
   315c0:	00350280 	call	35028 <alt_find_dev>
   315c4:	e0bff815 	stw	r2,-32(fp)
   315c8:	e0bff817 	ldw	r2,-32(fp)
   315cc:	1000051e 	bne	r2,zero,315e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   315d0:	e13ffd17 	ldw	r4,-12(fp)
   315d4:	00350b80 	call	350b8 <alt_find_file>
   315d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   315dc:	00800044 	movi	r2,1
   315e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   315e4:	e0bff817 	ldw	r2,-32(fp)
   315e8:	10002926 	beq	r2,zero,31690 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   315ec:	e13ff817 	ldw	r4,-32(fp)
   315f0:	00351c00 	call	351c0 <alt_get_fd>
   315f4:	e0bff915 	stw	r2,-28(fp)
   315f8:	e0bff917 	ldw	r2,-28(fp)
   315fc:	1000030e 	bge	r2,zero,3160c <open+0x84>
    {
      status = index;
   31600:	e0bff917 	ldw	r2,-28(fp)
   31604:	e0bffa15 	stw	r2,-24(fp)
   31608:	00002306 	br	31698 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   3160c:	e0bff917 	ldw	r2,-28(fp)
   31610:	10c00324 	muli	r3,r2,12
   31614:	00810034 	movhi	r2,1024
   31618:	10833104 	addi	r2,r2,3268
   3161c:	1885883a 	add	r2,r3,r2
   31620:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   31624:	e0fffe17 	ldw	r3,-8(fp)
   31628:	00900034 	movhi	r2,16384
   3162c:	10bfffc4 	addi	r2,r2,-1
   31630:	1886703a 	and	r3,r3,r2
   31634:	e0bffc17 	ldw	r2,-16(fp)
   31638:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   3163c:	e0bffb17 	ldw	r2,-20(fp)
   31640:	1000051e 	bne	r2,zero,31658 <open+0xd0>
   31644:	e13ffc17 	ldw	r4,-16(fp)
   31648:	00314c40 	call	314c4 <alt_file_locked>
   3164c:	e0bffa15 	stw	r2,-24(fp)
   31650:	e0bffa17 	ldw	r2,-24(fp)
   31654:	10001016 	blt	r2,zero,31698 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   31658:	e0bff817 	ldw	r2,-32(fp)
   3165c:	10800317 	ldw	r2,12(r2)
   31660:	10000826 	beq	r2,zero,31684 <open+0xfc>
   31664:	e0bff817 	ldw	r2,-32(fp)
   31668:	10800317 	ldw	r2,12(r2)
   3166c:	e1ffff17 	ldw	r7,-4(fp)
   31670:	e1bffe17 	ldw	r6,-8(fp)
   31674:	e17ffd17 	ldw	r5,-12(fp)
   31678:	e13ffc17 	ldw	r4,-16(fp)
   3167c:	103ee83a 	callr	r2
   31680:	00000106 	br	31688 <open+0x100>
   31684:	0005883a 	mov	r2,zero
   31688:	e0bffa15 	stw	r2,-24(fp)
   3168c:	00000206 	br	31698 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   31690:	00bffb44 	movi	r2,-19
   31694:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   31698:	e0bffa17 	ldw	r2,-24(fp)
   3169c:	1000090e 	bge	r2,zero,316c4 <open+0x13c>
  {
    alt_release_fd (index);  
   316a0:	e13ff917 	ldw	r4,-28(fp)
   316a4:	00318140 	call	31814 <alt_release_fd>
    ALT_ERRNO = -status;
   316a8:	00314880 	call	31488 <alt_get_errno>
   316ac:	1007883a 	mov	r3,r2
   316b0:	e0bffa17 	ldw	r2,-24(fp)
   316b4:	0085c83a 	sub	r2,zero,r2
   316b8:	18800015 	stw	r2,0(r3)
    return -1;
   316bc:	00bfffc4 	movi	r2,-1
   316c0:	00000106 	br	316c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   316c4:	e0bff917 	ldw	r2,-28(fp)
}
   316c8:	e037883a 	mov	sp,fp
   316cc:	dfc00117 	ldw	ra,4(sp)
   316d0:	df000017 	ldw	fp,0(sp)
   316d4:	dec00204 	addi	sp,sp,8
   316d8:	f800283a 	ret

000316dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   316dc:	defffe04 	addi	sp,sp,-8
   316e0:	dfc00115 	stw	ra,4(sp)
   316e4:	df000015 	stw	fp,0(sp)
   316e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   316ec:	d0a00b17 	ldw	r2,-32724(gp)
   316f0:	10000326 	beq	r2,zero,31700 <alt_get_errno+0x24>
   316f4:	d0a00b17 	ldw	r2,-32724(gp)
   316f8:	103ee83a 	callr	r2
   316fc:	00000106 	br	31704 <alt_get_errno+0x28>
   31700:	d0a01204 	addi	r2,gp,-32696
}
   31704:	e037883a 	mov	sp,fp
   31708:	dfc00117 	ldw	ra,4(sp)
   3170c:	df000017 	ldw	fp,0(sp)
   31710:	dec00204 	addi	sp,sp,8
   31714:	f800283a 	ret

00031718 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   31718:	defff904 	addi	sp,sp,-28
   3171c:	dfc00615 	stw	ra,24(sp)
   31720:	df000515 	stw	fp,20(sp)
   31724:	df000504 	addi	fp,sp,20
   31728:	e13ffd15 	stw	r4,-12(fp)
   3172c:	e17ffe15 	stw	r5,-8(fp)
   31730:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31734:	e0bffd17 	ldw	r2,-12(fp)
   31738:	10000616 	blt	r2,zero,31754 <read+0x3c>
   3173c:	e0bffd17 	ldw	r2,-12(fp)
   31740:	10c00324 	muli	r3,r2,12
   31744:	00810034 	movhi	r2,1024
   31748:	10833104 	addi	r2,r2,3268
   3174c:	1885883a 	add	r2,r3,r2
   31750:	00000106 	br	31758 <read+0x40>
   31754:	0005883a 	mov	r2,zero
   31758:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   3175c:	e0bffb17 	ldw	r2,-20(fp)
   31760:	10002226 	beq	r2,zero,317ec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31764:	e0bffb17 	ldw	r2,-20(fp)
   31768:	10800217 	ldw	r2,8(r2)
   3176c:	108000cc 	andi	r2,r2,3
   31770:	10800060 	cmpeqi	r2,r2,1
   31774:	1000181e 	bne	r2,zero,317d8 <read+0xc0>
        (fd->dev->read))
   31778:	e0bffb17 	ldw	r2,-20(fp)
   3177c:	10800017 	ldw	r2,0(r2)
   31780:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31784:	10001426 	beq	r2,zero,317d8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   31788:	e0bffb17 	ldw	r2,-20(fp)
   3178c:	10800017 	ldw	r2,0(r2)
   31790:	10800517 	ldw	r2,20(r2)
   31794:	e0ffff17 	ldw	r3,-4(fp)
   31798:	180d883a 	mov	r6,r3
   3179c:	e17ffe17 	ldw	r5,-8(fp)
   317a0:	e13ffb17 	ldw	r4,-20(fp)
   317a4:	103ee83a 	callr	r2
   317a8:	e0bffc15 	stw	r2,-16(fp)
   317ac:	e0bffc17 	ldw	r2,-16(fp)
   317b0:	1000070e 	bge	r2,zero,317d0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   317b4:	00316dc0 	call	316dc <alt_get_errno>
   317b8:	1007883a 	mov	r3,r2
   317bc:	e0bffc17 	ldw	r2,-16(fp)
   317c0:	0085c83a 	sub	r2,zero,r2
   317c4:	18800015 	stw	r2,0(r3)
          return -1;
   317c8:	00bfffc4 	movi	r2,-1
   317cc:	00000c06 	br	31800 <read+0xe8>
        }
        return rval;
   317d0:	e0bffc17 	ldw	r2,-16(fp)
   317d4:	00000a06 	br	31800 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   317d8:	00316dc0 	call	316dc <alt_get_errno>
   317dc:	1007883a 	mov	r3,r2
   317e0:	00800344 	movi	r2,13
   317e4:	18800015 	stw	r2,0(r3)
   317e8:	00000406 	br	317fc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   317ec:	00316dc0 	call	316dc <alt_get_errno>
   317f0:	1007883a 	mov	r3,r2
   317f4:	00801444 	movi	r2,81
   317f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   317fc:	00bfffc4 	movi	r2,-1
}
   31800:	e037883a 	mov	sp,fp
   31804:	dfc00117 	ldw	ra,4(sp)
   31808:	df000017 	ldw	fp,0(sp)
   3180c:	dec00204 	addi	sp,sp,8
   31810:	f800283a 	ret

00031814 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   31814:	defffe04 	addi	sp,sp,-8
   31818:	df000115 	stw	fp,4(sp)
   3181c:	df000104 	addi	fp,sp,4
   31820:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   31824:	e0bfff17 	ldw	r2,-4(fp)
   31828:	108000d0 	cmplti	r2,r2,3
   3182c:	10000d1e 	bne	r2,zero,31864 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   31830:	00810034 	movhi	r2,1024
   31834:	10833104 	addi	r2,r2,3268
   31838:	e0ffff17 	ldw	r3,-4(fp)
   3183c:	18c00324 	muli	r3,r3,12
   31840:	10c5883a 	add	r2,r2,r3
   31844:	10800204 	addi	r2,r2,8
   31848:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   3184c:	00810034 	movhi	r2,1024
   31850:	10833104 	addi	r2,r2,3268
   31854:	e0ffff17 	ldw	r3,-4(fp)
   31858:	18c00324 	muli	r3,r3,12
   3185c:	10c5883a 	add	r2,r2,r3
   31860:	10000015 	stw	zero,0(r2)
  }
}
   31864:	0001883a 	nop
   31868:	e037883a 	mov	sp,fp
   3186c:	df000017 	ldw	fp,0(sp)
   31870:	dec00104 	addi	sp,sp,4
   31874:	f800283a 	ret

00031878 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   31878:	defff904 	addi	sp,sp,-28
   3187c:	df000615 	stw	fp,24(sp)
   31880:	df000604 	addi	fp,sp,24
   31884:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31888:	0005303a 	rdctl	r2,status
   3188c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31890:	e0fffe17 	ldw	r3,-8(fp)
   31894:	00bfff84 	movi	r2,-2
   31898:	1884703a 	and	r2,r3,r2
   3189c:	1001703a 	wrctl	status,r2
  
  return context;
   318a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   318a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   318a8:	d0a00c17 	ldw	r2,-32720(gp)
   318ac:	10c000c4 	addi	r3,r2,3
   318b0:	00bfff04 	movi	r2,-4
   318b4:	1884703a 	and	r2,r3,r2
   318b8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   318bc:	d0e00c17 	ldw	r3,-32720(gp)
   318c0:	e0bfff17 	ldw	r2,-4(fp)
   318c4:	1887883a 	add	r3,r3,r2
   318c8:	00820034 	movhi	r2,2048
   318cc:	10800004 	addi	r2,r2,0
   318d0:	10c0062e 	bgeu	r2,r3,318ec <sbrk+0x74>
   318d4:	e0bffb17 	ldw	r2,-20(fp)
   318d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   318dc:	e0bffa17 	ldw	r2,-24(fp)
   318e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   318e4:	00bfffc4 	movi	r2,-1
   318e8:	00000b06 	br	31918 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   318ec:	d0a00c17 	ldw	r2,-32720(gp)
   318f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   318f4:	d0e00c17 	ldw	r3,-32720(gp)
   318f8:	e0bfff17 	ldw	r2,-4(fp)
   318fc:	1885883a 	add	r2,r3,r2
   31900:	d0a00c15 	stw	r2,-32720(gp)
   31904:	e0bffb17 	ldw	r2,-20(fp)
   31908:	e0bffc15 	stw	r2,-16(fp)
   3190c:	e0bffc17 	ldw	r2,-16(fp)
   31910:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   31914:	e0bffd17 	ldw	r2,-12(fp)
} 
   31918:	e037883a 	mov	sp,fp
   3191c:	df000017 	ldw	fp,0(sp)
   31920:	dec00104 	addi	sp,sp,4
   31924:	f800283a 	ret

00031928 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   31928:	defffd04 	addi	sp,sp,-12
   3192c:	dfc00215 	stw	ra,8(sp)
   31930:	df000115 	stw	fp,4(sp)
   31934:	df000104 	addi	fp,sp,4
   31938:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   3193c:	e13fff17 	ldw	r4,-4(fp)
   31940:	0034ce80 	call	34ce8 <alt_busy_sleep>
}
   31944:	e037883a 	mov	sp,fp
   31948:	dfc00117 	ldw	ra,4(sp)
   3194c:	df000017 	ldw	fp,0(sp)
   31950:	dec00204 	addi	sp,sp,8
   31954:	f800283a 	ret

00031958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31958:	defffe04 	addi	sp,sp,-8
   3195c:	dfc00115 	stw	ra,4(sp)
   31960:	df000015 	stw	fp,0(sp)
   31964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31968:	d0a00b17 	ldw	r2,-32724(gp)
   3196c:	10000326 	beq	r2,zero,3197c <alt_get_errno+0x24>
   31970:	d0a00b17 	ldw	r2,-32724(gp)
   31974:	103ee83a 	callr	r2
   31978:	00000106 	br	31980 <alt_get_errno+0x28>
   3197c:	d0a01204 	addi	r2,gp,-32696
}
   31980:	e037883a 	mov	sp,fp
   31984:	dfc00117 	ldw	ra,4(sp)
   31988:	df000017 	ldw	fp,0(sp)
   3198c:	dec00204 	addi	sp,sp,8
   31990:	f800283a 	ret

00031994 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   31994:	defff904 	addi	sp,sp,-28
   31998:	dfc00615 	stw	ra,24(sp)
   3199c:	df000515 	stw	fp,20(sp)
   319a0:	df000504 	addi	fp,sp,20
   319a4:	e13ffd15 	stw	r4,-12(fp)
   319a8:	e17ffe15 	stw	r5,-8(fp)
   319ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   319b0:	e0bffd17 	ldw	r2,-12(fp)
   319b4:	10000616 	blt	r2,zero,319d0 <write+0x3c>
   319b8:	e0bffd17 	ldw	r2,-12(fp)
   319bc:	10c00324 	muli	r3,r2,12
   319c0:	00810034 	movhi	r2,1024
   319c4:	10833104 	addi	r2,r2,3268
   319c8:	1885883a 	add	r2,r3,r2
   319cc:	00000106 	br	319d4 <write+0x40>
   319d0:	0005883a 	mov	r2,zero
   319d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   319d8:	e0bffb17 	ldw	r2,-20(fp)
   319dc:	10002126 	beq	r2,zero,31a64 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   319e0:	e0bffb17 	ldw	r2,-20(fp)
   319e4:	10800217 	ldw	r2,8(r2)
   319e8:	108000cc 	andi	r2,r2,3
   319ec:	10001826 	beq	r2,zero,31a50 <write+0xbc>
   319f0:	e0bffb17 	ldw	r2,-20(fp)
   319f4:	10800017 	ldw	r2,0(r2)
   319f8:	10800617 	ldw	r2,24(r2)
   319fc:	10001426 	beq	r2,zero,31a50 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   31a00:	e0bffb17 	ldw	r2,-20(fp)
   31a04:	10800017 	ldw	r2,0(r2)
   31a08:	10800617 	ldw	r2,24(r2)
   31a0c:	e0ffff17 	ldw	r3,-4(fp)
   31a10:	180d883a 	mov	r6,r3
   31a14:	e17ffe17 	ldw	r5,-8(fp)
   31a18:	e13ffb17 	ldw	r4,-20(fp)
   31a1c:	103ee83a 	callr	r2
   31a20:	e0bffc15 	stw	r2,-16(fp)
   31a24:	e0bffc17 	ldw	r2,-16(fp)
   31a28:	1000070e 	bge	r2,zero,31a48 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   31a2c:	00319580 	call	31958 <alt_get_errno>
   31a30:	1007883a 	mov	r3,r2
   31a34:	e0bffc17 	ldw	r2,-16(fp)
   31a38:	0085c83a 	sub	r2,zero,r2
   31a3c:	18800015 	stw	r2,0(r3)
        return -1;
   31a40:	00bfffc4 	movi	r2,-1
   31a44:	00000c06 	br	31a78 <write+0xe4>
      }
      return rval;
   31a48:	e0bffc17 	ldw	r2,-16(fp)
   31a4c:	00000a06 	br	31a78 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   31a50:	00319580 	call	31958 <alt_get_errno>
   31a54:	1007883a 	mov	r3,r2
   31a58:	00800344 	movi	r2,13
   31a5c:	18800015 	stw	r2,0(r3)
   31a60:	00000406 	br	31a74 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   31a64:	00319580 	call	31958 <alt_get_errno>
   31a68:	1007883a 	mov	r3,r2
   31a6c:	00801444 	movi	r2,81
   31a70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   31a74:	00bfffc4 	movi	r2,-1
}
   31a78:	e037883a 	mov	sp,fp
   31a7c:	dfc00117 	ldw	ra,4(sp)
   31a80:	df000017 	ldw	fp,0(sp)
   31a84:	dec00204 	addi	sp,sp,8
   31a88:	f800283a 	ret

00031a8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   31a8c:	defffd04 	addi	sp,sp,-12
   31a90:	dfc00215 	stw	ra,8(sp)
   31a94:	df000115 	stw	fp,4(sp)
   31a98:	df000104 	addi	fp,sp,4
   31a9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   31aa0:	d1600804 	addi	r5,gp,-32736
   31aa4:	e13fff17 	ldw	r4,-4(fp)
   31aa8:	0034ec40 	call	34ec4 <alt_dev_llist_insert>
}
   31aac:	e037883a 	mov	sp,fp
   31ab0:	dfc00117 	ldw	ra,4(sp)
   31ab4:	df000017 	ldw	fp,0(sp)
   31ab8:	dec00204 	addi	sp,sp,8
   31abc:	f800283a 	ret

00031ac0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   31ac0:	defffd04 	addi	sp,sp,-12
   31ac4:	dfc00215 	stw	ra,8(sp)
   31ac8:	df000115 	stw	fp,4(sp)
   31acc:	df000104 	addi	fp,sp,4
   31ad0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   31ad4:	0035a840 	call	35a84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   31ad8:	00800044 	movi	r2,1
   31adc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   31ae0:	0001883a 	nop
   31ae4:	e037883a 	mov	sp,fp
   31ae8:	dfc00117 	ldw	ra,4(sp)
   31aec:	df000017 	ldw	fp,0(sp)
   31af0:	dec00204 	addi	sp,sp,8
   31af4:	f800283a 	ret

00031af8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   31af8:	defffe04 	addi	sp,sp,-8
   31afc:	dfc00115 	stw	ra,4(sp)
   31b00:	df000015 	stw	fp,0(sp)
   31b04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   31b08:	01c0fa04 	movi	r7,1000
   31b0c:	018000c4 	movi	r6,3
   31b10:	000b883a 	mov	r5,zero
   31b14:	01000134 	movhi	r4,4
   31b18:	21041004 	addi	r4,r4,4160
   31b1c:	00342680 	call	34268 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
   31b20:	01010034 	movhi	r4,1024
   31b24:	21039104 	addi	r4,r4,3652
   31b28:	0031dd80 	call	31dd8 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   31b2c:	01800084 	movi	r6,2
   31b30:	000b883a 	mov	r5,zero
   31b34:	01010034 	movhi	r4,1024
   31b38:	2103a904 	addi	r4,r4,3748
   31b3c:	00338ec0 	call	338ec <altera_avalon_jtag_uart_init>
   31b40:	01010034 	movhi	r4,1024
   31b44:	21039f04 	addi	r4,r4,3708
   31b48:	0031a8c0 	call	31a8c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   31b4c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   31b50:	01800104 	movi	r6,4
   31b54:	000b883a 	mov	r5,zero
   31b58:	01010034 	movhi	r4,1024
   31b5c:	2107c104 	addi	r4,r4,7940
   31b60:	00343f40 	call	343f4 <altera_avalon_uart_init>
   31b64:	01010034 	movhi	r4,1024
   31b68:	2107b704 	addi	r4,r4,7900
   31b6c:	0031a8c0 	call	31a8c <alt_dev_reg>
}
   31b70:	0001883a 	nop
   31b74:	e037883a 	mov	sp,fp
   31b78:	dfc00117 	ldw	ra,4(sp)
   31b7c:	df000017 	ldw	fp,0(sp)
   31b80:	dec00204 	addi	sp,sp,8
   31b84:	f800283a 	ret

00031b88 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
   31b88:	defff904 	addi	sp,sp,-28
   31b8c:	dfc00615 	stw	ra,24(sp)
   31b90:	df000515 	stw	fp,20(sp)
   31b94:	df000504 	addi	fp,sp,20
   31b98:	e13fff15 	stw	r4,-4(fp)
   int timeout=100000;
   31b9c:	008000b4 	movhi	r2,2
   31ba0:	10a1a804 	addi	r2,r2,-31072
   31ba4:	e0bffb15 	stw	r2,-20(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
   31ba8:	e0bfff17 	ldw	r2,-4(fp)
   31bac:	e0bffc15 	stw	r2,-16(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
   31bb0:	e0bffc17 	ldw	r2,-16(fp)
   31bb4:	10800717 	ldw	r2,28(r2)
   31bb8:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
   31bbc:	e0bffd17 	ldw	r2,-12(fp)
   31bc0:	10800217 	ldw	r2,8(r2)
   31bc4:	10800098 	cmpnei	r2,r2,2
   31bc8:	1000251e 	bne	r2,zero,31c60 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
   31bcc:	e0bffd17 	ldw	r2,-12(fp)
   31bd0:	10c00017 	ldw	r3,0(r2)
   31bd4:	e0bffd17 	ldw	r2,-12(fp)
   31bd8:	10800117 	ldw	r2,4(r2)
   31bdc:	e13ffe04 	addi	r4,fp,-8
   31be0:	200f883a 	mov	r7,r4
   31be4:	100d883a 	mov	r6,r2
   31be8:	180b883a 	mov	r5,r3
   31bec:	e13ffc17 	ldw	r4,-16(fp)
   31bf0:	00323380 	call	32338 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
   31bf4:	e0bffd17 	ldw	r2,-12(fp)
   31bf8:	10c00117 	ldw	r3,4(r2)
   31bfc:	e0bffe17 	ldw	r2,-8(fp)
   31c00:	1887c83a 	sub	r3,r3,r2
   31c04:	e0bffd17 	ldw	r2,-12(fp)
   31c08:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
   31c0c:	e0bffd17 	ldw	r2,-12(fp)
   31c10:	10c00017 	ldw	r3,0(r2)
   31c14:	e0bffe17 	ldw	r2,-8(fp)
   31c18:	1887883a 	add	r3,r3,r2
   31c1c:	e0bffd17 	ldw	r2,-12(fp)
   31c20:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
   31c24:	e0bffd17 	ldw	r2,-12(fp)
   31c28:	10800117 	ldw	r2,4(r2)
   31c2c:	10000c26 	beq	r2,zero,31c60 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   31c30:	01400704 	movi	r5,28
   31c34:	e13ffc17 	ldw	r4,-16(fp)
   31c38:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   31c3c:	01400084 	movi	r5,2
   31c40:	e13ffc17 	ldw	r4,-16(fp)
   31c44:	003357c0 	call	3357c <alt_avalon_i2c_int_enable>
   31c48:	00000e06 	br	31c84 <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
   31c4c:	e0bffb17 	ldw	r2,-20(fp)
   31c50:	10bfffc4 	addi	r2,r2,-1
   31c54:	e0bffb15 	stw	r2,-20(fp)
   31c58:	e0bffb17 	ldw	r2,-20(fp)
   31c5c:	10000426 	beq	r2,zero,31c70 <optional_irq_callback+0xe8>

    /*transaction should be done so no or minimal looping should occur*/
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
   31c60:	e13ffc17 	ldw	r4,-16(fp)
   31c64:	00322f40 	call	322f4 <alt_avalon_i2c_is_busy>
   31c68:	103ff81e 	bne	r2,zero,31c4c <__alt_data_end+0xf8031c4c>
   31c6c:	00000106 	br	31c74 <optional_irq_callback+0xec>
    { 
      if (--timeout == 0)
      {
         break;
   31c70:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
   31c74:	e13ffc17 	ldw	r4,-16(fp)
   31c78:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>

    irq->irq_busy=0;
   31c7c:	e0bffd17 	ldw	r2,-12(fp)
   31c80:	10000215 	stw	zero,8(r2)
}
   31c84:	e037883a 	mov	sp,fp
   31c88:	dfc00117 	ldw	ra,4(sp)
   31c8c:	df000017 	ldw	fp,0(sp)
   31c90:	dec00204 	addi	sp,sp,8
   31c94:	f800283a 	ret

00031c98 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
   31c98:	defffc04 	addi	sp,sp,-16
   31c9c:	dfc00315 	stw	ra,12(sp)
   31ca0:	df000215 	stw	fp,8(sp)
   31ca4:	df000204 	addi	fp,sp,8
   31ca8:	e13ffe15 	stw	r4,-8(fp)
   31cac:	e17fff15 	stw	r5,-4(fp)
   irq_data->irq_busy=0;
   31cb0:	e0bfff17 	ldw	r2,-4(fp)
   31cb4:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
   31cb8:	e1ffff17 	ldw	r7,-4(fp)
   31cbc:	000d883a 	mov	r6,zero
   31cc0:	014000f4 	movhi	r5,3
   31cc4:	2946e204 	addi	r5,r5,7048
   31cc8:	e13ffe17 	ldw	r4,-8(fp)
   31ccc:	0031d840 	call	31d84 <alt_avalon_i2c_register_callback>
}
   31cd0:	0001883a 	nop
   31cd4:	e037883a 	mov	sp,fp
   31cd8:	dfc00117 	ldw	ra,4(sp)
   31cdc:	df000017 	ldw	fp,0(sp)
   31ce0:	dec00204 	addi	sp,sp,8
   31ce4:	f800283a 	ret

00031ce8 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
   31ce8:	defff904 	addi	sp,sp,-28
   31cec:	dfc00615 	stw	ra,24(sp)
   31cf0:	df000515 	stw	fp,20(sp)
   31cf4:	df000504 	addi	fp,sp,20
   31cf8:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
   31cfc:	e0bfff17 	ldw	r2,-4(fp)
   31d00:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   31d04:	014007c4 	movi	r5,31
   31d08:	e13ffb17 	ldw	r4,-20(fp)
   31d0c:	00335140 	call	33514 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   31d10:	01400704 	movi	r5,28
   31d14:	e13ffb17 	ldw	r4,-20(fp)
   31d18:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
   31d1c:	e0bffb17 	ldw	r2,-20(fp)
   31d20:	10800617 	ldw	r2,24(r2)
   31d24:	10001126 	beq	r2,zero,31d6c <alt_avalon_i2c_irq+0x84>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31d28:	0005303a 	rdctl	r2,status
   31d2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31d30:	e0fffd17 	ldw	r3,-12(fp)
   31d34:	00bfff84 	movi	r2,-2
   31d38:	1884703a 	and	r2,r3,r2
   31d3c:	1001703a 	wrctl	status,r2
  
  return context;
   31d40:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
   31d44:	e0bffc15 	stw	r2,-16(fp)
        dev->callback(dev);
   31d48:	e0bffb17 	ldw	r2,-20(fp)
   31d4c:	10800617 	ldw	r2,24(r2)
   31d50:	e13ffb17 	ldw	r4,-20(fp)
   31d54:	103ee83a 	callr	r2
   31d58:	e0bffc17 	ldw	r2,-16(fp)
   31d5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31d60:	e0bffe17 	ldw	r2,-8(fp)
   31d64:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    return;
   31d68:	0001883a 	nop
   31d6c:	0001883a 	nop
}
   31d70:	e037883a 	mov	sp,fp
   31d74:	dfc00117 	ldw	ra,4(sp)
   31d78:	df000017 	ldw	fp,0(sp)
   31d7c:	dec00204 	addi	sp,sp,8
   31d80:	f800283a 	ret

00031d84 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
   31d84:	defffb04 	addi	sp,sp,-20
   31d88:	df000415 	stw	fp,16(sp)
   31d8c:	df000404 	addi	fp,sp,16
   31d90:	e13ffc15 	stw	r4,-16(fp)
   31d94:	e17ffd15 	stw	r5,-12(fp)
   31d98:	e1bffe15 	stw	r6,-8(fp)
   31d9c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
   31da0:	e0bffc17 	ldw	r2,-16(fp)
   31da4:	e0fffd17 	ldw	r3,-12(fp)
   31da8:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
   31dac:	e0bffc17 	ldw	r2,-16(fp)
   31db0:	e0ffff17 	ldw	r3,-4(fp)
   31db4:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
   31db8:	e0bffc17 	ldw	r2,-16(fp)
   31dbc:	e0fffe17 	ldw	r3,-8(fp)
   31dc0:	10c00815 	stw	r3,32(r2)

    return ;
   31dc4:	0001883a 	nop
}
   31dc8:	e037883a 	mov	sp,fp
   31dcc:	df000017 	ldw	fp,0(sp)
   31dd0:	dec00104 	addi	sp,sp,4
   31dd4:	f800283a 	ret

00031dd8 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
   31dd8:	defff704 	addi	sp,sp,-36
   31ddc:	dfc00815 	stw	ra,32(sp)
   31de0:	df000715 	stw	fp,28(sp)
   31de4:	df000704 	addi	fp,sp,28
   31de8:	e13fff15 	stw	r4,-4(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
   31dec:	e13fff17 	ldw	r4,-4(fp)
   31df0:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
   31df4:	014007c4 	movi	r5,31
   31df8:	e13fff17 	ldw	r4,-4(fp)
   31dfc:	00335140 	call	33514 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   31e00:	01400704 	movi	r5,28
   31e04:	e13fff17 	ldw	r4,-4(fp)
   31e08:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
   31e0c:	014000c4 	movi	r5,3
   31e10:	e13fff17 	ldw	r4,-4(fp)
   31e14:	00337200 	call	33720 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
   31e18:	014000c4 	movi	r5,3
   31e1c:	e13fff17 	ldw	r4,-4(fp)
   31e20:	00336700 	call	33670 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
   31e24:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
   31e28:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
   31e2c:	e0bffb04 	addi	r2,fp,-20
   31e30:	018000b4 	movhi	r6,2
   31e34:	31a1a804 	addi	r6,r6,-31072
   31e38:	100b883a 	mov	r5,r2
   31e3c:	e13fff17 	ldw	r4,-4(fp)
   31e40:	00321f80 	call	321f8 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
   31e44:	e0bffb04 	addi	r2,fp,-20
   31e48:	100b883a 	mov	r5,r2
   31e4c:	e13fff17 	ldw	r4,-4(fp)
   31e50:	00320980 	call	32098 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
   31e54:	d1600d04 	addi	r5,gp,-32716
   31e58:	e13fff17 	ldw	r4,-4(fp)
   31e5c:	0034ec40 	call	34ec4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   31e60:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
   31e64:	e0bffa15 	stw	r2,-24(fp)

    if (!error)
   31e68:	e0bffa17 	ldw	r2,-24(fp)
   31e6c:	10000c1e 	bne	r2,zero,31ea0 <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
   31e70:	e0bfff17 	ldw	r2,-4(fp)
   31e74:	10c00417 	ldw	r3,16(r2)
   31e78:	e0bfff17 	ldw	r2,-4(fp)
   31e7c:	10800517 	ldw	r2,20(r2)
   31e80:	d8000015 	stw	zero,0(sp)
   31e84:	e1ffff17 	ldw	r7,-4(fp)
   31e88:	018000f4 	movhi	r6,3
   31e8c:	31873a04 	addi	r6,r6,7400
   31e90:	100b883a 	mov	r5,r2
   31e94:	1809883a 	mov	r4,r3
   31e98:	00352980 	call	35298 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
   31e9c:	00000406 	br	31eb0 <alt_avalon_i2c_init+0xd8>
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
   31ea0:	01010034 	movhi	r4,1024
   31ea4:	2100f604 	addi	r4,r4,984
   31ea8:	00356780 	call	35678 <alt_printf>
    }

    return;
   31eac:	0001883a 	nop

}
   31eb0:	e037883a 	mov	sp,fp
   31eb4:	dfc00117 	ldw	ra,4(sp)
   31eb8:	df000017 	ldw	fp,0(sp)
   31ebc:	dec00204 	addi	sp,sp,8
   31ec0:	f800283a 	ret

00031ec4 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
   31ec4:	defffc04 	addi	sp,sp,-16
   31ec8:	dfc00315 	stw	ra,12(sp)
   31ecc:	df000215 	stw	fp,8(sp)
   31ed0:	df000204 	addi	fp,sp,8
   31ed4:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
   31ed8:	e03ffe15 	stw	zero,-8(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
   31edc:	d1600d04 	addi	r5,gp,-32716
   31ee0:	e13fff17 	ldw	r4,-4(fp)
   31ee4:	00350280 	call	35028 <alt_find_dev>
   31ee8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
   31eec:	e0bffe17 	ldw	r2,-8(fp)
}
   31ef0:	e037883a 	mov	sp,fp
   31ef4:	dfc00117 	ldw	ra,4(sp)
   31ef8:	df000017 	ldw	fp,0(sp)
   31efc:	dec00204 	addi	sp,sp,8
   31f00:	f800283a 	ret

00031f04 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   31f04:	defffc04 	addi	sp,sp,-16
   31f08:	df000315 	stw	fp,12(sp)
   31f0c:	df000304 	addi	fp,sp,12
   31f10:	e13fff15 	stw	r4,-4(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   31f14:	e0bfff17 	ldw	r2,-4(fp)
   31f18:	10800717 	ldw	r2,28(r2)
   31f1c:	e0bffd15 	stw	r2,-12(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
   31f20:	e0bfff17 	ldw	r2,-4(fp)
   31f24:	10800317 	ldw	r2,12(r2)
   31f28:	10800204 	addi	r2,r2,8
   31f2c:	10800037 	ldwio	r2,0(r2)
   31f30:	1080004c 	andi	r2,r2,1
   31f34:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
   31f38:	e0bffe17 	ldw	r2,-8(fp)
   31f3c:	10000226 	beq	r2,zero,31f48 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
   31f40:	00bffe44 	movi	r2,-7
   31f44:	00001106 	br	31f8c <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
   31f48:	e0bfff17 	ldw	r2,-4(fp)
   31f4c:	10c00617 	ldw	r3,24(r2)
   31f50:	008000f4 	movhi	r2,3
   31f54:	1086e204 	addi	r2,r2,7048
   31f58:	1880021e 	bne	r3,r2,31f64 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
   31f5c:	e0bffd17 	ldw	r2,-12(fp)
   31f60:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
   31f64:	e0bfff17 	ldw	r2,-4(fp)
   31f68:	10800317 	ldw	r2,12(r2)
   31f6c:	10800204 	addi	r2,r2,8
   31f70:	e0ffff17 	ldw	r3,-4(fp)
   31f74:	18c00317 	ldw	r3,12(r3)
   31f78:	18c00204 	addi	r3,r3,8
   31f7c:	18c00037 	ldwio	r3,0(r3)
   31f80:	18c00054 	ori	r3,r3,1
   31f84:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   31f88:	0005883a 	mov	r2,zero
}
   31f8c:	e037883a 	mov	sp,fp
   31f90:	df000017 	ldw	fp,0(sp)
   31f94:	dec00104 	addi	sp,sp,4
   31f98:	f800283a 	ret

00031f9c <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   31f9c:	defffe04 	addi	sp,sp,-8
   31fa0:	df000115 	stw	fp,4(sp)
   31fa4:	df000104 	addi	fp,sp,4
   31fa8:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
   31fac:	e0bfff17 	ldw	r2,-4(fp)
   31fb0:	10800317 	ldw	r2,12(r2)
   31fb4:	10800204 	addi	r2,r2,8
   31fb8:	e0ffff17 	ldw	r3,-4(fp)
   31fbc:	18c00317 	ldw	r3,12(r3)
   31fc0:	18c00204 	addi	r3,r3,8
   31fc4:	19000037 	ldwio	r4,0(r3)
   31fc8:	00ffff84 	movi	r3,-2
   31fcc:	20c6703a 	and	r3,r4,r3
   31fd0:	10c00035 	stwio	r3,0(r2)

}
   31fd4:	0001883a 	nop
   31fd8:	e037883a 	mov	sp,fp
   31fdc:	df000017 	ldw	fp,0(sp)
   31fe0:	dec00104 	addi	sp,sp,4
   31fe4:	f800283a 	ret

00031fe8 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   31fe8:	defffd04 	addi	sp,sp,-12
   31fec:	df000215 	stw	fp,8(sp)
   31ff0:	df000204 	addi	fp,sp,8
   31ff4:	e13ffe15 	stw	r4,-8(fp)
   31ff8:	e17fff15 	stw	r5,-4(fp)

    cfg->addr_mode = i2c_dev->address_mode;
   31ffc:	e0bffe17 	ldw	r2,-8(fp)
   32000:	10c00d17 	ldw	r3,52(r2)
   32004:	e0bfff17 	ldw	r2,-4(fp)
   32008:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
   3200c:	e0bffe17 	ldw	r2,-8(fp)
   32010:	10800317 	ldw	r2,12(r2)
   32014:	10800204 	addi	r2,r2,8
   32018:	10800037 	ldwio	r2,0(r2)
   3201c:	1080008c 	andi	r2,r2,2
   32020:	1005d07a 	srai	r2,r2,1
   32024:	1007883a 	mov	r3,r2
   32028:	e0bfff17 	ldw	r2,-4(fp)
   3202c:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
   32030:	e0bffe17 	ldw	r2,-8(fp)
   32034:	10800317 	ldw	r2,12(r2)
   32038:	10800904 	addi	r2,r2,36
   3203c:	10800037 	ldwio	r2,0(r2)
   32040:	1007883a 	mov	r3,r2
   32044:	e0bfff17 	ldw	r2,-4(fp)
   32048:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
   3204c:	e0bffe17 	ldw	r2,-8(fp)
   32050:	10800317 	ldw	r2,12(r2)
   32054:	10800804 	addi	r2,r2,32
   32058:	10800037 	ldwio	r2,0(r2)
   3205c:	1007883a 	mov	r3,r2
   32060:	e0bfff17 	ldw	r2,-4(fp)
   32064:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
   32068:	e0bffe17 	ldw	r2,-8(fp)
   3206c:	10800317 	ldw	r2,12(r2)
   32070:	10800a04 	addi	r2,r2,40
   32074:	10800037 	ldwio	r2,0(r2)
   32078:	1007883a 	mov	r3,r2
   3207c:	e0bfff17 	ldw	r2,-4(fp)
   32080:	10c0030d 	sth	r3,12(r2)
}
   32084:	0001883a 	nop
   32088:	e037883a 	mov	sp,fp
   3208c:	df000017 	ldw	fp,0(sp)
   32090:	dec00104 	addi	sp,sp,4
   32094:	f800283a 	ret

00032098 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
   32098:	defffd04 	addi	sp,sp,-12
   3209c:	df000215 	stw	fp,8(sp)
   320a0:	df000204 	addi	fp,sp,8
   320a4:	e13ffe15 	stw	r4,-8(fp)
   320a8:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
   320ac:	e0bfff17 	ldw	r2,-4(fp)
   320b0:	10c00017 	ldw	r3,0(r2)
   320b4:	e0bffe17 	ldw	r2,-8(fp)
   320b8:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
   320bc:	e0bffe17 	ldw	r2,-8(fp)
   320c0:	10800317 	ldw	r2,12(r2)
   320c4:	10c00204 	addi	r3,r2,8
   320c8:	e0bffe17 	ldw	r2,-8(fp)
   320cc:	10800317 	ldw	r2,12(r2)
   320d0:	10800204 	addi	r2,r2,8
   320d4:	10800037 	ldwio	r2,0(r2)
   320d8:	1009883a 	mov	r4,r2
   320dc:	00bfff44 	movi	r2,-3
   320e0:	2088703a 	and	r4,r4,r2
   320e4:	e0bfff17 	ldw	r2,-4(fp)
   320e8:	10800117 	ldw	r2,4(r2)
   320ec:	1085883a 	add	r2,r2,r2
   320f0:	1080008c 	andi	r2,r2,2
   320f4:	2084b03a 	or	r2,r4,r2
   320f8:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
   320fc:	e0bffe17 	ldw	r2,-8(fp)
   32100:	10800317 	ldw	r2,12(r2)
   32104:	10800904 	addi	r2,r2,36
   32108:	e0ffff17 	ldw	r3,-4(fp)
   3210c:	18c0020b 	ldhu	r3,8(r3)
   32110:	18ffffcc 	andi	r3,r3,65535
   32114:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
   32118:	e0bffe17 	ldw	r2,-8(fp)
   3211c:	10800317 	ldw	r2,12(r2)
   32120:	10800804 	addi	r2,r2,32
   32124:	e0ffff17 	ldw	r3,-4(fp)
   32128:	18c0028b 	ldhu	r3,10(r3)
   3212c:	18ffffcc 	andi	r3,r3,65535
   32130:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
   32134:	e0bffe17 	ldw	r2,-8(fp)
   32138:	10800317 	ldw	r2,12(r2)
   3213c:	10800a04 	addi	r2,r2,40
   32140:	e0ffff17 	ldw	r3,-4(fp)
   32144:	18c0030b 	ldhu	r3,12(r3)
   32148:	18ffffcc 	andi	r3,r3,65535
   3214c:	10c00035 	stwio	r3,0(r2)
}
   32150:	0001883a 	nop
   32154:	e037883a 	mov	sp,fp
   32158:	df000017 	ldw	fp,0(sp)
   3215c:	dec00104 	addi	sp,sp,4
   32160:	f800283a 	ret

00032164 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
   32164:	defffb04 	addi	sp,sp,-20
   32168:	dfc00415 	stw	ra,16(sp)
   3216c:	df000315 	stw	fp,12(sp)
   32170:	df000304 	addi	fp,sp,12
   32174:	e13ffd15 	stw	r4,-12(fp)
   32178:	e17ffe15 	stw	r5,-8(fp)
   3217c:	e1bfff15 	stw	r6,-4(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
   32180:	e0bffe17 	ldw	r2,-8(fp)
   32184:	1080028b 	ldhu	r2,10(r2)
   32188:	10bfffcc 	andi	r2,r2,65535
   3218c:	10000426 	beq	r2,zero,321a0 <alt_avalon_i2c_master_config_speed_get+0x3c>
   32190:	e0bffe17 	ldw	r2,-8(fp)
   32194:	1080020b 	ldhu	r2,8(r2)
   32198:	10bfffcc 	andi	r2,r2,65535
   3219c:	1000021e 	bne	r2,zero,321a8 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
   321a0:	00bfff44 	movi	r2,-3
   321a4:	00000f06 	br	321e4 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
   321a8:	e0bffd17 	ldw	r2,-12(fp)
   321ac:	11000c17 	ldw	r4,48(r2)
   321b0:	e0bffe17 	ldw	r2,-8(fp)
   321b4:	1080028b 	ldhu	r2,10(r2)
   321b8:	10ffffcc 	andi	r3,r2,65535
   321bc:	e0bffe17 	ldw	r2,-8(fp)
   321c0:	1080020b 	ldhu	r2,8(r2)
   321c4:	10bfffcc 	andi	r2,r2,65535
   321c8:	1885883a 	add	r2,r3,r2
   321cc:	100b883a 	mov	r5,r2
   321d0:	002e7a00 	call	2e7a0 <__udivsi3>
   321d4:	1007883a 	mov	r3,r2
   321d8:	e0bfff17 	ldw	r2,-4(fp)
   321dc:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
   321e0:	0005883a 	mov	r2,zero
}
   321e4:	e037883a 	mov	sp,fp
   321e8:	dfc00117 	ldw	ra,4(sp)
   321ec:	df000017 	ldw	fp,0(sp)
   321f0:	dec00204 	addi	sp,sp,8
   321f4:	f800283a 	ret

000321f8 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
   321f8:	defff904 	addi	sp,sp,-28
   321fc:	dfc00615 	stw	ra,24(sp)
   32200:	df000515 	stw	fp,20(sp)
   32204:	df000504 	addi	fp,sp,20
   32208:	e13ffd15 	stw	r4,-12(fp)
   3220c:	e17ffe15 	stw	r5,-8(fp)
   32210:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
   32214:	e0ffff17 	ldw	r3,-4(fp)
   32218:	008001b4 	movhi	r2,6
   3221c:	1086a004 	addi	r2,r2,6784
   32220:	10c00436 	bltu	r2,r3,32234 <alt_avalon_i2c_master_config_speed_set+0x3c>
   32224:	e0bfff17 	ldw	r2,-4(fp)
   32228:	10000226 	beq	r2,zero,32234 <alt_avalon_i2c_master_config_speed_set+0x3c>
   3222c:	e0bfff17 	ldw	r2,-4(fp)
   32230:	1000021e 	bne	r2,zero,3223c <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
   32234:	00bfff04 	movi	r2,-4
   32238:	00002906 	br	322e0 <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
   3223c:	e0bffd17 	ldw	r2,-12(fp)
   32240:	10c00c17 	ldw	r3,48(r2)
   32244:	e0bfff17 	ldw	r2,-4(fp)
   32248:	1085883a 	add	r2,r2,r2
   3224c:	100b883a 	mov	r5,r2
   32250:	1809883a 	mov	r4,r3
   32254:	002e7a00 	call	2e7a0 <__udivsi3>
   32258:	e0bffb15 	stw	r2,-20(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   3225c:	e0bffb17 	ldw	r2,-20(fp)
   32260:	10800f04 	addi	r2,r2,60
   32264:	e0bffc15 	stw	r2,-16(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
   32268:	e0bffb17 	ldw	r2,-20(fp)
   3226c:	10bff104 	addi	r2,r2,-60
   32270:	e0bffb15 	stw	r2,-20(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
   32274:	e0ffff17 	ldw	r3,-4(fp)
   32278:	008000b4 	movhi	r2,2
   3227c:	10a1a804 	addi	r2,r2,-31072
   32280:	10c0042e 	bgeu	r2,r3,32294 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
   32284:	e0bffe17 	ldw	r2,-8(fp)
   32288:	00c00044 	movi	r3,1
   3228c:	10c00115 	stw	r3,4(r2)
   32290:	00000206 	br	3229c <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
   32294:	e0bffe17 	ldw	r2,-8(fp)
   32298:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
   3229c:	e0bffb17 	ldw	r2,-20(fp)
   322a0:	1007883a 	mov	r3,r2
   322a4:	e0bffe17 	ldw	r2,-8(fp)
   322a8:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
   322ac:	e0bffc17 	ldw	r2,-16(fp)
   322b0:	1007883a 	mov	r3,r2
   322b4:	e0bffe17 	ldw	r2,-8(fp)
   322b8:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
   322bc:	e0bffb17 	ldw	r2,-20(fp)
   322c0:	1007883a 	mov	r3,r2
   322c4:	e0bffb17 	ldw	r2,-20(fp)
   322c8:	1004d07a 	srli	r2,r2,1
   322cc:	1885c83a 	sub	r2,r3,r2
   322d0:	1007883a 	mov	r3,r2
   322d4:	e0bffe17 	ldw	r2,-8(fp)
   322d8:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
   322dc:	0005883a 	mov	r2,zero

}
   322e0:	e037883a 	mov	sp,fp
   322e4:	dfc00117 	ldw	ra,4(sp)
   322e8:	df000017 	ldw	fp,0(sp)
   322ec:	dec00204 	addi	sp,sp,8
   322f0:	f800283a 	ret

000322f4 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   322f4:	defffe04 	addi	sp,sp,-8
   322f8:	df000115 	stw	fp,4(sp)
   322fc:	df000104 	addi	fp,sp,4
   32300:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
   32304:	e0bfff17 	ldw	r2,-4(fp)
   32308:	10800317 	ldw	r2,12(r2)
   3230c:	10800504 	addi	r2,r2,20
   32310:	10800037 	ldwio	r2,0(r2)
   32314:	1080004c 	andi	r2,r2,1
   32318:	10000226 	beq	r2,zero,32324 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
   3231c:	00800044 	movi	r2,1
   32320:	00000106 	br	32328 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
   32324:	0005883a 	mov	r2,zero
}
   32328:	e037883a 	mov	sp,fp
   3232c:	df000017 	ldw	fp,0(sp)
   32330:	dec00104 	addi	sp,sp,4
   32334:	f800283a 	ret

00032338 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
   32338:	defffb04 	addi	sp,sp,-20
   3233c:	df000415 	stw	fp,16(sp)
   32340:	df000404 	addi	fp,sp,16
   32344:	e13ffc15 	stw	r4,-16(fp)
   32348:	e17ffd15 	stw	r5,-12(fp)
   3234c:	e1bffe15 	stw	r6,-8(fp)
   32350:	e1ffff15 	stw	r7,-4(fp)
    *bytes_read = 0;
   32354:	e0bfff17 	ldw	r2,-4(fp)
   32358:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   3235c:	00001406 	br	323b0 <alt_avalon_i2c_rx_read_available+0x78>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   32360:	e0bfff17 	ldw	r2,-4(fp)
   32364:	10800017 	ldw	r2,0(r2)
   32368:	e0fffd17 	ldw	r3,-12(fp)
   3236c:	1885883a 	add	r2,r3,r2
   32370:	e0fffc17 	ldw	r3,-16(fp)
   32374:	18c00317 	ldw	r3,12(r3)
   32378:	18c00104 	addi	r3,r3,4
   3237c:	18c00037 	ldwio	r3,0(r3)
   32380:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
   32384:	e0bfff17 	ldw	r2,-4(fp)
   32388:	10800017 	ldw	r2,0(r2)
   3238c:	10c00044 	addi	r3,r2,1
   32390:	e0bfff17 	ldw	r2,-4(fp)
   32394:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   32398:	e0bfff17 	ldw	r2,-4(fp)
   3239c:	10c00017 	ldw	r3,0(r2)
   323a0:	e0bffe17 	ldw	r2,-8(fp)
   323a4:	1880021e 	bne	r3,r2,323b0 <alt_avalon_i2c_rx_read_available+0x78>
   323a8:	e0bffe17 	ldw	r2,-8(fp)
   323ac:	1000061e 	bne	r2,zero,323c8 <alt_avalon_i2c_rx_read_available+0x90>
/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
    *bytes_read = 0;
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
   323b0:	e0bffc17 	ldw	r2,-16(fp)
   323b4:	10800317 	ldw	r2,12(r2)
   323b8:	10800704 	addi	r2,r2,28
   323bc:	10800037 	ldwio	r2,0(r2)
   323c0:	103fe71e 	bne	r2,zero,32360 <__alt_data_end+0xf8032360>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
    }
}
   323c4:	00000106 	br	323cc <alt_avalon_i2c_rx_read_available+0x94>
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
       *bytes_read+=1; 
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
   323c8:	0001883a 	nop
    }
}
   323cc:	0001883a 	nop
   323d0:	e037883a 	mov	sp,fp
   323d4:	df000017 	ldw	fp,0(sp)
   323d8:	dec00104 	addi	sp,sp,4
   323dc:	f800283a 	ret

000323e0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
   323e0:	defffa04 	addi	sp,sp,-24
   323e4:	dfc00515 	stw	ra,20(sp)
   323e8:	df000415 	stw	fp,16(sp)
   323ec:	df000404 	addi	fp,sp,16
   323f0:	e13ffe15 	stw	r4,-8(fp)
   323f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
   323f8:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout = 100000;
   323fc:	008000b4 	movhi	r2,2
   32400:	10a1a804 	addi	r2,r2,-31072
   32404:	e0bffd15 	stw	r2,-12(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   32408:	00000d06 	br	32440 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
   3240c:	e0bffd17 	ldw	r2,-12(fp)
   32410:	108002a8 	cmpgeui	r2,r2,10
   32414:	1000021e 	bne	r2,zero,32420 <alt_avalon_i2c_rx_read+0x40>
   32418:	0109c404 	movi	r4,10000
   3241c:	0034ce80 	call	34ce8 <alt_busy_sleep>
      if (--timeout == 0)
   32420:	e0bffd17 	ldw	r2,-12(fp)
   32424:	10bfffc4 	addi	r2,r2,-1
   32428:	e0bffd15 	stw	r2,-12(fp)
   3242c:	e0bffd17 	ldw	r2,-12(fp)
   32430:	1000031e 	bne	r2,zero,32440 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
   32434:	00bfff84 	movi	r2,-2
   32438:	e0bffc15 	stw	r2,-16(fp)
        break;
   3243c:	00000506 	br	32454 <alt_avalon_i2c_rx_read+0x74>
{
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
    alt_u32 timeout = 100000;


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
   32440:	e0bffe17 	ldw	r2,-8(fp)
   32444:	10800317 	ldw	r2,12(r2)
   32448:	10800704 	addi	r2,r2,28
   3244c:	10800037 	ldwio	r2,0(r2)
   32450:	103fee26 	beq	r2,zero,3240c <__alt_data_end+0xf803240c>
        status = ALT_AVALON_I2C_TIMEOUT;
        break;
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
   32454:	e0bffe17 	ldw	r2,-8(fp)
   32458:	10800317 	ldw	r2,12(r2)
   3245c:	10800104 	addi	r2,r2,4
   32460:	10800037 	ldwio	r2,0(r2)
   32464:	1007883a 	mov	r3,r2
   32468:	e0bfff17 	ldw	r2,-4(fp)
   3246c:	10c00005 	stb	r3,0(r2)
        
    return status;
   32470:	e0bffc17 	ldw	r2,-16(fp)
}
   32474:	e037883a 	mov	sp,fp
   32478:	dfc00117 	ldw	ra,4(sp)
   3247c:	df000017 	ldw	fp,0(sp)
   32480:	dec00204 	addi	sp,sp,8
   32484:	f800283a 	ret

00032488 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
   32488:	defff804 	addi	sp,sp,-32
   3248c:	dfc00715 	stw	ra,28(sp)
   32490:	df000615 	stw	fp,24(sp)
   32494:	df000604 	addi	fp,sp,24
   32498:	e13ffc15 	stw	r4,-16(fp)
   3249c:	2809883a 	mov	r4,r5
   324a0:	3007883a 	mov	r3,r6
   324a4:	3805883a 	mov	r2,r7
   324a8:	e13ffd05 	stb	r4,-12(fp)
   324ac:	e0fffe05 	stb	r3,-8(fp)
   324b0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 timeout = 10000;
   324b4:	0089c404 	movi	r2,10000
   324b8:	e0bffa15 	stw	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   324bc:	e03ffb15 	stw	zero,-20(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   324c0:	00000c06 	br	324f4 <alt_avalon_i2c_cmd_write+0x6c>
    {
      if (timeout<10) alt_busy_sleep(10000);    
   324c4:	e0bffa17 	ldw	r2,-24(fp)
   324c8:	108002a8 	cmpgeui	r2,r2,10
   324cc:	1000021e 	bne	r2,zero,324d8 <alt_avalon_i2c_cmd_write+0x50>
   324d0:	0109c404 	movi	r4,10000
   324d4:	0034ce80 	call	34ce8 <alt_busy_sleep>
      if (--timeout == 0)
   324d8:	e0bffa17 	ldw	r2,-24(fp)
   324dc:	10bfffc4 	addi	r2,r2,-1
   324e0:	e0bffa15 	stw	r2,-24(fp)
   324e4:	e0bffa17 	ldw	r2,-24(fp)
   324e8:	1000021e 	bne	r2,zero,324f4 <alt_avalon_i2c_cmd_write+0x6c>
      {
        return ALT_AVALON_I2C_TIMEOUT;
   324ec:	00bfff84 	movi	r2,-2
   324f0:	00001906 	br	32558 <alt_avalon_i2c_cmd_write+0xd0>
{
    alt_u32 timeout = 10000;
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
   324f4:	e0bffc17 	ldw	r2,-16(fp)
   324f8:	10800317 	ldw	r2,12(r2)
   324fc:	10800404 	addi	r2,r2,16
   32500:	10800037 	ldwio	r2,0(r2)
   32504:	1080004c 	andi	r2,r2,1
   32508:	103fee26 	beq	r2,zero,324c4 <__alt_data_end+0xf80324c4>
      {
        return ALT_AVALON_I2C_TIMEOUT;
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
   3250c:	e0bffc17 	ldw	r2,-16(fp)
   32510:	10800317 	ldw	r2,12(r2)
   32514:	e13ffd03 	ldbu	r4,-12(fp)
   32518:	e0fffe03 	ldbu	r3,-8(fp)
   3251c:	1806927a 	slli	r3,r3,9
   32520:	20c8b03a 	or	r4,r4,r3
   32524:	e0ffff03 	ldbu	r3,-4(fp)
   32528:	1806923a 	slli	r3,r3,8
   3252c:	20c6b03a 	or	r3,r4,r3
   32530:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   32534:	e0bffb04 	addi	r2,fp,-20
   32538:	100b883a 	mov	r5,r2
   3253c:	e13ffc17 	ldw	r4,-16(fp)
   32540:	00326c80 	call	326c8 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
   32544:	e0bffb04 	addi	r2,fp,-20
   32548:	100b883a 	mov	r5,r2
   3254c:	e13ffc17 	ldw	r4,-16(fp)
   32550:	00327140 	call	32714 <alt_avalon_i2c_check_arblost>
    
    return status;
   32554:	e0bffb17 	ldw	r2,-20(fp)
}
   32558:	e037883a 	mov	sp,fp
   3255c:	dfc00117 	ldw	ra,4(sp)
   32560:	df000017 	ldw	fp,0(sp)
   32564:	dec00204 	addi	sp,sp,8
   32568:	f800283a 	ret

0003256c <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
   3256c:	defffa04 	addi	sp,sp,-24
   32570:	dfc00515 	stw	ra,20(sp)
   32574:	df000415 	stw	fp,16(sp)
   32578:	df000404 	addi	fp,sp,16
   3257c:	e13ffd15 	stw	r4,-12(fp)
   32580:	e17ffe15 	stw	r5,-8(fp)
   32584:	3005883a 	mov	r2,r6
   32588:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
   3258c:	e0bffd17 	ldw	r2,-12(fp)
   32590:	10800d17 	ldw	r2,52(r2)
   32594:	10800058 	cmpnei	r2,r2,1
   32598:	10001c1e 	bne	r2,zero,3260c <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   3259c:	e0bffd17 	ldw	r2,-12(fp)
   325a0:	10800917 	ldw	r2,36(r2)
   325a4:	109e0014 	ori	r2,r2,30720
   325a8:	1004d1fa 	srli	r2,r2,7
   325ac:	1007883a 	mov	r3,r2
   325b0:	00bfff84 	movi	r2,-2
   325b4:	1884703a 	and	r2,r3,r2
   325b8:	1007883a 	mov	r3,r2
   325bc:	e0bffe17 	ldw	r2,-8(fp)
   325c0:	1884b03a 	or	r2,r3,r2
   325c4:	10803fcc 	andi	r2,r2,255
   325c8:	e0ffff03 	ldbu	r3,-4(fp)
   325cc:	000f883a 	mov	r7,zero
   325d0:	180d883a 	mov	r6,r3
   325d4:	100b883a 	mov	r5,r2
   325d8:	e13ffd17 	ldw	r4,-12(fp)
   325dc:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   325e0:	e0bffc15 	stw	r2,-16(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
   325e4:	e0bffd17 	ldw	r2,-12(fp)
   325e8:	10800917 	ldw	r2,36(r2)
   325ec:	10803fcc 	andi	r2,r2,255
   325f0:	000f883a 	mov	r7,zero
   325f4:	000d883a 	mov	r6,zero
   325f8:	100b883a 	mov	r5,r2
   325fc:	e13ffd17 	ldw	r4,-12(fp)
   32600:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   32604:	e0bffc15 	stw	r2,-16(fp)
   32608:	00000e06 	br	32644 <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
   3260c:	e0bffd17 	ldw	r2,-12(fp)
   32610:	10800917 	ldw	r2,36(r2)
   32614:	1085883a 	add	r2,r2,r2
   32618:	1007883a 	mov	r3,r2
   3261c:	e0bffe17 	ldw	r2,-8(fp)
   32620:	1884b03a 	or	r2,r3,r2
   32624:	10803fcc 	andi	r2,r2,255
   32628:	e0ffff03 	ldbu	r3,-4(fp)
   3262c:	000f883a 	mov	r7,zero
   32630:	180d883a 	mov	r6,r3
   32634:	100b883a 	mov	r5,r2
   32638:	e13ffd17 	ldw	r4,-12(fp)
   3263c:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   32640:	e0bffc15 	stw	r2,-16(fp)
    }
    
    return status;
   32644:	e0bffc17 	ldw	r2,-16(fp)
}
   32648:	e037883a 	mov	sp,fp
   3264c:	dfc00117 	ldw	ra,4(sp)
   32650:	df000017 	ldw	fp,0(sp)
   32654:	dec00204 	addi	sp,sp,8
   32658:	f800283a 	ret

0003265c <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
   3265c:	defffd04 	addi	sp,sp,-12
   32660:	df000215 	stw	fp,8(sp)
   32664:	df000204 	addi	fp,sp,8
   32668:	e13ffe15 	stw	r4,-8(fp)
   3266c:	e17fff15 	stw	r5,-4(fp)
    *target_addr=i2c_dev->master_target_address;
   32670:	e0bffe17 	ldw	r2,-8(fp)
   32674:	10c00917 	ldw	r3,36(r2)
   32678:	e0bfff17 	ldw	r2,-4(fp)
   3267c:	10c00015 	stw	r3,0(r2)
}
   32680:	0001883a 	nop
   32684:	e037883a 	mov	sp,fp
   32688:	df000017 	ldw	fp,0(sp)
   3268c:	dec00104 	addi	sp,sp,4
   32690:	f800283a 	ret

00032694 <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
   32694:	defffd04 	addi	sp,sp,-12
   32698:	df000215 	stw	fp,8(sp)
   3269c:	df000204 	addi	fp,sp,8
   326a0:	e13ffe15 	stw	r4,-8(fp)
   326a4:	e17fff15 	stw	r5,-4(fp)
    i2c_dev->master_target_address=target_addr;
   326a8:	e0bffe17 	ldw	r2,-8(fp)
   326ac:	e0ffff17 	ldw	r3,-4(fp)
   326b0:	10c00915 	stw	r3,36(r2)
}
   326b4:	0001883a 	nop
   326b8:	e037883a 	mov	sp,fp
   326bc:	df000017 	ldw	fp,0(sp)
   326c0:	dec00104 	addi	sp,sp,4
   326c4:	f800283a 	ret

000326c8 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
   326c8:	defffd04 	addi	sp,sp,-12
   326cc:	df000215 	stw	fp,8(sp)
   326d0:	df000204 	addi	fp,sp,8
   326d4:	e13ffe15 	stw	r4,-8(fp)
   326d8:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
   326dc:	e0bffe17 	ldw	r2,-8(fp)
   326e0:	10800317 	ldw	r2,12(r2)
   326e4:	10800404 	addi	r2,r2,16
   326e8:	10800037 	ldwio	r2,0(r2)
   326ec:	1080010c 	andi	r2,r2,4
   326f0:	10000326 	beq	r2,zero,32700 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
   326f4:	e0bfff17 	ldw	r2,-4(fp)
   326f8:	00fffec4 	movi	r3,-5
   326fc:	10c00015 	stw	r3,0(r2)
    }
}
   32700:	0001883a 	nop
   32704:	e037883a 	mov	sp,fp
   32708:	df000017 	ldw	fp,0(sp)
   3270c:	dec00104 	addi	sp,sp,4
   32710:	f800283a 	ret

00032714 <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
   32714:	defffd04 	addi	sp,sp,-12
   32718:	df000215 	stw	fp,8(sp)
   3271c:	df000204 	addi	fp,sp,8
   32720:	e13ffe15 	stw	r4,-8(fp)
   32724:	e17fff15 	stw	r5,-4(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
   32728:	e0bffe17 	ldw	r2,-8(fp)
   3272c:	10800317 	ldw	r2,12(r2)
   32730:	10800404 	addi	r2,r2,16
   32734:	10800037 	ldwio	r2,0(r2)
   32738:	1080020c 	andi	r2,r2,8
   3273c:	10000326 	beq	r2,zero,3274c <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
   32740:	e0bfff17 	ldw	r2,-4(fp)
   32744:	00fffe84 	movi	r3,-6
   32748:	10c00015 	stw	r3,0(r2)
    }
}
   3274c:	0001883a 	nop
   32750:	e037883a 	mov	sp,fp
   32754:	df000017 	ldw	fp,0(sp)
   32758:	dec00104 	addi	sp,sp,4
   3275c:	f800283a 	ret

00032760 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
   32760:	defff804 	addi	sp,sp,-32
   32764:	dfc00715 	stw	ra,28(sp)
   32768:	df000615 	stw	fp,24(sp)
   3276c:	df000604 	addi	fp,sp,24
   32770:	e13fff15 	stw	r4,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   32774:	e03ffc15 	stw	zero,-16(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
   32778:	e0bfff17 	ldw	r2,-4(fp)
   3277c:	10800717 	ldw	r2,28(r2)
   32780:	e0bffb15 	stw	r2,-20(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
   32784:	e0bffb17 	ldw	r2,-20(fp)
   32788:	10800117 	ldw	r2,4(r2)
   3278c:	10800044 	addi	r2,r2,1
   32790:	1089c424 	muli	r2,r2,10000
   32794:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
   32798:	e0bffd04 	addi	r2,fp,-12
   3279c:	100b883a 	mov	r5,r2
   327a0:	e13fff17 	ldw	r4,-4(fp)
   327a4:	00335e00 	call	335e0 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
   327a8:	e0bffd17 	ldw	r2,-12(fp)
   327ac:	100b883a 	mov	r5,r2
   327b0:	e13fff17 	ldw	r4,-4(fp)
   327b4:	00335140 	call	33514 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
   327b8:	e0bffc04 	addi	r2,fp,-16
   327bc:	100b883a 	mov	r5,r2
   327c0:	e13fff17 	ldw	r4,-4(fp)
   327c4:	00326c80 	call	326c8 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
   327c8:	e0bffc17 	ldw	r2,-16(fp)
   327cc:	10002226 	beq	r2,zero,32858 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
    {
      if (irq_data->irq_busy)
   327d0:	e0bffb17 	ldw	r2,-20(fp)
   327d4:	10800217 	ldw	r2,8(r2)
   327d8:	10001d26 	beq	r2,zero,32850 <alt_avalon_i2c_interrupt_transaction_status+0xf0>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   327dc:	00000d06 	br	32814 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
        {
              if (timeout<10) alt_busy_sleep(10000);
   327e0:	e0bffa17 	ldw	r2,-24(fp)
   327e4:	108002a8 	cmpgeui	r2,r2,10
   327e8:	1000021e 	bne	r2,zero,327f4 <alt_avalon_i2c_interrupt_transaction_status+0x94>
   327ec:	0109c404 	movi	r4,10000
   327f0:	0034ce80 	call	34ce8 <alt_busy_sleep>
              if (--timeout == 0)
   327f4:	e0bffa17 	ldw	r2,-24(fp)
   327f8:	10bfffc4 	addi	r2,r2,-1
   327fc:	e0bffa15 	stw	r2,-24(fp)
   32800:	e0bffa17 	ldw	r2,-24(fp)
   32804:	1000031e 	bne	r2,zero,32814 <alt_avalon_i2c_interrupt_transaction_status+0xb4>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
   32808:	00bfff84 	movi	r2,-2
   3280c:	e0bffc15 	stw	r2,-16(fp)
                 break;
   32810:	00000306 	br	32820 <alt_avalon_i2c_interrupt_transaction_status+0xc0>

    if (status!=ALT_AVALON_I2C_SUCCESS)
    {
      if (irq_data->irq_busy)
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
   32814:	e13fff17 	ldw	r4,-4(fp)
   32818:	00322f40 	call	322f4 <alt_avalon_i2c_is_busy>
   3281c:	103ff01e 	bne	r2,zero,327e0 <__alt_data_end+0xf80327e0>
                 break;
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
   32820:	e0bffb17 	ldw	r2,-20(fp)
   32824:	10800017 	ldw	r2,0(r2)
   32828:	e0fffe04 	addi	r3,fp,-8
   3282c:	180f883a 	mov	r7,r3
   32830:	000d883a 	mov	r6,zero
   32834:	100b883a 	mov	r5,r2
   32838:	e13fff17 	ldw	r4,-4(fp)
   3283c:	00323380 	call	32338 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
   32840:	e13fff17 	ldw	r4,-4(fp)
   32844:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
   32848:	e0bffb17 	ldw	r2,-20(fp)
   3284c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
   32850:	e0bffc17 	ldw	r2,-16(fp)
   32854:	00000a06 	br	32880 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    if (irq_data->irq_busy)
   32858:	e0bffb17 	ldw	r2,-20(fp)
   3285c:	10800217 	ldw	r2,8(r2)
   32860:	10000626 	beq	r2,zero,3287c <alt_avalon_i2c_interrupt_transaction_status+0x11c>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
   32864:	e0bffd17 	ldw	r2,-12(fp)
   32868:	100b883a 	mov	r5,r2
   3286c:	e13fff17 	ldw	r4,-4(fp)
   32870:	003357c0 	call	3357c <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
   32874:	00bffe44 	movi	r2,-7
   32878:	00000106 	br	32880 <alt_avalon_i2c_interrupt_transaction_status+0x120>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
   3287c:	0005883a 	mov	r2,zero
}
   32880:	e037883a 	mov	sp,fp
   32884:	dfc00117 	ldw	ra,4(sp)
   32888:	df000017 	ldw	fp,0(sp)
   3288c:	dec00204 	addi	sp,sp,8
   32890:	f800283a 	ret

00032894 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   32894:	defff704 	addi	sp,sp,-36
   32898:	dfc00815 	stw	ra,32(sp)
   3289c:	df000715 	stw	fp,28(sp)
   328a0:	df000704 	addi	fp,sp,28
   328a4:	e13ffc15 	stw	r4,-16(fp)
   328a8:	e17ffd15 	stw	r5,-12(fp)
   328ac:	e1bffe15 	stw	r6,-8(fp)
   328b0:	3805883a 	mov	r2,r7
   328b4:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   328b8:	0089c404 	movi	r2,10000
   328bc:	e0bffb15 	stw	r2,-20(fp)
    
    while (retry--)
   328c0:	00002206 	br	3294c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
   328c4:	e0bffb17 	ldw	r2,-20(fp)
   328c8:	108002a8 	cmpgeui	r2,r2,10
   328cc:	1000021e 	bne	r2,zero,328d8 <alt_avalon_i2c_master_tx+0x44>
   328d0:	0109c404 	movi	r4,10000
   328d4:	0034ce80 	call	34ce8 <alt_busy_sleep>
      if (use_interrupts)
   328d8:	e0bfff03 	ldbu	r2,-4(fp)
   328dc:	10000926 	beq	r2,zero,32904 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
   328e0:	00800044 	movi	r2,1
   328e4:	d8800015 	stw	r2,0(sp)
   328e8:	000f883a 	mov	r7,zero
   328ec:	e1bffe17 	ldw	r6,-8(fp)
   328f0:	e17ffd17 	ldw	r5,-12(fp)
   328f4:	e13ffc17 	ldw	r4,-16(fp)
   328f8:	0032e3c0 	call	32e3c <alt_avalon_i2c_master_transmit_using_interrupts>
   328fc:	e0bffa15 	stw	r2,-24(fp)
   32900:	00000806 	br	32924 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
   32904:	00800044 	movi	r2,1
   32908:	d8800015 	stw	r2,0(sp)
   3290c:	000f883a 	mov	r7,zero
   32910:	e1bffe17 	ldw	r6,-8(fp)
   32914:	e17ffd17 	ldw	r5,-12(fp)
   32918:	e13ffc17 	ldw	r4,-16(fp)
   3291c:	0032c800 	call	32c80 <alt_avalon_i2c_master_transmit>
   32920:	e0bffa15 	stw	r2,-24(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   32924:	e0bffa17 	ldw	r2,-24(fp)
   32928:	10bffea0 	cmpeqi	r2,r2,-6
   3292c:	1000061e 	bne	r2,zero,32948 <alt_avalon_i2c_master_tx+0xb4>
   32930:	e0bffa17 	ldw	r2,-24(fp)
   32934:	10bffee0 	cmpeqi	r2,r2,-5
   32938:	1000031e 	bne	r2,zero,32948 <alt_avalon_i2c_master_tx+0xb4>
   3293c:	e0bffa17 	ldw	r2,-24(fp)
   32940:	10bffe58 	cmpnei	r2,r2,-7
   32944:	1000061e 	bne	r2,zero,32960 <alt_avalon_i2c_master_tx+0xcc>
   32948:	0001883a 	nop
                                       const alt_u8 use_interrupts)
{
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    while (retry--)
   3294c:	e0bffb17 	ldw	r2,-20(fp)
   32950:	10ffffc4 	addi	r3,r2,-1
   32954:	e0fffb15 	stw	r3,-20(fp)
   32958:	103fda1e 	bne	r2,zero,328c4 <__alt_data_end+0xf80328c4>
   3295c:	00000106 	br	32964 <alt_avalon_i2c_master_tx+0xd0>
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
      break;
   32960:	0001883a 	nop
    }

    return status;
   32964:	e0bffa17 	ldw	r2,-24(fp)
}        
   32968:	e037883a 	mov	sp,fp
   3296c:	dfc00117 	ldw	ra,4(sp)
   32970:	df000017 	ldw	fp,0(sp)
   32974:	dec00204 	addi	sp,sp,8
   32978:	f800283a 	ret

0003297c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
   3297c:	defff704 	addi	sp,sp,-36
   32980:	dfc00815 	stw	ra,32(sp)
   32984:	df000715 	stw	fp,28(sp)
   32988:	df000704 	addi	fp,sp,28
   3298c:	e13ffc15 	stw	r4,-16(fp)
   32990:	e17ffd15 	stw	r5,-12(fp)
   32994:	e1bffe15 	stw	r6,-8(fp)
   32998:	3805883a 	mov	r2,r7
   3299c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   329a0:	0089c404 	movi	r2,10000
   329a4:	e0bffb15 	stw	r2,-20(fp)
    
    if (use_interrupts) 
   329a8:	e0bfff03 	ldbu	r2,-4(fp)
   329ac:	10003426 	beq	r2,zero,32a80 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
   329b0:	00001706 	br	32a10 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
   329b4:	e0bffb17 	ldw	r2,-20(fp)
   329b8:	108002a8 	cmpgeui	r2,r2,10
   329bc:	1000021e 	bne	r2,zero,329c8 <alt_avalon_i2c_master_rx+0x4c>
   329c0:	0109c404 	movi	r4,10000
   329c4:	0034ce80 	call	34ce8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   329c8:	00800044 	movi	r2,1
   329cc:	d8800015 	stw	r2,0(sp)
   329d0:	000f883a 	mov	r7,zero
   329d4:	e1bffe17 	ldw	r6,-8(fp)
   329d8:	e17ffd17 	ldw	r5,-12(fp)
   329dc:	e13ffc17 	ldw	r4,-16(fp)
   329e0:	00332500 	call	33250 <alt_avalon_i2c_master_receive_using_interrupts>
   329e4:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   329e8:	e0bffa17 	ldw	r2,-24(fp)
   329ec:	10bffea0 	cmpeqi	r2,r2,-6
   329f0:	1000061e 	bne	r2,zero,32a0c <alt_avalon_i2c_master_rx+0x90>
   329f4:	e0bffa17 	ldw	r2,-24(fp)
   329f8:	10bffee0 	cmpeqi	r2,r2,-5
   329fc:	1000031e 	bne	r2,zero,32a0c <alt_avalon_i2c_master_rx+0x90>
   32a00:	e0bffa17 	ldw	r2,-24(fp)
   32a04:	10bffe58 	cmpnei	r2,r2,-7
   32a08:	1000221e 	bne	r2,zero,32a94 <alt_avalon_i2c_master_rx+0x118>
   32a0c:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts) 
    {
      while (retry--) 
   32a10:	e0bffb17 	ldw	r2,-20(fp)
   32a14:	10ffffc4 	addi	r3,r2,-1
   32a18:	e0fffb15 	stw	r3,-20(fp)
   32a1c:	103fe51e 	bne	r2,zero,329b4 <__alt_data_end+0xf80329b4>
   32a20:	00001f06 	br	32aa0 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   32a24:	e0bffb17 	ldw	r2,-20(fp)
   32a28:	108002a8 	cmpgeui	r2,r2,10
   32a2c:	1000021e 	bne	r2,zero,32a38 <alt_avalon_i2c_master_rx+0xbc>
   32a30:	0109c404 	movi	r4,10000
   32a34:	0034ce80 	call	34ce8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
   32a38:	00800044 	movi	r2,1
   32a3c:	d8800015 	stw	r2,0(sp)
   32a40:	000f883a 	mov	r7,zero
   32a44:	e1bffe17 	ldw	r6,-8(fp)
   32a48:	e17ffd17 	ldw	r5,-12(fp)
   32a4c:	e13ffc17 	ldw	r4,-16(fp)
   32a50:	00330440 	call	33044 <alt_avalon_i2c_master_receive>
   32a54:	e0bffa15 	stw	r2,-24(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   32a58:	e0bffa17 	ldw	r2,-24(fp)
   32a5c:	10bffea0 	cmpeqi	r2,r2,-6
   32a60:	1000061e 	bne	r2,zero,32a7c <alt_avalon_i2c_master_rx+0x100>
   32a64:	e0bffa17 	ldw	r2,-24(fp)
   32a68:	10bffee0 	cmpeqi	r2,r2,-5
   32a6c:	1000031e 	bne	r2,zero,32a7c <alt_avalon_i2c_master_rx+0x100>
   32a70:	e0bffa17 	ldw	r2,-24(fp)
   32a74:	10bffe58 	cmpnei	r2,r2,-7
   32a78:	1000081e 	bne	r2,zero,32a9c <alt_avalon_i2c_master_rx+0x120>
   32a7c:	0001883a 	nop
        break;
      }
    }
    else
    {
      while (retry--) 
   32a80:	e0bffb17 	ldw	r2,-20(fp)
   32a84:	10ffffc4 	addi	r3,r2,-1
   32a88:	e0fffb15 	stw	r3,-20(fp)
   32a8c:	103fe51e 	bne	r2,zero,32a24 <__alt_data_end+0xf8032a24>
   32a90:	00000306 	br	32aa0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   32a94:	0001883a 	nop
   32a98:	00000106 	br	32aa0 <alt_avalon_i2c_master_rx+0x124>
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
        break;
   32a9c:	0001883a 	nop
      }
    }
    
    return status;
   32aa0:	e0bffa17 	ldw	r2,-24(fp)
}        
   32aa4:	e037883a 	mov	sp,fp
   32aa8:	dfc00117 	ldw	ra,4(sp)
   32aac:	df000017 	ldw	fp,0(sp)
   32ab0:	dec00204 	addi	sp,sp,8
   32ab4:	f800283a 	ret

00032ab8 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
   32ab8:	defff604 	addi	sp,sp,-40
   32abc:	dfc00915 	stw	ra,36(sp)
   32ac0:	df000815 	stw	fp,32(sp)
   32ac4:	df000804 	addi	fp,sp,32
   32ac8:	e13ffb15 	stw	r4,-20(fp)
   32acc:	e17ffc15 	stw	r5,-16(fp)
   32ad0:	e1bffd15 	stw	r6,-12(fp)
   32ad4:	e1fffe15 	stw	r7,-8(fp)
   32ad8:	e0800317 	ldw	r2,12(fp)
   32adc:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
   32ae0:	0089c404 	movi	r2,10000
   32ae4:	e0bffa15 	stw	r2,-24(fp)
    
    if (use_interrupts)
   32ae8:	e0bfff03 	ldbu	r2,-4(fp)
   32aec:	10005626 	beq	r2,zero,32c48 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
   32af0:	00002806 	br	32b94 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
   32af4:	e0bffa17 	ldw	r2,-24(fp)
   32af8:	108002a8 	cmpgeui	r2,r2,10
   32afc:	1000021e 	bne	r2,zero,32b08 <alt_avalon_i2c_master_tx_rx+0x50>
   32b00:	0109c404 	movi	r4,10000
   32b04:	0034ce80 	call	34ce8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   32b08:	d8000015 	stw	zero,0(sp)
   32b0c:	000f883a 	mov	r7,zero
   32b10:	e1bffd17 	ldw	r6,-12(fp)
   32b14:	e17ffc17 	ldw	r5,-16(fp)
   32b18:	e13ffb17 	ldw	r4,-20(fp)
   32b1c:	0032e3c0 	call	32e3c <alt_avalon_i2c_master_transmit_using_interrupts>
   32b20:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   32b24:	e0bff917 	ldw	r2,-28(fp)
   32b28:	10bffea0 	cmpeqi	r2,r2,-6
   32b2c:	1000191e 	bne	r2,zero,32b94 <alt_avalon_i2c_master_tx_rx+0xdc>
   32b30:	e0bff917 	ldw	r2,-28(fp)
   32b34:	10bffee0 	cmpeqi	r2,r2,-5
   32b38:	1000161e 	bne	r2,zero,32b94 <alt_avalon_i2c_master_tx_rx+0xdc>
   32b3c:	e0bff917 	ldw	r2,-28(fp)
   32b40:	10bffe58 	cmpnei	r2,r2,-7
   32b44:	1000011e 	bne	r2,zero,32b4c <alt_avalon_i2c_master_tx_rx+0x94>
   32b48:	00001206 	br	32b94 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   32b4c:	00800044 	movi	r2,1
   32b50:	d8800015 	stw	r2,0(sp)
   32b54:	01c00044 	movi	r7,1
   32b58:	e1800217 	ldw	r6,8(fp)
   32b5c:	e17ffe17 	ldw	r5,-8(fp)
   32b60:	e13ffb17 	ldw	r4,-20(fp)
   32b64:	00332500 	call	33250 <alt_avalon_i2c_master_receive_using_interrupts>
   32b68:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   32b6c:	e0bff917 	ldw	r2,-28(fp)
   32b70:	10bffea0 	cmpeqi	r2,r2,-6
   32b74:	1000061e 	bne	r2,zero,32b90 <alt_avalon_i2c_master_tx_rx+0xd8>
   32b78:	e0bff917 	ldw	r2,-28(fp)
   32b7c:	10bffee0 	cmpeqi	r2,r2,-5
   32b80:	1000031e 	bne	r2,zero,32b90 <alt_avalon_i2c_master_tx_rx+0xd8>
   32b84:	e0bff917 	ldw	r2,-28(fp)
   32b88:	10bffe58 	cmpnei	r2,r2,-7
   32b8c:	1000331e 	bne	r2,zero,32c5c <alt_avalon_i2c_master_tx_rx+0x1a4>
   32b90:	0001883a 	nop
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
    
    if (use_interrupts)
    {
      while (retry--) 
   32b94:	e0bffa17 	ldw	r2,-24(fp)
   32b98:	10ffffc4 	addi	r3,r2,-1
   32b9c:	e0fffa15 	stw	r3,-24(fp)
   32ba0:	103fd41e 	bne	r2,zero,32af4 <__alt_data_end+0xf8032af4>
   32ba4:	00003006 	br	32c68 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
   32ba8:	e0bffa17 	ldw	r2,-24(fp)
   32bac:	108002a8 	cmpgeui	r2,r2,10
   32bb0:	1000021e 	bne	r2,zero,32bbc <alt_avalon_i2c_master_tx_rx+0x104>
   32bb4:	0109c404 	movi	r4,10000
   32bb8:	0034ce80 	call	34ce8 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
   32bbc:	d8000015 	stw	zero,0(sp)
   32bc0:	000f883a 	mov	r7,zero
   32bc4:	e1bffd17 	ldw	r6,-12(fp)
   32bc8:	e17ffc17 	ldw	r5,-16(fp)
   32bcc:	e13ffb17 	ldw	r4,-20(fp)
   32bd0:	0032c800 	call	32c80 <alt_avalon_i2c_master_transmit>
   32bd4:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   32bd8:	e0bff917 	ldw	r2,-28(fp)
   32bdc:	10bffea0 	cmpeqi	r2,r2,-6
   32be0:	1000191e 	bne	r2,zero,32c48 <alt_avalon_i2c_master_tx_rx+0x190>
   32be4:	e0bff917 	ldw	r2,-28(fp)
   32be8:	10bffee0 	cmpeqi	r2,r2,-5
   32bec:	1000161e 	bne	r2,zero,32c48 <alt_avalon_i2c_master_tx_rx+0x190>
   32bf0:	e0bff917 	ldw	r2,-28(fp)
   32bf4:	10bffe58 	cmpnei	r2,r2,-7
   32bf8:	1000011e 	bne	r2,zero,32c00 <alt_avalon_i2c_master_tx_rx+0x148>
   32bfc:	00001206 	br	32c48 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
   32c00:	00800044 	movi	r2,1
   32c04:	d8800015 	stw	r2,0(sp)
   32c08:	01c00044 	movi	r7,1
   32c0c:	e1800217 	ldw	r6,8(fp)
   32c10:	e17ffe17 	ldw	r5,-8(fp)
   32c14:	e13ffb17 	ldw	r4,-20(fp)
   32c18:	00330440 	call	33044 <alt_avalon_i2c_master_receive>
   32c1c:	e0bff915 	stw	r2,-28(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
   32c20:	e0bff917 	ldw	r2,-28(fp)
   32c24:	10bffea0 	cmpeqi	r2,r2,-6
   32c28:	1000061e 	bne	r2,zero,32c44 <alt_avalon_i2c_master_tx_rx+0x18c>
   32c2c:	e0bff917 	ldw	r2,-28(fp)
   32c30:	10bffee0 	cmpeqi	r2,r2,-5
   32c34:	1000031e 	bne	r2,zero,32c44 <alt_avalon_i2c_master_tx_rx+0x18c>
   32c38:	e0bff917 	ldw	r2,-28(fp)
   32c3c:	10bffe58 	cmpnei	r2,r2,-7
   32c40:	1000081e 	bne	r2,zero,32c64 <alt_avalon_i2c_master_tx_rx+0x1ac>
   32c44:	0001883a 	nop
        break;
      }
    }
    else 
    {
      while (retry--) 
   32c48:	e0bffa17 	ldw	r2,-24(fp)
   32c4c:	10ffffc4 	addi	r3,r2,-1
   32c50:	e0fffa15 	stw	r3,-24(fp)
   32c54:	103fd41e 	bne	r2,zero,32ba8 <__alt_data_end+0xf8032ba8>
   32c58:	00000306 	br	32c68 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   32c5c:	0001883a 	nop
   32c60:	00000106 	br	32c68 <alt_avalon_i2c_master_tx_rx+0x1b0>
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
  
        break;
   32c64:	0001883a 	nop
      }
    }
    
    return status;
   32c68:	e0bff917 	ldw	r2,-28(fp)
}                                       
   32c6c:	e037883a 	mov	sp,fp
   32c70:	dfc00117 	ldw	ra,4(sp)
   32c74:	df000017 	ldw	fp,0(sp)
   32c78:	dec00204 	addi	sp,sp,8
   32c7c:	f800283a 	ret

00032c80 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   32c80:	defff704 	addi	sp,sp,-36
   32c84:	dfc00815 	stw	ra,32(sp)
   32c88:	df000715 	stw	fp,28(sp)
   32c8c:	df000704 	addi	fp,sp,28
   32c90:	e13ffb15 	stw	r4,-20(fp)
   32c94:	e17ffc15 	stw	r5,-16(fp)
   32c98:	e1bffd15 	stw	r6,-12(fp)
   32c9c:	3807883a 	mov	r3,r7
   32ca0:	e0800217 	ldw	r2,8(fp)
   32ca4:	e0fffe05 	stb	r3,-8(fp)
   32ca8:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   32cac:	e03ffa15 	stw	zero,-24(fp)
    alt_u32 timeout=size * 10000;
   32cb0:	e0bffd17 	ldw	r2,-12(fp)
   32cb4:	1089c424 	muli	r2,r2,10000
   32cb8:	e0bff915 	stw	r2,-28(fp)
    
    if (size==0)
   32cbc:	e0bffd17 	ldw	r2,-12(fp)
   32cc0:	1000021e 	bne	r2,zero,32ccc <alt_avalon_i2c_master_transmit+0x4c>
    {
      return ALT_AVALON_I2C_SUCCESS;
   32cc4:	0005883a 	mov	r2,zero
   32cc8:	00005706 	br	32e28 <alt_avalon_i2c_master_transmit+0x1a8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   32ccc:	e0bffe03 	ldbu	r2,-8(fp)
   32cd0:	10000a1e 	bne	r2,zero,32cfc <alt_avalon_i2c_master_transmit+0x7c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   32cd4:	e13ffb17 	ldw	r4,-20(fp)
   32cd8:	0031f040 	call	31f04 <alt_avalon_i2c_enable>
   32cdc:	e0bffa15 	stw	r2,-24(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   32ce0:	e0bffa17 	ldw	r2,-24(fp)
   32ce4:	10000226 	beq	r2,zero,32cf0 <alt_avalon_i2c_master_transmit+0x70>
      {
        return status;
   32ce8:	e0bffa17 	ldw	r2,-24(fp)
   32cec:	00004e06 	br	32e28 <alt_avalon_i2c_master_transmit+0x1a8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   32cf0:	01400704 	movi	r5,28
   32cf4:	e13ffb17 	ldw	r4,-20(fp)
   32cf8:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   32cfc:	e0bffe03 	ldbu	r2,-8(fp)
   32d00:	100d883a 	mov	r6,r2
   32d04:	000b883a 	mov	r5,zero
   32d08:	e13ffb17 	ldw	r4,-20(fp)
   32d0c:	003256c0 	call	3256c <alt_avalon_i2c_send_address>
   32d10:	e0bffa15 	stw	r2,-24(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
   32d14:	e0bffa17 	ldw	r2,-24(fp)
   32d18:	1000271e 	bne	r2,zero,32db8 <alt_avalon_i2c_master_transmit+0x138>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   32d1c:	00000f06 	br	32d5c <alt_avalon_i2c_master_transmit+0xdc>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   32d20:	e0bffc17 	ldw	r2,-16(fp)
   32d24:	10800003 	ldbu	r2,0(r2)
   32d28:	10803fcc 	andi	r2,r2,255
   32d2c:	000f883a 	mov	r7,zero
   32d30:	000d883a 	mov	r6,zero
   32d34:	100b883a 	mov	r5,r2
   32d38:	e13ffb17 	ldw	r4,-20(fp)
   32d3c:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   32d40:	e0bffa15 	stw	r2,-24(fp)
            
            ++buffer;
   32d44:	e0bffc17 	ldw	r2,-16(fp)
   32d48:	10800044 	addi	r2,r2,1
   32d4c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   32d50:	e0bffd17 	ldw	r2,-12(fp)
   32d54:	10bfffc4 	addi	r2,r2,-1
   32d58:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
      
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   32d5c:	e0bffd17 	ldw	r2,-12(fp)
   32d60:	108000b0 	cmpltui	r2,r2,2
   32d64:	1000021e 	bne	r2,zero,32d70 <alt_avalon_i2c_master_transmit+0xf0>
   32d68:	e0bffa17 	ldw	r2,-24(fp)
   32d6c:	103fec26 	beq	r2,zero,32d20 <__alt_data_end+0xf8032d20>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   32d70:	e0bffa17 	ldw	r2,-24(fp)
   32d74:	1000101e 	bne	r2,zero,32db8 <alt_avalon_i2c_master_transmit+0x138>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   32d78:	e0bffc17 	ldw	r2,-16(fp)
   32d7c:	10800003 	ldbu	r2,0(r2)
   32d80:	10803fcc 	andi	r2,r2,255
   32d84:	e0ffff03 	ldbu	r3,-4(fp)
   32d88:	180f883a 	mov	r7,r3
   32d8c:	000d883a 	mov	r6,zero
   32d90:	100b883a 	mov	r5,r2
   32d94:	e13ffb17 	ldw	r4,-20(fp)
   32d98:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   32d9c:	e0bffa15 	stw	r2,-24(fp)

            ++buffer;
   32da0:	e0bffc17 	ldw	r2,-16(fp)
   32da4:	10800044 	addi	r2,r2,1
   32da8:	e0bffc15 	stw	r2,-16(fp)
            --size;
   32dac:	e0bffd17 	ldw	r2,-12(fp)
   32db0:	10bfffc4 	addi	r2,r2,-1
   32db4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   32db8:	e0bfff03 	ldbu	r2,-4(fp)
   32dbc:	1000101e 	bne	r2,zero,32e00 <alt_avalon_i2c_master_transmit+0x180>
   32dc0:	e0bffa17 	ldw	r2,-24(fp)
   32dc4:	10001726 	beq	r2,zero,32e24 <alt_avalon_i2c_master_transmit+0x1a4>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   32dc8:	00000d06 	br	32e00 <alt_avalon_i2c_master_transmit+0x180>
        {
            if (timeout<10) alt_busy_sleep(10000);
   32dcc:	e0bff917 	ldw	r2,-28(fp)
   32dd0:	108002a8 	cmpgeui	r2,r2,10
   32dd4:	1000021e 	bne	r2,zero,32de0 <alt_avalon_i2c_master_transmit+0x160>
   32dd8:	0109c404 	movi	r4,10000
   32ddc:	0034ce80 	call	34ce8 <alt_busy_sleep>
            if (--timeout == 0)
   32de0:	e0bff917 	ldw	r2,-28(fp)
   32de4:	10bfffc4 	addi	r2,r2,-1
   32de8:	e0bff915 	stw	r2,-28(fp)
   32dec:	e0bff917 	ldw	r2,-28(fp)
   32df0:	1000031e 	bne	r2,zero,32e00 <alt_avalon_i2c_master_transmit+0x180>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   32df4:	00bfff84 	movi	r2,-2
   32df8:	e0bffa15 	stw	r2,-24(fp)
               break;
   32dfc:	00000306 	br	32e0c <alt_avalon_i2c_master_transmit+0x18c>
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   32e00:	e13ffb17 	ldw	r4,-20(fp)
   32e04:	00322f40 	call	322f4 <alt_avalon_i2c_is_busy>
   32e08:	103ff01e 	bne	r2,zero,32dcc <__alt_data_end+0xf8032dcc>
               break;
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
   32e0c:	e0bffa04 	addi	r2,fp,-24
   32e10:	100b883a 	mov	r5,r2
   32e14:	e13ffb17 	ldw	r4,-20(fp)
   32e18:	00326c80 	call	326c8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   32e1c:	e13ffb17 	ldw	r4,-20(fp)
   32e20:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>
    }


    return status;
   32e24:	e0bffa17 	ldw	r2,-24(fp)
}
   32e28:	e037883a 	mov	sp,fp
   32e2c:	dfc00117 	ldw	ra,4(sp)
   32e30:	df000017 	ldw	fp,0(sp)
   32e34:	dec00204 	addi	sp,sp,8
   32e38:	f800283a 	ret

00032e3c <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
   32e3c:	defff604 	addi	sp,sp,-40
   32e40:	dfc00915 	stw	ra,36(sp)
   32e44:	df000815 	stw	fp,32(sp)
   32e48:	df000804 	addi	fp,sp,32
   32e4c:	e13ffb15 	stw	r4,-20(fp)
   32e50:	e17ffc15 	stw	r5,-16(fp)
   32e54:	e1bffd15 	stw	r6,-12(fp)
   32e58:	3807883a 	mov	r3,r7
   32e5c:	e0800217 	ldw	r2,8(fp)
   32e60:	e0fffe05 	stb	r3,-8(fp)
   32e64:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   32e68:	e03ff815 	stw	zero,-32(fp)
    alt_u32 timeout=size*10000;
   32e6c:	e0bffd17 	ldw	r2,-12(fp)
   32e70:	1089c424 	muli	r2,r2,10000
   32e74:	e0bff915 	stw	r2,-28(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   32e78:	e0bffb17 	ldw	r2,-20(fp)
   32e7c:	10800717 	ldw	r2,28(r2)
   32e80:	e0bffa15 	stw	r2,-24(fp)
    
    if (size==0)
   32e84:	e0bffd17 	ldw	r2,-12(fp)
   32e88:	1000021e 	bne	r2,zero,32e94 <alt_avalon_i2c_master_transmit_using_interrupts+0x58>
    {
      return ALT_AVALON_I2C_SUCCESS;
   32e8c:	0005883a 	mov	r2,zero
   32e90:	00006706 	br	33030 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   32e94:	e0bffb17 	ldw	r2,-20(fp)
   32e98:	10c00617 	ldw	r3,24(r2)
   32e9c:	008000f4 	movhi	r2,3
   32ea0:	1086e204 	addi	r2,r2,7048
   32ea4:	18800226 	beq	r3,r2,32eb0 <alt_avalon_i2c_master_transmit_using_interrupts+0x74>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   32ea8:	00bfff44 	movi	r2,-3
   32eac:	00006006 	br	33030 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   32eb0:	e0bffe03 	ldbu	r2,-8(fp)
   32eb4:	10000a1e 	bne	r2,zero,32ee0 <alt_avalon_i2c_master_transmit_using_interrupts+0xa4>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   32eb8:	e13ffb17 	ldw	r4,-20(fp)
   32ebc:	0031f040 	call	31f04 <alt_avalon_i2c_enable>
   32ec0:	e0bff815 	stw	r2,-32(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   32ec4:	e0bff817 	ldw	r2,-32(fp)
   32ec8:	10000226 	beq	r2,zero,32ed4 <alt_avalon_i2c_master_transmit_using_interrupts+0x98>
      {
        return status;
   32ecc:	e0bff817 	ldw	r2,-32(fp)
   32ed0:	00005706 	br	33030 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   32ed4:	01400704 	movi	r5,28
   32ed8:	e13ffb17 	ldw	r4,-20(fp)
   32edc:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
   32ee0:	e0bffe03 	ldbu	r2,-8(fp)
   32ee4:	100d883a 	mov	r6,r2
   32ee8:	000b883a 	mov	r5,zero
   32eec:	e13ffb17 	ldw	r4,-20(fp)
   32ef0:	003256c0 	call	3256c <alt_avalon_i2c_send_address>
   32ef4:	e0bff815 	stw	r2,-32(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
   32ef8:	e0bff817 	ldw	r2,-32(fp)
   32efc:	1000271e 	bne	r2,zero,32f9c <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   32f00:	00000f06 	br	32f40 <alt_avalon_i2c_master_transmit_using_interrupts+0x104>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   32f04:	e0bffc17 	ldw	r2,-16(fp)
   32f08:	10800003 	ldbu	r2,0(r2)
   32f0c:	10803fcc 	andi	r2,r2,255
   32f10:	000f883a 	mov	r7,zero
   32f14:	000d883a 	mov	r6,zero
   32f18:	100b883a 	mov	r5,r2
   32f1c:	e13ffb17 	ldw	r4,-20(fp)
   32f20:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   32f24:	e0bff815 	stw	r2,-32(fp)
            
            ++buffer;
   32f28:	e0bffc17 	ldw	r2,-16(fp)
   32f2c:	10800044 	addi	r2,r2,1
   32f30:	e0bffc15 	stw	r2,-16(fp)
            --size;
   32f34:	e0bffd17 	ldw	r2,-12(fp)
   32f38:	10bfffc4 	addi	r2,r2,-1
   32f3c:	e0bffd15 	stw	r2,-12(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
        
    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
   32f40:	e0bffd17 	ldw	r2,-12(fp)
   32f44:	108000b0 	cmpltui	r2,r2,2
   32f48:	1000021e 	bne	r2,zero,32f54 <alt_avalon_i2c_master_transmit_using_interrupts+0x118>
   32f4c:	e0bff817 	ldw	r2,-32(fp)
   32f50:	103fec26 	beq	r2,zero,32f04 <__alt_data_end+0xf8032f04>
            ++buffer;
            --size;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   32f54:	e0bff817 	ldw	r2,-32(fp)
   32f58:	1000101e 	bne	r2,zero,32f9c <alt_avalon_i2c_master_transmit_using_interrupts+0x160>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   32f5c:	e0bffc17 	ldw	r2,-16(fp)
   32f60:	10800003 	ldbu	r2,0(r2)
   32f64:	10803fcc 	andi	r2,r2,255
   32f68:	e0ffff03 	ldbu	r3,-4(fp)
   32f6c:	180f883a 	mov	r7,r3
   32f70:	000d883a 	mov	r6,zero
   32f74:	100b883a 	mov	r5,r2
   32f78:	e13ffb17 	ldw	r4,-20(fp)
   32f7c:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   32f80:	e0bff815 	stw	r2,-32(fp)

            ++buffer;
   32f84:	e0bffc17 	ldw	r2,-16(fp)
   32f88:	10800044 	addi	r2,r2,1
   32f8c:	e0bffc15 	stw	r2,-16(fp)
            --size;
   32f90:	e0bffd17 	ldw	r2,-12(fp)
   32f94:	10bfffc4 	addi	r2,r2,-1
   32f98:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   32f9c:	e0bff817 	ldw	r2,-32(fp)
   32fa0:	10001426 	beq	r2,zero,32ff4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   32fa4:	00000d06 	br	32fdc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
        {
            if (timeout<10) alt_busy_sleep(10000);        
   32fa8:	e0bff917 	ldw	r2,-28(fp)
   32fac:	108002a8 	cmpgeui	r2,r2,10
   32fb0:	1000021e 	bne	r2,zero,32fbc <alt_avalon_i2c_master_transmit_using_interrupts+0x180>
   32fb4:	0109c404 	movi	r4,10000
   32fb8:	0034ce80 	call	34ce8 <alt_busy_sleep>
            if (--timeout == 0)
   32fbc:	e0bff917 	ldw	r2,-28(fp)
   32fc0:	10bfffc4 	addi	r2,r2,-1
   32fc4:	e0bff915 	stw	r2,-28(fp)
   32fc8:	e0bff917 	ldw	r2,-28(fp)
   32fcc:	1000031e 	bne	r2,zero,32fdc <alt_avalon_i2c_master_transmit_using_interrupts+0x1a0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   32fd0:	00bfff84 	movi	r2,-2
   32fd4:	e0bff815 	stw	r2,-32(fp)
               break;
   32fd8:	00000306 	br	32fe8 <alt_avalon_i2c_master_transmit_using_interrupts+0x1ac>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
   32fdc:	e13ffb17 	ldw	r4,-20(fp)
   32fe0:	00322f40 	call	322f4 <alt_avalon_i2c_is_busy>
   32fe4:	103ff01e 	bne	r2,zero,32fa8 <__alt_data_end+0xf8032fa8>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   32fe8:	e13ffb17 	ldw	r4,-20(fp)
   32fec:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>
   32ff0:	00000e06 	br	3302c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
    }
    else
    {
       if (issue_stop)
   32ff4:	e0bfff03 	ldbu	r2,-4(fp)
   32ff8:	10000c26 	beq	r2,zero,3302c <alt_avalon_i2c_master_transmit_using_interrupts+0x1f0>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   32ffc:	01400704 	movi	r5,28
   33000:	e13ffb17 	ldw	r4,-20(fp)
   33004:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
   33008:	000b883a 	mov	r5,zero
   3300c:	e13ffb17 	ldw	r4,-20(fp)
   33010:	00337200 	call	33720 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
   33014:	e0bffa17 	ldw	r2,-24(fp)
   33018:	00c00044 	movi	r3,1
   3301c:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
   33020:	01400044 	movi	r5,1
   33024:	e13ffb17 	ldw	r4,-20(fp)
   33028:	003357c0 	call	3357c <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
   3302c:	e0bff817 	ldw	r2,-32(fp)
}
   33030:	e037883a 	mov	sp,fp
   33034:	dfc00117 	ldw	ra,4(sp)
   33038:	df000017 	ldw	fp,0(sp)
   3303c:	dec00204 	addi	sp,sp,8
   33040:	f800283a 	ret

00033044 <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   33044:	defff404 	addi	sp,sp,-48
   33048:	dfc00b15 	stw	ra,44(sp)
   3304c:	df000a15 	stw	fp,40(sp)
   33050:	df000a04 	addi	fp,sp,40
   33054:	e13ffb15 	stw	r4,-20(fp)
   33058:	e17ffc15 	stw	r5,-16(fp)
   3305c:	e1bffd15 	stw	r6,-12(fp)
   33060:	3807883a 	mov	r3,r7
   33064:	e0800217 	ldw	r2,8(fp)
   33068:	e0fffe05 	stb	r3,-8(fp)
   3306c:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   33070:	e03ff915 	stw	zero,-28(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
   33074:	e03ff715 	stw	zero,-36(fp)
    alt_u32 bytes_written=0;
   33078:	e03ff815 	stw	zero,-32(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
   3307c:	e0bffd17 	ldw	r2,-12(fp)
   33080:	1000021e 	bne	r2,zero,3308c <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
   33084:	0005883a 	mov	r2,zero
   33088:	00006c06 	br	3323c <alt_avalon_i2c_master_receive+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   3308c:	e0bffe03 	ldbu	r2,-8(fp)
   33090:	10000a1e 	bne	r2,zero,330bc <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   33094:	e13ffb17 	ldw	r4,-20(fp)
   33098:	0031f040 	call	31f04 <alt_avalon_i2c_enable>
   3309c:	e0bff915 	stw	r2,-28(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   330a0:	e0bff917 	ldw	r2,-28(fp)
   330a4:	10000226 	beq	r2,zero,330b0 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
   330a8:	e0bff917 	ldw	r2,-28(fp)
   330ac:	00006306 	br	3323c <alt_avalon_i2c_master_receive+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   330b0:	01400704 	movi	r5,28
   330b4:	e13ffb17 	ldw	r4,-20(fp)
   330b8:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   330bc:	e0bffe03 	ldbu	r2,-8(fp)
   330c0:	100d883a 	mov	r6,r2
   330c4:	01400044 	movi	r5,1
   330c8:	e13ffb17 	ldw	r4,-20(fp)
   330cc:	003256c0 	call	3256c <alt_avalon_i2c_send_address>
   330d0:	e0bff915 	stw	r2,-28(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   330d4:	e0bff917 	ldw	r2,-28(fp)
   330d8:	1000341e 	bne	r2,zero,331ac <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   330dc:	00001906 	br	33144 <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   330e0:	000f883a 	mov	r7,zero
   330e4:	000d883a 	mov	r6,zero
   330e8:	000b883a 	mov	r5,zero
   330ec:	e13ffb17 	ldw	r4,-20(fp)
   330f0:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   330f4:	e0bff915 	stw	r2,-28(fp)
            bytes_written++;
   330f8:	e0bff817 	ldw	r2,-32(fp)
   330fc:	10800044 	addi	r2,r2,1
   33100:	e0bff815 	stw	r2,-32(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
   33104:	e0bff917 	ldw	r2,-28(fp)
   33108:	10000e1e 	bne	r2,zero,33144 <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
   3310c:	e0bffa04 	addi	r2,fp,-24
   33110:	100f883a 	mov	r7,r2
   33114:	000d883a 	mov	r6,zero
   33118:	e17ffc17 	ldw	r5,-16(fp)
   3311c:	e13ffb17 	ldw	r4,-20(fp)
   33120:	00323380 	call	32338 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
   33124:	e0bffa17 	ldw	r2,-24(fp)
   33128:	e0fffc17 	ldw	r3,-16(fp)
   3312c:	1885883a 	add	r2,r3,r2
   33130:	e0bffc15 	stw	r2,-16(fp)
               bytes_read+=temp_bytes_read;
   33134:	e0bffa17 	ldw	r2,-24(fp)
   33138:	e0fff717 	ldw	r3,-36(fp)
   3313c:	1885883a 	add	r2,r3,r2
   33140:	e0bff715 	stw	r2,-36(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   33144:	e0bffd17 	ldw	r2,-12(fp)
   33148:	10bfffc4 	addi	r2,r2,-1
   3314c:	e0fff817 	ldw	r3,-32(fp)
   33150:	1880022e 	bgeu	r3,r2,3315c <alt_avalon_i2c_master_receive+0x118>
   33154:	e0bff917 	ldw	r2,-28(fp)
   33158:	103fe126 	beq	r2,zero,330e0 <__alt_data_end+0xf80330e0>
               bytes_read+=temp_bytes_read;
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   3315c:	e0bff917 	ldw	r2,-28(fp)
   33160:	1000121e 	bne	r2,zero,331ac <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   33164:	e0bfff03 	ldbu	r2,-4(fp)
   33168:	100f883a 	mov	r7,r2
   3316c:	000d883a 	mov	r6,zero
   33170:	000b883a 	mov	r5,zero
   33174:	e13ffb17 	ldw	r4,-20(fp)
   33178:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   3317c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   33180:	00000a06 	br	331ac <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
   33184:	e17ffc17 	ldw	r5,-16(fp)
   33188:	e13ffb17 	ldw	r4,-20(fp)
   3318c:	00323e00 	call	323e0 <alt_avalon_i2c_rx_read>
   33190:	e0bff915 	stw	r2,-28(fp)
        buffer++;
   33194:	e0bffc17 	ldw	r2,-16(fp)
   33198:	10800044 	addi	r2,r2,1
   3319c:	e0bffc15 	stw	r2,-16(fp)
        bytes_read++;
   331a0:	e0bff717 	ldw	r2,-36(fp)
   331a4:	10800044 	addi	r2,r2,1
   331a8:	e0bff715 	stw	r2,-36(fp)
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
   331ac:	e0fff717 	ldw	r3,-36(fp)
   331b0:	e0bffd17 	ldw	r2,-12(fp)
   331b4:	1880022e 	bgeu	r3,r2,331c0 <alt_avalon_i2c_master_receive+0x17c>
   331b8:	e0bff917 	ldw	r2,-28(fp)
   331bc:	103ff126 	beq	r2,zero,33184 <__alt_data_end+0xf8033184>
        buffer++;
        bytes_read++;
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
   331c0:	e0bfff03 	ldbu	r2,-4(fp)
   331c4:	1000021e 	bne	r2,zero,331d0 <alt_avalon_i2c_master_receive+0x18c>
   331c8:	e0bff917 	ldw	r2,-28(fp)
   331cc:	10001a26 	beq	r2,zero,33238 <alt_avalon_i2c_master_receive+0x1f4>
    {
        timeout=10000 * size;
   331d0:	e0bffd17 	ldw	r2,-12(fp)
   331d4:	1089c424 	muli	r2,r2,10000
   331d8:	e0bff615 	stw	r2,-40(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   331dc:	00000d06 	br	33214 <alt_avalon_i2c_master_receive+0x1d0>
        {
            if (timeout<10) alt_busy_sleep(10000);
   331e0:	e0bff617 	ldw	r2,-40(fp)
   331e4:	108002a8 	cmpgeui	r2,r2,10
   331e8:	1000021e 	bne	r2,zero,331f4 <alt_avalon_i2c_master_receive+0x1b0>
   331ec:	0109c404 	movi	r4,10000
   331f0:	0034ce80 	call	34ce8 <alt_busy_sleep>
            if (--timeout == 0)
   331f4:	e0bff617 	ldw	r2,-40(fp)
   331f8:	10bfffc4 	addi	r2,r2,-1
   331fc:	e0bff615 	stw	r2,-40(fp)
   33200:	e0bff617 	ldw	r2,-40(fp)
   33204:	1000031e 	bne	r2,zero,33214 <alt_avalon_i2c_master_receive+0x1d0>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   33208:	00bfff84 	movi	r2,-2
   3320c:	e0bff915 	stw	r2,-28(fp)
               break;
   33210:	00000306 	br	33220 <alt_avalon_i2c_master_receive+0x1dc>

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   33214:	e13ffb17 	ldw	r4,-20(fp)
   33218:	00322f40 	call	322f4 <alt_avalon_i2c_is_busy>
   3321c:	103ff01e 	bne	r2,zero,331e0 <__alt_data_end+0xf80331e0>
               break;
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
   33220:	e0bff904 	addi	r2,fp,-28
   33224:	100b883a 	mov	r5,r2
   33228:	e13ffb17 	ldw	r4,-20(fp)
   3322c:	00326c80 	call	326c8 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   33230:	e13ffb17 	ldw	r4,-20(fp)
   33234:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>
    }

    return status;
   33238:	e0bff917 	ldw	r2,-28(fp)
}
   3323c:	e037883a 	mov	sp,fp
   33240:	dfc00117 	ldw	ra,4(sp)
   33244:	df000017 	ldw	fp,0(sp)
   33248:	dec00204 	addi	sp,sp,8
   3324c:	f800283a 	ret

00033250 <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
   33250:	defff504 	addi	sp,sp,-44
   33254:	dfc00a15 	stw	ra,40(sp)
   33258:	df000915 	stw	fp,36(sp)
   3325c:	df000904 	addi	fp,sp,36
   33260:	e13ffb15 	stw	r4,-20(fp)
   33264:	e17ffc15 	stw	r5,-16(fp)
   33268:	e1bffd15 	stw	r6,-12(fp)
   3326c:	3807883a 	mov	r3,r7
   33270:	e0800217 	ldw	r2,8(fp)
   33274:	e0fffe05 	stb	r3,-8(fp)
   33278:	e0bfff05 	stb	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
   3327c:	e03ff715 	stw	zero,-36(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
   33280:	e0bffb17 	ldw	r2,-20(fp)
   33284:	10800717 	ldw	r2,28(r2)
   33288:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
   3328c:	e03ff915 	stw	zero,-28(fp)
    
    if (size==0)
   33290:	e0bffd17 	ldw	r2,-12(fp)
   33294:	1000021e 	bne	r2,zero,332a0 <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
   33298:	0005883a 	mov	r2,zero
   3329c:	00006206 	br	33428 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
   332a0:	e0bffb17 	ldw	r2,-20(fp)
   332a4:	10c00617 	ldw	r3,24(r2)
   332a8:	008000f4 	movhi	r2,3
   332ac:	1086e204 	addi	r2,r2,7048
   332b0:	18800226 	beq	r3,r2,332bc <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
   332b4:	00bfff44 	movi	r2,-3
   332b8:	00005b06 	br	33428 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
   332bc:	e0bffe03 	ldbu	r2,-8(fp)
   332c0:	10000a1e 	bne	r2,zero,332ec <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
   332c4:	e13ffb17 	ldw	r4,-20(fp)
   332c8:	0031f040 	call	31f04 <alt_avalon_i2c_enable>
   332cc:	e0bff715 	stw	r2,-36(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
   332d0:	e0bff717 	ldw	r2,-36(fp)
   332d4:	10000226 	beq	r2,zero,332e0 <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
   332d8:	e0bff717 	ldw	r2,-36(fp)
   332dc:	00005206 	br	33428 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   332e0:	01400704 	movi	r5,28
   332e4:	e13ffb17 	ldw	r4,-20(fp)
   332e8:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
   332ec:	e0bffe03 	ldbu	r2,-8(fp)
   332f0:	100d883a 	mov	r6,r2
   332f4:	01400044 	movi	r5,1
   332f8:	e13ffb17 	ldw	r4,-20(fp)
   332fc:	003256c0 	call	3256c <alt_avalon_i2c_send_address>
   33300:	e0bff715 	stw	r2,-36(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
   33304:	e0bff717 	ldw	r2,-36(fp)
   33308:	1000191e 	bne	r2,zero,33370 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   3330c:	00000906 	br	33334 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
   33310:	000f883a 	mov	r7,zero
   33314:	000d883a 	mov	r6,zero
   33318:	000b883a 	mov	r5,zero
   3331c:	e13ffb17 	ldw	r4,-20(fp)
   33320:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   33324:	e0bff715 	stw	r2,-36(fp)
            bytes_written++;
   33328:	e0bff917 	ldw	r2,-28(fp)
   3332c:	10800044 	addi	r2,r2,1
   33330:	e0bff915 	stw	r2,-28(fp)
    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);

    if (status == ALT_AVALON_I2C_SUCCESS)
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
   33334:	e0bffd17 	ldw	r2,-12(fp)
   33338:	10bfffc4 	addi	r2,r2,-1
   3333c:	e0fff917 	ldw	r3,-28(fp)
   33340:	1880022e 	bgeu	r3,r2,3334c <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
   33344:	e0bff717 	ldw	r2,-36(fp)
   33348:	103ff126 	beq	r2,zero,33310 <__alt_data_end+0xf8033310>
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
            bytes_written++;
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
   3334c:	e0bff717 	ldw	r2,-36(fp)
   33350:	1000071e 	bne	r2,zero,33370 <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
   33354:	e0bfff03 	ldbu	r2,-4(fp)
   33358:	100f883a 	mov	r7,r2
   3335c:	000d883a 	mov	r6,zero
   33360:	000b883a 	mov	r5,zero
   33364:	e13ffb17 	ldw	r4,-20(fp)
   33368:	00324880 	call	32488 <alt_avalon_i2c_cmd_write>
   3336c:	e0bff715 	stw	r2,-36(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
   33370:	e0bff717 	ldw	r2,-36(fp)
   33374:	10001726 	beq	r2,zero,333d4 <alt_avalon_i2c_master_receive_using_interrupts+0x184>
    {
        timeout=10000 * size;
   33378:	e0bffd17 	ldw	r2,-12(fp)
   3337c:	1089c424 	muli	r2,r2,10000
   33380:	e0bff815 	stw	r2,-32(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
   33384:	00000d06 	br	333bc <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
        {
            if (timeout<10) alt_busy_sleep(10000);
   33388:	e0bff817 	ldw	r2,-32(fp)
   3338c:	108002a8 	cmpgeui	r2,r2,10
   33390:	1000021e 	bne	r2,zero,3339c <alt_avalon_i2c_master_receive_using_interrupts+0x14c>
   33394:	0109c404 	movi	r4,10000
   33398:	0034ce80 	call	34ce8 <alt_busy_sleep>
            if (--timeout == 0)
   3339c:	e0bff817 	ldw	r2,-32(fp)
   333a0:	10bfffc4 	addi	r2,r2,-1
   333a4:	e0bff815 	stw	r2,-32(fp)
   333a8:	e0bff817 	ldw	r2,-32(fp)
   333ac:	1000031e 	bne	r2,zero,333bc <alt_avalon_i2c_master_receive_using_interrupts+0x16c>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
   333b0:	00bfff84 	movi	r2,-2
   333b4:	e0bff715 	stw	r2,-36(fp)
               break;
   333b8:	00000306 	br	333c8 <alt_avalon_i2c_master_receive_using_interrupts+0x178>
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
    {
        timeout=10000 * size;
        while (alt_avalon_i2c_is_busy(i2c_dev))
   333bc:	e13ffb17 	ldw	r4,-20(fp)
   333c0:	00322f40 	call	322f4 <alt_avalon_i2c_is_busy>
   333c4:	103ff01e 	bne	r2,zero,33388 <__alt_data_end+0xf8033388>
               break;
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
   333c8:	e13ffb17 	ldw	r4,-20(fp)
   333cc:	0031f9c0 	call	31f9c <alt_avalon_i2c_disable>
   333d0:	00001406 	br	33424 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
    }
    else
    {
       if (issue_stop)
   333d4:	e0bfff03 	ldbu	r2,-4(fp)
   333d8:	10001226 	beq	r2,zero,33424 <alt_avalon_i2c_master_receive_using_interrupts+0x1d4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
   333dc:	01400704 	movi	r5,28
   333e0:	e13ffb17 	ldw	r4,-20(fp)
   333e4:	00334d80 	call	334d8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
   333e8:	000b883a 	mov	r5,zero
   333ec:	e13ffb17 	ldw	r4,-20(fp)
   333f0:	00336700 	call	33670 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
   333f4:	e0bffa17 	ldw	r2,-24(fp)
   333f8:	00c00084 	movi	r3,2
   333fc:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
   33400:	e0bffa17 	ldw	r2,-24(fp)
   33404:	e0fffc17 	ldw	r3,-16(fp)
   33408:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
   3340c:	e0bffa17 	ldw	r2,-24(fp)
   33410:	e0fffd17 	ldw	r3,-12(fp)
   33414:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
   33418:	01400084 	movi	r5,2
   3341c:	e13ffb17 	ldw	r4,-20(fp)
   33420:	003357c0 	call	3357c <alt_avalon_i2c_int_enable>
       }
    }

    return status;
   33424:	e0bff717 	ldw	r2,-36(fp)
}
   33428:	e037883a 	mov	sp,fp
   3342c:	dfc00117 	ldw	ra,4(sp)
   33430:	df000017 	ldw	fp,0(sp)
   33434:	dec00204 	addi	sp,sp,8
   33438:	f800283a 	ret

0003343c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
   3343c:	defffd04 	addi	sp,sp,-12
   33440:	df000215 	stw	fp,8(sp)
   33444:	df000204 	addi	fp,sp,8
   33448:	e13ffe15 	stw	r4,-8(fp)
   3344c:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
   33450:	e0bffe17 	ldw	r2,-8(fp)
   33454:	10800317 	ldw	r2,12(r2)
   33458:	10800404 	addi	r2,r2,16
   3345c:	10c00037 	ldwio	r3,0(r2)
   33460:	e0bffe17 	ldw	r2,-8(fp)
   33464:	10800317 	ldw	r2,12(r2)
   33468:	10800304 	addi	r2,r2,12
   3346c:	10800037 	ldwio	r2,0(r2)
   33470:	1884703a 	and	r2,r3,r2
   33474:	1007883a 	mov	r3,r2
   33478:	e0bfff17 	ldw	r2,-4(fp)
   3347c:	10c00015 	stw	r3,0(r2)
}
   33480:	0001883a 	nop
   33484:	e037883a 	mov	sp,fp
   33488:	df000017 	ldw	fp,0(sp)
   3348c:	dec00104 	addi	sp,sp,4
   33490:	f800283a 	ret

00033494 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
   33494:	defffd04 	addi	sp,sp,-12
   33498:	df000215 	stw	fp,8(sp)
   3349c:	df000204 	addi	fp,sp,8
   334a0:	e13ffe15 	stw	r4,-8(fp)
   334a4:	e17fff15 	stw	r5,-4(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
   334a8:	e0bffe17 	ldw	r2,-8(fp)
   334ac:	10800317 	ldw	r2,12(r2)
   334b0:	10800404 	addi	r2,r2,16
   334b4:	10800037 	ldwio	r2,0(r2)
   334b8:	1007883a 	mov	r3,r2
   334bc:	e0bfff17 	ldw	r2,-4(fp)
   334c0:	10c00015 	stw	r3,0(r2)
}
   334c4:	0001883a 	nop
   334c8:	e037883a 	mov	sp,fp
   334cc:	df000017 	ldw	fp,0(sp)
   334d0:	dec00104 	addi	sp,sp,4
   334d4:	f800283a 	ret

000334d8 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   334d8:	defffd04 	addi	sp,sp,-12
   334dc:	df000215 	stw	fp,8(sp)
   334e0:	df000204 	addi	fp,sp,8
   334e4:	e13ffe15 	stw	r4,-8(fp)
   334e8:	e17fff15 	stw	r5,-4(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
   334ec:	e0bffe17 	ldw	r2,-8(fp)
   334f0:	10800317 	ldw	r2,12(r2)
   334f4:	10800404 	addi	r2,r2,16
   334f8:	e0ffff17 	ldw	r3,-4(fp)
   334fc:	10c00035 	stwio	r3,0(r2)
}
   33500:	0001883a 	nop
   33504:	e037883a 	mov	sp,fp
   33508:	df000017 	ldw	fp,0(sp)
   3350c:	dec00104 	addi	sp,sp,4
   33510:	f800283a 	ret

00033514 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   33514:	defffb04 	addi	sp,sp,-20
   33518:	dfc00415 	stw	ra,16(sp)
   3351c:	df000315 	stw	fp,12(sp)
   33520:	df000304 	addi	fp,sp,12
   33524:	e13ffe15 	stw	r4,-8(fp)
   33528:	e17fff15 	stw	r5,-4(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   3352c:	e17ffd04 	addi	r5,fp,-12
   33530:	e13ffe17 	ldw	r4,-8(fp)
   33534:	00335e00 	call	335e0 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
   33538:	e0bfff17 	ldw	r2,-4(fp)
   3353c:	0086303a 	nor	r3,zero,r2
   33540:	e0bffd17 	ldw	r2,-12(fp)
   33544:	1884703a 	and	r2,r3,r2
   33548:	e0bffd15 	stw	r2,-12(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   3354c:	e0bffe17 	ldw	r2,-8(fp)
   33550:	10800317 	ldw	r2,12(r2)
   33554:	10800304 	addi	r2,r2,12
   33558:	e0fffd17 	ldw	r3,-12(fp)
   3355c:	18c007cc 	andi	r3,r3,31
   33560:	10c00035 	stwio	r3,0(r2)
}
   33564:	0001883a 	nop
   33568:	e037883a 	mov	sp,fp
   3356c:	dfc00117 	ldw	ra,4(sp)
   33570:	df000017 	ldw	fp,0(sp)
   33574:	dec00204 	addi	sp,sp,8
   33578:	f800283a 	ret

0003357c <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
   3357c:	defffb04 	addi	sp,sp,-20
   33580:	dfc00415 	stw	ra,16(sp)
   33584:	df000315 	stw	fp,12(sp)
   33588:	df000304 	addi	fp,sp,12
   3358c:	e13ffe15 	stw	r4,-8(fp)
   33590:	e17fff15 	stw	r5,-4(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
   33594:	e17ffd04 	addi	r5,fp,-12
   33598:	e13ffe17 	ldw	r4,-8(fp)
   3359c:	00335e00 	call	335e0 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
   335a0:	e0fffd17 	ldw	r3,-12(fp)
   335a4:	e0bfff17 	ldw	r2,-4(fp)
   335a8:	1884b03a 	or	r2,r3,r2
   335ac:	e0bffd15 	stw	r2,-12(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
   335b0:	e0bffe17 	ldw	r2,-8(fp)
   335b4:	10800317 	ldw	r2,12(r2)
   335b8:	10800304 	addi	r2,r2,12
   335bc:	e0fffd17 	ldw	r3,-12(fp)
   335c0:	18c007cc 	andi	r3,r3,31
   335c4:	10c00035 	stwio	r3,0(r2)
}
   335c8:	0001883a 	nop
   335cc:	e037883a 	mov	sp,fp
   335d0:	dfc00117 	ldw	ra,4(sp)
   335d4:	df000017 	ldw	fp,0(sp)
   335d8:	dec00204 	addi	sp,sp,8
   335dc:	f800283a 	ret

000335e0 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
   335e0:	defffd04 	addi	sp,sp,-12
   335e4:	df000215 	stw	fp,8(sp)
   335e8:	df000204 	addi	fp,sp,8
   335ec:	e13ffe15 	stw	r4,-8(fp)
   335f0:	e17fff15 	stw	r5,-4(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
   335f4:	e0bffe17 	ldw	r2,-8(fp)
   335f8:	10800317 	ldw	r2,12(r2)
   335fc:	10800304 	addi	r2,r2,12
   33600:	10800037 	ldwio	r2,0(r2)
   33604:	10c007cc 	andi	r3,r2,31
   33608:	e0bfff17 	ldw	r2,-4(fp)
   3360c:	10c00015 	stw	r3,0(r2)
}
   33610:	0001883a 	nop
   33614:	e037883a 	mov	sp,fp
   33618:	df000017 	ldw	fp,0(sp)
   3361c:	dec00104 	addi	sp,sp,4
   33620:	f800283a 	ret

00033624 <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
   33624:	defffd04 	addi	sp,sp,-12
   33628:	df000215 	stw	fp,8(sp)
   3362c:	df000204 	addi	fp,sp,8
   33630:	e13ffe15 	stw	r4,-8(fp)
   33634:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
   33638:	e0bffe17 	ldw	r2,-8(fp)
   3363c:	10800317 	ldw	r2,12(r2)
   33640:	10800204 	addi	r2,r2,8
   33644:	10800037 	ldwio	r2,0(r2)
   33648:	10800c0c 	andi	r2,r2,48
   3364c:	1005d13a 	srai	r2,r2,4
   33650:	1007883a 	mov	r3,r2
   33654:	e0bfff17 	ldw	r2,-4(fp)
   33658:	10c00015 	stw	r3,0(r2)
}
   3365c:	0001883a 	nop
   33660:	e037883a 	mov	sp,fp
   33664:	df000017 	ldw	fp,0(sp)
   33668:	dec00104 	addi	sp,sp,4
   3366c:	f800283a 	ret

00033670 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
   33670:	defffd04 	addi	sp,sp,-12
   33674:	df000215 	stw	fp,8(sp)
   33678:	df000204 	addi	fp,sp,8
   3367c:	e13ffe15 	stw	r4,-8(fp)
   33680:	e17fff15 	stw	r5,-4(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
   33684:	e0bffe17 	ldw	r2,-8(fp)
   33688:	10800317 	ldw	r2,12(r2)
   3368c:	10800204 	addi	r2,r2,8
   33690:	e0fffe17 	ldw	r3,-8(fp)
   33694:	18c00317 	ldw	r3,12(r3)
   33698:	18c00204 	addi	r3,r3,8
   3369c:	18c00037 	ldwio	r3,0(r3)
   336a0:	1809883a 	mov	r4,r3
   336a4:	00fff3c4 	movi	r3,-49
   336a8:	20c8703a 	and	r4,r4,r3
   336ac:	e0ffff17 	ldw	r3,-4(fp)
   336b0:	1806913a 	slli	r3,r3,4
   336b4:	18c00c0c 	andi	r3,r3,48
   336b8:	20c6b03a 	or	r3,r4,r3
   336bc:	10c00035 	stwio	r3,0(r2)
}
   336c0:	0001883a 	nop
   336c4:	e037883a 	mov	sp,fp
   336c8:	df000017 	ldw	fp,0(sp)
   336cc:	dec00104 	addi	sp,sp,4
   336d0:	f800283a 	ret

000336d4 <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
   336d4:	defffd04 	addi	sp,sp,-12
   336d8:	df000215 	stw	fp,8(sp)
   336dc:	df000204 	addi	fp,sp,8
   336e0:	e13ffe15 	stw	r4,-8(fp)
   336e4:	e17fff15 	stw	r5,-4(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
   336e8:	e0bffe17 	ldw	r2,-8(fp)
   336ec:	10800317 	ldw	r2,12(r2)
   336f0:	10800204 	addi	r2,r2,8
   336f4:	10800037 	ldwio	r2,0(r2)
   336f8:	1080030c 	andi	r2,r2,12
   336fc:	1005d0ba 	srai	r2,r2,2
   33700:	1007883a 	mov	r3,r2
   33704:	e0bfff17 	ldw	r2,-4(fp)
   33708:	10c00015 	stw	r3,0(r2)
}
   3370c:	0001883a 	nop
   33710:	e037883a 	mov	sp,fp
   33714:	df000017 	ldw	fp,0(sp)
   33718:	dec00104 	addi	sp,sp,4
   3371c:	f800283a 	ret

00033720 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
   33720:	defffd04 	addi	sp,sp,-12
   33724:	df000215 	stw	fp,8(sp)
   33728:	df000204 	addi	fp,sp,8
   3372c:	e13ffe15 	stw	r4,-8(fp)
   33730:	e17fff15 	stw	r5,-4(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
   33734:	e0bffe17 	ldw	r2,-8(fp)
   33738:	10800317 	ldw	r2,12(r2)
   3373c:	10c00204 	addi	r3,r2,8
   33740:	e0bffe17 	ldw	r2,-8(fp)
   33744:	10800317 	ldw	r2,12(r2)
   33748:	10800204 	addi	r2,r2,8
   3374c:	10800037 	ldwio	r2,0(r2)
   33750:	1009883a 	mov	r4,r2
   33754:	00bffcc4 	movi	r2,-13
   33758:	2088703a 	and	r4,r4,r2
   3375c:	e0bfff17 	ldw	r2,-4(fp)
   33760:	1085883a 	add	r2,r2,r2
   33764:	1085883a 	add	r2,r2,r2
   33768:	1080030c 	andi	r2,r2,12
   3376c:	2084b03a 	or	r2,r4,r2
   33770:	18800035 	stwio	r2,0(r3)
}
   33774:	0001883a 	nop
   33778:	e037883a 	mov	sp,fp
   3377c:	df000017 	ldw	fp,0(sp)
   33780:	dec00104 	addi	sp,sp,4
   33784:	f800283a 	ret

00033788 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   33788:	defffa04 	addi	sp,sp,-24
   3378c:	dfc00515 	stw	ra,20(sp)
   33790:	df000415 	stw	fp,16(sp)
   33794:	df000404 	addi	fp,sp,16
   33798:	e13ffd15 	stw	r4,-12(fp)
   3379c:	e17ffe15 	stw	r5,-8(fp)
   337a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   337a4:	e0bffd17 	ldw	r2,-12(fp)
   337a8:	10800017 	ldw	r2,0(r2)
   337ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   337b0:	e0bffc17 	ldw	r2,-16(fp)
   337b4:	10c00a04 	addi	r3,r2,40
   337b8:	e0bffd17 	ldw	r2,-12(fp)
   337bc:	10800217 	ldw	r2,8(r2)
   337c0:	100f883a 	mov	r7,r2
   337c4:	e1bfff17 	ldw	r6,-4(fp)
   337c8:	e17ffe17 	ldw	r5,-8(fp)
   337cc:	1809883a 	mov	r4,r3
   337d0:	0033db00 	call	33db0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   337d4:	e037883a 	mov	sp,fp
   337d8:	dfc00117 	ldw	ra,4(sp)
   337dc:	df000017 	ldw	fp,0(sp)
   337e0:	dec00204 	addi	sp,sp,8
   337e4:	f800283a 	ret

000337e8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   337e8:	defffa04 	addi	sp,sp,-24
   337ec:	dfc00515 	stw	ra,20(sp)
   337f0:	df000415 	stw	fp,16(sp)
   337f4:	df000404 	addi	fp,sp,16
   337f8:	e13ffd15 	stw	r4,-12(fp)
   337fc:	e17ffe15 	stw	r5,-8(fp)
   33800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   33804:	e0bffd17 	ldw	r2,-12(fp)
   33808:	10800017 	ldw	r2,0(r2)
   3380c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   33810:	e0bffc17 	ldw	r2,-16(fp)
   33814:	10c00a04 	addi	r3,r2,40
   33818:	e0bffd17 	ldw	r2,-12(fp)
   3381c:	10800217 	ldw	r2,8(r2)
   33820:	100f883a 	mov	r7,r2
   33824:	e1bfff17 	ldw	r6,-4(fp)
   33828:	e17ffe17 	ldw	r5,-8(fp)
   3382c:	1809883a 	mov	r4,r3
   33830:	0033fcc0 	call	33fcc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   33834:	e037883a 	mov	sp,fp
   33838:	dfc00117 	ldw	ra,4(sp)
   3383c:	df000017 	ldw	fp,0(sp)
   33840:	dec00204 	addi	sp,sp,8
   33844:	f800283a 	ret

00033848 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   33848:	defffc04 	addi	sp,sp,-16
   3384c:	dfc00315 	stw	ra,12(sp)
   33850:	df000215 	stw	fp,8(sp)
   33854:	df000204 	addi	fp,sp,8
   33858:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   3385c:	e0bfff17 	ldw	r2,-4(fp)
   33860:	10800017 	ldw	r2,0(r2)
   33864:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   33868:	e0bffe17 	ldw	r2,-8(fp)
   3386c:	10c00a04 	addi	r3,r2,40
   33870:	e0bfff17 	ldw	r2,-4(fp)
   33874:	10800217 	ldw	r2,8(r2)
   33878:	100b883a 	mov	r5,r2
   3387c:	1809883a 	mov	r4,r3
   33880:	0033c580 	call	33c58 <altera_avalon_jtag_uart_close>
}
   33884:	e037883a 	mov	sp,fp
   33888:	dfc00117 	ldw	ra,4(sp)
   3388c:	df000017 	ldw	fp,0(sp)
   33890:	dec00204 	addi	sp,sp,8
   33894:	f800283a 	ret

00033898 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   33898:	defffa04 	addi	sp,sp,-24
   3389c:	dfc00515 	stw	ra,20(sp)
   338a0:	df000415 	stw	fp,16(sp)
   338a4:	df000404 	addi	fp,sp,16
   338a8:	e13ffd15 	stw	r4,-12(fp)
   338ac:	e17ffe15 	stw	r5,-8(fp)
   338b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   338b4:	e0bffd17 	ldw	r2,-12(fp)
   338b8:	10800017 	ldw	r2,0(r2)
   338bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   338c0:	e0bffc17 	ldw	r2,-16(fp)
   338c4:	10800a04 	addi	r2,r2,40
   338c8:	e1bfff17 	ldw	r6,-4(fp)
   338cc:	e17ffe17 	ldw	r5,-8(fp)
   338d0:	1009883a 	mov	r4,r2
   338d4:	0033cc00 	call	33cc0 <altera_avalon_jtag_uart_ioctl>
}
   338d8:	e037883a 	mov	sp,fp
   338dc:	dfc00117 	ldw	ra,4(sp)
   338e0:	df000017 	ldw	fp,0(sp)
   338e4:	dec00204 	addi	sp,sp,8
   338e8:	f800283a 	ret

000338ec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   338ec:	defffa04 	addi	sp,sp,-24
   338f0:	dfc00515 	stw	ra,20(sp)
   338f4:	df000415 	stw	fp,16(sp)
   338f8:	df000404 	addi	fp,sp,16
   338fc:	e13ffd15 	stw	r4,-12(fp)
   33900:	e17ffe15 	stw	r5,-8(fp)
   33904:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   33908:	e0bffd17 	ldw	r2,-12(fp)
   3390c:	00c00044 	movi	r3,1
   33910:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   33914:	e0bffd17 	ldw	r2,-12(fp)
   33918:	10800017 	ldw	r2,0(r2)
   3391c:	10800104 	addi	r2,r2,4
   33920:	1007883a 	mov	r3,r2
   33924:	e0bffd17 	ldw	r2,-12(fp)
   33928:	10800817 	ldw	r2,32(r2)
   3392c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   33930:	e0bffe17 	ldw	r2,-8(fp)
   33934:	e0ffff17 	ldw	r3,-4(fp)
   33938:	d8000015 	stw	zero,0(sp)
   3393c:	e1fffd17 	ldw	r7,-12(fp)
   33940:	018000f4 	movhi	r6,3
   33944:	318e6b04 	addi	r6,r6,14764
   33948:	180b883a 	mov	r5,r3
   3394c:	1009883a 	mov	r4,r2
   33950:	00352980 	call	35298 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   33954:	e0bffd17 	ldw	r2,-12(fp)
   33958:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   3395c:	e0bffd17 	ldw	r2,-12(fp)
   33960:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   33964:	d0e01d17 	ldw	r3,-32652(gp)
   33968:	e1fffd17 	ldw	r7,-12(fp)
   3396c:	018000f4 	movhi	r6,3
   33970:	318eee04 	addi	r6,r6,15288
   33974:	180b883a 	mov	r5,r3
   33978:	1009883a 	mov	r4,r2
   3397c:	0034bbc0 	call	34bbc <alt_alarm_start>
   33980:	1000040e 	bge	r2,zero,33994 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   33984:	e0fffd17 	ldw	r3,-12(fp)
   33988:	00a00034 	movhi	r2,32768
   3398c:	10bfffc4 	addi	r2,r2,-1
   33990:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   33994:	0001883a 	nop
   33998:	e037883a 	mov	sp,fp
   3399c:	dfc00117 	ldw	ra,4(sp)
   339a0:	df000017 	ldw	fp,0(sp)
   339a4:	dec00204 	addi	sp,sp,8
   339a8:	f800283a 	ret

000339ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   339ac:	defff804 	addi	sp,sp,-32
   339b0:	df000715 	stw	fp,28(sp)
   339b4:	df000704 	addi	fp,sp,28
   339b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   339bc:	e0bfff17 	ldw	r2,-4(fp)
   339c0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   339c4:	e0bffb17 	ldw	r2,-20(fp)
   339c8:	10800017 	ldw	r2,0(r2)
   339cc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   339d0:	e0bffc17 	ldw	r2,-16(fp)
   339d4:	10800104 	addi	r2,r2,4
   339d8:	10800037 	ldwio	r2,0(r2)
   339dc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   339e0:	e0bffd17 	ldw	r2,-12(fp)
   339e4:	1080c00c 	andi	r2,r2,768
   339e8:	10006d26 	beq	r2,zero,33ba0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   339ec:	e0bffd17 	ldw	r2,-12(fp)
   339f0:	1080400c 	andi	r2,r2,256
   339f4:	10003526 	beq	r2,zero,33acc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   339f8:	00800074 	movhi	r2,1
   339fc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   33a00:	e0bffb17 	ldw	r2,-20(fp)
   33a04:	10800a17 	ldw	r2,40(r2)
   33a08:	10800044 	addi	r2,r2,1
   33a0c:	1081ffcc 	andi	r2,r2,2047
   33a10:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   33a14:	e0bffb17 	ldw	r2,-20(fp)
   33a18:	10c00b17 	ldw	r3,44(r2)
   33a1c:	e0bffe17 	ldw	r2,-8(fp)
   33a20:	18801526 	beq	r3,r2,33a78 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   33a24:	e0bffc17 	ldw	r2,-16(fp)
   33a28:	10800037 	ldwio	r2,0(r2)
   33a2c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   33a30:	e0bff917 	ldw	r2,-28(fp)
   33a34:	10a0000c 	andi	r2,r2,32768
   33a38:	10001126 	beq	r2,zero,33a80 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   33a3c:	e0bffb17 	ldw	r2,-20(fp)
   33a40:	10800a17 	ldw	r2,40(r2)
   33a44:	e0fff917 	ldw	r3,-28(fp)
   33a48:	1809883a 	mov	r4,r3
   33a4c:	e0fffb17 	ldw	r3,-20(fp)
   33a50:	1885883a 	add	r2,r3,r2
   33a54:	10800e04 	addi	r2,r2,56
   33a58:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   33a5c:	e0bffb17 	ldw	r2,-20(fp)
   33a60:	10800a17 	ldw	r2,40(r2)
   33a64:	10800044 	addi	r2,r2,1
   33a68:	10c1ffcc 	andi	r3,r2,2047
   33a6c:	e0bffb17 	ldw	r2,-20(fp)
   33a70:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   33a74:	003fe206 	br	33a00 <__alt_data_end+0xf8033a00>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   33a78:	0001883a 	nop
   33a7c:	00000106 	br	33a84 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   33a80:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   33a84:	e0bff917 	ldw	r2,-28(fp)
   33a88:	10bfffec 	andhi	r2,r2,65535
   33a8c:	10000f26 	beq	r2,zero,33acc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   33a90:	e0bffb17 	ldw	r2,-20(fp)
   33a94:	10c00817 	ldw	r3,32(r2)
   33a98:	00bfff84 	movi	r2,-2
   33a9c:	1886703a 	and	r3,r3,r2
   33aa0:	e0bffb17 	ldw	r2,-20(fp)
   33aa4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   33aa8:	e0bffc17 	ldw	r2,-16(fp)
   33aac:	10800104 	addi	r2,r2,4
   33ab0:	1007883a 	mov	r3,r2
   33ab4:	e0bffb17 	ldw	r2,-20(fp)
   33ab8:	10800817 	ldw	r2,32(r2)
   33abc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   33ac0:	e0bffc17 	ldw	r2,-16(fp)
   33ac4:	10800104 	addi	r2,r2,4
   33ac8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   33acc:	e0bffd17 	ldw	r2,-12(fp)
   33ad0:	1080800c 	andi	r2,r2,512
   33ad4:	103fbe26 	beq	r2,zero,339d0 <__alt_data_end+0xf80339d0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   33ad8:	e0bffd17 	ldw	r2,-12(fp)
   33adc:	1004d43a 	srli	r2,r2,16
   33ae0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   33ae4:	00001406 	br	33b38 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   33ae8:	e0bffc17 	ldw	r2,-16(fp)
   33aec:	e0fffb17 	ldw	r3,-20(fp)
   33af0:	18c00d17 	ldw	r3,52(r3)
   33af4:	e13ffb17 	ldw	r4,-20(fp)
   33af8:	20c7883a 	add	r3,r4,r3
   33afc:	18c20e04 	addi	r3,r3,2104
   33b00:	18c00003 	ldbu	r3,0(r3)
   33b04:	18c03fcc 	andi	r3,r3,255
   33b08:	18c0201c 	xori	r3,r3,128
   33b0c:	18ffe004 	addi	r3,r3,-128
   33b10:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   33b14:	e0bffb17 	ldw	r2,-20(fp)
   33b18:	10800d17 	ldw	r2,52(r2)
   33b1c:	10800044 	addi	r2,r2,1
   33b20:	10c1ffcc 	andi	r3,r2,2047
   33b24:	e0bffb17 	ldw	r2,-20(fp)
   33b28:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   33b2c:	e0bffa17 	ldw	r2,-24(fp)
   33b30:	10bfffc4 	addi	r2,r2,-1
   33b34:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   33b38:	e0bffa17 	ldw	r2,-24(fp)
   33b3c:	10000526 	beq	r2,zero,33b54 <altera_avalon_jtag_uart_irq+0x1a8>
   33b40:	e0bffb17 	ldw	r2,-20(fp)
   33b44:	10c00d17 	ldw	r3,52(r2)
   33b48:	e0bffb17 	ldw	r2,-20(fp)
   33b4c:	10800c17 	ldw	r2,48(r2)
   33b50:	18bfe51e 	bne	r3,r2,33ae8 <__alt_data_end+0xf8033ae8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   33b54:	e0bffa17 	ldw	r2,-24(fp)
   33b58:	103f9d26 	beq	r2,zero,339d0 <__alt_data_end+0xf80339d0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   33b5c:	e0bffb17 	ldw	r2,-20(fp)
   33b60:	10c00817 	ldw	r3,32(r2)
   33b64:	00bfff44 	movi	r2,-3
   33b68:	1886703a 	and	r3,r3,r2
   33b6c:	e0bffb17 	ldw	r2,-20(fp)
   33b70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   33b74:	e0bffb17 	ldw	r2,-20(fp)
   33b78:	10800017 	ldw	r2,0(r2)
   33b7c:	10800104 	addi	r2,r2,4
   33b80:	1007883a 	mov	r3,r2
   33b84:	e0bffb17 	ldw	r2,-20(fp)
   33b88:	10800817 	ldw	r2,32(r2)
   33b8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   33b90:	e0bffc17 	ldw	r2,-16(fp)
   33b94:	10800104 	addi	r2,r2,4
   33b98:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   33b9c:	003f8c06 	br	339d0 <__alt_data_end+0xf80339d0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   33ba0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   33ba4:	0001883a 	nop
   33ba8:	e037883a 	mov	sp,fp
   33bac:	df000017 	ldw	fp,0(sp)
   33bb0:	dec00104 	addi	sp,sp,4
   33bb4:	f800283a 	ret

00033bb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   33bb8:	defff804 	addi	sp,sp,-32
   33bbc:	df000715 	stw	fp,28(sp)
   33bc0:	df000704 	addi	fp,sp,28
   33bc4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   33bc8:	e0bffb17 	ldw	r2,-20(fp)
   33bcc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   33bd0:	e0bff917 	ldw	r2,-28(fp)
   33bd4:	10800017 	ldw	r2,0(r2)
   33bd8:	10800104 	addi	r2,r2,4
   33bdc:	10800037 	ldwio	r2,0(r2)
   33be0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   33be4:	e0bffa17 	ldw	r2,-24(fp)
   33be8:	1081000c 	andi	r2,r2,1024
   33bec:	10000b26 	beq	r2,zero,33c1c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   33bf0:	e0bff917 	ldw	r2,-28(fp)
   33bf4:	10800017 	ldw	r2,0(r2)
   33bf8:	10800104 	addi	r2,r2,4
   33bfc:	1007883a 	mov	r3,r2
   33c00:	e0bff917 	ldw	r2,-28(fp)
   33c04:	10800817 	ldw	r2,32(r2)
   33c08:	10810014 	ori	r2,r2,1024
   33c0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   33c10:	e0bff917 	ldw	r2,-28(fp)
   33c14:	10000915 	stw	zero,36(r2)
   33c18:	00000a06 	br	33c44 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   33c1c:	e0bff917 	ldw	r2,-28(fp)
   33c20:	10c00917 	ldw	r3,36(r2)
   33c24:	00a00034 	movhi	r2,32768
   33c28:	10bfff04 	addi	r2,r2,-4
   33c2c:	10c00536 	bltu	r2,r3,33c44 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   33c30:	e0bff917 	ldw	r2,-28(fp)
   33c34:	10800917 	ldw	r2,36(r2)
   33c38:	10c00044 	addi	r3,r2,1
   33c3c:	e0bff917 	ldw	r2,-28(fp)
   33c40:	10c00915 	stw	r3,36(r2)
   33c44:	d0a01d17 	ldw	r2,-32652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   33c48:	e037883a 	mov	sp,fp
   33c4c:	df000017 	ldw	fp,0(sp)
   33c50:	dec00104 	addi	sp,sp,4
   33c54:	f800283a 	ret

00033c58 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   33c58:	defffd04 	addi	sp,sp,-12
   33c5c:	df000215 	stw	fp,8(sp)
   33c60:	df000204 	addi	fp,sp,8
   33c64:	e13ffe15 	stw	r4,-8(fp)
   33c68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   33c6c:	00000506 	br	33c84 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   33c70:	e0bfff17 	ldw	r2,-4(fp)
   33c74:	1090000c 	andi	r2,r2,16384
   33c78:	10000226 	beq	r2,zero,33c84 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   33c7c:	00bffd44 	movi	r2,-11
   33c80:	00000b06 	br	33cb0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   33c84:	e0bffe17 	ldw	r2,-8(fp)
   33c88:	10c00d17 	ldw	r3,52(r2)
   33c8c:	e0bffe17 	ldw	r2,-8(fp)
   33c90:	10800c17 	ldw	r2,48(r2)
   33c94:	18800526 	beq	r3,r2,33cac <altera_avalon_jtag_uart_close+0x54>
   33c98:	e0bffe17 	ldw	r2,-8(fp)
   33c9c:	10c00917 	ldw	r3,36(r2)
   33ca0:	e0bffe17 	ldw	r2,-8(fp)
   33ca4:	10800117 	ldw	r2,4(r2)
   33ca8:	18bff136 	bltu	r3,r2,33c70 <__alt_data_end+0xf8033c70>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   33cac:	0005883a 	mov	r2,zero
}
   33cb0:	e037883a 	mov	sp,fp
   33cb4:	df000017 	ldw	fp,0(sp)
   33cb8:	dec00104 	addi	sp,sp,4
   33cbc:	f800283a 	ret

00033cc0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   33cc0:	defffa04 	addi	sp,sp,-24
   33cc4:	df000515 	stw	fp,20(sp)
   33cc8:	df000504 	addi	fp,sp,20
   33ccc:	e13ffd15 	stw	r4,-12(fp)
   33cd0:	e17ffe15 	stw	r5,-8(fp)
   33cd4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   33cd8:	00bff9c4 	movi	r2,-25
   33cdc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   33ce0:	e0bffe17 	ldw	r2,-8(fp)
   33ce4:	10da8060 	cmpeqi	r3,r2,27137
   33ce8:	1800031e 	bne	r3,zero,33cf8 <altera_avalon_jtag_uart_ioctl+0x38>
   33cec:	109a80a0 	cmpeqi	r2,r2,27138
   33cf0:	1000181e 	bne	r2,zero,33d54 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   33cf4:	00002906 	br	33d9c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   33cf8:	e0bffd17 	ldw	r2,-12(fp)
   33cfc:	10c00117 	ldw	r3,4(r2)
   33d00:	00a00034 	movhi	r2,32768
   33d04:	10bfffc4 	addi	r2,r2,-1
   33d08:	18802126 	beq	r3,r2,33d90 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   33d0c:	e0bfff17 	ldw	r2,-4(fp)
   33d10:	10800017 	ldw	r2,0(r2)
   33d14:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   33d18:	e0bffc17 	ldw	r2,-16(fp)
   33d1c:	10800090 	cmplti	r2,r2,2
   33d20:	1000061e 	bne	r2,zero,33d3c <altera_avalon_jtag_uart_ioctl+0x7c>
   33d24:	e0fffc17 	ldw	r3,-16(fp)
   33d28:	00a00034 	movhi	r2,32768
   33d2c:	10bfffc4 	addi	r2,r2,-1
   33d30:	18800226 	beq	r3,r2,33d3c <altera_avalon_jtag_uart_ioctl+0x7c>
   33d34:	e0bffc17 	ldw	r2,-16(fp)
   33d38:	00000206 	br	33d44 <altera_avalon_jtag_uart_ioctl+0x84>
   33d3c:	00a00034 	movhi	r2,32768
   33d40:	10bfff84 	addi	r2,r2,-2
   33d44:	e0fffd17 	ldw	r3,-12(fp)
   33d48:	18800115 	stw	r2,4(r3)
      rc = 0;
   33d4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   33d50:	00000f06 	br	33d90 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   33d54:	e0bffd17 	ldw	r2,-12(fp)
   33d58:	10c00117 	ldw	r3,4(r2)
   33d5c:	00a00034 	movhi	r2,32768
   33d60:	10bfffc4 	addi	r2,r2,-1
   33d64:	18800c26 	beq	r3,r2,33d98 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   33d68:	e0bffd17 	ldw	r2,-12(fp)
   33d6c:	10c00917 	ldw	r3,36(r2)
   33d70:	e0bffd17 	ldw	r2,-12(fp)
   33d74:	10800117 	ldw	r2,4(r2)
   33d78:	1885803a 	cmpltu	r2,r3,r2
   33d7c:	10c03fcc 	andi	r3,r2,255
   33d80:	e0bfff17 	ldw	r2,-4(fp)
   33d84:	10c00015 	stw	r3,0(r2)
      rc = 0;
   33d88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   33d8c:	00000206 	br	33d98 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   33d90:	0001883a 	nop
   33d94:	00000106 	br	33d9c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   33d98:	0001883a 	nop

  default:
    break;
  }

  return rc;
   33d9c:	e0bffb17 	ldw	r2,-20(fp)
}
   33da0:	e037883a 	mov	sp,fp
   33da4:	df000017 	ldw	fp,0(sp)
   33da8:	dec00104 	addi	sp,sp,4
   33dac:	f800283a 	ret

00033db0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   33db0:	defff304 	addi	sp,sp,-52
   33db4:	dfc00c15 	stw	ra,48(sp)
   33db8:	df000b15 	stw	fp,44(sp)
   33dbc:	df000b04 	addi	fp,sp,44
   33dc0:	e13ffc15 	stw	r4,-16(fp)
   33dc4:	e17ffd15 	stw	r5,-12(fp)
   33dc8:	e1bffe15 	stw	r6,-8(fp)
   33dcc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   33dd0:	e0bffd17 	ldw	r2,-12(fp)
   33dd4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   33dd8:	00004706 	br	33ef8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   33ddc:	e0bffc17 	ldw	r2,-16(fp)
   33de0:	10800a17 	ldw	r2,40(r2)
   33de4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   33de8:	e0bffc17 	ldw	r2,-16(fp)
   33dec:	10800b17 	ldw	r2,44(r2)
   33df0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   33df4:	e0fff717 	ldw	r3,-36(fp)
   33df8:	e0bff817 	ldw	r2,-32(fp)
   33dfc:	18800536 	bltu	r3,r2,33e14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   33e00:	e0fff717 	ldw	r3,-36(fp)
   33e04:	e0bff817 	ldw	r2,-32(fp)
   33e08:	1885c83a 	sub	r2,r3,r2
   33e0c:	e0bff615 	stw	r2,-40(fp)
   33e10:	00000406 	br	33e24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   33e14:	00c20004 	movi	r3,2048
   33e18:	e0bff817 	ldw	r2,-32(fp)
   33e1c:	1885c83a 	sub	r2,r3,r2
   33e20:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   33e24:	e0bff617 	ldw	r2,-40(fp)
   33e28:	10001e26 	beq	r2,zero,33ea4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   33e2c:	e0fffe17 	ldw	r3,-8(fp)
   33e30:	e0bff617 	ldw	r2,-40(fp)
   33e34:	1880022e 	bgeu	r3,r2,33e40 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   33e38:	e0bffe17 	ldw	r2,-8(fp)
   33e3c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   33e40:	e0bffc17 	ldw	r2,-16(fp)
   33e44:	10c00e04 	addi	r3,r2,56
   33e48:	e0bff817 	ldw	r2,-32(fp)
   33e4c:	1885883a 	add	r2,r3,r2
   33e50:	e1bff617 	ldw	r6,-40(fp)
   33e54:	100b883a 	mov	r5,r2
   33e58:	e13ff517 	ldw	r4,-44(fp)
   33e5c:	00290e00 	call	290e0 <memcpy>
      ptr   += n;
   33e60:	e0fff517 	ldw	r3,-44(fp)
   33e64:	e0bff617 	ldw	r2,-40(fp)
   33e68:	1885883a 	add	r2,r3,r2
   33e6c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   33e70:	e0fffe17 	ldw	r3,-8(fp)
   33e74:	e0bff617 	ldw	r2,-40(fp)
   33e78:	1885c83a 	sub	r2,r3,r2
   33e7c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   33e80:	e0fff817 	ldw	r3,-32(fp)
   33e84:	e0bff617 	ldw	r2,-40(fp)
   33e88:	1885883a 	add	r2,r3,r2
   33e8c:	10c1ffcc 	andi	r3,r2,2047
   33e90:	e0bffc17 	ldw	r2,-16(fp)
   33e94:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   33e98:	e0bffe17 	ldw	r2,-8(fp)
   33e9c:	00bfcf16 	blt	zero,r2,33ddc <__alt_data_end+0xf8033ddc>
   33ea0:	00000106 	br	33ea8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   33ea4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   33ea8:	e0fff517 	ldw	r3,-44(fp)
   33eac:	e0bffd17 	ldw	r2,-12(fp)
   33eb0:	1880141e 	bne	r3,r2,33f04 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   33eb4:	e0bfff17 	ldw	r2,-4(fp)
   33eb8:	1090000c 	andi	r2,r2,16384
   33ebc:	1000131e 	bne	r2,zero,33f0c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   33ec0:	0001883a 	nop
   33ec4:	e0bffc17 	ldw	r2,-16(fp)
   33ec8:	10c00a17 	ldw	r3,40(r2)
   33ecc:	e0bff717 	ldw	r2,-36(fp)
   33ed0:	1880051e 	bne	r3,r2,33ee8 <altera_avalon_jtag_uart_read+0x138>
   33ed4:	e0bffc17 	ldw	r2,-16(fp)
   33ed8:	10c00917 	ldw	r3,36(r2)
   33edc:	e0bffc17 	ldw	r2,-16(fp)
   33ee0:	10800117 	ldw	r2,4(r2)
   33ee4:	18bff736 	bltu	r3,r2,33ec4 <__alt_data_end+0xf8033ec4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   33ee8:	e0bffc17 	ldw	r2,-16(fp)
   33eec:	10c00a17 	ldw	r3,40(r2)
   33ef0:	e0bff717 	ldw	r2,-36(fp)
   33ef4:	18800726 	beq	r3,r2,33f14 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   33ef8:	e0bffe17 	ldw	r2,-8(fp)
   33efc:	00bfb716 	blt	zero,r2,33ddc <__alt_data_end+0xf8033ddc>
   33f00:	00000506 	br	33f18 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   33f04:	0001883a 	nop
   33f08:	00000306 	br	33f18 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   33f0c:	0001883a 	nop
   33f10:	00000106 	br	33f18 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   33f14:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   33f18:	e0fff517 	ldw	r3,-44(fp)
   33f1c:	e0bffd17 	ldw	r2,-12(fp)
   33f20:	18801826 	beq	r3,r2,33f84 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   33f24:	0005303a 	rdctl	r2,status
   33f28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33f2c:	e0fffb17 	ldw	r3,-20(fp)
   33f30:	00bfff84 	movi	r2,-2
   33f34:	1884703a 	and	r2,r3,r2
   33f38:	1001703a 	wrctl	status,r2
  
  return context;
   33f3c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   33f40:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   33f44:	e0bffc17 	ldw	r2,-16(fp)
   33f48:	10800817 	ldw	r2,32(r2)
   33f4c:	10c00054 	ori	r3,r2,1
   33f50:	e0bffc17 	ldw	r2,-16(fp)
   33f54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   33f58:	e0bffc17 	ldw	r2,-16(fp)
   33f5c:	10800017 	ldw	r2,0(r2)
   33f60:	10800104 	addi	r2,r2,4
   33f64:	1007883a 	mov	r3,r2
   33f68:	e0bffc17 	ldw	r2,-16(fp)
   33f6c:	10800817 	ldw	r2,32(r2)
   33f70:	18800035 	stwio	r2,0(r3)
   33f74:	e0bffa17 	ldw	r2,-24(fp)
   33f78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33f7c:	e0bff917 	ldw	r2,-28(fp)
   33f80:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   33f84:	e0fff517 	ldw	r3,-44(fp)
   33f88:	e0bffd17 	ldw	r2,-12(fp)
   33f8c:	18800426 	beq	r3,r2,33fa0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   33f90:	e0fff517 	ldw	r3,-44(fp)
   33f94:	e0bffd17 	ldw	r2,-12(fp)
   33f98:	1885c83a 	sub	r2,r3,r2
   33f9c:	00000606 	br	33fb8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   33fa0:	e0bfff17 	ldw	r2,-4(fp)
   33fa4:	1090000c 	andi	r2,r2,16384
   33fa8:	10000226 	beq	r2,zero,33fb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   33fac:	00bffd44 	movi	r2,-11
   33fb0:	00000106 	br	33fb8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   33fb4:	00bffec4 	movi	r2,-5
}
   33fb8:	e037883a 	mov	sp,fp
   33fbc:	dfc00117 	ldw	ra,4(sp)
   33fc0:	df000017 	ldw	fp,0(sp)
   33fc4:	dec00204 	addi	sp,sp,8
   33fc8:	f800283a 	ret

00033fcc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   33fcc:	defff304 	addi	sp,sp,-52
   33fd0:	dfc00c15 	stw	ra,48(sp)
   33fd4:	df000b15 	stw	fp,44(sp)
   33fd8:	df000b04 	addi	fp,sp,44
   33fdc:	e13ffc15 	stw	r4,-16(fp)
   33fe0:	e17ffd15 	stw	r5,-12(fp)
   33fe4:	e1bffe15 	stw	r6,-8(fp)
   33fe8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   33fec:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   33ff0:	e0bffd17 	ldw	r2,-12(fp)
   33ff4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   33ff8:	00003706 	br	340d8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   33ffc:	e0bffc17 	ldw	r2,-16(fp)
   34000:	10800c17 	ldw	r2,48(r2)
   34004:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   34008:	e0bffc17 	ldw	r2,-16(fp)
   3400c:	10800d17 	ldw	r2,52(r2)
   34010:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   34014:	e0fff917 	ldw	r3,-28(fp)
   34018:	e0bff517 	ldw	r2,-44(fp)
   3401c:	1880062e 	bgeu	r3,r2,34038 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   34020:	e0fff517 	ldw	r3,-44(fp)
   34024:	e0bff917 	ldw	r2,-28(fp)
   34028:	1885c83a 	sub	r2,r3,r2
   3402c:	10bfffc4 	addi	r2,r2,-1
   34030:	e0bff615 	stw	r2,-40(fp)
   34034:	00000b06 	br	34064 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   34038:	e0bff517 	ldw	r2,-44(fp)
   3403c:	10000526 	beq	r2,zero,34054 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   34040:	00c20004 	movi	r3,2048
   34044:	e0bff917 	ldw	r2,-28(fp)
   34048:	1885c83a 	sub	r2,r3,r2
   3404c:	e0bff615 	stw	r2,-40(fp)
   34050:	00000406 	br	34064 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   34054:	00c1ffc4 	movi	r3,2047
   34058:	e0bff917 	ldw	r2,-28(fp)
   3405c:	1885c83a 	sub	r2,r3,r2
   34060:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   34064:	e0bff617 	ldw	r2,-40(fp)
   34068:	10001e26 	beq	r2,zero,340e4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   3406c:	e0fffe17 	ldw	r3,-8(fp)
   34070:	e0bff617 	ldw	r2,-40(fp)
   34074:	1880022e 	bgeu	r3,r2,34080 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   34078:	e0bffe17 	ldw	r2,-8(fp)
   3407c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   34080:	e0bffc17 	ldw	r2,-16(fp)
   34084:	10c20e04 	addi	r3,r2,2104
   34088:	e0bff917 	ldw	r2,-28(fp)
   3408c:	1885883a 	add	r2,r3,r2
   34090:	e1bff617 	ldw	r6,-40(fp)
   34094:	e17ffd17 	ldw	r5,-12(fp)
   34098:	1009883a 	mov	r4,r2
   3409c:	00290e00 	call	290e0 <memcpy>
      ptr   += n;
   340a0:	e0fffd17 	ldw	r3,-12(fp)
   340a4:	e0bff617 	ldw	r2,-40(fp)
   340a8:	1885883a 	add	r2,r3,r2
   340ac:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   340b0:	e0fffe17 	ldw	r3,-8(fp)
   340b4:	e0bff617 	ldw	r2,-40(fp)
   340b8:	1885c83a 	sub	r2,r3,r2
   340bc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   340c0:	e0fff917 	ldw	r3,-28(fp)
   340c4:	e0bff617 	ldw	r2,-40(fp)
   340c8:	1885883a 	add	r2,r3,r2
   340cc:	10c1ffcc 	andi	r3,r2,2047
   340d0:	e0bffc17 	ldw	r2,-16(fp)
   340d4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   340d8:	e0bffe17 	ldw	r2,-8(fp)
   340dc:	00bfc716 	blt	zero,r2,33ffc <__alt_data_end+0xf8033ffc>
   340e0:	00000106 	br	340e8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   340e4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   340e8:	0005303a 	rdctl	r2,status
   340ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   340f0:	e0fffb17 	ldw	r3,-20(fp)
   340f4:	00bfff84 	movi	r2,-2
   340f8:	1884703a 	and	r2,r3,r2
   340fc:	1001703a 	wrctl	status,r2
  
  return context;
   34100:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   34104:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   34108:	e0bffc17 	ldw	r2,-16(fp)
   3410c:	10800817 	ldw	r2,32(r2)
   34110:	10c00094 	ori	r3,r2,2
   34114:	e0bffc17 	ldw	r2,-16(fp)
   34118:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3411c:	e0bffc17 	ldw	r2,-16(fp)
   34120:	10800017 	ldw	r2,0(r2)
   34124:	10800104 	addi	r2,r2,4
   34128:	1007883a 	mov	r3,r2
   3412c:	e0bffc17 	ldw	r2,-16(fp)
   34130:	10800817 	ldw	r2,32(r2)
   34134:	18800035 	stwio	r2,0(r3)
   34138:	e0bffa17 	ldw	r2,-24(fp)
   3413c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34140:	e0bff817 	ldw	r2,-32(fp)
   34144:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   34148:	e0bffe17 	ldw	r2,-8(fp)
   3414c:	0080100e 	bge	zero,r2,34190 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   34150:	e0bfff17 	ldw	r2,-4(fp)
   34154:	1090000c 	andi	r2,r2,16384
   34158:	1000101e 	bne	r2,zero,3419c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3415c:	0001883a 	nop
   34160:	e0bffc17 	ldw	r2,-16(fp)
   34164:	10c00d17 	ldw	r3,52(r2)
   34168:	e0bff517 	ldw	r2,-44(fp)
   3416c:	1880051e 	bne	r3,r2,34184 <altera_avalon_jtag_uart_write+0x1b8>
   34170:	e0bffc17 	ldw	r2,-16(fp)
   34174:	10c00917 	ldw	r3,36(r2)
   34178:	e0bffc17 	ldw	r2,-16(fp)
   3417c:	10800117 	ldw	r2,4(r2)
   34180:	18bff736 	bltu	r3,r2,34160 <__alt_data_end+0xf8034160>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   34184:	e0bffc17 	ldw	r2,-16(fp)
   34188:	10800917 	ldw	r2,36(r2)
   3418c:	1000051e 	bne	r2,zero,341a4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   34190:	e0bffe17 	ldw	r2,-8(fp)
   34194:	00bfd016 	blt	zero,r2,340d8 <__alt_data_end+0xf80340d8>
   34198:	00000306 	br	341a8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3419c:	0001883a 	nop
   341a0:	00000106 	br	341a8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   341a4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   341a8:	e0fffd17 	ldw	r3,-12(fp)
   341ac:	e0bff717 	ldw	r2,-36(fp)
   341b0:	18800426 	beq	r3,r2,341c4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   341b4:	e0fffd17 	ldw	r3,-12(fp)
   341b8:	e0bff717 	ldw	r2,-36(fp)
   341bc:	1885c83a 	sub	r2,r3,r2
   341c0:	00000606 	br	341dc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   341c4:	e0bfff17 	ldw	r2,-4(fp)
   341c8:	1090000c 	andi	r2,r2,16384
   341cc:	10000226 	beq	r2,zero,341d8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   341d0:	00bffd44 	movi	r2,-11
   341d4:	00000106 	br	341dc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   341d8:	00bffec4 	movi	r2,-5
}
   341dc:	e037883a 	mov	sp,fp
   341e0:	dfc00117 	ldw	ra,4(sp)
   341e4:	df000017 	ldw	fp,0(sp)
   341e8:	dec00204 	addi	sp,sp,8
   341ec:	f800283a 	ret

000341f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   341f0:	defffa04 	addi	sp,sp,-24
   341f4:	dfc00515 	stw	ra,20(sp)
   341f8:	df000415 	stw	fp,16(sp)
   341fc:	df000404 	addi	fp,sp,16
   34200:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   34204:	0007883a 	mov	r3,zero
   34208:	e0bfff17 	ldw	r2,-4(fp)
   3420c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   34210:	e0bfff17 	ldw	r2,-4(fp)
   34214:	10800104 	addi	r2,r2,4
   34218:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3421c:	0005303a 	rdctl	r2,status
   34220:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34224:	e0fffd17 	ldw	r3,-12(fp)
   34228:	00bfff84 	movi	r2,-2
   3422c:	1884703a 	and	r2,r3,r2
   34230:	1001703a 	wrctl	status,r2
  
  return context;
   34234:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   34238:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   3423c:	003597c0 	call	3597c <alt_tick>
   34240:	e0bffc17 	ldw	r2,-16(fp)
   34244:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34248:	e0bffe17 	ldw	r2,-8(fp)
   3424c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   34250:	0001883a 	nop
   34254:	e037883a 	mov	sp,fp
   34258:	dfc00117 	ldw	ra,4(sp)
   3425c:	df000017 	ldw	fp,0(sp)
   34260:	dec00204 	addi	sp,sp,8
   34264:	f800283a 	ret

00034268 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   34268:	defff804 	addi	sp,sp,-32
   3426c:	dfc00715 	stw	ra,28(sp)
   34270:	df000615 	stw	fp,24(sp)
   34274:	df000604 	addi	fp,sp,24
   34278:	e13ffc15 	stw	r4,-16(fp)
   3427c:	e17ffd15 	stw	r5,-12(fp)
   34280:	e1bffe15 	stw	r6,-8(fp)
   34284:	e1ffff15 	stw	r7,-4(fp)
   34288:	e0bfff17 	ldw	r2,-4(fp)
   3428c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   34290:	d0a01d17 	ldw	r2,-32652(gp)
   34294:	1000021e 	bne	r2,zero,342a0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   34298:	e0bffb17 	ldw	r2,-20(fp)
   3429c:	d0a01d15 	stw	r2,-32652(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   342a0:	e0bffc17 	ldw	r2,-16(fp)
   342a4:	10800104 	addi	r2,r2,4
   342a8:	00c001c4 	movi	r3,7
   342ac:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   342b0:	d8000015 	stw	zero,0(sp)
   342b4:	e1fffc17 	ldw	r7,-16(fp)
   342b8:	018000f4 	movhi	r6,3
   342bc:	31907c04 	addi	r6,r6,16880
   342c0:	e17ffe17 	ldw	r5,-8(fp)
   342c4:	e13ffd17 	ldw	r4,-12(fp)
   342c8:	00352980 	call	35298 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   342cc:	0001883a 	nop
   342d0:	e037883a 	mov	sp,fp
   342d4:	dfc00117 	ldw	ra,4(sp)
   342d8:	df000017 	ldw	fp,0(sp)
   342dc:	dec00204 	addi	sp,sp,8
   342e0:	f800283a 	ret

000342e4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   342e4:	defffa04 	addi	sp,sp,-24
   342e8:	dfc00515 	stw	ra,20(sp)
   342ec:	df000415 	stw	fp,16(sp)
   342f0:	df000404 	addi	fp,sp,16
   342f4:	e13ffd15 	stw	r4,-12(fp)
   342f8:	e17ffe15 	stw	r5,-8(fp)
   342fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   34300:	e0bffd17 	ldw	r2,-12(fp)
   34304:	10800017 	ldw	r2,0(r2)
   34308:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   3430c:	e0bffc17 	ldw	r2,-16(fp)
   34310:	10c00a04 	addi	r3,r2,40
   34314:	e0bffd17 	ldw	r2,-12(fp)
   34318:	10800217 	ldw	r2,8(r2)
   3431c:	100f883a 	mov	r7,r2
   34320:	e1bfff17 	ldw	r6,-4(fp)
   34324:	e17ffe17 	ldw	r5,-8(fp)
   34328:	1809883a 	mov	r4,r3
   3432c:	00347f80 	call	347f8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   34330:	e037883a 	mov	sp,fp
   34334:	dfc00117 	ldw	ra,4(sp)
   34338:	df000017 	ldw	fp,0(sp)
   3433c:	dec00204 	addi	sp,sp,8
   34340:	f800283a 	ret

00034344 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   34344:	defffa04 	addi	sp,sp,-24
   34348:	dfc00515 	stw	ra,20(sp)
   3434c:	df000415 	stw	fp,16(sp)
   34350:	df000404 	addi	fp,sp,16
   34354:	e13ffd15 	stw	r4,-12(fp)
   34358:	e17ffe15 	stw	r5,-8(fp)
   3435c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   34360:	e0bffd17 	ldw	r2,-12(fp)
   34364:	10800017 	ldw	r2,0(r2)
   34368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   3436c:	e0bffc17 	ldw	r2,-16(fp)
   34370:	10c00a04 	addi	r3,r2,40
   34374:	e0bffd17 	ldw	r2,-12(fp)
   34378:	10800217 	ldw	r2,8(r2)
   3437c:	100f883a 	mov	r7,r2
   34380:	e1bfff17 	ldw	r6,-4(fp)
   34384:	e17ffe17 	ldw	r5,-8(fp)
   34388:	1809883a 	mov	r4,r3
   3438c:	0034a100 	call	34a10 <altera_avalon_uart_write>
      fd->fd_flags);
}
   34390:	e037883a 	mov	sp,fp
   34394:	dfc00117 	ldw	ra,4(sp)
   34398:	df000017 	ldw	fp,0(sp)
   3439c:	dec00204 	addi	sp,sp,8
   343a0:	f800283a 	ret

000343a4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   343a4:	defffc04 	addi	sp,sp,-16
   343a8:	dfc00315 	stw	ra,12(sp)
   343ac:	df000215 	stw	fp,8(sp)
   343b0:	df000204 	addi	fp,sp,8
   343b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   343b8:	e0bfff17 	ldw	r2,-4(fp)
   343bc:	10800017 	ldw	r2,0(r2)
   343c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   343c4:	e0bffe17 	ldw	r2,-8(fp)
   343c8:	10c00a04 	addi	r3,r2,40
   343cc:	e0bfff17 	ldw	r2,-4(fp)
   343d0:	10800217 	ldw	r2,8(r2)
   343d4:	100b883a 	mov	r5,r2
   343d8:	1809883a 	mov	r4,r3
   343dc:	00347680 	call	34768 <altera_avalon_uart_close>
}
   343e0:	e037883a 	mov	sp,fp
   343e4:	dfc00117 	ldw	ra,4(sp)
   343e8:	df000017 	ldw	fp,0(sp)
   343ec:	dec00204 	addi	sp,sp,8
   343f0:	f800283a 	ret

000343f4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   343f4:	defff804 	addi	sp,sp,-32
   343f8:	dfc00715 	stw	ra,28(sp)
   343fc:	df000615 	stw	fp,24(sp)
   34400:	df000604 	addi	fp,sp,24
   34404:	e13ffd15 	stw	r4,-12(fp)
   34408:	e17ffe15 	stw	r5,-8(fp)
   3440c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   34410:	e0bffd17 	ldw	r2,-12(fp)
   34414:	10800017 	ldw	r2,0(r2)
   34418:	e0bffb15 	stw	r2,-20(fp)
   3441c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   34420:	1000041e 	bne	r2,zero,34434 <altera_avalon_uart_init+0x40>
   34424:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   34428:	1000021e 	bne	r2,zero,34434 <altera_avalon_uart_init+0x40>
   3442c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   34430:	10000226 	beq	r2,zero,3443c <altera_avalon_uart_init+0x48>
   34434:	00800044 	movi	r2,1
   34438:	00000106 	br	34440 <altera_avalon_uart_init+0x4c>
   3443c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   34440:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   34444:	e0bffc17 	ldw	r2,-16(fp)
   34448:	10000f1e 	bne	r2,zero,34488 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   3444c:	e0bffd17 	ldw	r2,-12(fp)
   34450:	00c32004 	movi	r3,3200
   34454:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   34458:	e0bffb17 	ldw	r2,-20(fp)
   3445c:	10800304 	addi	r2,r2,12
   34460:	e0fffd17 	ldw	r3,-12(fp)
   34464:	18c00117 	ldw	r3,4(r3)
   34468:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   3446c:	d8000015 	stw	zero,0(sp)
   34470:	e1fffd17 	ldw	r7,-12(fp)
   34474:	018000f4 	movhi	r6,3
   34478:	31912804 	addi	r6,r6,17568
   3447c:	e17fff17 	ldw	r5,-4(fp)
   34480:	e13ffe17 	ldw	r4,-8(fp)
   34484:	00352980 	call	35298 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   34488:	0001883a 	nop
   3448c:	e037883a 	mov	sp,fp
   34490:	dfc00117 	ldw	ra,4(sp)
   34494:	df000017 	ldw	fp,0(sp)
   34498:	dec00204 	addi	sp,sp,8
   3449c:	f800283a 	ret

000344a0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   344a0:	defffa04 	addi	sp,sp,-24
   344a4:	dfc00515 	stw	ra,20(sp)
   344a8:	df000415 	stw	fp,16(sp)
   344ac:	df000404 	addi	fp,sp,16
   344b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   344b4:	e0bfff17 	ldw	r2,-4(fp)
   344b8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   344bc:	e0bffc17 	ldw	r2,-16(fp)
   344c0:	10800017 	ldw	r2,0(r2)
   344c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   344c8:	e0bffd17 	ldw	r2,-12(fp)
   344cc:	10800204 	addi	r2,r2,8
   344d0:	10800037 	ldwio	r2,0(r2)
   344d4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   344d8:	e0bffd17 	ldw	r2,-12(fp)
   344dc:	10800204 	addi	r2,r2,8
   344e0:	0007883a 	mov	r3,zero
   344e4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   344e8:	e0bffd17 	ldw	r2,-12(fp)
   344ec:	10800204 	addi	r2,r2,8
   344f0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   344f4:	e0bffe17 	ldw	r2,-8(fp)
   344f8:	1080200c 	andi	r2,r2,128
   344fc:	10000326 	beq	r2,zero,3450c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   34500:	e17ffe17 	ldw	r5,-8(fp)
   34504:	e13ffc17 	ldw	r4,-16(fp)
   34508:	003453c0 	call	3453c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   3450c:	e0bffe17 	ldw	r2,-8(fp)
   34510:	1081100c 	andi	r2,r2,1088
   34514:	10000326 	beq	r2,zero,34524 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   34518:	e17ffe17 	ldw	r5,-8(fp)
   3451c:	e13ffc17 	ldw	r4,-16(fp)
   34520:	00346200 	call	34620 <altera_avalon_uart_txirq>
  }
  

}
   34524:	0001883a 	nop
   34528:	e037883a 	mov	sp,fp
   3452c:	dfc00117 	ldw	ra,4(sp)
   34530:	df000017 	ldw	fp,0(sp)
   34534:	dec00204 	addi	sp,sp,8
   34538:	f800283a 	ret

0003453c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   3453c:	defffc04 	addi	sp,sp,-16
   34540:	df000315 	stw	fp,12(sp)
   34544:	df000304 	addi	fp,sp,12
   34548:	e13ffe15 	stw	r4,-8(fp)
   3454c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   34550:	e0bfff17 	ldw	r2,-4(fp)
   34554:	108000cc 	andi	r2,r2,3
   34558:	10002c1e 	bne	r2,zero,3460c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   3455c:	e0bffe17 	ldw	r2,-8(fp)
   34560:	10800317 	ldw	r2,12(r2)
   34564:	e0bffe17 	ldw	r2,-8(fp)
   34568:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   3456c:	e0bffe17 	ldw	r2,-8(fp)
   34570:	10800317 	ldw	r2,12(r2)
   34574:	10800044 	addi	r2,r2,1
   34578:	10800fcc 	andi	r2,r2,63
   3457c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   34580:	e0bffe17 	ldw	r2,-8(fp)
   34584:	10800317 	ldw	r2,12(r2)
   34588:	e0fffe17 	ldw	r3,-8(fp)
   3458c:	18c00017 	ldw	r3,0(r3)
   34590:	18c00037 	ldwio	r3,0(r3)
   34594:	1809883a 	mov	r4,r3
   34598:	e0fffe17 	ldw	r3,-8(fp)
   3459c:	1885883a 	add	r2,r3,r2
   345a0:	10800704 	addi	r2,r2,28
   345a4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   345a8:	e0bffe17 	ldw	r2,-8(fp)
   345ac:	e0fffd17 	ldw	r3,-12(fp)
   345b0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   345b4:	e0bffe17 	ldw	r2,-8(fp)
   345b8:	10800317 	ldw	r2,12(r2)
   345bc:	10800044 	addi	r2,r2,1
   345c0:	10800fcc 	andi	r2,r2,63
   345c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   345c8:	e0bffe17 	ldw	r2,-8(fp)
   345cc:	10c00217 	ldw	r3,8(r2)
   345d0:	e0bffd17 	ldw	r2,-12(fp)
   345d4:	18800e1e 	bne	r3,r2,34610 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   345d8:	e0bffe17 	ldw	r2,-8(fp)
   345dc:	10c00117 	ldw	r3,4(r2)
   345e0:	00bfdfc4 	movi	r2,-129
   345e4:	1886703a 	and	r3,r3,r2
   345e8:	e0bffe17 	ldw	r2,-8(fp)
   345ec:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   345f0:	e0bffe17 	ldw	r2,-8(fp)
   345f4:	10800017 	ldw	r2,0(r2)
   345f8:	10800304 	addi	r2,r2,12
   345fc:	e0fffe17 	ldw	r3,-8(fp)
   34600:	18c00117 	ldw	r3,4(r3)
   34604:	10c00035 	stwio	r3,0(r2)
   34608:	00000106 	br	34610 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   3460c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   34610:	e037883a 	mov	sp,fp
   34614:	df000017 	ldw	fp,0(sp)
   34618:	dec00104 	addi	sp,sp,4
   3461c:	f800283a 	ret

00034620 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   34620:	defffb04 	addi	sp,sp,-20
   34624:	df000415 	stw	fp,16(sp)
   34628:	df000404 	addi	fp,sp,16
   3462c:	e13ffc15 	stw	r4,-16(fp)
   34630:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   34634:	e0bffc17 	ldw	r2,-16(fp)
   34638:	10c00417 	ldw	r3,16(r2)
   3463c:	e0bffc17 	ldw	r2,-16(fp)
   34640:	10800517 	ldw	r2,20(r2)
   34644:	18803226 	beq	r3,r2,34710 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   34648:	e0bffc17 	ldw	r2,-16(fp)
   3464c:	10800617 	ldw	r2,24(r2)
   34650:	1080008c 	andi	r2,r2,2
   34654:	10000326 	beq	r2,zero,34664 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   34658:	e0bffd17 	ldw	r2,-12(fp)
   3465c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   34660:	10001d26 	beq	r2,zero,346d8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   34664:	e0bffc17 	ldw	r2,-16(fp)
   34668:	10800417 	ldw	r2,16(r2)
   3466c:	e0bffc17 	ldw	r2,-16(fp)
   34670:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   34674:	e0bffc17 	ldw	r2,-16(fp)
   34678:	10800017 	ldw	r2,0(r2)
   3467c:	10800104 	addi	r2,r2,4
   34680:	e0fffc17 	ldw	r3,-16(fp)
   34684:	18c00417 	ldw	r3,16(r3)
   34688:	e13ffc17 	ldw	r4,-16(fp)
   3468c:	20c7883a 	add	r3,r4,r3
   34690:	18c01704 	addi	r3,r3,92
   34694:	18c00003 	ldbu	r3,0(r3)
   34698:	18c03fcc 	andi	r3,r3,255
   3469c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   346a0:	e0bffc17 	ldw	r2,-16(fp)
   346a4:	10800417 	ldw	r2,16(r2)
   346a8:	10800044 	addi	r2,r2,1
   346ac:	e0fffc17 	ldw	r3,-16(fp)
   346b0:	18800415 	stw	r2,16(r3)
   346b4:	10c00fcc 	andi	r3,r2,63
   346b8:	e0bffc17 	ldw	r2,-16(fp)
   346bc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   346c0:	e0bffc17 	ldw	r2,-16(fp)
   346c4:	10800117 	ldw	r2,4(r2)
   346c8:	10c01014 	ori	r3,r2,64
   346cc:	e0bffc17 	ldw	r2,-16(fp)
   346d0:	10c00115 	stw	r3,4(r2)
   346d4:	00000e06 	br	34710 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   346d8:	e0bffc17 	ldw	r2,-16(fp)
   346dc:	10800017 	ldw	r2,0(r2)
   346e0:	10800204 	addi	r2,r2,8
   346e4:	10800037 	ldwio	r2,0(r2)
   346e8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   346ec:	e0bffd17 	ldw	r2,-12(fp)
   346f0:	1082000c 	andi	r2,r2,2048
   346f4:	1000061e 	bne	r2,zero,34710 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   346f8:	e0bffc17 	ldw	r2,-16(fp)
   346fc:	10c00117 	ldw	r3,4(r2)
   34700:	00bfefc4 	movi	r2,-65
   34704:	1886703a 	and	r3,r3,r2
   34708:	e0bffc17 	ldw	r2,-16(fp)
   3470c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   34710:	e0bffc17 	ldw	r2,-16(fp)
   34714:	10c00417 	ldw	r3,16(r2)
   34718:	e0bffc17 	ldw	r2,-16(fp)
   3471c:	10800517 	ldw	r2,20(r2)
   34720:	1880061e 	bne	r3,r2,3473c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   34724:	e0bffc17 	ldw	r2,-16(fp)
   34728:	10c00117 	ldw	r3,4(r2)
   3472c:	00beefc4 	movi	r2,-1089
   34730:	1886703a 	and	r3,r3,r2
   34734:	e0bffc17 	ldw	r2,-16(fp)
   34738:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   3473c:	e0bffc17 	ldw	r2,-16(fp)
   34740:	10800017 	ldw	r2,0(r2)
   34744:	10800304 	addi	r2,r2,12
   34748:	e0fffc17 	ldw	r3,-16(fp)
   3474c:	18c00117 	ldw	r3,4(r3)
   34750:	10c00035 	stwio	r3,0(r2)
}
   34754:	0001883a 	nop
   34758:	e037883a 	mov	sp,fp
   3475c:	df000017 	ldw	fp,0(sp)
   34760:	dec00104 	addi	sp,sp,4
   34764:	f800283a 	ret

00034768 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   34768:	defffd04 	addi	sp,sp,-12
   3476c:	df000215 	stw	fp,8(sp)
   34770:	df000204 	addi	fp,sp,8
   34774:	e13ffe15 	stw	r4,-8(fp)
   34778:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   3477c:	00000506 	br	34794 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   34780:	e0bfff17 	ldw	r2,-4(fp)
   34784:	1090000c 	andi	r2,r2,16384
   34788:	10000226 	beq	r2,zero,34794 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3478c:	00bffd44 	movi	r2,-11
   34790:	00000606 	br	347ac <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   34794:	e0bffe17 	ldw	r2,-8(fp)
   34798:	10c00417 	ldw	r3,16(r2)
   3479c:	e0bffe17 	ldw	r2,-8(fp)
   347a0:	10800517 	ldw	r2,20(r2)
   347a4:	18bff61e 	bne	r3,r2,34780 <__alt_data_end+0xf8034780>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   347a8:	0005883a 	mov	r2,zero
}
   347ac:	e037883a 	mov	sp,fp
   347b0:	df000017 	ldw	fp,0(sp)
   347b4:	dec00104 	addi	sp,sp,4
   347b8:	f800283a 	ret

000347bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   347bc:	defffe04 	addi	sp,sp,-8
   347c0:	dfc00115 	stw	ra,4(sp)
   347c4:	df000015 	stw	fp,0(sp)
   347c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   347cc:	d0a00b17 	ldw	r2,-32724(gp)
   347d0:	10000326 	beq	r2,zero,347e0 <alt_get_errno+0x24>
   347d4:	d0a00b17 	ldw	r2,-32724(gp)
   347d8:	103ee83a 	callr	r2
   347dc:	00000106 	br	347e4 <alt_get_errno+0x28>
   347e0:	d0a01204 	addi	r2,gp,-32696
}
   347e4:	e037883a 	mov	sp,fp
   347e8:	dfc00117 	ldw	ra,4(sp)
   347ec:	df000017 	ldw	fp,0(sp)
   347f0:	dec00204 	addi	sp,sp,8
   347f4:	f800283a 	ret

000347f8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   347f8:	defff204 	addi	sp,sp,-56
   347fc:	dfc00d15 	stw	ra,52(sp)
   34800:	df000c15 	stw	fp,48(sp)
   34804:	df000c04 	addi	fp,sp,48
   34808:	e13ffc15 	stw	r4,-16(fp)
   3480c:	e17ffd15 	stw	r5,-12(fp)
   34810:	e1bffe15 	stw	r6,-8(fp)
   34814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   34818:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   3481c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   34820:	e0bfff17 	ldw	r2,-4(fp)
   34824:	1090000c 	andi	r2,r2,16384
   34828:	1005003a 	cmpeq	r2,r2,zero
   3482c:	10803fcc 	andi	r2,r2,255
   34830:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   34834:	00001306 	br	34884 <altera_avalon_uart_read+0x8c>
    {
      count++;
   34838:	e0bff517 	ldw	r2,-44(fp)
   3483c:	10800044 	addi	r2,r2,1
   34840:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   34844:	e0bffd17 	ldw	r2,-12(fp)
   34848:	10c00044 	addi	r3,r2,1
   3484c:	e0fffd15 	stw	r3,-12(fp)
   34850:	e0fffc17 	ldw	r3,-16(fp)
   34854:	18c00217 	ldw	r3,8(r3)
   34858:	e13ffc17 	ldw	r4,-16(fp)
   3485c:	20c7883a 	add	r3,r4,r3
   34860:	18c00704 	addi	r3,r3,28
   34864:	18c00003 	ldbu	r3,0(r3)
   34868:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   3486c:	e0bffc17 	ldw	r2,-16(fp)
   34870:	10800217 	ldw	r2,8(r2)
   34874:	10800044 	addi	r2,r2,1
   34878:	10c00fcc 	andi	r3,r2,63
   3487c:	e0bffc17 	ldw	r2,-16(fp)
   34880:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   34884:	e0fff517 	ldw	r3,-44(fp)
   34888:	e0bffe17 	ldw	r2,-8(fp)
   3488c:	1880050e 	bge	r3,r2,348a4 <altera_avalon_uart_read+0xac>
   34890:	e0bffc17 	ldw	r2,-16(fp)
   34894:	10c00217 	ldw	r3,8(r2)
   34898:	e0bffc17 	ldw	r2,-16(fp)
   3489c:	10800317 	ldw	r2,12(r2)
   348a0:	18bfe51e 	bne	r3,r2,34838 <__alt_data_end+0xf8034838>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   348a4:	e0bff517 	ldw	r2,-44(fp)
   348a8:	1000251e 	bne	r2,zero,34940 <altera_avalon_uart_read+0x148>
   348ac:	e0bffc17 	ldw	r2,-16(fp)
   348b0:	10c00217 	ldw	r3,8(r2)
   348b4:	e0bffc17 	ldw	r2,-16(fp)
   348b8:	10800317 	ldw	r2,12(r2)
   348bc:	1880201e 	bne	r3,r2,34940 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   348c0:	e0bff617 	ldw	r2,-40(fp)
   348c4:	1000071e 	bne	r2,zero,348e4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   348c8:	00347bc0 	call	347bc <alt_get_errno>
   348cc:	1007883a 	mov	r3,r2
   348d0:	008002c4 	movi	r2,11
   348d4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   348d8:	00800044 	movi	r2,1
   348dc:	e0bff405 	stb	r2,-48(fp)
        break;
   348e0:	00001b06 	br	34950 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   348e4:	0005303a 	rdctl	r2,status
   348e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   348ec:	e0fff917 	ldw	r3,-28(fp)
   348f0:	00bfff84 	movi	r2,-2
   348f4:	1884703a 	and	r2,r3,r2
   348f8:	1001703a 	wrctl	status,r2
  
  return context;
   348fc:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   34900:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   34904:	e0bffc17 	ldw	r2,-16(fp)
   34908:	10800117 	ldw	r2,4(r2)
   3490c:	10c02014 	ori	r3,r2,128
   34910:	e0bffc17 	ldw	r2,-16(fp)
   34914:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   34918:	e0bffc17 	ldw	r2,-16(fp)
   3491c:	10800017 	ldw	r2,0(r2)
   34920:	10800304 	addi	r2,r2,12
   34924:	e0fffc17 	ldw	r3,-16(fp)
   34928:	18c00117 	ldw	r3,4(r3)
   3492c:	10c00035 	stwio	r3,0(r2)
   34930:	e0bff817 	ldw	r2,-32(fp)
   34934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34938:	e0bffa17 	ldw	r2,-24(fp)
   3493c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   34940:	e0bff517 	ldw	r2,-44(fp)
   34944:	1000021e 	bne	r2,zero,34950 <altera_avalon_uart_read+0x158>
   34948:	e0bffe17 	ldw	r2,-8(fp)
   3494c:	103fcd1e 	bne	r2,zero,34884 <__alt_data_end+0xf8034884>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34950:	0005303a 	rdctl	r2,status
   34954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34958:	e0fffb17 	ldw	r3,-20(fp)
   3495c:	00bfff84 	movi	r2,-2
   34960:	1884703a 	and	r2,r3,r2
   34964:	1001703a 	wrctl	status,r2
  
  return context;
   34968:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   3496c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   34970:	e0bffc17 	ldw	r2,-16(fp)
   34974:	10800117 	ldw	r2,4(r2)
   34978:	10c02014 	ori	r3,r2,128
   3497c:	e0bffc17 	ldw	r2,-16(fp)
   34980:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   34984:	e0bffc17 	ldw	r2,-16(fp)
   34988:	10800017 	ldw	r2,0(r2)
   3498c:	10800304 	addi	r2,r2,12
   34990:	e0fffc17 	ldw	r3,-16(fp)
   34994:	18c00117 	ldw	r3,4(r3)
   34998:	10c00035 	stwio	r3,0(r2)
   3499c:	e0bff817 	ldw	r2,-32(fp)
   349a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   349a4:	e0bff717 	ldw	r2,-36(fp)
   349a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   349ac:	e0bff403 	ldbu	r2,-48(fp)
   349b0:	10000226 	beq	r2,zero,349bc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   349b4:	00bffd44 	movi	r2,-11
   349b8:	00000106 	br	349c0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   349bc:	e0bff517 	ldw	r2,-44(fp)
  }
}
   349c0:	e037883a 	mov	sp,fp
   349c4:	dfc00117 	ldw	ra,4(sp)
   349c8:	df000017 	ldw	fp,0(sp)
   349cc:	dec00204 	addi	sp,sp,8
   349d0:	f800283a 	ret

000349d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   349d4:	defffe04 	addi	sp,sp,-8
   349d8:	dfc00115 	stw	ra,4(sp)
   349dc:	df000015 	stw	fp,0(sp)
   349e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   349e4:	d0a00b17 	ldw	r2,-32724(gp)
   349e8:	10000326 	beq	r2,zero,349f8 <alt_get_errno+0x24>
   349ec:	d0a00b17 	ldw	r2,-32724(gp)
   349f0:	103ee83a 	callr	r2
   349f4:	00000106 	br	349fc <alt_get_errno+0x28>
   349f8:	d0a01204 	addi	r2,gp,-32696
}
   349fc:	e037883a 	mov	sp,fp
   34a00:	dfc00117 	ldw	ra,4(sp)
   34a04:	df000017 	ldw	fp,0(sp)
   34a08:	dec00204 	addi	sp,sp,8
   34a0c:	f800283a 	ret

00034a10 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   34a10:	defff204 	addi	sp,sp,-56
   34a14:	dfc00d15 	stw	ra,52(sp)
   34a18:	df000c15 	stw	fp,48(sp)
   34a1c:	df000c04 	addi	fp,sp,48
   34a20:	e13ffc15 	stw	r4,-16(fp)
   34a24:	e17ffd15 	stw	r5,-12(fp)
   34a28:	e1bffe15 	stw	r6,-8(fp)
   34a2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   34a30:	e0bffe17 	ldw	r2,-8(fp)
   34a34:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   34a38:	e0bfff17 	ldw	r2,-4(fp)
   34a3c:	1090000c 	andi	r2,r2,16384
   34a40:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   34a44:	00003c06 	br	34b38 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   34a48:	e0bffc17 	ldw	r2,-16(fp)
   34a4c:	10800517 	ldw	r2,20(r2)
   34a50:	10800044 	addi	r2,r2,1
   34a54:	10800fcc 	andi	r2,r2,63
   34a58:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   34a5c:	e0bffc17 	ldw	r2,-16(fp)
   34a60:	10c00417 	ldw	r3,16(r2)
   34a64:	e0bff717 	ldw	r2,-36(fp)
   34a68:	1880221e 	bne	r3,r2,34af4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   34a6c:	e0bff517 	ldw	r2,-44(fp)
   34a70:	10000526 	beq	r2,zero,34a88 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   34a74:	00349d40 	call	349d4 <alt_get_errno>
   34a78:	1007883a 	mov	r3,r2
   34a7c:	008002c4 	movi	r2,11
   34a80:	18800015 	stw	r2,0(r3)
        break;
   34a84:	00002e06 	br	34b40 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34a88:	0005303a 	rdctl	r2,status
   34a8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34a90:	e0fff917 	ldw	r3,-28(fp)
   34a94:	00bfff84 	movi	r2,-2
   34a98:	1884703a 	and	r2,r3,r2
   34a9c:	1001703a 	wrctl	status,r2
  
  return context;
   34aa0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   34aa4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   34aa8:	e0bffc17 	ldw	r2,-16(fp)
   34aac:	10800117 	ldw	r2,4(r2)
   34ab0:	10c11014 	ori	r3,r2,1088
   34ab4:	e0bffc17 	ldw	r2,-16(fp)
   34ab8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   34abc:	e0bffc17 	ldw	r2,-16(fp)
   34ac0:	10800017 	ldw	r2,0(r2)
   34ac4:	10800304 	addi	r2,r2,12
   34ac8:	e0fffc17 	ldw	r3,-16(fp)
   34acc:	18c00117 	ldw	r3,4(r3)
   34ad0:	10c00035 	stwio	r3,0(r2)
   34ad4:	e0bff817 	ldw	r2,-32(fp)
   34ad8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34adc:	e0bff617 	ldw	r2,-40(fp)
   34ae0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   34ae4:	e0bffc17 	ldw	r2,-16(fp)
   34ae8:	10c00417 	ldw	r3,16(r2)
   34aec:	e0bff717 	ldw	r2,-36(fp)
   34af0:	18bffc26 	beq	r3,r2,34ae4 <__alt_data_end+0xf8034ae4>
      }
    }

    count--;
   34af4:	e0bff417 	ldw	r2,-48(fp)
   34af8:	10bfffc4 	addi	r2,r2,-1
   34afc:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   34b00:	e0bffc17 	ldw	r2,-16(fp)
   34b04:	10c00517 	ldw	r3,20(r2)
   34b08:	e0bffd17 	ldw	r2,-12(fp)
   34b0c:	11000044 	addi	r4,r2,1
   34b10:	e13ffd15 	stw	r4,-12(fp)
   34b14:	10800003 	ldbu	r2,0(r2)
   34b18:	1009883a 	mov	r4,r2
   34b1c:	e0bffc17 	ldw	r2,-16(fp)
   34b20:	10c5883a 	add	r2,r2,r3
   34b24:	10801704 	addi	r2,r2,92
   34b28:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   34b2c:	e0bffc17 	ldw	r2,-16(fp)
   34b30:	e0fff717 	ldw	r3,-36(fp)
   34b34:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   34b38:	e0bff417 	ldw	r2,-48(fp)
   34b3c:	103fc21e 	bne	r2,zero,34a48 <__alt_data_end+0xf8034a48>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34b40:	0005303a 	rdctl	r2,status
   34b44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34b48:	e0fffb17 	ldw	r3,-20(fp)
   34b4c:	00bfff84 	movi	r2,-2
   34b50:	1884703a 	and	r2,r3,r2
   34b54:	1001703a 	wrctl	status,r2
  
  return context;
   34b58:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   34b5c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   34b60:	e0bffc17 	ldw	r2,-16(fp)
   34b64:	10800117 	ldw	r2,4(r2)
   34b68:	10c11014 	ori	r3,r2,1088
   34b6c:	e0bffc17 	ldw	r2,-16(fp)
   34b70:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   34b74:	e0bffc17 	ldw	r2,-16(fp)
   34b78:	10800017 	ldw	r2,0(r2)
   34b7c:	10800304 	addi	r2,r2,12
   34b80:	e0fffc17 	ldw	r3,-16(fp)
   34b84:	18c00117 	ldw	r3,4(r3)
   34b88:	10c00035 	stwio	r3,0(r2)
   34b8c:	e0bff817 	ldw	r2,-32(fp)
   34b90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34b94:	e0bffa17 	ldw	r2,-24(fp)
   34b98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   34b9c:	e0fffe17 	ldw	r3,-8(fp)
   34ba0:	e0bff417 	ldw	r2,-48(fp)
   34ba4:	1885c83a 	sub	r2,r3,r2
}
   34ba8:	e037883a 	mov	sp,fp
   34bac:	dfc00117 	ldw	ra,4(sp)
   34bb0:	df000017 	ldw	fp,0(sp)
   34bb4:	dec00204 	addi	sp,sp,8
   34bb8:	f800283a 	ret

00034bbc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   34bbc:	defff504 	addi	sp,sp,-44
   34bc0:	df000a15 	stw	fp,40(sp)
   34bc4:	df000a04 	addi	fp,sp,40
   34bc8:	e13ffc15 	stw	r4,-16(fp)
   34bcc:	e17ffd15 	stw	r5,-12(fp)
   34bd0:	e1bffe15 	stw	r6,-8(fp)
   34bd4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   34bd8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   34bdc:	d0a01d17 	ldw	r2,-32652(gp)
  
  if (alt_ticks_per_second ())
   34be0:	10003c26 	beq	r2,zero,34cd4 <alt_alarm_start+0x118>
  {
    if (alarm)
   34be4:	e0bffc17 	ldw	r2,-16(fp)
   34be8:	10003826 	beq	r2,zero,34ccc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   34bec:	e0bffc17 	ldw	r2,-16(fp)
   34bf0:	e0fffe17 	ldw	r3,-8(fp)
   34bf4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   34bf8:	e0bffc17 	ldw	r2,-16(fp)
   34bfc:	e0ffff17 	ldw	r3,-4(fp)
   34c00:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   34c04:	0005303a 	rdctl	r2,status
   34c08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   34c0c:	e0fff917 	ldw	r3,-28(fp)
   34c10:	00bfff84 	movi	r2,-2
   34c14:	1884703a 	and	r2,r3,r2
   34c18:	1001703a 	wrctl	status,r2
  
  return context;
   34c1c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   34c20:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   34c24:	d0a01e17 	ldw	r2,-32648(gp)
      
      current_nticks = alt_nticks();
   34c28:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   34c2c:	e0fffd17 	ldw	r3,-12(fp)
   34c30:	e0bff617 	ldw	r2,-40(fp)
   34c34:	1885883a 	add	r2,r3,r2
   34c38:	10c00044 	addi	r3,r2,1
   34c3c:	e0bffc17 	ldw	r2,-16(fp)
   34c40:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   34c44:	e0bffc17 	ldw	r2,-16(fp)
   34c48:	10c00217 	ldw	r3,8(r2)
   34c4c:	e0bff617 	ldw	r2,-40(fp)
   34c50:	1880042e 	bgeu	r3,r2,34c64 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   34c54:	e0bffc17 	ldw	r2,-16(fp)
   34c58:	00c00044 	movi	r3,1
   34c5c:	10c00405 	stb	r3,16(r2)
   34c60:	00000206 	br	34c6c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   34c64:	e0bffc17 	ldw	r2,-16(fp)
   34c68:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   34c6c:	e0bffc17 	ldw	r2,-16(fp)
   34c70:	d0e01004 	addi	r3,gp,-32704
   34c74:	e0fffa15 	stw	r3,-24(fp)
   34c78:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   34c7c:	e0bffb17 	ldw	r2,-20(fp)
   34c80:	e0fffa17 	ldw	r3,-24(fp)
   34c84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   34c88:	e0bffa17 	ldw	r2,-24(fp)
   34c8c:	10c00017 	ldw	r3,0(r2)
   34c90:	e0bffb17 	ldw	r2,-20(fp)
   34c94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   34c98:	e0bffa17 	ldw	r2,-24(fp)
   34c9c:	10800017 	ldw	r2,0(r2)
   34ca0:	e0fffb17 	ldw	r3,-20(fp)
   34ca4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   34ca8:	e0bffa17 	ldw	r2,-24(fp)
   34cac:	e0fffb17 	ldw	r3,-20(fp)
   34cb0:	10c00015 	stw	r3,0(r2)
   34cb4:	e0bff817 	ldw	r2,-32(fp)
   34cb8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   34cbc:	e0bff717 	ldw	r2,-36(fp)
   34cc0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   34cc4:	0005883a 	mov	r2,zero
   34cc8:	00000306 	br	34cd8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   34ccc:	00bffa84 	movi	r2,-22
   34cd0:	00000106 	br	34cd8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   34cd4:	00bfde84 	movi	r2,-134
  }
}
   34cd8:	e037883a 	mov	sp,fp
   34cdc:	df000017 	ldw	fp,0(sp)
   34ce0:	dec00104 	addi	sp,sp,4
   34ce4:	f800283a 	ret

00034ce8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   34ce8:	defffa04 	addi	sp,sp,-24
   34cec:	dfc00515 	stw	ra,20(sp)
   34cf0:	df000415 	stw	fp,16(sp)
   34cf4:	df000404 	addi	fp,sp,16
   34cf8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   34cfc:	008000c4 	movi	r2,3
   34d00:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   34d04:	e0fffd17 	ldw	r3,-12(fp)
   34d08:	008003f4 	movhi	r2,15
   34d0c:	10909004 	addi	r2,r2,16960
   34d10:	1885383a 	mul	r2,r3,r2
   34d14:	100b883a 	mov	r5,r2
   34d18:	01017db4 	movhi	r4,1526
   34d1c:	21384004 	addi	r4,r4,-7936
   34d20:	002e7a00 	call	2e7a0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   34d24:	100b883a 	mov	r5,r2
   34d28:	01200034 	movhi	r4,32768
   34d2c:	213fffc4 	addi	r4,r4,-1
   34d30:	002e7a00 	call	2e7a0 <__udivsi3>
   34d34:	100b883a 	mov	r5,r2
   34d38:	e13fff17 	ldw	r4,-4(fp)
   34d3c:	002e7a00 	call	2e7a0 <__udivsi3>
   34d40:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   34d44:	e0bffe17 	ldw	r2,-8(fp)
   34d48:	10002a26 	beq	r2,zero,34df4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   34d4c:	e03ffc15 	stw	zero,-16(fp)
   34d50:	00001706 	br	34db0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   34d54:	00a00034 	movhi	r2,32768
   34d58:	10bfffc4 	addi	r2,r2,-1
   34d5c:	10bfffc4 	addi	r2,r2,-1
   34d60:	103ffe1e 	bne	r2,zero,34d5c <__alt_data_end+0xf8034d5c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   34d64:	e0fffd17 	ldw	r3,-12(fp)
   34d68:	008003f4 	movhi	r2,15
   34d6c:	10909004 	addi	r2,r2,16960
   34d70:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   34d74:	100b883a 	mov	r5,r2
   34d78:	01017db4 	movhi	r4,1526
   34d7c:	21384004 	addi	r4,r4,-7936
   34d80:	002e7a00 	call	2e7a0 <__udivsi3>
   34d84:	100b883a 	mov	r5,r2
   34d88:	01200034 	movhi	r4,32768
   34d8c:	213fffc4 	addi	r4,r4,-1
   34d90:	002e7a00 	call	2e7a0 <__udivsi3>
   34d94:	1007883a 	mov	r3,r2
   34d98:	e0bfff17 	ldw	r2,-4(fp)
   34d9c:	10c5c83a 	sub	r2,r2,r3
   34da0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   34da4:	e0bffc17 	ldw	r2,-16(fp)
   34da8:	10800044 	addi	r2,r2,1
   34dac:	e0bffc15 	stw	r2,-16(fp)
   34db0:	e0fffc17 	ldw	r3,-16(fp)
   34db4:	e0bffe17 	ldw	r2,-8(fp)
   34db8:	18bfe616 	blt	r3,r2,34d54 <__alt_data_end+0xf8034d54>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   34dbc:	e0fffd17 	ldw	r3,-12(fp)
   34dc0:	008003f4 	movhi	r2,15
   34dc4:	10909004 	addi	r2,r2,16960
   34dc8:	1885383a 	mul	r2,r3,r2
   34dcc:	100b883a 	mov	r5,r2
   34dd0:	01017db4 	movhi	r4,1526
   34dd4:	21384004 	addi	r4,r4,-7936
   34dd8:	002e7a00 	call	2e7a0 <__udivsi3>
   34ddc:	1007883a 	mov	r3,r2
   34de0:	e0bfff17 	ldw	r2,-4(fp)
   34de4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   34de8:	10bfffc4 	addi	r2,r2,-1
   34dec:	103ffe1e 	bne	r2,zero,34de8 <__alt_data_end+0xf8034de8>
   34df0:	00000d06 	br	34e28 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   34df4:	e0fffd17 	ldw	r3,-12(fp)
   34df8:	008003f4 	movhi	r2,15
   34dfc:	10909004 	addi	r2,r2,16960
   34e00:	1885383a 	mul	r2,r3,r2
   34e04:	100b883a 	mov	r5,r2
   34e08:	01017db4 	movhi	r4,1526
   34e0c:	21384004 	addi	r4,r4,-7936
   34e10:	002e7a00 	call	2e7a0 <__udivsi3>
   34e14:	1007883a 	mov	r3,r2
   34e18:	e0bfff17 	ldw	r2,-4(fp)
   34e1c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   34e20:	10bfffc4 	addi	r2,r2,-1
   34e24:	00bffe16 	blt	zero,r2,34e20 <__alt_data_end+0xf8034e20>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   34e28:	0005883a 	mov	r2,zero
}
   34e2c:	e037883a 	mov	sp,fp
   34e30:	dfc00117 	ldw	ra,4(sp)
   34e34:	df000017 	ldw	fp,0(sp)
   34e38:	dec00204 	addi	sp,sp,8
   34e3c:	f800283a 	ret

00034e40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   34e40:	defffe04 	addi	sp,sp,-8
   34e44:	df000115 	stw	fp,4(sp)
   34e48:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   34e4c:	e03fff15 	stw	zero,-4(fp)
   34e50:	00000506 	br	34e68 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   34e54:	e0bfff17 	ldw	r2,-4(fp)
   34e58:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   34e5c:	e0bfff17 	ldw	r2,-4(fp)
   34e60:	10800804 	addi	r2,r2,32
   34e64:	e0bfff15 	stw	r2,-4(fp)
   34e68:	e0bfff17 	ldw	r2,-4(fp)
   34e6c:	10820030 	cmpltui	r2,r2,2048
   34e70:	103ff81e 	bne	r2,zero,34e54 <__alt_data_end+0xf8034e54>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   34e74:	0001883a 	nop
   34e78:	e037883a 	mov	sp,fp
   34e7c:	df000017 	ldw	fp,0(sp)
   34e80:	dec00104 	addi	sp,sp,4
   34e84:	f800283a 	ret

00034e88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   34e88:	defffe04 	addi	sp,sp,-8
   34e8c:	dfc00115 	stw	ra,4(sp)
   34e90:	df000015 	stw	fp,0(sp)
   34e94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   34e98:	d0a00b17 	ldw	r2,-32724(gp)
   34e9c:	10000326 	beq	r2,zero,34eac <alt_get_errno+0x24>
   34ea0:	d0a00b17 	ldw	r2,-32724(gp)
   34ea4:	103ee83a 	callr	r2
   34ea8:	00000106 	br	34eb0 <alt_get_errno+0x28>
   34eac:	d0a01204 	addi	r2,gp,-32696
}
   34eb0:	e037883a 	mov	sp,fp
   34eb4:	dfc00117 	ldw	ra,4(sp)
   34eb8:	df000017 	ldw	fp,0(sp)
   34ebc:	dec00204 	addi	sp,sp,8
   34ec0:	f800283a 	ret

00034ec4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   34ec4:	defffa04 	addi	sp,sp,-24
   34ec8:	dfc00515 	stw	ra,20(sp)
   34ecc:	df000415 	stw	fp,16(sp)
   34ed0:	df000404 	addi	fp,sp,16
   34ed4:	e13ffe15 	stw	r4,-8(fp)
   34ed8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   34edc:	e0bffe17 	ldw	r2,-8(fp)
   34ee0:	10000326 	beq	r2,zero,34ef0 <alt_dev_llist_insert+0x2c>
   34ee4:	e0bffe17 	ldw	r2,-8(fp)
   34ee8:	10800217 	ldw	r2,8(r2)
   34eec:	1000061e 	bne	r2,zero,34f08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   34ef0:	0034e880 	call	34e88 <alt_get_errno>
   34ef4:	1007883a 	mov	r3,r2
   34ef8:	00800584 	movi	r2,22
   34efc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   34f00:	00bffa84 	movi	r2,-22
   34f04:	00001306 	br	34f54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   34f08:	e0bffe17 	ldw	r2,-8(fp)
   34f0c:	e0ffff17 	ldw	r3,-4(fp)
   34f10:	e0fffc15 	stw	r3,-16(fp)
   34f14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   34f18:	e0bffd17 	ldw	r2,-12(fp)
   34f1c:	e0fffc17 	ldw	r3,-16(fp)
   34f20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   34f24:	e0bffc17 	ldw	r2,-16(fp)
   34f28:	10c00017 	ldw	r3,0(r2)
   34f2c:	e0bffd17 	ldw	r2,-12(fp)
   34f30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   34f34:	e0bffc17 	ldw	r2,-16(fp)
   34f38:	10800017 	ldw	r2,0(r2)
   34f3c:	e0fffd17 	ldw	r3,-12(fp)
   34f40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   34f44:	e0bffc17 	ldw	r2,-16(fp)
   34f48:	e0fffd17 	ldw	r3,-12(fp)
   34f4c:	10c00015 	stw	r3,0(r2)

  return 0;  
   34f50:	0005883a 	mov	r2,zero
}
   34f54:	e037883a 	mov	sp,fp
   34f58:	dfc00117 	ldw	ra,4(sp)
   34f5c:	df000017 	ldw	fp,0(sp)
   34f60:	dec00204 	addi	sp,sp,8
   34f64:	f800283a 	ret

00034f68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   34f68:	defffd04 	addi	sp,sp,-12
   34f6c:	dfc00215 	stw	ra,8(sp)
   34f70:	df000115 	stw	fp,4(sp)
   34f74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   34f78:	008000f4 	movhi	r2,3
   34f7c:	10983304 	addi	r2,r2,24780
   34f80:	e0bfff15 	stw	r2,-4(fp)
   34f84:	00000606 	br	34fa0 <_do_ctors+0x38>
        (*ctor) (); 
   34f88:	e0bfff17 	ldw	r2,-4(fp)
   34f8c:	10800017 	ldw	r2,0(r2)
   34f90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   34f94:	e0bfff17 	ldw	r2,-4(fp)
   34f98:	10bfff04 	addi	r2,r2,-4
   34f9c:	e0bfff15 	stw	r2,-4(fp)
   34fa0:	e0ffff17 	ldw	r3,-4(fp)
   34fa4:	008000f4 	movhi	r2,3
   34fa8:	10983404 	addi	r2,r2,24784
   34fac:	18bff62e 	bgeu	r3,r2,34f88 <__alt_data_end+0xf8034f88>
        (*ctor) (); 
}
   34fb0:	0001883a 	nop
   34fb4:	e037883a 	mov	sp,fp
   34fb8:	dfc00117 	ldw	ra,4(sp)
   34fbc:	df000017 	ldw	fp,0(sp)
   34fc0:	dec00204 	addi	sp,sp,8
   34fc4:	f800283a 	ret

00034fc8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   34fc8:	defffd04 	addi	sp,sp,-12
   34fcc:	dfc00215 	stw	ra,8(sp)
   34fd0:	df000115 	stw	fp,4(sp)
   34fd4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   34fd8:	008000f4 	movhi	r2,3
   34fdc:	10983304 	addi	r2,r2,24780
   34fe0:	e0bfff15 	stw	r2,-4(fp)
   34fe4:	00000606 	br	35000 <_do_dtors+0x38>
        (*dtor) (); 
   34fe8:	e0bfff17 	ldw	r2,-4(fp)
   34fec:	10800017 	ldw	r2,0(r2)
   34ff0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   34ff4:	e0bfff17 	ldw	r2,-4(fp)
   34ff8:	10bfff04 	addi	r2,r2,-4
   34ffc:	e0bfff15 	stw	r2,-4(fp)
   35000:	e0ffff17 	ldw	r3,-4(fp)
   35004:	008000f4 	movhi	r2,3
   35008:	10983404 	addi	r2,r2,24784
   3500c:	18bff62e 	bgeu	r3,r2,34fe8 <__alt_data_end+0xf8034fe8>
        (*dtor) (); 
}
   35010:	0001883a 	nop
   35014:	e037883a 	mov	sp,fp
   35018:	dfc00117 	ldw	ra,4(sp)
   3501c:	df000017 	ldw	fp,0(sp)
   35020:	dec00204 	addi	sp,sp,8
   35024:	f800283a 	ret

00035028 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   35028:	defffa04 	addi	sp,sp,-24
   3502c:	dfc00515 	stw	ra,20(sp)
   35030:	df000415 	stw	fp,16(sp)
   35034:	df000404 	addi	fp,sp,16
   35038:	e13ffe15 	stw	r4,-8(fp)
   3503c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   35040:	e0bfff17 	ldw	r2,-4(fp)
   35044:	10800017 	ldw	r2,0(r2)
   35048:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3504c:	e13ffe17 	ldw	r4,-8(fp)
   35050:	0021d300 	call	21d30 <strlen>
   35054:	10800044 	addi	r2,r2,1
   35058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3505c:	00000d06 	br	35094 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   35060:	e0bffc17 	ldw	r2,-16(fp)
   35064:	10800217 	ldw	r2,8(r2)
   35068:	e0fffd17 	ldw	r3,-12(fp)
   3506c:	180d883a 	mov	r6,r3
   35070:	e17ffe17 	ldw	r5,-8(fp)
   35074:	1009883a 	mov	r4,r2
   35078:	0035c200 	call	35c20 <memcmp>
   3507c:	1000021e 	bne	r2,zero,35088 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   35080:	e0bffc17 	ldw	r2,-16(fp)
   35084:	00000706 	br	350a4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   35088:	e0bffc17 	ldw	r2,-16(fp)
   3508c:	10800017 	ldw	r2,0(r2)
   35090:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   35094:	e0fffc17 	ldw	r3,-16(fp)
   35098:	e0bfff17 	ldw	r2,-4(fp)
   3509c:	18bff01e 	bne	r3,r2,35060 <__alt_data_end+0xf8035060>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   350a0:	0005883a 	mov	r2,zero
}
   350a4:	e037883a 	mov	sp,fp
   350a8:	dfc00117 	ldw	ra,4(sp)
   350ac:	df000017 	ldw	fp,0(sp)
   350b0:	dec00204 	addi	sp,sp,8
   350b4:	f800283a 	ret

000350b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   350b8:	defffb04 	addi	sp,sp,-20
   350bc:	dfc00415 	stw	ra,16(sp)
   350c0:	df000315 	stw	fp,12(sp)
   350c4:	df000304 	addi	fp,sp,12
   350c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   350cc:	d0a00617 	ldw	r2,-32744(gp)
   350d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   350d4:	00003106 	br	3519c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   350d8:	e0bffd17 	ldw	r2,-12(fp)
   350dc:	10800217 	ldw	r2,8(r2)
   350e0:	1009883a 	mov	r4,r2
   350e4:	0021d300 	call	21d30 <strlen>
   350e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   350ec:	e0bffd17 	ldw	r2,-12(fp)
   350f0:	10c00217 	ldw	r3,8(r2)
   350f4:	e0bffe17 	ldw	r2,-8(fp)
   350f8:	10bfffc4 	addi	r2,r2,-1
   350fc:	1885883a 	add	r2,r3,r2
   35100:	10800003 	ldbu	r2,0(r2)
   35104:	10803fcc 	andi	r2,r2,255
   35108:	1080201c 	xori	r2,r2,128
   3510c:	10bfe004 	addi	r2,r2,-128
   35110:	10800bd8 	cmpnei	r2,r2,47
   35114:	1000031e 	bne	r2,zero,35124 <alt_find_file+0x6c>
    {
      len -= 1;
   35118:	e0bffe17 	ldw	r2,-8(fp)
   3511c:	10bfffc4 	addi	r2,r2,-1
   35120:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   35124:	e0bffe17 	ldw	r2,-8(fp)
   35128:	e0ffff17 	ldw	r3,-4(fp)
   3512c:	1885883a 	add	r2,r3,r2
   35130:	10800003 	ldbu	r2,0(r2)
   35134:	10803fcc 	andi	r2,r2,255
   35138:	1080201c 	xori	r2,r2,128
   3513c:	10bfe004 	addi	r2,r2,-128
   35140:	10800be0 	cmpeqi	r2,r2,47
   35144:	1000081e 	bne	r2,zero,35168 <alt_find_file+0xb0>
   35148:	e0bffe17 	ldw	r2,-8(fp)
   3514c:	e0ffff17 	ldw	r3,-4(fp)
   35150:	1885883a 	add	r2,r3,r2
   35154:	10800003 	ldbu	r2,0(r2)
   35158:	10803fcc 	andi	r2,r2,255
   3515c:	1080201c 	xori	r2,r2,128
   35160:	10bfe004 	addi	r2,r2,-128
   35164:	10000a1e 	bne	r2,zero,35190 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   35168:	e0bffd17 	ldw	r2,-12(fp)
   3516c:	10800217 	ldw	r2,8(r2)
   35170:	e0fffe17 	ldw	r3,-8(fp)
   35174:	180d883a 	mov	r6,r3
   35178:	e17fff17 	ldw	r5,-4(fp)
   3517c:	1009883a 	mov	r4,r2
   35180:	0035c200 	call	35c20 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   35184:	1000021e 	bne	r2,zero,35190 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   35188:	e0bffd17 	ldw	r2,-12(fp)
   3518c:	00000706 	br	351ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   35190:	e0bffd17 	ldw	r2,-12(fp)
   35194:	10800017 	ldw	r2,0(r2)
   35198:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3519c:	e0fffd17 	ldw	r3,-12(fp)
   351a0:	d0a00604 	addi	r2,gp,-32744
   351a4:	18bfcc1e 	bne	r3,r2,350d8 <__alt_data_end+0xf80350d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   351a8:	0005883a 	mov	r2,zero
}
   351ac:	e037883a 	mov	sp,fp
   351b0:	dfc00117 	ldw	ra,4(sp)
   351b4:	df000017 	ldw	fp,0(sp)
   351b8:	dec00204 	addi	sp,sp,8
   351bc:	f800283a 	ret

000351c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   351c0:	defffc04 	addi	sp,sp,-16
   351c4:	df000315 	stw	fp,12(sp)
   351c8:	df000304 	addi	fp,sp,12
   351cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   351d0:	00bffa04 	movi	r2,-24
   351d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   351d8:	e03ffd15 	stw	zero,-12(fp)
   351dc:	00001906 	br	35244 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   351e0:	00810034 	movhi	r2,1024
   351e4:	10833104 	addi	r2,r2,3268
   351e8:	e0fffd17 	ldw	r3,-12(fp)
   351ec:	18c00324 	muli	r3,r3,12
   351f0:	10c5883a 	add	r2,r2,r3
   351f4:	10800017 	ldw	r2,0(r2)
   351f8:	10000f1e 	bne	r2,zero,35238 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   351fc:	00810034 	movhi	r2,1024
   35200:	10833104 	addi	r2,r2,3268
   35204:	e0fffd17 	ldw	r3,-12(fp)
   35208:	18c00324 	muli	r3,r3,12
   3520c:	10c5883a 	add	r2,r2,r3
   35210:	e0ffff17 	ldw	r3,-4(fp)
   35214:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   35218:	d0e00a17 	ldw	r3,-32728(gp)
   3521c:	e0bffd17 	ldw	r2,-12(fp)
   35220:	1880020e 	bge	r3,r2,3522c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   35224:	e0bffd17 	ldw	r2,-12(fp)
   35228:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   3522c:	e0bffd17 	ldw	r2,-12(fp)
   35230:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   35234:	00000606 	br	35250 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   35238:	e0bffd17 	ldw	r2,-12(fp)
   3523c:	10800044 	addi	r2,r2,1
   35240:	e0bffd15 	stw	r2,-12(fp)
   35244:	e0bffd17 	ldw	r2,-12(fp)
   35248:	10800810 	cmplti	r2,r2,32
   3524c:	103fe41e 	bne	r2,zero,351e0 <__alt_data_end+0xf80351e0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   35250:	e0bffe17 	ldw	r2,-8(fp)
}
   35254:	e037883a 	mov	sp,fp
   35258:	df000017 	ldw	fp,0(sp)
   3525c:	dec00104 	addi	sp,sp,4
   35260:	f800283a 	ret

00035264 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   35264:	defffe04 	addi	sp,sp,-8
   35268:	dfc00115 	stw	ra,4(sp)
   3526c:	df000015 	stw	fp,0(sp)
   35270:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   35274:	01440004 	movi	r5,4096
   35278:	0009883a 	mov	r4,zero
   3527c:	0035aa80 	call	35aa8 <alt_icache_flush>
#endif
}
   35280:	0001883a 	nop
   35284:	e037883a 	mov	sp,fp
   35288:	dfc00117 	ldw	ra,4(sp)
   3528c:	df000017 	ldw	fp,0(sp)
   35290:	dec00204 	addi	sp,sp,8
   35294:	f800283a 	ret

00035298 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   35298:	defff904 	addi	sp,sp,-28
   3529c:	dfc00615 	stw	ra,24(sp)
   352a0:	df000515 	stw	fp,20(sp)
   352a4:	df000504 	addi	fp,sp,20
   352a8:	e13ffc15 	stw	r4,-16(fp)
   352ac:	e17ffd15 	stw	r5,-12(fp)
   352b0:	e1bffe15 	stw	r6,-8(fp)
   352b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   352b8:	e0800217 	ldw	r2,8(fp)
   352bc:	d8800015 	stw	r2,0(sp)
   352c0:	e1ffff17 	ldw	r7,-4(fp)
   352c4:	e1bffe17 	ldw	r6,-8(fp)
   352c8:	e17ffd17 	ldw	r5,-12(fp)
   352cc:	e13ffc17 	ldw	r4,-16(fp)
   352d0:	00354480 	call	35448 <alt_iic_isr_register>
}  
   352d4:	e037883a 	mov	sp,fp
   352d8:	dfc00117 	ldw	ra,4(sp)
   352dc:	df000017 	ldw	fp,0(sp)
   352e0:	dec00204 	addi	sp,sp,8
   352e4:	f800283a 	ret

000352e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   352e8:	defff904 	addi	sp,sp,-28
   352ec:	df000615 	stw	fp,24(sp)
   352f0:	df000604 	addi	fp,sp,24
   352f4:	e13ffe15 	stw	r4,-8(fp)
   352f8:	e17fff15 	stw	r5,-4(fp)
   352fc:	e0bfff17 	ldw	r2,-4(fp)
   35300:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   35304:	0005303a 	rdctl	r2,status
   35308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3530c:	e0fffb17 	ldw	r3,-20(fp)
   35310:	00bfff84 	movi	r2,-2
   35314:	1884703a 	and	r2,r3,r2
   35318:	1001703a 	wrctl	status,r2
  
  return context;
   3531c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   35320:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   35324:	00c00044 	movi	r3,1
   35328:	e0bffa17 	ldw	r2,-24(fp)
   3532c:	1884983a 	sll	r2,r3,r2
   35330:	1007883a 	mov	r3,r2
   35334:	d0a01c17 	ldw	r2,-32656(gp)
   35338:	1884b03a 	or	r2,r3,r2
   3533c:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   35340:	d0a01c17 	ldw	r2,-32656(gp)
   35344:	100170fa 	wrctl	ienable,r2
   35348:	e0bffc17 	ldw	r2,-16(fp)
   3534c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   35350:	e0bffd17 	ldw	r2,-12(fp)
   35354:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   35358:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   3535c:	0001883a 	nop
}
   35360:	e037883a 	mov	sp,fp
   35364:	df000017 	ldw	fp,0(sp)
   35368:	dec00104 	addi	sp,sp,4
   3536c:	f800283a 	ret

00035370 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   35370:	defff904 	addi	sp,sp,-28
   35374:	df000615 	stw	fp,24(sp)
   35378:	df000604 	addi	fp,sp,24
   3537c:	e13ffe15 	stw	r4,-8(fp)
   35380:	e17fff15 	stw	r5,-4(fp)
   35384:	e0bfff17 	ldw	r2,-4(fp)
   35388:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3538c:	0005303a 	rdctl	r2,status
   35390:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   35394:	e0fffb17 	ldw	r3,-20(fp)
   35398:	00bfff84 	movi	r2,-2
   3539c:	1884703a 	and	r2,r3,r2
   353a0:	1001703a 	wrctl	status,r2
  
  return context;
   353a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   353a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   353ac:	00c00044 	movi	r3,1
   353b0:	e0bffa17 	ldw	r2,-24(fp)
   353b4:	1884983a 	sll	r2,r3,r2
   353b8:	0084303a 	nor	r2,zero,r2
   353bc:	1007883a 	mov	r3,r2
   353c0:	d0a01c17 	ldw	r2,-32656(gp)
   353c4:	1884703a 	and	r2,r3,r2
   353c8:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   353cc:	d0a01c17 	ldw	r2,-32656(gp)
   353d0:	100170fa 	wrctl	ienable,r2
   353d4:	e0bffc17 	ldw	r2,-16(fp)
   353d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   353dc:	e0bffd17 	ldw	r2,-12(fp)
   353e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   353e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   353e8:	0001883a 	nop
}
   353ec:	e037883a 	mov	sp,fp
   353f0:	df000017 	ldw	fp,0(sp)
   353f4:	dec00104 	addi	sp,sp,4
   353f8:	f800283a 	ret

000353fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   353fc:	defffc04 	addi	sp,sp,-16
   35400:	df000315 	stw	fp,12(sp)
   35404:	df000304 	addi	fp,sp,12
   35408:	e13ffe15 	stw	r4,-8(fp)
   3540c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   35410:	000530fa 	rdctl	r2,ienable
   35414:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   35418:	00c00044 	movi	r3,1
   3541c:	e0bfff17 	ldw	r2,-4(fp)
   35420:	1884983a 	sll	r2,r3,r2
   35424:	1007883a 	mov	r3,r2
   35428:	e0bffd17 	ldw	r2,-12(fp)
   3542c:	1884703a 	and	r2,r3,r2
   35430:	1004c03a 	cmpne	r2,r2,zero
   35434:	10803fcc 	andi	r2,r2,255
}
   35438:	e037883a 	mov	sp,fp
   3543c:	df000017 	ldw	fp,0(sp)
   35440:	dec00104 	addi	sp,sp,4
   35444:	f800283a 	ret

00035448 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   35448:	defff504 	addi	sp,sp,-44
   3544c:	dfc00a15 	stw	ra,40(sp)
   35450:	df000915 	stw	fp,36(sp)
   35454:	df000904 	addi	fp,sp,36
   35458:	e13ffc15 	stw	r4,-16(fp)
   3545c:	e17ffd15 	stw	r5,-12(fp)
   35460:	e1bffe15 	stw	r6,-8(fp)
   35464:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   35468:	00bffa84 	movi	r2,-22
   3546c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   35470:	e0bffd17 	ldw	r2,-12(fp)
   35474:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   35478:	e0bff817 	ldw	r2,-32(fp)
   3547c:	10800808 	cmpgei	r2,r2,32
   35480:	1000271e 	bne	r2,zero,35520 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   35484:	0005303a 	rdctl	r2,status
   35488:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3548c:	e0fffb17 	ldw	r3,-20(fp)
   35490:	00bfff84 	movi	r2,-2
   35494:	1884703a 	and	r2,r3,r2
   35498:	1001703a 	wrctl	status,r2
  
  return context;
   3549c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   354a0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   354a4:	00810034 	movhi	r2,1024
   354a8:	10881204 	addi	r2,r2,8264
   354ac:	e0fff817 	ldw	r3,-32(fp)
   354b0:	180690fa 	slli	r3,r3,3
   354b4:	10c5883a 	add	r2,r2,r3
   354b8:	e0fffe17 	ldw	r3,-8(fp)
   354bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   354c0:	00810034 	movhi	r2,1024
   354c4:	10881204 	addi	r2,r2,8264
   354c8:	e0fff817 	ldw	r3,-32(fp)
   354cc:	180690fa 	slli	r3,r3,3
   354d0:	10c5883a 	add	r2,r2,r3
   354d4:	10800104 	addi	r2,r2,4
   354d8:	e0ffff17 	ldw	r3,-4(fp)
   354dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   354e0:	e0bffe17 	ldw	r2,-8(fp)
   354e4:	10000526 	beq	r2,zero,354fc <alt_iic_isr_register+0xb4>
   354e8:	e0bff817 	ldw	r2,-32(fp)
   354ec:	100b883a 	mov	r5,r2
   354f0:	e13ffc17 	ldw	r4,-16(fp)
   354f4:	00352e80 	call	352e8 <alt_ic_irq_enable>
   354f8:	00000406 	br	3550c <alt_iic_isr_register+0xc4>
   354fc:	e0bff817 	ldw	r2,-32(fp)
   35500:	100b883a 	mov	r5,r2
   35504:	e13ffc17 	ldw	r4,-16(fp)
   35508:	00353700 	call	35370 <alt_ic_irq_disable>
   3550c:	e0bff715 	stw	r2,-36(fp)
   35510:	e0bffa17 	ldw	r2,-24(fp)
   35514:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   35518:	e0bff917 	ldw	r2,-28(fp)
   3551c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   35520:	e0bff717 	ldw	r2,-36(fp)
}
   35524:	e037883a 	mov	sp,fp
   35528:	dfc00117 	ldw	ra,4(sp)
   3552c:	df000017 	ldw	fp,0(sp)
   35530:	dec00204 	addi	sp,sp,8
   35534:	f800283a 	ret

00035538 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   35538:	defff904 	addi	sp,sp,-28
   3553c:	dfc00615 	stw	ra,24(sp)
   35540:	df000515 	stw	fp,20(sp)
   35544:	df000504 	addi	fp,sp,20
   35548:	e13ffc15 	stw	r4,-16(fp)
   3554c:	e17ffd15 	stw	r5,-12(fp)
   35550:	e1bffe15 	stw	r6,-8(fp)
   35554:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   35558:	e1bfff17 	ldw	r6,-4(fp)
   3555c:	e17ffe17 	ldw	r5,-8(fp)
   35560:	e13ffd17 	ldw	r4,-12(fp)
   35564:	00315880 	call	31588 <open>
   35568:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3556c:	e0bffb17 	ldw	r2,-20(fp)
   35570:	10001c16 	blt	r2,zero,355e4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   35574:	00810034 	movhi	r2,1024
   35578:	10833104 	addi	r2,r2,3268
   3557c:	e0fffb17 	ldw	r3,-20(fp)
   35580:	18c00324 	muli	r3,r3,12
   35584:	10c5883a 	add	r2,r2,r3
   35588:	10c00017 	ldw	r3,0(r2)
   3558c:	e0bffc17 	ldw	r2,-16(fp)
   35590:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   35594:	00810034 	movhi	r2,1024
   35598:	10833104 	addi	r2,r2,3268
   3559c:	e0fffb17 	ldw	r3,-20(fp)
   355a0:	18c00324 	muli	r3,r3,12
   355a4:	10c5883a 	add	r2,r2,r3
   355a8:	10800104 	addi	r2,r2,4
   355ac:	10c00017 	ldw	r3,0(r2)
   355b0:	e0bffc17 	ldw	r2,-16(fp)
   355b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   355b8:	00810034 	movhi	r2,1024
   355bc:	10833104 	addi	r2,r2,3268
   355c0:	e0fffb17 	ldw	r3,-20(fp)
   355c4:	18c00324 	muli	r3,r3,12
   355c8:	10c5883a 	add	r2,r2,r3
   355cc:	10800204 	addi	r2,r2,8
   355d0:	10c00017 	ldw	r3,0(r2)
   355d4:	e0bffc17 	ldw	r2,-16(fp)
   355d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   355dc:	e13ffb17 	ldw	r4,-20(fp)
   355e0:	00318140 	call	31814 <alt_release_fd>
  }
} 
   355e4:	0001883a 	nop
   355e8:	e037883a 	mov	sp,fp
   355ec:	dfc00117 	ldw	ra,4(sp)
   355f0:	df000017 	ldw	fp,0(sp)
   355f4:	dec00204 	addi	sp,sp,8
   355f8:	f800283a 	ret

000355fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   355fc:	defffb04 	addi	sp,sp,-20
   35600:	dfc00415 	stw	ra,16(sp)
   35604:	df000315 	stw	fp,12(sp)
   35608:	df000304 	addi	fp,sp,12
   3560c:	e13ffd15 	stw	r4,-12(fp)
   35610:	e17ffe15 	stw	r5,-8(fp)
   35614:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   35618:	01c07fc4 	movi	r7,511
   3561c:	01800044 	movi	r6,1
   35620:	e17ffd17 	ldw	r5,-12(fp)
   35624:	01010034 	movhi	r4,1024
   35628:	21033404 	addi	r4,r4,3280
   3562c:	00355380 	call	35538 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   35630:	01c07fc4 	movi	r7,511
   35634:	000d883a 	mov	r6,zero
   35638:	e17ffe17 	ldw	r5,-8(fp)
   3563c:	01010034 	movhi	r4,1024
   35640:	21033104 	addi	r4,r4,3268
   35644:	00355380 	call	35538 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   35648:	01c07fc4 	movi	r7,511
   3564c:	01800044 	movi	r6,1
   35650:	e17fff17 	ldw	r5,-4(fp)
   35654:	01010034 	movhi	r4,1024
   35658:	21033704 	addi	r4,r4,3292
   3565c:	00355380 	call	35538 <alt_open_fd>
}  
   35660:	0001883a 	nop
   35664:	e037883a 	mov	sp,fp
   35668:	dfc00117 	ldw	ra,4(sp)
   3566c:	df000017 	ldw	fp,0(sp)
   35670:	dec00204 	addi	sp,sp,8
   35674:	f800283a 	ret

00035678 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   35678:	defff204 	addi	sp,sp,-56
   3567c:	dfc00a15 	stw	ra,40(sp)
   35680:	df000915 	stw	fp,36(sp)
   35684:	df000904 	addi	fp,sp,36
   35688:	e13fff15 	stw	r4,-4(fp)
   3568c:	e1400215 	stw	r5,8(fp)
   35690:	e1800315 	stw	r6,12(fp)
   35694:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   35698:	e0800204 	addi	r2,fp,8
   3569c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   356a0:	e0bfff17 	ldw	r2,-4(fp)
   356a4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   356a8:	00006f06 	br	35868 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   356ac:	e0bff807 	ldb	r2,-32(fp)
   356b0:	10800960 	cmpeqi	r2,r2,37
   356b4:	1000041e 	bne	r2,zero,356c8 <alt_printf+0x50>
        {
            alt_putchar(c);
   356b8:	e0bff807 	ldb	r2,-32(fp)
   356bc:	1009883a 	mov	r4,r2
   356c0:	00358a40 	call	358a4 <alt_putchar>
   356c4:	00006806 	br	35868 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   356c8:	e0bff717 	ldw	r2,-36(fp)
   356cc:	10c00044 	addi	r3,r2,1
   356d0:	e0fff715 	stw	r3,-36(fp)
   356d4:	10800003 	ldbu	r2,0(r2)
   356d8:	e0bff805 	stb	r2,-32(fp)
   356dc:	e0bff807 	ldb	r2,-32(fp)
   356e0:	10006926 	beq	r2,zero,35888 <alt_printf+0x210>
            {
                if (c == '%')
   356e4:	e0bff807 	ldb	r2,-32(fp)
   356e8:	10800958 	cmpnei	r2,r2,37
   356ec:	1000041e 	bne	r2,zero,35700 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   356f0:	e0bff807 	ldb	r2,-32(fp)
   356f4:	1009883a 	mov	r4,r2
   356f8:	00358a40 	call	358a4 <alt_putchar>
   356fc:	00005a06 	br	35868 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   35700:	e0bff807 	ldb	r2,-32(fp)
   35704:	108018d8 	cmpnei	r2,r2,99
   35708:	1000081e 	bne	r2,zero,3572c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   3570c:	e0bffe17 	ldw	r2,-8(fp)
   35710:	10c00104 	addi	r3,r2,4
   35714:	e0fffe15 	stw	r3,-8(fp)
   35718:	10800017 	ldw	r2,0(r2)
   3571c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   35720:	e13ffd17 	ldw	r4,-12(fp)
   35724:	00358a40 	call	358a4 <alt_putchar>
   35728:	00004f06 	br	35868 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   3572c:	e0bff807 	ldb	r2,-32(fp)
   35730:	10801e18 	cmpnei	r2,r2,120
   35734:	1000341e 	bne	r2,zero,35808 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   35738:	e0bffe17 	ldw	r2,-8(fp)
   3573c:	10c00104 	addi	r3,r2,4
   35740:	e0fffe15 	stw	r3,-8(fp)
   35744:	10800017 	ldw	r2,0(r2)
   35748:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   3574c:	e0bffb17 	ldw	r2,-20(fp)
   35750:	1000031e 	bne	r2,zero,35760 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   35754:	01000c04 	movi	r4,48
   35758:	00358a40 	call	358a4 <alt_putchar>
                        continue;
   3575c:	00004206 	br	35868 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   35760:	00800704 	movi	r2,28
   35764:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   35768:	00000306 	br	35778 <alt_printf+0x100>
                        digit_shift -= 4;
   3576c:	e0bff917 	ldw	r2,-28(fp)
   35770:	10bfff04 	addi	r2,r2,-4
   35774:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   35778:	00c003c4 	movi	r3,15
   3577c:	e0bff917 	ldw	r2,-28(fp)
   35780:	1884983a 	sll	r2,r3,r2
   35784:	1007883a 	mov	r3,r2
   35788:	e0bffb17 	ldw	r2,-20(fp)
   3578c:	1884703a 	and	r2,r3,r2
   35790:	103ff626 	beq	r2,zero,3576c <__alt_data_end+0xf803576c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   35794:	00001906 	br	357fc <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   35798:	00c003c4 	movi	r3,15
   3579c:	e0bff917 	ldw	r2,-28(fp)
   357a0:	1884983a 	sll	r2,r3,r2
   357a4:	1007883a 	mov	r3,r2
   357a8:	e0bffb17 	ldw	r2,-20(fp)
   357ac:	1886703a 	and	r3,r3,r2
   357b0:	e0bff917 	ldw	r2,-28(fp)
   357b4:	1884d83a 	srl	r2,r3,r2
   357b8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   357bc:	e0bffc17 	ldw	r2,-16(fp)
   357c0:	108002a8 	cmpgeui	r2,r2,10
   357c4:	1000041e 	bne	r2,zero,357d8 <alt_printf+0x160>
                            c = '0' + digit;
   357c8:	e0bffc17 	ldw	r2,-16(fp)
   357cc:	10800c04 	addi	r2,r2,48
   357d0:	e0bff805 	stb	r2,-32(fp)
   357d4:	00000306 	br	357e4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   357d8:	e0bffc17 	ldw	r2,-16(fp)
   357dc:	108015c4 	addi	r2,r2,87
   357e0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   357e4:	e0bff807 	ldb	r2,-32(fp)
   357e8:	1009883a 	mov	r4,r2
   357ec:	00358a40 	call	358a4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   357f0:	e0bff917 	ldw	r2,-28(fp)
   357f4:	10bfff04 	addi	r2,r2,-4
   357f8:	e0bff915 	stw	r2,-28(fp)
   357fc:	e0bff917 	ldw	r2,-28(fp)
   35800:	103fe50e 	bge	r2,zero,35798 <__alt_data_end+0xf8035798>
   35804:	00001806 	br	35868 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   35808:	e0bff807 	ldb	r2,-32(fp)
   3580c:	10801cd8 	cmpnei	r2,r2,115
   35810:	1000151e 	bne	r2,zero,35868 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   35814:	e0bffe17 	ldw	r2,-8(fp)
   35818:	10c00104 	addi	r3,r2,4
   3581c:	e0fffe15 	stw	r3,-8(fp)
   35820:	10800017 	ldw	r2,0(r2)
   35824:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   35828:	00000906 	br	35850 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   3582c:	e0bffa17 	ldw	r2,-24(fp)
   35830:	10c00044 	addi	r3,r2,1
   35834:	e0fffa15 	stw	r3,-24(fp)
   35838:	10800003 	ldbu	r2,0(r2)
   3583c:	10803fcc 	andi	r2,r2,255
   35840:	1080201c 	xori	r2,r2,128
   35844:	10bfe004 	addi	r2,r2,-128
   35848:	1009883a 	mov	r4,r2
   3584c:	00358a40 	call	358a4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   35850:	e0bffa17 	ldw	r2,-24(fp)
   35854:	10800003 	ldbu	r2,0(r2)
   35858:	10803fcc 	andi	r2,r2,255
   3585c:	1080201c 	xori	r2,r2,128
   35860:	10bfe004 	addi	r2,r2,-128
   35864:	103ff11e 	bne	r2,zero,3582c <__alt_data_end+0xf803582c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   35868:	e0bff717 	ldw	r2,-36(fp)
   3586c:	10c00044 	addi	r3,r2,1
   35870:	e0fff715 	stw	r3,-36(fp)
   35874:	10800003 	ldbu	r2,0(r2)
   35878:	e0bff805 	stb	r2,-32(fp)
   3587c:	e0bff807 	ldb	r2,-32(fp)
   35880:	103f8a1e 	bne	r2,zero,356ac <__alt_data_end+0xf80356ac>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   35884:	00000106 	br	3588c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   35888:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   3588c:	0001883a 	nop
   35890:	e037883a 	mov	sp,fp
   35894:	dfc00117 	ldw	ra,4(sp)
   35898:	df000017 	ldw	fp,0(sp)
   3589c:	dec00504 	addi	sp,sp,20
   358a0:	f800283a 	ret

000358a4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   358a4:	defffd04 	addi	sp,sp,-12
   358a8:	dfc00215 	stw	ra,8(sp)
   358ac:	df000115 	stw	fp,4(sp)
   358b0:	df000104 	addi	fp,sp,4
   358b4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   358b8:	d0a00117 	ldw	r2,-32764(gp)
   358bc:	10800217 	ldw	r2,8(r2)
   358c0:	100b883a 	mov	r5,r2
   358c4:	e13fff17 	ldw	r4,-4(fp)
   358c8:	0035d3c0 	call	35d3c <putc>
#endif
#endif
}
   358cc:	e037883a 	mov	sp,fp
   358d0:	dfc00117 	ldw	ra,4(sp)
   358d4:	df000017 	ldw	fp,0(sp)
   358d8:	dec00204 	addi	sp,sp,8
   358dc:	f800283a 	ret

000358e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   358e0:	defffa04 	addi	sp,sp,-24
   358e4:	df000515 	stw	fp,20(sp)
   358e8:	df000504 	addi	fp,sp,20
   358ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   358f0:	0005303a 	rdctl	r2,status
   358f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   358f8:	e0fffc17 	ldw	r3,-16(fp)
   358fc:	00bfff84 	movi	r2,-2
   35900:	1884703a 	and	r2,r3,r2
   35904:	1001703a 	wrctl	status,r2
  
  return context;
   35908:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   3590c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   35910:	e0bfff17 	ldw	r2,-4(fp)
   35914:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   35918:	e0bffd17 	ldw	r2,-12(fp)
   3591c:	10800017 	ldw	r2,0(r2)
   35920:	e0fffd17 	ldw	r3,-12(fp)
   35924:	18c00117 	ldw	r3,4(r3)
   35928:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   3592c:	e0bffd17 	ldw	r2,-12(fp)
   35930:	10800117 	ldw	r2,4(r2)
   35934:	e0fffd17 	ldw	r3,-12(fp)
   35938:	18c00017 	ldw	r3,0(r3)
   3593c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   35940:	e0bffd17 	ldw	r2,-12(fp)
   35944:	e0fffd17 	ldw	r3,-12(fp)
   35948:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   3594c:	e0bffd17 	ldw	r2,-12(fp)
   35950:	e0fffd17 	ldw	r3,-12(fp)
   35954:	10c00015 	stw	r3,0(r2)
   35958:	e0bffb17 	ldw	r2,-20(fp)
   3595c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   35960:	e0bffe17 	ldw	r2,-8(fp)
   35964:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   35968:	0001883a 	nop
   3596c:	e037883a 	mov	sp,fp
   35970:	df000017 	ldw	fp,0(sp)
   35974:	dec00104 	addi	sp,sp,4
   35978:	f800283a 	ret

0003597c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   3597c:	defffb04 	addi	sp,sp,-20
   35980:	dfc00415 	stw	ra,16(sp)
   35984:	df000315 	stw	fp,12(sp)
   35988:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   3598c:	d0a01017 	ldw	r2,-32704(gp)
   35990:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   35994:	d0a01e17 	ldw	r2,-32648(gp)
   35998:	10800044 	addi	r2,r2,1
   3599c:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   359a0:	00002e06 	br	35a5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   359a4:	e0bffd17 	ldw	r2,-12(fp)
   359a8:	10800017 	ldw	r2,0(r2)
   359ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   359b0:	e0bffd17 	ldw	r2,-12(fp)
   359b4:	10800403 	ldbu	r2,16(r2)
   359b8:	10803fcc 	andi	r2,r2,255
   359bc:	10000426 	beq	r2,zero,359d0 <alt_tick+0x54>
   359c0:	d0a01e17 	ldw	r2,-32648(gp)
   359c4:	1000021e 	bne	r2,zero,359d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   359c8:	e0bffd17 	ldw	r2,-12(fp)
   359cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   359d0:	e0bffd17 	ldw	r2,-12(fp)
   359d4:	10800217 	ldw	r2,8(r2)
   359d8:	d0e01e17 	ldw	r3,-32648(gp)
   359dc:	18801d36 	bltu	r3,r2,35a54 <alt_tick+0xd8>
   359e0:	e0bffd17 	ldw	r2,-12(fp)
   359e4:	10800403 	ldbu	r2,16(r2)
   359e8:	10803fcc 	andi	r2,r2,255
   359ec:	1000191e 	bne	r2,zero,35a54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   359f0:	e0bffd17 	ldw	r2,-12(fp)
   359f4:	10800317 	ldw	r2,12(r2)
   359f8:	e0fffd17 	ldw	r3,-12(fp)
   359fc:	18c00517 	ldw	r3,20(r3)
   35a00:	1809883a 	mov	r4,r3
   35a04:	103ee83a 	callr	r2
   35a08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   35a0c:	e0bfff17 	ldw	r2,-4(fp)
   35a10:	1000031e 	bne	r2,zero,35a20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   35a14:	e13ffd17 	ldw	r4,-12(fp)
   35a18:	00358e00 	call	358e0 <alt_alarm_stop>
   35a1c:	00000d06 	br	35a54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   35a20:	e0bffd17 	ldw	r2,-12(fp)
   35a24:	10c00217 	ldw	r3,8(r2)
   35a28:	e0bfff17 	ldw	r2,-4(fp)
   35a2c:	1887883a 	add	r3,r3,r2
   35a30:	e0bffd17 	ldw	r2,-12(fp)
   35a34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   35a38:	e0bffd17 	ldw	r2,-12(fp)
   35a3c:	10c00217 	ldw	r3,8(r2)
   35a40:	d0a01e17 	ldw	r2,-32648(gp)
   35a44:	1880032e 	bgeu	r3,r2,35a54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   35a48:	e0bffd17 	ldw	r2,-12(fp)
   35a4c:	00c00044 	movi	r3,1
   35a50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   35a54:	e0bffe17 	ldw	r2,-8(fp)
   35a58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   35a5c:	e0fffd17 	ldw	r3,-12(fp)
   35a60:	d0a01004 	addi	r2,gp,-32704
   35a64:	18bfcf1e 	bne	r3,r2,359a4 <__alt_data_end+0xf80359a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   35a68:	0001883a 	nop
}
   35a6c:	0001883a 	nop
   35a70:	e037883a 	mov	sp,fp
   35a74:	dfc00117 	ldw	ra,4(sp)
   35a78:	df000017 	ldw	fp,0(sp)
   35a7c:	dec00204 	addi	sp,sp,8
   35a80:	f800283a 	ret

00035a84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   35a84:	deffff04 	addi	sp,sp,-4
   35a88:	df000015 	stw	fp,0(sp)
   35a8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   35a90:	000170fa 	wrctl	ienable,zero
}
   35a94:	0001883a 	nop
   35a98:	e037883a 	mov	sp,fp
   35a9c:	df000017 	ldw	fp,0(sp)
   35aa0:	dec00104 	addi	sp,sp,4
   35aa4:	f800283a 	ret

00035aa8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   35aa8:	defffb04 	addi	sp,sp,-20
   35aac:	df000415 	stw	fp,16(sp)
   35ab0:	df000404 	addi	fp,sp,16
   35ab4:	e13ffe15 	stw	r4,-8(fp)
   35ab8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   35abc:	e0bfff17 	ldw	r2,-4(fp)
   35ac0:	10840070 	cmpltui	r2,r2,4097
   35ac4:	1000021e 	bne	r2,zero,35ad0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   35ac8:	00840004 	movi	r2,4096
   35acc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   35ad0:	e0fffe17 	ldw	r3,-8(fp)
   35ad4:	e0bfff17 	ldw	r2,-4(fp)
   35ad8:	1885883a 	add	r2,r3,r2
   35adc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   35ae0:	e0bffe17 	ldw	r2,-8(fp)
   35ae4:	e0bffc15 	stw	r2,-16(fp)
   35ae8:	00000506 	br	35b00 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   35aec:	e0bffc17 	ldw	r2,-16(fp)
   35af0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   35af4:	e0bffc17 	ldw	r2,-16(fp)
   35af8:	10800804 	addi	r2,r2,32
   35afc:	e0bffc15 	stw	r2,-16(fp)
   35b00:	e0fffc17 	ldw	r3,-16(fp)
   35b04:	e0bffd17 	ldw	r2,-12(fp)
   35b08:	18bff836 	bltu	r3,r2,35aec <__alt_data_end+0xf8035aec>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   35b0c:	e0bffe17 	ldw	r2,-8(fp)
   35b10:	108007cc 	andi	r2,r2,31
   35b14:	10000226 	beq	r2,zero,35b20 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   35b18:	e0bffc17 	ldw	r2,-16(fp)
   35b1c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   35b20:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   35b24:	0001883a 	nop
   35b28:	e037883a 	mov	sp,fp
   35b2c:	df000017 	ldw	fp,0(sp)
   35b30:	dec00104 	addi	sp,sp,4
   35b34:	f800283a 	ret

00035b38 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   35b38:	defffe04 	addi	sp,sp,-8
   35b3c:	df000115 	stw	fp,4(sp)
   35b40:	df000104 	addi	fp,sp,4
   35b44:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   35b48:	e0bfff17 	ldw	r2,-4(fp)
   35b4c:	10bffe84 	addi	r2,r2,-6
   35b50:	10c00428 	cmpgeui	r3,r2,16
   35b54:	18001a1e 	bne	r3,zero,35bc0 <alt_exception_cause_generated_bad_addr+0x88>
   35b58:	100690ba 	slli	r3,r2,2
   35b5c:	008000f4 	movhi	r2,3
   35b60:	1096dc04 	addi	r2,r2,23408
   35b64:	1885883a 	add	r2,r3,r2
   35b68:	10800017 	ldw	r2,0(r2)
   35b6c:	1000683a 	jmp	r2
   35b70:	00035bb0 	cmpltui	zero,zero,3438
   35b74:	00035bb0 	cmpltui	zero,zero,3438
   35b78:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35b7c:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35b80:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35b84:	00035bb0 	cmpltui	zero,zero,3438
   35b88:	00035bb8 	rdprs	zero,zero,3438
   35b8c:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35b90:	00035bb0 	cmpltui	zero,zero,3438
   35b94:	00035bb0 	cmpltui	zero,zero,3438
   35b98:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35b9c:	00035bb0 	cmpltui	zero,zero,3438
   35ba0:	00035bb8 	rdprs	zero,zero,3438
   35ba4:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35ba8:	00035bc0 	call	35bc <__alt_mem_onchip_memory2_0-0x1ca44>
   35bac:	00035bb0 	cmpltui	zero,zero,3438
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   35bb0:	00800044 	movi	r2,1
   35bb4:	00000306 	br	35bc4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   35bb8:	0005883a 	mov	r2,zero
   35bbc:	00000106 	br	35bc4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   35bc0:	0005883a 	mov	r2,zero
  }
}
   35bc4:	e037883a 	mov	sp,fp
   35bc8:	df000017 	ldw	fp,0(sp)
   35bcc:	dec00104 	addi	sp,sp,4
   35bd0:	f800283a 	ret

00035bd4 <atexit>:
   35bd4:	200b883a 	mov	r5,r4
   35bd8:	000f883a 	mov	r7,zero
   35bdc:	000d883a 	mov	r6,zero
   35be0:	0009883a 	mov	r4,zero
   35be4:	0035e041 	jmpi	35e04 <__register_exitproc>

00035be8 <exit>:
   35be8:	defffe04 	addi	sp,sp,-8
   35bec:	000b883a 	mov	r5,zero
   35bf0:	dc000015 	stw	r16,0(sp)
   35bf4:	dfc00115 	stw	ra,4(sp)
   35bf8:	2021883a 	mov	r16,r4
   35bfc:	0035f1c0 	call	35f1c <__call_exitprocs>
   35c00:	00810034 	movhi	r2,1024
   35c04:	1087e804 	addi	r2,r2,8096
   35c08:	11000017 	ldw	r4,0(r2)
   35c0c:	20800f17 	ldw	r2,60(r4)
   35c10:	10000126 	beq	r2,zero,35c18 <exit+0x30>
   35c14:	103ee83a 	callr	r2
   35c18:	8009883a 	mov	r4,r16
   35c1c:	003609c0 	call	3609c <_exit>

00035c20 <memcmp>:
   35c20:	01c000c4 	movi	r7,3
   35c24:	3980192e 	bgeu	r7,r6,35c8c <memcmp+0x6c>
   35c28:	2144b03a 	or	r2,r4,r5
   35c2c:	11c4703a 	and	r2,r2,r7
   35c30:	10000f26 	beq	r2,zero,35c70 <memcmp+0x50>
   35c34:	20800003 	ldbu	r2,0(r4)
   35c38:	28c00003 	ldbu	r3,0(r5)
   35c3c:	10c0151e 	bne	r2,r3,35c94 <memcmp+0x74>
   35c40:	31bfff84 	addi	r6,r6,-2
   35c44:	01ffffc4 	movi	r7,-1
   35c48:	00000406 	br	35c5c <memcmp+0x3c>
   35c4c:	20800003 	ldbu	r2,0(r4)
   35c50:	28c00003 	ldbu	r3,0(r5)
   35c54:	31bfffc4 	addi	r6,r6,-1
   35c58:	10c00e1e 	bne	r2,r3,35c94 <memcmp+0x74>
   35c5c:	21000044 	addi	r4,r4,1
   35c60:	29400044 	addi	r5,r5,1
   35c64:	31fff91e 	bne	r6,r7,35c4c <__alt_data_end+0xf8035c4c>
   35c68:	0005883a 	mov	r2,zero
   35c6c:	f800283a 	ret
   35c70:	20c00017 	ldw	r3,0(r4)
   35c74:	28800017 	ldw	r2,0(r5)
   35c78:	18bfee1e 	bne	r3,r2,35c34 <__alt_data_end+0xf8035c34>
   35c7c:	31bfff04 	addi	r6,r6,-4
   35c80:	21000104 	addi	r4,r4,4
   35c84:	29400104 	addi	r5,r5,4
   35c88:	39bff936 	bltu	r7,r6,35c70 <__alt_data_end+0xf8035c70>
   35c8c:	303fe91e 	bne	r6,zero,35c34 <__alt_data_end+0xf8035c34>
   35c90:	003ff506 	br	35c68 <__alt_data_end+0xf8035c68>
   35c94:	10c5c83a 	sub	r2,r2,r3
   35c98:	f800283a 	ret

00035c9c <_putc_r>:
   35c9c:	defffc04 	addi	sp,sp,-16
   35ca0:	dc000215 	stw	r16,8(sp)
   35ca4:	dfc00315 	stw	ra,12(sp)
   35ca8:	2021883a 	mov	r16,r4
   35cac:	20000226 	beq	r4,zero,35cb8 <_putc_r+0x1c>
   35cb0:	20800e17 	ldw	r2,56(r4)
   35cb4:	10001b26 	beq	r2,zero,35d24 <_putc_r+0x88>
   35cb8:	30800217 	ldw	r2,8(r6)
   35cbc:	10bfffc4 	addi	r2,r2,-1
   35cc0:	30800215 	stw	r2,8(r6)
   35cc4:	10000a16 	blt	r2,zero,35cf0 <_putc_r+0x54>
   35cc8:	30800017 	ldw	r2,0(r6)
   35ccc:	11400005 	stb	r5,0(r2)
   35cd0:	30800017 	ldw	r2,0(r6)
   35cd4:	10c00044 	addi	r3,r2,1
   35cd8:	30c00015 	stw	r3,0(r6)
   35cdc:	10800003 	ldbu	r2,0(r2)
   35ce0:	dfc00317 	ldw	ra,12(sp)
   35ce4:	dc000217 	ldw	r16,8(sp)
   35ce8:	dec00404 	addi	sp,sp,16
   35cec:	f800283a 	ret
   35cf0:	30c00617 	ldw	r3,24(r6)
   35cf4:	10c00616 	blt	r2,r3,35d10 <_putc_r+0x74>
   35cf8:	30800017 	ldw	r2,0(r6)
   35cfc:	00c00284 	movi	r3,10
   35d00:	11400005 	stb	r5,0(r2)
   35d04:	30800017 	ldw	r2,0(r6)
   35d08:	11400003 	ldbu	r5,0(r2)
   35d0c:	28fff11e 	bne	r5,r3,35cd4 <__alt_data_end+0xf8035cd4>
   35d10:	8009883a 	mov	r4,r16
   35d14:	dfc00317 	ldw	ra,12(sp)
   35d18:	dc000217 	ldw	r16,8(sp)
   35d1c:	dec00404 	addi	sp,sp,16
   35d20:	002d8b81 	jmpi	2d8b8 <__swbuf_r>
   35d24:	d9400015 	stw	r5,0(sp)
   35d28:	d9800115 	stw	r6,4(sp)
   35d2c:	00282f80 	call	282f8 <__sinit>
   35d30:	d9800117 	ldw	r6,4(sp)
   35d34:	d9400017 	ldw	r5,0(sp)
   35d38:	003fdf06 	br	35cb8 <__alt_data_end+0xf8035cb8>

00035d3c <putc>:
   35d3c:	00810034 	movhi	r2,1024
   35d40:	defffc04 	addi	sp,sp,-16
   35d44:	1087e904 	addi	r2,r2,8100
   35d48:	dc000115 	stw	r16,4(sp)
   35d4c:	14000017 	ldw	r16,0(r2)
   35d50:	dc400215 	stw	r17,8(sp)
   35d54:	dfc00315 	stw	ra,12(sp)
   35d58:	2023883a 	mov	r17,r4
   35d5c:	80000226 	beq	r16,zero,35d68 <putc+0x2c>
   35d60:	80800e17 	ldw	r2,56(r16)
   35d64:	10001a26 	beq	r2,zero,35dd0 <putc+0x94>
   35d68:	28800217 	ldw	r2,8(r5)
   35d6c:	10bfffc4 	addi	r2,r2,-1
   35d70:	28800215 	stw	r2,8(r5)
   35d74:	10000b16 	blt	r2,zero,35da4 <putc+0x68>
   35d78:	28800017 	ldw	r2,0(r5)
   35d7c:	14400005 	stb	r17,0(r2)
   35d80:	28800017 	ldw	r2,0(r5)
   35d84:	10c00044 	addi	r3,r2,1
   35d88:	28c00015 	stw	r3,0(r5)
   35d8c:	10800003 	ldbu	r2,0(r2)
   35d90:	dfc00317 	ldw	ra,12(sp)
   35d94:	dc400217 	ldw	r17,8(sp)
   35d98:	dc000117 	ldw	r16,4(sp)
   35d9c:	dec00404 	addi	sp,sp,16
   35da0:	f800283a 	ret
   35da4:	28c00617 	ldw	r3,24(r5)
   35da8:	10c00e16 	blt	r2,r3,35de4 <putc+0xa8>
   35dac:	28800017 	ldw	r2,0(r5)
   35db0:	01000284 	movi	r4,10
   35db4:	14400005 	stb	r17,0(r2)
   35db8:	28800017 	ldw	r2,0(r5)
   35dbc:	10c00003 	ldbu	r3,0(r2)
   35dc0:	193ff01e 	bne	r3,r4,35d84 <__alt_data_end+0xf8035d84>
   35dc4:	280d883a 	mov	r6,r5
   35dc8:	180b883a 	mov	r5,r3
   35dcc:	00000706 	br	35dec <putc+0xb0>
   35dd0:	8009883a 	mov	r4,r16
   35dd4:	d9400015 	stw	r5,0(sp)
   35dd8:	00282f80 	call	282f8 <__sinit>
   35ddc:	d9400017 	ldw	r5,0(sp)
   35de0:	003fe106 	br	35d68 <__alt_data_end+0xf8035d68>
   35de4:	280d883a 	mov	r6,r5
   35de8:	880b883a 	mov	r5,r17
   35dec:	8009883a 	mov	r4,r16
   35df0:	dfc00317 	ldw	ra,12(sp)
   35df4:	dc400217 	ldw	r17,8(sp)
   35df8:	dc000117 	ldw	r16,4(sp)
   35dfc:	dec00404 	addi	sp,sp,16
   35e00:	002d8b81 	jmpi	2d8b8 <__swbuf_r>

00035e04 <__register_exitproc>:
   35e04:	defffa04 	addi	sp,sp,-24
   35e08:	dc000315 	stw	r16,12(sp)
   35e0c:	04010034 	movhi	r16,1024
   35e10:	8407e804 	addi	r16,r16,8096
   35e14:	80c00017 	ldw	r3,0(r16)
   35e18:	dc400415 	stw	r17,16(sp)
   35e1c:	dfc00515 	stw	ra,20(sp)
   35e20:	18805217 	ldw	r2,328(r3)
   35e24:	2023883a 	mov	r17,r4
   35e28:	10003726 	beq	r2,zero,35f08 <__register_exitproc+0x104>
   35e2c:	10c00117 	ldw	r3,4(r2)
   35e30:	010007c4 	movi	r4,31
   35e34:	20c00e16 	blt	r4,r3,35e70 <__register_exitproc+0x6c>
   35e38:	1a000044 	addi	r8,r3,1
   35e3c:	8800221e 	bne	r17,zero,35ec8 <__register_exitproc+0xc4>
   35e40:	18c00084 	addi	r3,r3,2
   35e44:	18c7883a 	add	r3,r3,r3
   35e48:	18c7883a 	add	r3,r3,r3
   35e4c:	12000115 	stw	r8,4(r2)
   35e50:	10c7883a 	add	r3,r2,r3
   35e54:	19400015 	stw	r5,0(r3)
   35e58:	0005883a 	mov	r2,zero
   35e5c:	dfc00517 	ldw	ra,20(sp)
   35e60:	dc400417 	ldw	r17,16(sp)
   35e64:	dc000317 	ldw	r16,12(sp)
   35e68:	dec00604 	addi	sp,sp,24
   35e6c:	f800283a 	ret
   35e70:	00800034 	movhi	r2,0
   35e74:	10800004 	addi	r2,r2,0
   35e78:	10002626 	beq	r2,zero,35f14 <__register_exitproc+0x110>
   35e7c:	01006404 	movi	r4,400
   35e80:	d9400015 	stw	r5,0(sp)
   35e84:	d9800115 	stw	r6,4(sp)
   35e88:	d9c00215 	stw	r7,8(sp)
   35e8c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   35e90:	d9400017 	ldw	r5,0(sp)
   35e94:	d9800117 	ldw	r6,4(sp)
   35e98:	d9c00217 	ldw	r7,8(sp)
   35e9c:	10001d26 	beq	r2,zero,35f14 <__register_exitproc+0x110>
   35ea0:	81000017 	ldw	r4,0(r16)
   35ea4:	10000115 	stw	zero,4(r2)
   35ea8:	02000044 	movi	r8,1
   35eac:	22405217 	ldw	r9,328(r4)
   35eb0:	0007883a 	mov	r3,zero
   35eb4:	12400015 	stw	r9,0(r2)
   35eb8:	20805215 	stw	r2,328(r4)
   35ebc:	10006215 	stw	zero,392(r2)
   35ec0:	10006315 	stw	zero,396(r2)
   35ec4:	883fde26 	beq	r17,zero,35e40 <__alt_data_end+0xf8035e40>
   35ec8:	18c9883a 	add	r4,r3,r3
   35ecc:	2109883a 	add	r4,r4,r4
   35ed0:	1109883a 	add	r4,r2,r4
   35ed4:	21802215 	stw	r6,136(r4)
   35ed8:	01800044 	movi	r6,1
   35edc:	12406217 	ldw	r9,392(r2)
   35ee0:	30cc983a 	sll	r6,r6,r3
   35ee4:	4992b03a 	or	r9,r9,r6
   35ee8:	12406215 	stw	r9,392(r2)
   35eec:	21c04215 	stw	r7,264(r4)
   35ef0:	01000084 	movi	r4,2
   35ef4:	893fd21e 	bne	r17,r4,35e40 <__alt_data_end+0xf8035e40>
   35ef8:	11006317 	ldw	r4,396(r2)
   35efc:	218cb03a 	or	r6,r4,r6
   35f00:	11806315 	stw	r6,396(r2)
   35f04:	003fce06 	br	35e40 <__alt_data_end+0xf8035e40>
   35f08:	18805304 	addi	r2,r3,332
   35f0c:	18805215 	stw	r2,328(r3)
   35f10:	003fc606 	br	35e2c <__alt_data_end+0xf8035e2c>
   35f14:	00bfffc4 	movi	r2,-1
   35f18:	003fd006 	br	35e5c <__alt_data_end+0xf8035e5c>

00035f1c <__call_exitprocs>:
   35f1c:	defff504 	addi	sp,sp,-44
   35f20:	df000915 	stw	fp,36(sp)
   35f24:	dd400615 	stw	r21,24(sp)
   35f28:	dc800315 	stw	r18,12(sp)
   35f2c:	dfc00a15 	stw	ra,40(sp)
   35f30:	ddc00815 	stw	r23,32(sp)
   35f34:	dd800715 	stw	r22,28(sp)
   35f38:	dd000515 	stw	r20,20(sp)
   35f3c:	dcc00415 	stw	r19,16(sp)
   35f40:	dc400215 	stw	r17,8(sp)
   35f44:	dc000115 	stw	r16,4(sp)
   35f48:	d9000015 	stw	r4,0(sp)
   35f4c:	2839883a 	mov	fp,r5
   35f50:	04800044 	movi	r18,1
   35f54:	057fffc4 	movi	r21,-1
   35f58:	00810034 	movhi	r2,1024
   35f5c:	1087e804 	addi	r2,r2,8096
   35f60:	12000017 	ldw	r8,0(r2)
   35f64:	45005217 	ldw	r20,328(r8)
   35f68:	44c05204 	addi	r19,r8,328
   35f6c:	a0001c26 	beq	r20,zero,35fe0 <__call_exitprocs+0xc4>
   35f70:	a0800117 	ldw	r2,4(r20)
   35f74:	15ffffc4 	addi	r23,r2,-1
   35f78:	b8000d16 	blt	r23,zero,35fb0 <__call_exitprocs+0x94>
   35f7c:	14000044 	addi	r16,r2,1
   35f80:	8421883a 	add	r16,r16,r16
   35f84:	8421883a 	add	r16,r16,r16
   35f88:	84402004 	addi	r17,r16,128
   35f8c:	a463883a 	add	r17,r20,r17
   35f90:	a421883a 	add	r16,r20,r16
   35f94:	e0001e26 	beq	fp,zero,36010 <__call_exitprocs+0xf4>
   35f98:	80804017 	ldw	r2,256(r16)
   35f9c:	e0801c26 	beq	fp,r2,36010 <__call_exitprocs+0xf4>
   35fa0:	bdffffc4 	addi	r23,r23,-1
   35fa4:	843fff04 	addi	r16,r16,-4
   35fa8:	8c7fff04 	addi	r17,r17,-4
   35fac:	bd7ff91e 	bne	r23,r21,35f94 <__alt_data_end+0xf8035f94>
   35fb0:	00800034 	movhi	r2,0
   35fb4:	10800004 	addi	r2,r2,0
   35fb8:	10000926 	beq	r2,zero,35fe0 <__call_exitprocs+0xc4>
   35fbc:	a0800117 	ldw	r2,4(r20)
   35fc0:	1000301e 	bne	r2,zero,36084 <__call_exitprocs+0x168>
   35fc4:	a0800017 	ldw	r2,0(r20)
   35fc8:	10003226 	beq	r2,zero,36094 <__call_exitprocs+0x178>
   35fcc:	a009883a 	mov	r4,r20
   35fd0:	98800015 	stw	r2,0(r19)
   35fd4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   35fd8:	9d000017 	ldw	r20,0(r19)
   35fdc:	a03fe41e 	bne	r20,zero,35f70 <__alt_data_end+0xf8035f70>
   35fe0:	dfc00a17 	ldw	ra,40(sp)
   35fe4:	df000917 	ldw	fp,36(sp)
   35fe8:	ddc00817 	ldw	r23,32(sp)
   35fec:	dd800717 	ldw	r22,28(sp)
   35ff0:	dd400617 	ldw	r21,24(sp)
   35ff4:	dd000517 	ldw	r20,20(sp)
   35ff8:	dcc00417 	ldw	r19,16(sp)
   35ffc:	dc800317 	ldw	r18,12(sp)
   36000:	dc400217 	ldw	r17,8(sp)
   36004:	dc000117 	ldw	r16,4(sp)
   36008:	dec00b04 	addi	sp,sp,44
   3600c:	f800283a 	ret
   36010:	a0800117 	ldw	r2,4(r20)
   36014:	80c00017 	ldw	r3,0(r16)
   36018:	10bfffc4 	addi	r2,r2,-1
   3601c:	15c01426 	beq	r2,r23,36070 <__call_exitprocs+0x154>
   36020:	80000015 	stw	zero,0(r16)
   36024:	183fde26 	beq	r3,zero,35fa0 <__alt_data_end+0xf8035fa0>
   36028:	95c8983a 	sll	r4,r18,r23
   3602c:	a0806217 	ldw	r2,392(r20)
   36030:	a5800117 	ldw	r22,4(r20)
   36034:	2084703a 	and	r2,r4,r2
   36038:	10000b26 	beq	r2,zero,36068 <__call_exitprocs+0x14c>
   3603c:	a0806317 	ldw	r2,396(r20)
   36040:	2088703a 	and	r4,r4,r2
   36044:	20000c1e 	bne	r4,zero,36078 <__call_exitprocs+0x15c>
   36048:	89400017 	ldw	r5,0(r17)
   3604c:	d9000017 	ldw	r4,0(sp)
   36050:	183ee83a 	callr	r3
   36054:	a0800117 	ldw	r2,4(r20)
   36058:	15bfbf1e 	bne	r2,r22,35f58 <__alt_data_end+0xf8035f58>
   3605c:	98800017 	ldw	r2,0(r19)
   36060:	153fcf26 	beq	r2,r20,35fa0 <__alt_data_end+0xf8035fa0>
   36064:	003fbc06 	br	35f58 <__alt_data_end+0xf8035f58>
   36068:	183ee83a 	callr	r3
   3606c:	003ff906 	br	36054 <__alt_data_end+0xf8036054>
   36070:	a5c00115 	stw	r23,4(r20)
   36074:	003feb06 	br	36024 <__alt_data_end+0xf8036024>
   36078:	89000017 	ldw	r4,0(r17)
   3607c:	183ee83a 	callr	r3
   36080:	003ff406 	br	36054 <__alt_data_end+0xf8036054>
   36084:	a0800017 	ldw	r2,0(r20)
   36088:	a027883a 	mov	r19,r20
   3608c:	1029883a 	mov	r20,r2
   36090:	003fb606 	br	35f6c <__alt_data_end+0xf8035f6c>
   36094:	0005883a 	mov	r2,zero
   36098:	003ffb06 	br	36088 <__alt_data_end+0xf8036088>

0003609c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   3609c:	defffd04 	addi	sp,sp,-12
   360a0:	df000215 	stw	fp,8(sp)
   360a4:	df000204 	addi	fp,sp,8
   360a8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   360ac:	0001883a 	nop
   360b0:	e0bfff17 	ldw	r2,-4(fp)
   360b4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   360b8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   360bc:	10000226 	beq	r2,zero,360c8 <_exit+0x2c>
    ALT_SIM_FAIL();
   360c0:	002af070 	cmpltui	zero,zero,43969
   360c4:	00000106 	br	360cc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   360c8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   360cc:	003fff06 	br	360cc <__alt_data_end+0xf80360cc>
